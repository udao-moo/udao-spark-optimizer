{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "45" : {
          "sign" : -887133149,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 44237719834,
          "rowCount" : 287257921,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
        },
        "34" : {
          "sign" : 1153698931,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 60193664,
          "rowCount" : 940526,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ca_state#123, ca_zip#124, ca_country#125] "
        },
        "12" : {
          "sign" : 1038018711,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 26954307198,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#5 = c_customer_sk#97) "
        },
        "51" : {
          "sign" : -459341749,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 15504000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
        },
        "8" : {
          "sign" : 897309173,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 118459872995,
          "rowCount" : 577853039,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#46) "
        },
        "19" : {
          "sign" : 1746352297,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 985338,
          "rowCount" : 2313,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(i_color#92) AND (i_color#92 = orchid)) AND isnotnull(i_item_sk#75)) "
        },
        "23" : {
          "sign" : -84657601,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 588,
          "rowCount" : 49,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
        },
        "4" : {
          "sign" : 1131786293,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 10168082233949,
          "rowCount" : 42191212589,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
        },
        "40" : {
          "sign" : -542846938,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 10168082233949,
          "rowCount" : 42191212589,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
        },
        "15" : {
          "sign" : -628374504,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 43776970976,
          "rowCount" : 288006388,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "11" : {
          "sign" : -1542410948,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 24753955590,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] "
        },
        "9" : {
          "sign" : 542990860,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 44237719834,
          "rowCount" : 287257921,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
        },
        "44" : {
          "sign" : -2033886360,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 118459872995,
          "rowCount" : 577853039,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#46) "
        },
        "33" : {
          "sign" : 58525475,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3686606208,
          "rowCount" : 28801611,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "22" : {
          "sign" : 812756911,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 588,
          "rowCount" : 49,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
        },
        "26" : {
          "sign" : -702144975,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 135108960,
          "rowCount" : 1930128,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] "
        },
        "50" : {
          "sign" : -1935493134,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 39926600456,
          "rowCount" : 262675003,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#145 [], xxhash64(ss_store_sk#9, 42))) "
        },
        "37" : {
          "sign" : 1750964353,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 24,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [(0.05 * avg(netpaid#2)) AS (0.05 * avg(netpaid))#137] "
        },
        "13" : {
          "sign" : 386676787,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 9456300108,
          "rowCount" : 262675003,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] "
        },
        "46" : {
          "sign" : 1568625866,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 45386751518,
          "rowCount" : 287257921,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#4 = i_item_sk#75) "
        },
        "24" : {
          "sign" : -1176082101,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 23471,
          "rowCount" : 49,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71)) "
        },
        "35" : {
          "sign" : -1835352789,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 231369396,
          "rowCount" : 940526,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_country#125) AND isnotnull(ca_zip#124)) "
        },
        "16" : {
          "sign" : 599239660,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 108,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0) AS bloomFilter#147] "
        },
        "5" : {
          "sign" : -372210032,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 64283634425,
          "rowCount" : 347479105,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
        },
        "10" : {
          "sign" : 924345019,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 45386751518,
          "rowCount" : 287257921,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#4 = i_item_sk#75) "
        },
        "48" : {
          "sign" : 798351448,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 26954307198,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#5 = c_customer_sk#97) "
        },
        "21" : {
          "sign" : -598031766,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 108,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#150] "
        },
        "43" : {
          "sign" : -777956203,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 113837048683,
          "rowCount" : 577853039,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
        },
        "32" : {
          "sign" : 2011675015,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3686606208,
          "rowCount" : 28801611,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27)) "
        },
        "49" : {
          "sign" : 556950544,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 9456300108,
          "rowCount" : 262675003,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] "
        },
        "6" : {
          "sign" : -1858880209,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 72623132945,
          "rowCount" : 347479105,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
        },
        "36" : {
          "sign" : 527040145,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 246000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#115, ca_address_id#116, ca_street_number#117, ca_street_name#118, ca_street_type#119, ca_suite_number#120, ca_city#121, ca_county#122, ca_state#123, ca_zip#124, ca_country#125, ca_gmt_offset#126, ca_location_type#127], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "1" : {
          "sign" : -905143467,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 1402543296,
          "rowCount" : 18214848,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#2) AS paid#0] "
        },
        "39" : {
          "sign" : 1136020672,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 6792785226829,
          "rowCount" : 42191212589,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
        },
        "17" : {
          "sign" : -487082655,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 27756,
          "rowCount" : 2313,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#75] "
        },
        "25" : {
          "sign" : 2043403682,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 192558,
          "rowCount" : 402,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "14" : {
          "sign" : -810424779,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 39926600456,
          "rowCount" : 262675003,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND (might_contain(scalar-subquery#148 [], xxhash64(ss_item_sk#4, 42)) AND might_contain(scalar-subquery#151 [], xxhash64(ss_store_sk#9, 42)))) "
        },
        "47" : {
          "sign" : -1092230439,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 24753955590,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] "
        },
        "31" : {
          "sign" : -1899214940,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 576032220,
          "rowCount" : 28801611,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_ticket_number#34L] "
        },
        "42" : {
          "sign" : -1904400784,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 72623132945,
          "rowCount" : 347479105,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
        },
        "0" : {
          "sign" : -2065057585,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 1402543296,
          "rowCount" : 18214848,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(paid#0) AND (cast(paid#0 as decimal(33,8)) > cast(scalar-subquery#1 [] as decimal(33,8)))) "
        },
        "20" : {
          "sign" : 228187507,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#75, i_item_id#76, i_rec_start_date#77, i_rec_end_date#78, i_item_desc#79, i_current_price#80, i_wholesale_cost#81, i_brand_id#82, i_brand#83, i_class_id#84, i_class#85, i_category_id#86, i_category#87, i_manufact_id#88, i_manufact#89, i_size#90, i_formulation#91, i_color#92, i_units#93, i_container#94, i_manager_id#95, i_product_name#96], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "27" : {
          "sign" : -14387779,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 482532000,
          "rowCount" : 1930128,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111)) "
        },
        "2" : {
          "sign" : 657481673,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 2911193668641,
          "rowCount" : 42191212589,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#2] "
        },
        "38" : {
          "sign" : -796224557,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 675059401424,
          "rowCount" : 42191212589,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#2] "
        },
        "18" : {
          "sign" : 119981835,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 27756,
          "rowCount" : 2313,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#75] "
        },
        "30" : {
          "sign" : 352920416,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2891,
          "rowCount" : 49,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] "
        },
        "7" : {
          "sign" : 2098152356,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 113837048683,
          "rowCount" : 577853039,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
        },
        "29" : {
          "sign" : 689378603,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 175788,
          "rowCount" : 2313,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
        },
        "41" : {
          "sign" : 1474050341,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 64283634425,
          "rowCount" : 347479105,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
        },
        "3" : {
          "sign" : 437197083,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 6792785226829,
          "rowCount" : 42191212589,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
        },
        "52" : {
          "sign" : 2095138697,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(i_item_sk#75) "
        },
        "28" : {
          "sign" : 2021572997,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 500000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#97, c_customer_id#98, c_current_cdemo_sk#99, c_current_hdemo_sk#100, c_current_addr_sk#101, c_first_shipto_date_sk#102, c_first_sales_date_sk#103, c_salutation#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_day#108, c_birth_month#109, c_birth_year#110, c_birth_country#111, c_login#112, c_email_address#113, c_last_review_date#114], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        }
      },
      "links" : [ {
        "fromId" : 15,
        "fromName" : "LogicalRelation",
        "toId" : 14,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "LogicalRelation",
        "toId" : 19,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "Filter",
        "toId" : 18,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "Project",
        "toId" : 17,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Project",
        "toId" : 16,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "Aggregate",
        "toId" : 14,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 25,
        "fromName" : "LogicalRelation",
        "toId" : 24,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "Filter",
        "toId" : 23,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "Project",
        "toId" : 22,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "Project",
        "toId" : 21,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Aggregate",
        "toId" : 14,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 14,
        "fromName" : "Filter",
        "toId" : 13,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Project",
        "toId" : 12,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "LogicalRelation",
        "toId" : 27,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "Filter",
        "toId" : 26,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "Project",
        "toId" : 12,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 12,
        "fromName" : "Join",
        "toId" : 11,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "Project",
        "toId" : 10,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "Filter",
        "toId" : 29,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 29,
        "fromName" : "Project",
        "toId" : 10,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Join",
        "toId" : 9,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Project",
        "toId" : 8,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "Filter",
        "toId" : 30,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 30,
        "fromName" : "Project",
        "toId" : 8,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Join",
        "toId" : 7,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Project",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 33,
        "fromName" : "LogicalRelation",
        "toId" : 32,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 32,
        "fromName" : "Filter",
        "toId" : 31,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 31,
        "fromName" : "Project",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Join",
        "toId" : 5,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Project",
        "toId" : 4,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 36,
        "fromName" : "LogicalRelation",
        "toId" : 35,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 35,
        "fromName" : "Filter",
        "toId" : 34,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 34,
        "fromName" : "Project",
        "toId" : 4,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Join",
        "toId" : 3,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Project",
        "toId" : 2,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Aggregate",
        "toId" : 1,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "Aggregate",
        "toId" : 0,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "LogicalRelation",
        "toId" : 50,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Aggregate",
        "toId" : 50,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 50,
        "fromName" : "Filter",
        "toId" : 49,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 49,
        "fromName" : "Project",
        "toId" : 48,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "Project",
        "toId" : 48,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 48,
        "fromName" : "Join",
        "toId" : 47,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 47,
        "fromName" : "Project",
        "toId" : 46,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "LogicalRelation",
        "toId" : 52,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 52,
        "fromName" : "Filter",
        "toId" : 51,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 51,
        "fromName" : "Project",
        "toId" : 46,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 46,
        "fromName" : "Join",
        "toId" : 45,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 45,
        "fromName" : "Project",
        "toId" : 44,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 30,
        "fromName" : "Project",
        "toId" : 44,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 44,
        "fromName" : "Join",
        "toId" : 43,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 43,
        "fromName" : "Project",
        "toId" : 42,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 31,
        "fromName" : "Project",
        "toId" : 42,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 42,
        "fromName" : "Join",
        "toId" : 41,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 41,
        "fromName" : "Project",
        "toId" : 40,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 34,
        "fromName" : "Project",
        "toId" : 40,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 40,
        "fromName" : "Join",
        "toId" : 39,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 39,
        "fromName" : "Project",
        "toId" : 38,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 38,
        "fromName" : "Aggregate",
        "toId" : 37,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 37,
        "fromName" : "Aggregate",
        "toId" : 0,
        "toName" : "Filter",
        "linkType" : "Subquery"
      } ],
      "rawPlan" : "Filter (isnotnull(paid#0) AND (cast(paid#0 as decimal(33,8)) > cast(scalar-subquery#1 [] as decimal(33,8))))\n:  +- Aggregate [(0.05 * avg(netpaid#2)) AS (0.05 * avg(netpaid))#137]\n:     +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#2]\n:        +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n:           +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n:              :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n:              :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n:              :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n:              :     :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n:              :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n:              :     :     :     :     :  +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#145 [], xxhash64(ss_store_sk#9, 42)))\n:              :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#150]\n:              :     :     :     :     :     :     +- Project [s_store_sk#46]\n:              :     :     :     :     :     :        +- Project [s_store_sk#46]\n:              :     :     :     :     :     :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :     :     :     :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n:              :     :     :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n:              :     :     :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n:              :     :     :     +- Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :        +- Filter isnotnull(i_item_sk#75)\n:              :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n:              :     :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n:              :     :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     +- Project [sr_item_sk#27, sr_ticket_number#34L]\n:              :        +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n:              :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n:              +- Project [ca_state#123, ca_zip#124, ca_country#125]\n:                 +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n:                    +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n+- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#2) AS paid#0]\n   +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#2]\n      +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n         +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n            :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n            :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n            :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n            :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n            :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n            :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n            :     :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n            :     :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n            :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n            :     :     :     :     :  +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND (might_contain(scalar-subquery#148 [], xxhash64(ss_item_sk#4, 42)) AND might_contain(scalar-subquery#151 [], xxhash64(ss_store_sk#9, 42))))\n            :     :     :     :     :     :  :- Aggregate [bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0) AS bloomFilter#147]\n            :     :     :     :     :     :  :  +- Project [i_item_sk#75]\n            :     :     :     :     :     :  :     +- Project [i_item_sk#75]\n            :     :     :     :     :     :  :        +- Filter ((isnotnull(i_color#92) AND (i_color#92 = orchid)) AND isnotnull(i_item_sk#75))\n            :     :     :     :     :     :  :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n            :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#150]\n            :     :     :     :     :     :     +- Project [s_store_sk#46]\n            :     :     :     :     :     :        +- Project [s_store_sk#46]\n            :     :     :     :     :     :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n            :     :     :     :     :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n            :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n            :     :     :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n            :     :     :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n            :     :     :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n            :     :     :     +- Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n            :     :     :        +- Filter ((isnotnull(i_color#92) AND (i_color#92 = orchid)) AND isnotnull(i_item_sk#75))\n            :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n            :     :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n            :     :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n            :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n            :     +- Project [sr_item_sk#27, sr_ticket_number#34L]\n            :        +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n            :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n            +- Project [ca_state#123, ca_zip#124, ca_country#125]\n               +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n                  +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 48296673742,
      "inputRowCount" : 320012401
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "12" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 2012214440,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1987810560,
            "rowCount" : 41412720,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15], ShuffleQueryStage 0 "
          },
          "8" : {
            "sign" : -1766452275,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2641587792949831680000,
            "rowCount" : 16306097487344640000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "19" : {
            "sign" : 2043403682,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 192558,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "23" : {
            "sign" : 1153698931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#123, ca_zip#124, ca_country#125] "
          },
          "4" : {
            "sign" : 220470235,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4441403228505869727041633280000,
            "rowCount" : 23012451961170309466536960000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "15" : {
            "sign" : 2021572997,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 500000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#97, c_customer_id#98, c_current_cdemo_sk#99, c_current_hdemo_sk#100, c_current_addr_sk#101, c_first_shipto_date_sk#102, c_first_sales_date_sk#103, c_salutation#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_day#108, c_birth_month#109, c_birth_year#110, c_birth_country#111, c_login#112, c_email_address#113, c_last_review_date#114], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "11" : {
            "sign" : -1528766840,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 7833321341959680,
            "rowCount" : 79931850428160,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#5 = c_customer_sk#97) "
          },
          "9" : {
            "sign" : 571135260,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2706812182899210240000,
            "rowCount" : 16306097487344640000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#4 = i_item_sk#75) "
          },
          "22" : {
            "sign" : 58525475,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "13" : {
            "sign" : -702144975,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 135108960,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "24" : {
            "sign" : -1835352789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 231369396,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_country#125) AND isnotnull(ca_zip#124)) "
          },
          "16" : {
            "sign" : 931765203,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 16488824,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95], ShuffleQueryStage 3 "
          },
          "5" : {
            "sign" : 1226299666,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4993702075573957154238520320000,
            "rowCount" : 23012451961170309466536960000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "10" : {
            "sign" : -2015256493,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 7193866538534400,
            "rowCount" : 79931850428160,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "21" : {
            "sign" : 2011675015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27)) "
          },
          "6" : {
            "sign" : -1598441247,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 163794749260376908800000,
            "rowCount" : 798998776879887360000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "1" : {
            "sign" : -266743732,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 40188800670832458595994965715985,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "17" : {
            "sign" : 352920416,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2891,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] "
          },
          "25" : {
            "sign" : 527040145,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#115, ca_address_id#116, ca_street_number#117, ca_street_name#118, ca_street_type#119, ca_suite_number#120, ca_city#121, ca_county#122, ca_state#123, ca_zip#124, ca_country#125, ca_gmt_offset#126, ca_location_type#127], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "14" : {
            "sign" : -14387779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 482532000,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111)) "
          },
          "0" : {
            "sign" : -1254080006,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163] "
          },
          "20" : {
            "sign" : -1899214940,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_ticket_number#34L] "
          },
          "2" : {
            "sign" : -8007308,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 472218407882281388502940847162835,
            "rowCount" : 2794191762617049636112076018715,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "18" : {
            "sign" : -1176082101,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 23471,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71)) "
          },
          "7" : {
            "sign" : -841706896,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 170186739475416007680000,
            "rowCount" : 798998776879887360000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#46) "
          },
          "3" : {
            "sign" : 862171490,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 695753748891645359391906928660035,
            "rowCount" : 2794191762617049636112076018715,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalRelation",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalRelation",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Filter",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalRelation",
          "toId" : 21,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Filter",
          "toId" : 20,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "LogicalRelation",
          "toId" : 24,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Filter",
          "toId" : 23,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163]\n+- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n   +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n      +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n         :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n         :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n         :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n         :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n         :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n         :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n         :     :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n         :     :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n         :     :     :     :     :- LogicalQueryStage Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15], ShuffleQueryStage 0\n         :     :     :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n         :     :     :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n         :     :     :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n         :     :     :     +- LogicalQueryStage Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95], ShuffleQueryStage 3\n         :     :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n         :     :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n         :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n         :     +- Project [sr_item_sk#27, sr_ticket_number#34L]\n         :        +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n         :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n         +- Project [ca_state#123, ca_zip#124, ca_country#125]\n            +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n               +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n"
      },
      "IM" : {
        "inputSizeInBytes" : 6437098150,
        "inputRowCount" : 73418733
      },
      "PD" : {
        "11" : [ 39317, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 39317, 39317, 39317, 35743, 39317, 35743, 35743, 39317, 39317, 39317, 35743, 39317, 39317, 35743, 35743, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 35743, 39317, 39317, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 35743, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 39317, 35743, 35743, 35743, 39317, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 39317, 35743, 35743, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 35743, 39317, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 39317, 35743, 35743, 39317, 39317, 35743, 39317, 35743, 35743, 35743, 35743, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 35743, 39317, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 39317, 39317 ],
        "10" : [ 3456889, 3501116, 3465177, 3439010, 3489774, 3483863, 3442190, 3443503, 3468893, 3439834, 3515814, 3440166, 3486374, 3482964, 3462151, 3437108, 3496964, 3537820, 3423865, 3434563, 3465259, 3426613, 3444692, 3504289, 3467479, 3466853, 3447280, 3570218, 3490334, 3490656, 3364398, 3417421, 3486556, 3381638, 3454982, 3492140, 3430915, 3421772, 3379506, 3434476, 3454406, 3481699, 3364237, 3464753, 3501022, 3391394, 3483867, 3459423, 3466211, 3485033, 3494282, 3461458, 3433389, 3506115, 3441713, 3424067, 3415286, 3409957, 3399897, 3447070, 3428523, 3529544, 3382316, 3458973, 3419408, 3511940, 3486271, 3418551, 3466270, 3441860, 3479647, 3416018, 3434302, 3465953, 3474326, 3454065, 3549426, 3452021, 3504284, 3421802, 3456246, 3502104, 3511056, 3351346, 3488716, 3411110, 3413858, 3463974, 3437456, 3556578, 3424696, 3453442, 3476419, 3417496, 3501142, 3519598, 3460159, 3448815, 3477689, 3398281, 3385440, 3509742, 3452458, 3370516, 3417510, 3466891, 3467086, 3550868, 3350976, 3420885, 3403189, 3437624, 3480506, 3443891, 3412606, 3436316, 3386571, 3422536, 3391636, 3374540, 3440121, 3449789, 3542064, 3425370, 3486688, 3522638, 3468153, 3466679, 3451975, 3404524, 3490157, 3483735, 3430636, 3435016, 3411561, 3436842, 3477828, 3470235, 3440381, 3444934, 3456156, 3346930, 3512840, 3512271, 3483956, 3502116, 3543469, 3423808, 3457163, 3424780, 3487396, 3473496, 3475556, 3499559, 3536884, 3516551, 3480296, 3494165, 3500325, 3398889, 3396814, 3410997, 3492915, 3398936, 3464573, 3511624, 3429185, 3500523, 3495514, 3418198, 3485610, 3558975, 3476671, 3482907, 3490102, 3397552, 3431913, 3408249, 3457648, 3431969, 3430781, 3456194, 3405252, 3417463, 3522869, 3477174, 3529055, 3512422, 3434744, 3452329, 3443578, 3450966, 3455298, 3377601, 3462517, 3483835, 3395394, 3442125, 3450768, 3414852 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226781180,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 24447,
        "IOBytes" : {
          "Total" : 13637391442,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 7366026108,
            "SW" : 6271365334
          }
        }
      }
    },
    "8" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : -1899214940,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_ticket_number#34L] "
          },
          "12" : {
            "sign" : 815965107,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 72623132945,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "8" : {
            "sign" : -842263021,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 675059401424,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "19" : {
            "sign" : 1867243163,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9456300108,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] "
          },
          "23" : {
            "sign" : 812756911,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "4" : {
            "sign" : -809696017,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 7952661407104,
            "rowCount" : 29674109728,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          },
          "15" : {
            "sign" : 455826232,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 44237719834,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "11" : {
            "sign" : 210705200,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 64283634425,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "9" : {
            "sign" : -859819627,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6792785226829,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "33" : {
            "sign" : 352920416,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2891,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] "
          },
          "22" : {
            "sign" : 1921382062,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176] "
          },
          "26" : {
            "sign" : 2043403682,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 192558,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "37" : {
            "sign" : 1153698931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#123, ca_zip#124, ca_country#125] "
          },
          "13" : {
            "sign" : 419855978,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 113837048683,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "24" : {
            "sign" : -84657601,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "35" : {
            "sign" : 2011675015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27)) "
          },
          "16" : {
            "sign" : 1746504807,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 45386751518,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#4 = i_item_sk#75) "
          },
          "5" : {
            "sign" : -225967158,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 34603008,
            "rowCount" : 31082,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 7, BroadcastQueryStage 8 "
          },
          "10" : {
            "sign" : 474468585,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 10168082233949,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          },
          "21" : {
            "sign" : -628374504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 43776970976,
            "rowCount" : 288006388,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "32" : {
            "sign" : 228187507,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#75, i_item_id#76, i_rec_start_date#77, i_rec_end_date#78, i_item_desc#79, i_current_price#80, i_wholesale_cost#81, i_brand_id#82, i_brand#83, i_class_id#84, i_class#85, i_category_id#86, i_category#87, i_manufact_id#88, i_manufact#89, i_size#90, i_formulation#91, i_color#92, i_units#93, i_container#94, i_manager_id#95, i_product_name#96], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "6" : {
            "sign" : 775636263,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 61040568,
            "rowCount" : 954704,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_state#123, ca_zip#124, ca_country#125], ShuffleQueryStage 5 "
          },
          "36" : {
            "sign" : 58525475,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : 1407047358,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 2492625217152,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157] "
          },
          "39" : {
            "sign" : 527040145,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#115, ca_address_id#116, ca_street_number#117, ca_street_name#118, ca_street_type#119, ca_suite_number#120, ca_city#121, ca_county#122, ca_state#123, ca_zip#124, ca_country#125, ca_gmt_offset#126, ca_location_type#127], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "17" : {
            "sign" : 1031245998,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24753955590,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "25" : {
            "sign" : -1176082101,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 23471,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71)) "
          },
          "14" : {
            "sign" : -1141989269,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 118459872995,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#46) "
          },
          "31" : {
            "sign" : 2095138697,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(i_item_sk#75) "
          },
          "0" : {
            "sign" : 624292507,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 2492625217152,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8)))) "
          },
          "20" : {
            "sign" : 1011872821,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39926600456,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42))) "
          },
          "27" : {
            "sign" : -702144975,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 135108960,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "2" : {
            "sign" : -188327514,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 2255232339328,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "38" : {
            "sign" : -1835352789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 231369396,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_country#125) AND isnotnull(ca_zip#124)) "
          },
          "18" : {
            "sign" : 102638235,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 26954307198,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#5 = c_customer_sk#97) "
          },
          "30" : {
            "sign" : -459341749,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 15504000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "7" : {
            "sign" : 1726153103,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163] "
          },
          "29" : {
            "sign" : 2021572997,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 500000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#97, c_customer_id#98, c_current_cdemo_sk#99, c_current_hdemo_sk#100, c_current_addr_sk#101, c_first_shipto_date_sk#102, c_first_sales_date_sk#103, c_salutation#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_day#108, c_birth_month#109, c_birth_year#110, c_birth_country#111, c_login#112, c_email_address#113, c_last_review_date#114], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : -1050706815,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 5578732628864,
            "rowCount" : 29674109728,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "28" : {
            "sign" : -14387779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 482532000,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111)) "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Aggregate",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalRelation",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "LogicalRelation",
          "toId" : 25,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Filter",
          "toId" : 24,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Project",
          "toId" : 23,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Project",
          "toId" : 22,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Aggregate",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 20,
          "fromName" : "Filter",
          "toId" : 19,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Project",
          "toId" : 18,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalRelation",
          "toId" : 28,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Filter",
          "toId" : 27,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Project",
          "toId" : 18,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Join",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "LogicalRelation",
          "toId" : 31,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Filter",
          "toId" : 30,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Project",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Join",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Filter",
          "toId" : 33,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Join",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "LogicalRelation",
          "toId" : 35,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "Filter",
          "toId" : 34,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Join",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "LogicalRelation",
          "toId" : 38,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "Filter",
          "toId" : 37,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Aggregate",
          "toId" : 7,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Subquery"
        } ],
        "rawPlan" : "Filter (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8))))\n:  +- Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163]\n:     +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n:        +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n:           +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n:              :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n:              :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n:              :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n:              :     :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n:              :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n:              :     :     :     :     :  +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42)))\n:              :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n:              :     :     :     :     :     :     +- Project [s_store_sk#46]\n:              :     :     :     :     :     :        +- Project [s_store_sk#46]\n:              :     :     :     :     :     :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :     :     :     :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n:              :     :     :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n:              :     :     :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n:              :     :     :     +- Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :        +- Filter isnotnull(i_item_sk#75)\n:              :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n:              :     :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n:              :     :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     +- Project [sr_item_sk#27, sr_ticket_number#34L]\n:              :        +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n:              :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n:              +- Project [ca_state#123, ca_zip#124, ca_country#125]\n:                 +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n:                    +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n+- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157]\n   +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n      +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n         +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n            :- LogicalQueryStage LogicalQueryStage Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 7, BroadcastQueryStage 8\n            +- LogicalQueryStage Project [ca_state#123, ca_zip#124, ca_country#125], ShuffleQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 95643576,
        "inputRowCount" : 985786
      },
      "PD" : {
        "5" : [ 10353, 13780, 29539, 20176, 18341, 22193, 24413, 43249, 57565, 57565, 18341, 20176, 47574, 35743, 43249, 35743, 13780, 43249, 20176, 47574, 32493, 22193, 29539, 26854, 8556, 18341, 32493, 29539, 47574, 4390, 7778, 22193, 12527, 10353, 20176, 29539, 26854, 43249, 39317, 22193, 29539, 24413, 15158, 13780, 24413, 18341, 35743, 32493, 32493, 35743, 57565, 43249, 13780, 29539, 39317, 24413, 12527, 47574, 43249, 26854, 22193, 32493, 26854, 13780, 22193, 47574, 39317, 16674, 26854, 29539, 13780, 13780, 22193, 12527, 18341, 39317, 6428, 18341, 39317, 26854, 52331, 39317, 32493, 32493, 32493, 9412, 29539, 26854, 11388, 18341, 10353, 12527, 11388, 43249, 52331, 18341, 15158, 13780, 13780, 32493, 35743, 43249, 32493, 16674, 15158, 20176, 18341, 22193, 29539, 3628, 29539, 24413, 16674, 22193, 16674, 39317, 22193, 57565, 29539, 32493, 13780, 32493, 43249, 20176, 22193, 24413, 4830, 13780, 22193, 26854, 15158, 24413, 22193, 32493, 35743, 47574, 29539, 29539, 24413, 9412, 18341, 29539, 43249, 11388, 18341, 32493, 47574, 22193, 47574, 24413, 26854, 47574, 18341, 11388, 43249, 15158, 29539, 39317, 24413, 16674, 52331, 20176, 10353, 29539, 22193, 12527, 18341, 10353, 47574, 15158, 8556, 47574, 47574, 35743, 9412, 29539, 32493, 13780, 16674, 35743, 47574, 22193, 63321, 24413, 24413, 24413, 26854, 52331, 26854, 35743, 47574, 16674, 29539, 22193, 39317, 29539, 24413, 18341, 35743, 22193 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226746839,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 58788,
        "IOBytes" : {
          "Total" : 16665857043,
          "Details" : {
            "IR" : 2357123983,
            "IW" : 0,
            "SR" : 7371297830,
            "SW" : 6937435230
          }
        }
      }
    },
    "4" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : 2095138697,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(i_item_sk#75) "
          },
          "12" : {
            "sign" : -859819627,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6792785226829,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "8" : {
            "sign" : -114833265,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sr_item_sk#27, sr_ticket_number#34L], ShuffleQueryStage 4 "
          },
          "19" : {
            "sign" : 1746504807,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 45386751518,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#4 = i_item_sk#75) "
          },
          "23" : {
            "sign" : 1011872821,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39926600456,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42))) "
          },
          "4" : {
            "sign" : 1838714639,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 81276224407680400,
            "rowCount" : 331739691459920,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          },
          "40" : {
            "sign" : 1153698931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#123, ca_zip#124, ca_country#125] "
          },
          "15" : {
            "sign" : 815965107,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 72623132945,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "11" : {
            "sign" : -842263021,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 675059401424,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "9" : {
            "sign" : 775636263,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 61040568,
            "rowCount" : 954704,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_state#123, ca_zip#124, ca_country#125], ShuffleQueryStage 5 "
          },
          "33" : {
            "sign" : -459341749,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 15504000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "22" : {
            "sign" : 1867243163,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9456300108,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] "
          },
          "26" : {
            "sign" : 812756911,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "37" : {
            "sign" : -1899214940,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_ticket_number#34L] "
          },
          "13" : {
            "sign" : 474468585,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 10168082233949,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          },
          "24" : {
            "sign" : -628374504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 43776970976,
            "rowCount" : 288006388,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "35" : {
            "sign" : 228187507,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#75, i_item_id#76, i_rec_start_date#77, i_rec_end_date#78, i_item_desc#79, i_current_price#80, i_wholesale_cost#81, i_brand_id#82, i_brand#83, i_class_id#84, i_class#85, i_category_id#86, i_category#87, i_manufact_id#88, i_manufact#89, i_size#90, i_formulation#91, i_color#92, i_units#93, i_container#94, i_manager_id#95, i_product_name#96], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "16" : {
            "sign" : 419855978,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 113837048683,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "5" : {
            "sign" : -833641686,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 64283634425,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "10" : {
            "sign" : 1726153103,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163] "
          },
          "21" : {
            "sign" : 102638235,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 26954307198,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#5 = c_customer_sk#97) "
          },
          "32" : {
            "sign" : 2021572997,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 500000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#97, c_customer_id#98, c_current_cdemo_sk#99, c_current_hdemo_sk#100, c_current_addr_sk#101, c_first_shipto_date_sk#102, c_first_sales_date_sk#103, c_salutation#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_day#108, c_birth_month#109, c_birth_year#110, c_birth_country#111, c_login#112, c_email_address#113, c_last_review_date#114], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "6" : {
            "sign" : -914421583,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 72623132945,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "36" : {
            "sign" : 352920416,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2891,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] "
          },
          "1" : {
            "sign" : -1746222446,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24753427615956157,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157] "
          },
          "39" : {
            "sign" : 58525475,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "17" : {
            "sign" : -1141989269,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 118459872995,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#46) "
          },
          "25" : {
            "sign" : 1921382062,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176] "
          },
          "14" : {
            "sign" : 210705200,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 64283634425,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "31" : {
            "sign" : -14387779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 482532000,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111)) "
          },
          "42" : {
            "sign" : 527040145,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#115, ca_address_id#116, ca_street_number#117, ca_street_name#118, ca_street_type#119, ca_suite_number#120, ca_city#121, ca_county#122, ca_state#123, ca_zip#124, ca_country#125, ca_gmt_offset#126, ca_location_type#127], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "0" : {
            "sign" : 373629755,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 24753427615956157,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8)))) "
          },
          "20" : {
            "sign" : 1031245998,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24753955590,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "27" : {
            "sign" : -84657601,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "2" : {
            "sign" : -1910952698,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 22395958319198428,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "38" : {
            "sign" : 2011675015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27)) "
          },
          "18" : {
            "sign" : 455826232,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 44237719834,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "30" : {
            "sign" : -702144975,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 135108960,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "7" : {
            "sign" : 1374117739,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 113837048683,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 6 "
          },
          "29" : {
            "sign" : 2043403682,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 192558,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "41" : {
            "sign" : -1835352789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 231369396,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_country#125) AND isnotnull(ca_zip#124)) "
          },
          "3" : {
            "sign" : -1636930577,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 55400528473806640,
            "rowCount" : 331739691459920,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "28" : {
            "sign" : -1176082101,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 23471,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71)) "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Aggregate",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalRelation",
          "toId" : 23,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalRelation",
          "toId" : 28,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Filter",
          "toId" : 27,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Project",
          "toId" : 26,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Project",
          "toId" : 25,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Aggregate",
          "toId" : 23,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 23,
          "fromName" : "Filter",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 21,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "LogicalRelation",
          "toId" : 31,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Filter",
          "toId" : 30,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Project",
          "toId" : 21,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Join",
          "toId" : 20,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Project",
          "toId" : 19,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "LogicalRelation",
          "toId" : 34,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "Filter",
          "toId" : 33,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "Project",
          "toId" : 19,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Join",
          "toId" : 18,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Project",
          "toId" : 17,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Filter",
          "toId" : 36,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "Project",
          "toId" : 17,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Join",
          "toId" : 16,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "LogicalRelation",
          "toId" : 38,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "Filter",
          "toId" : 37,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 42,
          "fromName" : "LogicalRelation",
          "toId" : 41,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 41,
          "fromName" : "Filter",
          "toId" : 40,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Aggregate",
          "toId" : 10,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Subquery"
        } ],
        "rawPlan" : "Filter (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8))))\n:  +- Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163]\n:     +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n:        +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n:           +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n:              :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n:              :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n:              :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n:              :     :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n:              :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n:              :     :     :     :     :  +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42)))\n:              :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n:              :     :     :     :     :     :     +- Project [s_store_sk#46]\n:              :     :     :     :     :     :        +- Project [s_store_sk#46]\n:              :     :     :     :     :     :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :     :     :     :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n:              :     :     :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n:              :     :     :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n:              :     :     :     +- Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :        +- Filter isnotnull(i_item_sk#75)\n:              :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n:              :     :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n:              :     :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     +- Project [sr_item_sk#27, sr_ticket_number#34L]\n:              :        +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n:              :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n:              +- Project [ca_state#123, ca_zip#124, ca_country#125]\n:                 +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n:                    +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n+- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157]\n   +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n      +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n         +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n            :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n            :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n            :     :- LogicalQueryStage Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 6\n            :     +- LogicalQueryStage Project [sr_item_sk#27, sr_ticket_number#34L], ShuffleQueryStage 4\n            +- LogicalQueryStage Project [ca_state#123, ca_zip#124, ca_country#125], ShuffleQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 114474121471,
        "inputRowCount" : 607609354
      },
      "PD" : {
        "5" : [ 10353, 13780, 29539, 20176, 18341, 22193, 24413, 43249, 57565, 57565, 18341, 20176, 47574, 35743, 43249, 35743, 13780, 43249, 20176, 47574, 32493, 22193, 29539, 26854, 8556, 18341, 32493, 29539, 47574, 4390, 7778, 22193, 12527, 10353, 20176, 29539, 26854, 43249, 39317, 22193, 29539, 24413, 15158, 13780, 24413, 18341, 35743, 32493, 32493, 35743, 57565, 43249, 13780, 29539, 39317, 24413, 12527, 47574, 43249, 26854, 22193, 32493, 26854, 13780, 22193, 47574, 39317, 16674, 26854, 29539, 13780, 13780, 22193, 12527, 18341, 39317, 6428, 18341, 39317, 26854, 52331, 39317, 32493, 32493, 32493, 9412, 29539, 26854, 11388, 18341, 10353, 12527, 11388, 43249, 52331, 18341, 15158, 13780, 13780, 32493, 35743, 43249, 32493, 16674, 15158, 20176, 18341, 22193, 29539, 3628, 29539, 24413, 16674, 22193, 16674, 39317, 22193, 57565, 29539, 32493, 13780, 32493, 43249, 20176, 22193, 24413, 4830, 13780, 22193, 26854, 15158, 24413, 22193, 32493, 35743, 47574, 29539, 29539, 24413, 9412, 18341, 29539, 43249, 11388, 18341, 32493, 47574, 22193, 47574, 24413, 26854, 47574, 18341, 11388, 43249, 15158, 29539, 39317, 24413, 16674, 52331, 20176, 10353, 29539, 22193, 12527, 18341, 10353, 47574, 15158, 8556, 47574, 47574, 35743, 9412, 29539, 32493, 13780, 16674, 35743, 47574, 22193, 63321, 24413, 24413, 24413, 26854, 52331, 26854, 35743, 47574, 16674, 29539, 22193, 39317, 29539, 24413, 18341, 35743, 22193 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 5,
        "FinishedTasksNum" : 73,
        "FinishedTasksTotalTimeInMs" : 46030.0,
        "FinishedTasksDistributionInMs" : [ 343.0, 463.0, 567.0, 712.0, 1426.0 ]
      },
      "StartTimeInMs" : 1702226737585,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 68042,
        "IOBytes" : {
          "Total" : 17793714615,
          "Details" : {
            "IR" : 2631279432,
            "IW" : 0,
            "SR" : 7840871025,
            "SW" : 7321564158
          }
        }
      }
    },
    "15" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : 588852462,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 723016576,
            "rowCount" : 3996138,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 12 "
          },
          "5" : {
            "sign" : 1153698931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#123, ca_zip#124, ca_country#125] "
          },
          "6" : {
            "sign" : -1835352789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 231369396,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_country#125) AND isnotnull(ca_zip#124)) "
          },
          "1" : {
            "sign" : -691288019,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 58216327431746,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "0" : {
            "sign" : -1646557637,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163] "
          },
          "2" : {
            "sign" : 1038141493,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 684041847323016,
            "rowCount" : 3758471688588,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "7" : {
            "sign" : 527040145,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#115, ca_address_id#116, ca_street_number#117, ca_street_name#118, ca_street_type#119, ca_suite_number#120, ca_city#121, ca_county#122, ca_state#123, ca_zip#124, ca_country#125, ca_gmt_offset#126, ca_location_type#127], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : 1142814275,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 992236525787232,
            "rowCount" : 3758471688588,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "LogicalRelation",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163]\n+- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n   +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n      +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n         :- LogicalQueryStage Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 12\n         +- Project [ca_state#123, ca_zip#124, ca_country#125]\n            +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n               +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n"
      },
      "IM" : {
        "inputSizeInBytes" : 969016576,
        "inputRowCount" : 4996138
      },
      "PD" : {
        "14" : [ 1496624, 1864989, 2515031, 1475076, 1394795, 1815402, 1939828, 1505396, 1584600, 1924318, 1863350, 1855176, 1524503, 1730570, 1676949, 2014382, 2051207, 1908255, 2178129, 2523261, 2458819, 1455671, 1591911, 1704482, 1909562, 1468149, 2062344, 1877831, 2088571, 1997406, 2022276, 1840139, 1956203, 1695724, 2006167, 2422839, 1269967, 2001713, 2344774, 1234431, 1877694, 1247841, 1770737, 1698400, 1627167, 1638860, 1667362, 2306574, 2265576, 2378588, 1497816, 2333047, 1641687, 1585230, 1758197, 2241302, 1423973, 2193039, 1557001, 2290872, 2247535, 1759446, 1919279, 2039826, 2204983, 1809187, 2152051, 1638827, 2117475, 1733145, 1930941, 1996921, 1004727, 1790796, 1434747, 2346403, 1505759, 1923985, 2421066, 2007033, 1732703, 2310572, 1805043, 2706148, 1828223, 2160767, 1509205, 1866283, 2064017, 1487454, 2188855, 1616844, 2362164, 1794384, 1983353, 1346938, 2217309, 2212207, 2600604, 2305099, 2095770, 1710045, 1291818, 1313618, 1772923, 2096654, 2049743, 2138443, 1612975, 2038672, 2426349, 1419000, 2009071, 1999045, 1840461, 1229753, 2016421, 1775639, 1608007, 2655130, 1963953, 2046578, 1457574, 1618222, 1507111, 1824934, 1583962, 2227729, 2233455, 2306150, 2200319, 1995199, 1397402, 2096685, 1628448, 1457235, 1672729, 2177043, 2018437, 1579455, 2255054, 1556165, 1433998, 2788431, 2629500, 1981360, 2151133, 2228994, 1998631, 1786031, 2138072, 1757442, 1690762, 1659907, 1657813, 2119492, 1745940, 2147671, 2979447, 2374073, 2014200, 2069206, 2549053, 1655538, 2203145, 2224130, 2318879, 1217874, 2405955, 2130207, 1820259, 1920813, 1357210, 2144473, 1785822, 1477720, 2071126, 1757865, 1739254, 2306335, 1137909, 1408227, 2273808, 1441841, 2215674, 1432594, 2175688, 1576330, 1558748, 2369045, 1802667, 2425465, 1431553, 1243364, 1821597, 1795827, 1733981, 1747993, 1447692, 1743736 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226799786,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 5841,
        "IOBytes" : {
          "Total" : 380890225,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 373401140,
            "SW" : 7489085
          }
        }
      }
    },
    "11" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 2012214440,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 9456300108,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15], ShuffleQueryStage 0 "
          },
          "8" : {
            "sign" : -1766452275,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9089652492648000,
            "rowCount" : 56108966004000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "19" : {
            "sign" : 2043403682,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 192558,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "23" : {
            "sign" : 1153698931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#123, ca_zip#124, ca_country#125] "
          },
          "4" : {
            "sign" : 220470235,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 67063467265,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "15" : {
            "sign" : 2021572997,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 500000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#97, c_customer_id#98, c_current_cdemo_sk#99, c_current_hdemo_sk#100, c_current_addr_sk#101, c_first_shipto_date_sk#102, c_first_sales_date_sk#103, c_salutation#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_day#108, c_birth_month#109, c_birth_year#110, c_birth_country#111, c_login#112, c_email_address#113, c_last_review_date#114], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "11" : {
            "sign" : -1528766840,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 26954307198,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#5 = c_customer_sk#97) "
          },
          "9" : {
            "sign" : 571135260,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 9314088356664000,
            "rowCount" : 56108966004000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#4 = i_item_sk#75) "
          },
          "22" : {
            "sign" : 58525475,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "13" : {
            "sign" : -702144975,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 135108960,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "24" : {
            "sign" : -1835352789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 231369396,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_country#125) AND isnotnull(ca_zip#124)) "
          },
          "16" : {
            "sign" : 931765203,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 16488824,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95], ShuffleQueryStage 3 "
          },
          "5" : {
            "sign" : 1226299666,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 75402965785,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "10" : {
            "sign" : -2015256493,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24753955590,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "21" : {
            "sign" : 2011675015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27)) "
          },
          "6" : {
            "sign" : -1598441247,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 118459872995,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "1" : {
            "sign" : -266743732,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 606835312982,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "17" : {
            "sign" : 352920416,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2891,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] "
          },
          "25" : {
            "sign" : 527040145,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#115, ca_address_id#116, ca_street_number#117, ca_street_name#118, ca_street_type#119, ca_suite_number#120, ca_city#121, ca_county#122, ca_state#123, ca_zip#124, ca_country#125, ca_gmt_offset#126, ca_location_type#127], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "14" : {
            "sign" : -14387779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 482532000,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111)) "
          },
          "0" : {
            "sign" : -1254080006,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163] "
          },
          "20" : {
            "sign" : -1899214940,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_ticket_number#34L] "
          },
          "2" : {
            "sign" : -8007308,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 7130314927541,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "18" : {
            "sign" : -1176082101,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 23471,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71)) "
          },
          "7" : {
            "sign" : -841706896,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 123082697307,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#46) "
          },
          "3" : {
            "sign" : 862171490,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 10505611934661,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalRelation",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalRelation",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Filter",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalRelation",
          "toId" : 21,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Filter",
          "toId" : 20,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "LogicalRelation",
          "toId" : 24,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Filter",
          "toId" : 23,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163]\n+- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n   +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n      +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n         :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n         :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n         :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n         :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n         :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n         :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n         :     :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n         :     :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n         :     :     :     :     :- LogicalQueryStage Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15], ShuffleQueryStage 0\n         :     :     :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n         :     :     :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n         :     :     :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n         :     :     :     +- LogicalQueryStage Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95], ShuffleQueryStage 3\n         :     :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n         :     :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n         :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n         :     +- Project [sr_item_sk#27, sr_ticket_number#34L]\n         :        +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n         :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n         +- Project [ca_state#123, ca_zip#124, ca_country#125]\n            +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n               +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n"
      },
      "IM" : {
        "inputSizeInBytes" : 13905587698,
        "inputRowCount" : 294681016
      },
      "PD" : {
        "11" : [ 39317, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 39317, 39317, 39317, 35743, 39317, 35743, 35743, 39317, 39317, 39317, 35743, 39317, 39317, 35743, 35743, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 35743, 39317, 39317, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 35743, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 39317, 35743, 35743, 35743, 39317, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 39317, 35743, 35743, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 35743, 39317, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 39317, 35743, 35743, 39317, 39317, 35743, 39317, 35743, 35743, 35743, 35743, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 35743, 39317, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 39317, 39317 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 6,
        "FinishedTasksNum" : 155,
        "FinishedTasksTotalTimeInMs" : 463755.0,
        "FinishedTasksDistributionInMs" : [ 289.0, 621.0, 880.0, 1810.0, 20132.0 ]
      },
      "StartTimeInMs" : 1702226780356,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 25271,
        "IOBytes" : {
          "Total" : 16651457100,
          "Details" : {
            "IR" : 2355309235,
            "IW" : 0,
            "SR" : 7366026108,
            "SW" : 6930121757
          }
        }
      }
    },
    "9" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : -1835352789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 231369396,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_country#125) AND isnotnull(ca_zip#124)) "
          },
          "12" : {
            "sign" : 1746504807,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 45386751518,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#4 = i_item_sk#75) "
          },
          "8" : {
            "sign" : 815965107,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 72623132945,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "19" : {
            "sign" : 812756911,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "23" : {
            "sign" : -702144975,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 135108960,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "4" : {
            "sign" : -842263021,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 675059401424,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "15" : {
            "sign" : 1867243163,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9456300108,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] "
          },
          "11" : {
            "sign" : 455826232,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 44237719834,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "9" : {
            "sign" : 419855978,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 113837048683,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "33" : {
            "sign" : 1153698931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#123, ca_zip#124, ca_country#125] "
          },
          "22" : {
            "sign" : 2043403682,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 192558,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "26" : {
            "sign" : -459341749,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 15504000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "13" : {
            "sign" : 1031245998,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24753955590,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "24" : {
            "sign" : -14387779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 482532000,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111)) "
          },
          "35" : {
            "sign" : 527040145,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#115, ca_address_id#116, ca_street_number#117, ca_street_name#118, ca_street_type#119, ca_suite_number#120, ca_city#121, ca_county#122, ca_state#123, ca_zip#124, ca_country#125, ca_gmt_offset#126, ca_location_type#127], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "16" : {
            "sign" : 1011872821,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39926600456,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42))) "
          },
          "5" : {
            "sign" : -859819627,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6792785226829,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "10" : {
            "sign" : -1141989269,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 118459872995,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#46) "
          },
          "21" : {
            "sign" : -1176082101,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 23471,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71)) "
          },
          "32" : {
            "sign" : 58525475,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "6" : {
            "sign" : 474468585,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 10168082233949,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          },
          "1" : {
            "sign" : 931261541,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 130739,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157] "
          },
          "17" : {
            "sign" : -628374504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 43776970976,
            "rowCount" : 288006388,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "25" : {
            "sign" : 2021572997,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 500000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#97, c_customer_id#98, c_current_cdemo_sk#99, c_current_hdemo_sk#100, c_current_addr_sk#101, c_first_shipto_date_sk#102, c_first_sales_date_sk#103, c_salutation#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_day#108, c_birth_month#109, c_birth_year#110, c_birth_country#111, c_login#112, c_email_address#113, c_last_review_date#114], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "14" : {
            "sign" : 102638235,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 26954307198,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#5 = c_customer_sk#97) "
          },
          "31" : {
            "sign" : 2011675015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27)) "
          },
          "0" : {
            "sign" : 174773478,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 130739,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8)))) "
          },
          "20" : {
            "sign" : -84657601,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "27" : {
            "sign" : 2095138697,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(i_item_sk#75) "
          },
          "2" : {
            "sign" : 2060614971,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 118288,
            "rowCount" : 741,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159], HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], functions=[sum(UnscaledValue(ss_sales_price#15))]) "
          },
          "18" : {
            "sign" : 1921382062,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176] "
          },
          "30" : {
            "sign" : -1899214940,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_ticket_number#34L] "
          },
          "7" : {
            "sign" : 210705200,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 64283634425,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "29" : {
            "sign" : 352920416,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2891,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] "
          },
          "3" : {
            "sign" : 1726153103,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163] "
          },
          "28" : {
            "sign" : 228187507,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#75, i_item_id#76, i_rec_start_date#77, i_rec_end_date#78, i_item_desc#79, i_current_price#80, i_wholesale_cost#81, i_brand_id#82, i_brand#83, i_class_id#84, i_class#85, i_category_id#86, i_category#87, i_manufact_id#88, i_manufact#89, i_size#90, i_formulation#91, i_color#92, i_units#93, i_container#94, i_manager_id#95, i_product_name#96], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalQueryStage",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalRelation",
          "toId" : 16,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalRelation",
          "toId" : 21,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Filter",
          "toId" : 20,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Project",
          "toId" : 19,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Project",
          "toId" : 18,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Aggregate",
          "toId" : 16,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 16,
          "fromName" : "Filter",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "LogicalRelation",
          "toId" : 24,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Filter",
          "toId" : 23,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Join",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalRelation",
          "toId" : 27,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Filter",
          "toId" : 26,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Join",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Filter",
          "toId" : 29,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "LogicalRelation",
          "toId" : 31,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Filter",
          "toId" : 30,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "LogicalRelation",
          "toId" : 34,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "Filter",
          "toId" : 33,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Aggregate",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Subquery"
        } ],
        "rawPlan" : "Filter (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8))))\n:  +- Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163]\n:     +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n:        +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n:           +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n:              :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n:              :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n:              :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n:              :     :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n:              :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n:              :     :     :     :     :  +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42)))\n:              :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n:              :     :     :     :     :     :     +- Project [s_store_sk#46]\n:              :     :     :     :     :     :        +- Project [s_store_sk#46]\n:              :     :     :     :     :     :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :     :     :     :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n:              :     :     :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n:              :     :     :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n:              :     :     :     +- Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :        +- Filter isnotnull(i_item_sk#75)\n:              :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n:              :     :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n:              :     :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     +- Project [sr_item_sk#27, sr_ticket_number#34L]\n:              :        +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n:              :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n:              +- Project [ca_state#123, ca_zip#124, ca_country#125]\n:                 +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n:                    +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n+- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157]\n   +- LogicalQueryStage Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159], HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], functions=[sum(UnscaledValue(ss_sales_price#15))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 118288,
        "inputRowCount" : 741
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226747842,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 57785,
        "IOBytes" : {
          "Total" : 16660585321,
          "Details" : {
            "IR" : 2357123983,
            "IW" : 0,
            "SR" : 7366109555,
            "SW" : 6937351783
          }
        }
      }
    },
    "13" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 352920416,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2891,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] "
          },
          "8" : {
            "sign" : -1383771894,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1337115476928000,
            "rowCount" : 8153143152000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "19" : {
            "sign" : -1835352789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 231369396,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_country#125) AND isnotnull(ca_zip#124)) "
          },
          "4" : {
            "sign" : -1240131958,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2243740047328586766960000,
            "rowCount" : 11506359217069675728000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "15" : {
            "sign" : -1899214940,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_ticket_number#34L] "
          },
          "11" : {
            "sign" : 931765203,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 16488824,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95], ShuffleQueryStage 3 "
          },
          "9" : {
            "sign" : 2139616955,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1369728049536000,
            "rowCount" : 8153143152000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#4 = i_item_sk#75) "
          },
          "13" : {
            "sign" : -1176082101,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 23471,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71)) "
          },
          "16" : {
            "sign" : 2011675015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27)) "
          },
          "5" : {
            "sign" : -362936165,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2519892668538258984432000,
            "rowCount" : 11506359217069675728000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "10" : {
            "sign" : 1250952950,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3681052128,
            "rowCount" : 39966388,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111], ShuffleQueryStage 10 "
          },
          "6" : {
            "sign" : -1413015880,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 82697330990736000,
            "rowCount" : 399504014448000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "1" : {
            "sign" : 712794221,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 20451342480642438918706204,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "17" : {
            "sign" : 58525475,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "14" : {
            "sign" : 2043403682,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 192558,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "0" : {
            "sign" : 100809541,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163] "
          },
          "20" : {
            "sign" : 527040145,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#115, ca_address_id#116, ca_street_number#117, ca_street_name#118, ca_street_type#119, ca_suite_number#120, ca_city#121, ca_county#122, ca_state#123, ca_zip#124, ca_country#125, ca_gmt_offset#126, ca_location_type#127], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "2" : {
            "sign" : -521780353,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 240303274147548657294797908,
            "rowCount" : 1397112058997375914504639,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "18" : {
            "sign" : 1153698931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#123, ca_zip#124, ca_country#125] "
          },
          "7" : {
            "sign" : 10051179,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 85893363106320000,
            "rowCount" : 399504014448000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#46) "
          },
          "3" : {
            "sign" : 325183575,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 350675126808341354540664389,
            "rowCount" : 1397112058997375914504639,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalRelation",
          "toId" : 13,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Filter",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalRelation",
          "toId" : 16,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Filter",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalRelation",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Filter",
          "toId" : 18,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163]\n+- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n   +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n      +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n         :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n         :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n         :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n         :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n         :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n         :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n         :     :     :     :- LogicalQueryStage Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111], ShuffleQueryStage 10\n         :     :     :     +- LogicalQueryStage Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95], ShuffleQueryStage 3\n         :     :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n         :     :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n         :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n         :     +- Project [sr_item_sk#27, sr_ticket_number#34L]\n         :        +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n         :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n         +- Project [ca_state#123, ca_zip#124, ca_country#125]\n            +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n               +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n"
      },
      "IM" : {
        "inputSizeInBytes" : 7630339718,
        "inputRowCount" : 69972401
      },
      "PD" : {
        "11" : [ 39317, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 39317, 39317, 39317, 35743, 39317, 35743, 35743, 39317, 39317, 39317, 35743, 39317, 39317, 35743, 35743, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 35743, 39317, 39317, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 35743, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 39317, 35743, 35743, 35743, 39317, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 39317, 35743, 35743, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 35743, 39317, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 39317, 35743, 35743, 39317, 39317, 35743, 39317, 35743, 35743, 35743, 35743, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 35743, 39317, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 39317, 39317 ],
        "12" : [ 10647805, 10564791, 10730819, 10730819, 10730819, 10647805, 10730819, 9755295, 9755295, 10730819, 10730819, 10730819, 10730819, 10481777, 10730819, 10481777, 10730819, 10730819, 11164690, 10730819, 10730819, 10730819, 10647805, 10232735, 11073374, 10730819, 10730819, 10730819, 10481777, 10730819, 10730819, 10730819, 10982058, 10730819, 10730819, 10730819, 10730819, 10564791, 10315749, 10730819, 10647805, 10647805, 10647805, 10730819, 10730819, 10730819, 10730819, 10647805, 9755295, 10149721, 11712586, 10730819, 10730819, 10730819, 10647805, 10799426, 11073374, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 9755295, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 10066707, 10730819, 10730819, 10730819, 10730819, 9755295, 10730819, 10730819, 10730819, 10730819, 10481777, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 9755295, 10730819, 10730819, 10564791, 10647805, 10982058, 10315749, 10730819, 10730819, 10647805, 10730819, 10730819, 10730819, 10730819, 11529954, 9755295, 10730819, 10730819, 10730819, 9755295, 10730819, 10647805, 10730819, 10730819, 10564791, 9817665, 10730819, 10647805, 10730819, 11529954, 10730819, 10730819, 10730819, 10730819, 10481777, 10730819, 10647805, 10730819, 10730819, 10647805, 10730819, 10647805, 10730819, 10564791, 10730819, 10730819, 10730819, 10730819, 10315749, 10730819, 10730819, 10647805, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 9755295, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 9755295, 10564791, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 10398763, 10730819, 10730819, 10730819, 10982058, 10730819, 10730819, 10730819, 10730819, 9755295, 9755295, 10730819, 10730819, 10730819, 10149721, 10730819, 10481777, 11073374, 10799426, 10730819, 10730819, 10730819, 10398763, 10730819, 10481777, 10730819, 9755295, 10730819, 9983693, 10730819, 10066707, 10799426, 10822135 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226786453,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 19174,
        "IOBytes" : {
          "Total" : 10881286265,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 6634001740,
            "SW" : 4247284525
          }
        }
      }
    },
    "16" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : 1973574536,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163] "
          },
          "1" : {
            "sign" : -346753796,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 16119024,
            "rowCount" : 100798,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159], HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], functions=[sum(UnscaledValue(ss_sales_price#15))]) "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "LogicalQueryStage",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163]\n+- LogicalQueryStage Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159], HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], functions=[sum(UnscaledValue(ss_sales_price#15))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 16119024,
        "inputRowCount" : 100798
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226804901,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 726,
        "IOBytes" : {
          "Total" : 7503264,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 7503182,
            "SW" : 82
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : 2095138697,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(i_item_sk#75) "
          },
          "12" : {
            "sign" : -859819627,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6792785226829,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "8" : {
            "sign" : -114833265,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 691238664,
            "rowCount" : 28801611,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sr_item_sk#27, sr_ticket_number#34L], ShuffleQueryStage 4 "
          },
          "19" : {
            "sign" : 1746504807,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 45386751518,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#4 = i_item_sk#75) "
          },
          "23" : {
            "sign" : 1011872821,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39926600456,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42))) "
          },
          "4" : {
            "sign" : 1838714639,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3892862001040021628755920,
            "rowCount" : 15889232657306210729616,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          },
          "40" : {
            "sign" : 1153698931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#123, ca_zip#124, ca_country#125] "
          },
          "15" : {
            "sign" : 815965107,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 72623132945,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "11" : {
            "sign" : -842263021,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 675059401424,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "9" : {
            "sign" : 775636263,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 61040568,
            "rowCount" : 954704,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_state#123, ca_zip#124, ca_country#125], ShuffleQueryStage 5 "
          },
          "33" : {
            "sign" : -459341749,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 15504000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "22" : {
            "sign" : 1867243163,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9456300108,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] "
          },
          "26" : {
            "sign" : 812756911,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "37" : {
            "sign" : -1899214940,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_ticket_number#34L] "
          },
          "13" : {
            "sign" : 474468585,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 10168082233949,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          },
          "24" : {
            "sign" : -628374504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 43776970976,
            "rowCount" : 288006388,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "35" : {
            "sign" : 228187507,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#75, i_item_id#76, i_rec_start_date#77, i_rec_end_date#78, i_item_desc#79, i_current_price#80, i_wholesale_cost#81, i_brand_id#82, i_brand#83, i_class_id#84, i_class#85, i_category_id#86, i_category#87, i_manufact_id#88, i_manufact#89, i_size#90, i_formulation#91, i_color#92, i_units#93, i_container#94, i_manager_id#95, i_product_name#96], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "16" : {
            "sign" : 419855978,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 113837048683,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "5" : {
            "sign" : -833641686,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3078973212222478365,
            "rowCount" : 16643098444445829,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "10" : {
            "sign" : 1726153103,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163] "
          },
          "21" : {
            "sign" : 102638235,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 26954307198,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#5 = c_customer_sk#97) "
          },
          "32" : {
            "sign" : 2021572997,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 500000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#97, c_customer_id#98, c_current_cdemo_sk#99, c_current_hdemo_sk#100, c_current_addr_sk#101, c_first_shipto_date_sk#102, c_first_sales_date_sk#103, c_salutation#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_day#108, c_birth_month#109, c_birth_year#110, c_birth_country#111, c_login#112, c_email_address#113, c_last_review_date#114], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "6" : {
            "sign" : -914421583,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3478407574889178261,
            "rowCount" : 16643098444445829,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "36" : {
            "sign" : 352920416,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2891,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] "
          },
          "1" : {
            "sign" : -1746222446,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 1185607211258997468697091,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157] "
          },
          "39" : {
            "sign" : 58525475,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "17" : {
            "sign" : -1141989269,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 118459872995,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#46) "
          },
          "25" : {
            "sign" : 1921382062,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176] "
          },
          "14" : {
            "sign" : 210705200,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 64283634425,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "31" : {
            "sign" : -14387779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 482532000,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111)) "
          },
          "42" : {
            "sign" : 527040145,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#115, ca_address_id#116, ca_street_number#117, ca_street_name#118, ca_street_type#119, ca_suite_number#120, ca_city#121, ca_county#122, ca_state#123, ca_zip#124, ca_country#125, ca_gmt_offset#126, ca_location_type#127], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "0" : {
            "sign" : 373629755,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 1185607211258997468697091,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8)))) "
          },
          "20" : {
            "sign" : 1031245998,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24753955590,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "27" : {
            "sign" : -84657601,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "2" : {
            "sign" : -1910952698,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 1072692238758140566916416,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "38" : {
            "sign" : 2011675015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27)) "
          },
          "18" : {
            "sign" : 455826232,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 44237719834,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "30" : {
            "sign" : -702144975,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 135108960,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "7" : {
            "sign" : 1374117739,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 113837048683,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 6 "
          },
          "29" : {
            "sign" : 2043403682,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 192558,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "41" : {
            "sign" : -1835352789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 231369396,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_country#125) AND isnotnull(ca_zip#124)) "
          },
          "3" : {
            "sign" : -1636930577,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2653501853770137191845872,
            "rowCount" : 15889232657306210729616,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "28" : {
            "sign" : -1176082101,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 23471,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71)) "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Aggregate",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalRelation",
          "toId" : 23,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalRelation",
          "toId" : 28,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Filter",
          "toId" : 27,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Project",
          "toId" : 26,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Project",
          "toId" : 25,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Aggregate",
          "toId" : 23,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 23,
          "fromName" : "Filter",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 21,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "LogicalRelation",
          "toId" : 31,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Filter",
          "toId" : 30,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Project",
          "toId" : 21,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Join",
          "toId" : 20,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Project",
          "toId" : 19,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "LogicalRelation",
          "toId" : 34,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "Filter",
          "toId" : 33,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "Project",
          "toId" : 19,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Join",
          "toId" : 18,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Project",
          "toId" : 17,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Filter",
          "toId" : 36,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "Project",
          "toId" : 17,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Join",
          "toId" : 16,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "LogicalRelation",
          "toId" : 38,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "Filter",
          "toId" : 37,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 42,
          "fromName" : "LogicalRelation",
          "toId" : 41,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 41,
          "fromName" : "Filter",
          "toId" : 40,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Aggregate",
          "toId" : 10,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Subquery"
        } ],
        "rawPlan" : "Filter (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8))))\n:  +- Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163]\n:     +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n:        +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n:           +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n:              :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n:              :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n:              :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n:              :     :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n:              :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n:              :     :     :     :     :  +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42)))\n:              :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n:              :     :     :     :     :     :     +- Project [s_store_sk#46]\n:              :     :     :     :     :     :        +- Project [s_store_sk#46]\n:              :     :     :     :     :     :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :     :     :     :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n:              :     :     :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n:              :     :     :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n:              :     :     :     +- Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :        +- Filter isnotnull(i_item_sk#75)\n:              :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n:              :     :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n:              :     :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     +- Project [sr_item_sk#27, sr_ticket_number#34L]\n:              :        +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n:              :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n:              +- Project [ca_state#123, ca_zip#124, ca_country#125]\n:                 +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n:                    +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n+- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157]\n   +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n      +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n         +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n            :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n            :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n            :     :- LogicalQueryStage Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 6\n            :     +- LogicalQueryStage Project [sr_item_sk#27, sr_ticket_number#34L], ShuffleQueryStage 4\n            +- LogicalQueryStage Project [ca_state#123, ca_zip#124, ca_country#125], ShuffleQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 114589327915,
        "inputRowCount" : 607609354
      },
      "PD" : {
        "5" : [ 10353, 13780, 29539, 20176, 18341, 22193, 24413, 43249, 57565, 57565, 18341, 20176, 47574, 35743, 43249, 35743, 13780, 43249, 20176, 47574, 32493, 22193, 29539, 26854, 8556, 18341, 32493, 29539, 47574, 4390, 7778, 22193, 12527, 10353, 20176, 29539, 26854, 43249, 39317, 22193, 29539, 24413, 15158, 13780, 24413, 18341, 35743, 32493, 32493, 35743, 57565, 43249, 13780, 29539, 39317, 24413, 12527, 47574, 43249, 26854, 22193, 32493, 26854, 13780, 22193, 47574, 39317, 16674, 26854, 29539, 13780, 13780, 22193, 12527, 18341, 39317, 6428, 18341, 39317, 26854, 52331, 39317, 32493, 32493, 32493, 9412, 29539, 26854, 11388, 18341, 10353, 12527, 11388, 43249, 52331, 18341, 15158, 13780, 13780, 32493, 35743, 43249, 32493, 16674, 15158, 20176, 18341, 22193, 29539, 3628, 29539, 24413, 16674, 22193, 16674, 39317, 22193, 57565, 29539, 32493, 13780, 32493, 43249, 20176, 22193, 24413, 4830, 13780, 22193, 26854, 15158, 24413, 22193, 32493, 35743, 47574, 29539, 29539, 24413, 9412, 18341, 29539, 43249, 11388, 18341, 32493, 47574, 22193, 47574, 24413, 26854, 47574, 18341, 11388, 43249, 15158, 29539, 39317, 24413, 16674, 52331, 20176, 10353, 29539, 22193, 12527, 18341, 10353, 47574, 15158, 8556, 47574, 47574, 35743, 9412, 29539, 32493, 13780, 16674, 35743, 47574, 22193, 63321, 24413, 24413, 24413, 26854, 52331, 26854, 35743, 47574, 16674, 29539, 22193, 39317, 29539, 24413, 18341, 35743, 22193 ],
        "4" : [ 1849964, 1850299, 1850358, 1828178, 1831060, 1824389, 1830718, 1842096, 1821121, 1834564, 1826760, 1837485, 1834037, 1863690, 1834545, 1831490, 1833619, 1845225, 1852827, 1832435, 1833492, 1844280, 1834139, 1845389, 1823976, 1828654, 1838733, 1833991, 1836305, 1844661, 1833924, 1845608, 1829244, 1840258, 1840080, 1833519, 1831033, 1825910, 1828701, 1833146, 1825723, 1829867, 1850291, 1836296, 1834189, 1832532, 1836096, 1828702, 1822331, 1836086, 1836603, 1846376, 1841103, 1842299, 1838503, 1837943, 1827601, 1836511, 1842266, 1833890, 1833656, 1837981, 1830944, 1847736, 1846568, 1838698, 1826914, 1834211, 1840349, 1831696, 1842126, 1832055, 1846371, 1832261, 1824675, 1831276, 1847990, 1829238, 1826547, 1834235, 1848247, 1842449, 1826302, 1850820, 1829120, 1832394, 1838881, 1824017, 1841697, 1828751, 1837932, 1841286, 1819490, 1834471, 1834123, 1840507, 1833671, 1846962, 1830238, 1847174, 1847382, 1831330, 1834565, 1823998, 1822885, 1827910, 1837354, 1846442, 1837273, 1840872, 1832856, 1824718, 1846350, 1849427, 1835742, 1837108, 1834981, 1826638, 1824546, 1851557, 1849691, 1827136, 1832401, 1853163, 1827561, 1817816, 1839470, 1835444, 1826730, 1843801, 1840640, 1831522, 1836781, 1841159, 1838616, 1831369, 1834276, 1830520, 1840323, 1846935, 1849354, 1846896, 1828782, 1834591, 1834808, 1836994, 1832831, 1835276, 1833918, 1843148, 1838411, 1832496, 1821068, 1840055, 1826489, 1825662, 1838319, 1841064, 1835652, 1842056, 1853796, 1824006, 1835888, 1847150, 1831745, 1844599, 1827961, 1842865, 1830256, 1846443, 1838984, 1834224, 1829329, 1846810, 1829207, 1838887, 1829365, 1834906, 1840150, 1836248, 1846923, 1828523, 1846992, 1830402, 1846910, 1827421, 1834102, 1833531, 1839872, 1840015, 1845898, 1837808, 1843181, 1829087, 1839423, 1836629, 1832089, 1834549, 1827101, 1845794 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 1,
        "FinishedTasksTotalTimeInMs" : 932.0,
        "FinishedTasksDistributionInMs" : [ 932.0, 932.0, 932.0, 932.0, 932.0 ]
      },
      "StartTimeInMs" : 1702226738060,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 67567,
        "IOBytes" : {
          "Total" : 17169341061,
          "Details" : {
            "IR" : 2357123983,
            "IW" : 0,
            "SR" : 7840871025,
            "SW" : 6971346053
          }
        }
      }
    },
    "10" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : 527040145,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#115, ca_address_id#116, ca_street_number#117, ca_street_name#118, ca_street_type#119, ca_suite_number#120, ca_city#121, ca_county#122, ca_state#123, ca_zip#124, ca_country#125, ca_gmt_offset#126, ca_location_type#127], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "12" : {
            "sign" : 1031245998,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24753955590,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "8" : {
            "sign" : 419855978,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 113837048683,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "19" : {
            "sign" : -84657601,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "23" : {
            "sign" : -14387779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 482532000,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111)) "
          },
          "4" : {
            "sign" : -859819627,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6792785226829,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "15" : {
            "sign" : 1011872821,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39926600456,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42))) "
          },
          "11" : {
            "sign" : 1746504807,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 45386751518,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#4 = i_item_sk#75) "
          },
          "9" : {
            "sign" : -1141989269,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 118459872995,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#46) "
          },
          "33" : {
            "sign" : -1835352789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 231369396,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_country#125) AND isnotnull(ca_zip#124)) "
          },
          "22" : {
            "sign" : -702144975,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 135108960,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "26" : {
            "sign" : 2095138697,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(i_item_sk#75) "
          },
          "13" : {
            "sign" : 102638235,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 26954307198,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#5 = c_customer_sk#97) "
          },
          "24" : {
            "sign" : 2021572997,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 500000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#97, c_customer_id#98, c_current_cdemo_sk#99, c_current_hdemo_sk#100, c_current_addr_sk#101, c_first_shipto_date_sk#102, c_first_sales_date_sk#103, c_salutation#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_day#108, c_birth_month#109, c_birth_year#110, c_birth_country#111, c_login#112, c_email_address#113, c_last_review_date#114], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "16" : {
            "sign" : -628374504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 43776970976,
            "rowCount" : 288006388,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "5" : {
            "sign" : 474468585,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 10168082233949,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          },
          "10" : {
            "sign" : 455826232,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 44237719834,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "21" : {
            "sign" : 2043403682,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 192558,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "32" : {
            "sign" : 1153698931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#123, ca_zip#124, ca_country#125] "
          },
          "6" : {
            "sign" : 210705200,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 64283634425,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "1" : {
            "sign" : 1247355946,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 11960,
            "rowCount" : 135,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157], HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51], functions=[sum(netpaid#159)]) "
          },
          "17" : {
            "sign" : 1921382062,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176] "
          },
          "25" : {
            "sign" : -459341749,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 15504000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "14" : {
            "sign" : 1867243163,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9456300108,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] "
          },
          "31" : {
            "sign" : 58525475,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "0" : {
            "sign" : -1795378141,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 11340,
            "rowCount" : 135,
            "isRuntime" : true,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8)))) "
          },
          "20" : {
            "sign" : -1176082101,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 23471,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71)) "
          },
          "27" : {
            "sign" : 228187507,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#75, i_item_id#76, i_rec_start_date#77, i_rec_end_date#78, i_item_desc#79, i_current_price#80, i_wholesale_cost#81, i_brand_id#82, i_brand#83, i_class_id#84, i_class#85, i_category_id#86, i_category#87, i_manufact_id#88, i_manufact#89, i_size#90, i_formulation#91, i_color#92, i_units#93, i_container#94, i_manager_id#95, i_product_name#96], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "2" : {
            "sign" : 1726153103,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163] "
          },
          "18" : {
            "sign" : 812756911,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "30" : {
            "sign" : 2011675015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27)) "
          },
          "7" : {
            "sign" : 815965107,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 72623132945,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "29" : {
            "sign" : -1899214940,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_ticket_number#34L] "
          },
          "3" : {
            "sign" : -842263021,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 675059401424,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "28" : {
            "sign" : 352920416,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2891,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "LogicalQueryStage",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalRelation",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalRelation",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Filter",
          "toId" : 19,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Project",
          "toId" : 18,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Project",
          "toId" : 17,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Aggregate",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalRelation",
          "toId" : 23,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Filter",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "LogicalRelation",
          "toId" : 26,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Filter",
          "toId" : 25,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Filter",
          "toId" : 28,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "LogicalRelation",
          "toId" : 30,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Filter",
          "toId" : 29,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "LogicalRelation",
          "toId" : 33,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "Filter",
          "toId" : 32,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Subquery"
        } ],
        "rawPlan" : "Filter (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8))))\n:  +- Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163]\n:     +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n:        +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n:           +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n:              :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n:              :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n:              :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n:              :     :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n:              :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n:              :     :     :     :     :  +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42)))\n:              :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n:              :     :     :     :     :     :     +- Project [s_store_sk#46]\n:              :     :     :     :     :     :        +- Project [s_store_sk#46]\n:              :     :     :     :     :     :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :     :     :     :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n:              :     :     :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n:              :     :     :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n:              :     :     :     +- Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :        +- Filter isnotnull(i_item_sk#75)\n:              :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n:              :     :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n:              :     :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     +- Project [sr_item_sk#27, sr_ticket_number#34L]\n:              :        +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n:              :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n:              +- Project [ca_state#123, ca_zip#124, ca_country#125]\n:                 +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n:                    +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n+- LogicalQueryStage Aggregate [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157], HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51], functions=[sum(netpaid#159)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 11960,
        "inputRowCount" : 135
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226748125,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 57502,
        "IOBytes" : {
          "Total" : 16660487777,
          "Details" : {
            "IR" : 2357123983,
            "IW" : 0,
            "SR" : 7366026108,
            "SW" : 6937337686
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : 2095138697,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(i_item_sk#75) "
          },
          "12" : {
            "sign" : -859819627,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6792785226829,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "8" : {
            "sign" : -114833265,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 691238664,
            "rowCount" : 28801611,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sr_item_sk#27, sr_ticket_number#34L], ShuffleQueryStage 4 "
          },
          "19" : {
            "sign" : 1746504807,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 45386751518,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#4 = i_item_sk#75) "
          },
          "23" : {
            "sign" : 1011872821,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39926600456,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42))) "
          },
          "4" : {
            "sign" : 1838714639,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2302226368297087451904,
            "rowCount" : 8590396896630923328,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          },
          "40" : {
            "sign" : 1153698931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#123, ca_zip#124, ca_country#125] "
          },
          "15" : {
            "sign" : 815965107,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 72623132945,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "11" : {
            "sign" : -842263021,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 675059401424,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "9" : {
            "sign" : 775636263,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 61040568,
            "rowCount" : 954704,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_state#123, ca_zip#124, ca_country#125], ShuffleQueryStage 5 "
          },
          "33" : {
            "sign" : -459341749,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 15504000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "22" : {
            "sign" : 1867243163,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9456300108,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] "
          },
          "26" : {
            "sign" : 812756911,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "37" : {
            "sign" : -1899214940,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_ticket_number#34L] "
          },
          "13" : {
            "sign" : 474468585,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 10168082233949,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          },
          "24" : {
            "sign" : -628374504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 43776970976,
            "rowCount" : 288006388,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "35" : {
            "sign" : 228187507,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#75, i_item_id#76, i_rec_start_date#77, i_rec_end_date#78, i_item_desc#79, i_current_price#80, i_wholesale_cost#81, i_brand_id#82, i_brand#83, i_class_id#84, i_class#85, i_category_id#86, i_category#87, i_manufact_id#88, i_manufact#89, i_size#90, i_formulation#91, i_color#92, i_units#93, i_container#94, i_manager_id#95, i_product_name#96], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "16" : {
            "sign" : 419855978,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 113837048683,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "5" : {
            "sign" : -833641686,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1871577530312256,
            "rowCount" : 8997968895732,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "10" : {
            "sign" : 1726153103,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163] "
          },
          "21" : {
            "sign" : 102638235,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 26954307198,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#5 = c_customer_sk#97) "
          },
          "32" : {
            "sign" : 2021572997,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 500000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#97, c_customer_id#98, c_current_cdemo_sk#99, c_current_hdemo_sk#100, c_current_addr_sk#101, c_first_shipto_date_sk#102, c_first_sales_date_sk#103, c_salutation#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_day#108, c_birth_month#109, c_birth_year#110, c_birth_country#111, c_login#112, c_email_address#113, c_last_review_date#114], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "6" : {
            "sign" : -914421583,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2087528783809824,
            "rowCount" : 8997968895732,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "36" : {
            "sign" : 352920416,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2891,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] "
          },
          "1" : {
            "sign" : -1746222446,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 721593339316997559552,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157] "
          },
          "39" : {
            "sign" : 58525475,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "17" : {
            "sign" : -1141989269,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 118459872995,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#46) "
          },
          "25" : {
            "sign" : 1921382062,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176] "
          },
          "14" : {
            "sign" : 210705200,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 64283634425,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "31" : {
            "sign" : -14387779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 482532000,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111)) "
          },
          "42" : {
            "sign" : 527040145,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#115, ca_address_id#116, ca_street_number#117, ca_street_name#118, ca_street_type#119, ca_suite_number#120, ca_city#121, ca_county#122, ca_state#123, ca_zip#124, ca_country#125, ca_gmt_offset#126, ca_location_type#127], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "0" : {
            "sign" : 373629755,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 721593339316997559552,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8)))) "
          },
          "20" : {
            "sign" : 1031245998,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24753955590,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "27" : {
            "sign" : -84657601,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "2" : {
            "sign" : -1910952698,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 652870164143950172928,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "38" : {
            "sign" : 2011675015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27)) "
          },
          "18" : {
            "sign" : 455826232,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 44237719834,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "30" : {
            "sign" : -702144975,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 135108960,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "7" : {
            "sign" : 1374117739,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 61419792,
            "rowCount" : 312412,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 6 "
          },
          "29" : {
            "sign" : 2043403682,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 192558,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "41" : {
            "sign" : -1835352789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 231369396,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_country#125) AND isnotnull(ca_zip#124)) "
          },
          "3" : {
            "sign" : -1636930577,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1614994616566613585664,
            "rowCount" : 8590396896630923328,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "28" : {
            "sign" : -1176082101,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 23471,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71)) "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Aggregate",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalRelation",
          "toId" : 23,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalRelation",
          "toId" : 28,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Filter",
          "toId" : 27,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Project",
          "toId" : 26,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Project",
          "toId" : 25,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Aggregate",
          "toId" : 23,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 23,
          "fromName" : "Filter",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 21,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "LogicalRelation",
          "toId" : 31,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Filter",
          "toId" : 30,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Project",
          "toId" : 21,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Join",
          "toId" : 20,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Project",
          "toId" : 19,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "LogicalRelation",
          "toId" : 34,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "Filter",
          "toId" : 33,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "Project",
          "toId" : 19,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Join",
          "toId" : 18,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Project",
          "toId" : 17,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Filter",
          "toId" : 36,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "Project",
          "toId" : 17,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Join",
          "toId" : 16,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "LogicalRelation",
          "toId" : 38,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "Filter",
          "toId" : 37,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 42,
          "fromName" : "LogicalRelation",
          "toId" : 41,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 41,
          "fromName" : "Filter",
          "toId" : 40,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Aggregate",
          "toId" : 10,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Subquery"
        } ],
        "rawPlan" : "Filter (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8))))\n:  +- Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163]\n:     +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n:        +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n:           +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n:              :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n:              :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n:              :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n:              :     :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n:              :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n:              :     :     :     :     :  +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42)))\n:              :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n:              :     :     :     :     :     :     +- Project [s_store_sk#46]\n:              :     :     :     :     :     :        +- Project [s_store_sk#46]\n:              :     :     :     :     :     :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :     :     :     :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n:              :     :     :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n:              :     :     :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n:              :     :     :     +- Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :        +- Filter isnotnull(i_item_sk#75)\n:              :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n:              :     :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n:              :     :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     +- Project [sr_item_sk#27, sr_ticket_number#34L]\n:              :        +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n:              :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n:              +- Project [ca_state#123, ca_zip#124, ca_country#125]\n:                 +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n:                    +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n+- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157]\n   +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n      +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n         +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n            :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n            :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n            :     :- LogicalQueryStage Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 6\n            :     +- LogicalQueryStage Project [sr_item_sk#27, sr_ticket_number#34L], ShuffleQueryStage 4\n            +- LogicalQueryStage Project [ca_state#123, ca_zip#124, ca_country#125], ShuffleQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 813699024,
        "inputRowCount" : 30068727
      },
      "PD" : {
        "5" : [ 10353, 13780, 29539, 20176, 18341, 22193, 24413, 43249, 57565, 57565, 18341, 20176, 47574, 35743, 43249, 35743, 13780, 43249, 20176, 47574, 32493, 22193, 29539, 26854, 8556, 18341, 32493, 29539, 47574, 4390, 7778, 22193, 12527, 10353, 20176, 29539, 26854, 43249, 39317, 22193, 29539, 24413, 15158, 13780, 24413, 18341, 35743, 32493, 32493, 35743, 57565, 43249, 13780, 29539, 39317, 24413, 12527, 47574, 43249, 26854, 22193, 32493, 26854, 13780, 22193, 47574, 39317, 16674, 26854, 29539, 13780, 13780, 22193, 12527, 18341, 39317, 6428, 18341, 39317, 26854, 52331, 39317, 32493, 32493, 32493, 9412, 29539, 26854, 11388, 18341, 10353, 12527, 11388, 43249, 52331, 18341, 15158, 13780, 13780, 32493, 35743, 43249, 32493, 16674, 15158, 20176, 18341, 22193, 29539, 3628, 29539, 24413, 16674, 22193, 16674, 39317, 22193, 57565, 29539, 32493, 13780, 32493, 43249, 20176, 22193, 24413, 4830, 13780, 22193, 26854, 15158, 24413, 22193, 32493, 35743, 47574, 29539, 29539, 24413, 9412, 18341, 29539, 43249, 11388, 18341, 32493, 47574, 22193, 47574, 24413, 26854, 47574, 18341, 11388, 43249, 15158, 29539, 39317, 24413, 16674, 52331, 20176, 10353, 29539, 22193, 12527, 18341, 10353, 47574, 15158, 8556, 47574, 47574, 35743, 9412, 29539, 32493, 13780, 16674, 35743, 47574, 22193, 63321, 24413, 24413, 24413, 26854, 52331, 26854, 35743, 47574, 16674, 29539, 22193, 39317, 29539, 24413, 18341, 35743, 22193 ],
        "4" : [ 1849964, 1850299, 1850358, 1828178, 1831060, 1824389, 1830718, 1842096, 1821121, 1834564, 1826760, 1837485, 1834037, 1863690, 1834545, 1831490, 1833619, 1845225, 1852827, 1832435, 1833492, 1844280, 1834139, 1845389, 1823976, 1828654, 1838733, 1833991, 1836305, 1844661, 1833924, 1845608, 1829244, 1840258, 1840080, 1833519, 1831033, 1825910, 1828701, 1833146, 1825723, 1829867, 1850291, 1836296, 1834189, 1832532, 1836096, 1828702, 1822331, 1836086, 1836603, 1846376, 1841103, 1842299, 1838503, 1837943, 1827601, 1836511, 1842266, 1833890, 1833656, 1837981, 1830944, 1847736, 1846568, 1838698, 1826914, 1834211, 1840349, 1831696, 1842126, 1832055, 1846371, 1832261, 1824675, 1831276, 1847990, 1829238, 1826547, 1834235, 1848247, 1842449, 1826302, 1850820, 1829120, 1832394, 1838881, 1824017, 1841697, 1828751, 1837932, 1841286, 1819490, 1834471, 1834123, 1840507, 1833671, 1846962, 1830238, 1847174, 1847382, 1831330, 1834565, 1823998, 1822885, 1827910, 1837354, 1846442, 1837273, 1840872, 1832856, 1824718, 1846350, 1849427, 1835742, 1837108, 1834981, 1826638, 1824546, 1851557, 1849691, 1827136, 1832401, 1853163, 1827561, 1817816, 1839470, 1835444, 1826730, 1843801, 1840640, 1831522, 1836781, 1841159, 1838616, 1831369, 1834276, 1830520, 1840323, 1846935, 1849354, 1846896, 1828782, 1834591, 1834808, 1836994, 1832831, 1835276, 1833918, 1843148, 1838411, 1832496, 1821068, 1840055, 1826489, 1825662, 1838319, 1841064, 1835652, 1842056, 1853796, 1824006, 1835888, 1847150, 1831745, 1844599, 1827961, 1842865, 1830256, 1846443, 1838984, 1834224, 1829329, 1846810, 1829207, 1838887, 1829365, 1834906, 1840150, 1836248, 1846923, 1828523, 1846992, 1830402, 1846910, 1827421, 1834102, 1833531, 1839872, 1840015, 1845898, 1837808, 1843181, 1829087, 1839423, 1836629, 1832089, 1834549, 1827101, 1845794 ],
        "6" : [ 155426, 162712, 151494, 155426, 166644, 170969, 155426, 166644, 166644, 166644, 151494, 162712, 166644, 162712, 151494, 166644, 155426, 155426, 166644, 162712, 166644, 166644, 162712, 162712, 166644, 166644, 151494, 155426, 155426, 166644, 155426, 151494, 155426, 166644, 166644, 162712, 166644, 166644, 166644, 151494, 155426, 166644, 162712, 166644, 166644, 162712, 162712, 155426, 166644, 166644, 166644, 166644, 155426, 166644, 166644, 166644, 166644, 166644, 166644, 166644, 155426, 155426, 166644, 162712, 166644, 155426, 162712, 166644, 155426, 166644, 162712, 166644, 166644, 166644, 162712, 166644, 166644, 162712, 166644, 166644, 162712, 147920, 166644, 166644, 155426, 155426, 162712, 155426, 166644, 151494, 155426, 166644, 162712, 162712, 162712, 151494, 166644, 166644, 162712, 162712, 151494, 166644, 151494, 166644, 166644, 162712, 155426, 166644, 166644, 166644, 166644, 166644, 151494, 162712, 166644, 151494, 155426, 166644, 155426, 155426, 166644, 162712, 166644, 155426, 166644, 166644, 166644, 166644, 166644, 155426, 166644, 162712, 166644, 155426, 162712, 166644, 162712, 151494, 151494, 166644, 155426, 166644, 170969, 162712, 155426, 155426, 162712, 162712, 159751, 162712, 159751, 155426, 155426, 151494, 166644, 166644, 166644, 166644, 155426, 155426, 155426, 166644, 155426, 166644, 162712, 151494, 166644, 166644, 166644, 155426, 166644, 166644, 166644, 155426, 151494, 155426, 166644, 166644, 166644, 151494, 166644, 155426, 166644, 162712, 166644, 151494, 155426, 166644, 166644, 151494, 162712, 155426, 166644, 162712, 155426, 166644, 155426, 166644, 166644, 155426 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226739102,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 66525,
        "IOBytes" : {
          "Total" : 17053048194,
          "Details" : {
            "IR" : 2357123983,
            "IW" : 0,
            "SR" : 7755426758,
            "SW" : 6940497453
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : 1058420140,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 224,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 224,
        "inputRowCount" : 1
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 6,
        "FinishedTasksNum" : 5,
        "FinishedTasksTotalTimeInMs" : 13994.0,
        "FinishedTasksDistributionInMs" : [ 2729.0, 2731.0, 2732.0, 2733.0, 3069.0 ]
      },
      "StartTimeInMs" : 1702226711659,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 93968,
        "IOBytes" : {
          "Total" : 20262001645,
          "Details" : {
            "IR" : 5008919475,
            "IW" : 0,
            "SR" : 7840878380,
            "SW" : 7412203790
          }
        }
      }
    },
    "17" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : 473987292,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 40,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163], HashAggregate(keys=[], functions=[avg(netpaid#159)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163], HashAggregate(keys=[], functions=[avg(netpaid#159)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 40,
        "inputRowCount" : 1
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226805298,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 329,
        "IOBytes" : {
          "Total" : 14179,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 14179,
            "SW" : 0
          }
        }
      }
    },
    "14" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 527040145,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#115, ca_address_id#116, ca_street_number#117, ca_street_name#118, ca_street_type#119, ca_suite_number#120, ca_city#121, ca_county#122, ca_state#123, ca_zip#124, ca_country#125, ca_gmt_offset#126, ca_location_type#127], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "8" : {
            "sign" : 2011675015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27)) "
          },
          "4" : {
            "sign" : 366495343,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 239428042932222144,
            "rowCount" : 1151096360251068,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "11" : {
            "sign" : -1835352789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 231369396,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_country#125) AND isnotnull(ca_zip#124)) "
          },
          "9" : {
            "sign" : 58525475,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "5" : {
            "sign" : 1444641876,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 267054355578247776,
            "rowCount" : 1151096360251068,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "10" : {
            "sign" : 1153698931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#123, ca_zip#124, ca_country#125] "
          },
          "6" : {
            "sign" : -352026637,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 7870557840,
            "rowCount" : 39966388,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 11 "
          },
          "1" : {
            "sign" : -1048586098,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 16769341452639342015470,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "0" : {
            "sign" : -344778688,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163] "
          },
          "2" : {
            "sign" : 393209914,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 197039762068512268681776,
            "rowCount" : 1082636055321495981768,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "7" : {
            "sign" : -1899214940,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_ticket_number#34L] "
          },
          "3" : {
            "sign" : -1688353096,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 285815918604874939186752,
            "rowCount" : 1082636055321495981768,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalRelation",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalRelation",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163]\n+- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n   +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n      +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n         :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n         :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n         :     :- LogicalQueryStage Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 11\n         :     +- Project [sr_item_sk#27, sr_ticket_number#34L]\n         :        +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n         :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n         +- Project [ca_state#123, ca_zip#124, ca_country#125]\n            +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n               +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n"
      },
      "IM" : {
        "inputSizeInBytes" : 11803164048,
        "inputRowCount" : 69767999
      },
      "PD" : {
        "13" : [ 20687303, 20687303, 20630603, 20687303, 20630603, 20687303, 20687303, 20573903, 20517203, 20687303, 20573903, 20630603, 20630603, 20630603, 20687303, 20630603, 20724130, 20630603, 20630603, 20630603, 20687303, 20630603, 20554030, 20610730, 20744003, 20517203, 20630603, 20667430, 20687303, 20744003, 20630603, 20460503, 20744003, 20610730, 20687303, 20687303, 20630603, 20687303, 20630603, 20573903, 20630603, 20687303, 20630603, 20687303, 20744003, 20744003, 20687303, 20744003, 20687303, 20610730, 20497330, 20687303, 20744003, 20744003, 20687303, 20573903, 20687303, 20687303, 20800703, 20724130, 20687303, 20630603, 20573903, 20573903, 20687303, 20687303, 20744003, 20630603, 20687303, 20687303, 20630603, 20687303, 20687303, 20687303, 20630603, 20573903, 20630603, 20630603, 20744003, 20687303, 20800703, 20630603, 20744003, 20687303, 20610730, 20744003, 20610730, 20630603, 20630603, 20517203, 20687303, 20497330, 20517203, 20687303, 20630603, 20573903, 20630603, 20610730, 20744003, 20573903, 20630603, 20630603, 20630603, 20630603, 20687303, 20687303, 20630603, 20630603, 20630603, 20687303, 20667430, 20744003, 20687303, 20687303, 20744003, 20517203, 20687303, 20630603, 20744003, 20630603, 20630603, 20687303, 20800703, 20687303, 20687303, 20610730, 20744003, 20630603, 20687303, 20630603, 20800703, 20744003, 20630603, 20687303, 20667430, 20630603, 20517203, 20630603, 20744003, 20667430, 20573903, 20517203, 20630603, 20687303, 20667430, 20630603, 20630603, 20630603, 20630603, 20687303, 20440630, 20687303, 20687303, 20687303, 20687303, 20573903, 20744003, 20780830, 20667430, 20630603, 20744003, 20630603, 20573903, 20630603, 20687303, 20667430, 20687303, 20610730, 20630603, 20800703, 20630603, 20724130, 20573903, 20573903, 20744003, 20667430, 20667430, 20687303, 20573903, 20573903, 20724130, 20800703, 20517203, 20744003, 20630603, 20630603, 20744003, 20744003, 20744003, 20630603, 20724130, 20630603, 20687303, 20687303, 20744003, 20610730, 20630603, 20610730, 20610730, 20630603 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226794300,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 11327,
        "IOBytes" : {
          "Total" : 4970903770,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 4602705002,
            "SW" : 368198768
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -907905969,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 33160,
            "rowCount" : 5,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0) AS bloomFilter#173], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0) AS bloomFilter#173], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 33160,
        "inputRowCount" : 5
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 4,
        "FinishedTasksTotalTimeInMs" : 10925.0,
        "FinishedTasksDistributionInMs" : [ 2729.0, 2731.0, 2732.0, 2733.0, 2733.0 ]
      },
      "StartTimeInMs" : 1702226714376,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 91251,
        "IOBytes" : {
          "Total" : 20260929111,
          "Details" : {
            "IR" : 5007854296,
            "IW" : 0,
            "SR" : 7840878115,
            "SW" : 7412196700
          }
        }
      }
    },
    "7" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : -1899214940,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_ticket_number#34L] "
          },
          "12" : {
            "sign" : 815965107,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 72623132945,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "8" : {
            "sign" : -842263021,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 675059401424,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "19" : {
            "sign" : 1867243163,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9456300108,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] "
          },
          "23" : {
            "sign" : 812756911,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "4" : {
            "sign" : -307996189,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 7952661407104,
            "rowCount" : 29674109728,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          },
          "15" : {
            "sign" : 455826232,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 44237719834,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "11" : {
            "sign" : 210705200,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 64283634425,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "9" : {
            "sign" : -859819627,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6792785226829,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "33" : {
            "sign" : 352920416,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2891,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] "
          },
          "22" : {
            "sign" : 1921382062,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176] "
          },
          "26" : {
            "sign" : 2043403682,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 192558,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "37" : {
            "sign" : 1153698931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#123, ca_zip#124, ca_country#125] "
          },
          "13" : {
            "sign" : 419855978,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 113837048683,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "24" : {
            "sign" : -84657601,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "35" : {
            "sign" : 2011675015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27)) "
          },
          "16" : {
            "sign" : 1746504807,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 45386751518,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#4 = i_item_sk#75) "
          },
          "5" : {
            "sign" : -396646610,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 5614008,
            "rowCount" : 31082,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 7 "
          },
          "10" : {
            "sign" : 474468585,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 10168082233949,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          },
          "21" : {
            "sign" : -628374504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 43776970976,
            "rowCount" : 288006388,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "32" : {
            "sign" : 228187507,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#75, i_item_id#76, i_rec_start_date#77, i_rec_end_date#78, i_item_desc#79, i_current_price#80, i_wholesale_cost#81, i_brand_id#82, i_brand#83, i_class_id#84, i_class#85, i_category_id#86, i_category#87, i_manufact_id#88, i_manufact#89, i_size#90, i_formulation#91, i_color#92, i_units#93, i_container#94, i_manager_id#95, i_product_name#96], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "6" : {
            "sign" : 775636263,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 61040568,
            "rowCount" : 954704,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_state#123, ca_zip#124, ca_country#125], ShuffleQueryStage 5 "
          },
          "36" : {
            "sign" : 58525475,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : -1355193756,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 2492625217152,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157] "
          },
          "39" : {
            "sign" : 527040145,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#115, ca_address_id#116, ca_street_number#117, ca_street_name#118, ca_street_type#119, ca_suite_number#120, ca_city#121, ca_county#122, ca_state#123, ca_zip#124, ca_country#125, ca_gmt_offset#126, ca_location_type#127], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "17" : {
            "sign" : 1031245998,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24753955590,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "25" : {
            "sign" : -1176082101,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 23471,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71)) "
          },
          "14" : {
            "sign" : -1141989269,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 118459872995,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#46) "
          },
          "31" : {
            "sign" : 2095138697,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(i_item_sk#75) "
          },
          "0" : {
            "sign" : -1877389641,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 2492625217152,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8)))) "
          },
          "20" : {
            "sign" : 1011872821,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39926600456,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42))) "
          },
          "27" : {
            "sign" : -702144975,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 135108960,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "2" : {
            "sign" : -1051319988,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 2255232339328,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "38" : {
            "sign" : -1835352789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 231369396,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_country#125) AND isnotnull(ca_zip#124)) "
          },
          "18" : {
            "sign" : 102638235,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 26954307198,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#5 = c_customer_sk#97) "
          },
          "30" : {
            "sign" : -459341749,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 15504000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "7" : {
            "sign" : 1726153103,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163] "
          },
          "29" : {
            "sign" : 2021572997,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 500000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#97, c_customer_id#98, c_current_cdemo_sk#99, c_current_hdemo_sk#100, c_current_addr_sk#101, c_first_shipto_date_sk#102, c_first_sales_date_sk#103, c_salutation#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_day#108, c_birth_month#109, c_birth_year#110, c_birth_country#111, c_login#112, c_email_address#113, c_last_review_date#114], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : -418034879,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 5578732628864,
            "rowCount" : 29674109728,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "28" : {
            "sign" : -14387779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 482532000,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111)) "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Aggregate",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalRelation",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "LogicalRelation",
          "toId" : 25,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Filter",
          "toId" : 24,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Project",
          "toId" : 23,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Project",
          "toId" : 22,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Aggregate",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 20,
          "fromName" : "Filter",
          "toId" : 19,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Project",
          "toId" : 18,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalRelation",
          "toId" : 28,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Filter",
          "toId" : 27,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Project",
          "toId" : 18,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Join",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "LogicalRelation",
          "toId" : 31,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Filter",
          "toId" : 30,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Project",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Join",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Filter",
          "toId" : 33,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Join",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "LogicalRelation",
          "toId" : 35,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "Filter",
          "toId" : 34,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Join",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "LogicalRelation",
          "toId" : 38,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "Filter",
          "toId" : 37,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Aggregate",
          "toId" : 7,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Subquery"
        } ],
        "rawPlan" : "Filter (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8))))\n:  +- Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163]\n:     +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n:        +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n:           +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n:              :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n:              :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n:              :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n:              :     :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n:              :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n:              :     :     :     :     :  +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42)))\n:              :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n:              :     :     :     :     :     :     +- Project [s_store_sk#46]\n:              :     :     :     :     :     :        +- Project [s_store_sk#46]\n:              :     :     :     :     :     :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :     :     :     :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n:              :     :     :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n:              :     :     :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n:              :     :     :     +- Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :        +- Filter isnotnull(i_item_sk#75)\n:              :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n:              :     :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n:              :     :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     +- Project [sr_item_sk#27, sr_ticket_number#34L]\n:              :        +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n:              :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n:              +- Project [ca_state#123, ca_zip#124, ca_country#125]\n:                 +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n:                    +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n+- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157]\n   +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n      +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n         +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n            :- LogicalQueryStage Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 7\n            +- LogicalQueryStage Project [ca_state#123, ca_zip#124, ca_country#125], ShuffleQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 66654576,
        "inputRowCount" : 985786
      },
      "PD" : {
        "5" : [ 10353, 13780, 29539, 20176, 18341, 22193, 24413, 43249, 57565, 57565, 18341, 20176, 47574, 35743, 43249, 35743, 13780, 43249, 20176, 47574, 32493, 22193, 29539, 26854, 8556, 18341, 32493, 29539, 47574, 4390, 7778, 22193, 12527, 10353, 20176, 29539, 26854, 43249, 39317, 22193, 29539, 24413, 15158, 13780, 24413, 18341, 35743, 32493, 32493, 35743, 57565, 43249, 13780, 29539, 39317, 24413, 12527, 47574, 43249, 26854, 22193, 32493, 26854, 13780, 22193, 47574, 39317, 16674, 26854, 29539, 13780, 13780, 22193, 12527, 18341, 39317, 6428, 18341, 39317, 26854, 52331, 39317, 32493, 32493, 32493, 9412, 29539, 26854, 11388, 18341, 10353, 12527, 11388, 43249, 52331, 18341, 15158, 13780, 13780, 32493, 35743, 43249, 32493, 16674, 15158, 20176, 18341, 22193, 29539, 3628, 29539, 24413, 16674, 22193, 16674, 39317, 22193, 57565, 29539, 32493, 13780, 32493, 43249, 20176, 22193, 24413, 4830, 13780, 22193, 26854, 15158, 24413, 22193, 32493, 35743, 47574, 29539, 29539, 24413, 9412, 18341, 29539, 43249, 11388, 18341, 32493, 47574, 22193, 47574, 24413, 26854, 47574, 18341, 11388, 43249, 15158, 29539, 39317, 24413, 16674, 52331, 20176, 10353, 29539, 22193, 12527, 18341, 10353, 47574, 15158, 8556, 47574, 47574, 35743, 9412, 29539, 32493, 13780, 16674, 35743, 47574, 22193, 63321, 24413, 24413, 24413, 26854, 52331, 26854, 35743, 47574, 16674, 29539, 22193, 39317, 29539, 24413, 18341, 35743, 22193 ],
        "7" : [ 13039, 16566, 21475, 15189, 12544, 14857, 16821, 14107, 14954, 16315, 18192, 16641, 12154, 12801, 14934, 16913, 18653, 16066, 16071, 16519, 20172, 13601, 13518, 15583, 16290, 13100, 16945, 13663, 18028, 15315, 16970, 14587, 16605, 14421, 16809, 18638, 13410, 17954, 21311, 9365, 15892, 11935, 15478, 15478, 13406, 12777, 13799, 18795, 17160, 18877, 12811, 18146, 13827, 12702, 14438, 18366, 12493, 19221, 12874, 19206, 18761, 13959, 16381, 17080, 19626, 18248, 18809, 14774, 18295, 15749, 15867, 16528, 8968, 15139, 14261, 19208, 14484, 17274, 18930, 16960, 12400, 19380, 14547, 23743, 14752, 16161, 12328, 15769, 17150, 12357, 17997, 10771, 19348, 15477, 15462, 11385, 18528, 17979, 22256, 19605, 16534, 15789, 9999, 12066, 15264, 18500, 16599, 18471, 12116, 14938, 18304, 13685, 18698, 16679, 14593, 11401, 16784, 16511, 14614, 23324, 15499, 16388, 15030, 16023, 14643, 16569, 14096, 18289, 18979, 17889, 17348, 16700, 11729, 17545, 13784, 12963, 14582, 17226, 17516, 14989, 19028, 11957, 13774, 25416, 19524, 17887, 17216, 17893, 19989, 16196, 16913, 15619, 14218, 14777, 16020, 18667, 15325, 18462, 24757, 19296, 18634, 17255, 21208, 12936, 19555, 17752, 19738, 10360, 19313, 18405, 15238, 16089, 12474, 21269, 15856, 12762, 18710, 14980, 13549, 18214, 9971, 14009, 16485, 13384, 16654, 12598, 19731, 12620, 13016, 18705, 14256, 20079, 12358, 10453, 15958, 15399, 14580, 15020, 13210, 16672 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226746512,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 59115,
        "IOBytes" : {
          "Total" : 16668919266,
          "Details" : {
            "IR" : 2357123983,
            "IW" : 0,
            "SR" : 7374360053,
            "SW" : 6937435230
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "45" : {
            "sign" : 352920416,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2891,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] "
          },
          "34" : {
            "sign" : 1921382062,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176] "
          },
          "12" : {
            "sign" : -1741284868,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 62496965601600,
            "rowCount" : 624969656016,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#5 = c_customer_sk#97) "
          },
          "51" : {
            "sign" : 527040145,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#115, ca_address_id#116, ca_street_number#117, ca_street_name#118, ca_street_type#119, ca_suite_number#120, ca_city#121, ca_county#122, ca_state#123, ca_zip#124, ca_country#125, ca_gmt_offset#126, ca_location_type#127], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "8" : {
            "sign" : 1915756015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 10527958838839640832,
            "rowCount" : 46175258065086144,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#46) "
          },
          "19" : {
            "sign" : 1726153103,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163] "
          },
          "23" : {
            "sign" : 210705200,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 64283634425,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "4" : {
            "sign" : 931999392,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 330218077267571850888595516210176,
            "rowCount" : 1250826050255953980638619379584,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          },
          "40" : {
            "sign" : -14387779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 482532000,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111)) "
          },
          "15" : {
            "sign" : 204445740,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1114112,
            "rowCount" : 1572,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95], BroadcastQueryStage 2 "
          },
          "11" : {
            "sign" : -306043799,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 57497208353472,
            "rowCount" : 624969656016,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "9" : {
            "sign" : 880242762,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 161122177078172928,
            "rowCount" : 982452299257152,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "44" : {
            "sign" : 228187507,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#75, i_item_id#76, i_rec_start_date#77, i_rec_end_date#78, i_item_desc#79, i_current_price#80, i_wholesale_cost#81, i_brand_id#82, i_brand#83, i_class_id#84, i_class#85, i_category_id#86, i_category#87, i_manufact_id#88, i_manufact#89, i_size#90, i_formulation#91, i_color#92, i_units#93, i_container#94, i_manager_id#95, i_product_name#96], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "33" : {
            "sign" : -628374504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 43776970976,
            "rowCount" : 288006388,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "22" : {
            "sign" : 474468585,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 10168082233949,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          },
          "26" : {
            "sign" : -1141989269,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 118459872995,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#46) "
          },
          "50" : {
            "sign" : -1835352789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 231369396,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_country#125) AND isnotnull(ca_zip#124)) "
          },
          "37" : {
            "sign" : -1176082101,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 23471,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71)) "
          },
          "13" : {
            "sign" : 2012214440,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 15542256,
            "rowCount" : 323797,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15], ShuffleQueryStage 0 "
          },
          "46" : {
            "sign" : -1899214940,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_ticket_number#34L] "
          },
          "24" : {
            "sign" : 815965107,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 72623132945,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "35" : {
            "sign" : 812756911,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "16" : {
            "sign" : -2059652252,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051704,
            "rowCount" : 47,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71], BroadcastQueryStage 3 "
          },
          "5" : {
            "sign" : 2105513021,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 276623738687966550603420672,
            "rowCount" : 1329921820615223800977984,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "10" : {
            "sign" : 294442031,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 165051986275201536,
            "rowCount" : 982452299257152,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#4 = i_item_sk#75) "
          },
          "48" : {
            "sign" : 58525475,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "21" : {
            "sign" : -859819627,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6792785226829,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "43" : {
            "sign" : 2095138697,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(i_item_sk#75) "
          },
          "32" : {
            "sign" : 1011872821,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39926600456,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42))) "
          },
          "49" : {
            "sign" : 1153698931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#123, ca_zip#124, ca_country#125] "
          },
          "6" : {
            "sign" : 1294965600,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 308541862382731921826892288,
            "rowCount" : 1329921820615223800977984,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "36" : {
            "sign" : -84657601,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "1" : {
            "sign" : 1174838359,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 101716109874005449234059644016384,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157] "
          },
          "39" : {
            "sign" : -702144975,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 135108960,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "17" : {
            "sign" : -114833265,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sr_item_sk#27, sr_ticket_number#34L], ShuffleQueryStage 4 "
          },
          "25" : {
            "sign" : 419855978,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 113837048683,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "14" : {
            "sign" : 1038420939,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 131450376,
            "rowCount" : 1930128,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111], ShuffleQueryStage 1 "
          },
          "47" : {
            "sign" : 2011675015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27)) "
          },
          "31" : {
            "sign" : 1867243163,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9456300108,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] "
          },
          "42" : {
            "sign" : -459341749,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 15504000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "0" : {
            "sign" : -503733772,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 101716109874005449234059644016384,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8)))) "
          },
          "20" : {
            "sign" : -842263021,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 675059401424,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "27" : {
            "sign" : 455826232,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 44237719834,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "2" : {
            "sign" : -457678263,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 92028861314576358830815868395776,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "38" : {
            "sign" : 2043403682,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 192558,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "18" : {
            "sign" : 775636263,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_state#123, ca_zip#124, ca_country#125], ShuffleQueryStage 5 "
          },
          "30" : {
            "sign" : 102638235,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 26954307198,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#5 = c_customer_sk#97) "
          },
          "7" : {
            "sign" : -1752375254,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 10158556774318951680,
            "rowCount" : 46175258065086144,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "29" : {
            "sign" : 1031245998,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24753955590,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "41" : {
            "sign" : 2021572997,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 500000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#97, c_customer_id#98, c_current_cdemo_sk#99, c_current_hdemo_sk#100, c_current_addr_sk#101, c_first_shipto_date_sk#102, c_first_sales_date_sk#103, c_salutation#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_day#108, c_birth_month#109, c_birth_year#110, c_birth_country#111, c_login#112, c_email_address#113, c_last_review_date#114], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : 1644094708,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 227650341146583624476228727084288,
            "rowCount" : 1250826050255953980638619379584,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "28" : {
            "sign" : 1746504807,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 45386751518,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#4 = i_item_sk#75) "
          }
        },
        "links" : [ {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Join",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Aggregate",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "LogicalRelation",
          "toId" : 32,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "LogicalRelation",
          "toId" : 37,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Filter",
          "toId" : 36,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "Project",
          "toId" : 35,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "Project",
          "toId" : 34,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "Aggregate",
          "toId" : 32,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 32,
          "fromName" : "Filter",
          "toId" : 31,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Project",
          "toId" : 30,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 41,
          "fromName" : "LogicalRelation",
          "toId" : 40,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "Filter",
          "toId" : 39,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "Project",
          "toId" : 30,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Join",
          "toId" : 29,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Project",
          "toId" : 28,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 44,
          "fromName" : "LogicalRelation",
          "toId" : 43,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 43,
          "fromName" : "Filter",
          "toId" : 42,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 42,
          "fromName" : "Project",
          "toId" : 28,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Join",
          "toId" : 27,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Project",
          "toId" : 26,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Filter",
          "toId" : 45,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 45,
          "fromName" : "Project",
          "toId" : 26,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Join",
          "toId" : 25,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Project",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 48,
          "fromName" : "LogicalRelation",
          "toId" : 47,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 47,
          "fromName" : "Filter",
          "toId" : 46,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 46,
          "fromName" : "Project",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Join",
          "toId" : 23,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Project",
          "toId" : 22,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 51,
          "fromName" : "LogicalRelation",
          "toId" : 50,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 50,
          "fromName" : "Filter",
          "toId" : 49,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 49,
          "fromName" : "Project",
          "toId" : 22,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Join",
          "toId" : 21,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Project",
          "toId" : 20,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Aggregate",
          "toId" : 19,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Subquery"
        } ],
        "rawPlan" : "Filter (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8))))\n:  +- Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163]\n:     +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n:        +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n:           +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n:              :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n:              :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n:              :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n:              :     :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n:              :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n:              :     :     :     :     :  +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42)))\n:              :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n:              :     :     :     :     :     :     +- Project [s_store_sk#46]\n:              :     :     :     :     :     :        +- Project [s_store_sk#46]\n:              :     :     :     :     :     :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :     :     :     :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n:              :     :     :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n:              :     :     :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n:              :     :     :     +- Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :        +- Filter isnotnull(i_item_sk#75)\n:              :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n:              :     :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n:              :     :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     +- Project [sr_item_sk#27, sr_ticket_number#34L]\n:              :        +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n:              :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n:              +- Project [ca_state#123, ca_zip#124, ca_country#125]\n:                 +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n:                    +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n+- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157]\n   +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n      +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n         +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n            :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n            :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n            :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n            :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n            :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n            :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n            :     :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n            :     :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n            :     :     :     :     :- LogicalQueryStage Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15], ShuffleQueryStage 0\n            :     :     :     :     +- LogicalQueryStage Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111], ShuffleQueryStage 1\n            :     :     :     +- LogicalQueryStage Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95], BroadcastQueryStage 2\n            :     :     +- LogicalQueryStage Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71], BroadcastQueryStage 3\n            :     +- LogicalQueryStage Project [sr_item_sk#27, sr_ticket_number#34L], ShuffleQueryStage 4\n            +- LogicalQueryStage Project [ca_state#123, ca_zip#124, ca_country#125], ShuffleQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 785384332,
        "inputRowCount" : 31997681
      },
      "PD" : {
        "2" : [ 62781, 64962, 65216, 64038, 66287, 65773, 62302, 62672, 63797, 62384, 64092, 65970, 64691, 64581, 66301, 65359, 63180, 65379, 62166, 63959, 65987, 62393, 63230, 64974, 62945, 62949, 62178, 67791, 64088, 62189, 62615, 65725, 64508, 63724, 64931, 65365, 61732, 62782, 62716, 61835, 65959, 66520, 63280, 64363, 63179, 62191, 66467, 62207, 64520, 66837, 65803, 66482, 63845, 66405, 64183, 63439, 63178, 63094, 63445, 64220, 62562, 66363, 63323, 65370, 61305, 64038, 62668, 62310, 63423, 66404, 63716, 63553, 62931, 62837, 63318, 66412, 61820, 62929, 64843, 64088, 66203, 64705, 64852, 60363, 63067, 64729, 61497, 63652, 62863, 65727, 65072, 63988, 66621, 64890, 64404, 62096, 64711, 63549, 64394, 62297, 63543, 65086, 59744, 60017, 62363, 64000, 63186, 65654, 62478, 63126, 63254, 63340, 62490, 62325, 62604, 63788, 62702, 64051, 63927, 61005, 62851, 63173, 64300, 64641, 66702, 63274, 63241, 65349, 64484, 62831, 63427, 67265, 61826, 62180, 62864, 62669, 65360, 66034, 63976, 63227, 62933, 60567, 65294, 66713, 63741, 64127, 64657, 63900, 62556, 60852, 64701, 63123, 62641, 63413, 65653, 64905, 64644, 66185, 62945, 61548, 64246, 63846, 64979, 63135, 63749, 65050, 64532, 63399, 64886, 62757, 63309, 63924, 63143, 64583, 63588, 62464, 64327, 61371, 63288, 64525, 61952, 64549, 62649, 64775, 63017, 64725, 64783, 65713, 62423, 61602, 66999, 62312, 63151, 63015, 64757, 65883, 63293, 65329, 62636, 61981 ],

      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226733551,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 72076,
        "IOBytes" : {
          "Total" : 17801482451,
          "Details" : {
            "IR" : 2633858993,
            "IW" : 0,
            "SR" : 7840871025,
            "SW" : 7326752433
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "12" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -396646610,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5614008,
                "rowCount" : 31082
              },
              "compileTime" : {
                "sizeInBytes" : 64283634425,
                "rowCount" : 347479105
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 7 "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 7\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1291408086,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 5614008,
            "rowCount" : 31082,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [12]: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] Arguments: 7 "
          }
        },
        "links" : [ ],
        "rawPlan" : "ShuffleQueryStage 7\n+- Exchange hashpartitioning(c_birth_country#111, s_zip#71, 200), ENSURE_REQUIREMENTS, [plan_id=1056]\n   +- *(12) Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n      +- *(12) SortMergeJoin [ss_ticket_number#11L, ss_item_sk#4], [sr_ticket_number#34L, sr_item_sk#27], Inner\n         :- *(10) Sort [ss_ticket_number#11L ASC NULLS FIRST, ss_item_sk#4 ASC NULLS FIRST], false, 0\n         :  +- AQEShuffleRead coalesced\n         :     +- ShuffleQueryStage 6\n         :        +- Exchange hashpartitioning(ss_ticket_number#11L, ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=813]\n         :           +- *(9) Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n         :              +- *(9) BroadcastHashJoin [ss_store_sk#9], [s_store_sk#46], Inner, BuildRight, false\n         :                 :- *(9) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n         :                 :  +- *(9) BroadcastHashJoin [ss_item_sk#4], [i_item_sk#75], Inner, BuildRight, false\n         :                 :     :- *(9) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n         :                 :     :  +- *(9) SortMergeJoin [ss_customer_sk#5], [c_customer_sk#97], Inner\n         :                 :     :     :- *(7) Sort [ss_customer_sk#5 ASC NULLS FIRST], false, 0\n         :                 :     :     :  +- AQEShuffleRead coalesced\n         :                 :     :     :     +- ShuffleQueryStage 0\n         :                 :     :     :        +- Exchange hashpartitioning(ss_customer_sk#5, 200), ENSURE_REQUIREMENTS, [plan_id=474]\n         :                 :     :     :           +- *(1) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n         :                 :     :     :              +- *(1) Filter (((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(Subquery subquery#174, [id=#277], xxhash64(ss_item_sk#4, 42))) AND might_contain(Subquery subquery#177, [id=#290], xxhash64(ss_store_sk#9, 42)))\n         :                 :     :     :                 :  :- Subquery subquery#174, [id=#277]\n         :                 :     :     :                 :  :  +- AdaptiveSparkPlan isFinalPlan=true\n                                                                  +- == Final Plan ==\n                                                                     ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[bloomFilter#173])\n                                                                     +- ShuffleQueryStage 0\n                                                                        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=622]\n                                                                           +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[buf#194])\n                                                                              +- *(1) Project [i_item_sk#75]\n                                                                                 +- *(1) Filter ((isnotnull(i_color#92) AND (i_color#92 = orchid)) AND isnotnull(i_item_sk#75))\n                                                                                    +- *(1) ColumnarToRow\n                                                                                       +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_color#92] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = orchid), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,orchid), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_color:string>\n                                                                  +- == Initial Plan ==\n                                                                     ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[bloomFilter#173])\n                                                                     +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=275]\n                                                                        +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[buf#194])\n                                                                           +- Project [i_item_sk#75]\n                                                                              +- Filter ((isnotnull(i_color#92) AND (i_color#92 = orchid)) AND isnotnull(i_item_sk#75))\n                                                                                 +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_color#92] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = orchid), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,orchid), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_color:string>\n         :                 :     :     :                 :  +- Subquery subquery#177, [id=#290]\n         :                 :     :     :                 :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                                  +- == Final Plan ==\n                                                                     ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[bloomFilter#176])\n                                                                     +- ShuffleQueryStage 0\n                                                                        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=617]\n                                                                           +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[buf#193])\n                                                                              +- *(1) Project [s_store_sk#46]\n                                                                                 +- *(1) Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n                                                                                    +- *(1) ColumnarToRow\n                                                                                       +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_market_id#56,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string>\n                                                                  +- == Initial Plan ==\n                                                                     ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[bloomFilter#176])\n                                                                     +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=288]\n                                                                        +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[buf#193])\n                                                                           +- Project [s_store_sk#46]\n                                                                              +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n                                                                                 +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_market_id#56,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string>\n         :                 :     :     :                 +- *(1) ColumnarToRow\n         :                 :     :     :                    +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_sales_price#15,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_ticket_number#11L), isnotnull(ss_item_sk#4), isnotnull(ss_store_sk#9), isnotnull(ss..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_sales_price:d...\n         :                 :     :     +- *(8) Sort [c_customer_sk#97 ASC NULLS FIRST], false, 0\n         :                 :     :        +- AQEShuffleRead coalesced\n         :                 :     :           +- ShuffleQueryStage 1\n         :                 :     :              +- Exchange hashpartitioning(c_customer_sk#97, 200), ENSURE_REQUIREMENTS, [plan_id=493]\n         :                 :     :                 +- *(2) Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n         :                 :     :                    +- *(2) ColumnarToRow\n         :                 :     :                       +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#97,c_first_name#105,c_last_name#106,c_birth_country#111] Batched: true, DataFilters: [isnotnull(c_customer_sk#97), isnotnull(c_birth_country#111)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_birth_country)], ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>\n         :                 :     +- BroadcastQueryStage 2\n         :                 :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=512]\n         :                 :           +- *(3) Filter ((isnotnull(i_color#92) AND (i_color#92 = orchid)) AND isnotnull(i_item_sk#75))\n         :                 :              +- *(3) ColumnarToRow\n         :                 :                 +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_current_price#80,i_size#90,i_color#92,i_units#93,i_manager_id#95] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = orchid), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,orchid), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_m...\n         :                 +- BroadcastQueryStage 3\n         :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=531]\n         :                       +- *(4) Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n         :                          +- *(4) Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n         :                             +- *(4) ColumnarToRow\n         :                                +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_store_name#51,s_market_id#56,s_state#70,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>\n         +- *(11) Sort [sr_ticket_number#34L ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST], false, 0\n            +- AQEShuffleRead coalesced\n               +- ShuffleQueryStage 4\n                  +- Exchange hashpartitioning(sr_ticket_number#34L, sr_item_sk#27, 200), ENSURE_REQUIREMENTS, [plan_id=554]\n                     +- *(5) Project [sr_item_sk#27, sr_ticket_number#34L]\n                        +- *(5) Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n                           +- *(5) ColumnarToRow\n                              +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#27,sr_ticket_number#34L,sr_returned_date_sk#45] Batched: true, DataFilters: [isnotnull(sr_ticket_number#34L), isnotnull(sr_item_sk#27)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_retu..., PartitionFilters: [], PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)], ReadSchema: struct<sr_item_sk:int,sr_ticket_number:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 5614008,
        "inputRowCount" : 31082
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "7" : [ 13039, 16566, 21475, 15189, 12544, 14857, 16821, 14107, 14954, 16315, 18192, 16641, 12154, 12801, 14934, 16913, 18653, 16066, 16071, 16519, 20172, 13601, 13518, 15583, 16290, 13100, 16945, 13663, 18028, 15315, 16970, 14587, 16605, 14421, 16809, 18638, 13410, 17954, 21311, 9365, 15892, 11935, 15478, 15478, 13406, 12777, 13799, 18795, 17160, 18877, 12811, 18146, 13827, 12702, 14438, 18366, 12493, 19221, 12874, 19206, 18761, 13959, 16381, 17080, 19626, 18248, 18809, 14774, 18295, 15749, 15867, 16528, 8968, 15139, 14261, 19208, 14484, 17274, 18930, 16960, 12400, 19380, 14547, 23743, 14752, 16161, 12328, 15769, 17150, 12357, 17997, 10771, 19348, 15477, 15462, 11385, 18528, 17979, 22256, 19605, 16534, 15789, 9999, 12066, 15264, 18500, 16599, 18471, 12116, 14938, 18304, 13685, 18698, 16679, 14593, 11401, 16784, 16511, 14614, 23324, 15499, 16388, 15030, 16023, 14643, 16569, 14096, 18289, 18979, 17889, 17348, 16700, 11729, 17545, 13784, 12963, 14582, 17226, 17516, 14989, 19028, 11957, 13774, 25416, 19524, 17887, 17216, 17893, 19989, 16196, 16913, 15619, 14218, 14777, 16020, 18667, 15325, 18462, 24757, 19296, 18634, 17255, 21208, 12936, 19555, 17752, 19738, 10360, 19313, 18405, 15238, 16089, 12474, 21269, 15856, 12762, 18710, 14980, 13549, 18214, 9971, 14009, 16485, 13384, 16654, 12598, 19731, 12620, 13016, 18705, 14256, 20079, 12358, 10453, 15958, 15399, 14580, 15020, 13210, 16672 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 12,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 27 ],
      "Objectives" : {
        "DurationInMs" : 137,
        "TotalTasksDurationInMs" : 132,
        "IOBytes" : {
          "Total" : 3062223,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 3062223,
            "SW" : 0
          }
        }
      }
    },
    "8" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1899214940,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 576032220,
                "rowCount" : 28801611
              },
              "compileTime" : {
                "sizeInBytes" : 576032220,
                "rowCount" : 28801611
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_ticket_number#34L] "
          },
          "1" : {
            "sign" : 2011675015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3686606208,
                "rowCount" : 28801611
              },
              "compileTime" : {
                "sizeInBytes" : 3686606208,
                "rowCount" : 28801611
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27)) "
          },
          "2" : {
            "sign" : 58525475,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3686606208,
                "rowCount" : 28801611
              },
              "compileTime" : {
                "sizeInBytes" : 3686606208,
                "rowCount" : 28801611
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [sr_item_sk#27, sr_ticket_number#34L]\n+- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n   +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -446545008,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [sr_item_sk#27, sr_ticket_number#34L] Input [3]: [sr_item_sk#27, sr_ticket_number#34L, sr_returned_date_sk#45] "
          },
          "1" : {
            "sign" : -348316301,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [sr_item_sk#27, sr_ticket_number#34L, sr_returned_date_sk#45] Condition : (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27)) "
          },
          "2" : {
            "sign" : 1184336655,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_returns Output [3]: [sr_item_sk#27, sr_ticket_number#34L, sr_returned_date_sk#45] Batched: true Location: CatalogFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_returns] PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)] ReadSchema: struct<sr_item_sk:int,sr_ticket_number:bigint> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_returns",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [sr_item_sk#27, sr_ticket_number#34L]\n+- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n   +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#27,sr_ticket_number#34L,sr_returned_date_sk#45] Batched: true, DataFilters: [isnotnull(sr_ticket_number#34L), isnotnull(sr_item_sk#27)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_retu..., PartitionFilters: [], PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)], ReadSchema: struct<sr_item_sk:int,sr_ticket_number:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 576032220,
        "inputRowCount" : 28801611
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 12 ],
      "Objectives" : {
        "DurationInMs" : 4605,
        "TotalTasksDurationInMs" : 59756,
        "IOBytes" : {
          "Total" : 624373554,
          "Details" : {
            "IR" : 274155449,
            "IW" : 0,
            "SR" : 0,
            "SW" : 350218105
          }
        }
      }
    },
    "19" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 210705200,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 64283634425,
                "rowCount" : 347479105
              },
              "compileTime" : {
                "sizeInBytes" : 64283634425,
                "rowCount" : 347479105
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "1" : {
            "sign" : 815965107,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 72623132945,
                "rowCount" : 347479105
              },
              "compileTime" : {
                "sizeInBytes" : 72623132945,
                "rowCount" : 347479105
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n+- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n   :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n   :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n   :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n   :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n   :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n   :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n   :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n   :     :     :     :  +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42)))\n   :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n   :     :     :     :     :     +- Project [s_store_sk#46]\n   :     :     :     :     :        +- Project [s_store_sk#46]\n   :     :     :     :     :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n   :     :     :     :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n   :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n   :     :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n   :     :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n   :     :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n   :     :     +- Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n   :     :        +- Filter isnotnull(i_item_sk#75)\n   :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n   :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n   :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n   :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n   +- Project [sr_item_sk#27, sr_ticket_number#34L]\n      +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n         +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 1446038281,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [sr_item_sk#27, sr_ticket_number#34L] Arguments: [sr_ticket_number#34L ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST], false, 0 "
          },
          "5" : {
            "sign" : -640264682,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [sr_item_sk#27, sr_ticket_number#34L] Arguments: 7 "
          },
          "1" : {
            "sign" : -172935951,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 72623132945,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [2]: [ss_ticket_number#11L, ss_item_sk#4] Right keys [2]: [sr_ticket_number#34L, sr_item_sk#27] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : -1584834574,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 64283634425,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [12]: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] Input [16]: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71, sr_item_sk#27, sr_ticket_number#34L] "
          },
          "2" : {
            "sign" : 522790245,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [14]: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] Arguments: [ss_ticket_number#11L ASC NULLS FIRST, ss_item_sk#4 ASC NULLS FIRST], false, 0 "
          },
          "3" : {
            "sign" : 1867679870,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 7870557840,
            "rowCount" : 39966388,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [14]: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] Arguments: 11 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "SortMergeJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n+- SortMergeJoin [ss_ticket_number#11L, ss_item_sk#4], [sr_ticket_number#34L, sr_item_sk#27], Inner\n   :- Sort [ss_ticket_number#11L ASC NULLS FIRST, ss_item_sk#4 ASC NULLS FIRST], false, 0\n   :  +- ShuffleQueryStage 11\n   :     +- Exchange hashpartitioning(ss_ticket_number#11L, ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=2061]\n   :        +- *(12) Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n   :           +- *(12) BroadcastHashJoin [ss_store_sk#9], [s_store_sk#46], Inner, BuildRight, false\n   :              :- *(12) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n   :              :  +- *(12) SortMergeJoin [ss_item_sk#4], [i_item_sk#75], Inner\n   :              :     :- *(10) Sort [ss_item_sk#4 ASC NULLS FIRST], false, 0\n   :              :     :  +- AQEShuffleRead coalesced\n   :              :     :     +- ShuffleQueryStage 10\n   :              :     :        +- Exchange hashpartitioning(ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=1872]\n   :              :     :           +- *(9) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n   :              :     :              +- *(9) SortMergeJoin [ss_customer_sk#5], [c_customer_sk#97], Inner\n   :              :     :                 :- *(7) Sort [ss_customer_sk#5 ASC NULLS FIRST], false, 0\n   :              :     :                 :  +- AQEShuffleRead coalesced\n   :              :     :                 :     +- ShuffleQueryStage 0\n   :              :     :                 :        +- Exchange hashpartitioning(ss_customer_sk#5, 200), ENSURE_REQUIREMENTS, [plan_id=1434]\n   :              :     :                 :           +- *(1) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n   :              :     :                 :              +- *(1) Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(ReusedSubquery Subquery subquery#177, [id=#290], xxhash64(ss_store_sk#9, 42)))\n   :              :     :                 :                 :  +- ReusedSubquery Subquery subquery#177, [id=#290]\n   :              :     :                 :                 +- *(1) ColumnarToRow\n   :              :     :                 :                    +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_sales_price#15,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_ticket_number#11L), isnotnull(ss_item_sk#4), isnotnull(ss_store_sk#9), isnotnull(ss..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_sales_price:d...\n   :              :     :                 +- *(8) Sort [c_customer_sk#97 ASC NULLS FIRST], false, 0\n   :              :     :                    +- AQEShuffleRead coalesced\n   :              :     :                       +- ShuffleQueryStage 2\n   :              :     :                          +- ReusedExchange [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111], Exchange hashpartitioning(c_customer_sk#97, 200), ENSURE_REQUIREMENTS, [plan_id=493]\n   :              :     +- *(11) Sort [i_item_sk#75 ASC NULLS FIRST], false, 0\n   :              :        +- AQEShuffleRead coalesced\n   :              :           +- ShuffleQueryStage 3\n   :              :              +- Exchange hashpartitioning(i_item_sk#75, 200), ENSURE_REQUIREMENTS, [plan_id=1476]\n   :              :                 +- *(3) Filter isnotnull(i_item_sk#75)\n   :              :                    +- *(3) ColumnarToRow\n   :              :                       +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_current_price#80,i_size#90,i_color#92,i_units#93,i_manager_id#95] Batched: true, DataFilters: [isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_m...\n   :              +- BroadcastQueryStage 5\n   :                 +- ReusedExchange [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=531]\n   +- Sort [sr_ticket_number#34L ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST], false, 0\n      +- ShuffleQueryStage 7\n         +- ReusedExchange [sr_item_sk#27, sr_ticket_number#34L], Exchange hashpartitioning(sr_ticket_number#34L, sr_item_sk#27, 200), ENSURE_REQUIREMENTS, [plan_id=554]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 8561796504,
        "inputRowCount" : 68767999
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "4" : [ 1849964, 1850299, 1850358, 1828178, 1831060, 1824389, 1830718, 1842096, 1821121, 1834564, 1826760, 1837485, 1834037, 1863690, 1834545, 1831490, 1833619, 1845225, 1852827, 1832435, 1833492, 1844280, 1834139, 1845389, 1823976, 1828654, 1838733, 1833991, 1836305, 1844661, 1833924, 1845608, 1829244, 1840258, 1840080, 1833519, 1831033, 1825910, 1828701, 1833146, 1825723, 1829867, 1850291, 1836296, 1834189, 1832532, 1836096, 1828702, 1822331, 1836086, 1836603, 1846376, 1841103, 1842299, 1838503, 1837943, 1827601, 1836511, 1842266, 1833890, 1833656, 1837981, 1830944, 1847736, 1846568, 1838698, 1826914, 1834211, 1840349, 1831696, 1842126, 1832055, 1846371, 1832261, 1824675, 1831276, 1847990, 1829238, 1826547, 1834235, 1848247, 1842449, 1826302, 1850820, 1829120, 1832394, 1838881, 1824017, 1841697, 1828751, 1837932, 1841286, 1819490, 1834471, 1834123, 1840507, 1833671, 1846962, 1830238, 1847174, 1847382, 1831330, 1834565, 1823998, 1822885, 1827910, 1837354, 1846442, 1837273, 1840872, 1832856, 1824718, 1846350, 1849427, 1835742, 1837108, 1834981, 1826638, 1824546, 1851557, 1849691, 1827136, 1832401, 1853163, 1827561, 1817816, 1839470, 1835444, 1826730, 1843801, 1840640, 1831522, 1836781, 1841159, 1838616, 1831369, 1834276, 1830520, 1840323, 1846935, 1849354, 1846896, 1828782, 1834591, 1834808, 1836994, 1832831, 1835276, 1833918, 1843148, 1838411, 1832496, 1821068, 1840055, 1826489, 1825662, 1838319, 1841064, 1835652, 1842056, 1853796, 1824006, 1835888, 1847150, 1831745, 1844599, 1827961, 1842865, 1830256, 1846443, 1838984, 1834224, 1829329, 1846810, 1829207, 1838887, 1829365, 1834906, 1840150, 1836248, 1846923, 1828523, 1846992, 1830402, 1846910, 1827421, 1834102, 1833531, 1839872, 1840015, 1845898, 1837808, 1843181, 1829087, 1839423, 1836629, 1832089, 1834549, 1827101, 1845794 ],
        "13" : [ 20687303, 20687303, 20630603, 20687303, 20630603, 20687303, 20687303, 20573903, 20517203, 20687303, 20573903, 20630603, 20630603, 20630603, 20687303, 20630603, 20724130, 20630603, 20630603, 20630603, 20687303, 20630603, 20554030, 20610730, 20744003, 20517203, 20630603, 20667430, 20687303, 20744003, 20630603, 20460503, 20744003, 20610730, 20687303, 20687303, 20630603, 20687303, 20630603, 20573903, 20630603, 20687303, 20630603, 20687303, 20744003, 20744003, 20687303, 20744003, 20687303, 20610730, 20497330, 20687303, 20744003, 20744003, 20687303, 20573903, 20687303, 20687303, 20800703, 20724130, 20687303, 20630603, 20573903, 20573903, 20687303, 20687303, 20744003, 20630603, 20687303, 20687303, 20630603, 20687303, 20687303, 20687303, 20630603, 20573903, 20630603, 20630603, 20744003, 20687303, 20800703, 20630603, 20744003, 20687303, 20610730, 20744003, 20610730, 20630603, 20630603, 20517203, 20687303, 20497330, 20517203, 20687303, 20630603, 20573903, 20630603, 20610730, 20744003, 20573903, 20630603, 20630603, 20630603, 20630603, 20687303, 20687303, 20630603, 20630603, 20630603, 20687303, 20667430, 20744003, 20687303, 20687303, 20744003, 20517203, 20687303, 20630603, 20744003, 20630603, 20630603, 20687303, 20800703, 20687303, 20687303, 20610730, 20744003, 20630603, 20687303, 20630603, 20800703, 20744003, 20630603, 20687303, 20667430, 20630603, 20517203, 20630603, 20744003, 20667430, 20573903, 20517203, 20630603, 20687303, 20667430, 20630603, 20630603, 20630603, 20630603, 20687303, 20440630, 20687303, 20687303, 20687303, 20687303, 20573903, 20744003, 20780830, 20667430, 20630603, 20744003, 20630603, 20573903, 20630603, 20687303, 20667430, 20687303, 20610730, 20630603, 20800703, 20630603, 20724130, 20573903, 20573903, 20744003, 20667430, 20667430, 20687303, 20573903, 20573903, 20724130, 20800703, 20517203, 20744003, 20630603, 20630603, 20744003, 20744003, 20744003, 20630603, 20724130, 20630603, 20687303, 20687303, 20744003, 20610730, 20630603, 20610730, 20610730, 20630603 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 20,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 49 ],
      "Objectives" : {
        "DurationInMs" : 5404,
        "TotalTasksDurationInMs" : 80944,
        "IOBytes" : {
          "Total" : 4590013545,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 4229303862,
            "SW" : 360709683
          }
        }
      }
    },
    "23" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1877389641,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2492625217152,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 2492625217152,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8)))) "
          }
        },
        "links" : [ ],
        "rawPlan" : "Filter (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8))))\n:  +- Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163]\n:     +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n:        +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n:           +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n:              :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n:              :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n:              :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n:              :     :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n:              :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n:              :     :     :     :     :  +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42)))\n:              :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n:              :     :     :     :     :     :     +- Project [s_store_sk#46]\n:              :     :     :     :     :     :        +- Project [s_store_sk#46]\n:              :     :     :     :     :     :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :     :     :     :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n:              :     :     :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n:              :     :     :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n:              :     :     :     +- Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :        +- Filter isnotnull(i_item_sk#75)\n:              :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n:              :     :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n:              :     :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     +- Project [sr_item_sk#27, sr_ticket_number#34L]\n:              :        +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n:              :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n:              +- Project [ca_state#123, ca_zip#124, ca_country#125]\n:                 +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n:                    +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n+- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157]\n   +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n      +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n         +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n            :- LogicalQueryStage Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 7\n            +- LogicalQueryStage Project [ca_state#123, ca_zip#124, ca_country#125], ShuffleQueryStage 5\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1954566267,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 2492625217152,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [c_last_name#106, c_first_name#105, s_store_name#51, paid#157] Condition : (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(Subquery subquery#158, [id=#264] as decimal(33,8)))) "
          },
          "1" : {
            "sign" : 322463003,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 11960,
            "rowCount" : 135,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [5]: [c_last_name#106, c_first_name#105, s_store_name#51, sum#185, isEmpty#186] Keys [3]: [c_last_name#106, c_first_name#105, s_store_name#51] Functions [1]: [sum(netpaid#159)] Aggregate Attributes [1]: [sum(netpaid#159)#161] Results [4]: [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159)#161 AS paid#157] "
          },
          "2" : {
            "sign" : 877729749,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 2492625217152,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [5]: [c_last_name#106, c_first_name#105, s_store_name#51, sum#185, isEmpty#186] Arguments: 10 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "ShuffleQueryStage",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(Subquery subquery#158, [id=#264] as decimal(33,8))))\n:  +- Subquery subquery#158, [id=#264]\n:     +- AdaptiveSparkPlan isFinalPlan=false\n:        +- HashAggregate(keys=[], functions=[avg(netpaid#159)], output=[(0.05 * avg(netpaid))#163])\n:           +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=262]\n:              +- HashAggregate(keys=[], functions=[partial_avg(netpaid#159)], output=[sum#189, count#190L])\n:                 +- HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], functions=[sum(UnscaledValue(ss_sales_price#15))], output=[netpaid#159])\n:                    +- Exchange hashpartitioning(c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90, 200), ENSURE_REQUIREMENTS, [plan_id=258]\n:                       +- HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], functions=[partial_sum(UnscaledValue(ss_sales_price#15))], output=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90, sum#192L])\n:                          +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n:                             +- SortMergeJoin [c_birth_country#111, s_zip#71], [upper(ca_country#125), ca_zip#124], Inner\n:                                :- Sort [c_birth_country#111 ASC NULLS FIRST, s_zip#71 ASC NULLS FIRST], false, 0\n:                                :  +- Exchange hashpartitioning(c_birth_country#111, s_zip#71, 200), ENSURE_REQUIREMENTS, [plan_id=250]\n:                                :     +- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:                                :        +- SortMergeJoin [ss_ticket_number#11L, ss_item_sk#4], [sr_ticket_number#34L, sr_item_sk#27], Inner\n:                                :           :- Sort [ss_ticket_number#11L ASC NULLS FIRST, ss_item_sk#4 ASC NULLS FIRST], false, 0\n:                                :           :  +- Exchange hashpartitioning(ss_ticket_number#11L, ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=243]\n:                                :           :     +- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:                                :           :        +- BroadcastHashJoin [ss_store_sk#9], [s_store_sk#46], Inner, BuildRight, false\n:                                :           :           :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:                                :           :           :  +- SortMergeJoin [ss_item_sk#4], [i_item_sk#75], Inner\n:                                :           :           :     :- Sort [ss_item_sk#4 ASC NULLS FIRST], false, 0\n:                                :           :           :     :  +- Exchange hashpartitioning(ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=230]\n:                                :           :           :     :     +- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n:                                :           :           :     :        +- SortMergeJoin [ss_customer_sk#5], [c_customer_sk#97], Inner\n:                                :           :           :     :           :- Sort [ss_customer_sk#5 ASC NULLS FIRST], false, 0\n:                                :           :           :     :           :  +- Exchange hashpartitioning(ss_customer_sk#5, 200), ENSURE_REQUIREMENTS, [plan_id=222]\n:                                :           :           :     :           :     +- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n:                                :           :           :     :           :        +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(Subquery subquery#171, [id=#189], xxhash64(ss_store_sk#9, 42)))\n:                                :           :           :     :           :           :  +- Subquery subquery#171, [id=#189]\n:                                :           :           :     :           :           :     +- AdaptiveSparkPlan isFinalPlan=false\n:                                :           :           :     :           :           :        +- ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[bloomFilter#176])\n:                                :           :           :     :           :           :           +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=187]\n:                                :           :           :     :           :           :              +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[buf#193])\n:                                :           :           :     :           :           :                 +- Project [s_store_sk#46]\n:                                :           :           :     :           :           :                    +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:                                :           :           :     :           :           :                       +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_market_id#56,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string>\n:                                :           :           :     :           :           +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_sales_price#15,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_ticket_number#11L), isnotnull(ss_item_sk#4), isnotnull(ss_store_sk#9), isnotnull(ss..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_sales_price:d...\n:                                :           :           :     :           +- Sort [c_customer_sk#97 ASC NULLS FIRST], false, 0\n:                                :           :           :     :              +- Exchange hashpartitioning(c_customer_sk#97, 200), ENSURE_REQUIREMENTS, [plan_id=223]\n:                                :           :           :     :                 +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n:                                :           :           :     :                    +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#97,c_first_name#105,c_last_name#106,c_birth_country#111] Batched: true, DataFilters: [isnotnull(c_customer_sk#97), isnotnull(c_birth_country#111)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_birth_country)], ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>\n:                                :           :           :     +- Sort [i_item_sk#75 ASC NULLS FIRST], false, 0\n:                                :           :           :        +- Exchange hashpartitioning(i_item_sk#75, 200), ENSURE_REQUIREMENTS, [plan_id=231]\n:                                :           :           :           +- Filter isnotnull(i_item_sk#75)\n:                                :           :           :              +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_current_price#80,i_size#90,i_color#92,i_units#93,i_manager_id#95] Batched: true, DataFilters: [isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_m...\n:                                :           :           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=237]\n:                                :           :              +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n:                                :           :                 +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:                                :           :                    +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_store_name#51,s_market_id#56,s_state#70,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>\n:                                :           +- Sort [sr_ticket_number#34L ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST], false, 0\n:                                :              +- Exchange hashpartitioning(sr_ticket_number#34L, sr_item_sk#27, 200), ENSURE_REQUIREMENTS, [plan_id=242]\n:                                :                 +- Project [sr_item_sk#27, sr_ticket_number#34L]\n:                                :                    +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n:                                :                       +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#27,sr_ticket_number#34L,sr_returned_date_sk#45] Batched: true, DataFilters: [isnotnull(sr_ticket_number#34L), isnotnull(sr_item_sk#27)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_retu..., PartitionFilters: [], PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)], ReadSchema: struct<sr_item_sk:int,sr_ticket_number:bigint>\n:                                +- Sort [upper(ca_country#125) ASC NULLS FIRST, ca_zip#124 ASC NULLS FIRST], false, 0\n:                                   +- Exchange hashpartitioning(upper(ca_country#125), ca_zip#124, 200), ENSURE_REQUIREMENTS, [plan_id=251]\n:                                      +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n:                                         +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_state#123,ca_zip#124,ca_country#125] Batched: true, DataFilters: [isnotnull(ca_country#125), isnotnull(ca_zip#124)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_country), IsNotNull(ca_zip)], ReadSchema: struct<ca_state:string,ca_zip:string,ca_country:string>\n+- HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51], functions=[sum(netpaid#159)], output=[c_last_name#106, c_first_name#105, s_store_name#51, paid#157])\n   +- ShuffleQueryStage 10\n      +- Exchange hashpartitioning(c_last_name#106, c_first_name#105, s_store_name#51, 200), ENSURE_REQUIREMENTS, [plan_id=1257]\n         +- *(14) HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51], functions=[partial_sum(netpaid#159)], output=[c_last_name#106, c_first_name#105, s_store_name#51, sum#185, isEmpty#186])\n            +- *(14) HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], functions=[sum(UnscaledValue(ss_sales_price#15))], output=[c_last_name#106, c_first_name#105, s_store_name#51, netpaid#159])\n               +- AQEShuffleRead coalesced\n                  +- ShuffleQueryStage 9\n                     +- Exchange hashpartitioning(c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90, 200), ENSURE_REQUIREMENTS, [plan_id=1211]\n                        +- *(13) HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], functions=[partial_sum(UnscaledValue(ss_sales_price#15))], output=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90, sum#188L])\n                           +- *(13) Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n                              +- *(13) BroadcastHashJoin [c_birth_country#111, s_zip#71], [upper(ca_country#125), ca_zip#124], Inner, BuildLeft, false\n                                 :- BroadcastQueryStage 8\n                                 :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[3, string, true], input[11, string, true]),false), [plan_id=1139]\n                                 :     +- AQEShuffleRead local\n                                 :        +- ShuffleQueryStage 7\n                                 :           +- Exchange hashpartitioning(c_birth_country#111, s_zip#71, 200), ENSURE_REQUIREMENTS, [plan_id=1056]\n                                 :              +- *(12) Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n                                 :                 +- *(12) SortMergeJoin [ss_ticket_number#11L, ss_item_sk#4], [sr_ticket_number#34L, sr_item_sk#27], Inner\n                                 :                    :- *(10) Sort [ss_ticket_number#11L ASC NULLS FIRST, ss_item_sk#4 ASC NULLS FIRST], false, 0\n                                 :                    :  +- AQEShuffleRead coalesced\n                                 :                    :     +- ShuffleQueryStage 6\n                                 :                    :        +- Exchange hashpartitioning(ss_ticket_number#11L, ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=813]\n                                 :                    :           +- *(9) Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n                                 :                    :              +- *(9) BroadcastHashJoin [ss_store_sk#9], [s_store_sk#46], Inner, BuildRight, false\n                                 :                    :                 :- *(9) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n                                 :                    :                 :  +- *(9) BroadcastHashJoin [ss_item_sk#4], [i_item_sk#75], Inner, BuildRight, false\n                                 :                    :                 :     :- *(9) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n                                 :                    :                 :     :  +- *(9) SortMergeJoin [ss_customer_sk#5], [c_customer_sk#97], Inner\n                                 :                    :                 :     :     :- *(7) Sort [ss_customer_sk#5 ASC NULLS FIRST], false, 0\n                                 :                    :                 :     :     :  +- AQEShuffleRead coalesced\n                                 :                    :                 :     :     :     +- ShuffleQueryStage 0\n                                 :                    :                 :     :     :        +- Exchange hashpartitioning(ss_customer_sk#5, 200), ENSURE_REQUIREMENTS, [plan_id=474]\n                                 :                    :                 :     :     :           +- *(1) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n                                 :                    :                 :     :     :              +- *(1) Filter (((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(Subquery subquery#174, [id=#277], xxhash64(ss_item_sk#4, 42))) AND might_contain(Subquery subquery#177, [id=#290], xxhash64(ss_store_sk#9, 42)))\n                                 :                    :                 :     :     :                 :  :- Subquery subquery#174, [id=#277]\n                                 :                    :                 :     :     :                 :  :  +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                                               +- == Final Plan ==\n                                                                                                                  ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[bloomFilter#173])\n                                                                                                                  +- ShuffleQueryStage 0\n                                                                                                                     +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=622]\n                                                                                                                        +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[buf#194])\n                                                                                                                           +- *(1) Project [i_item_sk#75]\n                                                                                                                              +- *(1) Filter ((isnotnull(i_color#92) AND (i_color#92 = orchid)) AND isnotnull(i_item_sk#75))\n                                                                                                                                 +- *(1) ColumnarToRow\n                                                                                                                                    +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_color#92] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = orchid), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,orchid), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_color:string>\n                                                                                                               +- == Initial Plan ==\n                                                                                                                  ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[bloomFilter#173])\n                                                                                                                  +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=275]\n                                                                                                                     +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[buf#194])\n                                                                                                                        +- Project [i_item_sk#75]\n                                                                                                                           +- Filter ((isnotnull(i_color#92) AND (i_color#92 = orchid)) AND isnotnull(i_item_sk#75))\n                                                                                                                              +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_color#92] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = orchid), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,orchid), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_color:string>\n                                 :                    :                 :     :     :                 :  +- Subquery subquery#177, [id=#290]\n                                 :                    :                 :     :     :                 :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                                               +- == Final Plan ==\n                                                                                                                  ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[bloomFilter#176])\n                                                                                                                  +- ShuffleQueryStage 0\n                                                                                                                     +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=617]\n                                                                                                                        +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[buf#193])\n                                                                                                                           +- *(1) Project [s_store_sk#46]\n                                                                                                                              +- *(1) Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n                                                                                                                                 +- *(1) ColumnarToRow\n                                                                                                                                    +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_market_id#56,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string>\n                                                                                                               +- == Initial Plan ==\n                                                                                                                  ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[bloomFilter#176])\n                                                                                                                  +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=288]\n                                                                                                                     +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[buf#193])\n                                                                                                                        +- Project [s_store_sk#46]\n                                                                                                                           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n                                                                                                                              +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_market_id#56,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string>\n                                 :                    :                 :     :     :                 +- *(1) ColumnarToRow\n                                 :                    :                 :     :     :                    +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_sales_price#15,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_ticket_number#11L), isnotnull(ss_item_sk#4), isnotnull(ss_store_sk#9), isnotnull(ss..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_sales_price:d...\n                                 :                    :                 :     :     +- *(8) Sort [c_customer_sk#97 ASC NULLS FIRST], false, 0\n                                 :                    :                 :     :        +- AQEShuffleRead coalesced\n                                 :                    :                 :     :           +- ShuffleQueryStage 1\n                                 :                    :                 :     :              +- Exchange hashpartitioning(c_customer_sk#97, 200), ENSURE_REQUIREMENTS, [plan_id=493]\n                                 :                    :                 :     :                 +- *(2) Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n                                 :                    :                 :     :                    +- *(2) ColumnarToRow\n                                 :                    :                 :     :                       +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#97,c_first_name#105,c_last_name#106,c_birth_country#111] Batched: true, DataFilters: [isnotnull(c_customer_sk#97), isnotnull(c_birth_country#111)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_birth_country)], ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>\n                                 :                    :                 :     +- BroadcastQueryStage 2\n                                 :                    :                 :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=512]\n                                 :                    :                 :           +- *(3) Filter ((isnotnull(i_color#92) AND (i_color#92 = orchid)) AND isnotnull(i_item_sk#75))\n                                 :                    :                 :              +- *(3) ColumnarToRow\n                                 :                    :                 :                 +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_current_price#80,i_size#90,i_color#92,i_units#93,i_manager_id#95] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = orchid), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,orchid), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_m...\n                                 :                    :                 +- BroadcastQueryStage 3\n                                 :                    :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=531]\n                                 :                    :                       +- *(4) Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n                                 :                    :                          +- *(4) Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n                                 :                    :                             +- *(4) ColumnarToRow\n                                 :                    :                                +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_store_name#51,s_market_id#56,s_state#70,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>\n                                 :                    +- *(11) Sort [sr_ticket_number#34L ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST], false, 0\n                                 :                       +- AQEShuffleRead coalesced\n                                 :                          +- ShuffleQueryStage 4\n                                 :                             +- Exchange hashpartitioning(sr_ticket_number#34L, sr_item_sk#27, 200), ENSURE_REQUIREMENTS, [plan_id=554]\n                                 :                                +- *(5) Project [sr_item_sk#27, sr_ticket_number#34L]\n                                 :                                   +- *(5) Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n                                 :                                      +- *(5) ColumnarToRow\n                                 :                                         +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#27,sr_ticket_number#34L,sr_returned_date_sk#45] Batched: true, DataFilters: [isnotnull(sr_ticket_number#34L), isnotnull(sr_item_sk#27)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_retu..., PartitionFilters: [], PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)], ReadSchema: struct<sr_item_sk:int,sr_ticket_number:bigint>\n                                 +- AQEShuffleRead local\n                                    +- ShuffleQueryStage 5\n                                       +- Exchange hashpartitioning(upper(ca_country#125), ca_zip#124, 200), ENSURE_REQUIREMENTS, [plan_id=577]\n                                          +- *(6) Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n                                             +- *(6) ColumnarToRow\n                                                +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_state#123,ca_zip#124,ca_country#125] Batched: true, DataFilters: [isnotnull(ca_country#125), isnotnull(ca_zip#124)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_country), IsNotNull(ca_zip)], ReadSchema: struct<ca_state:string,ca_zip:string,ca_country:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 11960,
        "inputRowCount" : 135
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "9" : [ 0, 0, 129, 129, 0, 117, 129, 129, 129, 0, 129, 0, 0, 0, 0, 129, 129, 129, 129, 0, 129, 129, 117, 129, 129, 129, 129, 171, 228, 129, 189, 171, 0, 0, 117, 207, 0, 129, 171, 0, 0, 0, 129, 0, 0, 129, 251, 0, 0, 0, 0, 0, 189, 0, 0, 0, 0, 129, 207, 0, 228, 171, 0, 0, 0, 171, 0, 0, 189, 129, 0, 129, 0, 129, 0, 129, 129, 129, 189, 207, 0, 0, 129, 117, 129, 117, 0, 129, 0, 0, 0, 129, 117, 129, 0, 0, 0, 0, 0, 129, 0, 117, 189, 129, 129, 0, 129, 0, 129, 129, 0, 129, 117, 129, 129, 0, 129, 0, 0, 129, 0, 129, 129, 0, 0, 142, 0, 129, 129, 0, 129, 0, 88, 129, 171, 0, 0, 189, 0, 117, 0, 0, 0, 251, 0, 0, 129, 0, 228, 0, 0, 129, 129, 117, 129, 129, 0, 0, 0, 0, 129, 129, 129, 0, 129, 129, 117, 0, 0, 0, 129, 0, 171, 0, 0, 189, 129, 0, 129, 0, 0, 0, 189, 0, 129, 129, 0, 0, 0, 142, 142, 0, 0, 129, 117, 0, 0, 0, 0, 0 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 15,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 83 ],
      "Objectives" : {
        "DurationInMs" : 163,
        "TotalTasksDurationInMs" : 153,
        "IOBytes" : {
          "Total" : 14097,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 14097,
            "SW" : 0
          }
        }
      }
    },
    "4" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 2043403682,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : 812756911,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 588,
                "rowCount" : 49
              },
              "compileTime" : {
                "sizeInBytes" : 588,
                "rowCount" : 49
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "0" : {
            "sign" : 1921382062,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176] "
          },
          "2" : {
            "sign" : -84657601,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 588,
                "rowCount" : 49
              },
              "compileTime" : {
                "sizeInBytes" : 588,
                "rowCount" : 49
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "3" : {
            "sign" : -1176082101,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 23471,
                "rowCount" : 49
              },
              "compileTime" : {
                "sizeInBytes" : 23471,
                "rowCount" : 49
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71)) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n+- Project [s_store_sk#46]\n   +- Project [s_store_sk#46]\n      +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n         +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1878565924,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [s_store_sk#46] Keys: [] Functions [1]: [partial_bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)] Aggregate Attributes [1]: [buf#178] Results [1]: [buf#193] "
          },
          "1" : {
            "sign" : 2017526785,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [s_store_sk#46] Input [3]: [s_store_sk#46, s_market_id#56, s_zip#71] "
          },
          "2" : {
            "sign" : 1177434381,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [s_store_sk#46, s_market_id#56, s_zip#71] Condition : (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71)) "
          },
          "3" : {
            "sign" : -1018742556,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store Output [3]: [s_store_sk#46, s_market_id#56, s_zip#71] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store] PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)] ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[buf#193])\n+- Project [s_store_sk#46]\n   +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n      +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_market_id#56,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 588,
        "inputRowCount" : 49
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 2 ],
      "Objectives" : {
        "DurationInMs" : 4781,
        "TotalTasksDurationInMs" : 4770,
        "IOBytes" : {
          "Total" : 15978,
          "Details" : {
            "IR" : 15978,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "15" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1867243163,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9456300108,
                "rowCount" : 262675003
              },
              "compileTime" : {
                "sizeInBytes" : 9456300108,
                "rowCount" : 262675003
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] "
          },
          "1" : {
            "sign" : 1011872821,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 39926600456,
                "rowCount" : 262675003
              },
              "compileTime" : {
                "sizeInBytes" : 39926600456,
                "rowCount" : 262675003
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42))) "
          },
          "2" : {
            "sign" : -628374504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 43776970976,
                "rowCount" : 288006388
              },
              "compileTime" : {
                "sizeInBytes" : 43776970976,
                "rowCount" : 288006388
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n+- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42)))\n   :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n   :     +- Project [s_store_sk#46]\n   :        +- Project [s_store_sk#46]\n   :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n   :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n   +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 584596355,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 9456300108,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] Input [6]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, ss_sold_date_sk#25] "
          },
          "1" : {
            "sign" : 1105566799,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 9456300108,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [6]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, ss_sold_date_sk#25] Condition : ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(ReusedSubquery Subquery subquery#177, [id=#290], xxhash64(ss_store_sk#9, 42))) "
          },
          "2" : {
            "sign" : 1625522527,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 9456300108,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_sales Output [6]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, ss_sold_date_sk#25] Batched: true Location: CatalogFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales] PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)] ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_sales_price:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_sales",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n+- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(ReusedSubquery Subquery subquery#177, [id=#290], xxhash64(ss_store_sk#9, 42)))\n   :  +- ReusedSubquery Subquery subquery#177, [id=#290]\n   +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_sales_price#15,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_ticket_number#11L), isnotnull(ss_item_sk#4), isnotnull(ss_store_sk#9), isnotnull(ss..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_sales_price:d...\n"
      },
      "IM" : {
        "inputSizeInBytes" : 9456300108,
        "inputRowCount" : 262675003
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 16,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 33 ],
      "Objectives" : {
        "DurationInMs" : 32474,
        "TotalTasksDurationInMs" : 507033,
        "IOBytes" : {
          "Total" : 3014065658,
          "Details" : {
            "IR" : 2355309235,
            "IW" : 0,
            "SR" : 0,
            "SW" : 658756423
          }
        }
      }
    },
    "11" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1200422986,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 64283634425,
                "rowCount" : 347479105
              },
              "compileTime" : {
                "sizeInBytes" : 64283634425,
                "rowCount" : 347479105
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "1" : {
            "sign" : 1031652679,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 72623132945,
                "rowCount" : 347479105
              },
              "compileTime" : {
                "sizeInBytes" : 72623132945,
                "rowCount" : 347479105
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n+- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n   :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n   :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n   :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n   :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n   :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n   :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n   :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n   :     :     :     :  +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND (might_contain(scalar-subquery#174 [], xxhash64(ss_item_sk#4, 42)) AND might_contain(scalar-subquery#177 [], xxhash64(ss_store_sk#9, 42))))\n   :     :     :     :     :  :- Aggregate [bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0) AS bloomFilter#173]\n   :     :     :     :     :  :  +- Project [i_item_sk#75]\n   :     :     :     :     :  :     +- Project [i_item_sk#75]\n   :     :     :     :     :  :        +- Filter ((isnotnull(i_color#92) AND (i_color#92 = orchid)) AND isnotnull(i_item_sk#75))\n   :     :     :     :     :  :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n   :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n   :     :     :     :     :     +- Project [s_store_sk#46]\n   :     :     :     :     :        +- Project [s_store_sk#46]\n   :     :     :     :     :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n   :     :     :     :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n   :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n   :     :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n   :     :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n   :     :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n   :     :     +- Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n   :     :        +- Filter ((isnotnull(i_color#92) AND (i_color#92 = orchid)) AND isnotnull(i_item_sk#75))\n   :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n   :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n   :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n   :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n   +- Project [sr_item_sk#27, sr_ticket_number#34L]\n      +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n         +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 1992159467,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [sr_item_sk#27, sr_ticket_number#34L] Arguments: [sr_ticket_number#34L ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST], false, 0 "
          },
          "5" : {
            "sign" : 454028682,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 691238664,
            "rowCount" : 28801611,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [sr_item_sk#27, sr_ticket_number#34L] Arguments: 4 "
          },
          "1" : {
            "sign" : -901302599,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 72623132945,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [2]: [ss_ticket_number#11L, ss_item_sk#4] Right keys [2]: [sr_ticket_number#34L, sr_item_sk#27] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : -1432781266,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 64283634425,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [12]: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] Input [16]: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71, sr_item_sk#27, sr_ticket_number#34L] "
          },
          "2" : {
            "sign" : 1996654341,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [14]: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] Arguments: [ss_ticket_number#11L ASC NULLS FIRST, ss_item_sk#4 ASC NULLS FIRST], false, 0 "
          },
          "3" : {
            "sign" : 2114296500,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 61419792,
            "rowCount" : 312412,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [14]: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] Arguments: 6 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "SortMergeJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n+- SortMergeJoin [ss_ticket_number#11L, ss_item_sk#4], [sr_ticket_number#34L, sr_item_sk#27], Inner\n   :- Sort [ss_ticket_number#11L ASC NULLS FIRST, ss_item_sk#4 ASC NULLS FIRST], false, 0\n   :  +- ShuffleQueryStage 6\n   :     +- Exchange hashpartitioning(ss_ticket_number#11L, ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=813]\n   :        +- *(9) Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n   :           +- *(9) BroadcastHashJoin [ss_store_sk#9], [s_store_sk#46], Inner, BuildRight, false\n   :              :- *(9) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n   :              :  +- *(9) BroadcastHashJoin [ss_item_sk#4], [i_item_sk#75], Inner, BuildRight, false\n   :              :     :- *(9) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n   :              :     :  +- *(9) SortMergeJoin [ss_customer_sk#5], [c_customer_sk#97], Inner\n   :              :     :     :- *(7) Sort [ss_customer_sk#5 ASC NULLS FIRST], false, 0\n   :              :     :     :  +- AQEShuffleRead coalesced\n   :              :     :     :     +- ShuffleQueryStage 0\n   :              :     :     :        +- Exchange hashpartitioning(ss_customer_sk#5, 200), ENSURE_REQUIREMENTS, [plan_id=474]\n   :              :     :     :           +- *(1) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n   :              :     :     :              +- *(1) Filter (((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(Subquery subquery#174, [id=#277], xxhash64(ss_item_sk#4, 42))) AND might_contain(Subquery subquery#177, [id=#290], xxhash64(ss_store_sk#9, 42)))\n   :              :     :     :                 :  :- Subquery subquery#174, [id=#277]\n   :              :     :     :                 :  :  +- AdaptiveSparkPlan isFinalPlan=true\n                                                         +- == Final Plan ==\n                                                            ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[bloomFilter#173])\n                                                            +- ShuffleQueryStage 0\n                                                               +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=622]\n                                                                  +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[buf#194])\n                                                                     +- *(1) Project [i_item_sk#75]\n                                                                        +- *(1) Filter ((isnotnull(i_color#92) AND (i_color#92 = orchid)) AND isnotnull(i_item_sk#75))\n                                                                           +- *(1) ColumnarToRow\n                                                                              +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_color#92] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = orchid), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,orchid), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_color:string>\n                                                         +- == Initial Plan ==\n                                                            ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[bloomFilter#173])\n                                                            +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=275]\n                                                               +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[buf#194])\n                                                                  +- Project [i_item_sk#75]\n                                                                     +- Filter ((isnotnull(i_color#92) AND (i_color#92 = orchid)) AND isnotnull(i_item_sk#75))\n                                                                        +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_color#92] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = orchid), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,orchid), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_color:string>\n   :              :     :     :                 :  +- Subquery subquery#177, [id=#290]\n   :              :     :     :                 :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                         +- == Final Plan ==\n                                                            ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[bloomFilter#176])\n                                                            +- ShuffleQueryStage 0\n                                                               +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=617]\n                                                                  +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[buf#193])\n                                                                     +- *(1) Project [s_store_sk#46]\n                                                                        +- *(1) Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n                                                                           +- *(1) ColumnarToRow\n                                                                              +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_market_id#56,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string>\n                                                         +- == Initial Plan ==\n                                                            ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[bloomFilter#176])\n                                                            +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=288]\n                                                               +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[buf#193])\n                                                                  +- Project [s_store_sk#46]\n                                                                     +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n                                                                        +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_market_id#56,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string>\n   :              :     :     :                 +- *(1) ColumnarToRow\n   :              :     :     :                    +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_sales_price#15,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_ticket_number#11L), isnotnull(ss_item_sk#4), isnotnull(ss_store_sk#9), isnotnull(ss..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_sales_price:d...\n   :              :     :     +- *(8) Sort [c_customer_sk#97 ASC NULLS FIRST], false, 0\n   :              :     :        +- AQEShuffleRead coalesced\n   :              :     :           +- ShuffleQueryStage 1\n   :              :     :              +- Exchange hashpartitioning(c_customer_sk#97, 200), ENSURE_REQUIREMENTS, [plan_id=493]\n   :              :     :                 +- *(2) Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n   :              :     :                    +- *(2) ColumnarToRow\n   :              :     :                       +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#97,c_first_name#105,c_last_name#106,c_birth_country#111] Batched: true, DataFilters: [isnotnull(c_customer_sk#97), isnotnull(c_birth_country#111)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_birth_country)], ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>\n   :              :     +- BroadcastQueryStage 2\n   :              :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=512]\n   :              :           +- *(3) Filter ((isnotnull(i_color#92) AND (i_color#92 = orchid)) AND isnotnull(i_item_sk#75))\n   :              :              +- *(3) ColumnarToRow\n   :              :                 +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_current_price#80,i_size#90,i_color#92,i_units#93,i_manager_id#95] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = orchid), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,orchid), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_m...\n   :              +- BroadcastQueryStage 3\n   :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=531]\n   :                    +- *(4) Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n   :                       +- *(4) Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n   :                          +- *(4) ColumnarToRow\n   :                             +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_store_name#51,s_market_id#56,s_state#70,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>\n   +- Sort [sr_ticket_number#34L ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST], false, 0\n      +- ShuffleQueryStage 4\n         +- Exchange hashpartitioning(sr_ticket_number#34L, sr_item_sk#27, 200), ENSURE_REQUIREMENTS, [plan_id=554]\n            +- *(5) Project [sr_item_sk#27, sr_ticket_number#34L]\n               +- *(5) Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n                  +- *(5) ColumnarToRow\n                     +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#27,sr_ticket_number#34L,sr_returned_date_sk#45] Batched: true, DataFilters: [isnotnull(sr_ticket_number#34L), isnotnull(sr_item_sk#27)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_retu..., PartitionFilters: [], PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)], ReadSchema: struct<sr_item_sk:int,sr_ticket_number:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 752658456,
        "inputRowCount" : 29114023
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "4" : [ 1849964, 1850299, 1850358, 1828178, 1831060, 1824389, 1830718, 1842096, 1821121, 1834564, 1826760, 1837485, 1834037, 1863690, 1834545, 1831490, 1833619, 1845225, 1852827, 1832435, 1833492, 1844280, 1834139, 1845389, 1823976, 1828654, 1838733, 1833991, 1836305, 1844661, 1833924, 1845608, 1829244, 1840258, 1840080, 1833519, 1831033, 1825910, 1828701, 1833146, 1825723, 1829867, 1850291, 1836296, 1834189, 1832532, 1836096, 1828702, 1822331, 1836086, 1836603, 1846376, 1841103, 1842299, 1838503, 1837943, 1827601, 1836511, 1842266, 1833890, 1833656, 1837981, 1830944, 1847736, 1846568, 1838698, 1826914, 1834211, 1840349, 1831696, 1842126, 1832055, 1846371, 1832261, 1824675, 1831276, 1847990, 1829238, 1826547, 1834235, 1848247, 1842449, 1826302, 1850820, 1829120, 1832394, 1838881, 1824017, 1841697, 1828751, 1837932, 1841286, 1819490, 1834471, 1834123, 1840507, 1833671, 1846962, 1830238, 1847174, 1847382, 1831330, 1834565, 1823998, 1822885, 1827910, 1837354, 1846442, 1837273, 1840872, 1832856, 1824718, 1846350, 1849427, 1835742, 1837108, 1834981, 1826638, 1824546, 1851557, 1849691, 1827136, 1832401, 1853163, 1827561, 1817816, 1839470, 1835444, 1826730, 1843801, 1840640, 1831522, 1836781, 1841159, 1838616, 1831369, 1834276, 1830520, 1840323, 1846935, 1849354, 1846896, 1828782, 1834591, 1834808, 1836994, 1832831, 1835276, 1833918, 1843148, 1838411, 1832496, 1821068, 1840055, 1826489, 1825662, 1838319, 1841064, 1835652, 1842056, 1853796, 1824006, 1835888, 1847150, 1831745, 1844599, 1827961, 1842865, 1830256, 1846443, 1838984, 1834224, 1829329, 1846810, 1829207, 1838887, 1829365, 1834906, 1840150, 1836248, 1846923, 1828523, 1846992, 1830402, 1846910, 1827421, 1834102, 1833531, 1839872, 1840015, 1845898, 1837808, 1843181, 1829087, 1839423, 1836629, 1832089, 1834549, 1827101, 1845794 ],
        "6" : [ 155426, 162712, 151494, 155426, 166644, 170969, 155426, 166644, 166644, 166644, 151494, 162712, 166644, 162712, 151494, 166644, 155426, 155426, 166644, 162712, 166644, 166644, 162712, 162712, 166644, 166644, 151494, 155426, 155426, 166644, 155426, 151494, 155426, 166644, 166644, 162712, 166644, 166644, 166644, 151494, 155426, 166644, 162712, 166644, 166644, 162712, 162712, 155426, 166644, 166644, 166644, 166644, 155426, 166644, 166644, 166644, 166644, 166644, 166644, 166644, 155426, 155426, 166644, 162712, 166644, 155426, 162712, 166644, 155426, 166644, 162712, 166644, 166644, 166644, 162712, 166644, 166644, 162712, 166644, 166644, 162712, 147920, 166644, 166644, 155426, 155426, 162712, 155426, 166644, 151494, 155426, 166644, 162712, 162712, 162712, 151494, 166644, 166644, 162712, 162712, 151494, 166644, 151494, 166644, 166644, 162712, 155426, 166644, 166644, 166644, 166644, 166644, 151494, 162712, 166644, 151494, 155426, 166644, 155426, 155426, 166644, 162712, 166644, 155426, 166644, 166644, 166644, 166644, 166644, 155426, 166644, 162712, 166644, 155426, 162712, 166644, 162712, 151494, 151494, 166644, 155426, 166644, 170969, 162712, 155426, 155426, 162712, 162712, 159751, 162712, 159751, 155426, 155426, 151494, 166644, 166644, 166644, 166644, 155426, 155426, 155426, 166644, 155426, 166644, 162712, 151494, 166644, 166644, 166644, 155426, 166644, 166644, 166644, 155426, 151494, 155426, 166644, 166644, 166644, 151494, 166644, 155426, 166644, 162712, 166644, 151494, 155426, 166644, 166644, 151494, 162712, 155426, 166644, 162712, 155426, 166644, 155426, 166644, 166644, 155426 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 11,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 21 ],
      "Objectives" : {
        "DurationInMs" : 7260,
        "TotalTasksDurationInMs" : 42966,
        "IOBytes" : {
          "Total" : 384128928,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 381066705,
            "SW" : 3062223
          }
        }
      }
    },
    "9" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1153698931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 60193664,
                "rowCount" : 940526
              },
              "compileTime" : {
                "sizeInBytes" : 60193664,
                "rowCount" : 940526
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#123, ca_zip#124, ca_country#125] "
          },
          "1" : {
            "sign" : -1835352789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 231369396,
                "rowCount" : 940526
              },
              "compileTime" : {
                "sizeInBytes" : 231369396,
                "rowCount" : 940526
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_country#125) AND isnotnull(ca_zip#124)) "
          },
          "2" : {
            "sign" : 527040145,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 246000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 246000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#115, ca_address_id#116, ca_street_number#117, ca_street_name#118, ca_street_type#119, ca_suite_number#120, ca_city#121, ca_county#122, ca_state#123, ca_zip#124, ca_country#125, ca_gmt_offset#126, ca_location_type#127], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ca_state#123, ca_zip#124, ca_country#125]\n+- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n   +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 2001601244,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [ca_state#123, ca_zip#124, ca_country#125] Condition : (isnotnull(ca_country#125) AND isnotnull(ca_zip#124)) "
          },
          "1" : {
            "sign" : -1556840766,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer_address Output [3]: [ca_state#123, ca_zip#124, ca_country#125] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_address] PushedFilters: [IsNotNull(ca_country), IsNotNull(ca_zip)] ReadSchema: struct<ca_state:string,ca_zip:string,ca_country:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer_address",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n+- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_state#123,ca_zip#124,ca_country#125] Batched: true, DataFilters: [isnotnull(ca_country#125), isnotnull(ca_zip#124)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_country), IsNotNull(ca_zip)], ReadSchema: struct<ca_state:string,ca_zip:string,ca_country:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 60193664,
        "inputRowCount" : 940526
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 13 ],
      "Objectives" : {
        "DurationInMs" : 4076,
        "TotalTasksDurationInMs" : 1049,
        "IOBytes" : {
          "Total" : 7767836,
          "Details" : {
            "IR" : 2579561,
            "IW" : 0,
            "SR" : 0,
            "SW" : 5188275
          }
        }
      }
    },
    "22" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 473987292,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 40,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 24,
                "rowCount" : 1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163], HashAggregate(keys=[], functions=[avg(netpaid#159)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163], HashAggregate(keys=[], functions=[avg(netpaid#159)])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -179802223,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 40,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [2]: [sum#189, count#190L] Keys: [] Functions [1]: [avg(netpaid#159)] Aggregate Attributes [1]: [avg(netpaid#159)#162] Results [1]: [(0.05 * avg(netpaid#159)#162) AS (0.05 * avg(netpaid))#163] "
          },
          "1" : {
            "sign" : -55960099,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 24,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [sum#189, count#190L] Arguments: 14 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[], functions=[avg(netpaid#159)], output=[(0.05 * avg(netpaid))#163])\n+- ShuffleQueryStage 14\n   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=2357]\n      +- *(19) HashAggregate(keys=[], functions=[partial_avg(netpaid#159)], output=[sum#189, count#190L])\n         +- *(19) HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], functions=[sum(UnscaledValue(ss_sales_price#15))], output=[netpaid#159])\n            +- AQEShuffleRead coalesced\n               +- ShuffleQueryStage 13\n                  +- Exchange hashpartitioning(c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90, 200), ENSURE_REQUIREMENTS, [plan_id=2309]\n                     +- *(18) HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], functions=[partial_sum(UnscaledValue(ss_sales_price#15))], output=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90, sum#192L])\n                        +- *(18) Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n                           +- *(18) SortMergeJoin [c_birth_country#111, s_zip#71], [upper(ca_country#125), ca_zip#124], Inner\n                              :- *(16) Sort [c_birth_country#111 ASC NULLS FIRST, s_zip#71 ASC NULLS FIRST], false, 0\n                              :  +- AQEShuffleRead coalesced\n                              :     +- ShuffleQueryStage 12\n                              :        +- Exchange hashpartitioning(c_birth_country#111, s_zip#71, 200), ENSURE_REQUIREMENTS, [plan_id=2202]\n                              :           +- *(15) Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n                              :              +- *(15) SortMergeJoin [ss_ticket_number#11L, ss_item_sk#4], [sr_ticket_number#34L, sr_item_sk#27], Inner\n                              :                 :- *(13) Sort [ss_ticket_number#11L ASC NULLS FIRST, ss_item_sk#4 ASC NULLS FIRST], false, 0\n                              :                 :  +- AQEShuffleRead coalesced\n                              :                 :     +- ShuffleQueryStage 11\n                              :                 :        +- Exchange hashpartitioning(ss_ticket_number#11L, ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=2061]\n                              :                 :           +- *(12) Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n                              :                 :              +- *(12) BroadcastHashJoin [ss_store_sk#9], [s_store_sk#46], Inner, BuildRight, false\n                              :                 :                 :- *(12) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n                              :                 :                 :  +- *(12) SortMergeJoin [ss_item_sk#4], [i_item_sk#75], Inner\n                              :                 :                 :     :- *(10) Sort [ss_item_sk#4 ASC NULLS FIRST], false, 0\n                              :                 :                 :     :  +- AQEShuffleRead coalesced\n                              :                 :                 :     :     +- ShuffleQueryStage 10\n                              :                 :                 :     :        +- Exchange hashpartitioning(ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=1872]\n                              :                 :                 :     :           +- *(9) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n                              :                 :                 :     :              +- *(9) SortMergeJoin [ss_customer_sk#5], [c_customer_sk#97], Inner\n                              :                 :                 :     :                 :- *(7) Sort [ss_customer_sk#5 ASC NULLS FIRST], false, 0\n                              :                 :                 :     :                 :  +- AQEShuffleRead coalesced\n                              :                 :                 :     :                 :     +- ShuffleQueryStage 0\n                              :                 :                 :     :                 :        +- Exchange hashpartitioning(ss_customer_sk#5, 200), ENSURE_REQUIREMENTS, [plan_id=1434]\n                              :                 :                 :     :                 :           +- *(1) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n                              :                 :                 :     :                 :              +- *(1) Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(ReusedSubquery Subquery subquery#177, [id=#290], xxhash64(ss_store_sk#9, 42)))\n                              :                 :                 :     :                 :                 :  +- ReusedSubquery Subquery subquery#177, [id=#290]\n                              :                 :                 :     :                 :                 +- *(1) ColumnarToRow\n                              :                 :                 :     :                 :                    +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_sales_price#15,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_ticket_number#11L), isnotnull(ss_item_sk#4), isnotnull(ss_store_sk#9), isnotnull(ss..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_sales_price:d...\n                              :                 :                 :     :                 +- *(8) Sort [c_customer_sk#97 ASC NULLS FIRST], false, 0\n                              :                 :                 :     :                    +- AQEShuffleRead coalesced\n                              :                 :                 :     :                       +- ShuffleQueryStage 2\n                              :                 :                 :     :                          +- ReusedExchange [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111], Exchange hashpartitioning(c_customer_sk#97, 200), ENSURE_REQUIREMENTS, [plan_id=493]\n                              :                 :                 :     +- *(11) Sort [i_item_sk#75 ASC NULLS FIRST], false, 0\n                              :                 :                 :        +- AQEShuffleRead coalesced\n                              :                 :                 :           +- ShuffleQueryStage 3\n                              :                 :                 :              +- Exchange hashpartitioning(i_item_sk#75, 200), ENSURE_REQUIREMENTS, [plan_id=1476]\n                              :                 :                 :                 +- *(3) Filter isnotnull(i_item_sk#75)\n                              :                 :                 :                    +- *(3) ColumnarToRow\n                              :                 :                 :                       +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_current_price#80,i_size#90,i_color#92,i_units#93,i_manager_id#95] Batched: true, DataFilters: [isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_m...\n                              :                 :                 +- BroadcastQueryStage 5\n                              :                 :                    +- ReusedExchange [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=531]\n                              :                 +- *(14) Sort [sr_ticket_number#34L ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST], false, 0\n                              :                    +- AQEShuffleRead coalesced\n                              :                       +- ShuffleQueryStage 7\n                              :                          +- ReusedExchange [sr_item_sk#27, sr_ticket_number#34L], Exchange hashpartitioning(sr_ticket_number#34L, sr_item_sk#27, 200), ENSURE_REQUIREMENTS, [plan_id=554]\n                              +- *(17) Sort [upper(ca_country#125) ASC NULLS FIRST, ca_zip#124 ASC NULLS FIRST], false, 0\n                                 +- AQEShuffleRead coalesced\n                                    +- ShuffleQueryStage 9\n                                       +- ReusedExchange [ca_state#123, ca_zip#124, ca_country#125], Exchange hashpartitioning(upper(ca_country#125), ca_zip#124, 200), ENSURE_REQUIREMENTS, [plan_id=577]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 40,
        "inputRowCount" : 1
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "16" : [ 88 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 23,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 79 ],
      "Objectives" : {
        "DurationInMs" : 35,
        "TotalTasksDurationInMs" : 31,
        "IOBytes" : {
          "Total" : 82,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 82,
            "SW" : 0
          }
        }
      }
    },
    "13" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1051319988,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2255232339328,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 2255232339328,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "1" : {
            "sign" : -418034879,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5578732628864,
                "rowCount" : 29674109728
              },
              "compileTime" : {
                "sizeInBytes" : 5578732628864,
                "rowCount" : 29674109728
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "2" : {
            "sign" : -307996189,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7952661407104,
                "rowCount" : 29674109728
              },
              "compileTime" : {
                "sizeInBytes" : 7952661407104,
                "rowCount" : 29674109728
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          },
          "3" : {
            "sign" : 775636263,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 61040568,
                "rowCount" : 954704
              },
              "compileTime" : {
                "sizeInBytes" : 60193664,
                "rowCount" : 940526
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_state#123, ca_zip#124, ca_country#125], ShuffleQueryStage 5 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n+- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n   +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n      :- LogicalQueryStage Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 7\n      +- LogicalQueryStage Project [ca_state#123, ca_zip#124, ca_country#125], ShuffleQueryStage 5\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 1541951443,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 61040568,
            "rowCount" : 954704,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [ca_state#123, ca_zip#124, ca_country#125] Arguments: 5 "
          },
          "1" : {
            "sign" : -2003643987,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 5578732628864,
            "rowCount" : 29674109728,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [11]: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] Input [15]: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71, ca_state#123, ca_zip#124, ca_country#125] "
          },
          "0" : {
            "sign" : 1213383548,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 2255232339328,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [11]: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] Keys [10]: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90] Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#15))] Aggregate Attributes [1]: [sum#187L] Results [11]: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90, sum#188L] "
          },
          "2" : {
            "sign" : -116141461,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 7952661407104,
            "rowCount" : 29674109728,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [2]: [c_birth_country#111, s_zip#71] Right keys [2]: [upper(ca_country#125), ca_zip#124] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : 717661383,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 34603008,
            "rowCount" : 31082,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [12]: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] Arguments: 8 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], functions=[partial_sum(UnscaledValue(ss_sales_price#15))], output=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90, sum#188L])\n+- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n   +- BroadcastHashJoin [c_birth_country#111, s_zip#71], [upper(ca_country#125), ca_zip#124], Inner, BuildLeft, false\n      :- BroadcastQueryStage 8\n      :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[3, string, true], input[11, string, true]),false), [plan_id=1139]\n      :     +- AQEShuffleRead local\n      :        +- ShuffleQueryStage 7\n      :           +- Exchange hashpartitioning(c_birth_country#111, s_zip#71, 200), ENSURE_REQUIREMENTS, [plan_id=1056]\n      :              +- *(12) Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n      :                 +- *(12) SortMergeJoin [ss_ticket_number#11L, ss_item_sk#4], [sr_ticket_number#34L, sr_item_sk#27], Inner\n      :                    :- *(10) Sort [ss_ticket_number#11L ASC NULLS FIRST, ss_item_sk#4 ASC NULLS FIRST], false, 0\n      :                    :  +- AQEShuffleRead coalesced\n      :                    :     +- ShuffleQueryStage 6\n      :                    :        +- Exchange hashpartitioning(ss_ticket_number#11L, ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=813]\n      :                    :           +- *(9) Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n      :                    :              +- *(9) BroadcastHashJoin [ss_store_sk#9], [s_store_sk#46], Inner, BuildRight, false\n      :                    :                 :- *(9) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n      :                    :                 :  +- *(9) BroadcastHashJoin [ss_item_sk#4], [i_item_sk#75], Inner, BuildRight, false\n      :                    :                 :     :- *(9) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n      :                    :                 :     :  +- *(9) SortMergeJoin [ss_customer_sk#5], [c_customer_sk#97], Inner\n      :                    :                 :     :     :- *(7) Sort [ss_customer_sk#5 ASC NULLS FIRST], false, 0\n      :                    :                 :     :     :  +- AQEShuffleRead coalesced\n      :                    :                 :     :     :     +- ShuffleQueryStage 0\n      :                    :                 :     :     :        +- Exchange hashpartitioning(ss_customer_sk#5, 200), ENSURE_REQUIREMENTS, [plan_id=474]\n      :                    :                 :     :     :           +- *(1) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n      :                    :                 :     :     :              +- *(1) Filter (((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(Subquery subquery#174, [id=#277], xxhash64(ss_item_sk#4, 42))) AND might_contain(Subquery subquery#177, [id=#290], xxhash64(ss_store_sk#9, 42)))\n      :                    :                 :     :     :                 :  :- Subquery subquery#174, [id=#277]\n      :                    :                 :     :     :                 :  :  +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                    +- == Final Plan ==\n                                                                                       ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[bloomFilter#173])\n                                                                                       +- ShuffleQueryStage 0\n                                                                                          +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=622]\n                                                                                             +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[buf#194])\n                                                                                                +- *(1) Project [i_item_sk#75]\n                                                                                                   +- *(1) Filter ((isnotnull(i_color#92) AND (i_color#92 = orchid)) AND isnotnull(i_item_sk#75))\n                                                                                                      +- *(1) ColumnarToRow\n                                                                                                         +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_color#92] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = orchid), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,orchid), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_color:string>\n                                                                                    +- == Initial Plan ==\n                                                                                       ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[bloomFilter#173])\n                                                                                       +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=275]\n                                                                                          +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[buf#194])\n                                                                                             +- Project [i_item_sk#75]\n                                                                                                +- Filter ((isnotnull(i_color#92) AND (i_color#92 = orchid)) AND isnotnull(i_item_sk#75))\n                                                                                                   +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_color#92] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = orchid), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,orchid), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_color:string>\n      :                    :                 :     :     :                 :  +- Subquery subquery#177, [id=#290]\n      :                    :                 :     :     :                 :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                    +- == Final Plan ==\n                                                                                       ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[bloomFilter#176])\n                                                                                       +- ShuffleQueryStage 0\n                                                                                          +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=617]\n                                                                                             +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[buf#193])\n                                                                                                +- *(1) Project [s_store_sk#46]\n                                                                                                   +- *(1) Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n                                                                                                      +- *(1) ColumnarToRow\n                                                                                                         +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_market_id#56,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string>\n                                                                                    +- == Initial Plan ==\n                                                                                       ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[bloomFilter#176])\n                                                                                       +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=288]\n                                                                                          +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[buf#193])\n                                                                                             +- Project [s_store_sk#46]\n                                                                                                +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n                                                                                                   +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_market_id#56,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string>\n      :                    :                 :     :     :                 +- *(1) ColumnarToRow\n      :                    :                 :     :     :                    +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_sales_price#15,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_ticket_number#11L), isnotnull(ss_item_sk#4), isnotnull(ss_store_sk#9), isnotnull(ss..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_sales_price:d...\n      :                    :                 :     :     +- *(8) Sort [c_customer_sk#97 ASC NULLS FIRST], false, 0\n      :                    :                 :     :        +- AQEShuffleRead coalesced\n      :                    :                 :     :           +- ShuffleQueryStage 1\n      :                    :                 :     :              +- Exchange hashpartitioning(c_customer_sk#97, 200), ENSURE_REQUIREMENTS, [plan_id=493]\n      :                    :                 :     :                 +- *(2) Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n      :                    :                 :     :                    +- *(2) ColumnarToRow\n      :                    :                 :     :                       +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#97,c_first_name#105,c_last_name#106,c_birth_country#111] Batched: true, DataFilters: [isnotnull(c_customer_sk#97), isnotnull(c_birth_country#111)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_birth_country)], ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>\n      :                    :                 :     +- BroadcastQueryStage 2\n      :                    :                 :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=512]\n      :                    :                 :           +- *(3) Filter ((isnotnull(i_color#92) AND (i_color#92 = orchid)) AND isnotnull(i_item_sk#75))\n      :                    :                 :              +- *(3) ColumnarToRow\n      :                    :                 :                 +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_current_price#80,i_size#90,i_color#92,i_units#93,i_manager_id#95] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = orchid), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,orchid), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_m...\n      :                    :                 +- BroadcastQueryStage 3\n      :                    :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=531]\n      :                    :                       +- *(4) Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n      :                    :                          +- *(4) Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n      :                    :                             +- *(4) ColumnarToRow\n      :                    :                                +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_store_name#51,s_market_id#56,s_state#70,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>\n      :                    +- *(11) Sort [sr_ticket_number#34L ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST], false, 0\n      :                       +- AQEShuffleRead coalesced\n      :                          +- ShuffleQueryStage 4\n      :                             +- Exchange hashpartitioning(sr_ticket_number#34L, sr_item_sk#27, 200), ENSURE_REQUIREMENTS, [plan_id=554]\n      :                                +- *(5) Project [sr_item_sk#27, sr_ticket_number#34L]\n      :                                   +- *(5) Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n      :                                      +- *(5) ColumnarToRow\n      :                                         +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#27,sr_ticket_number#34L,sr_returned_date_sk#45] Batched: true, DataFilters: [isnotnull(sr_ticket_number#34L), isnotnull(sr_item_sk#27)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_retu..., PartitionFilters: [], PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)], ReadSchema: struct<sr_item_sk:int,sr_ticket_number:bigint>\n      +- ShuffleQueryStage 5\n         +- Exchange hashpartitioning(upper(ca_country#125), ca_zip#124, 200), ENSURE_REQUIREMENTS, [plan_id=577]\n            +- *(6) Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n               +- *(6) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_state#123,ca_zip#124,ca_country#125] Batched: true, DataFilters: [isnotnull(ca_country#125), isnotnull(ca_zip#124)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_country), IsNotNull(ca_zip)], ReadSchema: struct<ca_state:string,ca_zip:string,ca_country:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 95643576,
        "inputRowCount" : 985786
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "5" : [ 10353, 13780, 29539, 20176, 18341, 22193, 24413, 43249, 57565, 57565, 18341, 20176, 47574, 35743, 43249, 35743, 13780, 43249, 20176, 47574, 32493, 22193, 29539, 26854, 8556, 18341, 32493, 29539, 47574, 4390, 7778, 22193, 12527, 10353, 20176, 29539, 26854, 43249, 39317, 22193, 29539, 24413, 15158, 13780, 24413, 18341, 35743, 32493, 32493, 35743, 57565, 43249, 13780, 29539, 39317, 24413, 12527, 47574, 43249, 26854, 22193, 32493, 26854, 13780, 22193, 47574, 39317, 16674, 26854, 29539, 13780, 13780, 22193, 12527, 18341, 39317, 6428, 18341, 39317, 26854, 52331, 39317, 32493, 32493, 32493, 9412, 29539, 26854, 11388, 18341, 10353, 12527, 11388, 43249, 52331, 18341, 15158, 13780, 13780, 32493, 35743, 43249, 32493, 16674, 15158, 20176, 18341, 22193, 29539, 3628, 29539, 24413, 16674, 22193, 16674, 39317, 22193, 57565, 29539, 32493, 13780, 32493, 43249, 20176, 22193, 24413, 4830, 13780, 22193, 26854, 15158, 24413, 22193, 32493, 35743, 47574, 29539, 29539, 24413, 9412, 18341, 29539, 43249, 11388, 18341, 32493, 47574, 22193, 47574, 24413, 26854, 47574, 18341, 11388, 43249, 15158, 29539, 39317, 24413, 16674, 52331, 20176, 10353, 29539, 22193, 12527, 18341, 10353, 47574, 15158, 8556, 47574, 47574, 35743, 9412, 29539, 32493, 13780, 16674, 35743, 47574, 22193, 63321, 24413, 24413, 24413, 26854, 52331, 26854, 35743, 47574, 16674, 29539, 22193, 39317, 29539, 24413, 18341, 35743, 22193 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 13,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 29 ],
      "Objectives" : {
        "DurationInMs" : 821,
        "TotalTasksDurationInMs" : 812,
        "IOBytes" : {
          "Total" : 5271722,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 5188275,
            "SW" : 83447
          }
        }
      }
    },
    "16" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -459341749,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 15504000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 15504000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "1" : {
            "sign" : 2095138697,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(i_item_sk#75) "
          },
          "2" : {
            "sign" : 228187507,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#75, i_item_id#76, i_rec_start_date#77, i_rec_end_date#78, i_item_desc#79, i_current_price#80, i_wholesale_cost#81, i_brand_id#82, i_brand#83, i_class_id#84, i_class#85, i_category_id#86, i_category#87, i_manufact_id#88, i_manufact#89, i_size#90, i_formulation#91, i_color#92, i_units#93, i_container#94, i_manager_id#95, i_product_name#96], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n+- Filter isnotnull(i_item_sk#75)\n   +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -952946995,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 15504000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [6]: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] Condition : isnotnull(i_item_sk#75) "
          },
          "1" : {
            "sign" : 694777251,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 15504000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.item Output [6]: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item] PushedFilters: [IsNotNull(i_item_sk)] ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.item",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull(i_item_sk#75)\n+- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_current_price#80,i_size#90,i_color#92,i_units#93,i_manager_id#95] Batched: true, DataFilters: [isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_m...\n"
      },
      "IM" : {
        "inputSizeInBytes" : 15504000,
        "inputRowCount" : 204000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 17,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 34 ],
      "Objectives" : {
        "DurationInMs" : 31593,
        "TotalTasksDurationInMs" : 411,
        "IOBytes" : {
          "Total" : 9030677,
          "Details" : {
            "IR" : 1814748,
            "IW" : 0,
            "SR" : 0,
            "SW" : 7215929
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1058420140,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 224,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 743438767,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 224,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [buf#193] Keys: [] Functions [1]: [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)] Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)#175] Results [1]: [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)#175 AS bloomFilter#176] "
          },
          "1" : {
            "sign" : -506774939,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [buf#193] Arguments: 0 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[bloomFilter#176])\n+- ShuffleQueryStage 0\n   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=617]\n      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[buf#193])\n         +- *(1) Project [s_store_sk#46]\n            +- *(1) Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n               +- *(1) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_market_id#56,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 224,
        "inputRowCount" : 1
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "0" : [ 276 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 6,
        "FinishedTasksNum" : 5,
        "FinishedTasksTotalTimeInMs" : 13994.0,
        "FinishedTasksDistributionInMs" : [ 2729.0, 2731.0, 2732.0, 2733.0, 3069.0 ]
      },
      "QueryStageOptimizationId" : 8,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 7 ],
      "Objectives" : {
        "DurationInMs" : 1871,
        "TotalTasksDurationInMs" : 1856,
        "IOBytes" : {
          "Total" : 7090,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 7090,
            "SW" : 0
          }
        }
      }
    },
    "10" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 115281794,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 24753955590,
                "rowCount" : 275043951
              },
              "compileTime" : {
                "sizeInBytes" : 24753955590,
                "rowCount" : 275043951
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "5" : {
            "sign" : 1246521455,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 26954307198,
                "rowCount" : 275043951
              },
              "compileTime" : {
                "sizeInBytes" : 26954307198,
                "rowCount" : 275043951
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#5 = c_customer_sk#97) "
          },
          "1" : {
            "sign" : 1464945997,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 118459872995,
                "rowCount" : 577853039
              },
              "compileTime" : {
                "sizeInBytes" : 118459872995,
                "rowCount" : 577853039
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#46) "
          },
          "0" : {
            "sign" : 365398378,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 113837048683,
                "rowCount" : 577853039
              },
              "compileTime" : {
                "sizeInBytes" : 113837048683,
                "rowCount" : 577853039
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "2" : {
            "sign" : -1968783726,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 44237719834,
                "rowCount" : 287257921
              },
              "compileTime" : {
                "sizeInBytes" : 44237719834,
                "rowCount" : 287257921
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "3" : {
            "sign" : -205052125,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 45386751518,
                "rowCount" : 287257921
              },
              "compileTime" : {
                "sizeInBytes" : 45386751518,
                "rowCount" : 287257921
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#4 = i_item_sk#75) "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n+- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n   :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n   :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n   :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n   :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n   :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n   :     :     :  +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND (might_contain(scalar-subquery#174 [], xxhash64(ss_item_sk#4, 42)) AND might_contain(scalar-subquery#177 [], xxhash64(ss_store_sk#9, 42))))\n   :     :     :     :  :- Aggregate [bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0) AS bloomFilter#173]\n   :     :     :     :  :  +- Project [i_item_sk#75]\n   :     :     :     :  :     +- Project [i_item_sk#75]\n   :     :     :     :  :        +- Filter ((isnotnull(i_color#92) AND (i_color#92 = orchid)) AND isnotnull(i_item_sk#75))\n   :     :     :     :  :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n   :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n   :     :     :     :     +- Project [s_store_sk#46]\n   :     :     :     :        +- Project [s_store_sk#46]\n   :     :     :     :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n   :     :     :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n   :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n   :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n   :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n   :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n   :     +- Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n   :        +- Filter ((isnotnull(i_color#92) AND (i_color#92 = orchid)) AND isnotnull(i_item_sk#75))\n   :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n   +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n      +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n         +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : -427805257,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [4]: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] Arguments: [c_customer_sk#97 ASC NULLS FIRST], false, 0 "
          },
          "4" : {
            "sign" : 1467240044,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 24753955590,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [7]: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] Input [9]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "11" : {
            "sign" : -2125406535,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1051704,
            "rowCount" : 47,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [4]: [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] Arguments: 3 "
          },
          "9" : {
            "sign" : 211028395,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 131450376,
            "rowCount" : 1930128,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] Arguments: 1 "
          },
          "5" : {
            "sign" : 941824053,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 26954307198,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [ss_customer_sk#5] Right keys [1]: [c_customer_sk#97] Join type: Inner Join condition: None "
          },
          "10" : {
            "sign" : -958319979,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1114112,
            "rowCount" : 1572,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [6]: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] Arguments: 2 "
          },
          "6" : {
            "sign" : 1945469013,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [5]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] Arguments: [ss_customer_sk#5 ASC NULLS FIRST], false, 0 "
          },
          "1" : {
            "sign" : 1182100878,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 118459872995,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_store_sk#9] Right keys [1]: [s_store_sk#46] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 1110494077,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 113837048683,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [14]: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] Input [16]: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] "
          },
          "2" : {
            "sign" : 1346854144,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 44237719834,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [12]: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] Input [13]: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "7" : {
            "sign" : 309921893,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 15542256,
            "rowCount" : 323797,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [5]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] Arguments: 0 "
          },
          "3" : {
            "sign" : 1789825741,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 45386751518,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_item_sk#4] Right keys [1]: [i_item_sk#75] Join type: Inner Join condition: None "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "ShuffleQueryStage",
          "toId" : 6,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Sort",
          "toId" : 5,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "ShuffleQueryStage",
          "toId" : 8,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Sort",
          "toId" : 5,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "SortMergeJoin",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "BroadcastQueryStage",
          "toId" : 3,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "BroadcastHashJoin",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n+- BroadcastHashJoin [ss_store_sk#9], [s_store_sk#46], Inner, BuildRight, false\n   :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n   :  +- BroadcastHashJoin [ss_item_sk#4], [i_item_sk#75], Inner, BuildRight, false\n   :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n   :     :  +- SortMergeJoin [ss_customer_sk#5], [c_customer_sk#97], Inner\n   :     :     :- Sort [ss_customer_sk#5 ASC NULLS FIRST], false, 0\n   :     :     :  +- ShuffleQueryStage 0\n   :     :     :     +- Exchange hashpartitioning(ss_customer_sk#5, 200), ENSURE_REQUIREMENTS, [plan_id=474]\n   :     :     :        +- *(1) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n   :     :     :           +- *(1) Filter (((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(Subquery subquery#174, [id=#277], xxhash64(ss_item_sk#4, 42))) AND might_contain(Subquery subquery#177, [id=#290], xxhash64(ss_store_sk#9, 42)))\n   :     :     :              :  :- Subquery subquery#174, [id=#277]\n   :     :     :              :  :  +- AdaptiveSparkPlan isFinalPlan=true\n                                       +- == Final Plan ==\n                                          ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[bloomFilter#173])\n                                          +- ShuffleQueryStage 0\n                                             +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=622]\n                                                +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[buf#194])\n                                                   +- *(1) Project [i_item_sk#75]\n                                                      +- *(1) Filter ((isnotnull(i_color#92) AND (i_color#92 = orchid)) AND isnotnull(i_item_sk#75))\n                                                         +- *(1) ColumnarToRow\n                                                            +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_color#92] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = orchid), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,orchid), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_color:string>\n                                       +- == Initial Plan ==\n                                          ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[bloomFilter#173])\n                                          +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=275]\n                                             +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[buf#194])\n                                                +- Project [i_item_sk#75]\n                                                   +- Filter ((isnotnull(i_color#92) AND (i_color#92 = orchid)) AND isnotnull(i_item_sk#75))\n                                                      +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_color#92] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = orchid), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,orchid), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_color:string>\n   :     :     :              :  +- Subquery subquery#177, [id=#290]\n   :     :     :              :     +- AdaptiveSparkPlan isFinalPlan=true\n                                       +- == Final Plan ==\n                                          ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[bloomFilter#176])\n                                          +- ShuffleQueryStage 0\n                                             +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=617]\n                                                +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[buf#193])\n                                                   +- *(1) Project [s_store_sk#46]\n                                                      +- *(1) Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n                                                         +- *(1) ColumnarToRow\n                                                            +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_market_id#56,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string>\n                                       +- == Initial Plan ==\n                                          ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[bloomFilter#176])\n                                          +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=288]\n                                             +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[buf#193])\n                                                +- Project [s_store_sk#46]\n                                                   +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n                                                      +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_market_id#56,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string>\n   :     :     :              +- *(1) ColumnarToRow\n   :     :     :                 +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_sales_price#15,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_ticket_number#11L), isnotnull(ss_item_sk#4), isnotnull(ss_store_sk#9), isnotnull(ss..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_sales_price:d...\n   :     :     +- Sort [c_customer_sk#97 ASC NULLS FIRST], false, 0\n   :     :        +- ShuffleQueryStage 1\n   :     :           +- Exchange hashpartitioning(c_customer_sk#97, 200), ENSURE_REQUIREMENTS, [plan_id=493]\n   :     :              +- *(2) Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n   :     :                 +- *(2) ColumnarToRow\n   :     :                    +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#97,c_first_name#105,c_last_name#106,c_birth_country#111] Batched: true, DataFilters: [isnotnull(c_customer_sk#97), isnotnull(c_birth_country#111)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_birth_country)], ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>\n   :     +- BroadcastQueryStage 2\n   :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=512]\n   :           +- *(3) Filter ((isnotnull(i_color#92) AND (i_color#92 = orchid)) AND isnotnull(i_item_sk#75))\n   :              +- *(3) ColumnarToRow\n   :                 +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_current_price#80,i_size#90,i_color#92,i_units#93,i_manager_id#95] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = orchid), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,orchid), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_m...\n   +- BroadcastQueryStage 3\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=531]\n         +- *(4) Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n            +- *(4) Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n               +- *(4) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_store_name#51,s_market_id#56,s_state#70,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 149158448,
        "inputRowCount" : 2255544
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "2" : [ 62781, 64962, 65216, 64038, 66287, 65773, 62302, 62672, 63797, 62384, 64092, 65970, 64691, 64581, 66301, 65359, 63180, 65379, 62166, 63959, 65987, 62393, 63230, 64974, 62945, 62949, 62178, 67791, 64088, 62189, 62615, 65725, 64508, 63724, 64931, 65365, 61732, 62782, 62716, 61835, 65959, 66520, 63280, 64363, 63179, 62191, 66467, 62207, 64520, 66837, 65803, 66482, 63845, 66405, 64183, 63439, 63178, 63094, 63445, 64220, 62562, 66363, 63323, 65370, 61305, 64038, 62668, 62310, 63423, 66404, 63716, 63553, 62931, 62837, 63318, 66412, 61820, 62929, 64843, 64088, 66203, 64705, 64852, 60363, 63067, 64729, 61497, 63652, 62863, 65727, 65072, 63988, 66621, 64890, 64404, 62096, 64711, 63549, 64394, 62297, 63543, 65086, 59744, 60017, 62363, 64000, 63186, 65654, 62478, 63126, 63254, 63340, 62490, 62325, 62604, 63788, 62702, 64051, 63927, 61005, 62851, 63173, 64300, 64641, 66702, 63274, 63241, 65349, 64484, 62831, 63427, 67265, 61826, 62180, 62864, 62669, 65360, 66034, 63976, 63227, 62933, 60567, 65294, 66713, 63741, 64127, 64657, 63900, 62556, 60852, 64701, 63123, 62641, 63413, 65653, 64905, 64644, 66185, 62945, 61548, 64246, 63846, 64979, 63135, 63749, 65050, 64532, 63399, 64886, 62757, 63309, 63924, 63143, 64583, 63588, 62464, 64327, 61371, 63288, 64525, 61952, 64549, 62649, 64775, 63017, 64725, 64783, 65713, 62423, 61602, 66999, 62312, 63151, 63015, 64757, 65883, 63293, 65329, 62636, 61981 ],

      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 10,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 16 ],
      "Objectives" : {
        "DurationInMs" : 5277,
        "TotalTasksDurationInMs" : 3105,
        "IOBytes" : {
          "Total" : 116292867,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 85444267,
            "SW" : 30848600
          }
        }
      }
    },
    "21" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1726153103,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 24,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 24,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163] "
          }
        },
        "links" : [ ],
        "rawPlan" : "Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163]\n+- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n   +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n      +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n         :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n         :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n         :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n         :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n         :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n         :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n         :     :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n         :     :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n         :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n         :     :     :     :     :  +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42)))\n         :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n         :     :     :     :     :     :     +- Project [s_store_sk#46]\n         :     :     :     :     :     :        +- Project [s_store_sk#46]\n         :     :     :     :     :     :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n         :     :     :     :     :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n         :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n         :     :     :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n         :     :     :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n         :     :     :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n         :     :     :     +- Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n         :     :     :        +- Filter isnotnull(i_item_sk#75)\n         :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n         :     :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n         :     :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n         :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n         :     +- Project [sr_item_sk#27, sr_ticket_number#34L]\n         :        +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n         :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n         +- Project [ca_state#123, ca_zip#124, ca_country#125]\n            +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n               +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1438635623,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 24,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [1]: [netpaid#159] Keys: [] Functions [1]: [partial_avg(netpaid#159)] Aggregate Attributes [2]: [sum#181, count#182L] Results [2]: [sum#189, count#190L] "
          },
          "1" : {
            "sign" : 811722736,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 16119024,
            "rowCount" : 100798,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [11]: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90, sum#192L] Keys [10]: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90] Functions [1]: [sum(UnscaledValue(ss_sales_price#15))] Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#15))#160L] Results [1]: [MakeDecimal(sum(UnscaledValue(ss_sales_price#15))#160L,17,2) AS netpaid#159] "
          },
          "2" : {
            "sign" : -864656230,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 675059401424,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [11]: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90, sum#192L] Arguments: 13 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "ShuffleQueryStage",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[], functions=[partial_avg(netpaid#159)], output=[sum#189, count#190L])\n+- HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], functions=[sum(UnscaledValue(ss_sales_price#15))], output=[netpaid#159])\n   +- ShuffleQueryStage 13\n      +- Exchange hashpartitioning(c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90, 200), ENSURE_REQUIREMENTS, [plan_id=2309]\n         +- *(18) HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], functions=[partial_sum(UnscaledValue(ss_sales_price#15))], output=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90, sum#192L])\n            +- *(18) Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n               +- *(18) SortMergeJoin [c_birth_country#111, s_zip#71], [upper(ca_country#125), ca_zip#124], Inner\n                  :- *(16) Sort [c_birth_country#111 ASC NULLS FIRST, s_zip#71 ASC NULLS FIRST], false, 0\n                  :  +- AQEShuffleRead coalesced\n                  :     +- ShuffleQueryStage 12\n                  :        +- Exchange hashpartitioning(c_birth_country#111, s_zip#71, 200), ENSURE_REQUIREMENTS, [plan_id=2202]\n                  :           +- *(15) Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n                  :              +- *(15) SortMergeJoin [ss_ticket_number#11L, ss_item_sk#4], [sr_ticket_number#34L, sr_item_sk#27], Inner\n                  :                 :- *(13) Sort [ss_ticket_number#11L ASC NULLS FIRST, ss_item_sk#4 ASC NULLS FIRST], false, 0\n                  :                 :  +- AQEShuffleRead coalesced\n                  :                 :     +- ShuffleQueryStage 11\n                  :                 :        +- Exchange hashpartitioning(ss_ticket_number#11L, ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=2061]\n                  :                 :           +- *(12) Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n                  :                 :              +- *(12) BroadcastHashJoin [ss_store_sk#9], [s_store_sk#46], Inner, BuildRight, false\n                  :                 :                 :- *(12) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n                  :                 :                 :  +- *(12) SortMergeJoin [ss_item_sk#4], [i_item_sk#75], Inner\n                  :                 :                 :     :- *(10) Sort [ss_item_sk#4 ASC NULLS FIRST], false, 0\n                  :                 :                 :     :  +- AQEShuffleRead coalesced\n                  :                 :                 :     :     +- ShuffleQueryStage 10\n                  :                 :                 :     :        +- Exchange hashpartitioning(ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=1872]\n                  :                 :                 :     :           +- *(9) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n                  :                 :                 :     :              +- *(9) SortMergeJoin [ss_customer_sk#5], [c_customer_sk#97], Inner\n                  :                 :                 :     :                 :- *(7) Sort [ss_customer_sk#5 ASC NULLS FIRST], false, 0\n                  :                 :                 :     :                 :  +- AQEShuffleRead coalesced\n                  :                 :                 :     :                 :     +- ShuffleQueryStage 0\n                  :                 :                 :     :                 :        +- Exchange hashpartitioning(ss_customer_sk#5, 200), ENSURE_REQUIREMENTS, [plan_id=1434]\n                  :                 :                 :     :                 :           +- *(1) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n                  :                 :                 :     :                 :              +- *(1) Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(ReusedSubquery Subquery subquery#177, [id=#290], xxhash64(ss_store_sk#9, 42)))\n                  :                 :                 :     :                 :                 :  +- ReusedSubquery Subquery subquery#177, [id=#290]\n                  :                 :                 :     :                 :                 +- *(1) ColumnarToRow\n                  :                 :                 :     :                 :                    +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_sales_price#15,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_ticket_number#11L), isnotnull(ss_item_sk#4), isnotnull(ss_store_sk#9), isnotnull(ss..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_sales_price:d...\n                  :                 :                 :     :                 +- *(8) Sort [c_customer_sk#97 ASC NULLS FIRST], false, 0\n                  :                 :                 :     :                    +- AQEShuffleRead coalesced\n                  :                 :                 :     :                       +- ShuffleQueryStage 2\n                  :                 :                 :     :                          +- ReusedExchange [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111], Exchange hashpartitioning(c_customer_sk#97, 200), ENSURE_REQUIREMENTS, [plan_id=493]\n                  :                 :                 :     +- *(11) Sort [i_item_sk#75 ASC NULLS FIRST], false, 0\n                  :                 :                 :        +- AQEShuffleRead coalesced\n                  :                 :                 :           +- ShuffleQueryStage 3\n                  :                 :                 :              +- Exchange hashpartitioning(i_item_sk#75, 200), ENSURE_REQUIREMENTS, [plan_id=1476]\n                  :                 :                 :                 +- *(3) Filter isnotnull(i_item_sk#75)\n                  :                 :                 :                    +- *(3) ColumnarToRow\n                  :                 :                 :                       +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_current_price#80,i_size#90,i_color#92,i_units#93,i_manager_id#95] Batched: true, DataFilters: [isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_m...\n                  :                 :                 +- BroadcastQueryStage 5\n                  :                 :                    +- ReusedExchange [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=531]\n                  :                 +- *(14) Sort [sr_ticket_number#34L ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST], false, 0\n                  :                    +- AQEShuffleRead coalesced\n                  :                       +- ShuffleQueryStage 7\n                  :                          +- ReusedExchange [sr_item_sk#27, sr_ticket_number#34L], Exchange hashpartitioning(sr_ticket_number#34L, sr_item_sk#27, 200), ENSURE_REQUIREMENTS, [plan_id=554]\n                  +- *(17) Sort [upper(ca_country#125) ASC NULLS FIRST, ca_zip#124 ASC NULLS FIRST], false, 0\n                     +- AQEShuffleRead coalesced\n                        +- ShuffleQueryStage 9\n                           +- ReusedExchange [ca_state#123, ca_zip#124, ca_country#125], Exchange hashpartitioning(upper(ca_country#125), ca_zip#124, 200), ENSURE_REQUIREMENTS, [plan_id=577]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 16119024,
        "inputRowCount" : 100798
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "15" : [ 37603, 41096, 37855, 40130, 40958, 39847, 38896, 41815, 39863, 39448, 34869, 40385, 37651, 40862, 38645, 40537, 38838, 39982, 39448, 38636, 40405, 38048, 37433, 40323, 41784, 39181, 38253, 42211, 40513, 37067, 40645, 41416, 38526, 37161, 39387, 37735, 39644, 40797, 39026, 39024, 37418, 39049, 42914, 39535, 40287, 40562, 40287, 40424, 39120, 40023, 38988, 37189, 37962, 38221, 38301, 38378, 40175, 37843, 39140, 40422, 36376, 38352, 37610, 35676, 38849, 39517, 44955, 39252, 38889, 38269, 39055, 36026, 39306, 40816, 39119, 38805, 39163, 38820, 41413, 38378, 39407, 39077, 38305, 40742, 42079, 38598, 38472, 40465, 38598, 40239, 37176, 38925, 40114, 37335, 38749, 40072, 37913, 43235, 38784, 39535, 38338, 39982, 37405, 40407, 38328, 36664, 40546, 38958, 38253, 41628, 39888, 41301, 36857, 41909, 41053, 39786, 37489, 39387, 36053, 37289, 39440, 42255, 40338, 40287, 37883, 36746, 38661, 41506, 38548, 36122, 39092, 42096, 39454, 41271, 42011, 38665, 40493, 36830, 39434, 36431, 37770, 39580, 37567, 40864, 40363, 39336, 41988, 39504, 37023, 40593, 39216, 39944, 38014, 35909, 37140, 41060, 37619, 36533, 40360, 37330, 39360, 36878, 38887, 38620, 40427, 41179, 40155, 38700, 40028, 39288, 40160, 36839, 39471, 40205, 40458, 39870, 41494, 37186, 42192, 40925, 39184, 38002, 38107, 37286, 39212, 39961, 37973, 40664, 40761, 40719, 40604, 39784, 36829, 38221, 39590, 39863, 39560, 39301, 39513, 40506 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 22,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 68 ],
      "Objectives" : {
        "DurationInMs" : 344,
        "TotalTasksDurationInMs" : 334,
        "IOBytes" : {
          "Total" : 7489085,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 7489003,
            "SW" : 82
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1080108563,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9456300108,
                "rowCount" : 262675003
              },
              "compileTime" : {
                "sizeInBytes" : 9456300108,
                "rowCount" : 262675003
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] "
          },
          "1" : {
            "sign" : 379200333,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 39926600456,
                "rowCount" : 262675003
              },
              "compileTime" : {
                "sizeInBytes" : 39926600456,
                "rowCount" : 262675003
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND (might_contain(scalar-subquery#174 [], xxhash64(ss_item_sk#4, 42)) AND might_contain(scalar-subquery#177 [], xxhash64(ss_store_sk#9, 42)))) "
          },
          "2" : {
            "sign" : -628374504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 43776970976,
                "rowCount" : 288006388
              },
              "compileTime" : {
                "sizeInBytes" : 43776970976,
                "rowCount" : 288006388
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n+- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND (might_contain(scalar-subquery#174 [], xxhash64(ss_item_sk#4, 42)) AND might_contain(scalar-subquery#177 [], xxhash64(ss_store_sk#9, 42))))\n   :  :- Aggregate [bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0) AS bloomFilter#173]\n   :  :  +- Project [i_item_sk#75]\n   :  :     +- Project [i_item_sk#75]\n   :  :        +- Filter ((isnotnull(i_color#92) AND (i_color#92 = orchid)) AND isnotnull(i_item_sk#75))\n   :  :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n   :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n   :     +- Project [s_store_sk#46]\n   :        +- Project [s_store_sk#46]\n   :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n   :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n   +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1604519302,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 9456300108,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] Input [6]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, ss_sold_date_sk#25] "
          },
          "1" : {
            "sign" : -557678896,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 9456300108,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [6]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, ss_sold_date_sk#25] Condition : (((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(Subquery subquery#174, [id=#277], xxhash64(ss_item_sk#4, 42))) AND might_contain(Subquery subquery#177, [id=#290], xxhash64(ss_store_sk#9, 42))) "
          },
          "2" : {
            "sign" : 1625522527,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 9456300108,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_sales Output [6]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, ss_sold_date_sk#25] Batched: true Location: CatalogFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales] PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)] ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_sales_price:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_sales",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n+- Filter (((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(Subquery subquery#174, [id=#277], xxhash64(ss_item_sk#4, 42))) AND might_contain(Subquery subquery#177, [id=#290], xxhash64(ss_store_sk#9, 42)))\n   :  :- Subquery subquery#174, [id=#277]\n   :  :  +- AdaptiveSparkPlan isFinalPlan=false\n   :  :     +- ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[bloomFilter#173])\n   :  :        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=275]\n   :  :           +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[buf#194])\n   :  :              +- Project [i_item_sk#75]\n   :  :                 +- Filter ((isnotnull(i_color#92) AND (i_color#92 = orchid)) AND isnotnull(i_item_sk#75))\n   :  :                    +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_color#92] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = orchid), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,orchid), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_color:string>\n   :  +- Subquery subquery#177, [id=#290]\n   :     +- AdaptiveSparkPlan isFinalPlan=false\n   :        +- ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[bloomFilter#176])\n   :           +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=288]\n   :              +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[buf#193])\n   :                 +- Project [s_store_sk#46]\n   :                    +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n   :                       +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_market_id#56,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string>\n   +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_sales_price#15,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_ticket_number#11L), isnotnull(ss_item_sk#4), isnotnull(ss_store_sk#9), isnotnull(ss..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_sales_price:d...\n"
      },
      "IM" : {
        "inputSizeInBytes" : 9456300108,
        "inputRowCount" : 262675003
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 9 ],
      "Objectives" : {
        "DurationInMs" : 11160,
        "TotalTasksDurationInMs" : 154788,
        "IOBytes" : {
          "Total" : 2367485557,
          "Details" : {
            "IR" : 2355309235,
            "IW" : 0,
            "SR" : 0,
            "SW" : 12176322
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 352920416,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2891,
                "rowCount" : 49
              },
              "compileTime" : {
                "sizeInBytes" : 2891,
                "rowCount" : 49
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] "
          },
          "1" : {
            "sign" : -1176082101,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 23471,
                "rowCount" : 49
              },
              "compileTime" : {
                "sizeInBytes" : 23471,
                "rowCount" : 49
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71)) "
          },
          "2" : {
            "sign" : 2043403682,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n+- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n   +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -852594249,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 2891,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] Input [5]: [s_store_sk#46, s_store_name#51, s_market_id#56, s_state#70, s_zip#71] "
          },
          "1" : {
            "sign" : -1657302046,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 2891,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [5]: [s_store_sk#46, s_store_name#51, s_market_id#56, s_state#70, s_zip#71] Condition : (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71)) "
          },
          "2" : {
            "sign" : 1117021561,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 2891,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store Output [5]: [s_store_sk#46, s_store_name#51, s_market_id#56, s_state#70, s_zip#71] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store] PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)] ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n+- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n   +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_store_name#51,s_market_id#56,s_state#70,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2891,
        "inputRowCount" : 49
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 0 ],
      "Objectives" : {
        "DurationInMs" : 3356,
        "TotalTasksDurationInMs" : 3252,
        "IOBytes" : {
          "Total" : 15609,
          "Details" : {
            "IR" : 15344,
            "IW" : 0,
            "SR" : 0,
            "SW" : 265
          }
        }
      }
    },
    "17" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1031245998,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 24753955590,
                "rowCount" : 275043951
              },
              "compileTime" : {
                "sizeInBytes" : 24753955590,
                "rowCount" : 275043951
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "1" : {
            "sign" : 102638235,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 26954307198,
                "rowCount" : 275043951
              },
              "compileTime" : {
                "sizeInBytes" : 26954307198,
                "rowCount" : 275043951
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#5 = c_customer_sk#97) "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n+- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n   :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n   :  +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42)))\n   :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n   :     :     +- Project [s_store_sk#46]\n   :     :        +- Project [s_store_sk#46]\n   :     :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n   :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n   :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n   +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n      +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n         +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 1377296582,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [4]: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] Arguments: [c_customer_sk#97 ASC NULLS FIRST], false, 0 "
          },
          "5" : {
            "sign" : 1518114752,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 135108960,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] Arguments: 2 "
          },
          "1" : {
            "sign" : 350964046,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 26954307198,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [ss_customer_sk#5] Right keys [1]: [c_customer_sk#97] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 695820447,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 24753955590,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [7]: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] Input [9]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "2" : {
            "sign" : -773214249,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [5]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] Arguments: [ss_customer_sk#5 ASC NULLS FIRST], false, 0 "
          },
          "3" : {
            "sign" : -807305719,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 1987810560,
            "rowCount" : 41412720,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [5]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] Arguments: 0 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "SortMergeJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n+- SortMergeJoin [ss_customer_sk#5], [c_customer_sk#97], Inner\n   :- Sort [ss_customer_sk#5 ASC NULLS FIRST], false, 0\n   :  +- ShuffleQueryStage 0\n   :     +- Exchange hashpartitioning(ss_customer_sk#5, 200), ENSURE_REQUIREMENTS, [plan_id=1434]\n   :        +- *(1) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n   :           +- *(1) Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(ReusedSubquery Subquery subquery#177, [id=#290], xxhash64(ss_store_sk#9, 42)))\n   :              :  +- ReusedSubquery Subquery subquery#177, [id=#290]\n   :              +- *(1) ColumnarToRow\n   :                 +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_sales_price#15,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_ticket_number#11L), isnotnull(ss_item_sk#4), isnotnull(ss_store_sk#9), isnotnull(ss..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_sales_price:d...\n   +- Sort [c_customer_sk#97 ASC NULLS FIRST], false, 0\n      +- ShuffleQueryStage 2\n         +- ReusedExchange [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111], Exchange hashpartitioning(c_customer_sk#97, 200), ENSURE_REQUIREMENTS, [plan_id=493]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2119260936,
        "inputRowCount" : 43342848
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "10" : [ 3456889, 3501116, 3465177, 3439010, 3489774, 3483863, 3442190, 3443503, 3468893, 3439834, 3515814, 3440166, 3486374, 3482964, 3462151, 3437108, 3496964, 3537820, 3423865, 3434563, 3465259, 3426613, 3444692, 3504289, 3467479, 3466853, 3447280, 3570218, 3490334, 3490656, 3364398, 3417421, 3486556, 3381638, 3454982, 3492140, 3430915, 3421772, 3379506, 3434476, 3454406, 3481699, 3364237, 3464753, 3501022, 3391394, 3483867, 3459423, 3466211, 3485033, 3494282, 3461458, 3433389, 3506115, 3441713, 3424067, 3415286, 3409957, 3399897, 3447070, 3428523, 3529544, 3382316, 3458973, 3419408, 3511940, 3486271, 3418551, 3466270, 3441860, 3479647, 3416018, 3434302, 3465953, 3474326, 3454065, 3549426, 3452021, 3504284, 3421802, 3456246, 3502104, 3511056, 3351346, 3488716, 3411110, 3413858, 3463974, 3437456, 3556578, 3424696, 3453442, 3476419, 3417496, 3501142, 3519598, 3460159, 3448815, 3477689, 3398281, 3385440, 3509742, 3452458, 3370516, 3417510, 3466891, 3467086, 3550868, 3350976, 3420885, 3403189, 3437624, 3480506, 3443891, 3412606, 3436316, 3386571, 3422536, 3391636, 3374540, 3440121, 3449789, 3542064, 3425370, 3486688, 3522638, 3468153, 3466679, 3451975, 3404524, 3490157, 3483735, 3430636, 3435016, 3411561, 3436842, 3477828, 3470235, 3440381, 3444934, 3456156, 3346930, 3512840, 3512271, 3483956, 3502116, 3543469, 3423808, 3457163, 3424780, 3487396, 3473496, 3475556, 3499559, 3536884, 3516551, 3480296, 3494165, 3500325, 3398889, 3396814, 3410997, 3492915, 3398936, 3464573, 3511624, 3429185, 3500523, 3495514, 3418198, 3485610, 3558975, 3476671, 3482907, 3490102, 3397552, 3431913, 3408249, 3457648, 3431969, 3430781, 3456194, 3405252, 3417463, 3522869, 3477174, 3529055, 3512422, 3434744, 3452329, 3443578, 3450966, 3455298, 3377601, 3462517, 3483835, 3395394, 3442125, 3450768, 3414852 ],

      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 18,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 37 ],
      "Objectives" : {
        "DurationInMs" : 5167,
        "TotalTasksDurationInMs" : 54776,
        "IOBytes" : {
          "Total" : 2756105177,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 732024368,
            "SW" : 2024080809
          }
        }
      }
    },
    "14" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1355193756,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2492625217152,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 2492625217152,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157] "
          }
        },
        "links" : [ ],
        "rawPlan" : "Aggregate [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157]\n+- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n   +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n      +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n         :- LogicalQueryStage Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 7\n         +- LogicalQueryStage Project [ca_state#123, ca_zip#124, ca_country#125], ShuffleQueryStage 5\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1486384315,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 2492625217152,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [4]: [c_last_name#106, c_first_name#105, s_store_name#51, netpaid#159] Keys [3]: [c_last_name#106, c_first_name#105, s_store_name#51] Functions [1]: [partial_sum(netpaid#159)] Aggregate Attributes [2]: [sum#183, isEmpty#184] Results [5]: [c_last_name#106, c_first_name#105, s_store_name#51, sum#185, isEmpty#186] "
          },
          "1" : {
            "sign" : 111691306,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 118288,
            "rowCount" : 741,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [11]: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90, sum#188L] Keys [10]: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90] Functions [1]: [sum(UnscaledValue(ss_sales_price#15))] Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#15))#160L] Results [4]: [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15))#160L,17,2) AS netpaid#159] "
          },
          "2" : {
            "sign" : 733410637,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 2255232339328,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [11]: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90, sum#188L] Arguments: 9 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "ShuffleQueryStage",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51], functions=[partial_sum(netpaid#159)], output=[c_last_name#106, c_first_name#105, s_store_name#51, sum#185, isEmpty#186])\n+- HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], functions=[sum(UnscaledValue(ss_sales_price#15))], output=[c_last_name#106, c_first_name#105, s_store_name#51, netpaid#159])\n   +- ShuffleQueryStage 9\n      +- Exchange hashpartitioning(c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90, 200), ENSURE_REQUIREMENTS, [plan_id=1211]\n         +- *(13) HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], functions=[partial_sum(UnscaledValue(ss_sales_price#15))], output=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90, sum#188L])\n            +- *(13) Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n               +- *(13) BroadcastHashJoin [c_birth_country#111, s_zip#71], [upper(ca_country#125), ca_zip#124], Inner, BuildLeft, false\n                  :- BroadcastQueryStage 8\n                  :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[3, string, true], input[11, string, true]),false), [plan_id=1139]\n                  :     +- AQEShuffleRead local\n                  :        +- ShuffleQueryStage 7\n                  :           +- Exchange hashpartitioning(c_birth_country#111, s_zip#71, 200), ENSURE_REQUIREMENTS, [plan_id=1056]\n                  :              +- *(12) Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n                  :                 +- *(12) SortMergeJoin [ss_ticket_number#11L, ss_item_sk#4], [sr_ticket_number#34L, sr_item_sk#27], Inner\n                  :                    :- *(10) Sort [ss_ticket_number#11L ASC NULLS FIRST, ss_item_sk#4 ASC NULLS FIRST], false, 0\n                  :                    :  +- AQEShuffleRead coalesced\n                  :                    :     +- ShuffleQueryStage 6\n                  :                    :        +- Exchange hashpartitioning(ss_ticket_number#11L, ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=813]\n                  :                    :           +- *(9) Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n                  :                    :              +- *(9) BroadcastHashJoin [ss_store_sk#9], [s_store_sk#46], Inner, BuildRight, false\n                  :                    :                 :- *(9) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n                  :                    :                 :  +- *(9) BroadcastHashJoin [ss_item_sk#4], [i_item_sk#75], Inner, BuildRight, false\n                  :                    :                 :     :- *(9) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n                  :                    :                 :     :  +- *(9) SortMergeJoin [ss_customer_sk#5], [c_customer_sk#97], Inner\n                  :                    :                 :     :     :- *(7) Sort [ss_customer_sk#5 ASC NULLS FIRST], false, 0\n                  :                    :                 :     :     :  +- AQEShuffleRead coalesced\n                  :                    :                 :     :     :     +- ShuffleQueryStage 0\n                  :                    :                 :     :     :        +- Exchange hashpartitioning(ss_customer_sk#5, 200), ENSURE_REQUIREMENTS, [plan_id=474]\n                  :                    :                 :     :     :           +- *(1) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n                  :                    :                 :     :     :              +- *(1) Filter (((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(Subquery subquery#174, [id=#277], xxhash64(ss_item_sk#4, 42))) AND might_contain(Subquery subquery#177, [id=#290], xxhash64(ss_store_sk#9, 42)))\n                  :                    :                 :     :     :                 :  :- Subquery subquery#174, [id=#277]\n                  :                    :                 :     :     :                 :  :  +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                                +- == Final Plan ==\n                                                                                                   ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[bloomFilter#173])\n                                                                                                   +- ShuffleQueryStage 0\n                                                                                                      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=622]\n                                                                                                         +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[buf#194])\n                                                                                                            +- *(1) Project [i_item_sk#75]\n                                                                                                               +- *(1) Filter ((isnotnull(i_color#92) AND (i_color#92 = orchid)) AND isnotnull(i_item_sk#75))\n                                                                                                                  +- *(1) ColumnarToRow\n                                                                                                                     +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_color#92] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = orchid), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,orchid), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_color:string>\n                                                                                                +- == Initial Plan ==\n                                                                                                   ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[bloomFilter#173])\n                                                                                                   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=275]\n                                                                                                      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[buf#194])\n                                                                                                         +- Project [i_item_sk#75]\n                                                                                                            +- Filter ((isnotnull(i_color#92) AND (i_color#92 = orchid)) AND isnotnull(i_item_sk#75))\n                                                                                                               +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_color#92] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = orchid), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,orchid), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_color:string>\n                  :                    :                 :     :     :                 :  +- Subquery subquery#177, [id=#290]\n                  :                    :                 :     :     :                 :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                                +- == Final Plan ==\n                                                                                                   ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[bloomFilter#176])\n                                                                                                   +- ShuffleQueryStage 0\n                                                                                                      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=617]\n                                                                                                         +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[buf#193])\n                                                                                                            +- *(1) Project [s_store_sk#46]\n                                                                                                               +- *(1) Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n                                                                                                                  +- *(1) ColumnarToRow\n                                                                                                                     +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_market_id#56,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string>\n                                                                                                +- == Initial Plan ==\n                                                                                                   ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[bloomFilter#176])\n                                                                                                   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=288]\n                                                                                                      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[buf#193])\n                                                                                                         +- Project [s_store_sk#46]\n                                                                                                            +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n                                                                                                               +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_market_id#56,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string>\n                  :                    :                 :     :     :                 +- *(1) ColumnarToRow\n                  :                    :                 :     :     :                    +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_sales_price#15,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_ticket_number#11L), isnotnull(ss_item_sk#4), isnotnull(ss_store_sk#9), isnotnull(ss..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_sales_price:d...\n                  :                    :                 :     :     +- *(8) Sort [c_customer_sk#97 ASC NULLS FIRST], false, 0\n                  :                    :                 :     :        +- AQEShuffleRead coalesced\n                  :                    :                 :     :           +- ShuffleQueryStage 1\n                  :                    :                 :     :              +- Exchange hashpartitioning(c_customer_sk#97, 200), ENSURE_REQUIREMENTS, [plan_id=493]\n                  :                    :                 :     :                 +- *(2) Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n                  :                    :                 :     :                    +- *(2) ColumnarToRow\n                  :                    :                 :     :                       +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#97,c_first_name#105,c_last_name#106,c_birth_country#111] Batched: true, DataFilters: [isnotnull(c_customer_sk#97), isnotnull(c_birth_country#111)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_birth_country)], ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>\n                  :                    :                 :     +- BroadcastQueryStage 2\n                  :                    :                 :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=512]\n                  :                    :                 :           +- *(3) Filter ((isnotnull(i_color#92) AND (i_color#92 = orchid)) AND isnotnull(i_item_sk#75))\n                  :                    :                 :              +- *(3) ColumnarToRow\n                  :                    :                 :                 +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_current_price#80,i_size#90,i_color#92,i_units#93,i_manager_id#95] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = orchid), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,orchid), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_m...\n                  :                    :                 +- BroadcastQueryStage 3\n                  :                    :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=531]\n                  :                    :                       +- *(4) Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n                  :                    :                          +- *(4) Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n                  :                    :                             +- *(4) ColumnarToRow\n                  :                    :                                +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_store_name#51,s_market_id#56,s_state#70,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>\n                  :                    +- *(11) Sort [sr_ticket_number#34L ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST], false, 0\n                  :                       +- AQEShuffleRead coalesced\n                  :                          +- ShuffleQueryStage 4\n                  :                             +- Exchange hashpartitioning(sr_ticket_number#34L, sr_item_sk#27, 200), ENSURE_REQUIREMENTS, [plan_id=554]\n                  :                                +- *(5) Project [sr_item_sk#27, sr_ticket_number#34L]\n                  :                                   +- *(5) Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n                  :                                      +- *(5) ColumnarToRow\n                  :                                         +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#27,sr_ticket_number#34L,sr_returned_date_sk#45] Batched: true, DataFilters: [isnotnull(sr_ticket_number#34L), isnotnull(sr_item_sk#27)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_retu..., PartitionFilters: [], PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)], ReadSchema: struct<sr_item_sk:int,sr_ticket_number:bigint>\n                  +- AQEShuffleRead local\n                     +- ShuffleQueryStage 5\n                        +- Exchange hashpartitioning(upper(ca_country#125), ca_zip#124, 200), ENSURE_REQUIREMENTS, [plan_id=577]\n                           +- *(6) Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n                              +- *(6) ColumnarToRow\n                                 +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_state#123,ca_zip#124,ca_country#125] Batched: true, DataFilters: [isnotnull(ca_country#125), isnotnull(ca_zip#124)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_country), IsNotNull(ca_zip)], ReadSchema: struct<ca_state:string,ca_zip:string,ca_country:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 118288,
        "inputRowCount" : 741
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "8" : [ 368, 490, 304, 334, 717, 304, 0, 405, 0, 539, 368, 368, 717, 189, 405, 490, 189, 368, 304, 955, 593, 593, 368, 405, 445, 0, 445, 652, 490, 405, 539, 251, 868, 0, 368, 539, 276, 405, 189, 652, 304, 276, 539, 445, 490, 593, 445, 0, 652, 539, 539, 593, 593, 445, 276, 593, 868, 405, 276, 445, 189, 593, 490, 445, 593, 334, 276, 539, 490, 304, 652, 868, 593, 368, 652, 189, 490, 490, 189, 189, 652, 304, 539, 539, 1051, 304, 276, 717, 405, 539, 368, 405, 405, 304, 445, 490, 445, 276, 717, 593, 405, 368, 304, 593, 539, 189, 593, 405, 652, 368, 189, 539, 717, 593, 304, 304, 276, 490, 539, 490, 539, 789, 539, 189, 490, 368, 189, 368, 0, 593, 276, 368, 189, 490, 593, 0, 445, 405, 539, 539, 207, 276, 405, 652, 652, 490, 334, 593, 405, 789, 368, 304, 789, 304, 490, 276, 189, 445, 652, 334, 368, 0, 539, 189, 304, 652, 276, 717, 490, 189, 368, 368, 189, 368, 652, 539, 652, 368, 490, 490, 276, 490, 405, 593, 490, 304, 789, 445, 490, 652, 490, 405, 490, 652, 490, 445, 445, 0, 405, 490 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 14,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 32 ],
      "Objectives" : {
        "DurationInMs" : 160,
        "TotalTasksDurationInMs" : 149,
        "IOBytes" : {
          "Total" : 97544,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 83447,
            "SW" : 14097
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 689378603,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 175788,
                "rowCount" : 2313
              },
              "compileTime" : {
                "sizeInBytes" : 175788,
                "rowCount" : 2313
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "1" : {
            "sign" : 1746352297,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 985338,
                "rowCount" : 2313
              },
              "compileTime" : {
                "sizeInBytes" : 985338,
                "rowCount" : 2313
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(i_color#92) AND (i_color#92 = orchid)) AND isnotnull(i_item_sk#75)) "
          },
          "2" : {
            "sign" : 228187507,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#75, i_item_id#76, i_rec_start_date#77, i_rec_end_date#78, i_item_desc#79, i_current_price#80, i_wholesale_cost#81, i_brand_id#82, i_brand#83, i_class_id#84, i_class#85, i_category_id#86, i_category#87, i_manufact_id#88, i_manufact#89, i_size#90, i_formulation#91, i_color#92, i_units#93, i_container#94, i_manager_id#95, i_product_name#96], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n+- Filter ((isnotnull(i_color#92) AND (i_color#92 = orchid)) AND isnotnull(i_item_sk#75))\n   +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 428270949,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 175788,
            "rowCount" : 2313,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [6]: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] Condition : ((isnotnull(i_color#92) AND (i_color#92 = orchid)) AND isnotnull(i_item_sk#75)) "
          },
          "1" : {
            "sign" : 1728941999,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 175788,
            "rowCount" : 2313,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.item Output [6]: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item] PushedFilters: [IsNotNull(i_color), EqualTo(i_color,orchid), IsNotNull(i_item_sk)] ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.item",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter ((isnotnull(i_color#92) AND (i_color#92 = orchid)) AND isnotnull(i_item_sk#75))\n+- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_current_price#80,i_size#90,i_color#92,i_units#93,i_manager_id#95] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = orchid), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,orchid), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_m...\n"
      },
      "IM" : {
        "inputSizeInBytes" : 175788,
        "inputRowCount" : 2313
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 1 ],
      "Objectives" : {
        "DurationInMs" : 5995,
        "TotalTasksDurationInMs" : 22832,
        "IOBytes" : {
          "Total" : 1056291,
          "Details" : {
            "IR" : 1049201,
            "IW" : 0,
            "SR" : 0,
            "SW" : 7090
          }
        }
      }
    },
    "20" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -842263021,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 675059401424,
                "rowCount" : 42191212589
              },
              "compileTime" : {
                "sizeInBytes" : 675059401424,
                "rowCount" : 42191212589
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "1" : {
            "sign" : -859819627,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6792785226829,
                "rowCount" : 42191212589
              },
              "compileTime" : {
                "sizeInBytes" : 6792785226829,
                "rowCount" : 42191212589
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "2" : {
            "sign" : 474468585,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 10168082233949,
                "rowCount" : 42191212589
              },
              "compileTime" : {
                "sizeInBytes" : 10168082233949,
                "rowCount" : 42191212589
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n+- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n   +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n      :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n      :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n      :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n      :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n      :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n      :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n      :     :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n      :     :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n      :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n      :     :     :     :     :  +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42)))\n      :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n      :     :     :     :     :     :     +- Project [s_store_sk#46]\n      :     :     :     :     :     :        +- Project [s_store_sk#46]\n      :     :     :     :     :     :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n      :     :     :     :     :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n      :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n      :     :     :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n      :     :     :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n      :     :     :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n      :     :     :     +- Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n      :     :     :        +- Filter isnotnull(i_item_sk#75)\n      :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n      :     :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n      :     :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n      :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n      :     +- Project [sr_item_sk#27, sr_ticket_number#34L]\n      :        +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n      :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n      +- Project [ca_state#123, ca_zip#124, ca_country#125]\n         +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n            +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -20818896,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 723016576,
            "rowCount" : 3996138,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [12]: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] Arguments: 12 "
          },
          "5" : {
            "sign" : -605630449,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [3]: [ca_state#123, ca_zip#124, ca_country#125] Arguments: [upper(ca_country#125) ASC NULLS FIRST, ca_zip#124 ASC NULLS FIRST], false, 0 "
          },
          "6" : {
            "sign" : -1948919473,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [ca_state#123, ca_zip#124, ca_country#125] Arguments: 9 "
          },
          "1" : {
            "sign" : 1574595388,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 6792785226829,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [11]: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] Input [15]: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71, ca_state#123, ca_zip#124, ca_country#125] "
          },
          "0" : {
            "sign" : -226707110,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 675059401424,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [11]: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] Keys [10]: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90] Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#15))] Aggregate Attributes [1]: [sum#191L] Results [11]: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90, sum#192L] "
          },
          "2" : {
            "sign" : 551054128,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 10168082233949,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [2]: [c_birth_country#111, s_zip#71] Right keys [2]: [upper(ca_country#125), ca_zip#124] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : -435302275,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [12]: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] Arguments: [c_birth_country#111 ASC NULLS FIRST, s_zip#71 ASC NULLS FIRST], false, 0 "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "ShuffleQueryStage",
          "toId" : 5,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "SortMergeJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], functions=[partial_sum(UnscaledValue(ss_sales_price#15))], output=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90, sum#192L])\n+- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n   +- SortMergeJoin [c_birth_country#111, s_zip#71], [upper(ca_country#125), ca_zip#124], Inner\n      :- Sort [c_birth_country#111 ASC NULLS FIRST, s_zip#71 ASC NULLS FIRST], false, 0\n      :  +- ShuffleQueryStage 12\n      :     +- Exchange hashpartitioning(c_birth_country#111, s_zip#71, 200), ENSURE_REQUIREMENTS, [plan_id=2202]\n      :        +- *(15) Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n      :           +- *(15) SortMergeJoin [ss_ticket_number#11L, ss_item_sk#4], [sr_ticket_number#34L, sr_item_sk#27], Inner\n      :              :- *(13) Sort [ss_ticket_number#11L ASC NULLS FIRST, ss_item_sk#4 ASC NULLS FIRST], false, 0\n      :              :  +- AQEShuffleRead coalesced\n      :              :     +- ShuffleQueryStage 11\n      :              :        +- Exchange hashpartitioning(ss_ticket_number#11L, ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=2061]\n      :              :           +- *(12) Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n      :              :              +- *(12) BroadcastHashJoin [ss_store_sk#9], [s_store_sk#46], Inner, BuildRight, false\n      :              :                 :- *(12) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n      :              :                 :  +- *(12) SortMergeJoin [ss_item_sk#4], [i_item_sk#75], Inner\n      :              :                 :     :- *(10) Sort [ss_item_sk#4 ASC NULLS FIRST], false, 0\n      :              :                 :     :  +- AQEShuffleRead coalesced\n      :              :                 :     :     +- ShuffleQueryStage 10\n      :              :                 :     :        +- Exchange hashpartitioning(ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=1872]\n      :              :                 :     :           +- *(9) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n      :              :                 :     :              +- *(9) SortMergeJoin [ss_customer_sk#5], [c_customer_sk#97], Inner\n      :              :                 :     :                 :- *(7) Sort [ss_customer_sk#5 ASC NULLS FIRST], false, 0\n      :              :                 :     :                 :  +- AQEShuffleRead coalesced\n      :              :                 :     :                 :     +- ShuffleQueryStage 0\n      :              :                 :     :                 :        +- Exchange hashpartitioning(ss_customer_sk#5, 200), ENSURE_REQUIREMENTS, [plan_id=1434]\n      :              :                 :     :                 :           +- *(1) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n      :              :                 :     :                 :              +- *(1) Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(ReusedSubquery Subquery subquery#177, [id=#290], xxhash64(ss_store_sk#9, 42)))\n      :              :                 :     :                 :                 :  +- ReusedSubquery Subquery subquery#177, [id=#290]\n      :              :                 :     :                 :                 +- *(1) ColumnarToRow\n      :              :                 :     :                 :                    +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_sales_price#15,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_ticket_number#11L), isnotnull(ss_item_sk#4), isnotnull(ss_store_sk#9), isnotnull(ss..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_sales_price:d...\n      :              :                 :     :                 +- *(8) Sort [c_customer_sk#97 ASC NULLS FIRST], false, 0\n      :              :                 :     :                    +- AQEShuffleRead coalesced\n      :              :                 :     :                       +- ShuffleQueryStage 2\n      :              :                 :     :                          +- ReusedExchange [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111], Exchange hashpartitioning(c_customer_sk#97, 200), ENSURE_REQUIREMENTS, [plan_id=493]\n      :              :                 :     +- *(11) Sort [i_item_sk#75 ASC NULLS FIRST], false, 0\n      :              :                 :        +- AQEShuffleRead coalesced\n      :              :                 :           +- ShuffleQueryStage 3\n      :              :                 :              +- Exchange hashpartitioning(i_item_sk#75, 200), ENSURE_REQUIREMENTS, [plan_id=1476]\n      :              :                 :                 +- *(3) Filter isnotnull(i_item_sk#75)\n      :              :                 :                    +- *(3) ColumnarToRow\n      :              :                 :                       +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_current_price#80,i_size#90,i_color#92,i_units#93,i_manager_id#95] Batched: true, DataFilters: [isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_m...\n      :              :                 +- BroadcastQueryStage 5\n      :              :                    +- ReusedExchange [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=531]\n      :              +- *(14) Sort [sr_ticket_number#34L ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST], false, 0\n      :                 +- AQEShuffleRead coalesced\n      :                    +- ShuffleQueryStage 7\n      :                       +- ReusedExchange [sr_item_sk#27, sr_ticket_number#34L], Exchange hashpartitioning(sr_ticket_number#34L, sr_item_sk#27, 200), ENSURE_REQUIREMENTS, [plan_id=554]\n      +- Sort [upper(ca_country#125) ASC NULLS FIRST, ca_zip#124 ASC NULLS FIRST], false, 0\n         +- ShuffleQueryStage 9\n            +- ReusedExchange [ca_state#123, ca_zip#124, ca_country#125], Exchange hashpartitioning(upper(ca_country#125), ca_zip#124, 200), ENSURE_REQUIREMENTS, [plan_id=577]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 784057144,
        "inputRowCount" : 4950842
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "5" : [ 10353, 13780, 29539, 20176, 18341, 22193, 24413, 43249, 57565, 57565, 18341, 20176, 47574, 35743, 43249, 35743, 13780, 43249, 20176, 47574, 32493, 22193, 29539, 26854, 8556, 18341, 32493, 29539, 47574, 4390, 7778, 22193, 12527, 10353, 20176, 29539, 26854, 43249, 39317, 22193, 29539, 24413, 15158, 13780, 24413, 18341, 35743, 32493, 32493, 35743, 57565, 43249, 13780, 29539, 39317, 24413, 12527, 47574, 43249, 26854, 22193, 32493, 26854, 13780, 22193, 47574, 39317, 16674, 26854, 29539, 13780, 13780, 22193, 12527, 18341, 39317, 6428, 18341, 39317, 26854, 52331, 39317, 32493, 32493, 32493, 9412, 29539, 26854, 11388, 18341, 10353, 12527, 11388, 43249, 52331, 18341, 15158, 13780, 13780, 32493, 35743, 43249, 32493, 16674, 15158, 20176, 18341, 22193, 29539, 3628, 29539, 24413, 16674, 22193, 16674, 39317, 22193, 57565, 29539, 32493, 13780, 32493, 43249, 20176, 22193, 24413, 4830, 13780, 22193, 26854, 15158, 24413, 22193, 32493, 35743, 47574, 29539, 29539, 24413, 9412, 18341, 29539, 43249, 11388, 18341, 32493, 47574, 22193, 47574, 24413, 26854, 47574, 18341, 11388, 43249, 15158, 29539, 39317, 24413, 16674, 52331, 20176, 10353, 29539, 22193, 12527, 18341, 10353, 47574, 15158, 8556, 47574, 47574, 35743, 9412, 29539, 32493, 13780, 16674, 35743, 47574, 22193, 63321, 24413, 24413, 24413, 26854, 52331, 26854, 35743, 47574, 16674, 29539, 22193, 39317, 29539, 24413, 18341, 35743, 22193 ],
        "14" : [ 1496624, 1864989, 2515031, 1475076, 1394795, 1815402, 1939828, 1505396, 1584600, 1924318, 1863350, 1855176, 1524503, 1730570, 1676949, 2014382, 2051207, 1908255, 2178129, 2523261, 2458819, 1455671, 1591911, 1704482, 1909562, 1468149, 2062344, 1877831, 2088571, 1997406, 2022276, 1840139, 1956203, 1695724, 2006167, 2422839, 1269967, 2001713, 2344774, 1234431, 1877694, 1247841, 1770737, 1698400, 1627167, 1638860, 1667362, 2306574, 2265576, 2378588, 1497816, 2333047, 1641687, 1585230, 1758197, 2241302, 1423973, 2193039, 1557001, 2290872, 2247535, 1759446, 1919279, 2039826, 2204983, 1809187, 2152051, 1638827, 2117475, 1733145, 1930941, 1996921, 1004727, 1790796, 1434747, 2346403, 1505759, 1923985, 2421066, 2007033, 1732703, 2310572, 1805043, 2706148, 1828223, 2160767, 1509205, 1866283, 2064017, 1487454, 2188855, 1616844, 2362164, 1794384, 1983353, 1346938, 2217309, 2212207, 2600604, 2305099, 2095770, 1710045, 1291818, 1313618, 1772923, 2096654, 2049743, 2138443, 1612975, 2038672, 2426349, 1419000, 2009071, 1999045, 1840461, 1229753, 2016421, 1775639, 1608007, 2655130, 1963953, 2046578, 1457574, 1618222, 1507111, 1824934, 1583962, 2227729, 2233455, 2306150, 2200319, 1995199, 1397402, 2096685, 1628448, 1457235, 1672729, 2177043, 2018437, 1579455, 2255054, 1556165, 1433998, 2788431, 2629500, 1981360, 2151133, 2228994, 1998631, 1786031, 2138072, 1757442, 1690762, 1659907, 1657813, 2119492, 1745940, 2147671, 2979447, 2374073, 2014200, 2069206, 2549053, 1655538, 2203145, 2224130, 2318879, 1217874, 2405955, 2130207, 1820259, 1920813, 1357210, 2144473, 1785822, 1477720, 2071126, 1757865, 1739254, 2306335, 1137909, 1408227, 2273808, 1441841, 2215674, 1432594, 2175688, 1576330, 1558748, 2369045, 1802667, 2425465, 1431553, 1243364, 1821597, 1795827, 1733981, 1747993, 1447692, 1743736 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 21,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 58 ],
      "Objectives" : {
        "DurationInMs" : 5029,
        "TotalTasksDurationInMs" : 21262,
        "IOBytes" : {
          "Total" : 373386961,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 365897958,
            "SW" : 7489003
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 228187507,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#75, i_item_id#76, i_rec_start_date#77, i_rec_end_date#78, i_item_desc#79, i_current_price#80, i_wholesale_cost#81, i_brand_id#82, i_brand#83, i_class_id#84, i_class#85, i_category_id#86, i_category#87, i_manufact_id#88, i_manufact#89, i_size#90, i_formulation#91, i_color#92, i_units#93, i_container#94, i_manager_id#95, i_product_name#96], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : -487082655,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 27756,
                "rowCount" : 2313
              },
              "compileTime" : {
                "sizeInBytes" : 27756,
                "rowCount" : 2313
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#75] "
          },
          "0" : {
            "sign" : 769907909,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0) AS bloomFilter#173] "
          },
          "2" : {
            "sign" : 119981835,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 27756,
                "rowCount" : 2313
              },
              "compileTime" : {
                "sizeInBytes" : 27756,
                "rowCount" : 2313
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#75] "
          },
          "3" : {
            "sign" : 1746352297,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 985338,
                "rowCount" : 2313
              },
              "compileTime" : {
                "sizeInBytes" : 985338,
                "rowCount" : 2313
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(i_color#92) AND (i_color#92 = orchid)) AND isnotnull(i_item_sk#75)) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0) AS bloomFilter#173]\n+- Project [i_item_sk#75]\n   +- Project [i_item_sk#75]\n      +- Filter ((isnotnull(i_color#92) AND (i_color#92 = orchid)) AND isnotnull(i_item_sk#75))\n         +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 127123429,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [i_item_sk#75] Keys: [] Functions [1]: [partial_bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)] Aggregate Attributes [1]: [buf#179] Results [1]: [buf#194] "
          },
          "1" : {
            "sign" : 1430825731,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 27756,
            "rowCount" : 2313,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [i_item_sk#75] Input [2]: [i_item_sk#75, i_color#92] "
          },
          "2" : {
            "sign" : -1869201631,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 27756,
            "rowCount" : 2313,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [i_item_sk#75, i_color#92] Condition : ((isnotnull(i_color#92) AND (i_color#92 = orchid)) AND isnotnull(i_item_sk#75)) "
          },
          "3" : {
            "sign" : 107585387,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 27756,
            "rowCount" : 2313,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.item Output [2]: [i_item_sk#75, i_color#92] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item] PushedFilters: [IsNotNull(i_color), EqualTo(i_color,orchid), IsNotNull(i_item_sk)] ReadSchema: struct<i_item_sk:int,i_color:string> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.item",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[buf#194])\n+- Project [i_item_sk#75]\n   +- Filter ((isnotnull(i_color#92) AND (i_color#92 = orchid)) AND isnotnull(i_item_sk#75))\n      +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_color#92] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = orchid), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,orchid), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_color:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 27756,
        "inputRowCount" : 2313
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 6404,
        "TotalTasksDurationInMs" : 17322,
        "IOBytes" : {
          "Total" : 1815718,
          "Details" : {
            "IR" : 1815718,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "18" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 419855978,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 113837048683,
                "rowCount" : 577853039
              },
              "compileTime" : {
                "sizeInBytes" : 113837048683,
                "rowCount" : 577853039
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "1" : {
            "sign" : -1141989269,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 118459872995,
                "rowCount" : 577853039
              },
              "compileTime" : {
                "sizeInBytes" : 118459872995,
                "rowCount" : 577853039
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#46) "
          },
          "2" : {
            "sign" : 455826232,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 44237719834,
                "rowCount" : 287257921
              },
              "compileTime" : {
                "sizeInBytes" : 44237719834,
                "rowCount" : 287257921
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "3" : {
            "sign" : 1746504807,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 45386751518,
                "rowCount" : 287257921
              },
              "compileTime" : {
                "sizeInBytes" : 45386751518,
                "rowCount" : 287257921
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#4 = i_item_sk#75) "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n+- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n   :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n   :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n   :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n   :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n   :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n   :     :     :  +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42)))\n   :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n   :     :     :     :     +- Project [s_store_sk#46]\n   :     :     :     :        +- Project [s_store_sk#46]\n   :     :     :     :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n   :     :     :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n   :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n   :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n   :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n   :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n   :     +- Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n   :        +- Filter isnotnull(i_item_sk#75)\n   :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n   +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n      +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n         +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : 1110880916,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 2891,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastQueryStage Output [4]: [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] Arguments: 5 "
          },
          "4" : {
            "sign" : -1699403789,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [7]: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] Arguments: [ss_item_sk#4 ASC NULLS FIRST], false, 0 "
          },
          "5" : {
            "sign" : 556476107,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 3681052128,
            "rowCount" : 39966388,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [7]: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] Arguments: 10 "
          },
          "6" : {
            "sign" : 1466743508,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [6]: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] Arguments: [i_item_sk#75 ASC NULLS FIRST], false, 0 "
          },
          "1" : {
            "sign" : -1282220563,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 118459872995,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_store_sk#9] Right keys [1]: [s_store_sk#46] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 1158225402,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 113837048683,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [14]: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] Input [16]: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] "
          },
          "2" : {
            "sign" : 1685938034,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 44237719834,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [12]: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] Input [13]: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "7" : {
            "sign" : -1916901787,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 16488824,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [6]: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] Arguments: 3 "
          },
          "3" : {
            "sign" : -1615984983,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 45386751518,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [ss_item_sk#4] Right keys [1]: [i_item_sk#75] Join type: Inner Join condition: None "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Sort",
          "toId" : 3,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "ShuffleQueryStage",
          "toId" : 6,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Sort",
          "toId" : 3,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "SortMergeJoin",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n+- BroadcastHashJoin [ss_store_sk#9], [s_store_sk#46], Inner, BuildRight, false\n   :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n   :  +- SortMergeJoin [ss_item_sk#4], [i_item_sk#75], Inner\n   :     :- Sort [ss_item_sk#4 ASC NULLS FIRST], false, 0\n   :     :  +- ShuffleQueryStage 10\n   :     :     +- Exchange hashpartitioning(ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=1872]\n   :     :        +- *(9) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n   :     :           +- *(9) SortMergeJoin [ss_customer_sk#5], [c_customer_sk#97], Inner\n   :     :              :- *(7) Sort [ss_customer_sk#5 ASC NULLS FIRST], false, 0\n   :     :              :  +- AQEShuffleRead coalesced\n   :     :              :     +- ShuffleQueryStage 0\n   :     :              :        +- Exchange hashpartitioning(ss_customer_sk#5, 200), ENSURE_REQUIREMENTS, [plan_id=1434]\n   :     :              :           +- *(1) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n   :     :              :              +- *(1) Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(ReusedSubquery Subquery subquery#177, [id=#290], xxhash64(ss_store_sk#9, 42)))\n   :     :              :                 :  +- ReusedSubquery Subquery subquery#177, [id=#290]\n   :     :              :                 +- *(1) ColumnarToRow\n   :     :              :                    +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_sales_price#15,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_ticket_number#11L), isnotnull(ss_item_sk#4), isnotnull(ss_store_sk#9), isnotnull(ss..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_sales_price:d...\n   :     :              +- *(8) Sort [c_customer_sk#97 ASC NULLS FIRST], false, 0\n   :     :                 +- AQEShuffleRead coalesced\n   :     :                    +- ShuffleQueryStage 2\n   :     :                       +- ReusedExchange [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111], Exchange hashpartitioning(c_customer_sk#97, 200), ENSURE_REQUIREMENTS, [plan_id=493]\n   :     +- Sort [i_item_sk#75 ASC NULLS FIRST], false, 0\n   :        +- ShuffleQueryStage 3\n   :           +- Exchange hashpartitioning(i_item_sk#75, 200), ENSURE_REQUIREMENTS, [plan_id=1476]\n   :              +- *(3) Filter isnotnull(i_item_sk#75)\n   :                 +- *(3) ColumnarToRow\n   :                    +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_current_price#80,i_size#90,i_color#92,i_units#93,i_manager_id#95] Batched: true, DataFilters: [isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_m...\n   +- BroadcastQueryStage 5\n      +- ReusedExchange [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=531]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3698592656,
        "inputRowCount" : 40170435
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "11" : [ 39317, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 39317, 39317, 39317, 35743, 39317, 35743, 35743, 39317, 39317, 39317, 35743, 39317, 39317, 35743, 35743, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 35743, 39317, 39317, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 35743, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 39317, 35743, 35743, 35743, 39317, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 39317, 35743, 35743, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 35743, 39317, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 39317, 35743, 35743, 39317, 39317, 35743, 39317, 35743, 35743, 35743, 35743, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 35743, 39317, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 39317, 39317 ],
        "12" : [ 10647805, 10564791, 10730819, 10730819, 10730819, 10647805, 10730819, 9755295, 9755295, 10730819, 10730819, 10730819, 10730819, 10481777, 10730819, 10481777, 10730819, 10730819, 11164690, 10730819, 10730819, 10730819, 10647805, 10232735, 11073374, 10730819, 10730819, 10730819, 10481777, 10730819, 10730819, 10730819, 10982058, 10730819, 10730819, 10730819, 10730819, 10564791, 10315749, 10730819, 10647805, 10647805, 10647805, 10730819, 10730819, 10730819, 10730819, 10647805, 9755295, 10149721, 11712586, 10730819, 10730819, 10730819, 10647805, 10799426, 11073374, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 9755295, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 10066707, 10730819, 10730819, 10730819, 10730819, 9755295, 10730819, 10730819, 10730819, 10730819, 10481777, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 9755295, 10730819, 10730819, 10564791, 10647805, 10982058, 10315749, 10730819, 10730819, 10647805, 10730819, 10730819, 10730819, 10730819, 11529954, 9755295, 10730819, 10730819, 10730819, 9755295, 10730819, 10647805, 10730819, 10730819, 10564791, 9817665, 10730819, 10647805, 10730819, 11529954, 10730819, 10730819, 10730819, 10730819, 10481777, 10730819, 10647805, 10730819, 10730819, 10647805, 10730819, 10647805, 10730819, 10564791, 10730819, 10730819, 10730819, 10730819, 10315749, 10730819, 10730819, 10647805, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 9755295, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 9755295, 10564791, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 10398763, 10730819, 10730819, 10730819, 10982058, 10730819, 10730819, 10730819, 10730819, 9755295, 9755295, 10730819, 10730819, 10730819, 10149721, 10730819, 10481777, 11073374, 10799426, 10730819, 10730819, 10730819, 10398763, 10730819, 10481777, 10730819, 9755295, 10730819, 9983693, 10730819, 10066707, 10799426, 10822135 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 19,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 42 ],
      "Objectives" : {
        "DurationInMs" : 7768,
        "TotalTasksDurationInMs" : 98508,
        "IOBytes" : {
          "Total" : 5910382495,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 2031296738,
            "SW" : 3879085757
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -702144975,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 135108960,
                "rowCount" : 1930128
              },
              "compileTime" : {
                "sizeInBytes" : 135108960,
                "rowCount" : 1930128
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "1" : {
            "sign" : -14387779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 482532000,
                "rowCount" : 1930128
              },
              "compileTime" : {
                "sizeInBytes" : 482532000,
                "rowCount" : 1930128
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111)) "
          },
          "2" : {
            "sign" : 2021572997,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              },
              "compileTime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#97, c_customer_id#98, c_current_cdemo_sk#99, c_current_hdemo_sk#100, c_current_addr_sk#101, c_first_shipto_date_sk#102, c_first_sales_date_sk#103, c_salutation#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_day#108, c_birth_month#109, c_birth_year#110, c_birth_country#111, c_login#112, c_email_address#113, c_last_review_date#114], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n+- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n   +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1324481030,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 135108960,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] Condition : (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111)) "
          },
          "1" : {
            "sign" : 332720590,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 135108960,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer Output [4]: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer] PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_birth_country)] ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n+- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#97,c_first_name#105,c_last_name#106,c_birth_country#111] Batched: true, DataFilters: [isnotnull(c_customer_sk#97), isnotnull(c_birth_country#111)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_birth_country)], ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 135108960,
        "inputRowCount" : 1930128
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 10 ],
      "Objectives" : {
        "DurationInMs" : 11100,
        "TotalTasksDurationInMs" : 2728,
        "IOBytes" : {
          "Total" : 90138295,
          "Details" : {
            "IR" : 16870350,
            "IW" : 0,
            "SR" : 0,
            "SW" : 73267945
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -907905969,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 33160,
                "rowCount" : 5
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0) AS bloomFilter#173], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0) AS bloomFilter#173], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1545898033,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 33160,
            "rowCount" : 5,
            "isRuntime" : true,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [buf#194] Keys: [] Functions [1]: [bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)] Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)#172] Results [1]: [bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)#172 AS bloomFilter#173] "
          },
          "1" : {
            "sign" : -2115797958,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [buf#194] Arguments: 0 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[bloomFilter#173])\n+- ShuffleQueryStage 0\n   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=622]\n      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[buf#194])\n         +- *(1) Project [i_item_sk#75]\n            +- *(1) Filter ((isnotnull(i_color#92) AND (i_color#92 = orchid)) AND isnotnull(i_item_sk#75))\n               +- *(1) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_color#92] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = orchid), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,orchid), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_color:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 33160,
        "inputRowCount" : 5
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "1" : [ 7495 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 4,
        "FinishedTasksTotalTimeInMs" : 10925.0,
        "FinishedTasksDistributionInMs" : [ 2729.0, 2731.0, 2732.0, 2733.0, 2733.0 ]
      },
      "QueryStageOptimizationId" : 9,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 5 ],
      "Objectives" : {
        "DurationInMs" : 300,
        "TotalTasksDurationInMs" : 274,
        "IOBytes" : {
          "Total" : 265,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 265,
            "SW" : 0
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702226707141,
  "SQLEndTimeInMs" : 1702226805627,
  "Objectives" : {
    "DurationInMs" : 98486,
    "IOBytes" : {
      "Total" : 20262017254,
      "Details" : {
        "IR" : 5008934819,
        "IW" : 0,
        "SR" : 7840878380,
        "SW" : 7412204055
      }
    }
  }
}
