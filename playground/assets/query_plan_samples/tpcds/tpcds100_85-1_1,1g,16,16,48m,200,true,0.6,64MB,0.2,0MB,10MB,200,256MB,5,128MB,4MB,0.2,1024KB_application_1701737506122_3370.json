{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "45" : {
          "sign" : -1626641539,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2090,
          "rowCount" : 55,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [r_reason_sk#122, r_reason_desc#124] "
        },
        "34" : {
          "sign" : -686536327,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 246000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#81, ca_address_id#82, ca_street_number#83, ca_street_name#84, ca_street_type#85, ca_suite_number#86, ca_city#87, ca_county#88, ca_state#89, ca_zip#90, ca_country#91, ca_gmt_offset#92, ca_location_type#93], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "12" : {
          "sign" : 1722470266,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 357296628,
          "rowCount" : 6871089,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sales_price#20, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53] "
        },
        "8" : {
          "sign" : -113698331,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 248471568,
          "rowCount" : 6901988,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sold_date_sk#33, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53] "
        },
        "19" : {
          "sign" : -585176566,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3793668528,
          "rowCount" : 18238791,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ws_item_sk#2) AND isnotnull(ws_order_number#16L)) AND isnotnull(ws_web_page_sk#11)) AND isnotnull(ws_sold_date_sk#33)) AND ((((((ws_sales_price#20 >= 100.00) AND (ws_sales_price#20 <= 150.00)) OR ((ws_sales_price#20 >= 50.00) AND (ws_sales_price#20 <= 100.00))) OR ((ws_sales_price#20 >= 150.00) AND (ws_sales_price#20 <= 200.00))) AND ((((ws_net_profit#32 >= 100.00) AND (ws_net_profit#32 <= 200.00)) OR ((ws_net_profit#32 >= 150.00) AND (ws_net_profit#32 <= 300.00))) OR ((ws_net_profit#32 >= 50.00) AND (ws_net_profit#32 <= 250.00)))) AND dynamicpruning#156 [ws_sold_date_sk#33])) "
        },
        "23" : {
          "sign" : -10360288,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#94, d_date_id#95, d_date#96, d_month_seq#97, d_week_seq#98, d_quarter_seq#99, d_year#100, d_dow#101, d_moy#102, d_dom#103, d_qoy#104, d_fy_year#105, d_fy_quarter_seq#106, d_fy_week_seq#107, d_day_name#108, d_quarter_name#109, d_holiday#110, d_weekend#111, d_following_holiday#112, d_first_dom#113, d_last_dom#114, d_same_day_ly#115, d_same_day_lq#116, d_current_day#117, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "4" : {
          "sign" : -1023784143,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3752762670,
          "rowCount" : 69495605,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_quantity#17, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124] "
        },
        "40" : {
          "sign" : 207286900,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3973138,
          "rowCount" : 152813,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ca_address_sk#81, ca_state#89] "
        },
        "15" : {
          "sign" : -1138598693,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 7625255440,
          "rowCount" : 86650630,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((ws_item_sk#2 = wr_item_sk#35) AND (ws_order_number#16L = wr_order_number#46L)) "
        },
        "11" : {
          "sign" : 1021709106,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 628056611,
          "rowCount" : 6901721,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (((((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) AND (ws_sales_price#20 >= 100.00)) AND (ws_sales_price#20 <= 150.00)) OR ((((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary)) AND (ws_sales_price#20 >= 50.00)) AND (ws_sales_price#20 <= 100.00))) OR ((((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree)) AND (ws_sales_price#20 >= 150.00)) AND (ws_sales_price#20 <= 200.00))) AND (cd_demo_sk#72 = wr_refunded_cdemo_sk#37)) "
        },
        "9" : {
          "sign" : -1624369633,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 786826632,
          "rowCount" : 6901988,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (((cd_demo_sk#125 = wr_returning_cdemo_sk#41) AND (cd_marital_status#74 = cd_marital_status#127)) AND (cd_education_status#75 = cd_education_status#128)) "
        },
        "44" : {
          "sign" : 1805204516,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 182476000,
          "rowCount" : 1920800,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cd_demo_sk#125, cd_gender#126, cd_marital_status#127, cd_education_status#128, cd_purchase_estimate#129, cd_credit_rating#130, cd_dep_count#131, cd_dep_employed_count#132, cd_dep_college_count#133], `spark_catalog`.`tpcds_100`.`customer_demographics`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "33" : {
          "sign" : -1122109019,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 37591998,
          "rowCount" : 152813,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(ca_country#91) AND (ca_country#91 = United States)) AND isnotnull(ca_address_sk#81)) AND ((ca_state#89 IN (KY,GA,NM) OR ca_state#89 IN (MT,OR,IN)) OR ca_state#89 IN (WI,MO,WV))) "
        },
        "22" : {
          "sign" : -1221195549,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 141696,
          "rowCount" : 576,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#100) AND (d_year#100 = 1998)) AND isnotnull(d_date_sk#94)) "
        },
        "26" : {
          "sign" : 1403629598,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 281520,
          "rowCount" : 2040,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [wp_web_page_sk#58, wp_web_page_id#59, wp_rec_start_date#60, wp_rec_end_date#61, wp_creation_date_sk#62, wp_access_date_sk#63, wp_autogen_flag#64, wp_customer_sk#65, wp_url#66, wp_type#67, wp_char_count#68, wp_link_count#69, wp_image_count#70, wp_max_ad_count#71], `spark_catalog`.`tpcds_100`.`web_page`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "37" : {
          "sign" : 1777271515,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1919772,
          "rowCount" : 159981,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cd_demo_sk#72] "
        },
        "13" : {
          "sign" : 1933363776,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 563429298,
          "rowCount" : 6871089,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((ca_address_sk#81 = wr_refunded_addr_sk#39) AND ((((ca_state#89 IN (KY,GA,NM) AND (ws_net_profit#32 >= 100.00)) AND (ws_net_profit#32 <= 200.00)) OR ((ca_state#89 IN (MT,OR,IN) AND (ws_net_profit#32 >= 150.00)) AND (ws_net_profit#32 <= 300.00))) OR ((ca_state#89 IN (WI,MO,WV) AND (ws_net_profit#32 >= 50.00)) AND (ws_net_profit#32 <= 250.00)))) "
        },
        "46" : {
          "sign" : -1011173987,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3630,
          "rowCount" : 55,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(r_reason_sk#122) "
        },
        "24" : {
          "sign" : -918381214,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 24480,
          "rowCount" : 2040,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [wp_web_page_sk#58] "
        },
        "35" : {
          "sign" : 1096360584,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 108,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0) AS bloomFilter#161] "
        },
        "16" : {
          "sign" : 265901734,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3502048704,
          "rowCount" : 79592016,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_item_sk#2, ws_order_number#16L, ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33] "
        },
        "5" : {
          "sign" : 1690192337,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 4308727510,
          "rowCount" : 69495605,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#33 = d_date_sk#94) "
        },
        "10" : {
          "sign" : 1451939103,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 517629075,
          "rowCount" : 6901721,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sold_date_sk#33, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53, cd_marital_status#74, cd_education_status#75] "
        },
        "21" : {
          "sign" : -1290495956,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 6912,
          "rowCount" : 576,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#94] "
        },
        "43" : {
          "sign" : -1025825305,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 182476000,
          "rowCount" : 1920800,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(cd_demo_sk#125) AND isnotnull(cd_marital_status#127)) AND isnotnull(cd_education_status#128)) "
        },
        "32" : {
          "sign" : -1613576308,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1833756,
          "rowCount" : 152813,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ca_address_sk#81] "
        },
        "6" : {
          "sign" : -1220127466,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 572148366,
          "rowCount" : 9864627,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sold_date_sk#33, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124] "
        },
        "36" : {
          "sign" : -481361198,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1919772,
          "rowCount" : 159981,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cd_demo_sk#72] "
        },
        "1" : {
          "sign" : -1463858451,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
          "sizeInBytes" : 2860,
          "rowCount" : 55,
          "isRuntime" : false,
          "predicate" : " (unknown) LocalLimit Arguments: 100 "
        },
        "39" : {
          "sign" : 685811160,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 182476000,
          "rowCount" : 1920800,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cd_demo_sk#72, cd_gender#73, cd_marital_status#74, cd_education_status#75, cd_purchase_estimate#76, cd_credit_rating#77, cd_dep_count#78, cd_dep_employed_count#79, cd_dep_college_count#80], `spark_catalog`.`tpcds_100`.`customer_demographics`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "17" : {
          "sign" : 1946709644,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 4138784832,
          "rowCount" : 79592016,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ws_web_page_sk#11 = wp_web_page_sk#58) "
        },
        "25" : {
          "sign" : -611934932,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 281520,
          "rowCount" : 2040,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(wp_web_page_sk#58) "
        },
        "14" : {
          "sign" : 952381757,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 5545640320,
          "rowCount" : 86650630,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53] "
        },
        "47" : {
          "sign" : 1775088518,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3630,
          "rowCount" : 55,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [r_reason_sk#122, r_reason_id#123, r_reason_desc#124], `spark_catalog`.`tpcds_100`.`reason`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "31" : {
          "sign" : -532961097,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1833756,
          "rowCount" : 152813,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ca_address_sk#81] "
        },
        "42" : {
          "sign" : 799350126,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 90277600,
          "rowCount" : 1920800,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cd_demo_sk#125, cd_marital_status#127, cd_education_status#128] "
        },
        "0" : {
          "sign" : 1311616686,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
          "sizeInBytes" : 2860,
          "rowCount" : 55,
          "isRuntime" : false,
          "predicate" : " (unknown) GlobalLimit Arguments: 100 "
        },
        "20" : {
          "sign" : 1063815880,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 14972593792,
          "rowCount" : 71983624,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#0, ws_ship_date_sk#1, ws_item_sk#2, ws_bill_customer_sk#3, ws_bill_cdemo_sk#4, ws_bill_hdemo_sk#5, ws_bill_addr_sk#6, ws_ship_customer_sk#7, ws_ship_cdemo_sk#8, ws_ship_hdemo_sk#9, ws_ship_addr_sk#10, ws_web_page_sk#11, ws_web_site_sk#12, ws_ship_mode_sk#13, ws_warehouse_sk#14, ws_promo_sk#15, ws_order_number#16L, ws_quantity#17, ws_wholesale_cost#18, ws_list_price#19, ws_sales_price#20, ws_ext_discount_amt#21, ws_ext_sales_price#22, ws_ext_wholesale_cost#23, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "27" : {
          "sign" : 2050091599,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 311338404,
          "rowCount" : 5987277,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [wr_item_sk#35, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_order_number#46L, wr_fee#51, wr_refunded_cash#53] "
        },
        "2" : {
          "sign" : 576374532,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 2860,
          "rowCount" : 55,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [substr(r_reason_desc, 1, 20)#145 ASC NULLS FIRST, avg(ws_quantity)#146 ASC NULLS FIRST, avg(wr_refunded_cash)#147 ASC NULLS FIRST, avg(wr_fee)#148 ASC NULLS FIRST], true "
        },
        "38" : {
          "sign" : 1918670606,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 15198195,
          "rowCount" : 159981,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(cd_demo_sk#72) AND (isnotnull(cd_marital_status#74) AND isnotnull(cd_education_status#75))) AND ((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) OR ((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary))) OR ((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree)))) "
        },
        "18" : {
          "sign" : 2127612647,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 875461968,
          "rowCount" : 18238791,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_item_sk#2, ws_web_page_sk#11, ws_order_number#16L, ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33] "
        },
        "30" : {
          "sign" : -2067821785,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 108,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0) AS bloomFilter#158] "
        },
        "7" : {
          "sign" : 2029083942,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 651065382,
          "rowCount" : 9864627,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (r_reason_sk#122 = wr_reason_sk#45) "
        },
        "29" : {
          "sign" : -1085004784,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 1036712016,
          "rowCount" : 7199389,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [wr_returned_time_sk#34, wr_item_sk#35, wr_refunded_customer_sk#36, wr_refunded_cdemo_sk#37, wr_refunded_hdemo_sk#38, wr_refunded_addr_sk#39, wr_returning_customer_sk#40, wr_returning_cdemo_sk#41, wr_returning_hdemo_sk#42, wr_returning_addr_sk#43, wr_web_page_sk#44, wr_reason_sk#45, wr_order_number#46L, wr_return_quantity#47, wr_return_amt#48, wr_return_tax#49, wr_return_amt_inc_tax#50, wr_fee#51, wr_return_ship_cost#52, wr_refunded_cash#53, wr_reversed_charge#54, wr_account_credit#55, wr_net_loss#56, wr_returned_date_sk#57], `spark_catalog`.`tpcds_100`.`web_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "41" : {
          "sign" : 1647864276,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 7519107,
          "rowCount" : 159981,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cd_demo_sk#72, cd_marital_status#74, cd_education_status#75] "
        },
        "3" : {
          "sign" : -2141341376,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 2860,
          "rowCount" : 55,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [r_reason_desc#124], [substr(r_reason_desc#124, 1, 20) AS substr(r_reason_desc, 1, 20)#145, avg(ws_quantity#17) AS avg(ws_quantity)#146, cast((avg(UnscaledValue(wr_refunded_cash#53)) / 100.0) as decimal(11,6)) AS avg(wr_refunded_cash)#147, cast((avg(UnscaledValue(wr_fee#51)) / 100.0) as decimal(11,6)) AS avg(wr_fee)#148] "
        },
        "28" : {
          "sign" : -296734145,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 862167888,
          "rowCount" : 5987277,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((((isnotnull(wr_item_sk#35) AND isnotnull(wr_order_number#46L)) AND isnotnull(wr_refunded_cdemo_sk#37)) AND ((isnotnull(wr_returning_cdemo_sk#41) AND isnotnull(wr_refunded_addr_sk#39)) AND isnotnull(wr_reason_sk#45))) AND (might_contain(scalar-subquery#159 [], xxhash64(wr_refunded_addr_sk#39, 42)) AND might_contain(scalar-subquery#162 [], xxhash64(wr_refunded_cdemo_sk#37, 42)))) "
        }
      },
      "links" : [ {
        "fromId" : 20,
        "fromName" : "LogicalRelation",
        "toId" : 19,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "LogicalRelation",
        "toId" : 22,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "Filter",
        "toId" : 21,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Project",
        "toId" : 19,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 19,
        "fromName" : "Filter",
        "toId" : 18,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "Project",
        "toId" : 17,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "LogicalRelation",
        "toId" : 25,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "Filter",
        "toId" : 24,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "Project",
        "toId" : 17,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Join",
        "toId" : 16,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "Project",
        "toId" : 15,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 29,
        "fromName" : "LogicalRelation",
        "toId" : 28,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 34,
        "fromName" : "LogicalRelation",
        "toId" : 33,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 33,
        "fromName" : "Filter",
        "toId" : 32,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 32,
        "fromName" : "Project",
        "toId" : 31,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 31,
        "fromName" : "Project",
        "toId" : 30,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 30,
        "fromName" : "Aggregate",
        "toId" : 28,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 39,
        "fromName" : "LogicalRelation",
        "toId" : 38,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 38,
        "fromName" : "Filter",
        "toId" : 37,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 37,
        "fromName" : "Project",
        "toId" : 36,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 36,
        "fromName" : "Project",
        "toId" : 35,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 35,
        "fromName" : "Aggregate",
        "toId" : 28,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 28,
        "fromName" : "Filter",
        "toId" : 27,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "Project",
        "toId" : 15,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "Join",
        "toId" : 14,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Project",
        "toId" : 13,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 33,
        "fromName" : "Filter",
        "toId" : 40,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 40,
        "fromName" : "Project",
        "toId" : 13,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Join",
        "toId" : 12,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 12,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 38,
        "fromName" : "Filter",
        "toId" : 41,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 41,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "Join",
        "toId" : 10,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 44,
        "fromName" : "LogicalRelation",
        "toId" : 43,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 43,
        "fromName" : "Filter",
        "toId" : 42,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 42,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Join",
        "toId" : 8,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 47,
        "fromName" : "LogicalRelation",
        "toId" : 46,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 46,
        "fromName" : "Filter",
        "toId" : 45,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 45,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Join",
        "toId" : 6,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Project",
        "toId" : 5,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Project",
        "toId" : 5,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Join",
        "toId" : 4,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Project",
        "toId" : 3,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Aggregate",
        "toId" : 2,
        "toName" : "Sort",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Sort",
        "toId" : 1,
        "toName" : "LocalLimit",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "LocalLimit",
        "toId" : 0,
        "toName" : "GlobalLimit",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [substr(r_reason_desc, 1, 20)#145 ASC NULLS FIRST, avg(ws_quantity)#146 ASC NULLS FIRST, avg(wr_refunded_cash)#147 ASC NULLS FIRST, avg(wr_fee)#148 ASC NULLS FIRST], true\n      +- Aggregate [r_reason_desc#124], [substr(r_reason_desc#124, 1, 20) AS substr(r_reason_desc, 1, 20)#145, avg(ws_quantity#17) AS avg(ws_quantity)#146, cast((avg(UnscaledValue(wr_refunded_cash#53)) / 100.0) as decimal(11,6)) AS avg(wr_refunded_cash)#147, cast((avg(UnscaledValue(wr_fee#51)) / 100.0) as decimal(11,6)) AS avg(wr_fee)#148]\n         +- Project [ws_quantity#17, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124]\n            +- Join Inner, (ws_sold_date_sk#33 = d_date_sk#94)\n               :- Project [ws_quantity#17, ws_sold_date_sk#33, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124]\n               :  +- Join Inner, (r_reason_sk#122 = wr_reason_sk#45)\n               :     :- Project [ws_quantity#17, ws_sold_date_sk#33, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53]\n               :     :  +- Join Inner, (((cd_demo_sk#125 = wr_returning_cdemo_sk#41) AND (cd_marital_status#74 = cd_marital_status#127)) AND (cd_education_status#75 = cd_education_status#128))\n               :     :     :- Project [ws_quantity#17, ws_sold_date_sk#33, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53, cd_marital_status#74, cd_education_status#75]\n               :     :     :  +- Join Inner, (((((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) AND (ws_sales_price#20 >= 100.00)) AND (ws_sales_price#20 <= 150.00)) OR ((((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary)) AND (ws_sales_price#20 >= 50.00)) AND (ws_sales_price#20 <= 100.00))) OR ((((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree)) AND (ws_sales_price#20 >= 150.00)) AND (ws_sales_price#20 <= 200.00))) AND (cd_demo_sk#72 = wr_refunded_cdemo_sk#37))\n               :     :     :     :- Project [ws_quantity#17, ws_sales_price#20, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53]\n               :     :     :     :  +- Join Inner, ((ca_address_sk#81 = wr_refunded_addr_sk#39) AND ((((ca_state#89 IN (KY,GA,NM) AND (ws_net_profit#32 >= 100.00)) AND (ws_net_profit#32 <= 200.00)) OR ((ca_state#89 IN (MT,OR,IN) AND (ws_net_profit#32 >= 150.00)) AND (ws_net_profit#32 <= 300.00))) OR ((ca_state#89 IN (WI,MO,WV) AND (ws_net_profit#32 >= 50.00)) AND (ws_net_profit#32 <= 250.00))))\n               :     :     :     :     :- Project [ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53]\n               :     :     :     :     :  +- Join Inner, ((ws_item_sk#2 = wr_item_sk#35) AND (ws_order_number#16L = wr_order_number#46L))\n               :     :     :     :     :     :- Project [ws_item_sk#2, ws_order_number#16L, ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33]\n               :     :     :     :     :     :  +- Join Inner, (ws_web_page_sk#11 = wp_web_page_sk#58)\n               :     :     :     :     :     :     :- Project [ws_item_sk#2, ws_web_page_sk#11, ws_order_number#16L, ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33]\n               :     :     :     :     :     :     :  +- Filter ((((isnotnull(ws_item_sk#2) AND isnotnull(ws_order_number#16L)) AND isnotnull(ws_web_page_sk#11)) AND isnotnull(ws_sold_date_sk#33)) AND ((((((ws_sales_price#20 >= 100.00) AND (ws_sales_price#20 <= 150.00)) OR ((ws_sales_price#20 >= 50.00) AND (ws_sales_price#20 <= 100.00))) OR ((ws_sales_price#20 >= 150.00) AND (ws_sales_price#20 <= 200.00))) AND ((((ws_net_profit#32 >= 100.00) AND (ws_net_profit#32 <= 200.00)) OR ((ws_net_profit#32 >= 150.00) AND (ws_net_profit#32 <= 300.00))) OR ((ws_net_profit#32 >= 50.00) AND (ws_net_profit#32 <= 250.00)))) AND dynamicpruning#156 [ws_sold_date_sk#33]))\n               :     :     :     :     :     :     :     :  +- Project [d_date_sk#94]\n               :     :     :     :     :     :     :     :     +- Filter ((isnotnull(d_year#100) AND (d_year#100 = 1998)) AND isnotnull(d_date_sk#94))\n               :     :     :     :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#94,d_date_id#95,d_date#96,d_month_seq#97,d_week_seq#98,d_quarter_seq#99,d_year#100,d_dow#101,d_moy#102,d_dom#103,d_qoy#104,d_fy_year#105,d_fy_quarter_seq#106,d_fy_week_seq#107,d_day_name#108,d_quarter_name#109,d_holiday#110,d_weekend#111,d_following_holiday#112,d_first_dom#113,d_last_dom#114,d_same_day_ly#115,d_same_day_lq#116,d_current_day#117,... 4 more fields] parquet\n               :     :     :     :     :     :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#0,ws_ship_date_sk#1,ws_item_sk#2,ws_bill_customer_sk#3,ws_bill_cdemo_sk#4,ws_bill_hdemo_sk#5,ws_bill_addr_sk#6,ws_ship_customer_sk#7,ws_ship_cdemo_sk#8,ws_ship_hdemo_sk#9,ws_ship_addr_sk#10,ws_web_page_sk#11,ws_web_site_sk#12,ws_ship_mode_sk#13,ws_warehouse_sk#14,ws_promo_sk#15,ws_order_number#16L,ws_quantity#17,ws_wholesale_cost#18,ws_list_price#19,ws_sales_price#20,ws_ext_discount_amt#21,ws_ext_sales_price#22,ws_ext_wholesale_cost#23,... 10 more fields] parquet\n               :     :     :     :     :     :     +- Project [wp_web_page_sk#58]\n               :     :     :     :     :     :        +- Filter isnotnull(wp_web_page_sk#58)\n               :     :     :     :     :     :           +- Relation spark_catalog.tpcds_100.web_page[wp_web_page_sk#58,wp_web_page_id#59,wp_rec_start_date#60,wp_rec_end_date#61,wp_creation_date_sk#62,wp_access_date_sk#63,wp_autogen_flag#64,wp_customer_sk#65,wp_url#66,wp_type#67,wp_char_count#68,wp_link_count#69,wp_image_count#70,wp_max_ad_count#71] parquet\n               :     :     :     :     :     +- Project [wr_item_sk#35, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_order_number#46L, wr_fee#51, wr_refunded_cash#53]\n               :     :     :     :     :        +- Filter ((((isnotnull(wr_item_sk#35) AND isnotnull(wr_order_number#46L)) AND isnotnull(wr_refunded_cdemo_sk#37)) AND ((isnotnull(wr_returning_cdemo_sk#41) AND isnotnull(wr_refunded_addr_sk#39)) AND isnotnull(wr_reason_sk#45))) AND (might_contain(scalar-subquery#159 [], xxhash64(wr_refunded_addr_sk#39, 42)) AND might_contain(scalar-subquery#162 [], xxhash64(wr_refunded_cdemo_sk#37, 42))))\n               :     :     :     :     :           :  :- Aggregate [bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0) AS bloomFilter#158]\n               :     :     :     :     :           :  :  +- Project [ca_address_sk#81]\n               :     :     :     :     :           :  :     +- Project [ca_address_sk#81]\n               :     :     :     :     :           :  :        +- Filter (((isnotnull(ca_country#91) AND (ca_country#91 = United States)) AND isnotnull(ca_address_sk#81)) AND ((ca_state#89 IN (KY,GA,NM) OR ca_state#89 IN (MT,OR,IN)) OR ca_state#89 IN (WI,MO,WV)))\n               :     :     :     :     :           :  :           +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#81,ca_address_id#82,ca_street_number#83,ca_street_name#84,ca_street_type#85,ca_suite_number#86,ca_city#87,ca_county#88,ca_state#89,ca_zip#90,ca_country#91,ca_gmt_offset#92,ca_location_type#93] parquet\n               :     :     :     :     :           :  +- Aggregate [bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0) AS bloomFilter#161]\n               :     :     :     :     :           :     +- Project [cd_demo_sk#72]\n               :     :     :     :     :           :        +- Project [cd_demo_sk#72]\n               :     :     :     :     :           :           +- Filter ((isnotnull(cd_demo_sk#72) AND (isnotnull(cd_marital_status#74) AND isnotnull(cd_education_status#75))) AND ((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) OR ((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary))) OR ((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree))))\n               :     :     :     :     :           :              +- Relation spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#72,cd_gender#73,cd_marital_status#74,cd_education_status#75,cd_purchase_estimate#76,cd_credit_rating#77,cd_dep_count#78,cd_dep_employed_count#79,cd_dep_college_count#80] parquet\n               :     :     :     :     :           +- Relation spark_catalog.tpcds_100.web_returns[wr_returned_time_sk#34,wr_item_sk#35,wr_refunded_customer_sk#36,wr_refunded_cdemo_sk#37,wr_refunded_hdemo_sk#38,wr_refunded_addr_sk#39,wr_returning_customer_sk#40,wr_returning_cdemo_sk#41,wr_returning_hdemo_sk#42,wr_returning_addr_sk#43,wr_web_page_sk#44,wr_reason_sk#45,wr_order_number#46L,wr_return_quantity#47,wr_return_amt#48,wr_return_tax#49,wr_return_amt_inc_tax#50,wr_fee#51,wr_return_ship_cost#52,wr_refunded_cash#53,wr_reversed_charge#54,wr_account_credit#55,wr_net_loss#56,wr_returned_date_sk#57] parquet\n               :     :     :     :     +- Project [ca_address_sk#81, ca_state#89]\n               :     :     :     :        +- Filter (((isnotnull(ca_country#91) AND (ca_country#91 = United States)) AND isnotnull(ca_address_sk#81)) AND ((ca_state#89 IN (KY,GA,NM) OR ca_state#89 IN (MT,OR,IN)) OR ca_state#89 IN (WI,MO,WV)))\n               :     :     :     :           +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#81,ca_address_id#82,ca_street_number#83,ca_street_name#84,ca_street_type#85,ca_suite_number#86,ca_city#87,ca_county#88,ca_state#89,ca_zip#90,ca_country#91,ca_gmt_offset#92,ca_location_type#93] parquet\n               :     :     :     +- Project [cd_demo_sk#72, cd_marital_status#74, cd_education_status#75]\n               :     :     :        +- Filter ((isnotnull(cd_demo_sk#72) AND (isnotnull(cd_marital_status#74) AND isnotnull(cd_education_status#75))) AND ((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) OR ((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary))) OR ((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree))))\n               :     :     :           +- Relation spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#72,cd_gender#73,cd_marital_status#74,cd_education_status#75,cd_purchase_estimate#76,cd_credit_rating#77,cd_dep_count#78,cd_dep_employed_count#79,cd_dep_college_count#80] parquet\n               :     :     +- Project [cd_demo_sk#125, cd_marital_status#127, cd_education_status#128]\n               :     :        +- Filter ((isnotnull(cd_demo_sk#125) AND isnotnull(cd_marital_status#127)) AND isnotnull(cd_education_status#128))\n               :     :           +- Relation spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#125,cd_gender#126,cd_marital_status#127,cd_education_status#128,cd_purchase_estimate#129,cd_credit_rating#130,cd_dep_count#131,cd_dep_employed_count#132,cd_dep_college_count#133] parquet\n               :     +- Project [r_reason_sk#122, r_reason_desc#124]\n               :        +- Filter isnotnull(r_reason_sk#122)\n               :           +- Relation spark_catalog.tpcds_100.reason[r_reason_sk#122,r_reason_id#123,r_reason_desc#124] parquet\n               +- Project [d_date_sk#94]\n                  +- Filter ((isnotnull(d_year#100) AND (d_year#100 = 1998)) AND isnotnull(d_date_sk#94))\n                     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#94,d_date_id#95,d_date#96,d_month_seq#97,d_week_seq#98,d_quarter_seq#99,d_year#100,d_dow#101,d_moy#102,d_dom#103,d_qoy#104,d_fy_year#105,d_fy_quarter_seq#106,d_fy_week_seq#107,d_day_name#108,d_quarter_name#109,d_holiday#110,d_weekend#111,d_following_holiday#112,d_first_dom#113,d_last_dom#114,d_same_day_ly#115,d_same_day_lq#116,d_current_day#117,... 4 more fields] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 16638513012,
      "inputRowCount" : 84099757
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "8" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -404041803,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049016,
            "rowCount" : 55,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [r_reason_sk#122, r_reason_desc#124], BroadcastQueryStage 5 "
          },
          "8" : {
            "sign" : -962713569,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 12101040000,
            "rowCount" : 336140000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sold_date_sk#33, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53] "
          },
          "4" : {
            "sign" : 1286827316,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 323904504000000,
            "rowCount" : 6748010500000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124] "
          },
          "11" : {
            "sign" : -2078659275,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 100979200,
            "rowCount" : 1920800,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cd_demo_sk#165, cd_marital_status#167, cd_education_status#168], ShuffleQueryStage 4 "
          },
          "9" : {
            "sign" : 1630901881,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 41681360000,
            "rowCount" : 336140000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((cd_demo_sk#165 = wr_returning_cdemo_sk#41) AND (cd_marital_status#74 = cd_marital_status#167)) AND (cd_education_status#75 = cd_education_status#168)) "
          },
          "13" : {
            "sign" : 887367787,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#94], BroadcastQueryStage 6 "
          },
          "5" : {
            "sign" : 786742706,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 377888588000000,
            "rowCount" : 6748010500000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#33 = d_date_sk#94) "
          },
          "10" : {
            "sign" : -1937058508,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 15712,
            "rowCount" : 175,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_quantity#17, ws_sold_date_sk#33, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53, cd_marital_status#74, cd_education_status#75], ShuffleQueryStage 9 "
          },
          "6" : {
            "sign" : -205194860,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 961360400000,
            "rowCount" : 18487700000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sold_date_sk#33, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124] "
          },
          "1" : {
            "sign" : -910878186,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 350896546000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 1556987377,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 5200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 362670663,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 350896546000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [substr(r_reason_desc, 1, 20)#178 ASC NULLS FIRST, avg(ws_quantity)#179 ASC NULLS FIRST, avg(wr_refunded_cash)#180 ASC NULLS FIRST, avg(wr_fee)#181 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 269731610,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1109262000000,
            "rowCount" : 18487700000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (r_reason_sk#122 = wr_reason_sk#45) "
          },
          "3" : {
            "sign" : 1138787267,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 350896546000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [r_reason_desc#124], [substr(r_reason_desc#124, 1, 20) AS substr(r_reason_desc, 1, 20)#178, avg(ws_quantity#17) AS avg(ws_quantity)#179, cast((avg(UnscaledValue(wr_refunded_cash#53)) / 100.0) as decimal(11,6)) AS avg(wr_refunded_cash)#180, cast((avg(UnscaledValue(wr_fee#51)) / 100.0) as decimal(11,6)) AS avg(wr_fee)#181] "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [substr(r_reason_desc, 1, 20)#178 ASC NULLS FIRST, avg(ws_quantity)#179 ASC NULLS FIRST, avg(wr_refunded_cash)#180 ASC NULLS FIRST, avg(wr_fee)#181 ASC NULLS FIRST], true\n      +- Aggregate [r_reason_desc#124], [substr(r_reason_desc#124, 1, 20) AS substr(r_reason_desc, 1, 20)#178, avg(ws_quantity#17) AS avg(ws_quantity)#179, cast((avg(UnscaledValue(wr_refunded_cash#53)) / 100.0) as decimal(11,6)) AS avg(wr_refunded_cash)#180, cast((avg(UnscaledValue(wr_fee#51)) / 100.0) as decimal(11,6)) AS avg(wr_fee)#181]\n         +- Project [ws_quantity#17, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124]\n            +- Join Inner, (ws_sold_date_sk#33 = d_date_sk#94)\n               :- Project [ws_quantity#17, ws_sold_date_sk#33, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124]\n               :  +- Join Inner, (r_reason_sk#122 = wr_reason_sk#45)\n               :     :- Project [ws_quantity#17, ws_sold_date_sk#33, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53]\n               :     :  +- Join Inner, (((cd_demo_sk#165 = wr_returning_cdemo_sk#41) AND (cd_marital_status#74 = cd_marital_status#167)) AND (cd_education_status#75 = cd_education_status#168))\n               :     :     :- LogicalQueryStage Project [ws_quantity#17, ws_sold_date_sk#33, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53, cd_marital_status#74, cd_education_status#75], ShuffleQueryStage 9\n               :     :     +- LogicalQueryStage Project [cd_demo_sk#165, cd_marital_status#167, cd_education_status#168], ShuffleQueryStage 4\n               :     +- LogicalQueryStage Project [r_reason_sk#122, r_reason_desc#124], BroadcastQueryStage 5\n               +- LogicalQueryStage Project [d_date_sk#94], BroadcastQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 103095424,
        "inputRowCount" : 1921395
      },
      "PD" : {
        "5" : [ 276, 0, 117, 0, 0, 0, 129, 0, 0, 0, 0, 129, 117, 251, 0, 0, 129, 0, 129, 129, 129, 0, 189, 129, 0, 117, 129, 117, 0, 129, 171, 129, 129, 129, 117, 129, 189, 304, 117, 0, 117, 0, 129, 129, 0, 276, 117, 0, 0, 0, 171, 129, 129, 0, 129, 129, 0, 129, 129, 0, 0, 0, 0, 207, 304, 171, 207, 129, 117, 171, 0, 129, 0, 0, 0, 117, 207, 117, 0, 0, 129, 0, 0, 207, 117, 171, 0, 129, 171, 129, 0, 117, 0, 171, 0, 0, 129, 129, 0, 0, 207, 0, 117, 129, 171, 171, 0, 129, 0, 0, 129, 171, 0, 0, 0, 0, 171, 129, 207, 129, 0, 129, 0, 117, 207, 117, 129, 129, 189, 117, 0, 129, 0, 171, 0, 0, 129, 171, 0, 129, 129, 251, 129, 189, 0, 0, 0, 0, 0, 129, 0, 0, 251, 207, 207, 129, 0, 171, 117, 0, 117, 171, 117, 0, 0, 117, 129, 0, 0, 129, 171, 0, 0, 0, 0, 171, 171, 0, 117, 129, 117, 276, 117, 0, 171, 0, 117, 0, 129, 171, 171, 0, 117, 117, 0, 0, 129, 0, 0, 0 ],

      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227461972,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 5332,
        "IOBytes" : {
          "Total" : 27831285,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 27826114,
            "SW" : 5171
          }
        }
      }
    },
    "4" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 259561546,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1007071645191040,
            "rowCount" : 19366762407520,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sales_price#20, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53] "
          },
          "8" : {
            "sign" : -1903278789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 220483974943313188208640000,
            "rowCount" : 6124554859536477450240000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sold_date_sk#33, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53] "
          },
          "19" : {
            "sign" : -1636019467,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 25165824,
            "rowCount" : 164640,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cd_demo_sk#72, cd_marital_status#74, cd_education_status#75], BroadcastQueryStage 3 "
          },
          "4" : {
            "sign" : 330496326,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 5901621062649349671051264000000,
            "rowCount" : 122950438805194784813568000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124] "
          },
          "15" : {
            "sign" : -568354674,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 7625255440,
            "rowCount" : 86650630,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ws_item_sk#2 = wr_item_sk#35) AND (ws_order_number#16L = wr_order_number#46L)) "
          },
          "11" : {
            "sign" : 849778119,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 306100201226312908800,
            "rowCount" : 3188543762774092800,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) AND (ws_sales_price#20 >= 100.00)) AND (ws_sales_price#20 <= 150.00)) OR ((((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary)) AND (ws_sales_price#20 >= 50.00)) AND (ws_sales_price#20 <= 100.00))) OR ((((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree)) AND (ws_sales_price#20 >= 150.00)) AND (ws_sales_price#20 <= 200.00))) AND (cd_demo_sk#72 = wr_refunded_cdemo_sk#37)) "
          },
          "9" : {
            "sign" : -325439543,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 759444802582523203829760000,
            "rowCount" : 6124554859536477450240000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((cd_demo_sk#165 = wr_returning_cdemo_sk#41) AND (cd_marital_status#74 = cd_marital_status#167)) AND (cd_education_status#75 = cd_education_status#168)) "
          },
          "22" : {
            "sign" : 887367787,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#94], BroadcastQueryStage 6 "
          },
          "13" : {
            "sign" : -957879584,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1704275091861760,
            "rowCount" : 19366762407520,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ca_address_sk#81 = wr_refunded_addr_sk#39) AND ((((ca_state#89 IN (KY,GA,NM) AND (ws_net_profit#32 >= 100.00)) AND (ws_net_profit#32 <= 200.00)) OR ((ca_state#89 IN (MT,OR,IN) AND (ws_net_profit#32 >= 150.00)) AND (ws_net_profit#32 <= 300.00))) OR ((ca_state#89 IN (WI,MO,WV) AND (ws_net_profit#32 >= 50.00)) AND (ws_net_profit#32 <= 250.00)))) "
          },
          "16" : {
            "sign" : 573380113,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3502048704,
            "rowCount" : 79592016,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_item_sk#2, ws_order_number#16L, ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33], ShuffleQueryStage 7 "
          },
          "5" : {
            "sign" : 1827183734,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 6885224573090907949559808000000,
            "rowCount" : 122950438805194784813568000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#33 = d_date_sk#94) "
          },
          "10" : {
            "sign" : -931136886,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 255083501021927424000,
            "rowCount" : 3188543762774092800,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sold_date_sk#33, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53, cd_marital_status#74, cd_education_status#75] "
          },
          "21" : {
            "sign" : -404041803,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049016,
            "rowCount" : 55,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [r_reason_sk#122, r_reason_desc#124], BroadcastQueryStage 5 "
          },
          "6" : {
            "sign" : 1934664726,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 17516226898274325507686400000,
            "rowCount" : 336850517274506259763200000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sold_date_sk#33, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124] "
          },
          "1" : {
            "sign" : -1474464166,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 6393422817870128810305536000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : 669685893,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 311338404,
            "rowCount" : 5987277,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [wr_item_sk#35, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_order_number#46L, wr_fee#51, wr_refunded_cash#53], ShuffleQueryStage 1 "
          },
          "14" : {
            "sign" : 618881386,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 5545640320,
            "rowCount" : 86650630,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53] "
          },
          "0" : {
            "sign" : 1770026153,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 5200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -2078659275,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 100979200,
            "rowCount" : 1920800,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cd_demo_sk#165, cd_marital_status#167, cd_education_status#168], ShuffleQueryStage 4 "
          },
          "2" : {
            "sign" : -200931693,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 6393422817870128810305536000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [substr(r_reason_desc, 1, 20)#178 ASC NULLS FIRST, avg(ws_quantity)#179 ASC NULLS FIRST, avg(wr_refunded_cash)#180 ASC NULLS FIRST, avg(wr_fee)#181 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 839713181,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 24777048,
            "rowCount" : 223504,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#81, ca_state#89], BroadcastQueryStage 2 "
          },
          "7" : {
            "sign" : 1646508272,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 20211031036470375585792000000,
            "rowCount" : 336850517274506259763200000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (r_reason_sk#122 = wr_reason_sk#45) "
          },
          "3" : {
            "sign" : -1660973881,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 6393422817870128810305536000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [r_reason_desc#124], [substr(r_reason_desc#124, 1, 20) AS substr(r_reason_desc, 1, 20)#178, avg(ws_quantity#17) AS avg(ws_quantity)#179, cast((avg(UnscaledValue(wr_refunded_cash#53)) / 100.0) as decimal(11,6)) AS avg(wr_refunded_cash)#180, cast((avg(UnscaledValue(wr_fee#51)) / 100.0) as decimal(11,6)) AS avg(wr_fee)#181] "
          }
        },
        "links" : [ {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [substr(r_reason_desc, 1, 20)#178 ASC NULLS FIRST, avg(ws_quantity)#179 ASC NULLS FIRST, avg(wr_refunded_cash)#180 ASC NULLS FIRST, avg(wr_fee)#181 ASC NULLS FIRST], true\n      +- Aggregate [r_reason_desc#124], [substr(r_reason_desc#124, 1, 20) AS substr(r_reason_desc, 1, 20)#178, avg(ws_quantity#17) AS avg(ws_quantity)#179, cast((avg(UnscaledValue(wr_refunded_cash#53)) / 100.0) as decimal(11,6)) AS avg(wr_refunded_cash)#180, cast((avg(UnscaledValue(wr_fee#51)) / 100.0) as decimal(11,6)) AS avg(wr_fee)#181]\n         +- Project [ws_quantity#17, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124]\n            +- Join Inner, (ws_sold_date_sk#33 = d_date_sk#94)\n               :- Project [ws_quantity#17, ws_sold_date_sk#33, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124]\n               :  +- Join Inner, (r_reason_sk#122 = wr_reason_sk#45)\n               :     :- Project [ws_quantity#17, ws_sold_date_sk#33, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53]\n               :     :  +- Join Inner, (((cd_demo_sk#165 = wr_returning_cdemo_sk#41) AND (cd_marital_status#74 = cd_marital_status#167)) AND (cd_education_status#75 = cd_education_status#168))\n               :     :     :- Project [ws_quantity#17, ws_sold_date_sk#33, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53, cd_marital_status#74, cd_education_status#75]\n               :     :     :  +- Join Inner, (((((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) AND (ws_sales_price#20 >= 100.00)) AND (ws_sales_price#20 <= 150.00)) OR ((((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary)) AND (ws_sales_price#20 >= 50.00)) AND (ws_sales_price#20 <= 100.00))) OR ((((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree)) AND (ws_sales_price#20 >= 150.00)) AND (ws_sales_price#20 <= 200.00))) AND (cd_demo_sk#72 = wr_refunded_cdemo_sk#37))\n               :     :     :     :- Project [ws_quantity#17, ws_sales_price#20, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53]\n               :     :     :     :  +- Join Inner, ((ca_address_sk#81 = wr_refunded_addr_sk#39) AND ((((ca_state#89 IN (KY,GA,NM) AND (ws_net_profit#32 >= 100.00)) AND (ws_net_profit#32 <= 200.00)) OR ((ca_state#89 IN (MT,OR,IN) AND (ws_net_profit#32 >= 150.00)) AND (ws_net_profit#32 <= 300.00))) OR ((ca_state#89 IN (WI,MO,WV) AND (ws_net_profit#32 >= 50.00)) AND (ws_net_profit#32 <= 250.00))))\n               :     :     :     :     :- Project [ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53]\n               :     :     :     :     :  +- Join Inner, ((ws_item_sk#2 = wr_item_sk#35) AND (ws_order_number#16L = wr_order_number#46L))\n               :     :     :     :     :     :- LogicalQueryStage Project [ws_item_sk#2, ws_order_number#16L, ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33], ShuffleQueryStage 7\n               :     :     :     :     :     +- LogicalQueryStage Project [wr_item_sk#35, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_order_number#46L, wr_fee#51, wr_refunded_cash#53], ShuffleQueryStage 1\n               :     :     :     :     +- LogicalQueryStage Project [ca_address_sk#81, ca_state#89], BroadcastQueryStage 2\n               :     :     :     +- LogicalQueryStage Project [cd_demo_sk#72, cd_marital_status#74, cd_education_status#75], BroadcastQueryStage 3\n               :     :     +- LogicalQueryStage Project [cd_demo_sk#165, cd_marital_status#167, cd_education_status#168], ShuffleQueryStage 4\n               :     +- LogicalQueryStage Project [r_reason_sk#122, r_reason_desc#124], BroadcastQueryStage 5\n               +- LogicalQueryStage Project [d_date_sk#94], BroadcastQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3966409692,
        "inputRowCount" : 87888657
      },
      "PD" : {

      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 69,
        "FinishedTasksTotalTimeInMs" : 72737.0,
        "FinishedTasksDistributionInMs" : [ 165.0, 475.0, 545.0, 643.0, 5495.0 ]
      },
      "StartTimeInMs" : 1702227451238,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 16066,
        "IOBytes" : {
          "Total" : 526954013,
          "Details" : {
            "IR" : 457220879,
            "IW" : 0,
            "SR" : 48768551,
            "SW" : 20964583
          }
        }
      }
    },
    "9" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -404041803,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049016,
            "rowCount" : 55,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [r_reason_sk#122, r_reason_desc#124], BroadcastQueryStage 5 "
          },
          "8" : {
            "sign" : 1048853794,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 12101040000,
            "rowCount" : 336140000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sold_date_sk#33, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53] "
          },
          "4" : {
            "sign" : 1530216695,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 323904504000000,
            "rowCount" : 6748010500000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124] "
          },
          "11" : {
            "sign" : -2078659275,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 100979200,
            "rowCount" : 1920800,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cd_demo_sk#165, cd_marital_status#167, cd_education_status#168], ShuffleQueryStage 4 "
          },
          "9" : {
            "sign" : 612282838,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 41681360000,
            "rowCount" : 336140000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((cd_demo_sk#165 = wr_returning_cdemo_sk#41) AND (cd_marital_status#74 = cd_marital_status#167)) AND (cd_education_status#75 = cd_education_status#168)) "
          },
          "13" : {
            "sign" : 887367787,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#94], BroadcastQueryStage 6 "
          },
          "5" : {
            "sign" : 1556808463,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 377888588000000,
            "rowCount" : 6748010500000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#33 = d_date_sk#94) "
          },
          "10" : {
            "sign" : -1536540553,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 33562624,
            "rowCount" : 175,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Project [ws_quantity#17, ws_sold_date_sk#33, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53, cd_marital_status#74, cd_education_status#75], ShuffleQueryStage 9, BroadcastQueryStage 10 "
          },
          "6" : {
            "sign" : -684180521,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 961360400000,
            "rowCount" : 18487700000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sold_date_sk#33, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124] "
          },
          "1" : {
            "sign" : -773539853,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 350896546000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 1761669108,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 5200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -345543798,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 350896546000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [substr(r_reason_desc, 1, 20)#178 ASC NULLS FIRST, avg(ws_quantity)#179 ASC NULLS FIRST, avg(wr_refunded_cash)#180 ASC NULLS FIRST, avg(wr_fee)#181 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 1266206621,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1109262000000,
            "rowCount" : 18487700000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (r_reason_sk#122 = wr_reason_sk#45) "
          },
          "3" : {
            "sign" : 40093344,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 350896546000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [r_reason_desc#124], [substr(r_reason_desc#124, 1, 20) AS substr(r_reason_desc, 1, 20)#178, avg(ws_quantity#17) AS avg(ws_quantity)#179, cast((avg(UnscaledValue(wr_refunded_cash#53)) / 100.0) as decimal(11,6)) AS avg(wr_refunded_cash)#180, cast((avg(UnscaledValue(wr_fee#51)) / 100.0) as decimal(11,6)) AS avg(wr_fee)#181] "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [substr(r_reason_desc, 1, 20)#178 ASC NULLS FIRST, avg(ws_quantity)#179 ASC NULLS FIRST, avg(wr_refunded_cash)#180 ASC NULLS FIRST, avg(wr_fee)#181 ASC NULLS FIRST], true\n      +- Aggregate [r_reason_desc#124], [substr(r_reason_desc#124, 1, 20) AS substr(r_reason_desc, 1, 20)#178, avg(ws_quantity#17) AS avg(ws_quantity)#179, cast((avg(UnscaledValue(wr_refunded_cash#53)) / 100.0) as decimal(11,6)) AS avg(wr_refunded_cash)#180, cast((avg(UnscaledValue(wr_fee#51)) / 100.0) as decimal(11,6)) AS avg(wr_fee)#181]\n         +- Project [ws_quantity#17, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124]\n            +- Join Inner, (ws_sold_date_sk#33 = d_date_sk#94)\n               :- Project [ws_quantity#17, ws_sold_date_sk#33, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124]\n               :  +- Join Inner, (r_reason_sk#122 = wr_reason_sk#45)\n               :     :- Project [ws_quantity#17, ws_sold_date_sk#33, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53]\n               :     :  +- Join Inner, (((cd_demo_sk#165 = wr_returning_cdemo_sk#41) AND (cd_marital_status#74 = cd_marital_status#167)) AND (cd_education_status#75 = cd_education_status#168))\n               :     :     :- LogicalQueryStage LogicalQueryStage Project [ws_quantity#17, ws_sold_date_sk#33, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53, cd_marital_status#74, cd_education_status#75], ShuffleQueryStage 9, BroadcastQueryStage 10\n               :     :     +- LogicalQueryStage Project [cd_demo_sk#165, cd_marital_status#167, cd_education_status#168], ShuffleQueryStage 4\n               :     +- LogicalQueryStage Project [r_reason_sk#122, r_reason_desc#124], BroadcastQueryStage 5\n               +- LogicalQueryStage Project [d_date_sk#94], BroadcastQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 136642336,
        "inputRowCount" : 1921395
      },
      "PD" : {

      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227462061,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 5243,
        "IOBytes" : {
          "Total" : 27814310,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 27809139,
            "SW" : 5171
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 259561546,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 123845531196357175296,
            "rowCount" : 2381644830699176448,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sales_price#20, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53] "
          },
          "8" : {
            "sign" : -1903278789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 27114212903848591604179009536000,
            "rowCount" : 753172580662460877893861376000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sold_date_sk#33, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53] "
          },
          "19" : {
            "sign" : -1636019467,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 25165824,
            "rowCount" : 164640,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cd_demo_sk#72, cd_marital_status#74, cd_education_status#75], BroadcastQueryStage 3 "
          },
          "4" : {
            "sign" : 330496326,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 725757098726347301938524821913600000,
            "rowCount" : 15119939556798902123719267123200000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124] "
          },
          "15" : {
            "sign" : -568354674,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 937722569177856,
            "rowCount" : 10655938286112,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ws_item_sk#2 = wr_item_sk#35) AND (ws_order_number#16L = wr_order_number#46L)) "
          },
          "11" : {
            "sign" : 849778119,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 37642944472925991398277120,
            "rowCount" : 392114004926312410398720,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) AND (ws_sales_price#20 >= 100.00)) AND (ws_sales_price#20 <= 150.00)) OR ((((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary)) AND (ws_sales_price#20 >= 50.00)) AND (ws_sales_price#20 <= 100.00))) OR ((((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree)) AND (ws_sales_price#20 >= 150.00)) AND (ws_sales_price#20 <= 200.00))) AND (cd_demo_sk#72 = wr_refunded_cdemo_sk#37)) "
          },
          "9" : {
            "sign" : -325439543,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 93393400002145148858838810624000,
            "rowCount" : 753172580662460877893861376000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((cd_demo_sk#165 = wr_returning_cdemo_sk#41) AND (cd_marital_status#74 = cd_marital_status#167)) AND (cd_education_status#75 = cd_education_status#168)) "
          },
          "22" : {
            "sign" : 887367787,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#94], BroadcastQueryStage 6 "
          },
          "13" : {
            "sign" : -957879584,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 209584745101527527424,
            "rowCount" : 2381644830699176448,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ca_address_sk#81 = wr_refunded_addr_sk#39) AND ((((ca_state#89 IN (KY,GA,NM) AND (ws_net_profit#32 >= 100.00)) AND (ws_net_profit#32 <= 200.00)) OR ((ca_state#89 IN (MT,OR,IN) AND (ws_net_profit#32 >= 150.00)) AND (ws_net_profit#32 <= 300.00))) OR ((ca_state#89 IN (WI,MO,WV) AND (ws_net_profit#32 >= 50.00)) AND (ws_net_profit#32 <= 250.00)))) "
          },
          "16" : {
            "sign" : 573380113,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3502048704,
            "rowCount" : 79592016,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_item_sk#2, ws_order_number#16L, ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33], ShuffleQueryStage 7 "
          },
          "5" : {
            "sign" : 1827183734,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 846716615180738518928278958899200000,
            "rowCount" : 15119939556798902123719267123200000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#33 = d_date_sk#94) "
          },
          "10" : {
            "sign" : -931136886,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 31369120394104992831897600,
            "rowCount" : 392114004926312410398720,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sold_date_sk#33, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53, cd_marital_status#74, cd_education_status#75] "
          },
          "21" : {
            "sign" : -404041803,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049016,
            "rowCount" : 55,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [r_reason_sk#122, r_reason_desc#124], BroadcastQueryStage 5 "
          },
          "6" : {
            "sign" : 1934664726,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2154073580694638110776443535360000,
            "rowCount" : 41424491936435348284162375680000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sold_date_sk#33, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124] "
          },
          "1" : {
            "sign" : -1474464166,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 786236856953542910433401890406400000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : 669685893,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 9639504,
            "rowCount" : 133882,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [wr_item_sk#35, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_order_number#46L, wr_fee#51, wr_refunded_cash#53], ShuffleQueryStage 1 "
          },
          "14" : {
            "sign" : 618881386,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 681980050311168,
            "rowCount" : 10655938286112,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53] "
          },
          "0" : {
            "sign" : 1770026153,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 5200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -2078659275,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 100979200,
            "rowCount" : 1920800,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cd_demo_sk#165, cd_marital_status#167, cd_education_status#168], ShuffleQueryStage 4 "
          },
          "2" : {
            "sign" : -200931693,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 786236856953542910433401890406400000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [substr(r_reason_desc, 1, 20)#178 ASC NULLS FIRST, avg(ws_quantity)#179 ASC NULLS FIRST, avg(wr_refunded_cash)#180 ASC NULLS FIRST, avg(wr_fee)#181 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 839713181,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 24777048,
            "rowCount" : 223504,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#81, ca_state#89], BroadcastQueryStage 2 "
          },
          "7" : {
            "sign" : 1646508272,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2485469516186120897049742540800000,
            "rowCount" : 41424491936435348284162375680000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (r_reason_sk#122 = wr_reason_sk#45) "
          },
          "3" : {
            "sign" : -1660973881,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 786236856953542910433401890406400000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [r_reason_desc#124], [substr(r_reason_desc#124, 1, 20) AS substr(r_reason_desc, 1, 20)#178, avg(ws_quantity#17) AS avg(ws_quantity)#179, cast((avg(UnscaledValue(wr_refunded_cash#53)) / 100.0) as decimal(11,6)) AS avg(wr_refunded_cash)#180, cast((avg(UnscaledValue(wr_fee#51)) / 100.0) as decimal(11,6)) AS avg(wr_fee)#181] "
          }
        },
        "links" : [ {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [substr(r_reason_desc, 1, 20)#178 ASC NULLS FIRST, avg(ws_quantity)#179 ASC NULLS FIRST, avg(wr_refunded_cash)#180 ASC NULLS FIRST, avg(wr_fee)#181 ASC NULLS FIRST], true\n      +- Aggregate [r_reason_desc#124], [substr(r_reason_desc#124, 1, 20) AS substr(r_reason_desc, 1, 20)#178, avg(ws_quantity#17) AS avg(ws_quantity)#179, cast((avg(UnscaledValue(wr_refunded_cash#53)) / 100.0) as decimal(11,6)) AS avg(wr_refunded_cash)#180, cast((avg(UnscaledValue(wr_fee#51)) / 100.0) as decimal(11,6)) AS avg(wr_fee)#181]\n         +- Project [ws_quantity#17, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124]\n            +- Join Inner, (ws_sold_date_sk#33 = d_date_sk#94)\n               :- Project [ws_quantity#17, ws_sold_date_sk#33, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124]\n               :  +- Join Inner, (r_reason_sk#122 = wr_reason_sk#45)\n               :     :- Project [ws_quantity#17, ws_sold_date_sk#33, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53]\n               :     :  +- Join Inner, (((cd_demo_sk#165 = wr_returning_cdemo_sk#41) AND (cd_marital_status#74 = cd_marital_status#167)) AND (cd_education_status#75 = cd_education_status#168))\n               :     :     :- Project [ws_quantity#17, ws_sold_date_sk#33, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53, cd_marital_status#74, cd_education_status#75]\n               :     :     :  +- Join Inner, (((((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) AND (ws_sales_price#20 >= 100.00)) AND (ws_sales_price#20 <= 150.00)) OR ((((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary)) AND (ws_sales_price#20 >= 50.00)) AND (ws_sales_price#20 <= 100.00))) OR ((((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree)) AND (ws_sales_price#20 >= 150.00)) AND (ws_sales_price#20 <= 200.00))) AND (cd_demo_sk#72 = wr_refunded_cdemo_sk#37))\n               :     :     :     :- Project [ws_quantity#17, ws_sales_price#20, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53]\n               :     :     :     :  +- Join Inner, ((ca_address_sk#81 = wr_refunded_addr_sk#39) AND ((((ca_state#89 IN (KY,GA,NM) AND (ws_net_profit#32 >= 100.00)) AND (ws_net_profit#32 <= 200.00)) OR ((ca_state#89 IN (MT,OR,IN) AND (ws_net_profit#32 >= 150.00)) AND (ws_net_profit#32 <= 300.00))) OR ((ca_state#89 IN (WI,MO,WV) AND (ws_net_profit#32 >= 50.00)) AND (ws_net_profit#32 <= 250.00))))\n               :     :     :     :     :- Project [ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53]\n               :     :     :     :     :  +- Join Inner, ((ws_item_sk#2 = wr_item_sk#35) AND (ws_order_number#16L = wr_order_number#46L))\n               :     :     :     :     :     :- LogicalQueryStage Project [ws_item_sk#2, ws_order_number#16L, ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33], ShuffleQueryStage 7\n               :     :     :     :     :     +- LogicalQueryStage Project [wr_item_sk#35, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_order_number#46L, wr_fee#51, wr_refunded_cash#53], ShuffleQueryStage 1\n               :     :     :     :     +- LogicalQueryStage Project [ca_address_sk#81, ca_state#89], BroadcastQueryStage 2\n               :     :     :     +- LogicalQueryStage Project [cd_demo_sk#72, cd_marital_status#74, cd_education_status#75], BroadcastQueryStage 3\n               :     :     +- LogicalQueryStage Project [cd_demo_sk#165, cd_marital_status#167, cd_education_status#168], ShuffleQueryStage 4\n               :     +- LogicalQueryStage Project [r_reason_sk#122, r_reason_desc#124], BroadcastQueryStage 5\n               +- LogicalQueryStage Project [d_date_sk#94], BroadcastQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3664710792,
        "inputRowCount" : 82035262
      },
      "PD" : {
        "2" : [ 36382, 36284, 35783, 33690, 36267, 35504, 36354, 34908, 38675, 37137, 35251, 36005, 34288, 34661, 36727, 35878, 35804, 36198, 34521, 35819, 37437, 34704, 34831, 35931, 34944, 34233, 34445, 34689, 35080, 38286, 35565, 33315, 35220, 34872, 34491, 36193, 32707, 37522, 35645, 34918, 36747, 37940, 34055, 36322, 35098, 37328, 35970, 32756, 35221, 37275, 35707, 33048, 34645, 35770, 35432, 34681, 35356, 35164, 33223, 35514, 37223, 35373, 36538, 35289, 34892, 36998, 35344, 35794, 34745, 34873, 33842, 35339, 34160, 37261, 35767, 36437, 36159, 36262, 36031, 36802, 37324, 33992, 37598, 37320, 34056, 37323, 34769, 35923, 34077, 34789, 36276, 36267, 36093, 33934, 35484, 33990, 35146, 33596, 34364, 34415, 34366, 35944, 36432, 34047, 37286, 35634, 35376, 36715, 36849, 36958, 35864, 36778, 35273, 34506, 37625, 36447, 36254, 34803, 34242, 36363, 36711, 34897, 35915, 35803, 34406, 35130, 35705, 35519, 35796, 36039, 32815, 35977, 34738, 35617, 35233, 35737, 34520, 34593, 34706, 33601, 35555, 34944, 34035, 34739, 37023, 36314, 36436, 34660, 36368, 34064, 36649, 36775, 36144, 33466, 36803, 35533, 33981, 36225, 34002, 36284, 37557, 36638, 35787, 34989, 35251, 35095, 35467, 37405, 37218, 36487, 35997, 36072, 35730, 34249, 36696, 35541, 34484, 36344, 36558, 35685, 33197, 35609, 33547, 34795, 36515, 36015, 34547, 34359, 35924, 34421, 34918, 37015, 35753, 35458, 35121, 35798, 35802, 38134, 36890, 32807 ],

      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 2,
        "FinishedTasksNum" : 17,
        "FinishedTasksTotalTimeInMs" : 14886.0,
        "FinishedTasksDistributionInMs" : [ 451.0, 573.0, 958.0, 1005.0, 2030.0 ]
      },
      "StartTimeInMs" : 1702227453478,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 13826,
        "IOBytes" : {
          "Total" : 286335856,
          "Details" : {
            "IR" : 223351062,
            "IW" : 0,
            "SR" : 48768551,
            "SW" : 14216243
          }
        }
      }
    },
    "10" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : 1935385473,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 2704,
            "rowCount" : 52,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "1" : {
            "sign" : 1722465262,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 4344,
            "rowCount" : 52,
            "isRuntime" : true,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1999776215,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 4344,
            "rowCount" : 52,
            "isRuntime" : true,
            "predicate" : " (unknown) Sort Arguments: [substr(r_reason_desc, 1, 20)#178 ASC NULLS FIRST, avg(ws_quantity)#179 ASC NULLS FIRST, avg(wr_refunded_cash)#180 ASC NULLS FIRST, avg(wr_fee)#181 ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : 953707931,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 4344,
            "rowCount" : 52,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [r_reason_desc#124], [substr(r_reason_desc#124, 1, 20) AS substr(r_reason_desc, 1, 20)#178, avg(ws_quantity#17) AS avg(ws_quantity)#179, cast((avg(UnscaledValue(wr_refunded_cash#53)) / 100.0) as decimal(11,6)) AS avg(wr_refunded_cash)#180, cast((avg(UnscaledValue(wr_fee#51)) / 100.0) as decimal(11,6)) AS avg(wr_fee)#181], HashAggregate(keys=[r_reason_desc#124], functions=[avg(ws_quantity#17), avg(UnscaledValue(wr_refunded_cash#53)), avg(UnscaledValue(wr_fee#51))]) "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [substr(r_reason_desc, 1, 20)#178 ASC NULLS FIRST, avg(ws_quantity)#179 ASC NULLS FIRST, avg(wr_refunded_cash)#180 ASC NULLS FIRST, avg(wr_fee)#181 ASC NULLS FIRST], true\n      +- LogicalQueryStage Aggregate [r_reason_desc#124], [substr(r_reason_desc#124, 1, 20) AS substr(r_reason_desc, 1, 20)#178, avg(ws_quantity#17) AS avg(ws_quantity)#179, cast((avg(UnscaledValue(wr_refunded_cash#53)) / 100.0) as decimal(11,6)) AS avg(wr_refunded_cash)#180, cast((avg(UnscaledValue(wr_fee#51)) / 100.0) as decimal(11,6)) AS avg(wr_fee)#181], HashAggregate(keys=[r_reason_desc#124], functions=[avg(ws_quantity#17), avg(UnscaledValue(wr_refunded_cash#53)), avg(UnscaledValue(wr_fee#51))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 4344,
        "inputRowCount" : 52
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227466691,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 613,
        "IOBytes" : {
          "Total" : 5171,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 5171,
            "SW" : 0
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 861883868,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 123845531196357175296,
            "rowCount" : 2381644830699176448,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sales_price#20, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53] "
          },
          "8" : {
            "sign" : -1553034105,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 27114212903848591604179009536000,
            "rowCount" : 753172580662460877893861376000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sold_date_sk#33, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53] "
          },
          "19" : {
            "sign" : -1636019467,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 25165824,
            "rowCount" : 164640,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cd_demo_sk#72, cd_marital_status#74, cd_education_status#75], BroadcastQueryStage 3 "
          },
          "4" : {
            "sign" : -340654736,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 725757098726347301938524821913600000,
            "rowCount" : 15119939556798902123719267123200000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124] "
          },
          "15" : {
            "sign" : -1255678102,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 937722569177856,
            "rowCount" : 10655938286112,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ws_item_sk#2 = wr_item_sk#35) AND (ws_order_number#16L = wr_order_number#46L)) "
          },
          "11" : {
            "sign" : -1569703991,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 37642944472925991398277120,
            "rowCount" : 392114004926312410398720,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) AND (ws_sales_price#20 >= 100.00)) AND (ws_sales_price#20 <= 150.00)) OR ((((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary)) AND (ws_sales_price#20 >= 50.00)) AND (ws_sales_price#20 <= 100.00))) OR ((((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree)) AND (ws_sales_price#20 >= 150.00)) AND (ws_sales_price#20 <= 200.00))) AND (cd_demo_sk#72 = wr_refunded_cdemo_sk#37)) "
          },
          "9" : {
            "sign" : 1140056341,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 93393400002145148858838810624000,
            "rowCount" : 753172580662460877893861376000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((cd_demo_sk#165 = wr_returning_cdemo_sk#41) AND (cd_marital_status#74 = cd_marital_status#167)) AND (cd_education_status#75 = cd_education_status#168)) "
          },
          "22" : {
            "sign" : 887367787,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#94], BroadcastQueryStage 6 "
          },
          "13" : {
            "sign" : 865475382,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 209584745101527527424,
            "rowCount" : 2381644830699176448,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ca_address_sk#81 = wr_refunded_addr_sk#39) AND ((((ca_state#89 IN (KY,GA,NM) AND (ws_net_profit#32 >= 100.00)) AND (ws_net_profit#32 <= 200.00)) OR ((ca_state#89 IN (MT,OR,IN) AND (ws_net_profit#32 >= 150.00)) AND (ws_net_profit#32 <= 300.00))) OR ((ca_state#89 IN (WI,MO,WV) AND (ws_net_profit#32 >= 50.00)) AND (ws_net_profit#32 <= 250.00)))) "
          },
          "16" : {
            "sign" : 573380113,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3502048704,
            "rowCount" : 79592016,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_item_sk#2, ws_order_number#16L, ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33], ShuffleQueryStage 7 "
          },
          "5" : {
            "sign" : -858891592,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 846716615180738518928278958899200000,
            "rowCount" : 15119939556798902123719267123200000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#33 = d_date_sk#94) "
          },
          "10" : {
            "sign" : -596809134,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 31369120394104992831897600,
            "rowCount" : 392114004926312410398720,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sold_date_sk#33, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53, cd_marital_status#74, cd_education_status#75] "
          },
          "21" : {
            "sign" : -404041803,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049016,
            "rowCount" : 55,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [r_reason_sk#122, r_reason_desc#124], BroadcastQueryStage 5 "
          },
          "6" : {
            "sign" : 1478135238,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2154073580694638110776443535360000,
            "rowCount" : 41424491936435348284162375680000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sold_date_sk#33, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124] "
          },
          "1" : {
            "sign" : 1324091220,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 786236856953542910433401890406400000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : 1764622675,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 41943040,
            "rowCount" : 133882,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Project [wr_item_sk#35, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_order_number#46L, wr_fee#51, wr_refunded_cash#53], ShuffleQueryStage 1, BroadcastQueryStage 8 "
          },
          "14" : {
            "sign" : 306101774,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 681980050311168,
            "rowCount" : 10655938286112,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53] "
          },
          "0" : {
            "sign" : -1124469907,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 5200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -2078659275,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 100979200,
            "rowCount" : 1920800,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cd_demo_sk#165, cd_marital_status#167, cd_education_status#168], ShuffleQueryStage 4 "
          },
          "2" : {
            "sign" : 85193155,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 786236856953542910433401890406400000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [substr(r_reason_desc, 1, 20)#178 ASC NULLS FIRST, avg(ws_quantity)#179 ASC NULLS FIRST, avg(wr_refunded_cash)#180 ASC NULLS FIRST, avg(wr_fee)#181 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 839713181,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 24777048,
            "rowCount" : 223504,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#81, ca_state#89], BroadcastQueryStage 2 "
          },
          "7" : {
            "sign" : 656038972,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2485469516186120897049742540800000,
            "rowCount" : 41424491936435348284162375680000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (r_reason_sk#122 = wr_reason_sk#45) "
          },
          "3" : {
            "sign" : 1848747143,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 786236856953542910433401890406400000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [r_reason_desc#124], [substr(r_reason_desc#124, 1, 20) AS substr(r_reason_desc, 1, 20)#178, avg(ws_quantity#17) AS avg(ws_quantity)#179, cast((avg(UnscaledValue(wr_refunded_cash#53)) / 100.0) as decimal(11,6)) AS avg(wr_refunded_cash)#180, cast((avg(UnscaledValue(wr_fee#51)) / 100.0) as decimal(11,6)) AS avg(wr_fee)#181] "
          }
        },
        "links" : [ {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [substr(r_reason_desc, 1, 20)#178 ASC NULLS FIRST, avg(ws_quantity)#179 ASC NULLS FIRST, avg(wr_refunded_cash)#180 ASC NULLS FIRST, avg(wr_fee)#181 ASC NULLS FIRST], true\n      +- Aggregate [r_reason_desc#124], [substr(r_reason_desc#124, 1, 20) AS substr(r_reason_desc, 1, 20)#178, avg(ws_quantity#17) AS avg(ws_quantity)#179, cast((avg(UnscaledValue(wr_refunded_cash#53)) / 100.0) as decimal(11,6)) AS avg(wr_refunded_cash)#180, cast((avg(UnscaledValue(wr_fee#51)) / 100.0) as decimal(11,6)) AS avg(wr_fee)#181]\n         +- Project [ws_quantity#17, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124]\n            +- Join Inner, (ws_sold_date_sk#33 = d_date_sk#94)\n               :- Project [ws_quantity#17, ws_sold_date_sk#33, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124]\n               :  +- Join Inner, (r_reason_sk#122 = wr_reason_sk#45)\n               :     :- Project [ws_quantity#17, ws_sold_date_sk#33, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53]\n               :     :  +- Join Inner, (((cd_demo_sk#165 = wr_returning_cdemo_sk#41) AND (cd_marital_status#74 = cd_marital_status#167)) AND (cd_education_status#75 = cd_education_status#168))\n               :     :     :- Project [ws_quantity#17, ws_sold_date_sk#33, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53, cd_marital_status#74, cd_education_status#75]\n               :     :     :  +- Join Inner, (((((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) AND (ws_sales_price#20 >= 100.00)) AND (ws_sales_price#20 <= 150.00)) OR ((((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary)) AND (ws_sales_price#20 >= 50.00)) AND (ws_sales_price#20 <= 100.00))) OR ((((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree)) AND (ws_sales_price#20 >= 150.00)) AND (ws_sales_price#20 <= 200.00))) AND (cd_demo_sk#72 = wr_refunded_cdemo_sk#37))\n               :     :     :     :- Project [ws_quantity#17, ws_sales_price#20, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53]\n               :     :     :     :  +- Join Inner, ((ca_address_sk#81 = wr_refunded_addr_sk#39) AND ((((ca_state#89 IN (KY,GA,NM) AND (ws_net_profit#32 >= 100.00)) AND (ws_net_profit#32 <= 200.00)) OR ((ca_state#89 IN (MT,OR,IN) AND (ws_net_profit#32 >= 150.00)) AND (ws_net_profit#32 <= 300.00))) OR ((ca_state#89 IN (WI,MO,WV) AND (ws_net_profit#32 >= 50.00)) AND (ws_net_profit#32 <= 250.00))))\n               :     :     :     :     :- Project [ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53]\n               :     :     :     :     :  +- Join Inner, ((ws_item_sk#2 = wr_item_sk#35) AND (ws_order_number#16L = wr_order_number#46L))\n               :     :     :     :     :     :- LogicalQueryStage Project [ws_item_sk#2, ws_order_number#16L, ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33], ShuffleQueryStage 7\n               :     :     :     :     :     +- LogicalQueryStage LogicalQueryStage Project [wr_item_sk#35, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_order_number#46L, wr_fee#51, wr_refunded_cash#53], ShuffleQueryStage 1, BroadcastQueryStage 8\n               :     :     :     :     +- LogicalQueryStage Project [ca_address_sk#81, ca_state#89], BroadcastQueryStage 2\n               :     :     :     +- LogicalQueryStage Project [cd_demo_sk#72, cd_marital_status#74, cd_education_status#75], BroadcastQueryStage 3\n               :     :     +- LogicalQueryStage Project [cd_demo_sk#165, cd_marital_status#167, cd_education_status#168], ShuffleQueryStage 4\n               :     +- LogicalQueryStage Project [r_reason_sk#122, r_reason_desc#124], BroadcastQueryStage 5\n               +- LogicalQueryStage Project [d_date_sk#94], BroadcastQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3697014328,
        "inputRowCount" : 82035262
      },
      "PD" : {

      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 2,
        "FinishedTasksNum" : 17,
        "FinishedTasksTotalTimeInMs" : 14886.0,
        "FinishedTasksDistributionInMs" : [ 451.0, 573.0, 958.0, 1005.0, 2030.0 ]
      },
      "StartTimeInMs" : 1702227453933,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 13371,
        "IOBytes" : {
          "Total" : 279587516,
          "Details" : {
            "IR" : 223351062,
            "IW" : 0,
            "SR" : 42020211,
            "SW" : 14216243
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : 1354891507,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1346240,
            "rowCount" : 5,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0) AS bloomFilter#191], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0) AS bloomFilter#191], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1346240,
        "inputRowCount" : 5
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 1,
        "FinishedTasksTotalTimeInMs" : 1453.0,
        "FinishedTasksDistributionInMs" : [ 1453.0, 1453.0, 1453.0, 1453.0, 1453.0 ]
      },
      "StartTimeInMs" : 1702227441989,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 25315,
        "IOBytes" : {
          "Total" : 571135310,
          "Details" : {
            "IR" : 472759976,
            "IW" : 0,
            "SR" : 49325172,
            "SW" : 49050162
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -777122116,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 559936,
            "rowCount" : 2,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0) AS bloomFilter#194], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0) AS bloomFilter#194], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 559936,
        "inputRowCount" : 2
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227442132,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 25172,
        "IOBytes" : {
          "Total" : 563084076,
          "Details" : {
            "IR" : 464990353,
            "IW" : 0,
            "SR" : 49325172,
            "SW" : 48768551
          }
        }
      }
    },
    "7" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 861883868,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 787962210221769856,
            "rowCount" : 15153119427341728,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sales_price#20, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53] "
          },
          "8" : {
            "sign" : -1553034105,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 172513088859589015020650496000,
            "rowCount" : 4792030246099694861684736000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sold_date_sk#33, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53] "
          },
          "19" : {
            "sign" : -1636019467,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 25165824,
            "rowCount" : 164640,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cd_demo_sk#72, cd_marital_status#74, cd_education_status#75], BroadcastQueryStage 3 "
          },
          "4" : {
            "sign" : -340654736,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4617600345141665968719411609600000,
            "rowCount" : 96200007190451374348321075200000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124] "
          },
          "15" : {
            "sign" : -1255678102,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 5966222124016,
            "rowCount" : 67797978682,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ws_item_sk#2 = wr_item_sk#35) AND (ws_order_number#16L = wr_order_number#46L)) "
          },
          "11" : {
            "sign" : -1569703991,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 239501719921684041400320,
            "rowCount" : 2494809582517542097920,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) AND (ws_sales_price#20 >= 100.00)) AND (ws_sales_price#20 <= 150.00)) OR ((((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary)) AND (ws_sales_price#20 >= 50.00)) AND (ws_sales_price#20 <= 100.00))) OR ((((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree)) AND (ws_sales_price#20 >= 150.00)) AND (ws_sales_price#20 <= 200.00))) AND (cd_demo_sk#72 = wr_refunded_cdemo_sk#37)) "
          },
          "9" : {
            "sign" : 1140056341,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 594211750516362162848907264000,
            "rowCount" : 4792030246099694861684736000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((cd_demo_sk#165 = wr_returning_cdemo_sk#41) AND (cd_marital_status#74 = cd_marital_status#167)) AND (cd_education_status#75 = cd_education_status#168)) "
          },
          "22" : {
            "sign" : 887367787,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#94], BroadcastQueryStage 6 "
          },
          "13" : {
            "sign" : 865475382,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1333474509606072064,
            "rowCount" : 15153119427341728,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ca_address_sk#81 = wr_refunded_addr_sk#39) AND ((((ca_state#89 IN (KY,GA,NM) AND (ws_net_profit#32 >= 100.00)) AND (ws_net_profit#32 <= 200.00)) OR ((ca_state#89 IN (MT,OR,IN) AND (ws_net_profit#32 >= 150.00)) AND (ws_net_profit#32 <= 300.00))) OR ((ca_state#89 IN (WI,MO,WV) AND (ws_net_profit#32 >= 50.00)) AND (ws_net_profit#32 <= 250.00)))) "
          },
          "16" : {
            "sign" : 573380113,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 28358456,
            "rowCount" : 506401,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_item_sk#2, ws_order_number#16L, ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33], ShuffleQueryStage 7 "
          },
          "5" : {
            "sign" : -858891592,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 5387200402665276963505980211200000,
            "rowCount" : 96200007190451374348321075200000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#33 = d_date_sk#94) "
          },
          "10" : {
            "sign" : -596809134,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 199584766601403367833600,
            "rowCount" : 2494809582517542097920,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sold_date_sk#33, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53, cd_marital_status#74, cd_education_status#75] "
          },
          "21" : {
            "sign" : -404041803,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049016,
            "rowCount" : 55,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [r_reason_sk#122, r_reason_desc#124], BroadcastQueryStage 5 "
          },
          "6" : {
            "sign" : 1478135238,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 13705206503845127304418344960000,
            "rowCount" : 263561663535483217392660480000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sold_date_sk#33, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124] "
          },
          "1" : {
            "sign" : 1324091220,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 5002400373903471466112695910400000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : 1764622675,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 41943040,
            "rowCount" : 133882,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Project [wr_item_sk#35, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_order_number#46L, wr_fee#51, wr_refunded_cash#53], ShuffleQueryStage 1, BroadcastQueryStage 8 "
          },
          "14" : {
            "sign" : 306101774,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4339070635648,
            "rowCount" : 67797978682,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53] "
          },
          "0" : {
            "sign" : -1124469907,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 5200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -2078659275,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 100979200,
            "rowCount" : 1920800,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cd_demo_sk#165, cd_marital_status#167, cd_education_status#168], ShuffleQueryStage 4 "
          },
          "2" : {
            "sign" : 85193155,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 5002400373903471466112695910400000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [substr(r_reason_desc, 1, 20)#178 ASC NULLS FIRST, avg(ws_quantity)#179 ASC NULLS FIRST, avg(wr_refunded_cash)#180 ASC NULLS FIRST, avg(wr_fee)#181 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 839713181,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 24777048,
            "rowCount" : 223504,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#81, ca_state#89], BroadcastQueryStage 2 "
          },
          "7" : {
            "sign" : 656038972,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 15813699812128993043559628800000,
            "rowCount" : 263561663535483217392660480000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (r_reason_sk#122 = wr_reason_sk#45) "
          },
          "3" : {
            "sign" : 1848747143,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 5002400373903471466112695910400000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [r_reason_desc#124], [substr(r_reason_desc#124, 1, 20) AS substr(r_reason_desc, 1, 20)#178, avg(ws_quantity#17) AS avg(ws_quantity)#179, cast((avg(UnscaledValue(wr_refunded_cash#53)) / 100.0) as decimal(11,6)) AS avg(wr_refunded_cash)#180, cast((avg(UnscaledValue(wr_fee#51)) / 100.0) as decimal(11,6)) AS avg(wr_fee)#181] "
          }
        },
        "links" : [ {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [substr(r_reason_desc, 1, 20)#178 ASC NULLS FIRST, avg(ws_quantity)#179 ASC NULLS FIRST, avg(wr_refunded_cash)#180 ASC NULLS FIRST, avg(wr_fee)#181 ASC NULLS FIRST], true\n      +- Aggregate [r_reason_desc#124], [substr(r_reason_desc#124, 1, 20) AS substr(r_reason_desc, 1, 20)#178, avg(ws_quantity#17) AS avg(ws_quantity)#179, cast((avg(UnscaledValue(wr_refunded_cash#53)) / 100.0) as decimal(11,6)) AS avg(wr_refunded_cash)#180, cast((avg(UnscaledValue(wr_fee#51)) / 100.0) as decimal(11,6)) AS avg(wr_fee)#181]\n         +- Project [ws_quantity#17, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124]\n            +- Join Inner, (ws_sold_date_sk#33 = d_date_sk#94)\n               :- Project [ws_quantity#17, ws_sold_date_sk#33, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124]\n               :  +- Join Inner, (r_reason_sk#122 = wr_reason_sk#45)\n               :     :- Project [ws_quantity#17, ws_sold_date_sk#33, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53]\n               :     :  +- Join Inner, (((cd_demo_sk#165 = wr_returning_cdemo_sk#41) AND (cd_marital_status#74 = cd_marital_status#167)) AND (cd_education_status#75 = cd_education_status#168))\n               :     :     :- Project [ws_quantity#17, ws_sold_date_sk#33, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53, cd_marital_status#74, cd_education_status#75]\n               :     :     :  +- Join Inner, (((((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) AND (ws_sales_price#20 >= 100.00)) AND (ws_sales_price#20 <= 150.00)) OR ((((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary)) AND (ws_sales_price#20 >= 50.00)) AND (ws_sales_price#20 <= 100.00))) OR ((((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree)) AND (ws_sales_price#20 >= 150.00)) AND (ws_sales_price#20 <= 200.00))) AND (cd_demo_sk#72 = wr_refunded_cdemo_sk#37))\n               :     :     :     :- Project [ws_quantity#17, ws_sales_price#20, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53]\n               :     :     :     :  +- Join Inner, ((ca_address_sk#81 = wr_refunded_addr_sk#39) AND ((((ca_state#89 IN (KY,GA,NM) AND (ws_net_profit#32 >= 100.00)) AND (ws_net_profit#32 <= 200.00)) OR ((ca_state#89 IN (MT,OR,IN) AND (ws_net_profit#32 >= 150.00)) AND (ws_net_profit#32 <= 300.00))) OR ((ca_state#89 IN (WI,MO,WV) AND (ws_net_profit#32 >= 50.00)) AND (ws_net_profit#32 <= 250.00))))\n               :     :     :     :     :- Project [ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53]\n               :     :     :     :     :  +- Join Inner, ((ws_item_sk#2 = wr_item_sk#35) AND (ws_order_number#16L = wr_order_number#46L))\n               :     :     :     :     :     :- LogicalQueryStage Project [ws_item_sk#2, ws_order_number#16L, ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33], ShuffleQueryStage 7\n               :     :     :     :     :     +- LogicalQueryStage LogicalQueryStage Project [wr_item_sk#35, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_order_number#46L, wr_fee#51, wr_refunded_cash#53], ShuffleQueryStage 1, BroadcastQueryStage 8\n               :     :     :     :     +- LogicalQueryStage Project [ca_address_sk#81, ca_state#89], BroadcastQueryStage 2\n               :     :     :     +- LogicalQueryStage Project [cd_demo_sk#72, cd_marital_status#74, cd_education_status#75], BroadcastQueryStage 3\n               :     :     +- LogicalQueryStage Project [cd_demo_sk#165, cd_marital_status#167, cd_education_status#168], ShuffleQueryStage 4\n               :     +- LogicalQueryStage Project [r_reason_sk#122, r_reason_desc#124], BroadcastQueryStage 5\n               +- LogicalQueryStage Project [d_date_sk#94], BroadcastQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 223324080,
        "inputRowCount" : 2949647
      },
      "PD" : {
        "4" : [ 72525, 75414, 73404, 75649, 76416, 73416, 71833, 74833, 73576, 75103, 76336, 73750, 75045, 73793, 75271, 75779, 74333, 78286, 74403, 74608, 74057, 76607, 73429, 74184, 75029, 75861, 76200, 71942, 75220, 77816, 74437, 76405, 76480, 72150, 73556, 77591, 74283, 74723, 75332, 74404, 74794, 76086, 74095, 74352, 75834, 71552, 71699, 73572, 74704, 73598, 73411, 77457, 73737, 74581, 71500, 73677, 77987, 71081, 72623, 72931, 76457, 73100, 71914, 74796, 73506, 77356, 75337, 72037, 74014, 74784, 75867, 74077, 75666, 75664, 75456, 74053, 76321, 74603, 73141, 75819, 76002, 74086, 73924, 71506, 73766, 72099, 72563, 73317, 75983, 76070, 77196, 74914, 73587, 75008, 73476, 73375, 76253, 75341, 73780, 73802, 75418, 77828, 73819, 75466, 76591, 74092, 75132, 76367, 76288, 73315, 74819, 72549, 73115, 73048, 73901, 74007, 75329, 76555, 75427, 76075, 74364, 76349, 76394, 75894, 76831, 72690, 74935, 73622, 75733, 76239, 71065, 73321, 76503, 74386, 72669, 70817, 74489, 74404, 73873, 73895, 74291, 73654, 73246, 76160, 72255, 73374, 72784, 73297, 72503, 75494, 73994, 75241, 73864, 71995, 74760, 74494, 74365, 75422, 74979, 72808, 76032, 74812, 71863, 74466, 74293, 71803, 75763, 76249, 73480, 74515, 71459, 73678, 75291, 73816, 74182, 73432, 76249, 74523, 74141, 76134, 73213, 75009, 71786, 73221, 74623, 74679, 75136, 74892, 74866, 73396, 73158, 74339, 74217, 74807, 75522, 75400, 75272, 75656, 74441, 76035 ],

      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227460019,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 7285,
        "IOBytes" : {
          "Total" : 42042357,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 42020211,
            "SW" : 22146
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1458902839,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1007071645191040,
            "rowCount" : 19366762407520,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sales_price#20, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53] "
          },
          "8" : {
            "sign" : -1895073642,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 248471568,
            "rowCount" : 6901988,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sold_date_sk#33, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53] "
          },
          "19" : {
            "sign" : -859525718,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3793668528,
            "rowCount" : 18238791,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ws_item_sk#2) AND isnotnull(ws_order_number#16L)) AND isnotnull(ws_web_page_sk#11)) AND isnotnull(ws_sold_date_sk#33)) AND ((((((ws_sales_price#20 >= 100.00) AND (ws_sales_price#20 <= 150.00)) OR ((ws_sales_price#20 >= 50.00) AND (ws_sales_price#20 <= 100.00))) OR ((ws_sales_price#20 >= 150.00) AND (ws_sales_price#20 <= 200.00))) AND ((((ws_net_profit#32 >= 100.00) AND (ws_net_profit#32 <= 200.00)) OR ((ws_net_profit#32 >= 150.00) AND (ws_net_profit#32 <= 300.00))) OR ((ws_net_profit#32 >= 50.00) AND (ws_net_profit#32 <= 250.00)))) AND dynamicpruning#189 [ws_sold_date_sk#33])) "
          },
          "23" : {
            "sign" : -10360288,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#94, d_date_id#95, d_date#96, d_month_seq#97, d_week_seq#98, d_quarter_seq#99, d_year#100, d_dow#101, d_moy#102, d_dom#103, d_qoy#104, d_fy_year#105, d_fy_quarter_seq#106, d_fy_week_seq#107, d_day_name#108, d_quarter_name#109, d_holiday#110, d_weekend#111, d_following_holiday#112, d_first_dom#113, d_last_dom#114, d_same_day_ly#115, d_same_day_lq#116, d_current_day#117, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "4" : {
            "sign" : -1430368439,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6650755636800,
            "rowCount" : 138557409100,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124] "
          },
          "15" : {
            "sign" : -1821195291,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 7625255440,
            "rowCount" : 86650630,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ws_item_sk#2 = wr_item_sk#35) AND (ws_order_number#16L = wr_order_number#46L)) "
          },
          "11" : {
            "sign" : 326208966,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 306100201226312908800,
            "rowCount" : 3188543762774092800,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) AND (ws_sales_price#20 >= 100.00)) AND (ws_sales_price#20 <= 150.00)) OR ((((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary)) AND (ws_sales_price#20 >= 50.00)) AND (ws_sales_price#20 <= 100.00))) OR ((((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree)) AND (ws_sales_price#20 >= 150.00)) AND (ws_sales_price#20 <= 200.00))) AND (cd_demo_sk#72 = wr_refunded_cdemo_sk#37)) "
          },
          "9" : {
            "sign" : 200616246,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 821336572,
            "rowCount" : 6901988,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((cd_demo_sk#165 = wr_returning_cdemo_sk#41) AND (cd_marital_status#74 = cd_marital_status#167)) AND (cd_education_status#75 = cd_education_status#168)) "
          },
          "22" : {
            "sign" : -1221195549,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 141696,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#100) AND (d_year#100 = 1998)) AND isnotnull(d_date_sk#94)) "
          },
          "26" : {
            "sign" : 839713181,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 24777048,
            "rowCount" : 223504,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#81, ca_state#89], BroadcastQueryStage 2 "
          },
          "13" : {
            "sign" : -2043255829,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1704275091861760,
            "rowCount" : 19366762407520,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ca_address_sk#81 = wr_refunded_addr_sk#39) AND ((((ca_state#89 IN (KY,GA,NM) AND (ws_net_profit#32 >= 100.00)) AND (ws_net_profit#32 <= 200.00)) OR ((ca_state#89 IN (MT,OR,IN) AND (ws_net_profit#32 >= 150.00)) AND (ws_net_profit#32 <= 300.00))) OR ((ca_state#89 IN (WI,MO,WV) AND (ws_net_profit#32 >= 50.00)) AND (ws_net_profit#32 <= 250.00)))) "
          },
          "24" : {
            "sign" : -1525880328,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1064896,
            "rowCount" : 2040,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [wp_web_page_sk#58], BroadcastQueryStage 0 "
          },
          "16" : {
            "sign" : -802076644,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1637113880160,
            "rowCount" : 37207133640,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#2, ws_order_number#16L, ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33] "
          },
          "5" : {
            "sign" : 449110651,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 7759214909600,
            "rowCount" : 138557409100,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#33 = d_date_sk#94) "
          },
          "10" : {
            "sign" : 833281713,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 255083501021927424000,
            "rowCount" : 3188543762774092800,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sold_date_sk#33, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53, cd_marital_status#74, cd_education_status#75] "
          },
          "21" : {
            "sign" : -1290495956,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6912,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#94] "
          },
          "6" : {
            "sign" : 860586789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 19739685680,
            "rowCount" : 379609340,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sold_date_sk#33, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124] "
          },
          "1" : {
            "sign" : -829641761,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 7204985273200,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -2010630498,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1934770949280,
            "rowCount" : 37207133640,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_web_page_sk#11 = wp_web_page_sk#58) "
          },
          "25" : {
            "sign" : 669685893,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 311338404,
            "rowCount" : 5987277,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [wr_item_sk#35, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_order_number#46L, wr_fee#51, wr_refunded_cash#53], ShuffleQueryStage 1 "
          },
          "14" : {
            "sign" : -863459351,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 5545640320,
            "rowCount" : 86650630,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53] "
          },
          "0" : {
            "sign" : -1443636244,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 5200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 1063815880,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#0, ws_ship_date_sk#1, ws_item_sk#2, ws_bill_customer_sk#3, ws_bill_cdemo_sk#4, ws_bill_hdemo_sk#5, ws_bill_addr_sk#6, ws_ship_customer_sk#7, ws_ship_cdemo_sk#8, ws_ship_hdemo_sk#9, ws_ship_addr_sk#10, ws_web_page_sk#11, ws_web_site_sk#12, ws_ship_mode_sk#13, ws_warehouse_sk#14, ws_promo_sk#15, ws_order_number#16L, ws_quantity#17, ws_wholesale_cost#18, ws_list_price#19, ws_sales_price#20, ws_ext_discount_amt#21, ws_ext_sales_price#22, ws_ext_wholesale_cost#23, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "27" : {
            "sign" : -1636019467,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 25165824,
            "rowCount" : 164640,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cd_demo_sk#72, cd_marital_status#74, cd_education_status#75], BroadcastQueryStage 3 "
          },
          "2" : {
            "sign" : 1787638678,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 7204985273200,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [substr(r_reason_desc, 1, 20)#178 ASC NULLS FIRST, avg(ws_quantity)#179 ASC NULLS FIRST, avg(wr_refunded_cash)#180 ASC NULLS FIRST, avg(wr_fee)#181 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : -20046201,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 875461968,
            "rowCount" : 18238791,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#2, ws_web_page_sk#11, ws_order_number#16L, ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33] "
          },
          "30" : {
            "sign" : 887367787,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#94], BroadcastQueryStage 6 "
          },
          "7" : {
            "sign" : -1174109481,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 22776560400,
            "rowCount" : 379609340,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (r_reason_sk#122 = wr_reason_sk#45) "
          },
          "29" : {
            "sign" : -404041803,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049016,
            "rowCount" : 55,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [r_reason_sk#122, r_reason_desc#124], BroadcastQueryStage 5 "
          },
          "3" : {
            "sign" : 1265088588,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 7204985273200,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [r_reason_desc#124], [substr(r_reason_desc#124, 1, 20) AS substr(r_reason_desc, 1, 20)#178, avg(ws_quantity#17) AS avg(ws_quantity)#179, cast((avg(UnscaledValue(wr_refunded_cash#53)) / 100.0) as decimal(11,6)) AS avg(wr_refunded_cash)#180, cast((avg(UnscaledValue(wr_fee#51)) / 100.0) as decimal(11,6)) AS avg(wr_fee)#181] "
          },
          "28" : {
            "sign" : -2078659275,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 90277600,
            "rowCount" : 1920800,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cd_demo_sk#165, cd_marital_status#167, cd_education_status#168], ShuffleQueryStage 4 "
          }
        },
        "links" : [ {
          "fromId" : 20,
          "fromName" : "LogicalRelation",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "LogicalRelation",
          "toId" : 22,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Filter",
          "toId" : 21,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Project",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 19,
          "fromName" : "Filter",
          "toId" : 18,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Project",
          "toId" : 17,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalQueryStage",
          "toId" : 17,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Join",
          "toId" : 16,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [substr(r_reason_desc, 1, 20)#178 ASC NULLS FIRST, avg(ws_quantity)#179 ASC NULLS FIRST, avg(wr_refunded_cash)#180 ASC NULLS FIRST, avg(wr_fee)#181 ASC NULLS FIRST], true\n      +- Aggregate [r_reason_desc#124], [substr(r_reason_desc#124, 1, 20) AS substr(r_reason_desc, 1, 20)#178, avg(ws_quantity#17) AS avg(ws_quantity)#179, cast((avg(UnscaledValue(wr_refunded_cash#53)) / 100.0) as decimal(11,6)) AS avg(wr_refunded_cash)#180, cast((avg(UnscaledValue(wr_fee#51)) / 100.0) as decimal(11,6)) AS avg(wr_fee)#181]\n         +- Project [ws_quantity#17, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124]\n            +- Join Inner, (ws_sold_date_sk#33 = d_date_sk#94)\n               :- Project [ws_quantity#17, ws_sold_date_sk#33, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124]\n               :  +- Join Inner, (r_reason_sk#122 = wr_reason_sk#45)\n               :     :- Project [ws_quantity#17, ws_sold_date_sk#33, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53]\n               :     :  +- Join Inner, (((cd_demo_sk#165 = wr_returning_cdemo_sk#41) AND (cd_marital_status#74 = cd_marital_status#167)) AND (cd_education_status#75 = cd_education_status#168))\n               :     :     :- Project [ws_quantity#17, ws_sold_date_sk#33, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53, cd_marital_status#74, cd_education_status#75]\n               :     :     :  +- Join Inner, (((((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) AND (ws_sales_price#20 >= 100.00)) AND (ws_sales_price#20 <= 150.00)) OR ((((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary)) AND (ws_sales_price#20 >= 50.00)) AND (ws_sales_price#20 <= 100.00))) OR ((((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree)) AND (ws_sales_price#20 >= 150.00)) AND (ws_sales_price#20 <= 200.00))) AND (cd_demo_sk#72 = wr_refunded_cdemo_sk#37))\n               :     :     :     :- Project [ws_quantity#17, ws_sales_price#20, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53]\n               :     :     :     :  +- Join Inner, ((ca_address_sk#81 = wr_refunded_addr_sk#39) AND ((((ca_state#89 IN (KY,GA,NM) AND (ws_net_profit#32 >= 100.00)) AND (ws_net_profit#32 <= 200.00)) OR ((ca_state#89 IN (MT,OR,IN) AND (ws_net_profit#32 >= 150.00)) AND (ws_net_profit#32 <= 300.00))) OR ((ca_state#89 IN (WI,MO,WV) AND (ws_net_profit#32 >= 50.00)) AND (ws_net_profit#32 <= 250.00))))\n               :     :     :     :     :- Project [ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53]\n               :     :     :     :     :  +- Join Inner, ((ws_item_sk#2 = wr_item_sk#35) AND (ws_order_number#16L = wr_order_number#46L))\n               :     :     :     :     :     :- Project [ws_item_sk#2, ws_order_number#16L, ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33]\n               :     :     :     :     :     :  +- Join Inner, (ws_web_page_sk#11 = wp_web_page_sk#58)\n               :     :     :     :     :     :     :- Project [ws_item_sk#2, ws_web_page_sk#11, ws_order_number#16L, ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33]\n               :     :     :     :     :     :     :  +- Filter ((((isnotnull(ws_item_sk#2) AND isnotnull(ws_order_number#16L)) AND isnotnull(ws_web_page_sk#11)) AND isnotnull(ws_sold_date_sk#33)) AND ((((((ws_sales_price#20 >= 100.00) AND (ws_sales_price#20 <= 150.00)) OR ((ws_sales_price#20 >= 50.00) AND (ws_sales_price#20 <= 100.00))) OR ((ws_sales_price#20 >= 150.00) AND (ws_sales_price#20 <= 200.00))) AND ((((ws_net_profit#32 >= 100.00) AND (ws_net_profit#32 <= 200.00)) OR ((ws_net_profit#32 >= 150.00) AND (ws_net_profit#32 <= 300.00))) OR ((ws_net_profit#32 >= 50.00) AND (ws_net_profit#32 <= 250.00)))) AND dynamicpruning#189 [ws_sold_date_sk#33]))\n               :     :     :     :     :     :     :     :  +- Project [d_date_sk#94]\n               :     :     :     :     :     :     :     :     +- Filter ((isnotnull(d_year#100) AND (d_year#100 = 1998)) AND isnotnull(d_date_sk#94))\n               :     :     :     :     :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#94,d_date_id#95,d_date#96,d_month_seq#97,d_week_seq#98,d_quarter_seq#99,d_year#100,d_dow#101,d_moy#102,d_dom#103,d_qoy#104,d_fy_year#105,d_fy_quarter_seq#106,d_fy_week_seq#107,d_day_name#108,d_quarter_name#109,d_holiday#110,d_weekend#111,d_following_holiday#112,d_first_dom#113,d_last_dom#114,d_same_day_ly#115,d_same_day_lq#116,d_current_day#117,... 4 more fields] parquet\n               :     :     :     :     :     :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#0,ws_ship_date_sk#1,ws_item_sk#2,ws_bill_customer_sk#3,ws_bill_cdemo_sk#4,ws_bill_hdemo_sk#5,ws_bill_addr_sk#6,ws_ship_customer_sk#7,ws_ship_cdemo_sk#8,ws_ship_hdemo_sk#9,ws_ship_addr_sk#10,ws_web_page_sk#11,ws_web_site_sk#12,ws_ship_mode_sk#13,ws_warehouse_sk#14,ws_promo_sk#15,ws_order_number#16L,ws_quantity#17,ws_wholesale_cost#18,ws_list_price#19,ws_sales_price#20,ws_ext_discount_amt#21,ws_ext_sales_price#22,ws_ext_wholesale_cost#23,... 10 more fields] parquet\n               :     :     :     :     :     :     +- LogicalQueryStage Project [wp_web_page_sk#58], BroadcastQueryStage 0\n               :     :     :     :     :     +- LogicalQueryStage Project [wr_item_sk#35, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_order_number#46L, wr_fee#51, wr_refunded_cash#53], ShuffleQueryStage 1\n               :     :     :     :     +- LogicalQueryStage Project [ca_address_sk#81, ca_state#89], BroadcastQueryStage 2\n               :     :     :     +- LogicalQueryStage Project [cd_demo_sk#72, cd_marital_status#74, cd_education_status#75], BroadcastQueryStage 3\n               :     :     +- LogicalQueryStage Project [cd_demo_sk#165, cd_marital_status#167, cd_education_status#168], ShuffleQueryStage 4\n               :     +- LogicalQueryStage Project [r_reason_sk#122, r_reason_desc#124], BroadcastQueryStage 5\n               +- LogicalQueryStage Project [d_date_sk#94], BroadcastQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 15427318076,
        "inputRowCount" : 80282305
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227445403,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 21901,
        "IOBytes" : {
          "Total" : 562527455,
          "Details" : {
            "IR" : 464990353,
            "IW" : 0,
            "SR" : 48768551,
            "SW" : 48768551
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "12" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 669685893,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9639504,
                "rowCount" : 133882
              },
              "compileTime" : {
                "sizeInBytes" : 311338404,
                "rowCount" : 5987277
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [wr_item_sk#35, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_order_number#46L, wr_fee#51, wr_refunded_cash#53], ShuffleQueryStage 1 "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Project [wr_item_sk#35, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_order_number#46L, wr_fee#51, wr_refunded_cash#53], ShuffleQueryStage 1\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1551524120,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 9639504,
            "rowCount" : 133882,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [8]: [wr_item_sk#35, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_order_number#46L, wr_fee#51, wr_refunded_cash#53] Arguments: 1 "
          }
        },
        "links" : [ ],
        "rawPlan" : "ShuffleQueryStage 1\n+- Exchange hashpartitioning(wr_item_sk#35, wr_order_number#46L, 200), ENSURE_REQUIREMENTS, [plan_id=381]\n   +- *(2) Project [wr_item_sk#35, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_order_number#46L, wr_fee#51, wr_refunded_cash#53]\n      +- *(2) Filter (((((((isnotnull(wr_item_sk#35) AND isnotnull(wr_order_number#46L)) AND isnotnull(wr_refunded_cdemo_sk#37)) AND isnotnull(wr_returning_cdemo_sk#41)) AND isnotnull(wr_refunded_addr_sk#39)) AND isnotnull(wr_reason_sk#45)) AND might_contain(Subquery subquery#192, [id=#150], xxhash64(wr_refunded_addr_sk#39, 42))) AND might_contain(Subquery subquery#195, [id=#163], xxhash64(wr_refunded_cdemo_sk#37, 42)))\n         :  :- Subquery subquery#192, [id=#150]\n         :  :  +- AdaptiveSparkPlan isFinalPlan=true\n                  +- == Final Plan ==\n                     ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0)], output=[bloomFilter#191])\n                     +- ShuffleQueryStage 0\n                        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=524]\n                           +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0)], output=[buf#210])\n                              +- *(1) Project [ca_address_sk#81]\n                                 +- *(1) Filter (((isnotnull(ca_country#91) AND (ca_country#91 = United States)) AND isnotnull(ca_address_sk#81)) AND ((ca_state#89 IN (KY,GA,NM) OR ca_state#89 IN (MT,OR,IN)) OR ca_state#89 IN (WI,MO,WV)))\n                                    +- *(1) ColumnarToRow\n                                       +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#81,ca_state#89,ca_country#91] Batched: true, DataFilters: [isnotnull(ca_country#91), (ca_country#91 = United States), isnotnull(ca_address_sk#81), ((ca_sta..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk), Or(Or(In(ca_..., ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>\n                  +- == Initial Plan ==\n                     ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0)], output=[bloomFilter#191])\n                     +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=148]\n                        +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0)], output=[buf#210])\n                           +- Project [ca_address_sk#81]\n                              +- Filter (((isnotnull(ca_country#91) AND (ca_country#91 = United States)) AND isnotnull(ca_address_sk#81)) AND ((ca_state#89 IN (KY,GA,NM) OR ca_state#89 IN (MT,OR,IN)) OR ca_state#89 IN (WI,MO,WV)))\n                                 +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#81,ca_state#89,ca_country#91] Batched: true, DataFilters: [isnotnull(ca_country#91), (ca_country#91 = United States), isnotnull(ca_address_sk#81), ((ca_sta..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk), Or(Or(In(ca_..., ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>\n         :  +- Subquery subquery#195, [id=#163]\n         :     +- AdaptiveSparkPlan isFinalPlan=true\n                  +- == Final Plan ==\n                     ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0)], output=[bloomFilter#194])\n                     +- ShuffleQueryStage 0\n                        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=510]\n                           +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0)], output=[buf#211])\n                              +- *(1) Project [cd_demo_sk#72]\n                                 +- *(1) Filter (((isnotnull(cd_demo_sk#72) AND isnotnull(cd_marital_status#74)) AND isnotnull(cd_education_status#75)) AND ((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) OR ((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary))) OR ((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree))))\n                                    +- *(1) ColumnarToRow\n                                       +- FileScan parquet spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#72,cd_marital_status#74,cd_education_status#75] Batched: true, DataFilters: [isnotnull(cd_demo_sk#72), isnotnull(cd_marital_status#74), isnotnull(cd_education_status#75), ((..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), Or(Or(And(E..., ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>\n                  +- == Initial Plan ==\n                     ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0)], output=[bloomFilter#194])\n                     +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=161]\n                        +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0)], output=[buf#211])\n                           +- Project [cd_demo_sk#72]\n                              +- Filter (((isnotnull(cd_demo_sk#72) AND isnotnull(cd_marital_status#74)) AND isnotnull(cd_education_status#75)) AND ((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) OR ((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary))) OR ((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree))))\n                                 +- FileScan parquet spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#72,cd_marital_status#74,cd_education_status#75] Batched: true, DataFilters: [isnotnull(cd_demo_sk#72), isnotnull(cd_marital_status#74), isnotnull(cd_education_status#75), ((..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), Or(Or(And(E..., ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>\n         +- *(2) ColumnarToRow\n            +- FileScan parquet spark_catalog.tpcds_100.web_returns[wr_item_sk#35,wr_refunded_cdemo_sk#37,wr_refunded_addr_sk#39,wr_returning_cdemo_sk#41,wr_reason_sk#45,wr_order_number#46L,wr_fee#51,wr_refunded_cash#53,wr_returned_date_sk#57] Batched: true, DataFilters: [isnotnull(wr_item_sk#35), isnotnull(wr_order_number#46L), isnotnull(wr_refunded_cdemo_sk#37), is..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_returns], PartitionFilters: [], PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number), IsNotNull(wr_refunded_cdemo_sk), IsNotNull(wr..., ReadSchema: struct<wr_item_sk:int,wr_refunded_cdemo_sk:int,wr_refunded_addr_sk:int,wr_returning_cdemo_sk:int,...\n"
      },
      "IM" : {
        "inputSizeInBytes" : 9639504,
        "inputRowCount" : 133882
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "2" : [ 36382, 36284, 35783, 33690, 36267, 35504, 36354, 34908, 38675, 37137, 35251, 36005, 34288, 34661, 36727, 35878, 35804, 36198, 34521, 35819, 37437, 34704, 34831, 35931, 34944, 34233, 34445, 34689, 35080, 38286, 35565, 33315, 35220, 34872, 34491, 36193, 32707, 37522, 35645, 34918, 36747, 37940, 34055, 36322, 35098, 37328, 35970, 32756, 35221, 37275, 35707, 33048, 34645, 35770, 35432, 34681, 35356, 35164, 33223, 35514, 37223, 35373, 36538, 35289, 34892, 36998, 35344, 35794, 34745, 34873, 33842, 35339, 34160, 37261, 35767, 36437, 36159, 36262, 36031, 36802, 37324, 33992, 37598, 37320, 34056, 37323, 34769, 35923, 34077, 34789, 36276, 36267, 36093, 33934, 35484, 33990, 35146, 33596, 34364, 34415, 34366, 35944, 36432, 34047, 37286, 35634, 35376, 36715, 36849, 36958, 35864, 36778, 35273, 34506, 37625, 36447, 36254, 34803, 34242, 36363, 36711, 34897, 35915, 35803, 34406, 35130, 35705, 35519, 35796, 36039, 32815, 35977, 34738, 35617, 35233, 35737, 34520, 34593, 34706, 33601, 35555, 34944, 34035, 34739, 37023, 36314, 36436, 34660, 36368, 34064, 36649, 36775, 36144, 33466, 36803, 35533, 33981, 36225, 34002, 36284, 37557, 36638, 35787, 34989, 35251, 35095, 35467, 37405, 37218, 36487, 35997, 36072, 35730, 34249, 36696, 35541, 34484, 36344, 36558, 35685, 33197, 35609, 33547, 34795, 36515, 36015, 34547, 34359, 35924, 34421, 34918, 37015, 35753, 35458, 35121, 35798, 35802, 38134, 36890, 32807 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 2,
        "FinishedTasksNum" : 17,
        "FinishedTasksTotalTimeInMs" : 14886.0,
        "FinishedTasksDistributionInMs" : [ 451.0, 573.0, 958.0, 1005.0, 2030.0 ]
      },
      "QueryStageOptimizationId" : 12,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 17 ],
      "Objectives" : {
        "DurationInMs" : 186,
        "TotalTasksDurationInMs" : 180,
        "IOBytes" : {
          "Total" : 6748340,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 6748340,
            "SW" : 0
          }
        }
      }
    },
    "8" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -777122116,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 559936,
                "rowCount" : 2
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0) AS bloomFilter#194], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0) AS bloomFilter#194], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0)])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1928679995,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 559936,
            "rowCount" : 2,
            "isRuntime" : true,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [buf#211] Keys: [] Functions [1]: [bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0)] Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0)#193] Results [1]: [bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0)#193 AS bloomFilter#194] "
          },
          "1" : {
            "sign" : 329081580,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [buf#211] Arguments: 0 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0)], output=[bloomFilter#194])\n+- ShuffleQueryStage 0\n   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=510]\n      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0)], output=[buf#211])\n         +- *(1) Project [cd_demo_sk#72]\n            +- *(1) Filter (((isnotnull(cd_demo_sk#72) AND isnotnull(cd_marital_status#74)) AND isnotnull(cd_education_status#75)) AND ((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) OR ((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary))) OR ((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree))))\n               +- *(1) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#72,cd_marital_status#74,cd_education_status#75] Batched: true, DataFilters: [isnotnull(cd_demo_sk#72), isnotnull(cd_marital_status#74), isnotnull(cd_education_status#75), ((..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), Or(Or(And(E..., ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 559936,
        "inputRowCount" : 2
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "1" : [ 292498 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 10,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 11 ],
      "Objectives" : {
        "DurationInMs" : 166,
        "TotalTasksDurationInMs" : 150,
        "IOBytes" : {
          "Total" : 281611,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 281611,
            "SW" : 0
          }
        }
      }
    },
    "4" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1290495956,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6912,
                "rowCount" : 576
              },
              "compileTime" : {
                "sizeInBytes" : 6912,
                "rowCount" : 576
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#94] "
          },
          "1" : {
            "sign" : -1221195549,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 141696,
                "rowCount" : 576
              },
              "compileTime" : {
                "sizeInBytes" : 141696,
                "rowCount" : 576
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#100) AND (d_year#100 = 1998)) AND isnotnull(d_date_sk#94)) "
          },
          "2" : {
            "sign" : -10360288,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#94, d_date_id#95, d_date#96, d_month_seq#97, d_week_seq#98, d_quarter_seq#99, d_year#100, d_dow#101, d_moy#102, d_dom#103, d_qoy#104, d_fy_year#105, d_fy_quarter_seq#106, d_fy_week_seq#107, d_day_name#108, d_quarter_name#109, d_holiday#110, d_weekend#111, d_following_holiday#112, d_first_dom#113, d_last_dom#114, d_same_day_ly#115, d_same_day_lq#116, d_current_day#117, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#94]\n+- Filter ((isnotnull(d_year#100) AND (d_year#100 = 1998)) AND isnotnull(d_date_sk#94))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#94,d_date_id#95,d_date#96,d_month_seq#97,d_week_seq#98,d_quarter_seq#99,d_year#100,d_dow#101,d_moy#102,d_dom#103,d_qoy#104,d_fy_year#105,d_fy_quarter_seq#106,d_fy_week_seq#107,d_day_name#108,d_quarter_name#109,d_holiday#110,d_weekend#111,d_following_holiday#112,d_first_dom#113,d_last_dom#114,d_same_day_ly#115,d_same_day_lq#116,d_current_day#117,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1745592695,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 6912,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [d_date_sk#94] Input [2]: [d_date_sk#94, d_year#100] "
          },
          "1" : {
            "sign" : -1647797984,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 6912,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [d_date_sk#94, d_year#100] Condition : ((isnotnull(d_year#100) AND (d_year#100 = 1998)) AND isnotnull(d_date_sk#94)) "
          },
          "2" : {
            "sign" : 1163972611,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 6912,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [2]: [d_date_sk#94, d_year#100] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1998), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_year:int> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#94]\n+- Filter ((isnotnull(d_year#100) AND (d_year#100 = 1998)) AND isnotnull(d_date_sk#94))\n   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#94,d_year#100] Batched: true, DataFilters: [isnotnull(d_year#100), (d_year#100 = 1998), isnotnull(d_date_sk#94)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1998), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 6912,
        "inputRowCount" : 576
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 5 ],
      "Objectives" : {
        "DurationInMs" : 1300,
        "TotalTasksDurationInMs" : 1296,
        "IOBytes" : {
          "Total" : 93562,
          "Details" : {
            "IR" : 93562,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "15" : {
      "QSLogical" : {
        "operators" : {
          "8" : {
            "sign" : -404041803,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1049016,
                "rowCount" : 55
              },
              "compileTime" : {
                "sizeInBytes" : 2090,
                "rowCount" : 55
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [r_reason_sk#122, r_reason_desc#124], BroadcastQueryStage 5 "
          },
          "4" : {
            "sign" : 269731610,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1109262000000,
                "rowCount" : 18487700000
              },
              "compileTime" : {
                "sizeInBytes" : 1109262000000,
                "rowCount" : 18487700000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (r_reason_sk#122 = wr_reason_sk#45) "
          },
          "9" : {
            "sign" : 887367787,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1051496,
                "rowCount" : 365
              },
              "compileTime" : {
                "sizeInBytes" : 6912,
                "rowCount" : 576
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#94], BroadcastQueryStage 6 "
          },
          "5" : {
            "sign" : -962713569,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 12101040000,
                "rowCount" : 336140000
              },
              "compileTime" : {
                "sizeInBytes" : 12101040000,
                "rowCount" : 336140000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sold_date_sk#33, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53] "
          },
          "6" : {
            "sign" : 1630901881,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 41681360000,
                "rowCount" : 336140000
              },
              "compileTime" : {
                "sizeInBytes" : 41681360000,
                "rowCount" : 336140000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((cd_demo_sk#165 = wr_returning_cdemo_sk#41) AND (cd_marital_status#74 = cd_marital_status#167)) AND (cd_education_status#75 = cd_education_status#168)) "
          },
          "1" : {
            "sign" : 1286827316,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 323904504000000,
                "rowCount" : 6748010500000
              },
              "compileTime" : {
                "sizeInBytes" : 323904504000000,
                "rowCount" : 6748010500000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124] "
          },
          "0" : {
            "sign" : 1138787267,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 350896546000000,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 350896546000000,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [r_reason_desc#124], [substr(r_reason_desc#124, 1, 20) AS substr(r_reason_desc, 1, 20)#178, avg(ws_quantity#17) AS avg(ws_quantity)#179, cast((avg(UnscaledValue(wr_refunded_cash#53)) / 100.0) as decimal(11,6)) AS avg(wr_refunded_cash)#180, cast((avg(UnscaledValue(wr_fee#51)) / 100.0) as decimal(11,6)) AS avg(wr_fee)#181] "
          },
          "2" : {
            "sign" : 786742706,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 377888588000000,
                "rowCount" : 6748010500000
              },
              "compileTime" : {
                "sizeInBytes" : 377888588000000,
                "rowCount" : 6748010500000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#33 = d_date_sk#94) "
          },
          "7" : {
            "sign" : -2078659275,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 100979200,
                "rowCount" : 1920800
              },
              "compileTime" : {
                "sizeInBytes" : 90277600,
                "rowCount" : 1920800
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cd_demo_sk#165, cd_marital_status#167, cd_education_status#168], ShuffleQueryStage 4 "
          },
          "3" : {
            "sign" : -205194860,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 961360400000,
                "rowCount" : 18487700000
              },
              "compileTime" : {
                "sizeInBytes" : 961360400000,
                "rowCount" : 18487700000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sold_date_sk#33, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [r_reason_desc#124], [substr(r_reason_desc#124, 1, 20) AS substr(r_reason_desc, 1, 20)#178, avg(ws_quantity#17) AS avg(ws_quantity)#179, cast((avg(UnscaledValue(wr_refunded_cash#53)) / 100.0) as decimal(11,6)) AS avg(wr_refunded_cash)#180, cast((avg(UnscaledValue(wr_fee#51)) / 100.0) as decimal(11,6)) AS avg(wr_fee)#181]\n+- Project [ws_quantity#17, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124]\n   +- Join Inner, (ws_sold_date_sk#33 = d_date_sk#94)\n      :- Project [ws_quantity#17, ws_sold_date_sk#33, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124]\n      :  +- Join Inner, (r_reason_sk#122 = wr_reason_sk#45)\n      :     :- Project [ws_quantity#17, ws_sold_date_sk#33, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53]\n      :     :  +- Join Inner, (((cd_demo_sk#165 = wr_returning_cdemo_sk#41) AND (cd_marital_status#74 = cd_marital_status#167)) AND (cd_education_status#75 = cd_education_status#168))\n      :     :     :- LogicalQueryStage Project [ws_quantity#17, ws_sold_date_sk#33, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53, cd_marital_status#74, cd_education_status#75], ShuffleQueryStage 9\n      :     :     +- LogicalQueryStage Project [cd_demo_sk#165, cd_marital_status#167, cd_education_status#168], ShuffleQueryStage 4\n      :     +- LogicalQueryStage Project [r_reason_sk#122, r_reason_desc#124], BroadcastQueryStage 5\n      +- LogicalQueryStage Project [d_date_sk#94], BroadcastQueryStage 6\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : -984106668,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 100979200,
            "rowCount" : 1920800,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [cd_demo_sk#165, cd_marital_status#167, cd_education_status#168] Arguments: 4 "
          },
          "4" : {
            "sign" : 1466169519,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 1109262000000,
            "rowCount" : 18487700000,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [wr_reason_sk#45] Right keys [1]: [r_reason_sk#122] Join type: Inner Join condition: None "
          },
          "9" : {
            "sign" : -550069356,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1049016,
            "rowCount" : 55,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [r_reason_sk#122, r_reason_desc#124] Arguments: 5 "
          },
          "5" : {
            "sign" : -360138507,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 12101040000,
            "rowCount" : 336140000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [ws_quantity#17, ws_sold_date_sk#33, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53] Input [11]: [ws_quantity#17, ws_sold_date_sk#33, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53, cd_marital_status#74, cd_education_status#75, cd_demo_sk#165, cd_marital_status#167, cd_education_status#168] "
          },
          "10" : {
            "sign" : 857709284,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1051496,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#94] Arguments: 6 "
          },
          "6" : {
            "sign" : -143491257,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 41681360000,
            "rowCount" : 336140000,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [3]: [wr_returning_cdemo_sk#41, cd_marital_status#74, cd_education_status#75] Right keys [3]: [cd_demo_sk#165, cd_marital_status#167, cd_education_status#168] Join type: Inner Join condition: None "
          },
          "1" : {
            "sign" : 781344932,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 323904504000000,
            "rowCount" : 6748010500000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [ws_quantity#17, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124] Input [6]: [ws_quantity#17, ws_sold_date_sk#33, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124, d_date_sk#94] "
          },
          "0" : {
            "sign" : 596040159,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 350896546000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [4]: [ws_quantity#17, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124] Keys [1]: [r_reason_desc#124] Functions [3]: [partial_avg(ws_quantity#17), partial_avg(UnscaledValue(wr_refunded_cash#53)), partial_avg(UnscaledValue(wr_fee#51))] Aggregate Attributes [6]: [sum#198, count#199L, sum#200, count#201L, sum#202, count#203L] Results [7]: [r_reason_desc#124, sum#204, count#205L, sum#206, count#207L, sum#208, count#209L] "
          },
          "2" : {
            "sign" : 322188204,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 377888588000000,
            "rowCount" : 6748010500000,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ws_sold_date_sk#33] Right keys [1]: [d_date_sk#94] Join type: Inner Join condition: None "
          },
          "7" : {
            "sign" : 972017158,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 33562624,
            "rowCount" : 175,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [8]: [ws_quantity#17, ws_sold_date_sk#33, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53, cd_marital_status#74, cd_education_status#75] Arguments: 10 "
          },
          "3" : {
            "sign" : -1363565393,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 961360400000,
            "rowCount" : 18487700000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [ws_quantity#17, ws_sold_date_sk#33, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124] Input [7]: [ws_quantity#17, ws_sold_date_sk#33, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53, r_reason_sk#122, r_reason_desc#124] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "BroadcastQueryStage",
          "toId" : 6,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "ShuffleQueryStage",
          "toId" : 6,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "BroadcastHashJoin",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "BroadcastQueryStage",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastHashJoin",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[r_reason_desc#124], functions=[partial_avg(ws_quantity#17), partial_avg(UnscaledValue(wr_refunded_cash#53)), partial_avg(UnscaledValue(wr_fee#51))], output=[r_reason_desc#124, sum#204, count#205L, sum#206, count#207L, sum#208, count#209L])\n+- Project [ws_quantity#17, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124]\n   +- BroadcastHashJoin [ws_sold_date_sk#33], [d_date_sk#94], Inner, BuildRight, false\n      :- Project [ws_quantity#17, ws_sold_date_sk#33, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124]\n      :  +- BroadcastHashJoin [wr_reason_sk#45], [r_reason_sk#122], Inner, BuildRight, false\n      :     :- Project [ws_quantity#17, ws_sold_date_sk#33, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53]\n      :     :  +- BroadcastHashJoin [wr_returning_cdemo_sk#41, cd_marital_status#74, cd_education_status#75], [cd_demo_sk#165, cd_marital_status#167, cd_education_status#168], Inner, BuildLeft, false\n      :     :     :- BroadcastQueryStage 10\n      :     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[2, int, true], input[6, string, true], input[7, string, true]),false), [plan_id=1358]\n      :     :     :     +- AQEShuffleRead local\n      :     :     :        +- ShuffleQueryStage 9\n      :     :     :           +- Exchange hashpartitioning(wr_returning_cdemo_sk#41, cd_marital_status#74, cd_education_status#75, 200), ENSURE_REQUIREMENTS, [plan_id=1262]\n      :     :     :              +- *(9) Project [ws_quantity#17, ws_sold_date_sk#33, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53, cd_marital_status#74, cd_education_status#75]\n      :     :     :                 +- *(9) BroadcastHashJoin [wr_refunded_cdemo_sk#37], [cd_demo_sk#72], Inner, BuildRight, ((((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) AND (ws_sales_price#20 >= 100.00)) AND (ws_sales_price#20 <= 150.00)) OR ((((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary)) AND (ws_sales_price#20 >= 50.00)) AND (ws_sales_price#20 <= 100.00))) OR ((((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree)) AND (ws_sales_price#20 >= 150.00)) AND (ws_sales_price#20 <= 200.00))), false\n      :     :     :                    :- *(9) Project [ws_quantity#17, ws_sales_price#20, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53]\n      :     :     :                    :  +- *(9) BroadcastHashJoin [wr_refunded_addr_sk#39], [ca_address_sk#81], Inner, BuildRight, ((((ca_state#89 IN (KY,GA,NM) AND (ws_net_profit#32 >= 100.00)) AND (ws_net_profit#32 <= 200.00)) OR ((ca_state#89 IN (MT,OR,IN) AND (ws_net_profit#32 >= 150.00)) AND (ws_net_profit#32 <= 300.00))) OR ((ca_state#89 IN (WI,MO,WV) AND (ws_net_profit#32 >= 50.00)) AND (ws_net_profit#32 <= 250.00))), false\n      :     :     :                    :     :- *(9) Project [ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53]\n      :     :     :                    :     :  +- *(9) BroadcastHashJoin [ws_item_sk#2, ws_order_number#16L], [wr_item_sk#35, wr_order_number#46L], Inner, BuildRight, false\n      :     :     :                    :     :     :- AQEShuffleRead local\n      :     :     :                    :     :     :  +- ShuffleQueryStage 7\n      :     :     :                    :     :     :     +- Exchange hashpartitioning(ws_item_sk#2, ws_order_number#16L, 200), ENSURE_REQUIREMENTS, [plan_id=755]\n      :     :     :                    :     :     :        +- *(8) Project [ws_item_sk#2, ws_order_number#16L, ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33]\n      :     :     :                    :     :     :           +- *(8) BroadcastHashJoin [ws_web_page_sk#11], [wp_web_page_sk#58], Inner, BuildRight, false\n      :     :     :                    :     :     :              :- *(8) Filter ((((isnotnull(ws_item_sk#2) AND isnotnull(ws_order_number#16L)) AND isnotnull(ws_web_page_sk#11)) AND ((((ws_sales_price#20 >= 100.00) AND (ws_sales_price#20 <= 150.00)) OR ((ws_sales_price#20 >= 50.00) AND (ws_sales_price#20 <= 100.00))) OR ((ws_sales_price#20 >= 150.00) AND (ws_sales_price#20 <= 200.00)))) AND ((((ws_net_profit#32 >= 100.00) AND (ws_net_profit#32 <= 200.00)) OR ((ws_net_profit#32 >= 150.00) AND (ws_net_profit#32 <= 300.00))) OR ((ws_net_profit#32 >= 50.00) AND (ws_net_profit#32 <= 250.00))))\n      :     :     :                    :     :     :              :  +- *(8) ColumnarToRow\n      :     :     :                    :     :     :              :     +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_item_sk#2,ws_web_page_sk#11,ws_order_number#16L,ws_quantity#17,ws_sales_price#20,ws_net_profit#32,ws_sold_date_sk#33] Batched: true, DataFilters: [isnotnull(ws_item_sk#2), isnotnull(ws_order_number#16L), isnotnull(ws_web_page_sk#11), ((((ws_sa..., Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#33), dynamicpruningexpression(ws_sold_date_sk#33 IN dynamicpruning#189)], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_page_sk), Or(Or(And(GreaterT..., ReadSchema: struct<ws_item_sk:int,ws_web_page_sk:int,ws_order_number:bigint,ws_quantity:int,ws_sales_price:de...\n      :     :     :                    :     :     :              :           +- SubqueryBroadcast dynamicpruning#189, 0, [d_date_sk#94], [id=#729]\n      :     :     :                    :     :     :              :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                    +- == Final Plan ==\n                                                                                       BroadcastQueryStage 1\n                                                                                       +- ReusedExchange [d_date_sk#94], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=480]\n                                                                                    +- == Initial Plan ==\n                                                                                       BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=726]\n                                                                                       +- Project [d_date_sk#94]\n                                                                                          +- Filter ((isnotnull(d_year#100) AND (d_year#100 = 1998)) AND isnotnull(d_date_sk#94))\n                                                                                             +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#94,d_year#100] Batched: true, DataFilters: [isnotnull(d_year#100), (d_year#100 = 1998), isnotnull(d_date_sk#94)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1998), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n      :     :     :                    :     :     :              +- BroadcastQueryStage 0\n      :     :     :                    :     :     :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=360]\n      :     :     :                    :     :     :                    +- *(1) Filter isnotnull(wp_web_page_sk#58)\n      :     :     :                    :     :     :                       +- *(1) ColumnarToRow\n      :     :     :                    :     :     :                          +- FileScan parquet spark_catalog.tpcds_100.web_page[wp_web_page_sk#58] Batched: true, DataFilters: [isnotnull(wp_web_page_sk#58)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_page], PartitionFilters: [], PushedFilters: [IsNotNull(wp_web_page_sk)], ReadSchema: struct<wp_web_page_sk:int>\n      :     :     :                    :     :     +- BroadcastQueryStage 8\n      :     :     :                    :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, true], input[5, bigint, true]),false), [plan_id=1040]\n      :     :     :                    :     :           +- AQEShuffleRead local\n      :     :     :                    :     :              +- ShuffleQueryStage 1\n      :     :     :                    :     :                 +- Exchange hashpartitioning(wr_item_sk#35, wr_order_number#46L, 200), ENSURE_REQUIREMENTS, [plan_id=381]\n      :     :     :                    :     :                    +- *(2) Project [wr_item_sk#35, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_order_number#46L, wr_fee#51, wr_refunded_cash#53]\n      :     :     :                    :     :                       +- *(2) Filter (((((((isnotnull(wr_item_sk#35) AND isnotnull(wr_order_number#46L)) AND isnotnull(wr_refunded_cdemo_sk#37)) AND isnotnull(wr_returning_cdemo_sk#41)) AND isnotnull(wr_refunded_addr_sk#39)) AND isnotnull(wr_reason_sk#45)) AND might_contain(Subquery subquery#192, [id=#150], xxhash64(wr_refunded_addr_sk#39, 42))) AND might_contain(Subquery subquery#195, [id=#163], xxhash64(wr_refunded_cdemo_sk#37, 42)))\n      :     :     :                    :     :                          :  :- Subquery subquery#192, [id=#150]\n      :     :     :                    :     :                          :  :  +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                 +- == Final Plan ==\n                                                                                    ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0)], output=[bloomFilter#191])\n                                                                                    +- ShuffleQueryStage 0\n                                                                                       +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=524]\n                                                                                          +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0)], output=[buf#210])\n                                                                                             +- *(1) Project [ca_address_sk#81]\n                                                                                                +- *(1) Filter (((isnotnull(ca_country#91) AND (ca_country#91 = United States)) AND isnotnull(ca_address_sk#81)) AND ((ca_state#89 IN (KY,GA,NM) OR ca_state#89 IN (MT,OR,IN)) OR ca_state#89 IN (WI,MO,WV)))\n                                                                                                   +- *(1) ColumnarToRow\n                                                                                                      +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#81,ca_state#89,ca_country#91] Batched: true, DataFilters: [isnotnull(ca_country#91), (ca_country#91 = United States), isnotnull(ca_address_sk#81), ((ca_sta..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk), Or(Or(In(ca_..., ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>\n                                                                                 +- == Initial Plan ==\n                                                                                    ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0)], output=[bloomFilter#191])\n                                                                                    +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=148]\n                                                                                       +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0)], output=[buf#210])\n                                                                                          +- Project [ca_address_sk#81]\n                                                                                             +- Filter (((isnotnull(ca_country#91) AND (ca_country#91 = United States)) AND isnotnull(ca_address_sk#81)) AND ((ca_state#89 IN (KY,GA,NM) OR ca_state#89 IN (MT,OR,IN)) OR ca_state#89 IN (WI,MO,WV)))\n                                                                                                +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#81,ca_state#89,ca_country#91] Batched: true, DataFilters: [isnotnull(ca_country#91), (ca_country#91 = United States), isnotnull(ca_address_sk#81), ((ca_sta..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk), Or(Or(In(ca_..., ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>\n      :     :     :                    :     :                          :  +- Subquery subquery#195, [id=#163]\n      :     :     :                    :     :                          :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                 +- == Final Plan ==\n                                                                                    ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0)], output=[bloomFilter#194])\n                                                                                    +- ShuffleQueryStage 0\n                                                                                       +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=510]\n                                                                                          +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0)], output=[buf#211])\n                                                                                             +- *(1) Project [cd_demo_sk#72]\n                                                                                                +- *(1) Filter (((isnotnull(cd_demo_sk#72) AND isnotnull(cd_marital_status#74)) AND isnotnull(cd_education_status#75)) AND ((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) OR ((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary))) OR ((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree))))\n                                                                                                   +- *(1) ColumnarToRow\n                                                                                                      +- FileScan parquet spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#72,cd_marital_status#74,cd_education_status#75] Batched: true, DataFilters: [isnotnull(cd_demo_sk#72), isnotnull(cd_marital_status#74), isnotnull(cd_education_status#75), ((..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), Or(Or(And(E..., ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>\n                                                                                 +- == Initial Plan ==\n                                                                                    ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0)], output=[bloomFilter#194])\n                                                                                    +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=161]\n                                                                                       +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0)], output=[buf#211])\n                                                                                          +- Project [cd_demo_sk#72]\n                                                                                             +- Filter (((isnotnull(cd_demo_sk#72) AND isnotnull(cd_marital_status#74)) AND isnotnull(cd_education_status#75)) AND ((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) OR ((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary))) OR ((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree))))\n                                                                                                +- FileScan parquet spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#72,cd_marital_status#74,cd_education_status#75] Batched: true, DataFilters: [isnotnull(cd_demo_sk#72), isnotnull(cd_marital_status#74), isnotnull(cd_education_status#75), ((..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), Or(Or(And(E..., ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>\n      :     :     :                    :     :                          +- *(2) ColumnarToRow\n      :     :     :                    :     :                             +- FileScan parquet spark_catalog.tpcds_100.web_returns[wr_item_sk#35,wr_refunded_cdemo_sk#37,wr_refunded_addr_sk#39,wr_returning_cdemo_sk#41,wr_reason_sk#45,wr_order_number#46L,wr_fee#51,wr_refunded_cash#53,wr_returned_date_sk#57] Batched: true, DataFilters: [isnotnull(wr_item_sk#35), isnotnull(wr_order_number#46L), isnotnull(wr_refunded_cdemo_sk#37), is..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_returns], PartitionFilters: [], PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number), IsNotNull(wr_refunded_cdemo_sk), IsNotNull(wr..., ReadSchema: struct<wr_item_sk:int,wr_refunded_cdemo_sk:int,wr_refunded_addr_sk:int,wr_returning_cdemo_sk:int,...\n      :     :     :                    :     +- BroadcastQueryStage 2\n      :     :     :                    :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=404]\n      :     :     :                    :           +- *(3) Project [ca_address_sk#81, ca_state#89]\n      :     :     :                    :              +- *(3) Filter (((isnotnull(ca_country#91) AND (ca_country#91 = United States)) AND isnotnull(ca_address_sk#81)) AND ((ca_state#89 IN (KY,GA,NM) OR ca_state#89 IN (MT,OR,IN)) OR ca_state#89 IN (WI,MO,WV)))\n      :     :     :                    :                 +- *(3) ColumnarToRow\n      :     :     :                    :                    +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#81,ca_state#89,ca_country#91] Batched: true, DataFilters: [isnotnull(ca_country#91), (ca_country#91 = United States), isnotnull(ca_address_sk#81), ((ca_sta..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk), Or(Or(In(ca_..., ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>\n      :     :     :                    +- BroadcastQueryStage 3\n      :     :     :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=423]\n      :     :     :                          +- *(4) Filter (((isnotnull(cd_demo_sk#72) AND isnotnull(cd_marital_status#74)) AND isnotnull(cd_education_status#75)) AND ((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) OR ((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary))) OR ((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree))))\n      :     :     :                             +- *(4) ColumnarToRow\n      :     :     :                                +- FileScan parquet spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#72,cd_marital_status#74,cd_education_status#75] Batched: true, DataFilters: [isnotnull(cd_demo_sk#72), isnotnull(cd_marital_status#74), isnotnull(cd_education_status#75), ((..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), Or(Or(And(E..., ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>\n      :     :     +- ShuffleQueryStage 4\n      :     :        +- Exchange hashpartitioning(cd_demo_sk#165, cd_marital_status#167, cd_education_status#168, 200), ENSURE_REQUIREMENTS, [plan_id=442]\n      :     :           +- *(5) Filter ((isnotnull(cd_demo_sk#165) AND isnotnull(cd_marital_status#167)) AND isnotnull(cd_education_status#168))\n      :     :              +- *(5) ColumnarToRow\n      :     :                 +- FileScan parquet spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#165,cd_marital_status#167,cd_education_status#168] Batched: true, DataFilters: [isnotnull(cd_demo_sk#165), isnotnull(cd_marital_status#167), isnotnull(cd_education_status#168)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status)], ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>\n      :     +- BroadcastQueryStage 5\n      :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=461]\n      :           +- *(6) Filter isnotnull(r_reason_sk#122)\n      :              +- *(6) ColumnarToRow\n      :                 +- FileScan parquet spark_catalog.tpcds_100.reason[r_reason_sk#122,r_reason_desc#124] Batched: true, DataFilters: [isnotnull(r_reason_sk#122)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/reason], PartitionFilters: [], PushedFilters: [IsNotNull(r_reason_sk)], ReadSchema: struct<r_reason_sk:int,r_reason_desc:string>\n      +- BroadcastQueryStage 6\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=480]\n            +- *(7) Project [d_date_sk#94]\n               +- *(7) Filter ((isnotnull(d_year#100) AND (d_year#100 = 1998)) AND isnotnull(d_date_sk#94))\n                  +- *(7) ColumnarToRow\n                     +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#94,d_year#100] Batched: true, DataFilters: [isnotnull(d_year#100), (d_year#100 = 1998), isnotnull(d_date_sk#94)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1998), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 136642336,
        "inputRowCount" : 1921395
      },
      "InitialPartitionNum" : 200,
      "PD" : {

      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 15,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 24 ],
      "Objectives" : {
        "DurationInMs" : 4412,
        "TotalTasksDurationInMs" : 4401,
        "IOBytes" : {
          "Total" : 27809139,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 27803968,
            "SW" : 5171
          }
        }
      }
    },
    "11" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 1063815880,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              },
              "compileTime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#0, ws_ship_date_sk#1, ws_item_sk#2, ws_bill_customer_sk#3, ws_bill_cdemo_sk#4, ws_bill_hdemo_sk#5, ws_bill_addr_sk#6, ws_ship_customer_sk#7, ws_ship_cdemo_sk#8, ws_ship_hdemo_sk#9, ws_ship_addr_sk#10, ws_web_page_sk#11, ws_web_site_sk#12, ws_ship_mode_sk#13, ws_warehouse_sk#14, ws_promo_sk#15, ws_order_number#16L, ws_quantity#17, ws_wholesale_cost#18, ws_list_price#19, ws_sales_price#20, ws_ext_discount_amt#21, ws_ext_sales_price#22, ws_ext_wholesale_cost#23, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : -1751401940,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4138784832,
                "rowCount" : 79592016
              },
              "compileTime" : {
                "sizeInBytes" : 4138784832,
                "rowCount" : 79592016
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_web_page_sk#11 = wp_web_page_sk#58) "
          },
          "0" : {
            "sign" : 929533702,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3502048704,
                "rowCount" : 79592016
              },
              "compileTime" : {
                "sizeInBytes" : 3502048704,
                "rowCount" : 79592016
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#2, ws_order_number#16L, ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33] "
          },
          "2" : {
            "sign" : -20046201,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 875461968,
                "rowCount" : 18238791
              },
              "compileTime" : {
                "sizeInBytes" : 875461968,
                "rowCount" : 18238791
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#2, ws_web_page_sk#11, ws_order_number#16L, ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33] "
          },
          "3" : {
            "sign" : -859525718,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3793668528,
                "rowCount" : 18238791
              },
              "compileTime" : {
                "sizeInBytes" : 3793668528,
                "rowCount" : 18238791
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ws_item_sk#2) AND isnotnull(ws_order_number#16L)) AND isnotnull(ws_web_page_sk#11)) AND isnotnull(ws_sold_date_sk#33)) AND ((((((ws_sales_price#20 >= 100.00) AND (ws_sales_price#20 <= 150.00)) OR ((ws_sales_price#20 >= 50.00) AND (ws_sales_price#20 <= 100.00))) OR ((ws_sales_price#20 >= 150.00) AND (ws_sales_price#20 <= 200.00))) AND ((((ws_net_profit#32 >= 100.00) AND (ws_net_profit#32 <= 200.00)) OR ((ws_net_profit#32 >= 150.00) AND (ws_net_profit#32 <= 300.00))) OR ((ws_net_profit#32 >= 50.00) AND (ws_net_profit#32 <= 250.00)))) AND dynamicpruning#189 [ws_sold_date_sk#33])) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ws_item_sk#2, ws_order_number#16L, ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33]\n+- Join Inner, (ws_web_page_sk#11 = wp_web_page_sk#58)\n   :- Project [ws_item_sk#2, ws_web_page_sk#11, ws_order_number#16L, ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33]\n   :  +- Filter ((((isnotnull(ws_item_sk#2) AND isnotnull(ws_order_number#16L)) AND isnotnull(ws_web_page_sk#11)) AND isnotnull(ws_sold_date_sk#33)) AND ((((((ws_sales_price#20 >= 100.00) AND (ws_sales_price#20 <= 150.00)) OR ((ws_sales_price#20 >= 50.00) AND (ws_sales_price#20 <= 100.00))) OR ((ws_sales_price#20 >= 150.00) AND (ws_sales_price#20 <= 200.00))) AND ((((ws_net_profit#32 >= 100.00) AND (ws_net_profit#32 <= 200.00)) OR ((ws_net_profit#32 >= 150.00) AND (ws_net_profit#32 <= 300.00))) OR ((ws_net_profit#32 >= 50.00) AND (ws_net_profit#32 <= 250.00)))) AND dynamicpruning#189 [ws_sold_date_sk#33]))\n   :     :  +- Project [d_date_sk#94]\n   :     :     +- Filter ((isnotnull(d_year#100) AND (d_year#100 = 1998)) AND isnotnull(d_date_sk#94))\n   :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#94,d_date_id#95,d_date#96,d_month_seq#97,d_week_seq#98,d_quarter_seq#99,d_year#100,d_dow#101,d_moy#102,d_dom#103,d_qoy#104,d_fy_year#105,d_fy_quarter_seq#106,d_fy_week_seq#107,d_day_name#108,d_quarter_name#109,d_holiday#110,d_weekend#111,d_following_holiday#112,d_first_dom#113,d_last_dom#114,d_same_day_ly#115,d_same_day_lq#116,d_current_day#117,... 4 more fields] parquet\n   :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#0,ws_ship_date_sk#1,ws_item_sk#2,ws_bill_customer_sk#3,ws_bill_cdemo_sk#4,ws_bill_hdemo_sk#5,ws_bill_addr_sk#6,ws_ship_customer_sk#7,ws_ship_cdemo_sk#8,ws_ship_hdemo_sk#9,ws_ship_addr_sk#10,ws_web_page_sk#11,ws_web_site_sk#12,ws_ship_mode_sk#13,ws_warehouse_sk#14,ws_promo_sk#15,ws_order_number#16L,ws_quantity#17,ws_wholesale_cost#18,ws_list_price#19,ws_sales_price#20,ws_ext_discount_amt#21,ws_ext_sales_price#22,ws_ext_wholesale_cost#23,... 10 more fields] parquet\n   +- Project [wp_web_page_sk#58]\n      +- Filter isnotnull(wp_web_page_sk#58)\n         +- Relation spark_catalog.tpcds_100.web_page[wp_web_page_sk#58,wp_web_page_id#59,wp_rec_start_date#60,wp_rec_end_date#61,wp_creation_date_sk#62,wp_access_date_sk#63,wp_autogen_flag#64,wp_customer_sk#65,wp_url#66,wp_type#67,wp_char_count#68,wp_link_count#69,wp_image_count#70,wp_max_ad_count#71] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 548099951,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1064896,
            "rowCount" : 2040,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [wp_web_page_sk#58] Arguments: 0 "
          },
          "1" : {
            "sign" : -1305341981,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 4138784832,
            "rowCount" : 79592016,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ws_web_page_sk#11] Right keys [1]: [wp_web_page_sk#58] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : -385234561,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 3502048704,
            "rowCount" : 79592016,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [ws_item_sk#2, ws_order_number#16L, ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33] Input [8]: [ws_item_sk#2, ws_web_page_sk#11, ws_order_number#16L, ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33, wp_web_page_sk#58] "
          },
          "2" : {
            "sign" : -331815693,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 875461968,
            "rowCount" : 18238791,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [7]: [ws_item_sk#2, ws_web_page_sk#11, ws_order_number#16L, ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33] Condition : ((((isnotnull(ws_item_sk#2) AND isnotnull(ws_order_number#16L)) AND isnotnull(ws_web_page_sk#11)) AND ((((ws_sales_price#20 >= 100.00) AND (ws_sales_price#20 <= 150.00)) OR ((ws_sales_price#20 >= 50.00) AND (ws_sales_price#20 <= 100.00))) OR ((ws_sales_price#20 >= 150.00) AND (ws_sales_price#20 <= 200.00)))) AND ((((ws_net_profit#32 >= 100.00) AND (ws_net_profit#32 <= 200.00)) OR ((ws_net_profit#32 >= 150.00) AND (ws_net_profit#32 <= 300.00))) OR ((ws_net_profit#32 >= 50.00) AND (ws_net_profit#32 <= 250.00)))) "
          },
          "3" : {
            "sign" : -13319533,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 875461968,
            "rowCount" : 18238791,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_sales Output [7]: [ws_item_sk#2, ws_web_page_sk#11, ws_order_number#16L, ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales/ws_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ws_sold_date_sk#33), dynamicpruningexpression(ws_sold_date_sk#33 IN dynamicpruning#189)] PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_page_sk), Or(Or(And(GreaterThanOrEqual(ws_sales_price,100.00),LessThanOrEqual(ws_sales_price,150.00)),And(GreaterThanOrEqual(ws_sales_price,50.00),LessThanOrEqual(ws_sales_price,100.00))),And(GreaterThanOrEqual(ws_sales_price,150.00),LessThanOrEqual(ws_sales_price,200.00))), Or(Or(And(GreaterThanOrEqual(ws_net_profit,100.00),LessThanOrEqual(ws_net_profit,200.00)),And(GreaterThanOrEqual(ws_net_profit,150.00),LessThanOrEqual(ws_net_profit,300.00))),And(GreaterThanOrEqual(ws_net_profit,50.00),LessThanOrEqual(ws_net_profit,250.00)))] ReadSchema: struct<ws_item_sk:int,ws_web_page_sk:int,ws_order_number:bigint,ws_quantity:int,ws_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_sales",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ws_item_sk#2, ws_order_number#16L, ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33]\n+- BroadcastHashJoin [ws_web_page_sk#11], [wp_web_page_sk#58], Inner, BuildRight, false\n   :- Filter ((((isnotnull(ws_item_sk#2) AND isnotnull(ws_order_number#16L)) AND isnotnull(ws_web_page_sk#11)) AND ((((ws_sales_price#20 >= 100.00) AND (ws_sales_price#20 <= 150.00)) OR ((ws_sales_price#20 >= 50.00) AND (ws_sales_price#20 <= 100.00))) OR ((ws_sales_price#20 >= 150.00) AND (ws_sales_price#20 <= 200.00)))) AND ((((ws_net_profit#32 >= 100.00) AND (ws_net_profit#32 <= 200.00)) OR ((ws_net_profit#32 >= 150.00) AND (ws_net_profit#32 <= 300.00))) OR ((ws_net_profit#32 >= 50.00) AND (ws_net_profit#32 <= 250.00))))\n   :  +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_item_sk#2,ws_web_page_sk#11,ws_order_number#16L,ws_quantity#17,ws_sales_price#20,ws_net_profit#32,ws_sold_date_sk#33] Batched: true, DataFilters: [isnotnull(ws_item_sk#2), isnotnull(ws_order_number#16L), isnotnull(ws_web_page_sk#11), ((((ws_sa..., Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#33), dynamicpruningexpression(ws_sold_date_sk#33 IN dynamicpruning#189)], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_page_sk), Or(Or(And(GreaterT..., ReadSchema: struct<ws_item_sk:int,ws_web_page_sk:int,ws_order_number:bigint,ws_quantity:int,ws_sales_price:de...\n   :        +- SubqueryBroadcast dynamicpruning#189, 0, [d_date_sk#94], [id=#729]\n   :           +- AdaptiveSparkPlan isFinalPlan=false\n   :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=726]\n   :                 +- Project [d_date_sk#94]\n   :                    +- Filter ((isnotnull(d_year#100) AND (d_year#100 = 1998)) AND isnotnull(d_date_sk#94))\n   :                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#94,d_year#100] Batched: true, DataFilters: [isnotnull(d_year#100), (d_year#100 = 1998), isnotnull(d_date_sk#94)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1998), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n   +- BroadcastQueryStage 0\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=360]\n         +- *(1) Filter isnotnull(wp_web_page_sk#58)\n            +- *(1) ColumnarToRow\n               +- FileScan parquet spark_catalog.tpcds_100.web_page[wp_web_page_sk#58] Batched: true, DataFilters: [isnotnull(wp_web_page_sk#58)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_page], PartitionFilters: [], PushedFilters: [IsNotNull(wp_web_page_sk)], ReadSchema: struct<wp_web_page_sk:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 876526864,
        "inputRowCount" : 18240831
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 11,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 15 ],
      "Objectives" : {
        "DurationInMs" : 14418,
        "TotalTasksDurationInMs" : 27288,
        "IOBytes" : {
          "Total" : 237545159,
          "Details" : {
            "IR" : 223351062,
            "IW" : 0,
            "SR" : 0,
            "SW" : 14194097
          }
        }
      }
    },
    "9" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -739563911,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 311338404,
                "rowCount" : 5987277
              },
              "compileTime" : {
                "sizeInBytes" : 311338404,
                "rowCount" : 5987277
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [wr_item_sk#35, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_order_number#46L, wr_fee#51, wr_refunded_cash#53] "
          },
          "1" : {
            "sign" : -534460129,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 862167888,
                "rowCount" : 5987277
              },
              "compileTime" : {
                "sizeInBytes" : 862167888,
                "rowCount" : 5987277
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(wr_item_sk#35) AND isnotnull(wr_order_number#46L)) AND isnotnull(wr_refunded_cdemo_sk#37)) AND ((isnotnull(wr_returning_cdemo_sk#41) AND isnotnull(wr_refunded_addr_sk#39)) AND isnotnull(wr_reason_sk#45))) AND (might_contain(scalar-subquery#192 [], xxhash64(wr_refunded_addr_sk#39, 42)) AND might_contain(scalar-subquery#195 [], xxhash64(wr_refunded_cdemo_sk#37, 42)))) "
          },
          "2" : {
            "sign" : -1085004784,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1036712016,
                "rowCount" : 7199389
              },
              "compileTime" : {
                "sizeInBytes" : 1036712016,
                "rowCount" : 7199389
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [wr_returned_time_sk#34, wr_item_sk#35, wr_refunded_customer_sk#36, wr_refunded_cdemo_sk#37, wr_refunded_hdemo_sk#38, wr_refunded_addr_sk#39, wr_returning_customer_sk#40, wr_returning_cdemo_sk#41, wr_returning_hdemo_sk#42, wr_returning_addr_sk#43, wr_web_page_sk#44, wr_reason_sk#45, wr_order_number#46L, wr_return_quantity#47, wr_return_amt#48, wr_return_tax#49, wr_return_amt_inc_tax#50, wr_fee#51, wr_return_ship_cost#52, wr_refunded_cash#53, wr_reversed_charge#54, wr_account_credit#55, wr_net_loss#56, wr_returned_date_sk#57], `spark_catalog`.`tpcds_100`.`web_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [wr_item_sk#35, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_order_number#46L, wr_fee#51, wr_refunded_cash#53]\n+- Filter ((((isnotnull(wr_item_sk#35) AND isnotnull(wr_order_number#46L)) AND isnotnull(wr_refunded_cdemo_sk#37)) AND ((isnotnull(wr_returning_cdemo_sk#41) AND isnotnull(wr_refunded_addr_sk#39)) AND isnotnull(wr_reason_sk#45))) AND (might_contain(scalar-subquery#192 [], xxhash64(wr_refunded_addr_sk#39, 42)) AND might_contain(scalar-subquery#195 [], xxhash64(wr_refunded_cdemo_sk#37, 42))))\n   :  :- Aggregate [bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0) AS bloomFilter#191]\n   :  :  +- Project [ca_address_sk#81]\n   :  :     +- Project [ca_address_sk#81]\n   :  :        +- Filter (((isnotnull(ca_country#91) AND (ca_country#91 = United States)) AND isnotnull(ca_address_sk#81)) AND ((ca_state#89 IN (KY,GA,NM) OR ca_state#89 IN (MT,OR,IN)) OR ca_state#89 IN (WI,MO,WV)))\n   :  :           +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#81,ca_address_id#82,ca_street_number#83,ca_street_name#84,ca_street_type#85,ca_suite_number#86,ca_city#87,ca_county#88,ca_state#89,ca_zip#90,ca_country#91,ca_gmt_offset#92,ca_location_type#93] parquet\n   :  +- Aggregate [bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0) AS bloomFilter#194]\n   :     +- Project [cd_demo_sk#72]\n   :        +- Project [cd_demo_sk#72]\n   :           +- Filter ((isnotnull(cd_demo_sk#72) AND (isnotnull(cd_marital_status#74) AND isnotnull(cd_education_status#75))) AND ((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) OR ((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary))) OR ((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree))))\n   :              +- Relation spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#72,cd_gender#73,cd_marital_status#74,cd_education_status#75,cd_purchase_estimate#76,cd_credit_rating#77,cd_dep_count#78,cd_dep_employed_count#79,cd_dep_college_count#80] parquet\n   +- Relation spark_catalog.tpcds_100.web_returns[wr_returned_time_sk#34,wr_item_sk#35,wr_refunded_customer_sk#36,wr_refunded_cdemo_sk#37,wr_refunded_hdemo_sk#38,wr_refunded_addr_sk#39,wr_returning_customer_sk#40,wr_returning_cdemo_sk#41,wr_returning_hdemo_sk#42,wr_returning_addr_sk#43,wr_web_page_sk#44,wr_reason_sk#45,wr_order_number#46L,wr_return_quantity#47,wr_return_amt#48,wr_return_tax#49,wr_return_amt_inc_tax#50,wr_fee#51,wr_return_ship_cost#52,wr_refunded_cash#53,wr_reversed_charge#54,wr_account_credit#55,wr_net_loss#56,wr_returned_date_sk#57] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -984118377,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 311338404,
            "rowCount" : 5987277,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [8]: [wr_item_sk#35, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_order_number#46L, wr_fee#51, wr_refunded_cash#53] Input [9]: [wr_item_sk#35, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_order_number#46L, wr_fee#51, wr_refunded_cash#53, wr_returned_date_sk#57] "
          },
          "1" : {
            "sign" : 1839997775,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 311338404,
            "rowCount" : 5987277,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [9]: [wr_item_sk#35, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_order_number#46L, wr_fee#51, wr_refunded_cash#53, wr_returned_date_sk#57] Condition : (((((((isnotnull(wr_item_sk#35) AND isnotnull(wr_order_number#46L)) AND isnotnull(wr_refunded_cdemo_sk#37)) AND isnotnull(wr_returning_cdemo_sk#41)) AND isnotnull(wr_refunded_addr_sk#39)) AND isnotnull(wr_reason_sk#45)) AND might_contain(Subquery subquery#192, [id=#150], xxhash64(wr_refunded_addr_sk#39, 42))) AND might_contain(Subquery subquery#195, [id=#163], xxhash64(wr_refunded_cdemo_sk#37, 42))) "
          },
          "2" : {
            "sign" : -1037996204,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 311338404,
            "rowCount" : 5987277,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_returns Output [9]: [wr_item_sk#35, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_order_number#46L, wr_fee#51, wr_refunded_cash#53, wr_returned_date_sk#57] Batched: true Location: CatalogFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_returns] PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number), IsNotNull(wr_refunded_cdemo_sk), IsNotNull(wr_returning_cdemo_sk), IsNotNull(wr_refunded_addr_sk), IsNotNull(wr_reason_sk)] ReadSchema: struct<wr_item_sk:int,wr_refunded_cdemo_sk:int,wr_refunded_addr_sk:int,wr_returning_cdemo_sk:int,wr_reason_sk:int,wr_order_number:bigint,wr_fee:decimal(7,2),wr_refunded_cash:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_returns",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [wr_item_sk#35, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_order_number#46L, wr_fee#51, wr_refunded_cash#53]\n+- Filter (((((((isnotnull(wr_item_sk#35) AND isnotnull(wr_order_number#46L)) AND isnotnull(wr_refunded_cdemo_sk#37)) AND isnotnull(wr_returning_cdemo_sk#41)) AND isnotnull(wr_refunded_addr_sk#39)) AND isnotnull(wr_reason_sk#45)) AND might_contain(Subquery subquery#192, [id=#150], xxhash64(wr_refunded_addr_sk#39, 42))) AND might_contain(Subquery subquery#195, [id=#163], xxhash64(wr_refunded_cdemo_sk#37, 42)))\n   :  :- Subquery subquery#192, [id=#150]\n   :  :  +- AdaptiveSparkPlan isFinalPlan=false\n   :  :     +- ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0)], output=[bloomFilter#191])\n   :  :        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=148]\n   :  :           +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0)], output=[buf#210])\n   :  :              +- Project [ca_address_sk#81]\n   :  :                 +- Filter (((isnotnull(ca_country#91) AND (ca_country#91 = United States)) AND isnotnull(ca_address_sk#81)) AND ((ca_state#89 IN (KY,GA,NM) OR ca_state#89 IN (MT,OR,IN)) OR ca_state#89 IN (WI,MO,WV)))\n   :  :                    +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#81,ca_state#89,ca_country#91] Batched: true, DataFilters: [isnotnull(ca_country#91), (ca_country#91 = United States), isnotnull(ca_address_sk#81), ((ca_sta..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk), Or(Or(In(ca_..., ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>\n   :  +- Subquery subquery#195, [id=#163]\n   :     +- AdaptiveSparkPlan isFinalPlan=false\n   :        +- ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0)], output=[bloomFilter#194])\n   :           +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=161]\n   :              +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0)], output=[buf#211])\n   :                 +- Project [cd_demo_sk#72]\n   :                    +- Filter (((isnotnull(cd_demo_sk#72) AND isnotnull(cd_marital_status#74)) AND isnotnull(cd_education_status#75)) AND ((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) OR ((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary))) OR ((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree))))\n   :                       +- FileScan parquet spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#72,cd_marital_status#74,cd_education_status#75] Batched: true, DataFilters: [isnotnull(cd_demo_sk#72), isnotnull(cd_marital_status#74), isnotnull(cd_education_status#75), ((..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), Or(Or(And(E..., ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>\n   +- FileScan parquet spark_catalog.tpcds_100.web_returns[wr_item_sk#35,wr_refunded_cdemo_sk#37,wr_refunded_addr_sk#39,wr_returning_cdemo_sk#41,wr_reason_sk#45,wr_order_number#46L,wr_fee#51,wr_refunded_cash#53,wr_returned_date_sk#57] Batched: true, DataFilters: [isnotnull(wr_item_sk#35), isnotnull(wr_order_number#46L), isnotnull(wr_refunded_cdemo_sk#37), is..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_returns], PartitionFilters: [], PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number), IsNotNull(wr_refunded_cdemo_sk), IsNotNull(wr..., ReadSchema: struct<wr_item_sk:int,wr_refunded_cdemo_sk:int,wr_refunded_addr_sk:int,wr_returning_cdemo_sk:int,...\n"
      },
      "IM" : {
        "inputSizeInBytes" : 311338404,
        "inputRowCount" : 5987277
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 13 ],
      "Objectives" : {
        "DurationInMs" : 8158,
        "TotalTasksDurationInMs" : 93384,
        "IOBytes" : {
          "Total" : 240618157,
          "Details" : {
            "IR" : 233869817,
            "IW" : 0,
            "SR" : 0,
            "SW" : 6748340
          }
        }
      }
    },
    "13" : {
      "QSLogical" : {
        "operators" : {
          "8" : {
            "sign" : -1636019467,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 25165824,
                "rowCount" : 164640
              },
              "compileTime" : {
                "sizeInBytes" : 7519107,
                "rowCount" : 159981
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cd_demo_sk#72, cd_marital_status#74, cd_education_status#75], BroadcastQueryStage 3 "
          },
          "4" : {
            "sign" : 618881386,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 681980050311168,
                "rowCount" : 10655938286112
              },
              "compileTime" : {
                "sizeInBytes" : 681980050311168,
                "rowCount" : 10655938286112
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53] "
          },
          "5" : {
            "sign" : -568354674,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 937722569177856,
                "rowCount" : 10655938286112
              },
              "compileTime" : {
                "sizeInBytes" : 937722569177856,
                "rowCount" : 10655938286112
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ws_item_sk#2 = wr_item_sk#35) AND (ws_order_number#16L = wr_order_number#46L)) "
          },
          "6" : {
            "sign" : 573380113,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 28358456,
                "rowCount" : 506401
              },
              "compileTime" : {
                "sizeInBytes" : 3502048704,
                "rowCount" : 79592016
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_item_sk#2, ws_order_number#16L, ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33], ShuffleQueryStage 7 "
          },
          "1" : {
            "sign" : 849778119,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 37642944472925991398277120,
                "rowCount" : 392114004926312410398720
              },
              "compileTime" : {
                "sizeInBytes" : 37642944472925991398277120,
                "rowCount" : 392114004926312410398720
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) AND (ws_sales_price#20 >= 100.00)) AND (ws_sales_price#20 <= 150.00)) OR ((((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary)) AND (ws_sales_price#20 >= 50.00)) AND (ws_sales_price#20 <= 100.00))) OR ((((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree)) AND (ws_sales_price#20 >= 150.00)) AND (ws_sales_price#20 <= 200.00))) AND (cd_demo_sk#72 = wr_refunded_cdemo_sk#37)) "
          },
          "0" : {
            "sign" : -931136886,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 31369120394104992831897600,
                "rowCount" : 392114004926312410398720
              },
              "compileTime" : {
                "sizeInBytes" : 31369120394104992831897600,
                "rowCount" : 392114004926312410398720
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sold_date_sk#33, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53, cd_marital_status#74, cd_education_status#75] "
          },
          "2" : {
            "sign" : 259561546,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 123845531196357175296,
                "rowCount" : 2381644830699176448
              },
              "compileTime" : {
                "sizeInBytes" : 123845531196357175296,
                "rowCount" : 2381644830699176448
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_quantity#17, ws_sales_price#20, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53] "
          },
          "7" : {
            "sign" : 839713181,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 24777048,
                "rowCount" : 223504
              },
              "compileTime" : {
                "sizeInBytes" : 3973138,
                "rowCount" : 152813
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#81, ca_state#89], BroadcastQueryStage 2 "
          },
          "3" : {
            "sign" : -957879584,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 209584745101527527424,
                "rowCount" : 2381644830699176448
              },
              "compileTime" : {
                "sizeInBytes" : 209584745101527527424,
                "rowCount" : 2381644830699176448
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ca_address_sk#81 = wr_refunded_addr_sk#39) AND ((((ca_state#89 IN (KY,GA,NM) AND (ws_net_profit#32 >= 100.00)) AND (ws_net_profit#32 <= 200.00)) OR ((ca_state#89 IN (MT,OR,IN) AND (ws_net_profit#32 >= 150.00)) AND (ws_net_profit#32 <= 300.00))) OR ((ca_state#89 IN (WI,MO,WV) AND (ws_net_profit#32 >= 50.00)) AND (ws_net_profit#32 <= 250.00)))) "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ws_quantity#17, ws_sold_date_sk#33, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53, cd_marital_status#74, cd_education_status#75]\n+- Join Inner, (((((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) AND (ws_sales_price#20 >= 100.00)) AND (ws_sales_price#20 <= 150.00)) OR ((((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary)) AND (ws_sales_price#20 >= 50.00)) AND (ws_sales_price#20 <= 100.00))) OR ((((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree)) AND (ws_sales_price#20 >= 150.00)) AND (ws_sales_price#20 <= 200.00))) AND (cd_demo_sk#72 = wr_refunded_cdemo_sk#37))\n   :- Project [ws_quantity#17, ws_sales_price#20, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53]\n   :  +- Join Inner, ((ca_address_sk#81 = wr_refunded_addr_sk#39) AND ((((ca_state#89 IN (KY,GA,NM) AND (ws_net_profit#32 >= 100.00)) AND (ws_net_profit#32 <= 200.00)) OR ((ca_state#89 IN (MT,OR,IN) AND (ws_net_profit#32 >= 150.00)) AND (ws_net_profit#32 <= 300.00))) OR ((ca_state#89 IN (WI,MO,WV) AND (ws_net_profit#32 >= 50.00)) AND (ws_net_profit#32 <= 250.00))))\n   :     :- Project [ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53]\n   :     :  +- Join Inner, ((ws_item_sk#2 = wr_item_sk#35) AND (ws_order_number#16L = wr_order_number#46L))\n   :     :     :- LogicalQueryStage Project [ws_item_sk#2, ws_order_number#16L, ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33], ShuffleQueryStage 7\n   :     :     +- LogicalQueryStage Project [wr_item_sk#35, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_order_number#46L, wr_fee#51, wr_refunded_cash#53], ShuffleQueryStage 1\n   :     +- LogicalQueryStage Project [ca_address_sk#81, ca_state#89], BroadcastQueryStage 2\n   +- LogicalQueryStage Project [cd_demo_sk#72, cd_marital_status#74, cd_education_status#75], BroadcastQueryStage 3\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : 1726276255,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 24777048,
            "rowCount" : 223504,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [ca_address_sk#81, ca_state#89] Arguments: 2 "
          },
          "4" : {
            "sign" : -1385607090,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 681980050311168,
            "rowCount" : 10655938286112,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [10]: [ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53] Input [14]: [ws_item_sk#2, ws_order_number#16L, ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33, wr_item_sk#35, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_order_number#46L, wr_fee#51, wr_refunded_cash#53] "
          },
          "9" : {
            "sign" : -1466029537,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 25165824,
            "rowCount" : 164640,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [3]: [cd_demo_sk#72, cd_marital_status#74, cd_education_status#75] Arguments: 3 "
          },
          "5" : {
            "sign" : -117160720,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 937722569177856,
            "rowCount" : 10655938286112,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [2]: [ws_item_sk#2, ws_order_number#16L] Right keys [2]: [wr_item_sk#35, wr_order_number#46L] Join type: Inner Join condition: None "
          },
          "6" : {
            "sign" : 1917363182,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 28358456,
            "rowCount" : 506401,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [6]: [ws_item_sk#2, ws_order_number#16L, ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33] Arguments: 7 "
          },
          "1" : {
            "sign" : -949281381,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 37642944472925991398277120,
            "rowCount" : 392114004926312410398720,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [wr_refunded_cdemo_sk#37] Right keys [1]: [cd_demo_sk#72] Join type: Inner Join condition: ((((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) AND (ws_sales_price#20 >= 100.00)) AND (ws_sales_price#20 <= 150.00)) OR ((((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary)) AND (ws_sales_price#20 >= 50.00)) AND (ws_sales_price#20 <= 100.00))) OR ((((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree)) AND (ws_sales_price#20 >= 150.00)) AND (ws_sales_price#20 <= 200.00))) "
          },
          "0" : {
            "sign" : 218946346,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 31369120394104992831897600,
            "rowCount" : 392114004926312410398720,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [8]: [ws_quantity#17, ws_sold_date_sk#33, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53, cd_marital_status#74, cd_education_status#75] Input [11]: [ws_quantity#17, ws_sales_price#20, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53, cd_demo_sk#72, cd_marital_status#74, cd_education_status#75] "
          },
          "2" : {
            "sign" : -1481907256,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 123845531196357175296,
            "rowCount" : 2381644830699176448,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [8]: [ws_quantity#17, ws_sales_price#20, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53] Input [12]: [ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53, ca_address_sk#81, ca_state#89] "
          },
          "7" : {
            "sign" : -712857410,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 41943040,
            "rowCount" : 133882,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [8]: [wr_item_sk#35, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_order_number#46L, wr_fee#51, wr_refunded_cash#53] Arguments: 8 "
          },
          "3" : {
            "sign" : 3676640,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 209584745101527527424,
            "rowCount" : 2381644830699176448,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [wr_refunded_addr_sk#39] Right keys [1]: [ca_address_sk#81] Join type: Inner Join condition: ((((ca_state#89 IN (KY,GA,NM) AND (ws_net_profit#32 >= 100.00)) AND (ws_net_profit#32 <= 200.00)) OR ((ca_state#89 IN (MT,OR,IN) AND (ws_net_profit#32 >= 150.00)) AND (ws_net_profit#32 <= 300.00))) OR ((ca_state#89 IN (WI,MO,WV) AND (ws_net_profit#32 >= 50.00)) AND (ws_net_profit#32 <= 250.00))) "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "ShuffleQueryStage",
          "toId" : 5,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "BroadcastQueryStage",
          "toId" : 5,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "BroadcastHashJoin",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "BroadcastQueryStage",
          "toId" : 3,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "BroadcastHashJoin",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ws_quantity#17, ws_sold_date_sk#33, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53, cd_marital_status#74, cd_education_status#75]\n+- BroadcastHashJoin [wr_refunded_cdemo_sk#37], [cd_demo_sk#72], Inner, BuildRight, ((((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) AND (ws_sales_price#20 >= 100.00)) AND (ws_sales_price#20 <= 150.00)) OR ((((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary)) AND (ws_sales_price#20 >= 50.00)) AND (ws_sales_price#20 <= 100.00))) OR ((((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree)) AND (ws_sales_price#20 >= 150.00)) AND (ws_sales_price#20 <= 200.00))), false\n   :- Project [ws_quantity#17, ws_sales_price#20, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53]\n   :  +- BroadcastHashJoin [wr_refunded_addr_sk#39], [ca_address_sk#81], Inner, BuildRight, ((((ca_state#89 IN (KY,GA,NM) AND (ws_net_profit#32 >= 100.00)) AND (ws_net_profit#32 <= 200.00)) OR ((ca_state#89 IN (MT,OR,IN) AND (ws_net_profit#32 >= 150.00)) AND (ws_net_profit#32 <= 300.00))) OR ((ca_state#89 IN (WI,MO,WV) AND (ws_net_profit#32 >= 50.00)) AND (ws_net_profit#32 <= 250.00))), false\n   :     :- Project [ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53]\n   :     :  +- BroadcastHashJoin [ws_item_sk#2, ws_order_number#16L], [wr_item_sk#35, wr_order_number#46L], Inner, BuildRight, false\n   :     :     :- ShuffleQueryStage 7\n   :     :     :  +- Exchange hashpartitioning(ws_item_sk#2, ws_order_number#16L, 200), ENSURE_REQUIREMENTS, [plan_id=755]\n   :     :     :     +- *(8) Project [ws_item_sk#2, ws_order_number#16L, ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33]\n   :     :     :        +- *(8) BroadcastHashJoin [ws_web_page_sk#11], [wp_web_page_sk#58], Inner, BuildRight, false\n   :     :     :           :- *(8) Filter ((((isnotnull(ws_item_sk#2) AND isnotnull(ws_order_number#16L)) AND isnotnull(ws_web_page_sk#11)) AND ((((ws_sales_price#20 >= 100.00) AND (ws_sales_price#20 <= 150.00)) OR ((ws_sales_price#20 >= 50.00) AND (ws_sales_price#20 <= 100.00))) OR ((ws_sales_price#20 >= 150.00) AND (ws_sales_price#20 <= 200.00)))) AND ((((ws_net_profit#32 >= 100.00) AND (ws_net_profit#32 <= 200.00)) OR ((ws_net_profit#32 >= 150.00) AND (ws_net_profit#32 <= 300.00))) OR ((ws_net_profit#32 >= 50.00) AND (ws_net_profit#32 <= 250.00))))\n   :     :     :           :  +- *(8) ColumnarToRow\n   :     :     :           :     +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_item_sk#2,ws_web_page_sk#11,ws_order_number#16L,ws_quantity#17,ws_sales_price#20,ws_net_profit#32,ws_sold_date_sk#33] Batched: true, DataFilters: [isnotnull(ws_item_sk#2), isnotnull(ws_order_number#16L), isnotnull(ws_web_page_sk#11), ((((ws_sa..., Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#33), dynamicpruningexpression(ws_sold_date_sk#33 IN dynamicpruning#189)], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_page_sk), Or(Or(And(GreaterT..., ReadSchema: struct<ws_item_sk:int,ws_web_page_sk:int,ws_order_number:bigint,ws_quantity:int,ws_sales_price:de...\n   :     :     :           :           +- SubqueryBroadcast dynamicpruning#189, 0, [d_date_sk#94], [id=#729]\n   :     :     :           :              +- AdaptiveSparkPlan isFinalPlan=true\n                                             +- == Final Plan ==\n                                                BroadcastQueryStage 1\n                                                +- ReusedExchange [d_date_sk#94], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=480]\n                                             +- == Initial Plan ==\n                                                BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=726]\n                                                +- Project [d_date_sk#94]\n                                                   +- Filter ((isnotnull(d_year#100) AND (d_year#100 = 1998)) AND isnotnull(d_date_sk#94))\n                                                      +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#94,d_year#100] Batched: true, DataFilters: [isnotnull(d_year#100), (d_year#100 = 1998), isnotnull(d_date_sk#94)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1998), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n   :     :     :           +- BroadcastQueryStage 0\n   :     :     :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=360]\n   :     :     :                 +- *(1) Filter isnotnull(wp_web_page_sk#58)\n   :     :     :                    +- *(1) ColumnarToRow\n   :     :     :                       +- FileScan parquet spark_catalog.tpcds_100.web_page[wp_web_page_sk#58] Batched: true, DataFilters: [isnotnull(wp_web_page_sk#58)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_page], PartitionFilters: [], PushedFilters: [IsNotNull(wp_web_page_sk)], ReadSchema: struct<wp_web_page_sk:int>\n   :     :     +- BroadcastQueryStage 8\n   :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, true], input[5, bigint, true]),false), [plan_id=1040]\n   :     :           +- AQEShuffleRead local\n   :     :              +- ShuffleQueryStage 1\n   :     :                 +- Exchange hashpartitioning(wr_item_sk#35, wr_order_number#46L, 200), ENSURE_REQUIREMENTS, [plan_id=381]\n   :     :                    +- *(2) Project [wr_item_sk#35, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_order_number#46L, wr_fee#51, wr_refunded_cash#53]\n   :     :                       +- *(2) Filter (((((((isnotnull(wr_item_sk#35) AND isnotnull(wr_order_number#46L)) AND isnotnull(wr_refunded_cdemo_sk#37)) AND isnotnull(wr_returning_cdemo_sk#41)) AND isnotnull(wr_refunded_addr_sk#39)) AND isnotnull(wr_reason_sk#45)) AND might_contain(Subquery subquery#192, [id=#150], xxhash64(wr_refunded_addr_sk#39, 42))) AND might_contain(Subquery subquery#195, [id=#163], xxhash64(wr_refunded_cdemo_sk#37, 42)))\n   :     :                          :  :- Subquery subquery#192, [id=#150]\n   :     :                          :  :  +- AdaptiveSparkPlan isFinalPlan=true\n                                             +- == Final Plan ==\n                                                ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0)], output=[bloomFilter#191])\n                                                +- ShuffleQueryStage 0\n                                                   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=524]\n                                                      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0)], output=[buf#210])\n                                                         +- *(1) Project [ca_address_sk#81]\n                                                            +- *(1) Filter (((isnotnull(ca_country#91) AND (ca_country#91 = United States)) AND isnotnull(ca_address_sk#81)) AND ((ca_state#89 IN (KY,GA,NM) OR ca_state#89 IN (MT,OR,IN)) OR ca_state#89 IN (WI,MO,WV)))\n                                                               +- *(1) ColumnarToRow\n                                                                  +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#81,ca_state#89,ca_country#91] Batched: true, DataFilters: [isnotnull(ca_country#91), (ca_country#91 = United States), isnotnull(ca_address_sk#81), ((ca_sta..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk), Or(Or(In(ca_..., ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>\n                                             +- == Initial Plan ==\n                                                ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0)], output=[bloomFilter#191])\n                                                +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=148]\n                                                   +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0)], output=[buf#210])\n                                                      +- Project [ca_address_sk#81]\n                                                         +- Filter (((isnotnull(ca_country#91) AND (ca_country#91 = United States)) AND isnotnull(ca_address_sk#81)) AND ((ca_state#89 IN (KY,GA,NM) OR ca_state#89 IN (MT,OR,IN)) OR ca_state#89 IN (WI,MO,WV)))\n                                                            +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#81,ca_state#89,ca_country#91] Batched: true, DataFilters: [isnotnull(ca_country#91), (ca_country#91 = United States), isnotnull(ca_address_sk#81), ((ca_sta..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk), Or(Or(In(ca_..., ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>\n   :     :                          :  +- Subquery subquery#195, [id=#163]\n   :     :                          :     +- AdaptiveSparkPlan isFinalPlan=true\n                                             +- == Final Plan ==\n                                                ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0)], output=[bloomFilter#194])\n                                                +- ShuffleQueryStage 0\n                                                   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=510]\n                                                      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0)], output=[buf#211])\n                                                         +- *(1) Project [cd_demo_sk#72]\n                                                            +- *(1) Filter (((isnotnull(cd_demo_sk#72) AND isnotnull(cd_marital_status#74)) AND isnotnull(cd_education_status#75)) AND ((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) OR ((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary))) OR ((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree))))\n                                                               +- *(1) ColumnarToRow\n                                                                  +- FileScan parquet spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#72,cd_marital_status#74,cd_education_status#75] Batched: true, DataFilters: [isnotnull(cd_demo_sk#72), isnotnull(cd_marital_status#74), isnotnull(cd_education_status#75), ((..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), Or(Or(And(E..., ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>\n                                             +- == Initial Plan ==\n                                                ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0)], output=[bloomFilter#194])\n                                                +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=161]\n                                                   +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0)], output=[buf#211])\n                                                      +- Project [cd_demo_sk#72]\n                                                         +- Filter (((isnotnull(cd_demo_sk#72) AND isnotnull(cd_marital_status#74)) AND isnotnull(cd_education_status#75)) AND ((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) OR ((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary))) OR ((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree))))\n                                                            +- FileScan parquet spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#72,cd_marital_status#74,cd_education_status#75] Batched: true, DataFilters: [isnotnull(cd_demo_sk#72), isnotnull(cd_marital_status#74), isnotnull(cd_education_status#75), ((..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), Or(Or(And(E..., ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>\n   :     :                          +- *(2) ColumnarToRow\n   :     :                             +- FileScan parquet spark_catalog.tpcds_100.web_returns[wr_item_sk#35,wr_refunded_cdemo_sk#37,wr_refunded_addr_sk#39,wr_returning_cdemo_sk#41,wr_reason_sk#45,wr_order_number#46L,wr_fee#51,wr_refunded_cash#53,wr_returned_date_sk#57] Batched: true, DataFilters: [isnotnull(wr_item_sk#35), isnotnull(wr_order_number#46L), isnotnull(wr_refunded_cdemo_sk#37), is..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_returns], PartitionFilters: [], PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number), IsNotNull(wr_refunded_cdemo_sk), IsNotNull(wr..., ReadSchema: struct<wr_item_sk:int,wr_refunded_cdemo_sk:int,wr_refunded_addr_sk:int,wr_returning_cdemo_sk:int,...\n   :     +- BroadcastQueryStage 2\n   :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=404]\n   :           +- *(3) Project [ca_address_sk#81, ca_state#89]\n   :              +- *(3) Filter (((isnotnull(ca_country#91) AND (ca_country#91 = United States)) AND isnotnull(ca_address_sk#81)) AND ((ca_state#89 IN (KY,GA,NM) OR ca_state#89 IN (MT,OR,IN)) OR ca_state#89 IN (WI,MO,WV)))\n   :                 +- *(3) ColumnarToRow\n   :                    +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#81,ca_state#89,ca_country#91] Batched: true, DataFilters: [isnotnull(ca_country#91), (ca_country#91 = United States), isnotnull(ca_address_sk#81), ((ca_sta..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk), Or(Or(In(ca_..., ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>\n   +- BroadcastQueryStage 3\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=423]\n         +- *(4) Filter (((isnotnull(cd_demo_sk#72) AND isnotnull(cd_marital_status#74)) AND isnotnull(cd_education_status#75)) AND ((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) OR ((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary))) OR ((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree))))\n            +- *(4) ColumnarToRow\n               +- FileScan parquet spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#72,cd_marital_status#74,cd_education_status#75] Batched: true, DataFilters: [isnotnull(cd_demo_sk#72), isnotnull(cd_marital_status#74), isnotnull(cd_education_status#75), ((..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), Or(Or(And(E..., ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 120244368,
        "inputRowCount" : 1028427
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "4" : [ 72525, 75414, 73404, 75649, 76416, 73416, 71833, 74833, 73576, 75103, 76336, 73750, 75045, 73793, 75271, 75779, 74333, 78286, 74403, 74608, 74057, 76607, 73429, 74184, 75029, 75861, 76200, 71942, 75220, 77816, 74437, 76405, 76480, 72150, 73556, 77591, 74283, 74723, 75332, 74404, 74794, 76086, 74095, 74352, 75834, 71552, 71699, 73572, 74704, 73598, 73411, 77457, 73737, 74581, 71500, 73677, 77987, 71081, 72623, 72931, 76457, 73100, 71914, 74796, 73506, 77356, 75337, 72037, 74014, 74784, 75867, 74077, 75666, 75664, 75456, 74053, 76321, 74603, 73141, 75819, 76002, 74086, 73924, 71506, 73766, 72099, 72563, 73317, 75983, 76070, 77196, 74914, 73587, 75008, 73476, 73375, 76253, 75341, 73780, 73802, 75418, 77828, 73819, 75466, 76591, 74092, 75132, 76367, 76288, 73315, 74819, 72549, 73115, 73048, 73901, 74007, 75329, 76555, 75427, 76075, 74364, 76349, 76394, 75894, 76831, 72690, 74935, 73622, 75733, 76239, 71065, 73321, 76503, 74386, 72669, 70817, 74489, 74404, 73873, 73895, 74291, 73654, 73246, 76160, 72255, 73374, 72784, 73297, 72503, 75494, 73994, 75241, 73864, 71995, 74760, 74494, 74365, 75422, 74979, 72808, 76032, 74812, 71863, 74466, 74293, 71803, 75763, 76249, 73480, 74515, 71459, 73678, 75291, 73816, 74182, 73432, 76249, 74523, 74141, 76134, 73213, 75009, 71786, 73221, 74623, 74679, 75136, 74892, 74866, 73396, 73158, 74339, 74217, 74807, 75522, 75400, 75272, 75656, 74441, 76035 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 13,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 19 ],
      "Objectives" : {
        "DurationInMs" : 1837,
        "TotalTasksDurationInMs" : 1831,
        "IOBytes" : {
          "Total" : 14211072,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 14194097,
            "SW" : 16975
          }
        }
      }
    },
    "16" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1556987377,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5200,
                "rowCount" : 100
              },
              "compileTime" : {
                "sizeInBytes" : 5200,
                "rowCount" : 100
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "1" : {
            "sign" : -910878186,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 350896546000000,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 350896546000000,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 362670663,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 350896546000000,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 350896546000000,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [substr(r_reason_desc, 1, 20)#178 ASC NULLS FIRST, avg(ws_quantity)#179 ASC NULLS FIRST, avg(wr_refunded_cash)#180 ASC NULLS FIRST, avg(wr_fee)#181 ASC NULLS FIRST], true "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [substr(r_reason_desc, 1, 20)#178 ASC NULLS FIRST, avg(ws_quantity)#179 ASC NULLS FIRST, avg(wr_refunded_cash)#180 ASC NULLS FIRST, avg(wr_fee)#181 ASC NULLS FIRST], true\n      +- Aggregate [r_reason_desc#124], [substr(r_reason_desc#124, 1, 20) AS substr(r_reason_desc, 1, 20)#178, avg(ws_quantity#17) AS avg(ws_quantity)#179, cast((avg(UnscaledValue(wr_refunded_cash#53)) / 100.0) as decimal(11,6)) AS avg(wr_refunded_cash)#180, cast((avg(UnscaledValue(wr_fee#51)) / 100.0) as decimal(11,6)) AS avg(wr_fee)#181]\n         +- Project [ws_quantity#17, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124]\n            +- Join Inner, (ws_sold_date_sk#33 = d_date_sk#94)\n               :- Project [ws_quantity#17, ws_sold_date_sk#33, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124]\n               :  +- Join Inner, (r_reason_sk#122 = wr_reason_sk#45)\n               :     :- Project [ws_quantity#17, ws_sold_date_sk#33, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53]\n               :     :  +- Join Inner, (((cd_demo_sk#165 = wr_returning_cdemo_sk#41) AND (cd_marital_status#74 = cd_marital_status#167)) AND (cd_education_status#75 = cd_education_status#168))\n               :     :     :- LogicalQueryStage Project [ws_quantity#17, ws_sold_date_sk#33, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53, cd_marital_status#74, cd_education_status#75], ShuffleQueryStage 9\n               :     :     +- LogicalQueryStage Project [cd_demo_sk#165, cd_marital_status#167, cd_education_status#168], ShuffleQueryStage 4\n               :     +- LogicalQueryStage Project [r_reason_sk#122, r_reason_desc#124], BroadcastQueryStage 5\n               +- LogicalQueryStage Project [d_date_sk#94], BroadcastQueryStage 6\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1301045320,
            "className" : "org.apache.spark.sql.execution.TakeOrderedAndProjectExec",
            "sizeInBytes" : 5200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) TakeOrderedAndProject Input [4]: [substr(r_reason_desc, 1, 20)#178, avg(ws_quantity)#179, avg(wr_refunded_cash)#180, avg(wr_fee)#181] Arguments: 100, [substr(r_reason_desc, 1, 20)#178 ASC NULLS FIRST, avg(ws_quantity)#179 ASC NULLS FIRST, avg(wr_refunded_cash)#180 ASC NULLS FIRST, avg(wr_fee)#181 ASC NULLS FIRST], [substr(r_reason_desc, 1, 20)#178, avg(ws_quantity)#179, avg(wr_refunded_cash)#180, avg(wr_fee)#181] "
          },
          "1" : {
            "sign" : -1801013036,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 4344,
            "rowCount" : 52,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [7]: [r_reason_desc#124, sum#204, count#205L, sum#206, count#207L, sum#208, count#209L] Keys [1]: [r_reason_desc#124] Functions [3]: [avg(ws_quantity#17), avg(UnscaledValue(wr_refunded_cash#53)), avg(UnscaledValue(wr_fee#51))] Aggregate Attributes [3]: [avg(ws_quantity#17)#175, avg(UnscaledValue(wr_refunded_cash#53))#176, avg(UnscaledValue(wr_fee#51))#177] Results [4]: [substr(r_reason_desc#124, 1, 20) AS substr(r_reason_desc, 1, 20)#178, avg(ws_quantity#17)#175 AS avg(ws_quantity)#179, cast((avg(UnscaledValue(wr_refunded_cash#53))#176 / 100.0) as decimal(11,6)) AS avg(wr_refunded_cash)#180, cast((avg(UnscaledValue(wr_fee#51))#177 / 100.0) as decimal(11,6)) AS avg(wr_fee)#181] "
          },
          "2" : {
            "sign" : 1640915099,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 350896546000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [7]: [r_reason_desc#124, sum#204, count#205L, sum#206, count#207L, sum#208, count#209L] Arguments: 11 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "ShuffleQueryStage",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "TakeOrderedAndProject",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "TakeOrderedAndProject(limit=100, orderBy=[substr(r_reason_desc, 1, 20)#178 ASC NULLS FIRST,avg(ws_quantity)#179 ASC NULLS FIRST,avg(wr_refunded_cash)#180 ASC NULLS FIRST,avg(wr_fee)#181 ASC NULLS FIRST], output=[substr(r_reason_desc, 1, 20)#178,avg(ws_quantity)#179,avg(wr_refunded_cash)#180,avg(wr_fee)#181])\n+- HashAggregate(keys=[r_reason_desc#124], functions=[avg(ws_quantity#17), avg(UnscaledValue(wr_refunded_cash#53)), avg(UnscaledValue(wr_fee#51))], output=[substr(r_reason_desc, 1, 20)#178, avg(ws_quantity)#179, avg(wr_refunded_cash)#180, avg(wr_fee)#181])\n   +- ShuffleQueryStage 11\n      +- Exchange hashpartitioning(r_reason_desc#124, 200), ENSURE_REQUIREMENTS, [plan_id=1452]\n         +- *(10) HashAggregate(keys=[r_reason_desc#124], functions=[partial_avg(ws_quantity#17), partial_avg(UnscaledValue(wr_refunded_cash#53)), partial_avg(UnscaledValue(wr_fee#51))], output=[r_reason_desc#124, sum#204, count#205L, sum#206, count#207L, sum#208, count#209L])\n            +- *(10) Project [ws_quantity#17, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124]\n               +- *(10) BroadcastHashJoin [ws_sold_date_sk#33], [d_date_sk#94], Inner, BuildRight, false\n                  :- *(10) Project [ws_quantity#17, ws_sold_date_sk#33, wr_fee#51, wr_refunded_cash#53, r_reason_desc#124]\n                  :  +- *(10) BroadcastHashJoin [wr_reason_sk#45], [r_reason_sk#122], Inner, BuildRight, false\n                  :     :- *(10) Project [ws_quantity#17, ws_sold_date_sk#33, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53]\n                  :     :  +- *(10) BroadcastHashJoin [wr_returning_cdemo_sk#41, cd_marital_status#74, cd_education_status#75], [cd_demo_sk#165, cd_marital_status#167, cd_education_status#168], Inner, BuildLeft, false\n                  :     :     :- BroadcastQueryStage 10\n                  :     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[2, int, true], input[6, string, true], input[7, string, true]),false), [plan_id=1358]\n                  :     :     :     +- AQEShuffleRead local\n                  :     :     :        +- ShuffleQueryStage 9\n                  :     :     :           +- Exchange hashpartitioning(wr_returning_cdemo_sk#41, cd_marital_status#74, cd_education_status#75, 200), ENSURE_REQUIREMENTS, [plan_id=1262]\n                  :     :     :              +- *(9) Project [ws_quantity#17, ws_sold_date_sk#33, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53, cd_marital_status#74, cd_education_status#75]\n                  :     :     :                 +- *(9) BroadcastHashJoin [wr_refunded_cdemo_sk#37], [cd_demo_sk#72], Inner, BuildRight, ((((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) AND (ws_sales_price#20 >= 100.00)) AND (ws_sales_price#20 <= 150.00)) OR ((((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary)) AND (ws_sales_price#20 >= 50.00)) AND (ws_sales_price#20 <= 100.00))) OR ((((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree)) AND (ws_sales_price#20 >= 150.00)) AND (ws_sales_price#20 <= 200.00))), false\n                  :     :     :                    :- *(9) Project [ws_quantity#17, ws_sales_price#20, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53]\n                  :     :     :                    :  +- *(9) BroadcastHashJoin [wr_refunded_addr_sk#39], [ca_address_sk#81], Inner, BuildRight, ((((ca_state#89 IN (KY,GA,NM) AND (ws_net_profit#32 >= 100.00)) AND (ws_net_profit#32 <= 200.00)) OR ((ca_state#89 IN (MT,OR,IN) AND (ws_net_profit#32 >= 150.00)) AND (ws_net_profit#32 <= 300.00))) OR ((ca_state#89 IN (WI,MO,WV) AND (ws_net_profit#32 >= 50.00)) AND (ws_net_profit#32 <= 250.00))), false\n                  :     :     :                    :     :- *(9) Project [ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53]\n                  :     :     :                    :     :  +- *(9) BroadcastHashJoin [ws_item_sk#2, ws_order_number#16L], [wr_item_sk#35, wr_order_number#46L], Inner, BuildRight, false\n                  :     :     :                    :     :     :- AQEShuffleRead local\n                  :     :     :                    :     :     :  +- ShuffleQueryStage 7\n                  :     :     :                    :     :     :     +- Exchange hashpartitioning(ws_item_sk#2, ws_order_number#16L, 200), ENSURE_REQUIREMENTS, [plan_id=755]\n                  :     :     :                    :     :     :        +- *(8) Project [ws_item_sk#2, ws_order_number#16L, ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33]\n                  :     :     :                    :     :     :           +- *(8) BroadcastHashJoin [ws_web_page_sk#11], [wp_web_page_sk#58], Inner, BuildRight, false\n                  :     :     :                    :     :     :              :- *(8) Filter ((((isnotnull(ws_item_sk#2) AND isnotnull(ws_order_number#16L)) AND isnotnull(ws_web_page_sk#11)) AND ((((ws_sales_price#20 >= 100.00) AND (ws_sales_price#20 <= 150.00)) OR ((ws_sales_price#20 >= 50.00) AND (ws_sales_price#20 <= 100.00))) OR ((ws_sales_price#20 >= 150.00) AND (ws_sales_price#20 <= 200.00)))) AND ((((ws_net_profit#32 >= 100.00) AND (ws_net_profit#32 <= 200.00)) OR ((ws_net_profit#32 >= 150.00) AND (ws_net_profit#32 <= 300.00))) OR ((ws_net_profit#32 >= 50.00) AND (ws_net_profit#32 <= 250.00))))\n                  :     :     :                    :     :     :              :  +- *(8) ColumnarToRow\n                  :     :     :                    :     :     :              :     +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_item_sk#2,ws_web_page_sk#11,ws_order_number#16L,ws_quantity#17,ws_sales_price#20,ws_net_profit#32,ws_sold_date_sk#33] Batched: true, DataFilters: [isnotnull(ws_item_sk#2), isnotnull(ws_order_number#16L), isnotnull(ws_web_page_sk#11), ((((ws_sa..., Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#33), dynamicpruningexpression(ws_sold_date_sk#33 IN dynamicpruning#189)], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_page_sk), Or(Or(And(GreaterT..., ReadSchema: struct<ws_item_sk:int,ws_web_page_sk:int,ws_order_number:bigint,ws_quantity:int,ws_sales_price:de...\n                  :     :     :                    :     :     :              :           +- SubqueryBroadcast dynamicpruning#189, 0, [d_date_sk#94], [id=#729]\n                  :     :     :                    :     :     :              :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                                +- == Final Plan ==\n                                                                                                   BroadcastQueryStage 1\n                                                                                                   +- ReusedExchange [d_date_sk#94], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=480]\n                                                                                                +- == Initial Plan ==\n                                                                                                   BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=726]\n                                                                                                   +- Project [d_date_sk#94]\n                                                                                                      +- Filter ((isnotnull(d_year#100) AND (d_year#100 = 1998)) AND isnotnull(d_date_sk#94))\n                                                                                                         +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#94,d_year#100] Batched: true, DataFilters: [isnotnull(d_year#100), (d_year#100 = 1998), isnotnull(d_date_sk#94)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1998), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n                  :     :     :                    :     :     :              +- BroadcastQueryStage 0\n                  :     :     :                    :     :     :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=360]\n                  :     :     :                    :     :     :                    +- *(1) Filter isnotnull(wp_web_page_sk#58)\n                  :     :     :                    :     :     :                       +- *(1) ColumnarToRow\n                  :     :     :                    :     :     :                          +- FileScan parquet spark_catalog.tpcds_100.web_page[wp_web_page_sk#58] Batched: true, DataFilters: [isnotnull(wp_web_page_sk#58)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_page], PartitionFilters: [], PushedFilters: [IsNotNull(wp_web_page_sk)], ReadSchema: struct<wp_web_page_sk:int>\n                  :     :     :                    :     :     +- BroadcastQueryStage 8\n                  :     :     :                    :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, true], input[5, bigint, true]),false), [plan_id=1040]\n                  :     :     :                    :     :           +- AQEShuffleRead local\n                  :     :     :                    :     :              +- ShuffleQueryStage 1\n                  :     :     :                    :     :                 +- Exchange hashpartitioning(wr_item_sk#35, wr_order_number#46L, 200), ENSURE_REQUIREMENTS, [plan_id=381]\n                  :     :     :                    :     :                    +- *(2) Project [wr_item_sk#35, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_order_number#46L, wr_fee#51, wr_refunded_cash#53]\n                  :     :     :                    :     :                       +- *(2) Filter (((((((isnotnull(wr_item_sk#35) AND isnotnull(wr_order_number#46L)) AND isnotnull(wr_refunded_cdemo_sk#37)) AND isnotnull(wr_returning_cdemo_sk#41)) AND isnotnull(wr_refunded_addr_sk#39)) AND isnotnull(wr_reason_sk#45)) AND might_contain(Subquery subquery#192, [id=#150], xxhash64(wr_refunded_addr_sk#39, 42))) AND might_contain(Subquery subquery#195, [id=#163], xxhash64(wr_refunded_cdemo_sk#37, 42)))\n                  :     :     :                    :     :                          :  :- Subquery subquery#192, [id=#150]\n                  :     :     :                    :     :                          :  :  +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                             +- == Final Plan ==\n                                                                                                ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0)], output=[bloomFilter#191])\n                                                                                                +- ShuffleQueryStage 0\n                                                                                                   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=524]\n                                                                                                      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0)], output=[buf#210])\n                                                                                                         +- *(1) Project [ca_address_sk#81]\n                                                                                                            +- *(1) Filter (((isnotnull(ca_country#91) AND (ca_country#91 = United States)) AND isnotnull(ca_address_sk#81)) AND ((ca_state#89 IN (KY,GA,NM) OR ca_state#89 IN (MT,OR,IN)) OR ca_state#89 IN (WI,MO,WV)))\n                                                                                                               +- *(1) ColumnarToRow\n                                                                                                                  +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#81,ca_state#89,ca_country#91] Batched: true, DataFilters: [isnotnull(ca_country#91), (ca_country#91 = United States), isnotnull(ca_address_sk#81), ((ca_sta..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk), Or(Or(In(ca_..., ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>\n                                                                                             +- == Initial Plan ==\n                                                                                                ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0)], output=[bloomFilter#191])\n                                                                                                +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=148]\n                                                                                                   +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0)], output=[buf#210])\n                                                                                                      +- Project [ca_address_sk#81]\n                                                                                                         +- Filter (((isnotnull(ca_country#91) AND (ca_country#91 = United States)) AND isnotnull(ca_address_sk#81)) AND ((ca_state#89 IN (KY,GA,NM) OR ca_state#89 IN (MT,OR,IN)) OR ca_state#89 IN (WI,MO,WV)))\n                                                                                                            +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#81,ca_state#89,ca_country#91] Batched: true, DataFilters: [isnotnull(ca_country#91), (ca_country#91 = United States), isnotnull(ca_address_sk#81), ((ca_sta..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk), Or(Or(In(ca_..., ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>\n                  :     :     :                    :     :                          :  +- Subquery subquery#195, [id=#163]\n                  :     :     :                    :     :                          :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                             +- == Final Plan ==\n                                                                                                ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0)], output=[bloomFilter#194])\n                                                                                                +- ShuffleQueryStage 0\n                                                                                                   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=510]\n                                                                                                      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0)], output=[buf#211])\n                                                                                                         +- *(1) Project [cd_demo_sk#72]\n                                                                                                            +- *(1) Filter (((isnotnull(cd_demo_sk#72) AND isnotnull(cd_marital_status#74)) AND isnotnull(cd_education_status#75)) AND ((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) OR ((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary))) OR ((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree))))\n                                                                                                               +- *(1) ColumnarToRow\n                                                                                                                  +- FileScan parquet spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#72,cd_marital_status#74,cd_education_status#75] Batched: true, DataFilters: [isnotnull(cd_demo_sk#72), isnotnull(cd_marital_status#74), isnotnull(cd_education_status#75), ((..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), Or(Or(And(E..., ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>\n                                                                                             +- == Initial Plan ==\n                                                                                                ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0)], output=[bloomFilter#194])\n                                                                                                +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=161]\n                                                                                                   +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0)], output=[buf#211])\n                                                                                                      +- Project [cd_demo_sk#72]\n                                                                                                         +- Filter (((isnotnull(cd_demo_sk#72) AND isnotnull(cd_marital_status#74)) AND isnotnull(cd_education_status#75)) AND ((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) OR ((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary))) OR ((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree))))\n                                                                                                            +- FileScan parquet spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#72,cd_marital_status#74,cd_education_status#75] Batched: true, DataFilters: [isnotnull(cd_demo_sk#72), isnotnull(cd_marital_status#74), isnotnull(cd_education_status#75), ((..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), Or(Or(And(E..., ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>\n                  :     :     :                    :     :                          +- *(2) ColumnarToRow\n                  :     :     :                    :     :                             +- FileScan parquet spark_catalog.tpcds_100.web_returns[wr_item_sk#35,wr_refunded_cdemo_sk#37,wr_refunded_addr_sk#39,wr_returning_cdemo_sk#41,wr_reason_sk#45,wr_order_number#46L,wr_fee#51,wr_refunded_cash#53,wr_returned_date_sk#57] Batched: true, DataFilters: [isnotnull(wr_item_sk#35), isnotnull(wr_order_number#46L), isnotnull(wr_refunded_cdemo_sk#37), is..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_returns], PartitionFilters: [], PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number), IsNotNull(wr_refunded_cdemo_sk), IsNotNull(wr..., ReadSchema: struct<wr_item_sk:int,wr_refunded_cdemo_sk:int,wr_refunded_addr_sk:int,wr_returning_cdemo_sk:int,...\n                  :     :     :                    :     +- BroadcastQueryStage 2\n                  :     :     :                    :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=404]\n                  :     :     :                    :           +- *(3) Project [ca_address_sk#81, ca_state#89]\n                  :     :     :                    :              +- *(3) Filter (((isnotnull(ca_country#91) AND (ca_country#91 = United States)) AND isnotnull(ca_address_sk#81)) AND ((ca_state#89 IN (KY,GA,NM) OR ca_state#89 IN (MT,OR,IN)) OR ca_state#89 IN (WI,MO,WV)))\n                  :     :     :                    :                 +- *(3) ColumnarToRow\n                  :     :     :                    :                    +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#81,ca_state#89,ca_country#91] Batched: true, DataFilters: [isnotnull(ca_country#91), (ca_country#91 = United States), isnotnull(ca_address_sk#81), ((ca_sta..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk), Or(Or(In(ca_..., ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>\n                  :     :     :                    +- BroadcastQueryStage 3\n                  :     :     :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=423]\n                  :     :     :                          +- *(4) Filter (((isnotnull(cd_demo_sk#72) AND isnotnull(cd_marital_status#74)) AND isnotnull(cd_education_status#75)) AND ((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) OR ((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary))) OR ((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree))))\n                  :     :     :                             +- *(4) ColumnarToRow\n                  :     :     :                                +- FileScan parquet spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#72,cd_marital_status#74,cd_education_status#75] Batched: true, DataFilters: [isnotnull(cd_demo_sk#72), isnotnull(cd_marital_status#74), isnotnull(cd_education_status#75), ((..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), Or(Or(And(E..., ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>\n                  :     :     +- AQEShuffleRead local\n                  :     :        +- ShuffleQueryStage 4\n                  :     :           +- Exchange hashpartitioning(cd_demo_sk#165, cd_marital_status#167, cd_education_status#168, 200), ENSURE_REQUIREMENTS, [plan_id=442]\n                  :     :              +- *(5) Filter ((isnotnull(cd_demo_sk#165) AND isnotnull(cd_marital_status#167)) AND isnotnull(cd_education_status#168))\n                  :     :                 +- *(5) ColumnarToRow\n                  :     :                    +- FileScan parquet spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#165,cd_marital_status#167,cd_education_status#168] Batched: true, DataFilters: [isnotnull(cd_demo_sk#165), isnotnull(cd_marital_status#167), isnotnull(cd_education_status#168)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status)], ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>\n                  :     +- BroadcastQueryStage 5\n                  :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=461]\n                  :           +- *(6) Filter isnotnull(r_reason_sk#122)\n                  :              +- *(6) ColumnarToRow\n                  :                 +- FileScan parquet spark_catalog.tpcds_100.reason[r_reason_sk#122,r_reason_desc#124] Batched: true, DataFilters: [isnotnull(r_reason_sk#122)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/reason], PartitionFilters: [], PushedFilters: [IsNotNull(r_reason_sk)], ReadSchema: struct<r_reason_sk:int,r_reason_desc:string>\n                  +- BroadcastQueryStage 6\n                     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=480]\n                        +- *(7) Project [d_date_sk#94]\n                           +- *(7) Filter ((isnotnull(d_year#100) AND (d_year#100 = 1998)) AND isnotnull(d_date_sk#94))\n                              +- *(7) ColumnarToRow\n                                 +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#94,d_year#100] Batched: true, DataFilters: [isnotnull(d_year#100), (d_year#100 = 1998), isnotnull(d_date_sk#94)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1998), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 4344,
        "inputRowCount" : 52
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "6" : [ 0, 0, 0, 0, 0, 0, 0, 117, 0, 0, 106, 106, 106, 0, 0, 0, 189, 0, 0, 0, 0, 0, 0, 106, 0, 0, 0, 0, 0, 106, 0, 0, 0, 117, 106, 0, 117, 0, 0, 0, 0, 106, 0, 106, 0, 106, 106, 0, 0, 117, 106, 0, 0, 129, 106, 0, 0, 0, 0, 0, 0, 106, 117, 106, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 0, 171, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 117, 0, 0, 0, 117, 0, 0, 142, 0, 0, 0, 0, 106, 0, 106, 0, 0, 0, 0, 0, 106, 0, 117, 0, 106, 0, 0, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 97, 106, 0, 106, 0, 0, 0, 117, 117, 0, 0, 0, 0, 0, 0, 106, 0, 0, 0, 0, 0, 106, 0, 106, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 106, 0, 0, 106, 106, 0, 0, 106, 106, 0, 0, 0 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 16,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 27 ],
      "Objectives" : {
        "DurationInMs" : 457,
        "TotalTasksDurationInMs" : 446,
        "IOBytes" : {
          "Total" : 5171,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 5171,
            "SW" : 0
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -686536327,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 246000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 246000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#81, ca_address_id#82, ca_street_number#83, ca_street_name#84, ca_street_type#85, ca_suite_number#86, ca_city#87, ca_county#88, ca_state#89, ca_zip#90, ca_country#91, ca_gmt_offset#92, ca_location_type#93], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : -532961097,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1833756,
                "rowCount" : 152813
              },
              "compileTime" : {
                "sizeInBytes" : 1833756,
                "rowCount" : 152813
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_address_sk#81] "
          },
          "0" : {
            "sign" : 246046674,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0) AS bloomFilter#191] "
          },
          "2" : {
            "sign" : -1613576308,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1833756,
                "rowCount" : 152813
              },
              "compileTime" : {
                "sizeInBytes" : 1833756,
                "rowCount" : 152813
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_address_sk#81] "
          },
          "3" : {
            "sign" : -1122109019,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 37591998,
                "rowCount" : 152813
              },
              "compileTime" : {
                "sizeInBytes" : 37591998,
                "rowCount" : 152813
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(ca_country#91) AND (ca_country#91 = United States)) AND isnotnull(ca_address_sk#81)) AND ((ca_state#89 IN (KY,GA,NM) OR ca_state#89 IN (MT,OR,IN)) OR ca_state#89 IN (WI,MO,WV))) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0) AS bloomFilter#191]\n+- Project [ca_address_sk#81]\n   +- Project [ca_address_sk#81]\n      +- Filter (((isnotnull(ca_country#91) AND (ca_country#91 = United States)) AND isnotnull(ca_address_sk#81)) AND ((ca_state#89 IN (KY,GA,NM) OR ca_state#89 IN (MT,OR,IN)) OR ca_state#89 IN (WI,MO,WV)))\n         +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#81,ca_address_id#82,ca_street_number#83,ca_street_name#84,ca_street_type#85,ca_suite_number#86,ca_city#87,ca_county#88,ca_state#89,ca_zip#90,ca_country#91,ca_gmt_offset#92,ca_location_type#93] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -2113110176,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [ca_address_sk#81] Keys: [] Functions [1]: [partial_bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0)] Aggregate Attributes [1]: [buf#197] Results [1]: [buf#210] "
          },
          "1" : {
            "sign" : 1255427028,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1833756,
            "rowCount" : 152813,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [ca_address_sk#81] Input [3]: [ca_address_sk#81, ca_state#89, ca_country#91] "
          },
          "2" : {
            "sign" : 1958743323,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 1833756,
            "rowCount" : 152813,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [ca_address_sk#81, ca_state#89, ca_country#91] Condition : (((isnotnull(ca_country#91) AND (ca_country#91 = United States)) AND isnotnull(ca_address_sk#81)) AND ((ca_state#89 IN (KY,GA,NM) OR ca_state#89 IN (MT,OR,IN)) OR ca_state#89 IN (WI,MO,WV))) "
          },
          "3" : {
            "sign" : -1547717433,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 1833756,
            "rowCount" : 152813,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer_address Output [3]: [ca_address_sk#81, ca_state#89, ca_country#91] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_address] PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk), Or(Or(In(ca_state, [GA,KY,NM]),In(ca_state, [IN,MT,OR])),In(ca_state, [MO,WI,WV]))] ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer_address",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0)], output=[buf#210])\n+- Project [ca_address_sk#81]\n   +- Filter (((isnotnull(ca_country#91) AND (ca_country#91 = United States)) AND isnotnull(ca_address_sk#81)) AND ((ca_state#89 IN (KY,GA,NM) OR ca_state#89 IN (MT,OR,IN)) OR ca_state#89 IN (WI,MO,WV)))\n      +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#81,ca_state#89,ca_country#91] Batched: true, DataFilters: [isnotnull(ca_country#91), (ca_country#91 = United States), isnotnull(ca_address_sk#81), ((ca_sta..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk), Or(Or(In(ca_..., ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1833756,
        "inputRowCount" : 152813
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 6 ],
      "Objectives" : {
        "DurationInMs" : 1659,
        "TotalTasksDurationInMs" : 6058,
        "IOBytes" : {
          "Total" : 4904603,
          "Details" : {
            "IR" : 4904603,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "10" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1944028446,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 90277600,
                "rowCount" : 1920800
              },
              "compileTime" : {
                "sizeInBytes" : 90277600,
                "rowCount" : 1920800
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cd_demo_sk#165, cd_marital_status#167, cd_education_status#168] "
          },
          "1" : {
            "sign" : 1022098271,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 182476000,
                "rowCount" : 1920800
              },
              "compileTime" : {
                "sizeInBytes" : 182476000,
                "rowCount" : 1920800
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(cd_demo_sk#165) AND isnotnull(cd_marital_status#167)) AND isnotnull(cd_education_status#168)) "
          },
          "2" : {
            "sign" : 557941016,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 182476000,
                "rowCount" : 1920800
              },
              "compileTime" : {
                "sizeInBytes" : 182476000,
                "rowCount" : 1920800
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cd_demo_sk#165, cd_gender#166, cd_marital_status#167, cd_education_status#168, cd_purchase_estimate#169, cd_credit_rating#170, cd_dep_count#171, cd_dep_employed_count#172, cd_dep_college_count#173], `spark_catalog`.`tpcds_100`.`customer_demographics`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cd_demo_sk#165, cd_marital_status#167, cd_education_status#168]\n+- Filter ((isnotnull(cd_demo_sk#165) AND isnotnull(cd_marital_status#167)) AND isnotnull(cd_education_status#168))\n   +- Relation spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#165,cd_gender#166,cd_marital_status#167,cd_education_status#168,cd_purchase_estimate#169,cd_credit_rating#170,cd_dep_count#171,cd_dep_employed_count#172,cd_dep_college_count#173] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 2031785030,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 90277600,
            "rowCount" : 1920800,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [cd_demo_sk#165, cd_marital_status#167, cd_education_status#168] Condition : ((isnotnull(cd_demo_sk#165) AND isnotnull(cd_marital_status#167)) AND isnotnull(cd_education_status#168)) "
          },
          "1" : {
            "sign" : 2092253677,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 90277600,
            "rowCount" : 1920800,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer_demographics Output [3]: [cd_demo_sk#165, cd_marital_status#167, cd_education_status#168] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_demographics] PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status)] ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer_demographics",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter ((isnotnull(cd_demo_sk#165) AND isnotnull(cd_marital_status#167)) AND isnotnull(cd_education_status#168))\n+- FileScan parquet spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#165,cd_marital_status#167,cd_education_status#168] Batched: true, DataFilters: [isnotnull(cd_demo_sk#165), isnotnull(cd_marital_status#167), isnotnull(cd_education_status#168)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status)], ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 90277600,
        "inputRowCount" : 1920800
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 14 ],
      "Objectives" : {
        "DurationInMs" : 5863,
        "TotalTasksDurationInMs" : 1302,
        "IOBytes" : {
          "Total" : 35573442,
          "Details" : {
            "IR" : 7769474,
            "IW" : 0,
            "SR" : 0,
            "SW" : 27803968
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1354891507,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1346240,
                "rowCount" : 5
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0) AS bloomFilter#191], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0) AS bloomFilter#191], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0)])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1189088668,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 1346240,
            "rowCount" : 5,
            "isRuntime" : true,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [buf#210] Keys: [] Functions [1]: [bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0)] Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0)#190] Results [1]: [bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0)#190 AS bloomFilter#191] "
          },
          "1" : {
            "sign" : -2073948382,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [buf#210] Arguments: 0 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0)], output=[bloomFilter#191])\n+- ShuffleQueryStage 0\n   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=524]\n      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0)], output=[buf#210])\n         +- *(1) Project [ca_address_sk#81]\n            +- *(1) Filter (((isnotnull(ca_country#91) AND (ca_country#91 = United States)) AND isnotnull(ca_address_sk#81)) AND ((ca_state#89 IN (KY,GA,NM) OR ca_state#89 IN (MT,OR,IN)) OR ca_state#89 IN (WI,MO,WV)))\n               +- *(1) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#81,ca_state#89,ca_country#91] Batched: true, DataFilters: [isnotnull(ca_country#91), (ca_country#91 = United States), isnotnull(ca_address_sk#81), ((ca_sta..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk), Or(Or(In(ca_..., ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1346240,
        "inputRowCount" : 5
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "0" : [ 296556 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 1,
        "FinishedTasksTotalTimeInMs" : 1453.0,
        "FinishedTasksDistributionInMs" : [ 1453.0, 1453.0, 1453.0, 1453.0, 1453.0 ]
      },
      "QueryStageOptimizationId" : 9,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 9 ],
      "Objectives" : {
        "DurationInMs" : 203,
        "TotalTasksDurationInMs" : 179,
        "IOBytes" : {
          "Total" : 275010,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 275010,
            "SW" : 0
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 207286900,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3973138,
                "rowCount" : 152813
              },
              "compileTime" : {
                "sizeInBytes" : 3973138,
                "rowCount" : 152813
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_address_sk#81, ca_state#89] "
          },
          "1" : {
            "sign" : -1122109019,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 37591998,
                "rowCount" : 152813
              },
              "compileTime" : {
                "sizeInBytes" : 37591998,
                "rowCount" : 152813
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(ca_country#91) AND (ca_country#91 = United States)) AND isnotnull(ca_address_sk#81)) AND ((ca_state#89 IN (KY,GA,NM) OR ca_state#89 IN (MT,OR,IN)) OR ca_state#89 IN (WI,MO,WV))) "
          },
          "2" : {
            "sign" : -686536327,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 246000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 246000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#81, ca_address_id#82, ca_street_number#83, ca_street_name#84, ca_street_type#85, ca_suite_number#86, ca_city#87, ca_county#88, ca_state#89, ca_zip#90, ca_country#91, ca_gmt_offset#92, ca_location_type#93], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ca_address_sk#81, ca_state#89]\n+- Filter (((isnotnull(ca_country#91) AND (ca_country#91 = United States)) AND isnotnull(ca_address_sk#81)) AND ((ca_state#89 IN (KY,GA,NM) OR ca_state#89 IN (MT,OR,IN)) OR ca_state#89 IN (WI,MO,WV)))\n   +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#81,ca_address_id#82,ca_street_number#83,ca_street_name#84,ca_street_type#85,ca_suite_number#86,ca_city#87,ca_county#88,ca_state#89,ca_zip#90,ca_country#91,ca_gmt_offset#92,ca_location_type#93] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1530447852,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 3973138,
            "rowCount" : 152813,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [ca_address_sk#81, ca_state#89] Input [3]: [ca_address_sk#81, ca_state#89, ca_country#91] "
          },
          "1" : {
            "sign" : 1958743323,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 3973138,
            "rowCount" : 152813,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [ca_address_sk#81, ca_state#89, ca_country#91] Condition : (((isnotnull(ca_country#91) AND (ca_country#91 = United States)) AND isnotnull(ca_address_sk#81)) AND ((ca_state#89 IN (KY,GA,NM) OR ca_state#89 IN (MT,OR,IN)) OR ca_state#89 IN (WI,MO,WV))) "
          },
          "2" : {
            "sign" : -1547717433,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 3973138,
            "rowCount" : 152813,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer_address Output [3]: [ca_address_sk#81, ca_state#89, ca_country#91] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_address] PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk), Or(Or(In(ca_state, [GA,KY,NM]),In(ca_state, [IN,MT,OR])),In(ca_state, [MO,WI,WV]))] ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer_address",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ca_address_sk#81, ca_state#89]\n+- Filter (((isnotnull(ca_country#91) AND (ca_country#91 = United States)) AND isnotnull(ca_address_sk#81)) AND ((ca_state#89 IN (KY,GA,NM) OR ca_state#89 IN (MT,OR,IN)) OR ca_state#89 IN (WI,MO,WV)))\n   +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#81,ca_state#89,ca_country#91] Batched: true, DataFilters: [isnotnull(ca_country#91), (ca_country#91 = United States), isnotnull(ca_address_sk#81), ((ca_sta..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk), Or(Or(In(ca_..., ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3973138,
        "inputRowCount" : 152813
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 2 ],
      "Objectives" : {
        "DurationInMs" : 2010,
        "TotalTasksDurationInMs" : 7641,
        "IOBytes" : {
          "Total" : 5179613,
          "Details" : {
            "IR" : 4904603,
            "IW" : 0,
            "SR" : 0,
            "SW" : 275010
          }
        }
      }
    },
    "14" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1937058508,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 15712,
                "rowCount" : 175
              },
              "compileTime" : {
                "sizeInBytes" : 31369120394104992831897600,
                "rowCount" : 392114004926312410398720
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_quantity#17, ws_sold_date_sk#33, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53, cd_marital_status#74, cd_education_status#75], ShuffleQueryStage 9 "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Project [ws_quantity#17, ws_sold_date_sk#33, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53, cd_marital_status#74, cd_education_status#75], ShuffleQueryStage 9\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -2030645190,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 15712,
            "rowCount" : 175,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [8]: [ws_quantity#17, ws_sold_date_sk#33, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53, cd_marital_status#74, cd_education_status#75] Arguments: 9 "
          }
        },
        "links" : [ ],
        "rawPlan" : "ShuffleQueryStage 9\n+- Exchange hashpartitioning(wr_returning_cdemo_sk#41, cd_marital_status#74, cd_education_status#75, 200), ENSURE_REQUIREMENTS, [plan_id=1262]\n   +- *(9) Project [ws_quantity#17, ws_sold_date_sk#33, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53, cd_marital_status#74, cd_education_status#75]\n      +- *(9) BroadcastHashJoin [wr_refunded_cdemo_sk#37], [cd_demo_sk#72], Inner, BuildRight, ((((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) AND (ws_sales_price#20 >= 100.00)) AND (ws_sales_price#20 <= 150.00)) OR ((((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary)) AND (ws_sales_price#20 >= 50.00)) AND (ws_sales_price#20 <= 100.00))) OR ((((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree)) AND (ws_sales_price#20 >= 150.00)) AND (ws_sales_price#20 <= 200.00))), false\n         :- *(9) Project [ws_quantity#17, ws_sales_price#20, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53]\n         :  +- *(9) BroadcastHashJoin [wr_refunded_addr_sk#39], [ca_address_sk#81], Inner, BuildRight, ((((ca_state#89 IN (KY,GA,NM) AND (ws_net_profit#32 >= 100.00)) AND (ws_net_profit#32 <= 200.00)) OR ((ca_state#89 IN (MT,OR,IN) AND (ws_net_profit#32 >= 150.00)) AND (ws_net_profit#32 <= 300.00))) OR ((ca_state#89 IN (WI,MO,WV) AND (ws_net_profit#32 >= 50.00)) AND (ws_net_profit#32 <= 250.00))), false\n         :     :- *(9) Project [ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_fee#51, wr_refunded_cash#53]\n         :     :  +- *(9) BroadcastHashJoin [ws_item_sk#2, ws_order_number#16L], [wr_item_sk#35, wr_order_number#46L], Inner, BuildRight, false\n         :     :     :- AQEShuffleRead local\n         :     :     :  +- ShuffleQueryStage 7\n         :     :     :     +- Exchange hashpartitioning(ws_item_sk#2, ws_order_number#16L, 200), ENSURE_REQUIREMENTS, [plan_id=755]\n         :     :     :        +- *(8) Project [ws_item_sk#2, ws_order_number#16L, ws_quantity#17, ws_sales_price#20, ws_net_profit#32, ws_sold_date_sk#33]\n         :     :     :           +- *(8) BroadcastHashJoin [ws_web_page_sk#11], [wp_web_page_sk#58], Inner, BuildRight, false\n         :     :     :              :- *(8) Filter ((((isnotnull(ws_item_sk#2) AND isnotnull(ws_order_number#16L)) AND isnotnull(ws_web_page_sk#11)) AND ((((ws_sales_price#20 >= 100.00) AND (ws_sales_price#20 <= 150.00)) OR ((ws_sales_price#20 >= 50.00) AND (ws_sales_price#20 <= 100.00))) OR ((ws_sales_price#20 >= 150.00) AND (ws_sales_price#20 <= 200.00)))) AND ((((ws_net_profit#32 >= 100.00) AND (ws_net_profit#32 <= 200.00)) OR ((ws_net_profit#32 >= 150.00) AND (ws_net_profit#32 <= 300.00))) OR ((ws_net_profit#32 >= 50.00) AND (ws_net_profit#32 <= 250.00))))\n         :     :     :              :  +- *(8) ColumnarToRow\n         :     :     :              :     +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_item_sk#2,ws_web_page_sk#11,ws_order_number#16L,ws_quantity#17,ws_sales_price#20,ws_net_profit#32,ws_sold_date_sk#33] Batched: true, DataFilters: [isnotnull(ws_item_sk#2), isnotnull(ws_order_number#16L), isnotnull(ws_web_page_sk#11), ((((ws_sa..., Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#33), dynamicpruningexpression(ws_sold_date_sk#33 IN dynamicpruning#189)], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_page_sk), Or(Or(And(GreaterT..., ReadSchema: struct<ws_item_sk:int,ws_web_page_sk:int,ws_order_number:bigint,ws_quantity:int,ws_sales_price:de...\n         :     :     :              :           +- SubqueryBroadcast dynamicpruning#189, 0, [d_date_sk#94], [id=#729]\n         :     :     :              :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                      +- == Final Plan ==\n                                                         BroadcastQueryStage 1\n                                                         +- ReusedExchange [d_date_sk#94], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=480]\n                                                      +- == Initial Plan ==\n                                                         BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=726]\n                                                         +- Project [d_date_sk#94]\n                                                            +- Filter ((isnotnull(d_year#100) AND (d_year#100 = 1998)) AND isnotnull(d_date_sk#94))\n                                                               +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#94,d_year#100] Batched: true, DataFilters: [isnotnull(d_year#100), (d_year#100 = 1998), isnotnull(d_date_sk#94)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1998), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int>\n         :     :     :              +- BroadcastQueryStage 0\n         :     :     :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=360]\n         :     :     :                    +- *(1) Filter isnotnull(wp_web_page_sk#58)\n         :     :     :                       +- *(1) ColumnarToRow\n         :     :     :                          +- FileScan parquet spark_catalog.tpcds_100.web_page[wp_web_page_sk#58] Batched: true, DataFilters: [isnotnull(wp_web_page_sk#58)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_page], PartitionFilters: [], PushedFilters: [IsNotNull(wp_web_page_sk)], ReadSchema: struct<wp_web_page_sk:int>\n         :     :     +- BroadcastQueryStage 8\n         :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, true], input[5, bigint, true]),false), [plan_id=1040]\n         :     :           +- AQEShuffleRead local\n         :     :              +- ShuffleQueryStage 1\n         :     :                 +- Exchange hashpartitioning(wr_item_sk#35, wr_order_number#46L, 200), ENSURE_REQUIREMENTS, [plan_id=381]\n         :     :                    +- *(2) Project [wr_item_sk#35, wr_refunded_cdemo_sk#37, wr_refunded_addr_sk#39, wr_returning_cdemo_sk#41, wr_reason_sk#45, wr_order_number#46L, wr_fee#51, wr_refunded_cash#53]\n         :     :                       +- *(2) Filter (((((((isnotnull(wr_item_sk#35) AND isnotnull(wr_order_number#46L)) AND isnotnull(wr_refunded_cdemo_sk#37)) AND isnotnull(wr_returning_cdemo_sk#41)) AND isnotnull(wr_refunded_addr_sk#39)) AND isnotnull(wr_reason_sk#45)) AND might_contain(Subquery subquery#192, [id=#150], xxhash64(wr_refunded_addr_sk#39, 42))) AND might_contain(Subquery subquery#195, [id=#163], xxhash64(wr_refunded_cdemo_sk#37, 42)))\n         :     :                          :  :- Subquery subquery#192, [id=#150]\n         :     :                          :  :  +- AdaptiveSparkPlan isFinalPlan=true\n                                                   +- == Final Plan ==\n                                                      ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0)], output=[bloomFilter#191])\n                                                      +- ShuffleQueryStage 0\n                                                         +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=524]\n                                                            +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0)], output=[buf#210])\n                                                               +- *(1) Project [ca_address_sk#81]\n                                                                  +- *(1) Filter (((isnotnull(ca_country#91) AND (ca_country#91 = United States)) AND isnotnull(ca_address_sk#81)) AND ((ca_state#89 IN (KY,GA,NM) OR ca_state#89 IN (MT,OR,IN)) OR ca_state#89 IN (WI,MO,WV)))\n                                                                     +- *(1) ColumnarToRow\n                                                                        +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#81,ca_state#89,ca_country#91] Batched: true, DataFilters: [isnotnull(ca_country#91), (ca_country#91 = United States), isnotnull(ca_address_sk#81), ((ca_sta..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk), Or(Or(In(ca_..., ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>\n                                                   +- == Initial Plan ==\n                                                      ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0)], output=[bloomFilter#191])\n                                                      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=148]\n                                                         +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(ca_address_sk#81, 42), 152813, 2153710, 0, 0)], output=[buf#210])\n                                                            +- Project [ca_address_sk#81]\n                                                               +- Filter (((isnotnull(ca_country#91) AND (ca_country#91 = United States)) AND isnotnull(ca_address_sk#81)) AND ((ca_state#89 IN (KY,GA,NM) OR ca_state#89 IN (MT,OR,IN)) OR ca_state#89 IN (WI,MO,WV)))\n                                                                  +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#81,ca_state#89,ca_country#91] Batched: true, DataFilters: [isnotnull(ca_country#91), (ca_country#91 = United States), isnotnull(ca_address_sk#81), ((ca_sta..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk), Or(Or(In(ca_..., ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>\n         :     :                          :  +- Subquery subquery#195, [id=#163]\n         :     :                          :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                   +- == Final Plan ==\n                                                      ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0)], output=[bloomFilter#194])\n                                                      +- ShuffleQueryStage 0\n                                                         +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=510]\n                                                            +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0)], output=[buf#211])\n                                                               +- *(1) Project [cd_demo_sk#72]\n                                                                  +- *(1) Filter (((isnotnull(cd_demo_sk#72) AND isnotnull(cd_marital_status#74)) AND isnotnull(cd_education_status#75)) AND ((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) OR ((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary))) OR ((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree))))\n                                                                     +- *(1) ColumnarToRow\n                                                                        +- FileScan parquet spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#72,cd_marital_status#74,cd_education_status#75] Batched: true, DataFilters: [isnotnull(cd_demo_sk#72), isnotnull(cd_marital_status#74), isnotnull(cd_education_status#75), ((..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), Or(Or(And(E..., ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>\n                                                   +- == Initial Plan ==\n                                                      ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0)], output=[bloomFilter#194])\n                                                      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=161]\n                                                         +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0)], output=[buf#211])\n                                                            +- Project [cd_demo_sk#72]\n                                                               +- Filter (((isnotnull(cd_demo_sk#72) AND isnotnull(cd_marital_status#74)) AND isnotnull(cd_education_status#75)) AND ((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) OR ((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary))) OR ((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree))))\n                                                                  +- FileScan parquet spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#72,cd_marital_status#74,cd_education_status#75] Batched: true, DataFilters: [isnotnull(cd_demo_sk#72), isnotnull(cd_marital_status#74), isnotnull(cd_education_status#75), ((..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), Or(Or(And(E..., ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>\n         :     :                          +- *(2) ColumnarToRow\n         :     :                             +- FileScan parquet spark_catalog.tpcds_100.web_returns[wr_item_sk#35,wr_refunded_cdemo_sk#37,wr_refunded_addr_sk#39,wr_returning_cdemo_sk#41,wr_reason_sk#45,wr_order_number#46L,wr_fee#51,wr_refunded_cash#53,wr_returned_date_sk#57] Batched: true, DataFilters: [isnotnull(wr_item_sk#35), isnotnull(wr_order_number#46L), isnotnull(wr_refunded_cdemo_sk#37), is..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_returns], PartitionFilters: [], PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number), IsNotNull(wr_refunded_cdemo_sk), IsNotNull(wr..., ReadSchema: struct<wr_item_sk:int,wr_refunded_cdemo_sk:int,wr_refunded_addr_sk:int,wr_returning_cdemo_sk:int,...\n         :     +- BroadcastQueryStage 2\n         :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=404]\n         :           +- *(3) Project [ca_address_sk#81, ca_state#89]\n         :              +- *(3) Filter (((isnotnull(ca_country#91) AND (ca_country#91 = United States)) AND isnotnull(ca_address_sk#81)) AND ((ca_state#89 IN (KY,GA,NM) OR ca_state#89 IN (MT,OR,IN)) OR ca_state#89 IN (WI,MO,WV)))\n         :                 +- *(3) ColumnarToRow\n         :                    +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#81,ca_state#89,ca_country#91] Batched: true, DataFilters: [isnotnull(ca_country#91), (ca_country#91 = United States), isnotnull(ca_address_sk#81), ((ca_sta..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk), Or(Or(In(ca_..., ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>\n         +- BroadcastQueryStage 3\n            +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=423]\n               +- *(4) Filter (((isnotnull(cd_demo_sk#72) AND isnotnull(cd_marital_status#74)) AND isnotnull(cd_education_status#75)) AND ((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) OR ((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary))) OR ((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree))))\n                  +- *(4) ColumnarToRow\n                     +- FileScan parquet spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#72,cd_marital_status#74,cd_education_status#75] Batched: true, DataFilters: [isnotnull(cd_demo_sk#72), isnotnull(cd_marital_status#74), isnotnull(cd_education_status#75), ((..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), Or(Or(And(E..., ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 15712,
        "inputRowCount" : 175
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "5" : [ 276, 0, 117, 0, 0, 0, 129, 0, 0, 0, 0, 129, 117, 251, 0, 0, 129, 0, 129, 129, 129, 0, 189, 129, 0, 117, 129, 117, 0, 129, 171, 129, 129, 129, 117, 129, 189, 304, 117, 0, 117, 0, 129, 129, 0, 276, 117, 0, 0, 0, 171, 129, 129, 0, 129, 129, 0, 129, 129, 0, 0, 0, 0, 207, 304, 171, 207, 129, 117, 171, 0, 129, 0, 0, 0, 117, 207, 117, 0, 0, 129, 0, 0, 207, 117, 171, 0, 129, 171, 129, 0, 117, 0, 171, 0, 0, 129, 129, 0, 0, 207, 0, 117, 129, 171, 171, 0, 129, 0, 0, 129, 171, 0, 0, 0, 0, 171, 129, 207, 129, 0, 129, 0, 117, 207, 117, 129, 129, 189, 117, 0, 129, 0, 171, 0, 0, 129, 171, 0, 129, 129, 251, 129, 189, 0, 0, 0, 0, 0, 129, 0, 0, 251, 207, 207, 129, 0, 171, 117, 0, 117, 171, 117, 0, 0, 117, 129, 0, 0, 129, 171, 0, 0, 0, 0, 171, 171, 0, 117, 129, 117, 276, 117, 0, 171, 0, 117, 0, 129, 171, 171, 0, 117, 117, 0, 0, 129, 0, 0, 0 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 14,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 22 ],
      "Objectives" : {
        "DurationInMs" : 24,
        "TotalTasksDurationInMs" : 20,
        "IOBytes" : {
          "Total" : 16975,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 16975,
            "SW" : 0
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -918381214,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 24480,
                "rowCount" : 2040
              },
              "compileTime" : {
                "sizeInBytes" : 24480,
                "rowCount" : 2040
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [wp_web_page_sk#58] "
          },
          "1" : {
            "sign" : -611934932,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 281520,
                "rowCount" : 2040
              },
              "compileTime" : {
                "sizeInBytes" : 281520,
                "rowCount" : 2040
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(wp_web_page_sk#58) "
          },
          "2" : {
            "sign" : 1403629598,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 281520,
                "rowCount" : 2040
              },
              "compileTime" : {
                "sizeInBytes" : 281520,
                "rowCount" : 2040
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [wp_web_page_sk#58, wp_web_page_id#59, wp_rec_start_date#60, wp_rec_end_date#61, wp_creation_date_sk#62, wp_access_date_sk#63, wp_autogen_flag#64, wp_customer_sk#65, wp_url#66, wp_type#67, wp_char_count#68, wp_link_count#69, wp_image_count#70, wp_max_ad_count#71], `spark_catalog`.`tpcds_100`.`web_page`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [wp_web_page_sk#58]\n+- Filter isnotnull(wp_web_page_sk#58)\n   +- Relation spark_catalog.tpcds_100.web_page[wp_web_page_sk#58,wp_web_page_id#59,wp_rec_start_date#60,wp_rec_end_date#61,wp_creation_date_sk#62,wp_access_date_sk#63,wp_autogen_flag#64,wp_customer_sk#65,wp_url#66,wp_type#67,wp_char_count#68,wp_link_count#69,wp_image_count#70,wp_max_ad_count#71] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1441263028,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 24480,
            "rowCount" : 2040,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [1]: [wp_web_page_sk#58] Condition : isnotnull(wp_web_page_sk#58) "
          },
          "1" : {
            "sign" : 1208334758,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 24480,
            "rowCount" : 2040,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_page Output [1]: [wp_web_page_sk#58] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_page] PushedFilters: [IsNotNull(wp_web_page_sk)] ReadSchema: struct<wp_web_page_sk:int> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_page",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull(wp_web_page_sk#58)\n+- FileScan parquet spark_catalog.tpcds_100.web_page[wp_web_page_sk#58] Batched: true, DataFilters: [isnotnull(wp_web_page_sk#58)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_page], PartitionFilters: [], PushedFilters: [IsNotNull(wp_web_page_sk)], ReadSchema: struct<wp_web_page_sk:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 24480,
        "inputRowCount" : 2040
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 1389,
        "TotalTasksDurationInMs" : 1383,
        "IOBytes" : {
          "Total" : 14450,
          "Details" : {
            "IR" : 14450,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1647864276,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7519107,
                "rowCount" : 159981
              },
              "compileTime" : {
                "sizeInBytes" : 7519107,
                "rowCount" : 159981
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cd_demo_sk#72, cd_marital_status#74, cd_education_status#75] "
          },
          "1" : {
            "sign" : 1918670606,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 15198195,
                "rowCount" : 159981
              },
              "compileTime" : {
                "sizeInBytes" : 15198195,
                "rowCount" : 159981
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(cd_demo_sk#72) AND (isnotnull(cd_marital_status#74) AND isnotnull(cd_education_status#75))) AND ((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) OR ((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary))) OR ((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree)))) "
          },
          "2" : {
            "sign" : 685811160,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 182476000,
                "rowCount" : 1920800
              },
              "compileTime" : {
                "sizeInBytes" : 182476000,
                "rowCount" : 1920800
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cd_demo_sk#72, cd_gender#73, cd_marital_status#74, cd_education_status#75, cd_purchase_estimate#76, cd_credit_rating#77, cd_dep_count#78, cd_dep_employed_count#79, cd_dep_college_count#80], `spark_catalog`.`tpcds_100`.`customer_demographics`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cd_demo_sk#72, cd_marital_status#74, cd_education_status#75]\n+- Filter ((isnotnull(cd_demo_sk#72) AND (isnotnull(cd_marital_status#74) AND isnotnull(cd_education_status#75))) AND ((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) OR ((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary))) OR ((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree))))\n   +- Relation spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#72,cd_gender#73,cd_marital_status#74,cd_education_status#75,cd_purchase_estimate#76,cd_credit_rating#77,cd_dep_count#78,cd_dep_employed_count#79,cd_dep_college_count#80] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 961071411,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 7519107,
            "rowCount" : 159981,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [cd_demo_sk#72, cd_marital_status#74, cd_education_status#75] Condition : (((isnotnull(cd_demo_sk#72) AND isnotnull(cd_marital_status#74)) AND isnotnull(cd_education_status#75)) AND ((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) OR ((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary))) OR ((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree)))) "
          },
          "1" : {
            "sign" : 1292240533,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 7519107,
            "rowCount" : 159981,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer_demographics Output [3]: [cd_demo_sk#72, cd_marital_status#74, cd_education_status#75] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_demographics] PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), Or(Or(And(EqualTo(cd_marital_status,M),EqualTo(cd_education_status,4 yr Degree)),And(EqualTo(cd_marital_status,D),EqualTo(cd_education_status,Primary))),And(EqualTo(cd_marital_status,U),EqualTo(cd_education_status,Advanced Degree)))] ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer_demographics",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (((isnotnull(cd_demo_sk#72) AND isnotnull(cd_marital_status#74)) AND isnotnull(cd_education_status#75)) AND ((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) OR ((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary))) OR ((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree))))\n+- FileScan parquet spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#72,cd_marital_status#74,cd_education_status#75] Batched: true, DataFilters: [isnotnull(cd_demo_sk#72), isnotnull(cd_marital_status#74), isnotnull(cd_education_status#75), ((..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), Or(Or(And(E..., ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 7519107,
        "inputRowCount" : 159981
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 1 ],
      "Objectives" : {
        "DurationInMs" : 2231,
        "TotalTasksDurationInMs" : 3620,
        "IOBytes" : {
          "Total" : 8051234,
          "Details" : {
            "IR" : 7769623,
            "IW" : 0,
            "SR" : 0,
            "SW" : 281611
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 685811160,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 182476000,
                "rowCount" : 1920800
              },
              "compileTime" : {
                "sizeInBytes" : 182476000,
                "rowCount" : 1920800
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cd_demo_sk#72, cd_gender#73, cd_marital_status#74, cd_education_status#75, cd_purchase_estimate#76, cd_credit_rating#77, cd_dep_count#78, cd_dep_employed_count#79, cd_dep_college_count#80], `spark_catalog`.`tpcds_100`.`customer_demographics`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : -481361198,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1919772,
                "rowCount" : 159981
              },
              "compileTime" : {
                "sizeInBytes" : 1919772,
                "rowCount" : 159981
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cd_demo_sk#72] "
          },
          "0" : {
            "sign" : 658598632,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0) AS bloomFilter#194] "
          },
          "2" : {
            "sign" : 1777271515,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1919772,
                "rowCount" : 159981
              },
              "compileTime" : {
                "sizeInBytes" : 1919772,
                "rowCount" : 159981
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cd_demo_sk#72] "
          },
          "3" : {
            "sign" : 1918670606,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 15198195,
                "rowCount" : 159981
              },
              "compileTime" : {
                "sizeInBytes" : 15198195,
                "rowCount" : 159981
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(cd_demo_sk#72) AND (isnotnull(cd_marital_status#74) AND isnotnull(cd_education_status#75))) AND ((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) OR ((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary))) OR ((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree)))) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0) AS bloomFilter#194]\n+- Project [cd_demo_sk#72]\n   +- Project [cd_demo_sk#72]\n      +- Filter ((isnotnull(cd_demo_sk#72) AND (isnotnull(cd_marital_status#74) AND isnotnull(cd_education_status#75))) AND ((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) OR ((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary))) OR ((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree))))\n         +- Relation spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#72,cd_gender#73,cd_marital_status#74,cd_education_status#75,cd_purchase_estimate#76,cd_credit_rating#77,cd_dep_count#78,cd_dep_employed_count#79,cd_dep_college_count#80] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -181503535,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [cd_demo_sk#72] Keys: [] Functions [1]: [partial_bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0)] Aggregate Attributes [1]: [buf#196] Results [1]: [buf#211] "
          },
          "1" : {
            "sign" : 126270366,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1919772,
            "rowCount" : 159981,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [cd_demo_sk#72] Input [3]: [cd_demo_sk#72, cd_marital_status#74, cd_education_status#75] "
          },
          "2" : {
            "sign" : 961071411,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 1919772,
            "rowCount" : 159981,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [cd_demo_sk#72, cd_marital_status#74, cd_education_status#75] Condition : (((isnotnull(cd_demo_sk#72) AND isnotnull(cd_marital_status#74)) AND isnotnull(cd_education_status#75)) AND ((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) OR ((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary))) OR ((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree)))) "
          },
          "3" : {
            "sign" : 1292240533,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 1919772,
            "rowCount" : 159981,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer_demographics Output [3]: [cd_demo_sk#72, cd_marital_status#74, cd_education_status#75] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_demographics] PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), Or(Or(And(EqualTo(cd_marital_status,M),EqualTo(cd_education_status,4 yr Degree)),And(EqualTo(cd_marital_status,D),EqualTo(cd_education_status,Primary))),And(EqualTo(cd_marital_status,U),EqualTo(cd_education_status,Advanced Degree)))] ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer_demographics",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(cd_demo_sk#72, 42), 159981, 2239471, 0, 0)], output=[buf#211])\n+- Project [cd_demo_sk#72]\n   +- Filter (((isnotnull(cd_demo_sk#72) AND isnotnull(cd_marital_status#74)) AND isnotnull(cd_education_status#75)) AND ((((cd_marital_status#74 = M) AND (cd_education_status#75 = 4 yr Degree)) OR ((cd_marital_status#74 = D) AND (cd_education_status#75 = Primary))) OR ((cd_marital_status#74 = U) AND (cd_education_status#75 = Advanced Degree))))\n      +- FileScan parquet spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#72,cd_marital_status#74,cd_education_status#75] Batched: true, DataFilters: [isnotnull(cd_demo_sk#72), isnotnull(cd_marital_status#74), isnotnull(cd_education_status#75), ((..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), Or(Or(And(E..., ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1919772,
        "inputRowCount" : 159981
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 8,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 7 ],
      "Objectives" : {
        "DurationInMs" : 1769,
        "TotalTasksDurationInMs" : 1843,
        "IOBytes" : {
          "Total" : 7769623,
          "Details" : {
            "IR" : 7769623,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1626641539,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2090,
                "rowCount" : 55
              },
              "compileTime" : {
                "sizeInBytes" : 2090,
                "rowCount" : 55
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [r_reason_sk#122, r_reason_desc#124] "
          },
          "1" : {
            "sign" : -1011173987,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3630,
                "rowCount" : 55
              },
              "compileTime" : {
                "sizeInBytes" : 3630,
                "rowCount" : 55
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(r_reason_sk#122) "
          },
          "2" : {
            "sign" : 1775088518,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3630,
                "rowCount" : 55
              },
              "compileTime" : {
                "sizeInBytes" : 3630,
                "rowCount" : 55
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [r_reason_sk#122, r_reason_id#123, r_reason_desc#124], `spark_catalog`.`tpcds_100`.`reason`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [r_reason_sk#122, r_reason_desc#124]\n+- Filter isnotnull(r_reason_sk#122)\n   +- Relation spark_catalog.tpcds_100.reason[r_reason_sk#122,r_reason_id#123,r_reason_desc#124] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 47142854,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 2090,
            "rowCount" : 55,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [r_reason_sk#122, r_reason_desc#124] Condition : isnotnull(r_reason_sk#122) "
          },
          "1" : {
            "sign" : 2135996399,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 2090,
            "rowCount" : 55,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.reason Output [2]: [r_reason_sk#122, r_reason_desc#124] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/reason] PushedFilters: [IsNotNull(r_reason_sk)] ReadSchema: struct<r_reason_sk:int,r_reason_desc:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.reason",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull(r_reason_sk#122)\n+- FileScan parquet spark_catalog.tpcds_100.reason[r_reason_sk#122,r_reason_desc#124] Batched: true, DataFilters: [isnotnull(r_reason_sk#122)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/reason], PartitionFilters: [], PushedFilters: [IsNotNull(r_reason_sk)], ReadSchema: struct<r_reason_sk:int,r_reason_desc:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2090,
        "inputRowCount" : 55
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 4 ],
      "Objectives" : {
        "DurationInMs" : 1340,
        "TotalTasksDurationInMs" : 1335,
        "IOBytes" : {
          "Total" : 2546,
          "Details" : {
            "IR" : 2546,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702227439160,
  "SQLEndTimeInMs" : 1702227467304,
  "Objectives" : {
    "DurationInMs" : 28144,
    "IOBytes" : {
      "Total" : 589099707,
      "Details" : {
        "IR" : 490449363,
        "IW" : 0,
        "SR" : 49325172,
        "SW" : 49325172
      }
    }
  }
}
