{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "12" : {
          "sign" : -1248035541,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 6432,
          "rowCount" : 268,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ws_item_sk#93 = i_item_sk#36) "
        },
        "8" : {
          "sign" : 1391912490,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1080,
          "rowCount" : 90,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#58] "
        },
        "19" : {
          "sign" : -90574688,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 1945876940,
          "rowCount" : 69495605,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#125 = ws_sold_date_sk#124) "
        },
        "23" : {
          "sign" : 1918970034,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1080,
          "rowCount" : 90,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#125] "
        },
        "4" : {
          "sign" : 1469472864,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 1945876940,
          "rowCount" : 69495605,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#58 = ws_sold_date_sk#35) "
        },
        "15" : {
          "sign" : -1494117967,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#36, i_item_id#37, i_rec_start_date#38, i_rec_end_date#39, i_item_desc#40, i_current_price#41, i_wholesale_cost#42, i_brand_id#43, i_brand#44, i_class_id#45, i_class#46, i_category_id#47, i_category#48, i_manufact_id#49, i_manufact#50, i_size#51, i_formulation#52, i_color#53, i_units#54, i_container#55, i_manager_id#56, i_product_name#57], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "11" : {
          "sign" : 62451471,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 5360,
          "rowCount" : 268,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#36, (1.3 * avg(ws_ext_discount_amt))#89] "
        },
        "9" : {
          "sign" : -1344689365,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 22140,
          "rowCount" : 90,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#60) AND ((d_date#60 >= 1998-03-18) AND (d_date#60 <= 1998-06-16))) AND isnotnull(d_date_sk#58)) "
        },
        "22" : {
          "sign" : -202714525,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 14972593792,
          "rowCount" : 71983624,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#91, ws_ship_date_sk#92, ws_item_sk#93, ws_bill_customer_sk#94, ws_bill_cdemo_sk#95, ws_bill_hdemo_sk#96, ws_bill_addr_sk#97, ws_ship_customer_sk#98, ws_ship_cdemo_sk#99, ws_ship_hdemo_sk#100, ws_ship_addr_sk#101, ws_web_page_sk#102, ws_web_site_sk#103, ws_ship_mode_sk#104, ws_warehouse_sk#105, ws_promo_sk#106, ws_order_number#107L, ws_quantity#108, ws_wholesale_cost#109, ws_list_price#110, ws_sales_price#111, ws_ext_discount_amt#112, ws_ext_sales_price#113, ws_ext_wholesale_cost#114, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "26" : {
          "sign" : 2056650900,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 108,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0) AS bloomFilter#159] "
        },
        "13" : {
          "sign" : 1027109379,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3216,
          "rowCount" : 268,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#36] "
        },
        "24" : {
          "sign" : -1340545092,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 22140,
          "rowCount" : 90,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#127) AND ((d_date#127 >= 1998-03-18) AND (d_date#127 <= 1998-06-16))) AND isnotnull(d_date_sk#125)) "
        },
        "16" : {
          "sign" : 1339047849,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3992200,
          "rowCount" : 199610,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull((1.3 * avg(ws_ext_discount_amt))#89) "
        },
        "5" : {
          "sign" : 731157241,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1727173296,
          "rowCount" : 71965554,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_item_sk#4, ws_ext_discount_amt#23, ws_sold_date_sk#35] "
        },
        "10" : {
          "sign" : -246181910,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#58, d_date_id#59, d_date#60, d_month_seq#61, d_week_seq#62, d_quarter_seq#63, d_year#64, d_dow#65, d_moy#66, d_dom#67, d_qoy#68, d_fy_year#69, d_fy_quarter_seq#70, d_fy_week_seq#71, d_day_name#72, d_quarter_name#73, d_holiday#74, d_weekend#75, d_following_holiday#76, d_first_dom#77, d_last_dom#78, d_same_day_ly#79, d_same_day_lq#80, d_current_day#81, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "21" : {
          "sign" : -2016648723,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 14972593792,
          "rowCount" : 71983624,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(ws_sold_date_sk#124) AND isnotnull(ws_item_sk#93)) AND dynamicpruning#157 [ws_sold_date_sk#124]) AND might_contain(scalar-subquery#160 [], xxhash64(ws_item_sk#93, 42))) "
        },
        "6" : {
          "sign" : 773306417,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 14968835232,
          "rowCount" : 71965554,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(ws_item_sk#4) AND isnotnull(ws_ext_discount_amt#23)) AND isnotnull(ws_sold_date_sk#35)) AND dynamicpruning#156 [ws_sold_date_sk#35]) "
        },
        "1" : {
          "sign" : -1315835667,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1150670480,
          "rowCount" : 71916905,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_ext_discount_amt#23] "
        },
        "17" : {
          "sign" : -1437360073,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 3992200,
          "rowCount" : 199610,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [ws_item_sk#93], [(1.3 * cast((avg(UnscaledValue(ws_ext_discount_amt#112)) / 100.0) as decimal(11,6))) AS (1.3 * avg(ws_ext_discount_amt))#89, ws_item_sk#93] "
        },
        "25" : {
          "sign" : -1386512826,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#125, d_date_id#126, d_date#127, d_month_seq#128, d_week_seq#129, d_quarter_seq#130, d_year#131, d_dow#132, d_moy#133, d_dom#134, d_qoy#135, d_fy_year#136, d_fy_quarter_seq#137, d_fy_week_seq#138, d_day_name#139, d_quarter_name#140, d_holiday#141, d_weekend#142, d_following_holiday#143, d_first_dom#144, d_last_dom#145, d_same_day_ly#146, d_same_day_lq#147, d_current_day#148, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "14" : {
          "sign" : -538144002,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 114168,
          "rowCount" : 268,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36)) "
        },
        "0" : {
          "sign" : 765588269,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 16,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [MakeDecimal(sum(UnscaledValue(ws_ext_discount_amt#23)),17,2) AS Excess Discount Amount#0] "
        },
        "20" : {
          "sign" : 1338429537,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1727606976,
          "rowCount" : 71983624,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_item_sk#93, ws_ext_discount_amt#112, ws_sold_date_sk#124] "
        },
        "2" : {
          "sign" : 1571194127,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 2301340960,
          "rowCount" : 71916905,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((i_item_sk#36 = ws_item_sk#4) AND (cast(ws_ext_discount_amt#23 as decimal(14,7)) > (1.3 * avg(ws_ext_discount_amt))#89)) "
        },
        "18" : {
          "sign" : 1901532935,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1389912100,
          "rowCount" : 69495605,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_item_sk#93, ws_ext_discount_amt#112] "
        },
        "7" : {
          "sign" : 288839960,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 14972593792,
          "rowCount" : 71983624,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#2, ws_ship_date_sk#3, ws_item_sk#4, ws_bill_customer_sk#5, ws_bill_cdemo_sk#6, ws_bill_hdemo_sk#7, ws_bill_addr_sk#8, ws_ship_customer_sk#9, ws_ship_cdemo_sk#10, ws_ship_hdemo_sk#11, ws_ship_addr_sk#12, ws_web_page_sk#13, ws_web_site_sk#14, ws_ship_mode_sk#15, ws_warehouse_sk#16, ws_promo_sk#17, ws_order_number#18L, ws_quantity#19, ws_wholesale_cost#20, ws_list_price#21, ws_sales_price#22, ws_ext_discount_amt#23, ws_ext_sales_price#24, ws_ext_wholesale_cost#25, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "3" : {
          "sign" : 6827496,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1389912100,
          "rowCount" : 69495605,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_item_sk#4, ws_ext_discount_amt#23] "
        }
      },
      "links" : [ {
        "fromId" : 7,
        "fromName" : "LogicalRelation",
        "toId" : 6,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "LogicalRelation",
        "toId" : 9,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Filter",
        "toId" : 8,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Project",
        "toId" : 6,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 6,
        "fromName" : "Filter",
        "toId" : 5,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Project",
        "toId" : 4,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Project",
        "toId" : 4,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Join",
        "toId" : 3,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Project",
        "toId" : 2,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "LogicalRelation",
        "toId" : 14,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Filter",
        "toId" : 13,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Project",
        "toId" : 12,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "LogicalRelation",
        "toId" : 21,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "LogicalRelation",
        "toId" : 24,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "Filter",
        "toId" : 23,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "Project",
        "toId" : 21,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 13,
        "fromName" : "Project",
        "toId" : 26,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "Aggregate",
        "toId" : 21,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 21,
        "fromName" : "Filter",
        "toId" : 20,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "Project",
        "toId" : 19,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "Project",
        "toId" : 19,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "Join",
        "toId" : 18,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "Project",
        "toId" : 17,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Aggregate",
        "toId" : 16,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "Filter",
        "toId" : 12,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 12,
        "fromName" : "Join",
        "toId" : 11,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "Project",
        "toId" : 2,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Join",
        "toId" : 1,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "Project",
        "toId" : 0,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "Aggregate [MakeDecimal(sum(UnscaledValue(ws_ext_discount_amt#23)),17,2) AS Excess Discount Amount#0]\n+- Project [ws_ext_discount_amt#23]\n   +- Join Inner, ((i_item_sk#36 = ws_item_sk#4) AND (cast(ws_ext_discount_amt#23 as decimal(14,7)) > (1.3 * avg(ws_ext_discount_amt))#89))\n      :- Project [ws_item_sk#4, ws_ext_discount_amt#23]\n      :  +- Join Inner, (d_date_sk#58 = ws_sold_date_sk#35)\n      :     :- Project [ws_item_sk#4, ws_ext_discount_amt#23, ws_sold_date_sk#35]\n      :     :  +- Filter (((isnotnull(ws_item_sk#4) AND isnotnull(ws_ext_discount_amt#23)) AND isnotnull(ws_sold_date_sk#35)) AND dynamicpruning#156 [ws_sold_date_sk#35])\n      :     :     :  +- Project [d_date_sk#58]\n      :     :     :     +- Filter ((isnotnull(d_date#60) AND ((d_date#60 >= 1998-03-18) AND (d_date#60 <= 1998-06-16))) AND isnotnull(d_date_sk#58))\n      :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date_id#59,d_date#60,d_month_seq#61,d_week_seq#62,d_quarter_seq#63,d_year#64,d_dow#65,d_moy#66,d_dom#67,d_qoy#68,d_fy_year#69,d_fy_quarter_seq#70,d_fy_week_seq#71,d_day_name#72,d_quarter_name#73,d_holiday#74,d_weekend#75,d_following_holiday#76,d_first_dom#77,d_last_dom#78,d_same_day_ly#79,d_same_day_lq#80,d_current_day#81,... 4 more fields] parquet\n      :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#2,ws_ship_date_sk#3,ws_item_sk#4,ws_bill_customer_sk#5,ws_bill_cdemo_sk#6,ws_bill_hdemo_sk#7,ws_bill_addr_sk#8,ws_ship_customer_sk#9,ws_ship_cdemo_sk#10,ws_ship_hdemo_sk#11,ws_ship_addr_sk#12,ws_web_page_sk#13,ws_web_site_sk#14,ws_ship_mode_sk#15,ws_warehouse_sk#16,ws_promo_sk#17,ws_order_number#18L,ws_quantity#19,ws_wholesale_cost#20,ws_list_price#21,ws_sales_price#22,ws_ext_discount_amt#23,ws_ext_sales_price#24,ws_ext_wholesale_cost#25,... 10 more fields] parquet\n      :     +- Project [d_date_sk#58]\n      :        +- Filter ((isnotnull(d_date#60) AND ((d_date#60 >= 1998-03-18) AND (d_date#60 <= 1998-06-16))) AND isnotnull(d_date_sk#58))\n      :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date_id#59,d_date#60,d_month_seq#61,d_week_seq#62,d_quarter_seq#63,d_year#64,d_dow#65,d_moy#66,d_dom#67,d_qoy#68,d_fy_year#69,d_fy_quarter_seq#70,d_fy_week_seq#71,d_day_name#72,d_quarter_name#73,d_holiday#74,d_weekend#75,d_following_holiday#76,d_first_dom#77,d_last_dom#78,d_same_day_ly#79,d_same_day_lq#80,d_current_day#81,... 4 more fields] parquet\n      +- Project [i_item_sk#36, (1.3 * avg(ws_ext_discount_amt))#89]\n         +- Join Inner, (ws_item_sk#93 = i_item_sk#36)\n            :- Project [i_item_sk#36]\n            :  +- Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n            :     +- Relation spark_catalog.tpcds_100.item[i_item_sk#36,i_item_id#37,i_rec_start_date#38,i_rec_end_date#39,i_item_desc#40,i_current_price#41,i_wholesale_cost#42,i_brand_id#43,i_brand#44,i_class_id#45,i_class#46,i_category_id#47,i_category#48,i_manufact_id#49,i_manufact#50,i_size#51,i_formulation#52,i_color#53,i_units#54,i_container#55,i_manager_id#56,i_product_name#57] parquet\n            +- Filter isnotnull((1.3 * avg(ws_ext_discount_amt))#89)\n               +- Aggregate [ws_item_sk#93], [(1.3 * cast((avg(UnscaledValue(ws_ext_discount_amt#112)) / 100.0) as decimal(11,6))) AS (1.3 * avg(ws_ext_discount_amt))#89, ws_item_sk#93]\n                  +- Project [ws_item_sk#93, ws_ext_discount_amt#112]\n                     +- Join Inner, (d_date_sk#125 = ws_sold_date_sk#124)\n                        :- Project [ws_item_sk#93, ws_ext_discount_amt#112, ws_sold_date_sk#124]\n                        :  +- Filter (((isnotnull(ws_sold_date_sk#124) AND isnotnull(ws_item_sk#93)) AND dynamicpruning#157 [ws_sold_date_sk#124]) AND might_contain(scalar-subquery#160 [], xxhash64(ws_item_sk#93, 42)))\n                        :     :  :- Project [d_date_sk#125]\n                        :     :  :  +- Filter ((isnotnull(d_date#127) AND ((d_date#127 >= 1998-03-18) AND (d_date#127 <= 1998-06-16))) AND isnotnull(d_date_sk#125))\n                        :     :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#125,d_date_id#126,d_date#127,d_month_seq#128,d_week_seq#129,d_quarter_seq#130,d_year#131,d_dow#132,d_moy#133,d_dom#134,d_qoy#135,d_fy_year#136,d_fy_quarter_seq#137,d_fy_week_seq#138,d_day_name#139,d_quarter_name#140,d_holiday#141,d_weekend#142,d_following_holiday#143,d_first_dom#144,d_last_dom#145,d_same_day_ly#146,d_same_day_lq#147,d_current_day#148,... 4 more fields] parquet\n                        :     :  +- Aggregate [bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0) AS bloomFilter#159]\n                        :     :     +- Project [i_item_sk#36]\n                        :     :        +- Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n                        :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#36,i_item_id#37,i_rec_start_date#38,i_rec_end_date#39,i_item_desc#40,i_current_price#41,i_wholesale_cost#42,i_brand_id#43,i_brand#44,i_class_id#45,i_class#46,i_category_id#47,i_category#48,i_manufact_id#49,i_manufact#50,i_size#51,i_formulation#52,i_color#53,i_units#54,i_container#55,i_manager_id#56,i_product_name#57] parquet\n                        :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#91,ws_ship_date_sk#92,ws_item_sk#93,ws_bill_customer_sk#94,ws_bill_cdemo_sk#95,ws_bill_hdemo_sk#96,ws_bill_addr_sk#97,ws_ship_customer_sk#98,ws_ship_cdemo_sk#99,ws_ship_hdemo_sk#100,ws_ship_addr_sk#101,ws_web_page_sk#102,ws_web_site_sk#103,ws_ship_mode_sk#104,ws_warehouse_sk#105,ws_promo_sk#106,ws_order_number#107L,ws_quantity#108,ws_wholesale_cost#109,ws_list_price#110,ws_sales_price#111,ws_ext_discount_amt#112,ws_ext_sales_price#113,ws_ext_wholesale_cost#114,... 10 more fields] parquet\n                        +- Project [d_date_sk#125]\n                           +- Filter ((isnotnull(d_date#127) AND ((d_date#127 >= 1998-03-18) AND (d_date#127 <= 1998-06-16))) AND isnotnull(d_date_sk#125))\n                              +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#125,d_date_id#126,d_date#127,d_month_seq#128,d_week_seq#129,d_quarter_seq#130,d_year#131,d_dow#132,d_moy#133,d_dom#134,d_qoy#135,d_fy_year#136,d_fy_quarter_seq#137,d_fy_week_seq#138,d_day_name#139,d_quarter_name#140,d_holiday#141,d_weekend#142,d_following_holiday#143,d_first_dom#144,d_last_dom#145,d_same_day_ly#146,d_same_day_lq#147,d_current_day#148,... 4 more fields] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 30068031692,
      "inputRowCount" : 144317346
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "4" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -1433277441,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1341379200,
            "rowCount" : 67068960,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#36, (1.3 * avg(ws_ext_discount_amt))#164] "
          },
          "8" : {
            "sign" : 1391912490,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1080,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#58] "
          },
          "4" : {
            "sign" : -318642894,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 183368231592,
            "rowCount" : 6548865414,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#58 = ws_sold_date_sk#35) "
          },
          "15" : {
            "sign" : 1384976892,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3992200,
            "rowCount" : 199610,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull((1.3 * avg(ws_ext_discount_amt))#164) "
          },
          "11" : {
            "sign" : 1459958057,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049304,
            "rowCount" : 91,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#58], BroadcastQueryStage 0 "
          },
          "9" : {
            "sign" : -1344689365,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 22140,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#60) AND ((d_date#60 >= 1998-03-18) AND (d_date#60 <= 1998-06-16))) AND isnotnull(d_date_sk#58)) "
          },
          "13" : {
            "sign" : 2007595855,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1609655040,
            "rowCount" : 67068960,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_item_sk#167 = i_item_sk#36) "
          },
          "16" : {
            "sign" : 528183832,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3992200,
            "rowCount" : 199610,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ws_item_sk#167], [(1.3 * cast((avg(UnscaledValue(ws_ext_discount_amt#186)) / 100.0) as decimal(11,6))) AS (1.3 * avg(ws_ext_discount_amt))#164, ws_item_sk#167], HashAggregate(keys=[ws_item_sk#167], functions=[avg(UnscaledValue(ws_ext_discount_amt#186))]) "
          },
          "5" : {
            "sign" : 289596764,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1727173296,
            "rowCount" : 71965554,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#4, ws_ext_discount_amt#23, ws_sold_date_sk#35] "
          },
          "10" : {
            "sign" : -246181910,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#58, d_date_id#59, d_date#60, d_month_seq#61, d_week_seq#62, d_quarter_seq#63, d_year#64, d_dow#65, d_moy#66, d_dom#67, d_qoy#68, d_fy_year#69, d_fy_quarter_seq#70, d_fy_week_seq#71, d_day_name#72, d_quarter_name#73, d_holiday#74, d_weekend#75, d_following_holiday#76, d_first_dom#77, d_last_dom#78, d_same_day_ly#79, d_same_day_lq#80, d_current_day#81, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "6" : {
            "sign" : -1644411116,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14968835232,
            "rowCount" : 71965554,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(ws_item_sk#4) AND isnotnull(ws_ext_discount_amt#23)) AND isnotnull(ws_sold_date_sk#35)) AND dynamicpruning#230 [ws_sold_date_sk#35]) "
          },
          "1" : {
            "sign" : -1695194143,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 7027609479951191040,
            "rowCount" : 439225592496949440,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ext_discount_amt#23] "
          },
          "14" : {
            "sign" : -1335045368,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1064960,
            "rowCount" : 336,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#36], BroadcastQueryStage 1 "
          },
          "0" : {
            "sign" : 1940649979,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [MakeDecimal(sum(UnscaledValue(ws_ext_discount_amt#23)),17,2) AS Excess Discount Amount#161] "
          },
          "2" : {
            "sign" : 1355203169,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 14055218959902382080,
            "rowCount" : 439225592496949440,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((i_item_sk#36 = ws_item_sk#4) AND (cast(ws_ext_discount_amt#23 as decimal(14,7)) > (1.3 * avg(ws_ext_discount_amt))#164)) "
          },
          "7" : {
            "sign" : 288839960,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#2, ws_ship_date_sk#3, ws_item_sk#4, ws_bill_customer_sk#5, ws_bill_cdemo_sk#6, ws_bill_hdemo_sk#7, ws_bill_addr_sk#8, ws_ship_customer_sk#9, ws_ship_cdemo_sk#10, ws_ship_hdemo_sk#11, ws_ship_addr_sk#12, ws_web_page_sk#13, ws_web_site_sk#14, ws_ship_mode_sk#15, ws_warehouse_sk#16, ws_promo_sk#17, ws_order_number#18L, ws_quantity#19, ws_wholesale_cost#20, ws_list_price#21, ws_sales_price#22, ws_ext_discount_amt#23, ws_ext_sales_price#24, ws_ext_wholesale_cost#25, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : -1592582326,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 130977308280,
            "rowCount" : 6548865414,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#4, ws_ext_discount_amt#23] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalRelation",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalRelation",
          "toId" : 9,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [MakeDecimal(sum(UnscaledValue(ws_ext_discount_amt#23)),17,2) AS Excess Discount Amount#161]\n+- Project [ws_ext_discount_amt#23]\n   +- Join Inner, ((i_item_sk#36 = ws_item_sk#4) AND (cast(ws_ext_discount_amt#23 as decimal(14,7)) > (1.3 * avg(ws_ext_discount_amt))#164))\n      :- Project [ws_item_sk#4, ws_ext_discount_amt#23]\n      :  +- Join Inner, (d_date_sk#58 = ws_sold_date_sk#35)\n      :     :- Project [ws_item_sk#4, ws_ext_discount_amt#23, ws_sold_date_sk#35]\n      :     :  +- Filter (((isnotnull(ws_item_sk#4) AND isnotnull(ws_ext_discount_amt#23)) AND isnotnull(ws_sold_date_sk#35)) AND dynamicpruning#230 [ws_sold_date_sk#35])\n      :     :     :  +- Project [d_date_sk#58]\n      :     :     :     +- Filter ((isnotnull(d_date#60) AND ((d_date#60 >= 1998-03-18) AND (d_date#60 <= 1998-06-16))) AND isnotnull(d_date_sk#58))\n      :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date_id#59,d_date#60,d_month_seq#61,d_week_seq#62,d_quarter_seq#63,d_year#64,d_dow#65,d_moy#66,d_dom#67,d_qoy#68,d_fy_year#69,d_fy_quarter_seq#70,d_fy_week_seq#71,d_day_name#72,d_quarter_name#73,d_holiday#74,d_weekend#75,d_following_holiday#76,d_first_dom#77,d_last_dom#78,d_same_day_ly#79,d_same_day_lq#80,d_current_day#81,... 4 more fields] parquet\n      :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#2,ws_ship_date_sk#3,ws_item_sk#4,ws_bill_customer_sk#5,ws_bill_cdemo_sk#6,ws_bill_hdemo_sk#7,ws_bill_addr_sk#8,ws_ship_customer_sk#9,ws_ship_cdemo_sk#10,ws_ship_hdemo_sk#11,ws_ship_addr_sk#12,ws_web_page_sk#13,ws_web_site_sk#14,ws_ship_mode_sk#15,ws_warehouse_sk#16,ws_promo_sk#17,ws_order_number#18L,ws_quantity#19,ws_wholesale_cost#20,ws_list_price#21,ws_sales_price#22,ws_ext_discount_amt#23,ws_ext_sales_price#24,ws_ext_wholesale_cost#25,... 10 more fields] parquet\n      :     +- LogicalQueryStage Project [d_date_sk#58], BroadcastQueryStage 0\n      +- Project [i_item_sk#36, (1.3 * avg(ws_ext_discount_amt))#164]\n         +- Join Inner, (ws_item_sk#167 = i_item_sk#36)\n            :- LogicalQueryStage Project [i_item_sk#36], BroadcastQueryStage 1\n            +- Filter isnotnull((1.3 * avg(ws_ext_discount_amt))#164)\n               +- LogicalQueryStage Aggregate [ws_item_sk#167], [(1.3 * cast((avg(UnscaledValue(ws_ext_discount_amt#186)) / 100.0) as decimal(11,6))) AS (1.3 * avg(ws_ext_discount_amt))#164, ws_item_sk#167], HashAggregate(keys=[ws_item_sk#167], functions=[avg(UnscaledValue(ws_ext_discount_amt#186))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 14978700256,
        "inputRowCount" : 72183661
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227495257,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 7199,
        "IOBytes" : {
          "Total" : 36111523,
          "Details" : {
            "IR" : 35883159,
            "IW" : 0,
            "SR" : 114182,
            "SW" : 114182
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -1433277441,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 13258560,
            "rowCount" : 662928,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#36, (1.3 * avg(ws_ext_discount_amt))#164] "
          },
          "8" : {
            "sign" : 1391912490,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1080,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#58] "
          },
          "4" : {
            "sign" : -318642894,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 183368231592,
            "rowCount" : 6548865414,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#58 = ws_sold_date_sk#35) "
          },
          "15" : {
            "sign" : 1384976892,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39460,
            "rowCount" : 1973,
            "isRuntime" : true,
            "predicate" : " (unknown) Filter Arguments: isnotnull((1.3 * avg(ws_ext_discount_amt))#164) "
          },
          "11" : {
            "sign" : 1459958057,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049304,
            "rowCount" : 91,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#58], BroadcastQueryStage 0 "
          },
          "9" : {
            "sign" : -1344689365,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 22140,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#60) AND ((d_date#60 >= 1998-03-18) AND (d_date#60 <= 1998-06-16))) AND isnotnull(d_date_sk#58)) "
          },
          "13" : {
            "sign" : 2007595855,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 15910272,
            "rowCount" : 662928,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_item_sk#167 = i_item_sk#36) "
          },
          "16" : {
            "sign" : 528183832,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 63136,
            "rowCount" : 1973,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ws_item_sk#167], [(1.3 * cast((avg(UnscaledValue(ws_ext_discount_amt#186)) / 100.0) as decimal(11,6))) AS (1.3 * avg(ws_ext_discount_amt))#164, ws_item_sk#167], HashAggregate(keys=[ws_item_sk#167], functions=[avg(UnscaledValue(ws_ext_discount_amt#186))]) "
          },
          "5" : {
            "sign" : 289596764,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1727173296,
            "rowCount" : 71965554,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#4, ws_ext_discount_amt#23, ws_sold_date_sk#35] "
          },
          "10" : {
            "sign" : -246181910,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#58, d_date_id#59, d_date#60, d_month_seq#61, d_week_seq#62, d_quarter_seq#63, d_year#64, d_dow#65, d_moy#66, d_dom#67, d_qoy#68, d_fy_year#69, d_fy_quarter_seq#70, d_fy_week_seq#71, d_day_name#72, d_quarter_name#73, d_holiday#74, d_weekend#75, d_following_holiday#76, d_first_dom#77, d_last_dom#78, d_same_day_ly#79, d_same_day_lq#80, d_current_day#81, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "6" : {
            "sign" : -1644411116,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14968835232,
            "rowCount" : 71965554,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(ws_item_sk#4) AND isnotnull(ws_ext_discount_amt#23)) AND isnotnull(ws_sold_date_sk#35)) AND dynamicpruning#230 [ws_sold_date_sk#35]) "
          },
          "1" : {
            "sign" : -1695194143,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 69462820018755072,
            "rowCount" : 4341426251172192,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ext_discount_amt#23] "
          },
          "14" : {
            "sign" : -1335045368,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1064960,
            "rowCount" : 336,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#36], BroadcastQueryStage 1 "
          },
          "0" : {
            "sign" : 1940649979,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [MakeDecimal(sum(UnscaledValue(ws_ext_discount_amt#23)),17,2) AS Excess Discount Amount#161] "
          },
          "2" : {
            "sign" : 1355203169,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 138925640037510144,
            "rowCount" : 4341426251172192,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((i_item_sk#36 = ws_item_sk#4) AND (cast(ws_ext_discount_amt#23 as decimal(14,7)) > (1.3 * avg(ws_ext_discount_amt))#164)) "
          },
          "7" : {
            "sign" : 288839960,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#2, ws_ship_date_sk#3, ws_item_sk#4, ws_bill_customer_sk#5, ws_bill_cdemo_sk#6, ws_bill_hdemo_sk#7, ws_bill_addr_sk#8, ws_ship_customer_sk#9, ws_ship_cdemo_sk#10, ws_ship_hdemo_sk#11, ws_ship_addr_sk#12, ws_web_page_sk#13, ws_web_site_sk#14, ws_ship_mode_sk#15, ws_warehouse_sk#16, ws_promo_sk#17, ws_order_number#18L, ws_quantity#19, ws_wholesale_cost#20, ws_list_price#21, ws_sales_price#22, ws_ext_discount_amt#23, ws_ext_sales_price#24, ws_ext_wholesale_cost#25, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : -1592582326,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 130977308280,
            "rowCount" : 6548865414,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#4, ws_ext_discount_amt#23] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalRelation",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalRelation",
          "toId" : 9,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [MakeDecimal(sum(UnscaledValue(ws_ext_discount_amt#23)),17,2) AS Excess Discount Amount#161]\n+- Project [ws_ext_discount_amt#23]\n   +- Join Inner, ((i_item_sk#36 = ws_item_sk#4) AND (cast(ws_ext_discount_amt#23 as decimal(14,7)) > (1.3 * avg(ws_ext_discount_amt))#164))\n      :- Project [ws_item_sk#4, ws_ext_discount_amt#23]\n      :  +- Join Inner, (d_date_sk#58 = ws_sold_date_sk#35)\n      :     :- Project [ws_item_sk#4, ws_ext_discount_amt#23, ws_sold_date_sk#35]\n      :     :  +- Filter (((isnotnull(ws_item_sk#4) AND isnotnull(ws_ext_discount_amt#23)) AND isnotnull(ws_sold_date_sk#35)) AND dynamicpruning#230 [ws_sold_date_sk#35])\n      :     :     :  +- Project [d_date_sk#58]\n      :     :     :     +- Filter ((isnotnull(d_date#60) AND ((d_date#60 >= 1998-03-18) AND (d_date#60 <= 1998-06-16))) AND isnotnull(d_date_sk#58))\n      :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date_id#59,d_date#60,d_month_seq#61,d_week_seq#62,d_quarter_seq#63,d_year#64,d_dow#65,d_moy#66,d_dom#67,d_qoy#68,d_fy_year#69,d_fy_quarter_seq#70,d_fy_week_seq#71,d_day_name#72,d_quarter_name#73,d_holiday#74,d_weekend#75,d_following_holiday#76,d_first_dom#77,d_last_dom#78,d_same_day_ly#79,d_same_day_lq#80,d_current_day#81,... 4 more fields] parquet\n      :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#2,ws_ship_date_sk#3,ws_item_sk#4,ws_bill_customer_sk#5,ws_bill_cdemo_sk#6,ws_bill_hdemo_sk#7,ws_bill_addr_sk#8,ws_ship_customer_sk#9,ws_ship_cdemo_sk#10,ws_ship_hdemo_sk#11,ws_ship_addr_sk#12,ws_web_page_sk#13,ws_web_site_sk#14,ws_ship_mode_sk#15,ws_warehouse_sk#16,ws_promo_sk#17,ws_order_number#18L,ws_quantity#19,ws_wholesale_cost#20,ws_list_price#21,ws_sales_price#22,ws_ext_discount_amt#23,ws_ext_sales_price#24,ws_ext_wholesale_cost#25,... 10 more fields] parquet\n      :     +- LogicalQueryStage Project [d_date_sk#58], BroadcastQueryStage 0\n      +- Project [i_item_sk#36, (1.3 * avg(ws_ext_discount_amt))#164]\n         +- Join Inner, (ws_item_sk#167 = i_item_sk#36)\n            :- LogicalQueryStage Project [i_item_sk#36], BroadcastQueryStage 1\n            +- Filter isnotnull((1.3 * avg(ws_ext_discount_amt))#164)\n               +- LogicalQueryStage Aggregate [ws_item_sk#167], [(1.3 * cast((avg(UnscaledValue(ws_ext_discount_amt#186)) / 100.0) as decimal(11,6))) AS (1.3 * avg(ws_ext_discount_amt))#164, ws_item_sk#167], HashAggregate(keys=[ws_item_sk#167], functions=[avg(UnscaledValue(ws_ext_discount_amt#186))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 14974771192,
        "inputRowCount" : 71986024
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227501420,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 1036,
        "IOBytes" : {
          "Total" : 18058298,
          "Details" : {
            "IR" : 17943172,
            "IW" : 0,
            "SR" : 114182,
            "SW" : 944
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -1823350249,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1056768,
            "rowCount" : 166,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#36, (1.3 * avg(ws_ext_discount_amt))#164], BroadcastQueryStage 5 "
          },
          "8" : {
            "sign" : 1391912490,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1080,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#58] "
          },
          "4" : {
            "sign" : -318642894,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 183368231592,
            "rowCount" : 6548865414,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#58 = ws_sold_date_sk#35) "
          },
          "11" : {
            "sign" : 1459958057,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049304,
            "rowCount" : 91,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#58], BroadcastQueryStage 0 "
          },
          "9" : {
            "sign" : -1344689365,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 22140,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#60) AND ((d_date#60 >= 1998-03-18) AND (d_date#60 <= 1998-06-16))) AND isnotnull(d_date_sk#58)) "
          },
          "5" : {
            "sign" : 289596764,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1727173296,
            "rowCount" : 71965554,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#4, ws_ext_discount_amt#23, ws_sold_date_sk#35] "
          },
          "10" : {
            "sign" : -246181910,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#58, d_date_id#59, d_date#60, d_month_seq#61, d_week_seq#62, d_quarter_seq#63, d_year#64, d_dow#65, d_moy#66, d_dom#67, d_qoy#68, d_fy_year#69, d_fy_quarter_seq#70, d_fy_week_seq#71, d_day_name#72, d_quarter_name#73, d_holiday#74, d_weekend#75, d_following_holiday#76, d_first_dom#77, d_last_dom#78, d_same_day_ly#79, d_same_day_lq#80, d_current_day#81, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "6" : {
            "sign" : -1644411116,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14968835232,
            "rowCount" : 71965554,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(ws_item_sk#4) AND isnotnull(ws_ext_discount_amt#23)) AND isnotnull(ws_sold_date_sk#35)) AND dynamicpruning#230 [ws_sold_date_sk#35]) "
          },
          "1" : {
            "sign" : -702427783,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 17393786539584,
            "rowCount" : 1087111658724,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ext_discount_amt#23] "
          },
          "0" : {
            "sign" : -1010711225,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [MakeDecimal(sum(UnscaledValue(ws_ext_discount_amt#23)),17,2) AS Excess Discount Amount#161] "
          },
          "2" : {
            "sign" : -276094419,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 34787573079168,
            "rowCount" : 1087111658724,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((i_item_sk#36 = ws_item_sk#4) AND (cast(ws_ext_discount_amt#23 as decimal(14,7)) > (1.3 * avg(ws_ext_discount_amt))#164)) "
          },
          "7" : {
            "sign" : 288839960,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#2, ws_ship_date_sk#3, ws_item_sk#4, ws_bill_customer_sk#5, ws_bill_cdemo_sk#6, ws_bill_hdemo_sk#7, ws_bill_addr_sk#8, ws_ship_customer_sk#9, ws_ship_cdemo_sk#10, ws_ship_hdemo_sk#11, ws_ship_addr_sk#12, ws_web_page_sk#13, ws_web_site_sk#14, ws_ship_mode_sk#15, ws_warehouse_sk#16, ws_promo_sk#17, ws_order_number#18L, ws_quantity#19, ws_wholesale_cost#20, ws_list_price#21, ws_sales_price#22, ws_ext_discount_amt#23, ws_ext_sales_price#24, ws_ext_wholesale_cost#25, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : -1592582326,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 130977308280,
            "rowCount" : 6548865414,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#4, ws_ext_discount_amt#23] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalRelation",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalRelation",
          "toId" : 9,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [MakeDecimal(sum(UnscaledValue(ws_ext_discount_amt#23)),17,2) AS Excess Discount Amount#161]\n+- Project [ws_ext_discount_amt#23]\n   +- Join Inner, ((i_item_sk#36 = ws_item_sk#4) AND (cast(ws_ext_discount_amt#23 as decimal(14,7)) > (1.3 * avg(ws_ext_discount_amt))#164))\n      :- Project [ws_item_sk#4, ws_ext_discount_amt#23]\n      :  +- Join Inner, (d_date_sk#58 = ws_sold_date_sk#35)\n      :     :- Project [ws_item_sk#4, ws_ext_discount_amt#23, ws_sold_date_sk#35]\n      :     :  +- Filter (((isnotnull(ws_item_sk#4) AND isnotnull(ws_ext_discount_amt#23)) AND isnotnull(ws_sold_date_sk#35)) AND dynamicpruning#230 [ws_sold_date_sk#35])\n      :     :     :  +- Project [d_date_sk#58]\n      :     :     :     +- Filter ((isnotnull(d_date#60) AND ((d_date#60 >= 1998-03-18) AND (d_date#60 <= 1998-06-16))) AND isnotnull(d_date_sk#58))\n      :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date_id#59,d_date#60,d_month_seq#61,d_week_seq#62,d_quarter_seq#63,d_year#64,d_dow#65,d_moy#66,d_dom#67,d_qoy#68,d_fy_year#69,d_fy_quarter_seq#70,d_fy_week_seq#71,d_day_name#72,d_quarter_name#73,d_holiday#74,d_weekend#75,d_following_holiday#76,d_first_dom#77,d_last_dom#78,d_same_day_ly#79,d_same_day_lq#80,d_current_day#81,... 4 more fields] parquet\n      :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#2,ws_ship_date_sk#3,ws_item_sk#4,ws_bill_customer_sk#5,ws_bill_cdemo_sk#6,ws_bill_hdemo_sk#7,ws_bill_addr_sk#8,ws_ship_customer_sk#9,ws_ship_cdemo_sk#10,ws_ship_hdemo_sk#11,ws_ship_addr_sk#12,ws_web_page_sk#13,ws_web_site_sk#14,ws_ship_mode_sk#15,ws_warehouse_sk#16,ws_promo_sk#17,ws_order_number#18L,ws_quantity#19,ws_wholesale_cost#20,ws_list_price#21,ws_sales_price#22,ws_ext_discount_amt#23,ws_ext_sales_price#24,ws_ext_wholesale_cost#25,... 10 more fields] parquet\n      :     +- LogicalQueryStage Project [d_date_sk#58], BroadcastQueryStage 0\n      +- LogicalQueryStage Project [i_item_sk#36, (1.3 * avg(ws_ext_discount_amt))#164], BroadcastQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 14974699864,
        "inputRowCount" : 71983881
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227501788,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 668,
        "IOBytes" : {
          "Total" : 17945060,
          "Details" : {
            "IR" : 17943172,
            "IW" : 0,
            "SR" : 944,
            "SW" : 944
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -728816502,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6720,
            "rowCount" : 336,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#36, (1.3 * avg(ws_ext_discount_amt))#164] "
          },
          "8" : {
            "sign" : 1391912490,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1080,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#58] "
          },
          "19" : {
            "sign" : -656153101,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1727606976,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#167, ws_ext_discount_amt#186, ws_sold_date_sk#198] "
          },
          "23" : {
            "sign" : 1025411888,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 22140,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#201) AND ((d_date#201 >= 1998-03-18) AND (d_date#201 <= 1998-06-16))) AND isnotnull(d_date_sk#199)) "
          },
          "4" : {
            "sign" : -318642894,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1945876940,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#58 = ws_sold_date_sk#35) "
          },
          "15" : {
            "sign" : -1053729657,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3992200,
            "rowCount" : 199610,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull((1.3 * avg(ws_ext_discount_amt))#164) "
          },
          "11" : {
            "sign" : 1459958057,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1080,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#58], BroadcastQueryStage 0 "
          },
          "9" : {
            "sign" : -1344689365,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 22140,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#60) AND ((d_date#60 >= 1998-03-18) AND (d_date#60 <= 1998-06-16))) AND isnotnull(d_date_sk#58)) "
          },
          "22" : {
            "sign" : -819728331,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1080,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#199] "
          },
          "26" : {
            "sign" : 1027109379,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3216,
            "rowCount" : 268,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#36] "
          },
          "13" : {
            "sign" : -770977584,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 8064,
            "rowCount" : 336,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_item_sk#167 = i_item_sk#36) "
          },
          "24" : {
            "sign" : 1309245952,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#199, d_date_id#200, d_date#201, d_month_seq#202, d_week_seq#203, d_quarter_seq#204, d_year#205, d_dow#206, d_moy#207, d_dom#208, d_qoy#209, d_fy_year#210, d_fy_quarter_seq#211, d_fy_week_seq#212, d_day_name#213, d_quarter_name#214, d_holiday#215, d_weekend#216, d_following_holiday#217, d_first_dom#218, d_last_dom#219, d_same_day_ly#220, d_same_day_lq#221, d_current_day#222, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "16" : {
            "sign" : -858876633,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 3992200,
            "rowCount" : 199610,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ws_item_sk#167], [(1.3 * cast((avg(UnscaledValue(ws_ext_discount_amt#186)) / 100.0) as decimal(11,6))) AS (1.3 * avg(ws_ext_discount_amt))#164, ws_item_sk#167] "
          },
          "5" : {
            "sign" : 289596764,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1727173296,
            "rowCount" : 71965554,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#4, ws_ext_discount_amt#23, ws_sold_date_sk#35] "
          },
          "10" : {
            "sign" : -246181910,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#58, d_date_id#59, d_date#60, d_month_seq#61, d_week_seq#62, d_quarter_seq#63, d_year#64, d_dow#65, d_moy#66, d_dom#67, d_qoy#68, d_fy_year#69, d_fy_quarter_seq#70, d_fy_week_seq#71, d_day_name#72, d_quarter_name#73, d_holiday#74, d_weekend#75, d_following_holiday#76, d_first_dom#77, d_last_dom#78, d_same_day_ly#79, d_same_day_lq#80, d_current_day#81, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "21" : {
            "sign" : -1562766730,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#165, ws_ship_date_sk#166, ws_item_sk#167, ws_bill_customer_sk#168, ws_bill_cdemo_sk#169, ws_bill_hdemo_sk#170, ws_bill_addr_sk#171, ws_ship_customer_sk#172, ws_ship_cdemo_sk#173, ws_ship_hdemo_sk#174, ws_ship_addr_sk#175, ws_web_page_sk#176, ws_web_site_sk#177, ws_ship_mode_sk#178, ws_warehouse_sk#179, ws_promo_sk#180, ws_order_number#181L, ws_quantity#182, ws_wholesale_cost#183, ws_list_price#184, ws_sales_price#185, ws_ext_discount_amt#186, ws_ext_sales_price#187, ws_ext_wholesale_cost#188, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "6" : {
            "sign" : -1644411116,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14968835232,
            "rowCount" : 71965554,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(ws_item_sk#4) AND isnotnull(ws_ext_discount_amt#23)) AND isnotnull(ws_sold_date_sk#35)) AND dynamicpruning#230 [ws_sold_date_sk#35]) "
          },
          "1" : {
            "sign" : 1047262636,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 373608372480,
            "rowCount" : 23350523280,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ext_discount_amt#23] "
          },
          "17" : {
            "sign" : 1632150640,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1389912100,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#167, ws_ext_discount_amt#186] "
          },
          "25" : {
            "sign" : 346020049,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0) AS bloomFilter#233] "
          },
          "14" : {
            "sign" : -1335045368,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1064960,
            "rowCount" : 336,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#36], BroadcastQueryStage 1 "
          },
          "0" : {
            "sign" : -1833590236,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [MakeDecimal(sum(UnscaledValue(ws_ext_discount_amt#23)),17,2) AS Excess Discount Amount#161] "
          },
          "20" : {
            "sign" : -1493830095,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(ws_sold_date_sk#198) AND isnotnull(ws_item_sk#167)) AND dynamicpruning#231 [ws_sold_date_sk#198]) AND might_contain(scalar-subquery#234 [], xxhash64(ws_item_sk#167, 42))) "
          },
          "27" : {
            "sign" : -538144002,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 114168,
            "rowCount" : 268,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36)) "
          },
          "2" : {
            "sign" : 1796656830,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 747216744960,
            "rowCount" : 23350523280,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((i_item_sk#36 = ws_item_sk#4) AND (cast(ws_ext_discount_amt#23 as decimal(14,7)) > (1.3 * avg(ws_ext_discount_amt))#164)) "
          },
          "18" : {
            "sign" : 1128179104,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1945876940,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#199 = ws_sold_date_sk#198) "
          },
          "7" : {
            "sign" : 288839960,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#2, ws_ship_date_sk#3, ws_item_sk#4, ws_bill_customer_sk#5, ws_bill_cdemo_sk#6, ws_bill_hdemo_sk#7, ws_bill_addr_sk#8, ws_ship_customer_sk#9, ws_ship_cdemo_sk#10, ws_ship_hdemo_sk#11, ws_ship_addr_sk#12, ws_web_page_sk#13, ws_web_site_sk#14, ws_ship_mode_sk#15, ws_warehouse_sk#16, ws_promo_sk#17, ws_order_number#18L, ws_quantity#19, ws_wholesale_cost#20, ws_list_price#21, ws_sales_price#22, ws_ext_discount_amt#23, ws_ext_sales_price#24, ws_ext_wholesale_cost#25, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "29" : {
            "sign" : 1942718120,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1080,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#199], BroadcastQueryStage 3 "
          },
          "3" : {
            "sign" : -1592582326,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1389912100,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#4, ws_ext_discount_amt#23] "
          },
          "28" : {
            "sign" : -1494117967,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#36, i_item_id#37, i_rec_start_date#38, i_rec_end_date#39, i_item_desc#40, i_current_price#41, i_wholesale_cost#42, i_brand_id#43, i_brand#44, i_class_id#45, i_class#46, i_category_id#47, i_category#48, i_manufact_id#49, i_manufact#50, i_size#51, i_formulation#52, i_color#53, i_units#54, i_container#55, i_manager_id#56, i_product_name#57], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalRelation",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalRelation",
          "toId" : 9,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalRelation",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalRelation",
          "toId" : 23,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Filter",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalRelation",
          "toId" : 27,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Filter",
          "toId" : 26,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Project",
          "toId" : 25,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Aggregate",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 20,
          "fromName" : "Filter",
          "toId" : 19,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Project",
          "toId" : 18,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalQueryStage",
          "toId" : 18,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Join",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 16,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Aggregate",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [MakeDecimal(sum(UnscaledValue(ws_ext_discount_amt#23)),17,2) AS Excess Discount Amount#161]\n+- Project [ws_ext_discount_amt#23]\n   +- Join Inner, ((i_item_sk#36 = ws_item_sk#4) AND (cast(ws_ext_discount_amt#23 as decimal(14,7)) > (1.3 * avg(ws_ext_discount_amt))#164))\n      :- Project [ws_item_sk#4, ws_ext_discount_amt#23]\n      :  +- Join Inner, (d_date_sk#58 = ws_sold_date_sk#35)\n      :     :- Project [ws_item_sk#4, ws_ext_discount_amt#23, ws_sold_date_sk#35]\n      :     :  +- Filter (((isnotnull(ws_item_sk#4) AND isnotnull(ws_ext_discount_amt#23)) AND isnotnull(ws_sold_date_sk#35)) AND dynamicpruning#230 [ws_sold_date_sk#35])\n      :     :     :  +- Project [d_date_sk#58]\n      :     :     :     +- Filter ((isnotnull(d_date#60) AND ((d_date#60 >= 1998-03-18) AND (d_date#60 <= 1998-06-16))) AND isnotnull(d_date_sk#58))\n      :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date_id#59,d_date#60,d_month_seq#61,d_week_seq#62,d_quarter_seq#63,d_year#64,d_dow#65,d_moy#66,d_dom#67,d_qoy#68,d_fy_year#69,d_fy_quarter_seq#70,d_fy_week_seq#71,d_day_name#72,d_quarter_name#73,d_holiday#74,d_weekend#75,d_following_holiday#76,d_first_dom#77,d_last_dom#78,d_same_day_ly#79,d_same_day_lq#80,d_current_day#81,... 4 more fields] parquet\n      :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#2,ws_ship_date_sk#3,ws_item_sk#4,ws_bill_customer_sk#5,ws_bill_cdemo_sk#6,ws_bill_hdemo_sk#7,ws_bill_addr_sk#8,ws_ship_customer_sk#9,ws_ship_cdemo_sk#10,ws_ship_hdemo_sk#11,ws_ship_addr_sk#12,ws_web_page_sk#13,ws_web_site_sk#14,ws_ship_mode_sk#15,ws_warehouse_sk#16,ws_promo_sk#17,ws_order_number#18L,ws_quantity#19,ws_wholesale_cost#20,ws_list_price#21,ws_sales_price#22,ws_ext_discount_amt#23,ws_ext_sales_price#24,ws_ext_wholesale_cost#25,... 10 more fields] parquet\n      :     +- LogicalQueryStage Project [d_date_sk#58], BroadcastQueryStage 0\n      +- Project [i_item_sk#36, (1.3 * avg(ws_ext_discount_amt))#164]\n         +- Join Inner, (ws_item_sk#167 = i_item_sk#36)\n            :- LogicalQueryStage Project [i_item_sk#36], BroadcastQueryStage 1\n            +- Filter isnotnull((1.3 * avg(ws_ext_discount_amt))#164)\n               +- Aggregate [ws_item_sk#167], [(1.3 * cast((avg(UnscaledValue(ws_ext_discount_amt#186)) / 100.0) as decimal(11,6))) AS (1.3 * avg(ws_ext_discount_amt))#164, ws_item_sk#167]\n                  +- Project [ws_item_sk#167, ws_ext_discount_amt#186]\n                     +- Join Inner, (d_date_sk#199 = ws_sold_date_sk#198)\n                        :- Project [ws_item_sk#167, ws_ext_discount_amt#186, ws_sold_date_sk#198]\n                        :  +- Filter (((isnotnull(ws_sold_date_sk#198) AND isnotnull(ws_item_sk#167)) AND dynamicpruning#231 [ws_sold_date_sk#198]) AND might_contain(scalar-subquery#234 [], xxhash64(ws_item_sk#167, 42)))\n                        :     :  :- Project [d_date_sk#199]\n                        :     :  :  +- Filter ((isnotnull(d_date#201) AND ((d_date#201 >= 1998-03-18) AND (d_date#201 <= 1998-06-16))) AND isnotnull(d_date_sk#199))\n                        :     :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#199,d_date_id#200,d_date#201,d_month_seq#202,d_week_seq#203,d_quarter_seq#204,d_year#205,d_dow#206,d_moy#207,d_dom#208,d_qoy#209,d_fy_year#210,d_fy_quarter_seq#211,d_fy_week_seq#212,d_day_name#213,d_quarter_name#214,d_holiday#215,d_weekend#216,d_following_holiday#217,d_first_dom#218,d_last_dom#219,d_same_day_ly#220,d_same_day_lq#221,d_current_day#222,... 4 more fields] parquet\n                        :     :  +- Aggregate [bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0) AS bloomFilter#233]\n                        :     :     +- Project [i_item_sk#36]\n                        :     :        +- Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n                        :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#36,i_item_id#37,i_rec_start_date#38,i_rec_end_date#39,i_item_desc#40,i_current_price#41,i_wholesale_cost#42,i_brand_id#43,i_brand#44,i_class_id#45,i_class#46,i_category_id#47,i_category#48,i_manufact_id#49,i_manufact#50,i_size#51,i_formulation#52,i_color#53,i_units#54,i_container#55,i_manager_id#56,i_product_name#57] parquet\n                        :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#165,ws_ship_date_sk#166,ws_item_sk#167,ws_bill_customer_sk#168,ws_bill_cdemo_sk#169,ws_bill_hdemo_sk#170,ws_bill_addr_sk#171,ws_ship_customer_sk#172,ws_ship_cdemo_sk#173,ws_ship_hdemo_sk#174,ws_ship_addr_sk#175,ws_web_page_sk#176,ws_web_site_sk#177,ws_ship_mode_sk#178,ws_warehouse_sk#179,ws_promo_sk#180,ws_order_number#181L,ws_quantity#182,ws_wholesale_cost#183,ws_list_price#184,ws_sales_price#185,ws_ext_discount_amt#186,ws_ext_sales_price#187,ws_ext_wholesale_cost#188,... 10 more fields] parquet\n                        +- LogicalQueryStage Project [d_date_sk#199], BroadcastQueryStage 3\n"
      },
      "IM" : {
        "inputSizeInBytes" : 29946254704,
        "inputRowCount" : 143967764
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227490955,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 11501,
        "IOBytes" : {
          "Total" : 37417885,
          "Details" : {
            "IR" : 37186865,
            "IW" : 0,
            "SR" : 115510,
            "SW" : 115510
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -728816502,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6720,
            "rowCount" : 336,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#36, (1.3 * avg(ws_ext_discount_amt))#164] "
          },
          "8" : {
            "sign" : 1391912490,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1080,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#58] "
          },
          "19" : {
            "sign" : -656153101,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1727606976,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#167, ws_ext_discount_amt#186, ws_sold_date_sk#198] "
          },
          "23" : {
            "sign" : 1025411888,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 22140,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#201) AND ((d_date#201 >= 1998-03-18) AND (d_date#201 <= 1998-06-16))) AND isnotnull(d_date_sk#199)) "
          },
          "4" : {
            "sign" : -318642894,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 183368231592,
            "rowCount" : 6548865414,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#58 = ws_sold_date_sk#35) "
          },
          "15" : {
            "sign" : -1053729657,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 4135120,
            "rowCount" : 206756,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull((1.3 * avg(ws_ext_discount_amt))#164) "
          },
          "11" : {
            "sign" : 1459958057,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049304,
            "rowCount" : 91,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#58], BroadcastQueryStage 0 "
          },
          "9" : {
            "sign" : -1344689365,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 22140,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#60) AND ((d_date#60 >= 1998-03-18) AND (d_date#60 <= 1998-06-16))) AND isnotnull(d_date_sk#58)) "
          },
          "22" : {
            "sign" : -819728331,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1080,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#199] "
          },
          "26" : {
            "sign" : 1027109379,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3216,
            "rowCount" : 268,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#36] "
          },
          "13" : {
            "sign" : -770977584,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 8064,
            "rowCount" : 336,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_item_sk#167 = i_item_sk#36) "
          },
          "24" : {
            "sign" : 1309245952,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#199, d_date_id#200, d_date#201, d_month_seq#202, d_week_seq#203, d_quarter_seq#204, d_year#205, d_dow#206, d_moy#207, d_dom#208, d_qoy#209, d_fy_year#210, d_fy_quarter_seq#211, d_fy_week_seq#212, d_day_name#213, d_quarter_name#214, d_holiday#215, d_weekend#216, d_following_holiday#217, d_first_dom#218, d_last_dom#219, d_same_day_ly#220, d_same_day_lq#221, d_current_day#222, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "16" : {
            "sign" : -858876633,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 4135120,
            "rowCount" : 206756,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ws_item_sk#167], [(1.3 * cast((avg(UnscaledValue(ws_ext_discount_amt#186)) / 100.0) as decimal(11,6))) AS (1.3 * avg(ws_ext_discount_amt))#164, ws_item_sk#167] "
          },
          "5" : {
            "sign" : 289596764,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1727173296,
            "rowCount" : 71965554,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#4, ws_ext_discount_amt#23, ws_sold_date_sk#35] "
          },
          "10" : {
            "sign" : -246181910,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#58, d_date_id#59, d_date#60, d_month_seq#61, d_week_seq#62, d_quarter_seq#63, d_year#64, d_dow#65, d_moy#66, d_dom#67, d_qoy#68, d_fy_year#69, d_fy_quarter_seq#70, d_fy_week_seq#71, d_day_name#72, d_quarter_name#73, d_holiday#74, d_weekend#75, d_following_holiday#76, d_first_dom#77, d_last_dom#78, d_same_day_ly#79, d_same_day_lq#80, d_current_day#81, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "21" : {
            "sign" : -1562766730,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#165, ws_ship_date_sk#166, ws_item_sk#167, ws_bill_customer_sk#168, ws_bill_cdemo_sk#169, ws_bill_hdemo_sk#170, ws_bill_addr_sk#171, ws_ship_customer_sk#172, ws_ship_cdemo_sk#173, ws_ship_hdemo_sk#174, ws_ship_addr_sk#175, ws_web_page_sk#176, ws_web_site_sk#177, ws_ship_mode_sk#178, ws_warehouse_sk#179, ws_promo_sk#180, ws_order_number#181L, ws_quantity#182, ws_wholesale_cost#183, ws_list_price#184, ws_sales_price#185, ws_ext_discount_amt#186, ws_ext_sales_price#187, ws_ext_wholesale_cost#188, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "6" : {
            "sign" : -1644411116,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14968835232,
            "rowCount" : 71965554,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(ws_item_sk#4) AND isnotnull(ws_ext_discount_amt#23)) AND isnotnull(ws_sold_date_sk#35)) AND dynamicpruning#230 [ws_sold_date_sk#35]) "
          },
          "1" : {
            "sign" : 1047262636,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 35206700465664,
            "rowCount" : 2200418779104,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ext_discount_amt#23] "
          },
          "17" : {
            "sign" : 1632150640,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 131010195680,
            "rowCount" : 6550509784,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#167, ws_ext_discount_amt#186] "
          },
          "25" : {
            "sign" : 346020049,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0) AS bloomFilter#233] "
          },
          "14" : {
            "sign" : -1335045368,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1064960,
            "rowCount" : 336,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#36], BroadcastQueryStage 1 "
          },
          "0" : {
            "sign" : -1833590236,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [MakeDecimal(sum(UnscaledValue(ws_ext_discount_amt#23)),17,2) AS Excess Discount Amount#161] "
          },
          "20" : {
            "sign" : -1493830095,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(ws_sold_date_sk#198) AND isnotnull(ws_item_sk#167)) AND dynamicpruning#231 [ws_sold_date_sk#198]) AND might_contain(scalar-subquery#234 [], xxhash64(ws_item_sk#167, 42))) "
          },
          "27" : {
            "sign" : -538144002,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 114168,
            "rowCount" : 268,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36)) "
          },
          "2" : {
            "sign" : 1796656830,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 70413400931328,
            "rowCount" : 2200418779104,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((i_item_sk#36 = ws_item_sk#4) AND (cast(ws_ext_discount_amt#23 as decimal(14,7)) > (1.3 * avg(ws_ext_discount_amt))#164)) "
          },
          "18" : {
            "sign" : 1128179104,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 183414273952,
            "rowCount" : 6550509784,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#199 = ws_sold_date_sk#198) "
          },
          "7" : {
            "sign" : 288839960,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#2, ws_ship_date_sk#3, ws_item_sk#4, ws_bill_customer_sk#5, ws_bill_cdemo_sk#6, ws_bill_hdemo_sk#7, ws_bill_addr_sk#8, ws_ship_customer_sk#9, ws_ship_cdemo_sk#10, ws_ship_hdemo_sk#11, ws_ship_addr_sk#12, ws_web_page_sk#13, ws_web_site_sk#14, ws_ship_mode_sk#15, ws_warehouse_sk#16, ws_promo_sk#17, ws_order_number#18L, ws_quantity#19, ws_wholesale_cost#20, ws_list_price#21, ws_sales_price#22, ws_ext_discount_amt#23, ws_ext_sales_price#24, ws_ext_wholesale_cost#25, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "29" : {
            "sign" : 1942718120,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049304,
            "rowCount" : 91,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#199], BroadcastQueryStage 3 "
          },
          "3" : {
            "sign" : -1592582326,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 130977308280,
            "rowCount" : 6548865414,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#4, ws_ext_discount_amt#23] "
          },
          "28" : {
            "sign" : -1494117967,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#36, i_item_id#37, i_rec_start_date#38, i_rec_end_date#39, i_item_desc#40, i_current_price#41, i_wholesale_cost#42, i_brand_id#43, i_brand#44, i_class_id#45, i_class#46, i_category_id#47, i_category#48, i_manufact_id#49, i_manufact#50, i_size#51, i_formulation#52, i_color#53, i_units#54, i_container#55, i_manager_id#56, i_product_name#57], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalRelation",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalRelation",
          "toId" : 9,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalRelation",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalRelation",
          "toId" : 23,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Filter",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalRelation",
          "toId" : 27,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Filter",
          "toId" : 26,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Project",
          "toId" : 25,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Aggregate",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 20,
          "fromName" : "Filter",
          "toId" : 19,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Project",
          "toId" : 18,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalQueryStage",
          "toId" : 18,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Join",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 16,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Aggregate",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [MakeDecimal(sum(UnscaledValue(ws_ext_discount_amt#23)),17,2) AS Excess Discount Amount#161]\n+- Project [ws_ext_discount_amt#23]\n   +- Join Inner, ((i_item_sk#36 = ws_item_sk#4) AND (cast(ws_ext_discount_amt#23 as decimal(14,7)) > (1.3 * avg(ws_ext_discount_amt))#164))\n      :- Project [ws_item_sk#4, ws_ext_discount_amt#23]\n      :  +- Join Inner, (d_date_sk#58 = ws_sold_date_sk#35)\n      :     :- Project [ws_item_sk#4, ws_ext_discount_amt#23, ws_sold_date_sk#35]\n      :     :  +- Filter (((isnotnull(ws_item_sk#4) AND isnotnull(ws_ext_discount_amt#23)) AND isnotnull(ws_sold_date_sk#35)) AND dynamicpruning#230 [ws_sold_date_sk#35])\n      :     :     :  +- Project [d_date_sk#58]\n      :     :     :     +- Filter ((isnotnull(d_date#60) AND ((d_date#60 >= 1998-03-18) AND (d_date#60 <= 1998-06-16))) AND isnotnull(d_date_sk#58))\n      :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date_id#59,d_date#60,d_month_seq#61,d_week_seq#62,d_quarter_seq#63,d_year#64,d_dow#65,d_moy#66,d_dom#67,d_qoy#68,d_fy_year#69,d_fy_quarter_seq#70,d_fy_week_seq#71,d_day_name#72,d_quarter_name#73,d_holiday#74,d_weekend#75,d_following_holiday#76,d_first_dom#77,d_last_dom#78,d_same_day_ly#79,d_same_day_lq#80,d_current_day#81,... 4 more fields] parquet\n      :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#2,ws_ship_date_sk#3,ws_item_sk#4,ws_bill_customer_sk#5,ws_bill_cdemo_sk#6,ws_bill_hdemo_sk#7,ws_bill_addr_sk#8,ws_ship_customer_sk#9,ws_ship_cdemo_sk#10,ws_ship_hdemo_sk#11,ws_ship_addr_sk#12,ws_web_page_sk#13,ws_web_site_sk#14,ws_ship_mode_sk#15,ws_warehouse_sk#16,ws_promo_sk#17,ws_order_number#18L,ws_quantity#19,ws_wholesale_cost#20,ws_list_price#21,ws_sales_price#22,ws_ext_discount_amt#23,ws_ext_sales_price#24,ws_ext_wholesale_cost#25,... 10 more fields] parquet\n      :     +- LogicalQueryStage Project [d_date_sk#58], BroadcastQueryStage 0\n      +- Project [i_item_sk#36, (1.3 * avg(ws_ext_discount_amt))#164]\n         +- Join Inner, (ws_item_sk#167 = i_item_sk#36)\n            :- LogicalQueryStage Project [i_item_sk#36], BroadcastQueryStage 1\n            +- Filter isnotnull((1.3 * avg(ws_ext_discount_amt))#164)\n               +- Aggregate [ws_item_sk#167], [(1.3 * cast((avg(UnscaledValue(ws_ext_discount_amt#186)) / 100.0) as decimal(11,6))) AS (1.3 * avg(ws_ext_discount_amt))#164, ws_item_sk#167]\n                  +- Project [ws_item_sk#167, ws_ext_discount_amt#186]\n                     +- Join Inner, (d_date_sk#199 = ws_sold_date_sk#198)\n                        :- Project [ws_item_sk#167, ws_ext_discount_amt#186, ws_sold_date_sk#198]\n                        :  +- Filter (((isnotnull(ws_sold_date_sk#198) AND isnotnull(ws_item_sk#167)) AND dynamicpruning#231 [ws_sold_date_sk#198]) AND might_contain(scalar-subquery#234 [], xxhash64(ws_item_sk#167, 42)))\n                        :     :  :- Project [d_date_sk#199]\n                        :     :  :  +- Filter ((isnotnull(d_date#201) AND ((d_date#201 >= 1998-03-18) AND (d_date#201 <= 1998-06-16))) AND isnotnull(d_date_sk#199))\n                        :     :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#199,d_date_id#200,d_date#201,d_month_seq#202,d_week_seq#203,d_quarter_seq#204,d_year#205,d_dow#206,d_moy#207,d_dom#208,d_qoy#209,d_fy_year#210,d_fy_quarter_seq#211,d_fy_week_seq#212,d_day_name#213,d_quarter_name#214,d_holiday#215,d_weekend#216,d_following_holiday#217,d_first_dom#218,d_last_dom#219,d_same_day_ly#220,d_same_day_lq#221,d_current_day#222,... 4 more fields] parquet\n                        :     :  +- Aggregate [bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0) AS bloomFilter#233]\n                        :     :     +- Project [i_item_sk#36]\n                        :     :        +- Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n                        :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#36,i_item_id#37,i_rec_start_date#38,i_rec_end_date#39,i_item_desc#40,i_current_price#41,i_wholesale_cost#42,i_brand_id#43,i_brand#44,i_class_id#45,i_class#46,i_category_id#47,i_category#48,i_manufact_id#49,i_manufact#50,i_size#51,i_formulation#52,i_color#53,i_units#54,i_container#55,i_manager_id#56,i_product_name#57] parquet\n                        :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#165,ws_ship_date_sk#166,ws_item_sk#167,ws_bill_customer_sk#168,ws_bill_cdemo_sk#169,ws_bill_hdemo_sk#170,ws_bill_addr_sk#171,ws_ship_customer_sk#172,ws_ship_cdemo_sk#173,ws_ship_hdemo_sk#174,ws_ship_addr_sk#175,ws_web_page_sk#176,ws_web_site_sk#177,ws_ship_mode_sk#178,ws_warehouse_sk#179,ws_promo_sk#180,ws_order_number#181L,ws_quantity#182,ws_wholesale_cost#183,ws_list_price#184,ws_sales_price#185,ws_ext_discount_amt#186,ws_ext_sales_price#187,ws_ext_wholesale_cost#188,... 10 more fields] parquet\n                        +- LogicalQueryStage Project [d_date_sk#199], BroadcastQueryStage 3\n"
      },
      "IM" : {
        "inputSizeInBytes" : 29948351152,
        "inputRowCount" : 143967766
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227491178,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 11278,
        "IOBytes" : {
          "Total" : 37246147,
          "Details" : {
            "IR" : 37015127,
            "IW" : 0,
            "SR" : 115510,
            "SW" : 115510
          }
        }
      }
    },
    "7" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -1678524242,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 256,
            "rowCount" : 16,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [MakeDecimal(sum(UnscaledValue(ws_ext_discount_amt#23)),17,2) AS Excess Discount Amount#161], HashAggregate(keys=[], functions=[sum(UnscaledValue(ws_ext_discount_amt#23))]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [MakeDecimal(sum(UnscaledValue(ws_ext_discount_amt#23)),17,2) AS Excess Discount Amount#161], HashAggregate(keys=[], functions=[sum(UnscaledValue(ws_ext_discount_amt#23))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 256,
        "inputRowCount" : 16
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227502238,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 218,
        "IOBytes" : {
          "Total" : 944,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 944,
            "SW" : 0
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : 410439306,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 4760,
            "rowCount" : 5,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0) AS bloomFilter#233], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0) AS bloomFilter#233], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 4760,
        "inputRowCount" : 5
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227492687,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 9769,
        "IOBytes" : {
          "Total" : 36112851,
          "Details" : {
            "IR" : 35883159,
            "IW" : 0,
            "SR" : 115510,
            "SW" : 114182
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "4" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -1493830095,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              },
              "compileTime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(ws_sold_date_sk#198) AND isnotnull(ws_item_sk#167)) AND dynamicpruning#231 [ws_sold_date_sk#198]) AND might_contain(scalar-subquery#234 [], xxhash64(ws_item_sk#167, 42))) "
          },
          "5" : {
            "sign" : -1562766730,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              },
              "compileTime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#165, ws_ship_date_sk#166, ws_item_sk#167, ws_bill_customer_sk#168, ws_bill_cdemo_sk#169, ws_bill_hdemo_sk#170, ws_bill_addr_sk#171, ws_ship_customer_sk#172, ws_ship_cdemo_sk#173, ws_ship_hdemo_sk#174, ws_ship_addr_sk#175, ws_web_page_sk#176, ws_web_site_sk#177, ws_ship_mode_sk#178, ws_warehouse_sk#179, ws_promo_sk#180, ws_order_number#181L, ws_quantity#182, ws_wholesale_cost#183, ws_list_price#184, ws_sales_price#185, ws_ext_discount_amt#186, ws_ext_sales_price#187, ws_ext_wholesale_cost#188, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : 842658429,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1389912100,
                "rowCount" : 69495605
              },
              "compileTime" : {
                "sizeInBytes" : 1389912100,
                "rowCount" : 69495605
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#167, ws_ext_discount_amt#186] "
          },
          "0" : {
            "sign" : -619259236,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3992200,
                "rowCount" : 199610
              },
              "compileTime" : {
                "sizeInBytes" : 3992200,
                "rowCount" : 199610
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ws_item_sk#167], [(1.3 * cast((avg(UnscaledValue(ws_ext_discount_amt#186)) / 100.0) as decimal(11,6))) AS (1.3 * avg(ws_ext_discount_amt))#164, ws_item_sk#167] "
          },
          "2" : {
            "sign" : -1654052203,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1945876940,
                "rowCount" : 69495605
              },
              "compileTime" : {
                "sizeInBytes" : 1945876940,
                "rowCount" : 69495605
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#199 = ws_sold_date_sk#198) "
          },
          "3" : {
            "sign" : -656153101,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1727606976,
                "rowCount" : 71983624
              },
              "compileTime" : {
                "sizeInBytes" : 1727606976,
                "rowCount" : 71983624
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#167, ws_ext_discount_amt#186, ws_sold_date_sk#198] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalRelation",
          "toId" : 4,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Filter",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [ws_item_sk#167], [(1.3 * cast((avg(UnscaledValue(ws_ext_discount_amt#186)) / 100.0) as decimal(11,6))) AS (1.3 * avg(ws_ext_discount_amt))#164, ws_item_sk#167]\n+- Project [ws_item_sk#167, ws_ext_discount_amt#186]\n   +- Join Inner, (d_date_sk#199 = ws_sold_date_sk#198)\n      :- Project [ws_item_sk#167, ws_ext_discount_amt#186, ws_sold_date_sk#198]\n      :  +- Filter (((isnotnull(ws_sold_date_sk#198) AND isnotnull(ws_item_sk#167)) AND dynamicpruning#231 [ws_sold_date_sk#198]) AND might_contain(scalar-subquery#234 [], xxhash64(ws_item_sk#167, 42)))\n      :     :  :- Project [d_date_sk#199]\n      :     :  :  +- Filter ((isnotnull(d_date#201) AND ((d_date#201 >= 1998-03-18) AND (d_date#201 <= 1998-06-16))) AND isnotnull(d_date_sk#199))\n      :     :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#199,d_date_id#200,d_date#201,d_month_seq#202,d_week_seq#203,d_quarter_seq#204,d_year#205,d_dow#206,d_moy#207,d_dom#208,d_qoy#209,d_fy_year#210,d_fy_quarter_seq#211,d_fy_week_seq#212,d_day_name#213,d_quarter_name#214,d_holiday#215,d_weekend#216,d_following_holiday#217,d_first_dom#218,d_last_dom#219,d_same_day_ly#220,d_same_day_lq#221,d_current_day#222,... 4 more fields] parquet\n      :     :  +- Aggregate [bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0) AS bloomFilter#233]\n      :     :     +- Project [i_item_sk#36]\n      :     :        +- Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n      :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#36,i_item_id#37,i_rec_start_date#38,i_rec_end_date#39,i_item_desc#40,i_current_price#41,i_wholesale_cost#42,i_brand_id#43,i_brand#44,i_class_id#45,i_class#46,i_category_id#47,i_category#48,i_manufact_id#49,i_manufact#50,i_size#51,i_formulation#52,i_color#53,i_units#54,i_container#55,i_manager_id#56,i_product_name#57] parquet\n      :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#165,ws_ship_date_sk#166,ws_item_sk#167,ws_bill_customer_sk#168,ws_bill_cdemo_sk#169,ws_bill_hdemo_sk#170,ws_bill_addr_sk#171,ws_ship_customer_sk#172,ws_ship_cdemo_sk#173,ws_ship_hdemo_sk#174,ws_ship_addr_sk#175,ws_web_page_sk#176,ws_web_site_sk#177,ws_ship_mode_sk#178,ws_warehouse_sk#179,ws_promo_sk#180,ws_order_number#181L,ws_quantity#182,ws_wholesale_cost#183,ws_list_price#184,ws_sales_price#185,ws_ext_discount_amt#186,ws_ext_sales_price#187,ws_ext_wholesale_cost#188,... 10 more fields] parquet\n      +- Project [d_date_sk#199]\n         +- Filter ((isnotnull(d_date#201) AND ((d_date#201 >= 1998-03-18) AND (d_date#201 <= 1998-06-16))) AND isnotnull(d_date_sk#199))\n            +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#199,d_date_id#200,d_date#201,d_month_seq#202,d_week_seq#203,d_quarter_seq#204,d_year#205,d_dow#206,d_moy#207,d_dom#208,d_qoy#209,d_fy_year#210,d_fy_quarter_seq#211,d_fy_week_seq#212,d_day_name#213,d_quarter_name#214,d_holiday#215,d_weekend#216,d_following_holiday#217,d_first_dom#218,d_last_dom#219,d_same_day_ly#220,d_same_day_lq#221,d_current_day#222,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 720476961,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 1727606976,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_sales Output [3]: [ws_item_sk#167, ws_ext_discount_amt#186, ws_sold_date_sk#198] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales/ws_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ws_sold_date_sk#198), dynamicpruningexpression(ws_sold_date_sk#198 IN dynamicpruning#231)] PushedFilters: [IsNotNull(ws_item_sk)] ReadSchema: struct<ws_item_sk:int,ws_ext_discount_amt:decimal(7,2)> "
          },
          "5" : {
            "sign" : 309740781,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1049304,
            "rowCount" : 91,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#199] Arguments: 3 "
          },
          "1" : {
            "sign" : 1618629443,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1389912100,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [ws_item_sk#167, ws_ext_discount_amt#186] Input [4]: [ws_item_sk#167, ws_ext_discount_amt#186, ws_sold_date_sk#198, d_date_sk#199] "
          },
          "0" : {
            "sign" : 462775965,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 3992200,
            "rowCount" : 199610,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [2]: [ws_item_sk#167, ws_ext_discount_amt#186] Keys [1]: [ws_item_sk#167] Functions [1]: [partial_avg(UnscaledValue(ws_ext_discount_amt#186))] Aggregate Attributes [2]: [sum#237, count#238L] Results [3]: [ws_item_sk#167, sum#239, count#240L] "
          },
          "2" : {
            "sign" : -1101390551,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 1945876940,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ws_sold_date_sk#198] Right keys [1]: [d_date_sk#199] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : -325922471,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 1727606976,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [ws_item_sk#167, ws_ext_discount_amt#186, ws_sold_date_sk#198] Condition : (isnotnull(ws_item_sk#167) AND might_contain(Subquery subquery#234, [id=#110], xxhash64(ws_item_sk#167, 42))) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_sales",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[ws_item_sk#167], functions=[partial_avg(UnscaledValue(ws_ext_discount_amt#186))], output=[ws_item_sk#167, sum#239, count#240L])\n+- Project [ws_item_sk#167, ws_ext_discount_amt#186]\n   +- BroadcastHashJoin [ws_sold_date_sk#198], [d_date_sk#199], Inner, BuildRight, false\n      :- Filter (isnotnull(ws_item_sk#167) AND might_contain(Subquery subquery#234, [id=#110], xxhash64(ws_item_sk#167, 42)))\n      :  :  +- Subquery subquery#234, [id=#110]\n      :  :     +- AdaptiveSparkPlan isFinalPlan=false\n      :  :        +- ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)], output=[bloomFilter#233])\n      :  :           +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=108]\n      :  :              +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)], output=[buf#242])\n      :  :                 +- Project [i_item_sk#36]\n      :  :                    +- Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n      :  :                       +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#36,i_manufact_id#49] Batched: true, DataFilters: [isnotnull(i_manufact_id#49), (i_manufact_id#49 = 269), isnotnull(i_item_sk#36)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,269), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manufact_id:int>\n      :  +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_item_sk#167,ws_ext_discount_amt#186,ws_sold_date_sk#198] Batched: true, DataFilters: [isnotnull(ws_item_sk#167)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#198), dynamicpruningexpression(ws_sold_date_sk#198 IN dynamicpruning#2..., PushedFilters: [IsNotNull(ws_item_sk)], ReadSchema: struct<ws_item_sk:int,ws_ext_discount_amt:decimal(7,2)>\n      :        +- SubqueryBroadcast dynamicpruning#231, 0, [d_date_sk#199], [id=#550]\n      :           +- AdaptiveSparkPlan isFinalPlan=false\n      :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=547]\n      :                 +- Project [d_date_sk#199]\n      :                    +- Filter (((isnotnull(d_date#201) AND (d_date#201 >= 1998-03-18)) AND (d_date#201 <= 1998-06-16)) AND isnotnull(d_date_sk#199))\n      :                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#199,d_date#201] Batched: true, DataFilters: [isnotnull(d_date#201), (d_date#201 >= 1998-03-18), (d_date#201 <= 1998-06-16), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-03-18), LessThanOrEqual(d_date,1998-06-16), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n      +- BroadcastQueryStage 3\n         +- ReusedExchange [d_date_sk#199], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=257]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1728656280,
        "inputRowCount" : 71983715
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 6 ],
      "Objectives" : {
        "DurationInMs" : 6162,
        "TotalTasksDurationInMs" : 43379,
        "IOBytes" : {
          "Total" : 18053225,
          "Details" : {
            "IR" : 17939987,
            "IW" : 0,
            "SR" : 0,
            "SW" : 113238
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 537881272,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5360,
                "rowCount" : 268
              },
              "compileTime" : {
                "sizeInBytes" : 5360,
                "rowCount" : 268
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#36, (1.3 * avg(ws_ext_discount_amt))#164] "
          },
          "1" : {
            "sign" : 1014247478,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6432,
                "rowCount" : 268
              },
              "compileTime" : {
                "sizeInBytes" : 6432,
                "rowCount" : 268
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_item_sk#167 = i_item_sk#36) "
          },
          "2" : {
            "sign" : -1006681132,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3992200,
                "rowCount" : 199610
              },
              "compileTime" : {
                "sizeInBytes" : 3992200,
                "rowCount" : 199610
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull((1.3 * avg(ws_ext_discount_amt))#164) "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#36, (1.3 * avg(ws_ext_discount_amt))#164]\n+- Join Inner, (ws_item_sk#167 = i_item_sk#36)\n   :- Project [i_item_sk#36]\n   :  +- Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n   :     +- Relation spark_catalog.tpcds_100.item[i_item_sk#36,i_item_id#37,i_rec_start_date#38,i_rec_end_date#39,i_item_desc#40,i_current_price#41,i_wholesale_cost#42,i_brand_id#43,i_brand#44,i_class_id#45,i_class#46,i_category_id#47,i_category#48,i_manufact_id#49,i_manufact#50,i_size#51,i_formulation#52,i_color#53,i_units#54,i_container#55,i_manager_id#56,i_product_name#57] parquet\n   +- Filter isnotnull((1.3 * avg(ws_ext_discount_amt))#164)\n      +- Aggregate [ws_item_sk#167], [(1.3 * cast((avg(UnscaledValue(ws_ext_discount_amt#186)) / 100.0) as decimal(11,6))) AS (1.3 * avg(ws_ext_discount_amt))#164, ws_item_sk#167]\n         +- Project [ws_item_sk#167, ws_ext_discount_amt#186]\n            +- Join Inner, (d_date_sk#199 = ws_sold_date_sk#198)\n               :- Project [ws_item_sk#167, ws_ext_discount_amt#186, ws_sold_date_sk#198]\n               :  +- Filter (((isnotnull(ws_sold_date_sk#198) AND isnotnull(ws_item_sk#167)) AND dynamicpruning#231 [ws_sold_date_sk#198]) AND might_contain(scalar-subquery#234 [], xxhash64(ws_item_sk#167, 42)))\n               :     :  :- Project [d_date_sk#199]\n               :     :  :  +- Filter ((isnotnull(d_date#201) AND ((d_date#201 >= 1998-03-18) AND (d_date#201 <= 1998-06-16))) AND isnotnull(d_date_sk#199))\n               :     :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#199,d_date_id#200,d_date#201,d_month_seq#202,d_week_seq#203,d_quarter_seq#204,d_year#205,d_dow#206,d_moy#207,d_dom#208,d_qoy#209,d_fy_year#210,d_fy_quarter_seq#211,d_fy_week_seq#212,d_day_name#213,d_quarter_name#214,d_holiday#215,d_weekend#216,d_following_holiday#217,d_first_dom#218,d_last_dom#219,d_same_day_ly#220,d_same_day_lq#221,d_current_day#222,... 4 more fields] parquet\n               :     :  +- Aggregate [bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0) AS bloomFilter#233]\n               :     :     +- Project [i_item_sk#36]\n               :     :        +- Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n               :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#36,i_item_id#37,i_rec_start_date#38,i_rec_end_date#39,i_item_desc#40,i_current_price#41,i_wholesale_cost#42,i_brand_id#43,i_brand#44,i_class_id#45,i_class#46,i_category_id#47,i_category#48,i_manufact_id#49,i_manufact#50,i_size#51,i_formulation#52,i_color#53,i_units#54,i_container#55,i_manager_id#56,i_product_name#57] parquet\n               :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#165,ws_ship_date_sk#166,ws_item_sk#167,ws_bill_customer_sk#168,ws_bill_cdemo_sk#169,ws_bill_hdemo_sk#170,ws_bill_addr_sk#171,ws_ship_customer_sk#172,ws_ship_cdemo_sk#173,ws_ship_hdemo_sk#174,ws_ship_addr_sk#175,ws_web_page_sk#176,ws_web_site_sk#177,ws_ship_mode_sk#178,ws_warehouse_sk#179,ws_promo_sk#180,ws_order_number#181L,ws_quantity#182,ws_wholesale_cost#183,ws_list_price#184,ws_sales_price#185,ws_ext_discount_amt#186,ws_ext_sales_price#187,ws_ext_wholesale_cost#188,... 10 more fields] parquet\n               +- Project [d_date_sk#199]\n                  +- Filter ((isnotnull(d_date#201) AND ((d_date#201 >= 1998-03-18) AND (d_date#201 <= 1998-06-16))) AND isnotnull(d_date_sk#199))\n                     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#199,d_date_id#200,d_date#201,d_month_seq#202,d_week_seq#203,d_quarter_seq#204,d_year#205,d_dow#206,d_moy#207,d_dom#208,d_qoy#209,d_fy_year#210,d_fy_quarter_seq#211,d_fy_week_seq#212,d_day_name#213,d_quarter_name#214,d_holiday#215,d_weekend#216,d_following_holiday#217,d_first_dom#218,d_last_dom#219,d_same_day_ly#220,d_same_day_lq#221,d_current_day#222,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -195672784,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 63136,
            "rowCount" : 1973,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [3]: [ws_item_sk#167, sum#239, count#240L] Keys [1]: [ws_item_sk#167] Functions [1]: [avg(UnscaledValue(ws_ext_discount_amt#186))] Aggregate Attributes [1]: [avg(UnscaledValue(ws_ext_discount_amt#186))#163] Results [2]: [(1.3 * cast((avg(UnscaledValue(ws_ext_discount_amt#186))#163 / 100.0) as decimal(11,6))) AS (1.3 * avg(ws_ext_discount_amt))#164, ws_item_sk#167] "
          },
          "5" : {
            "sign" : -1865041931,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 3992200,
            "rowCount" : 199610,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [ws_item_sk#167, sum#239, count#240L] Arguments: 4 "
          },
          "1" : {
            "sign" : 1859658701,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 6432,
            "rowCount" : 268,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [i_item_sk#36] Right keys [1]: [ws_item_sk#167] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : -403996383,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 5360,
            "rowCount" : 268,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [i_item_sk#36, (1.3 * avg(ws_ext_discount_amt))#164] Input [3]: [i_item_sk#36, (1.3 * avg(ws_ext_discount_amt))#164, ws_item_sk#167] "
          },
          "2" : {
            "sign" : 458704075,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1064960,
            "rowCount" : 336,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [i_item_sk#36] Arguments: 1 "
          },
          "3" : {
            "sign" : 1448840980,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 3992200,
            "rowCount" : 199610,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [(1.3 * avg(ws_ext_discount_amt))#164, ws_item_sk#167] Condition : isnotnull((1.3 * avg(ws_ext_discount_amt))#164) "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "HashAggregate",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#36, (1.3 * avg(ws_ext_discount_amt))#164]\n+- BroadcastHashJoin [i_item_sk#36], [ws_item_sk#167], Inner, BuildLeft, false\n   :- BroadcastQueryStage 1\n   :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=278]\n   :     +- *(2) Project [i_item_sk#36]\n   :        +- *(2) Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n   :           +- *(2) ColumnarToRow\n   :              +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#36,i_manufact_id#49] Batched: true, DataFilters: [isnotnull(i_manufact_id#49), (i_manufact_id#49 = 269), isnotnull(i_item_sk#36)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,269), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manufact_id:int>\n   +- Filter isnotnull((1.3 * avg(ws_ext_discount_amt))#164)\n      +- HashAggregate(keys=[ws_item_sk#167], functions=[avg(UnscaledValue(ws_ext_discount_amt#186))], output=[(1.3 * avg(ws_ext_discount_amt))#164, ws_item_sk#167])\n         +- ShuffleQueryStage 4\n            +- Exchange hashpartitioning(ws_item_sk#167, 200), ENSURE_REQUIREMENTS, [plan_id=581]\n               +- *(4) HashAggregate(keys=[ws_item_sk#167], functions=[partial_avg(UnscaledValue(ws_ext_discount_amt#186))], output=[ws_item_sk#167, sum#239, count#240L])\n                  +- *(4) Project [ws_item_sk#167, ws_ext_discount_amt#186]\n                     +- *(4) BroadcastHashJoin [ws_sold_date_sk#198], [d_date_sk#199], Inner, BuildRight, false\n                        :- *(4) Filter (isnotnull(ws_item_sk#167) AND might_contain(Subquery subquery#234, [id=#110], xxhash64(ws_item_sk#167, 42)))\n                        :  :  +- Subquery subquery#234, [id=#110]\n                        :  :     +- AdaptiveSparkPlan isFinalPlan=true\n                                    +- == Final Plan ==\n                                       ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)], output=[bloomFilter#233])\n                                       +- ShuffleQueryStage 0\n                                          +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=640]\n                                             +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)], output=[buf#242])\n                                                +- *(1) Project [i_item_sk#36]\n                                                   +- *(1) Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n                                                      +- *(1) ColumnarToRow\n                                                         +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#36,i_manufact_id#49] Batched: true, DataFilters: [isnotnull(i_manufact_id#49), (i_manufact_id#49 = 269), isnotnull(i_item_sk#36)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,269), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manufact_id:int>\n                                    +- == Initial Plan ==\n                                       ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)], output=[bloomFilter#233])\n                                       +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=108]\n                                          +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)], output=[buf#242])\n                                             +- Project [i_item_sk#36]\n                                                +- Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n                                                   +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#36,i_manufact_id#49] Batched: true, DataFilters: [isnotnull(i_manufact_id#49), (i_manufact_id#49 = 269), isnotnull(i_item_sk#36)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,269), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manufact_id:int>\n                        :  +- *(4) ColumnarToRow\n                        :     +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_item_sk#167,ws_ext_discount_amt#186,ws_sold_date_sk#198] Batched: true, DataFilters: [isnotnull(ws_item_sk#167)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#198), dynamicpruningexpression(ws_sold_date_sk#198 IN dynamicpruning#2..., PushedFilters: [IsNotNull(ws_item_sk)], ReadSchema: struct<ws_item_sk:int,ws_ext_discount_amt:decimal(7,2)>\n                        :           +- SubqueryBroadcast dynamicpruning#231, 0, [d_date_sk#199], [id=#550]\n                        :              +- AdaptiveSparkPlan isFinalPlan=true\n                                          +- == Final Plan ==\n                                             BroadcastQueryStage 1\n                                             +- ReusedExchange [d_date_sk#199], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=257]\n                                          +- == Initial Plan ==\n                                             BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=547]\n                                             +- Project [d_date_sk#199]\n                                                +- Filter (((isnotnull(d_date#201) AND (d_date#201 >= 1998-03-18)) AND (d_date#201 <= 1998-06-16)) AND isnotnull(d_date_sk#199))\n                                                   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#199,d_date#201] Batched: true, DataFilters: [isnotnull(d_date#201), (d_date#201 >= 1998-03-18), (d_date#201 <= 1998-06-16), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-03-18), LessThanOrEqual(d_date,1998-06-16), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n                        +- BroadcastQueryStage 3\n                           +- ReusedExchange [d_date_sk#199], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=257]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1128096,
        "inputRowCount" : 2309
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "1" : [ 864, 864, 1253, 936, 864, 936, 792, 648, 1323, 1305, 864, 1280, 792, 0, 0, 0, 0, 1280, 0, 0, 1255, 864, 1206, 720, 792, 0, 792, 0, 0, 864, 1205, 864, 792, 864, 792, 0, 1851, 0, 936, 0, 1346, 1507, 0, 1371, 1525, 1327, 0, 1184, 0, 0, 0, 720, 1321, 936, 1008, 1161, 1427, 864, 432, 1258, 0, 936, 0, 0, 0, 792, 936, 864, 504, 0, 792, 0, 720, 1371, 0, 0, 648, 1475, 0, 864, 0, 864, 0, 0, 720, 0, 0, 0, 0, 0, 0, 0, 792, 0, 0, 0, 720, 792, 792, 1183, 0, 936, 0, 1509, 1603, 792, 864, 720, 1474, 1510, 0, 1230, 0, 1133, 1789, 0, 0, 0, 720, 0, 720, 936, 0, 0, 864, 864, 0, 720, 0, 0, 0, 792, 432, 792, 576, 0, 648, 1008, 792, 0, 0, 0, 864, 576, 0, 0, 792, 864, 0, 0, 1080, 1424, 1330, 0, 0, 1330, 792, 864, 1190, 1241, 0, 1312, 1255, 720, 0, 792, 720, 0, 1371, 0, 1485, 792, 0, 0, 936, 0, 0, 1233, 0, 0, 1008, 0, 0, 0, 0, 1475, 432, 792, 0, 0, 0, 0, 1334, 0, 1158, 0, 720, 0, 1008, 936 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 8 ],
      "Objectives" : {
        "DurationInMs" : 226,
        "TotalTasksDurationInMs" : 219,
        "IOBytes" : {
          "Total" : 113238,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 113238,
            "SW" : 0
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 2063106205,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1945876940,
                "rowCount" : 69495605
              },
              "compileTime" : {
                "sizeInBytes" : 1945876940,
                "rowCount" : 69495605
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#58 = ws_sold_date_sk#35) "
          },
          "5" : {
            "sign" : 289596764,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1727173296,
                "rowCount" : 71965554
              },
              "compileTime" : {
                "sizeInBytes" : 1727173296,
                "rowCount" : 71965554
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#4, ws_ext_discount_amt#23, ws_sold_date_sk#35] "
          },
          "6" : {
            "sign" : -1644411116,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14968835232,
                "rowCount" : 71965554
              },
              "compileTime" : {
                "sizeInBytes" : 14968835232,
                "rowCount" : 71965554
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(ws_item_sk#4) AND isnotnull(ws_ext_discount_amt#23)) AND isnotnull(ws_sold_date_sk#35)) AND dynamicpruning#230 [ws_sold_date_sk#35]) "
          },
          "1" : {
            "sign" : -1836079115,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1150670480,
                "rowCount" : 71916905
              },
              "compileTime" : {
                "sizeInBytes" : 1150670480,
                "rowCount" : 71916905
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ext_discount_amt#23] "
          },
          "0" : {
            "sign" : 909495907,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 16,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 16,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [MakeDecimal(sum(UnscaledValue(ws_ext_discount_amt#23)),17,2) AS Excess Discount Amount#161] "
          },
          "2" : {
            "sign" : 1122193609,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2301340960,
                "rowCount" : 71916905
              },
              "compileTime" : {
                "sizeInBytes" : 2301340960,
                "rowCount" : 71916905
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((i_item_sk#36 = ws_item_sk#4) AND (cast(ws_ext_discount_amt#23 as decimal(14,7)) > (1.3 * avg(ws_ext_discount_amt))#164)) "
          },
          "7" : {
            "sign" : 288839960,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              },
              "compileTime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#2, ws_ship_date_sk#3, ws_item_sk#4, ws_bill_customer_sk#5, ws_bill_cdemo_sk#6, ws_bill_hdemo_sk#7, ws_bill_addr_sk#8, ws_ship_customer_sk#9, ws_ship_cdemo_sk#10, ws_ship_hdemo_sk#11, ws_ship_addr_sk#12, ws_web_page_sk#13, ws_web_site_sk#14, ws_ship_mode_sk#15, ws_warehouse_sk#16, ws_promo_sk#17, ws_order_number#18L, ws_quantity#19, ws_wholesale_cost#20, ws_list_price#21, ws_sales_price#22, ws_ext_discount_amt#23, ws_ext_sales_price#24, ws_ext_wholesale_cost#25, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : -210270773,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1389912100,
                "rowCount" : 69495605
              },
              "compileTime" : {
                "sizeInBytes" : 1389912100,
                "rowCount" : 69495605
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#4, ws_ext_discount_amt#23] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalRelation",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [MakeDecimal(sum(UnscaledValue(ws_ext_discount_amt#23)),17,2) AS Excess Discount Amount#161]\n+- Project [ws_ext_discount_amt#23]\n   +- Join Inner, ((i_item_sk#36 = ws_item_sk#4) AND (cast(ws_ext_discount_amt#23 as decimal(14,7)) > (1.3 * avg(ws_ext_discount_amt))#164))\n      :- Project [ws_item_sk#4, ws_ext_discount_amt#23]\n      :  +- Join Inner, (d_date_sk#58 = ws_sold_date_sk#35)\n      :     :- Project [ws_item_sk#4, ws_ext_discount_amt#23, ws_sold_date_sk#35]\n      :     :  +- Filter (((isnotnull(ws_item_sk#4) AND isnotnull(ws_ext_discount_amt#23)) AND isnotnull(ws_sold_date_sk#35)) AND dynamicpruning#230 [ws_sold_date_sk#35])\n      :     :     :  +- Project [d_date_sk#58]\n      :     :     :     +- Filter ((isnotnull(d_date#60) AND ((d_date#60 >= 1998-03-18) AND (d_date#60 <= 1998-06-16))) AND isnotnull(d_date_sk#58))\n      :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date_id#59,d_date#60,d_month_seq#61,d_week_seq#62,d_quarter_seq#63,d_year#64,d_dow#65,d_moy#66,d_dom#67,d_qoy#68,d_fy_year#69,d_fy_quarter_seq#70,d_fy_week_seq#71,d_day_name#72,d_quarter_name#73,d_holiday#74,d_weekend#75,d_following_holiday#76,d_first_dom#77,d_last_dom#78,d_same_day_ly#79,d_same_day_lq#80,d_current_day#81,... 4 more fields] parquet\n      :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#2,ws_ship_date_sk#3,ws_item_sk#4,ws_bill_customer_sk#5,ws_bill_cdemo_sk#6,ws_bill_hdemo_sk#7,ws_bill_addr_sk#8,ws_ship_customer_sk#9,ws_ship_cdemo_sk#10,ws_ship_hdemo_sk#11,ws_ship_addr_sk#12,ws_web_page_sk#13,ws_web_site_sk#14,ws_ship_mode_sk#15,ws_warehouse_sk#16,ws_promo_sk#17,ws_order_number#18L,ws_quantity#19,ws_wholesale_cost#20,ws_list_price#21,ws_sales_price#22,ws_ext_discount_amt#23,ws_ext_sales_price#24,ws_ext_wholesale_cost#25,... 10 more fields] parquet\n      :     +- Project [d_date_sk#58]\n      :        +- Filter ((isnotnull(d_date#60) AND ((d_date#60 >= 1998-03-18) AND (d_date#60 <= 1998-06-16))) AND isnotnull(d_date_sk#58))\n      :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date_id#59,d_date#60,d_month_seq#61,d_week_seq#62,d_quarter_seq#63,d_year#64,d_dow#65,d_moy#66,d_dom#67,d_qoy#68,d_fy_year#69,d_fy_quarter_seq#70,d_fy_week_seq#71,d_day_name#72,d_quarter_name#73,d_holiday#74,d_weekend#75,d_following_holiday#76,d_first_dom#77,d_last_dom#78,d_same_day_ly#79,d_same_day_lq#80,d_current_day#81,... 4 more fields] parquet\n      +- Project [i_item_sk#36, (1.3 * avg(ws_ext_discount_amt))#164]\n         +- Join Inner, (ws_item_sk#167 = i_item_sk#36)\n            :- Project [i_item_sk#36]\n            :  +- Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n            :     +- Relation spark_catalog.tpcds_100.item[i_item_sk#36,i_item_id#37,i_rec_start_date#38,i_rec_end_date#39,i_item_desc#40,i_current_price#41,i_wholesale_cost#42,i_brand_id#43,i_brand#44,i_class_id#45,i_class#46,i_category_id#47,i_category#48,i_manufact_id#49,i_manufact#50,i_size#51,i_formulation#52,i_color#53,i_units#54,i_container#55,i_manager_id#56,i_product_name#57] parquet\n            +- Filter isnotnull((1.3 * avg(ws_ext_discount_amt))#164)\n               +- Aggregate [ws_item_sk#167], [(1.3 * cast((avg(UnscaledValue(ws_ext_discount_amt#186)) / 100.0) as decimal(11,6))) AS (1.3 * avg(ws_ext_discount_amt))#164, ws_item_sk#167]\n                  +- Project [ws_item_sk#167, ws_ext_discount_amt#186]\n                     +- Join Inner, (d_date_sk#199 = ws_sold_date_sk#198)\n                        :- Project [ws_item_sk#167, ws_ext_discount_amt#186, ws_sold_date_sk#198]\n                        :  +- Filter (((isnotnull(ws_sold_date_sk#198) AND isnotnull(ws_item_sk#167)) AND dynamicpruning#231 [ws_sold_date_sk#198]) AND might_contain(scalar-subquery#234 [], xxhash64(ws_item_sk#167, 42)))\n                        :     :  :- Project [d_date_sk#199]\n                        :     :  :  +- Filter ((isnotnull(d_date#201) AND ((d_date#201 >= 1998-03-18) AND (d_date#201 <= 1998-06-16))) AND isnotnull(d_date_sk#199))\n                        :     :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#199,d_date_id#200,d_date#201,d_month_seq#202,d_week_seq#203,d_quarter_seq#204,d_year#205,d_dow#206,d_moy#207,d_dom#208,d_qoy#209,d_fy_year#210,d_fy_quarter_seq#211,d_fy_week_seq#212,d_day_name#213,d_quarter_name#214,d_holiday#215,d_weekend#216,d_following_holiday#217,d_first_dom#218,d_last_dom#219,d_same_day_ly#220,d_same_day_lq#221,d_current_day#222,... 4 more fields] parquet\n                        :     :  +- Aggregate [bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0) AS bloomFilter#233]\n                        :     :     +- Project [i_item_sk#36]\n                        :     :        +- Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n                        :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#36,i_item_id#37,i_rec_start_date#38,i_rec_end_date#39,i_item_desc#40,i_current_price#41,i_wholesale_cost#42,i_brand_id#43,i_brand#44,i_class_id#45,i_class#46,i_category_id#47,i_category#48,i_manufact_id#49,i_manufact#50,i_size#51,i_formulation#52,i_color#53,i_units#54,i_container#55,i_manager_id#56,i_product_name#57] parquet\n                        :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#165,ws_ship_date_sk#166,ws_item_sk#167,ws_bill_customer_sk#168,ws_bill_cdemo_sk#169,ws_bill_hdemo_sk#170,ws_bill_addr_sk#171,ws_ship_customer_sk#172,ws_ship_cdemo_sk#173,ws_ship_hdemo_sk#174,ws_ship_addr_sk#175,ws_web_page_sk#176,ws_web_site_sk#177,ws_ship_mode_sk#178,ws_warehouse_sk#179,ws_promo_sk#180,ws_order_number#181L,ws_quantity#182,ws_wholesale_cost#183,ws_list_price#184,ws_sales_price#185,ws_ext_discount_amt#186,ws_ext_sales_price#187,ws_ext_wholesale_cost#188,... 10 more fields] parquet\n                        +- Project [d_date_sk#199]\n                           +- Filter ((isnotnull(d_date#201) AND ((d_date#201 >= 1998-03-18) AND (d_date#201 <= 1998-06-16))) AND isnotnull(d_date_sk#199))\n                              +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#199,d_date_id#200,d_date#201,d_month_seq#202,d_week_seq#203,d_quarter_seq#204,d_year#205,d_dow#206,d_moy#207,d_dom#208,d_qoy#209,d_fy_year#210,d_fy_quarter_seq#211,d_fy_week_seq#212,d_day_name#213,d_quarter_name#214,d_holiday#215,d_weekend#216,d_following_holiday#217,d_first_dom#218,d_last_dom#219,d_same_day_ly#220,d_same_day_lq#221,d_current_day#222,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : 988327717,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1056768,
            "rowCount" : 166,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [i_item_sk#36, (1.3 * avg(ws_ext_discount_amt))#164] Arguments: 5 "
          },
          "4" : {
            "sign" : 258821603,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 1945876940,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ws_sold_date_sk#35] Right keys [1]: [d_date_sk#58] Join type: Inner Join condition: None "
          },
          "5" : {
            "sign" : -1736926955,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 1727173296,
            "rowCount" : 71965554,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [ws_item_sk#4, ws_ext_discount_amt#23, ws_sold_date_sk#35] Condition : (isnotnull(ws_item_sk#4) AND isnotnull(ws_ext_discount_amt#23)) "
          },
          "6" : {
            "sign" : -1371706006,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 1727173296,
            "rowCount" : 71965554,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_sales Output [3]: [ws_item_sk#4, ws_ext_discount_amt#23, ws_sold_date_sk#35] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales/ws_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ws_sold_date_sk#35), dynamicpruningexpression(ws_sold_date_sk#35 IN dynamicpruning#231)] PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_ext_discount_amt)] ReadSchema: struct<ws_item_sk:int,ws_ext_discount_amt:decimal(7,2)> "
          },
          "1" : {
            "sign" : -789529338,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1150670480,
            "rowCount" : 71916905,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [ws_ext_discount_amt#23] Input [4]: [ws_item_sk#4, ws_ext_discount_amt#23, i_item_sk#36, (1.3 * avg(ws_ext_discount_amt))#164] "
          },
          "0" : {
            "sign" : -2078522610,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [1]: [ws_ext_discount_amt#23] Keys: [] Functions [1]: [partial_sum(UnscaledValue(ws_ext_discount_amt#23))] Aggregate Attributes [1]: [sum#235L] Results [1]: [sum#236L] "
          },
          "2" : {
            "sign" : 2082102406,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 2301340960,
            "rowCount" : 71916905,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ws_item_sk#4] Right keys [1]: [i_item_sk#36] Join type: Inner Join condition: (cast(ws_ext_discount_amt#23 as decimal(14,7)) > (1.3 * avg(ws_ext_discount_amt))#164) "
          },
          "7" : {
            "sign" : 1318181539,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1049304,
            "rowCount" : 91,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#58] Arguments: 0 "
          },
          "3" : {
            "sign" : -1721322785,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1389912100,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [ws_item_sk#4, ws_ext_discount_amt#23] Input [4]: [ws_item_sk#4, ws_ext_discount_amt#23, ws_sold_date_sk#35, d_date_sk#58] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_sales",
          "toId" : 5,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Filter",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "BroadcastQueryStage",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastHashJoin",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[], functions=[partial_sum(UnscaledValue(ws_ext_discount_amt#23))], output=[sum#236L])\n+- Project [ws_ext_discount_amt#23]\n   +- BroadcastHashJoin [ws_item_sk#4], [i_item_sk#36], Inner, BuildRight, (cast(ws_ext_discount_amt#23 as decimal(14,7)) > (1.3 * avg(ws_ext_discount_amt))#164), false\n      :- Project [ws_item_sk#4, ws_ext_discount_amt#23]\n      :  +- BroadcastHashJoin [ws_sold_date_sk#35], [d_date_sk#58], Inner, BuildRight, false\n      :     :- Filter (isnotnull(ws_item_sk#4) AND isnotnull(ws_ext_discount_amt#23))\n      :     :  +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_item_sk#4,ws_ext_discount_amt#23,ws_sold_date_sk#35] Batched: true, DataFilters: [isnotnull(ws_item_sk#4), isnotnull(ws_ext_discount_amt#23)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#35), dynamicpruningexpression(ws_sold_date_sk#35 IN dynamicpruning#231)], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_ext_discount_amt)], ReadSchema: struct<ws_item_sk:int,ws_ext_discount_amt:decimal(7,2)>\n      :     :        +- ReusedSubquery SubqueryBroadcast dynamicpruning#231, 0, [d_date_sk#199], [id=#550]\n      :     +- BroadcastQueryStage 0\n      :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=257]\n      :           +- *(1) Project [d_date_sk#58]\n      :              +- *(1) Filter (((isnotnull(d_date#60) AND (d_date#60 >= 1998-03-18)) AND (d_date#60 <= 1998-06-16)) AND isnotnull(d_date_sk#58))\n      :                 +- *(1) ColumnarToRow\n      :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date#60] Batched: true, DataFilters: [isnotnull(d_date#60), (d_date#60 >= 1998-03-18), (d_date#60 <= 1998-06-16), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-03-18), LessThanOrEqual(d_date,1998-06-16), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n      +- BroadcastQueryStage 5\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=807]\n            +- *(5) Project [i_item_sk#36, (1.3 * avg(ws_ext_discount_amt))#164]\n               +- *(5) BroadcastHashJoin [i_item_sk#36], [ws_item_sk#167], Inner, BuildLeft, false\n                  :- BroadcastQueryStage 1\n                  :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=278]\n                  :     +- *(2) Project [i_item_sk#36]\n                  :        +- *(2) Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n                  :           +- *(2) ColumnarToRow\n                  :              +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#36,i_manufact_id#49] Batched: true, DataFilters: [isnotnull(i_manufact_id#49), (i_manufact_id#49 = 269), isnotnull(i_item_sk#36)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,269), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manufact_id:int>\n                  +- *(5) Filter isnotnull((1.3 * avg(ws_ext_discount_amt))#164)\n                     +- *(5) HashAggregate(keys=[ws_item_sk#167], functions=[avg(UnscaledValue(ws_ext_discount_amt#186))], output=[(1.3 * avg(ws_ext_discount_amt))#164, ws_item_sk#167])\n                        +- AQEShuffleRead coalesced\n                           +- ShuffleQueryStage 4\n                              +- Exchange hashpartitioning(ws_item_sk#167, 200), ENSURE_REQUIREMENTS, [plan_id=581]\n                                 +- *(4) HashAggregate(keys=[ws_item_sk#167], functions=[partial_avg(UnscaledValue(ws_ext_discount_amt#186))], output=[ws_item_sk#167, sum#239, count#240L])\n                                    +- *(4) Project [ws_item_sk#167, ws_ext_discount_amt#186]\n                                       +- *(4) BroadcastHashJoin [ws_sold_date_sk#198], [d_date_sk#199], Inner, BuildRight, false\n                                          :- *(4) Filter (isnotnull(ws_item_sk#167) AND might_contain(Subquery subquery#234, [id=#110], xxhash64(ws_item_sk#167, 42)))\n                                          :  :  +- Subquery subquery#234, [id=#110]\n                                          :  :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                      +- == Final Plan ==\n                                                         ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)], output=[bloomFilter#233])\n                                                         +- ShuffleQueryStage 0\n                                                            +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=640]\n                                                               +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)], output=[buf#242])\n                                                                  +- *(1) Project [i_item_sk#36]\n                                                                     +- *(1) Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n                                                                        +- *(1) ColumnarToRow\n                                                                           +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#36,i_manufact_id#49] Batched: true, DataFilters: [isnotnull(i_manufact_id#49), (i_manufact_id#49 = 269), isnotnull(i_item_sk#36)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,269), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manufact_id:int>\n                                                      +- == Initial Plan ==\n                                                         ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)], output=[bloomFilter#233])\n                                                         +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=108]\n                                                            +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)], output=[buf#242])\n                                                               +- Project [i_item_sk#36]\n                                                                  +- Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n                                                                     +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#36,i_manufact_id#49] Batched: true, DataFilters: [isnotnull(i_manufact_id#49), (i_manufact_id#49 = 269), isnotnull(i_item_sk#36)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,269), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manufact_id:int>\n                                          :  +- *(4) ColumnarToRow\n                                          :     +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_item_sk#167,ws_ext_discount_amt#186,ws_sold_date_sk#198] Batched: true, DataFilters: [isnotnull(ws_item_sk#167)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#198), dynamicpruningexpression(ws_sold_date_sk#198 IN dynamicpruning#2..., PushedFilters: [IsNotNull(ws_item_sk)], ReadSchema: struct<ws_item_sk:int,ws_ext_discount_amt:decimal(7,2)>\n                                          :           +- SubqueryBroadcast dynamicpruning#231, 0, [d_date_sk#199], [id=#550]\n                                          :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                            +- == Final Plan ==\n                                                               BroadcastQueryStage 1\n                                                               +- ReusedExchange [d_date_sk#199], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=257]\n                                                            +- == Initial Plan ==\n                                                               BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=547]\n                                                               +- Project [d_date_sk#199]\n                                                                  +- Filter (((isnotnull(d_date#201) AND (d_date#201 >= 1998-03-18)) AND (d_date#201 <= 1998-06-16)) AND isnotnull(d_date_sk#199))\n                                                                     +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#199,d_date#201] Batched: true, DataFilters: [isnotnull(d_date#201), (d_date#201 >= 1998-03-18), (d_date#201 <= 1998-06-16), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-03-18), LessThanOrEqual(d_date,1998-06-16), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n                                          +- BroadcastQueryStage 3\n                                             +- ReusedExchange [d_date_sk#199], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=257]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1729279368,
        "inputRowCount" : 71965811
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 9 ],
      "Objectives" : {
        "DurationInMs" : 323,
        "TotalTasksDurationInMs" : 4061,
        "IOBytes" : {
          "Total" : 17944116,
          "Details" : {
            "IR" : 17943172,
            "IW" : 0,
            "SR" : 0,
            "SW" : 944
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1027109379,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3216,
                "rowCount" : 268
              },
              "compileTime" : {
                "sizeInBytes" : 3216,
                "rowCount" : 268
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#36] "
          },
          "1" : {
            "sign" : -538144002,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 114168,
                "rowCount" : 268
              },
              "compileTime" : {
                "sizeInBytes" : 114168,
                "rowCount" : 268
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36)) "
          },
          "2" : {
            "sign" : -1494117967,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#36, i_item_id#37, i_rec_start_date#38, i_rec_end_date#39, i_item_desc#40, i_current_price#41, i_wholesale_cost#42, i_brand_id#43, i_brand#44, i_class_id#45, i_class#46, i_category_id#47, i_category#48, i_manufact_id#49, i_manufact#50, i_size#51, i_formulation#52, i_color#53, i_units#54, i_container#55, i_manager_id#56, i_product_name#57], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#36]\n+- Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n   +- Relation spark_catalog.tpcds_100.item[i_item_sk#36,i_item_id#37,i_rec_start_date#38,i_rec_end_date#39,i_item_desc#40,i_current_price#41,i_wholesale_cost#42,i_brand_id#43,i_brand#44,i_class_id#45,i_class#46,i_category_id#47,i_category#48,i_manufact_id#49,i_manufact#50,i_size#51,i_formulation#52,i_color#53,i_units#54,i_container#55,i_manager_id#56,i_product_name#57] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -2094672209,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 3216,
            "rowCount" : 268,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [i_item_sk#36] Input [2]: [i_item_sk#36, i_manufact_id#49] "
          },
          "1" : {
            "sign" : 433299092,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 3216,
            "rowCount" : 268,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [i_item_sk#36, i_manufact_id#49] Condition : ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36)) "
          },
          "2" : {
            "sign" : -948372543,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 3216,
            "rowCount" : 268,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.item Output [2]: [i_item_sk#36, i_manufact_id#49] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item] PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,269), IsNotNull(i_item_sk)] ReadSchema: struct<i_item_sk:int,i_manufact_id:int> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.item",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#36]\n+- Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n   +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#36,i_manufact_id#49] Batched: true, DataFilters: [isnotnull(i_manufact_id#49), (i_manufact_id#49 = 269), isnotnull(i_item_sk#36)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,269), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manufact_id:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3216,
        "inputRowCount" : 268
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 2 ],
      "Objectives" : {
        "DurationInMs" : 1203,
        "TotalTasksDurationInMs" : 5450,
        "IOBytes" : {
          "Total" : 1131968,
          "Details" : {
            "IR" : 1131968,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1391912490,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1080,
                "rowCount" : 90
              },
              "compileTime" : {
                "sizeInBytes" : 1080,
                "rowCount" : 90
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#58] "
          },
          "1" : {
            "sign" : -1344689365,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 22140,
                "rowCount" : 90
              },
              "compileTime" : {
                "sizeInBytes" : 22140,
                "rowCount" : 90
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#60) AND ((d_date#60 >= 1998-03-18) AND (d_date#60 <= 1998-06-16))) AND isnotnull(d_date_sk#58)) "
          },
          "2" : {
            "sign" : -246181910,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#58, d_date_id#59, d_date#60, d_month_seq#61, d_week_seq#62, d_quarter_seq#63, d_year#64, d_dow#65, d_moy#66, d_dom#67, d_qoy#68, d_fy_year#69, d_fy_quarter_seq#70, d_fy_week_seq#71, d_day_name#72, d_quarter_name#73, d_holiday#74, d_weekend#75, d_following_holiday#76, d_first_dom#77, d_last_dom#78, d_same_day_ly#79, d_same_day_lq#80, d_current_day#81, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#58]\n+- Filter ((isnotnull(d_date#60) AND ((d_date#60 >= 1998-03-18) AND (d_date#60 <= 1998-06-16))) AND isnotnull(d_date_sk#58))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date_id#59,d_date#60,d_month_seq#61,d_week_seq#62,d_quarter_seq#63,d_year#64,d_dow#65,d_moy#66,d_dom#67,d_qoy#68,d_fy_year#69,d_fy_quarter_seq#70,d_fy_week_seq#71,d_day_name#72,d_quarter_name#73,d_holiday#74,d_weekend#75,d_following_holiday#76,d_first_dom#77,d_last_dom#78,d_same_day_ly#79,d_same_day_lq#80,d_current_day#81,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1390573792,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1080,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [d_date_sk#58] Input [2]: [d_date_sk#58, d_date#60] "
          },
          "1" : {
            "sign" : 417999667,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 1080,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [d_date_sk#58, d_date#60] Condition : (((isnotnull(d_date#60) AND (d_date#60 >= 1998-03-18)) AND (d_date#60 <= 1998-06-16)) AND isnotnull(d_date_sk#58)) "
          },
          "2" : {
            "sign" : -73421510,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 1080,
            "rowCount" : 90,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [2]: [d_date_sk#58, d_date#60] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-03-18), LessThanOrEqual(d_date,1998-06-16), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_date:date> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#58]\n+- Filter (((isnotnull(d_date#60) AND (d_date#60 >= 1998-03-18)) AND (d_date#60 <= 1998-06-16)) AND isnotnull(d_date_sk#58))\n   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date#60] Batched: true, DataFilters: [isnotnull(d_date#60), (d_date#60 >= 1998-03-18), (d_date#60 <= 1998-06-16), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-03-18), LessThanOrEqual(d_date,1998-06-16), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1080,
        "inputRowCount" : 90
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 1 ],
      "Objectives" : {
        "DurationInMs" : 1483,
        "TotalTasksDurationInMs" : 1472,
        "IOBytes" : {
          "Total" : 171738,
          "Details" : {
            "IR" : 171738,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 346020049,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0) AS bloomFilter#233] "
          }
        },
        "links" : [ ],
        "rawPlan" : "Aggregate [bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0) AS bloomFilter#233]\n+- Project [i_item_sk#36]\n   +- Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n      +- Relation spark_catalog.tpcds_100.item[i_item_sk#36,i_item_id#37,i_rec_start_date#38,i_rec_end_date#39,i_item_desc#40,i_current_price#41,i_wholesale_cost#42,i_brand_id#43,i_brand#44,i_class_id#45,i_class#46,i_category_id#47,i_category#48,i_manufact_id#49,i_manufact#50,i_size#51,i_formulation#52,i_color#53,i_units#54,i_container#55,i_manager_id#56,i_product_name#57] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1760660200,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [i_item_sk#36] Keys: [] Functions [1]: [partial_bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)] Aggregate Attributes [1]: [buf#241] Results [1]: [buf#242] "
          },
          "1" : {
            "sign" : -2094672209,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 3216,
            "rowCount" : 268,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [i_item_sk#36] Input [2]: [i_item_sk#36, i_manufact_id#49] "
          },
          "2" : {
            "sign" : 433299092,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 3216,
            "rowCount" : 268,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [i_item_sk#36, i_manufact_id#49] Condition : ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36)) "
          },
          "3" : {
            "sign" : -948372543,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 3216,
            "rowCount" : 268,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.item Output [2]: [i_item_sk#36, i_manufact_id#49] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item] PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,269), IsNotNull(i_item_sk)] ReadSchema: struct<i_item_sk:int,i_manufact_id:int> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.item",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)], output=[buf#242])\n+- Project [i_item_sk#36]\n   +- Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n      +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#36,i_manufact_id#49] Batched: true, DataFilters: [isnotnull(i_manufact_id#49), (i_manufact_id#49 = 269), isnotnull(i_item_sk#36)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,269), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manufact_id:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3216,
        "inputRowCount" : 268
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 1369,
        "TotalTasksDurationInMs" : 4786,
        "IOBytes" : {
          "Total" : 1133296,
          "Details" : {
            "IR" : 1131968,
            "IW" : 0,
            "SR" : 0,
            "SW" : 1328
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1678524242,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 256,
                "rowCount" : 16
              },
              "compileTime" : {
                "sizeInBytes" : 16,
                "rowCount" : 1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [MakeDecimal(sum(UnscaledValue(ws_ext_discount_amt#23)),17,2) AS Excess Discount Amount#161], HashAggregate(keys=[], functions=[sum(UnscaledValue(ws_ext_discount_amt#23))]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [MakeDecimal(sum(UnscaledValue(ws_ext_discount_amt#23)),17,2) AS Excess Discount Amount#161], HashAggregate(keys=[], functions=[sum(UnscaledValue(ws_ext_discount_amt#23))])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1835631118,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 256,
            "rowCount" : 16,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [1]: [sum#236L] Keys: [] Functions [1]: [sum(UnscaledValue(ws_ext_discount_amt#23))] Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_discount_amt#23))#227L] Results [1]: [MakeDecimal(sum(UnscaledValue(ws_ext_discount_amt#23))#227L,17,2) AS Excess Discount Amount#161] "
          },
          "1" : {
            "sign" : -1623897220,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [sum#236L] Arguments: 6 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[], functions=[sum(UnscaledValue(ws_ext_discount_amt#23))], output=[Excess Discount Amount#161])\n+- ShuffleQueryStage 6\n   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=929]\n      +- *(6) HashAggregate(keys=[], functions=[partial_sum(UnscaledValue(ws_ext_discount_amt#23))], output=[sum#236L])\n         +- *(6) Project [ws_ext_discount_amt#23]\n            +- *(6) BroadcastHashJoin [ws_item_sk#4], [i_item_sk#36], Inner, BuildRight, (cast(ws_ext_discount_amt#23 as decimal(14,7)) > (1.3 * avg(ws_ext_discount_amt))#164), false\n               :- *(6) Project [ws_item_sk#4, ws_ext_discount_amt#23]\n               :  +- *(6) BroadcastHashJoin [ws_sold_date_sk#35], [d_date_sk#58], Inner, BuildRight, false\n               :     :- *(6) Filter (isnotnull(ws_item_sk#4) AND isnotnull(ws_ext_discount_amt#23))\n               :     :  +- *(6) ColumnarToRow\n               :     :     +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_item_sk#4,ws_ext_discount_amt#23,ws_sold_date_sk#35] Batched: true, DataFilters: [isnotnull(ws_item_sk#4), isnotnull(ws_ext_discount_amt#23)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#35), dynamicpruningexpression(ws_sold_date_sk#35 IN dynamicpruning#231)], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_ext_discount_amt)], ReadSchema: struct<ws_item_sk:int,ws_ext_discount_amt:decimal(7,2)>\n               :     :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#231, 0, [d_date_sk#199], [id=#550]\n               :     +- BroadcastQueryStage 0\n               :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=257]\n               :           +- *(1) Project [d_date_sk#58]\n               :              +- *(1) Filter (((isnotnull(d_date#60) AND (d_date#60 >= 1998-03-18)) AND (d_date#60 <= 1998-06-16)) AND isnotnull(d_date_sk#58))\n               :                 +- *(1) ColumnarToRow\n               :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#58,d_date#60] Batched: true, DataFilters: [isnotnull(d_date#60), (d_date#60 >= 1998-03-18), (d_date#60 <= 1998-06-16), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-03-18), LessThanOrEqual(d_date,1998-06-16), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n               +- BroadcastQueryStage 5\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=807]\n                     +- *(5) Project [i_item_sk#36, (1.3 * avg(ws_ext_discount_amt))#164]\n                        +- *(5) BroadcastHashJoin [i_item_sk#36], [ws_item_sk#167], Inner, BuildLeft, false\n                           :- BroadcastQueryStage 1\n                           :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=278]\n                           :     +- *(2) Project [i_item_sk#36]\n                           :        +- *(2) Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n                           :           +- *(2) ColumnarToRow\n                           :              +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#36,i_manufact_id#49] Batched: true, DataFilters: [isnotnull(i_manufact_id#49), (i_manufact_id#49 = 269), isnotnull(i_item_sk#36)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,269), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manufact_id:int>\n                           +- *(5) Filter isnotnull((1.3 * avg(ws_ext_discount_amt))#164)\n                              +- *(5) HashAggregate(keys=[ws_item_sk#167], functions=[avg(UnscaledValue(ws_ext_discount_amt#186))], output=[(1.3 * avg(ws_ext_discount_amt))#164, ws_item_sk#167])\n                                 +- AQEShuffleRead coalesced\n                                    +- ShuffleQueryStage 4\n                                       +- Exchange hashpartitioning(ws_item_sk#167, 200), ENSURE_REQUIREMENTS, [plan_id=581]\n                                          +- *(4) HashAggregate(keys=[ws_item_sk#167], functions=[partial_avg(UnscaledValue(ws_ext_discount_amt#186))], output=[ws_item_sk#167, sum#239, count#240L])\n                                             +- *(4) Project [ws_item_sk#167, ws_ext_discount_amt#186]\n                                                +- *(4) BroadcastHashJoin [ws_sold_date_sk#198], [d_date_sk#199], Inner, BuildRight, false\n                                                   :- *(4) Filter (isnotnull(ws_item_sk#167) AND might_contain(Subquery subquery#234, [id=#110], xxhash64(ws_item_sk#167, 42)))\n                                                   :  :  +- Subquery subquery#234, [id=#110]\n                                                   :  :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                               +- == Final Plan ==\n                                                                  ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)], output=[bloomFilter#233])\n                                                                  +- ShuffleQueryStage 0\n                                                                     +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=640]\n                                                                        +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)], output=[buf#242])\n                                                                           +- *(1) Project [i_item_sk#36]\n                                                                              +- *(1) Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n                                                                                 +- *(1) ColumnarToRow\n                                                                                    +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#36,i_manufact_id#49] Batched: true, DataFilters: [isnotnull(i_manufact_id#49), (i_manufact_id#49 = 269), isnotnull(i_item_sk#36)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,269), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manufact_id:int>\n                                                               +- == Initial Plan ==\n                                                                  ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)], output=[bloomFilter#233])\n                                                                  +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=108]\n                                                                     +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)], output=[buf#242])\n                                                                        +- Project [i_item_sk#36]\n                                                                           +- Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n                                                                              +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#36,i_manufact_id#49] Batched: true, DataFilters: [isnotnull(i_manufact_id#49), (i_manufact_id#49 = 269), isnotnull(i_item_sk#36)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,269), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manufact_id:int>\n                                                   :  +- *(4) ColumnarToRow\n                                                   :     +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_item_sk#167,ws_ext_discount_amt#186,ws_sold_date_sk#198] Batched: true, DataFilters: [isnotnull(ws_item_sk#167)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#198), dynamicpruningexpression(ws_sold_date_sk#198 IN dynamicpruning#2..., PushedFilters: [IsNotNull(ws_item_sk)], ReadSchema: struct<ws_item_sk:int,ws_ext_discount_amt:decimal(7,2)>\n                                                   :           +- SubqueryBroadcast dynamicpruning#231, 0, [d_date_sk#199], [id=#550]\n                                                   :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                                     +- == Final Plan ==\n                                                                        BroadcastQueryStage 1\n                                                                        +- ReusedExchange [d_date_sk#199], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=257]\n                                                                     +- == Initial Plan ==\n                                                                        BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=547]\n                                                                        +- Project [d_date_sk#199]\n                                                                           +- Filter (((isnotnull(d_date#201) AND (d_date#201 >= 1998-03-18)) AND (d_date#201 <= 1998-06-16)) AND isnotnull(d_date_sk#199))\n                                                                              +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#199,d_date#201] Batched: true, DataFilters: [isnotnull(d_date#201), (d_date#201 >= 1998-03-18), (d_date#201 <= 1998-06-16), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-03-18), LessThanOrEqual(d_date,1998-06-16), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n                                                   +- BroadcastQueryStage 3\n                                                      +- ReusedExchange [d_date_sk#199], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=257]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 256,
        "inputRowCount" : 16
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "2" : [ 960 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 11 ],
      "Objectives" : {
        "DurationInMs" : 141,
        "TotalTasksDurationInMs" : 136,
        "IOBytes" : {
          "Total" : 944,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 944,
            "SW" : 0
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 410439306,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4760,
                "rowCount" : 5
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0) AS bloomFilter#233], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0) AS bloomFilter#233], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1468418258,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 4760,
            "rowCount" : 5,
            "isRuntime" : true,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [buf#242] Keys: [] Functions [1]: [bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)] Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)#232] Results [1]: [bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)#232 AS bloomFilter#233] "
          },
          "1" : {
            "sign" : -1855662711,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [buf#242] Arguments: 0 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)], output=[bloomFilter#233])\n+- ShuffleQueryStage 0\n   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=640]\n      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#36, 42), 268, 7316, 0, 0)], output=[buf#242])\n         +- *(1) Project [i_item_sk#36]\n            +- *(1) Filter ((isnotnull(i_manufact_id#49) AND (i_manufact_id#49 = 269)) AND isnotnull(i_item_sk#36))\n               +- *(1) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#36,i_manufact_id#49] Batched: true, DataFilters: [isnotnull(i_manufact_id#49), (i_manufact_id#49 = 269), isnotnull(i_item_sk#36)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,269), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manufact_id:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 4760,
        "inputRowCount" : 5
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "0" : [ 1403 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 5 ],
      "Objectives" : {
        "DurationInMs" : 2311,
        "TotalTasksDurationInMs" : 2287,
        "IOBytes" : {
          "Total" : 1328,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1328,
            "SW" : 0
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702227489100,
  "SQLEndTimeInMs" : 1702227502456,
  "Objectives" : {
    "DurationInMs" : 13356,
    "IOBytes" : {
      "Total" : 38549853,
      "Details" : {
        "IR" : 38318833,
        "IW" : 0,
        "SR" : 115510,
        "SW" : 115510
      }
    }
  }
}
