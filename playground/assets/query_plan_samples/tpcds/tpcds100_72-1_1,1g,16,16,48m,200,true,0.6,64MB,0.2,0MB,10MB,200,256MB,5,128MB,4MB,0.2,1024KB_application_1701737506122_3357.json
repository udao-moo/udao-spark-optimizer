{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "45" : {
          "sign" : -1716393061,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 36495200,
          "rowCount" : 384160,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(cd_marital_status#80) AND (cd_marital_status#80 = M)) AND isnotnull(cd_demo_sk#78)) "
        },
        "34" : {
          "sign" : -1760684413,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3810,
          "rowCount" : 15,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [w_warehouse_sk#42, w_warehouse_id#43, w_warehouse_name#44, w_warehouse_sq_ft#45, w_street_number#46, w_street_name#47, w_street_type#48, w_suite_number#49, w_city#50, w_county#51, w_state#52, w_zip#53, w_country#54, w_gmt_offset#55], `spark_catalog`.`tpcds_100`.`warehouse`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "12" : {
          "sign" : 1552328314,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 5162730192,
          "rowCount" : 143409172,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#196] "
        },
        "51" : {
          "sign" : 1813135065,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 269000,
          "rowCount" : 1000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(p_promo_sk#120) "
        },
        "8" : {
          "sign" : -1917426158,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 24027033651,
          "rowCount" : 143874453,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96] "
        },
        "19" : {
          "sign" : 1606552890,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 29208491104,
          "rowCount" : 140425438,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((((((isnotnull(cs_quantity#21) AND isnotnull(cs_item_sk#18)) AND isnotnull(cs_bill_cdemo_sk#7)) AND isnotnull(cs_bill_hdemo_sk#8)) AND isnotnull(cs_sold_date_sk#37)) AND isnotnull(cs_ship_date_sk#5)) AND dynamicpruning#241 [cs_sold_date_sk#37]) "
        },
        "23" : {
          "sign" : -176057447,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 20397545676,
          "rowCount" : 443424906,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [inv_item_sk#38, inv_quantity_on_hand#40, d_week_seq#170, w_warehouse_name#44] "
        },
        "4" : {
          "sign" : -520653313,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 32172705355,
          "rowCount" : 207565841,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120] "
        },
        "40" : {
          "sign" : -98187502,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 316800,
          "rowCount" : 7200,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [hd_demo_sk#87, hd_income_band_sk#88, hd_buy_potential#89, hd_dep_count#90, hd_vehicle_count#91], `spark_catalog`.`tpcds_100`.`household_demographics`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "15" : {
          "sign" : 312845957,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 6644066160,
          "rowCount" : 138418045,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (cs_ship_date_sk#5 = d_date_sk#194) "
        },
        "11" : {
          "sign" : 2119316053,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 11358333484,
          "rowCount" : 138516262,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((((inv_quantity_on_hand#40 < cs_quantity#21) AND (cs_item_sk#18 = inv_item_sk#38)) AND (cs_sold_date_sk#37 = d_date_sk#92)) AND (d_date#196 > date_add(d_date#94, 5))) "
        },
        "9" : {
          "sign" : -1023242543,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 24602531463,
          "rowCount" : 143874453,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#56 = cs_item_sk#18) "
        },
        "44" : {
          "sign" : -1130789446,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 4609920,
          "rowCount" : 384160,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cd_demo_sk#78] "
        },
        "33" : {
          "sign" : 286634251,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3810,
          "rowCount" : 15,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(w_warehouse_sk#42) "
        },
        "22" : {
          "sign" : 1131908583,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 30962488,
          "rowCount" : 533836,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (d_week_seq#96 = d_week_seq#170) "
        },
        "55" : {
          "sign" : 1154450115,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 2246060232,
          "rowCount" : 14397822,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cr_returned_time_sk#139, cr_item_sk#140, cr_refunded_customer_sk#141, cr_refunded_cdemo_sk#142, cr_refunded_hdemo_sk#143, cr_refunded_addr_sk#144, cr_returning_customer_sk#145, cr_returning_cdemo_sk#146, cr_returning_hdemo_sk#147, cr_returning_addr_sk#148, cr_call_center_sk#149, cr_catalog_page_sk#150, cr_ship_mode_sk#151, cr_warehouse_sk#152, cr_reason_sk#153, cr_order_number#154L, cr_return_quantity#155, cr_return_amount#156, cr_return_tax#157, cr_return_amt_inc_tax#158, cr_fee#159, cr_return_ship_cost#160, cr_refunded_cash#161, cr_reversed_charge#162, ... 3 more fields], `spark_catalog`.`tpcds_100`.`catalog_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "26" : {
          "sign" : -1270474690,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 12504999808,
          "rowCount" : 390781244,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (inv_date_sk#41 = d_date_sk#166) "
        },
        "50" : {
          "sign" : -906443417,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 12000,
          "rowCount" : 1000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [p_promo_sk#120] "
        },
        "37" : {
          "sign" : -1106989248,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#92, d_date_id#93, d_date#94, d_month_seq#95, d_week_seq#96, d_quarter_seq#97, d_year#98, d_dow#99, d_moy#100, d_dom#101, d_qoy#102, d_fy_year#103, d_fy_quarter_seq#104, d_fy_week_seq#105, d_day_name#106, d_quarter_name#107, d_holiday#108, d_weekend#109, d_following_holiday#110, d_first_dom#111, d_last_dom#112, d_same_day_ly#113, d_same_day_lq#114, d_current_day#115, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "13" : {
          "sign" : 111978486,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 6310003568,
          "rowCount" : 143409172,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (cs_bill_cdemo_sk#7 = cd_demo_sk#78) "
        },
        "46" : {
          "sign" : -1724258072,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 182476000,
          "rowCount" : 1920800,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cd_demo_sk#78, cd_gender#79, cd_marital_status#80, cd_education_status#81, cd_purchase_estimate#82, cd_credit_rating#83, cd_dep_count#84, cd_dep_employed_count#85, cd_dep_college_count#86], `spark_catalog`.`tpcds_100`.`customer_demographics`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "24" : {
          "sign" : -995757326,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 23944944924,
          "rowCount" : 443424906,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (w_warehouse_sk#42 = inv_warehouse_sk#39) "
        },
        "35" : {
          "sign" : 1080210064,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 11520,
          "rowCount" : 576,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#92, d_date#94, d_week_seq#96] "
        },
        "16" : {
          "sign" : 2110131927,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 5666080280,
          "rowCount" : 141652007,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_ship_date_sk#5, cs_bill_cdemo_sk#7, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37] "
        },
        "5" : {
          "sign" : -1903597954,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 37154285539,
          "rowCount" : 207565841,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: LeftOuter, ((cr_item_sk#140 = cs_item_sk#18) AND (cr_order_number#154L = cs_order_number#20L)) "
        },
        "10" : {
          "sign" : 71271980,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 7479878148,
          "rowCount" : 138516262,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, d_week_seq#96] "
        },
        "48" : {
          "sign" : 1772582654,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(i_item_sk#56) "
        },
        "21" : {
          "sign" : 1656472730,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 28827144,
          "rowCount" : 533836,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [inv_item_sk#38, inv_quantity_on_hand#40, w_warehouse_name#44, d_date_sk#92, d_date#94, d_week_seq#96] "
        },
        "54" : {
          "sign" : -1364696436,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 2246060232,
          "rowCount" : 14397822,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(cr_item_sk#140) AND isnotnull(cr_order_number#154L)) "
        },
        "43" : {
          "sign" : 2142208940,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#194, d_date_id#195, d_date#196, d_month_seq#197, d_week_seq#198, d_quarter_seq#199, d_year#200, d_dow#201, d_moy#202, d_dom#203, d_qoy#204, d_fy_year#205, d_fy_quarter_seq#206, d_fy_week_seq#207, d_day_name#208, d_quarter_name#209, d_holiday#210, d_weekend#211, d_following_holiday#212, d_first_dom#213, d_last_dom#214, d_same_day_ly#215, d_same_day_lq#216, d_current_day#217, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "32" : {
          "sign" : 636141117,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 570,
          "rowCount" : 15,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [w_warehouse_sk#42, w_warehouse_name#44] "
        },
        "49" : {
          "sign" : 335627173,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#56, i_item_id#57, i_rec_start_date#58, i_rec_end_date#59, i_item_desc#60, i_current_price#61, i_wholesale_cost#62, i_brand_id#63, i_brand#64, i_class_id#65, i_class#66, i_category_id#67, i_category#68, i_manufact_id#69, i_manufact#70, i_size#71, i_formulation#72, i_color#73, i_units#74, i_container#75, i_manager_id#76, i_product_name#77], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "6" : {
          "sign" : -1778419243,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 34663495447,
          "rowCount" : 207565841,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_item_sk#18, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120] "
        },
        "36" : {
          "sign" : -909628679,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 141696,
          "rowCount" : 576,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_year#98) AND (d_year#98 = 2001)) AND isnotnull(d_date_sk#92)) AND (isnotnull(d_week_seq#96) AND isnotnull(d_date#94))) "
        },
        "1" : {
          "sign" : -1495766969,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
          "sizeInBytes" : 36324022175,
          "rowCount" : 207565841,
          "isRuntime" : false,
          "predicate" : " (unknown) LocalLimit Arguments: 100 "
        },
        "39" : {
          "sign" : -1932629129,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 52800,
          "rowCount" : 1200,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(hd_buy_potential#89) AND (hd_buy_potential#89 = 1001-5000)) AND isnotnull(hd_demo_sk#87)) "
        },
        "17" : {
          "sign" : -1561010796,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 6799296336,
          "rowCount" : 141652007,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (cs_bill_hdemo_sk#8 = hd_demo_sk#87) "
        },
        "25" : {
          "sign" : 1689313024,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 9378749856,
          "rowCount" : 390781244,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [inv_item_sk#38, inv_warehouse_sk#39, inv_quantity_on_hand#40, d_week_seq#170] "
        },
        "14" : {
          "sign" : -1460580333,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 5536721800,
          "rowCount" : 138418045,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_bill_cdemo_sk#7, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#196] "
        },
        "47" : {
          "sign" : -47889715,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 25500000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#56, i_item_desc#60] "
        },
        "31" : {
          "sign" : 1127847808,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#166, d_date_id#167, d_date#168, d_month_seq#169, d_week_seq#170, d_quarter_seq#171, d_year#172, d_dow#173, d_moy#174, d_dom#175, d_qoy#176, d_fy_year#177, d_fy_quarter_seq#178, d_fy_week_seq#179, d_day_name#180, d_quarter_name#181, d_holiday#182, d_weekend#183, d_following_holiday#184, d_first_dom#185, d_last_dom#186, d_same_day_ly#187, d_same_day_lq#188, d_current_day#189, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "53" : {
          "sign" : 547200820,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 287956440,
          "rowCount" : 14397822,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cr_item_sk#140, cr_order_number#154L] "
        },
        "42" : {
          "sign" : -1701570989,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(d_date#196) AND isnotnull(d_date_sk#194)) "
        },
        "0" : {
          "sign" : -653555216,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
          "sizeInBytes" : 7600,
          "rowCount" : 100,
          "isRuntime" : false,
          "predicate" : " (unknown) GlobalLimit Arguments: 100 "
        },
        "20" : {
          "sign" : -2121399422,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 29800787536,
          "rowCount" : 143273017,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#4, cs_ship_date_sk#5, cs_bill_customer_sk#6, cs_bill_cdemo_sk#7, cs_bill_hdemo_sk#8, cs_bill_addr_sk#9, cs_ship_customer_sk#10, cs_ship_cdemo_sk#11, cs_ship_hdemo_sk#12, cs_ship_addr_sk#13, cs_call_center_sk#14, cs_catalog_page_sk#15, cs_ship_mode_sk#16, cs_warehouse_sk#17, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_wholesale_cost#22, cs_list_price#23, cs_sales_price#24, cs_ext_discount_amt#25, cs_ext_sales_price#26, cs_ext_wholesale_cost#27, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "27" : {
          "sign" : 1335160095,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 9104927592,
          "rowCount" : 379371983,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(inv_quantity_on_hand#40) AND isnotnull(inv_item_sk#38)) AND isnotnull(inv_warehouse_sk#39)) AND isnotnull(inv_date_sk#41)) "
        },
        "2" : {
          "sign" : 1309264666,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 36324022175,
          "rowCount" : 207565841,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [total_cnt#2L DESC NULLS LAST, i_item_desc#60 ASC NULLS FIRST, w_warehouse_name#44 ASC NULLS FIRST, d_week_seq#96 ASC NULLS FIRST], true "
        },
        "38" : {
          "sign" : 1002334805,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 14400,
          "rowCount" : 1200,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [hd_demo_sk#87] "
        },
        "18" : {
          "sign" : 1857330211,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 6178719272,
          "rowCount" : 140425438,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_ship_date_sk#5, cs_bill_cdemo_sk#7, cs_bill_hdemo_sk#8, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37] "
        },
        "30" : {
          "sign" : -620808278,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(d_week_seq#170) AND isnotnull(d_date_sk#166)) "
        },
        "7" : {
          "sign" : 335517117,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 35493758811,
          "rowCount" : 207565841,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: LeftOuter, (cs_promo_sk#19 = p_promo_sk#120) "
        },
        "29" : {
          "sign" : 92724881,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1168784,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#166, d_week_seq#170] "
        },
        "41" : {
          "sign" : 100932039,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1168784,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#194, d_date#196] "
        },
        "3" : {
          "sign" : 578041370,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 36324022175,
          "rowCount" : 207565841,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [i_item_desc#60, w_warehouse_name#44, d_week_seq#96], [i_item_desc#60, w_warehouse_name#44, d_week_seq#96, sum(CASE WHEN isnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS no_promo#0L, sum(CASE WHEN isnotnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS promo#1L, count(1) AS total_cnt#2L] "
        },
        "52" : {
          "sign" : -1973574145,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 269000,
          "rowCount" : 1000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [p_promo_sk#120, p_promo_id#121, p_start_date_sk#122, p_end_date_sk#123, p_item_sk#124, p_cost#125, p_response_target#126, p_promo_name#127, p_channel_dmail#128, p_channel_email#129, p_channel_catalog#130, p_channel_tv#131, p_channel_radio#132, p_channel_press#133, p_channel_event#134, p_channel_demo#135, p_channel_details#136, p_purpose#137, p_discount_active#138], `spark_catalog`.`tpcds_100`.`promotion`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "28" : {
          "sign" : 683407923,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 9583920000,
          "rowCount" : 399330000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [inv_item_sk#38, inv_warehouse_sk#39, inv_quantity_on_hand#40, inv_date_sk#41], `spark_catalog`.`tpcds_100`.`inventory`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        }
      },
      "links" : [ {
        "fromId" : 20,
        "fromName" : "LogicalRelation",
        "toId" : 19,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "LogicalRelation",
        "toId" : 27,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "Filter",
        "toId" : 26,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 31,
        "fromName" : "LogicalRelation",
        "toId" : 30,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 30,
        "fromName" : "Filter",
        "toId" : 29,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 29,
        "fromName" : "Project",
        "toId" : 26,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "Join",
        "toId" : 25,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "Project",
        "toId" : 24,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 34,
        "fromName" : "LogicalRelation",
        "toId" : 33,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 33,
        "fromName" : "Filter",
        "toId" : 32,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 32,
        "fromName" : "Project",
        "toId" : 24,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "Join",
        "toId" : 23,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "Project",
        "toId" : 22,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 37,
        "fromName" : "LogicalRelation",
        "toId" : 36,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 36,
        "fromName" : "Filter",
        "toId" : 35,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 35,
        "fromName" : "Project",
        "toId" : 22,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "Join",
        "toId" : 21,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Project",
        "toId" : 19,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 19,
        "fromName" : "Filter",
        "toId" : 18,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "Project",
        "toId" : 17,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 40,
        "fromName" : "LogicalRelation",
        "toId" : 39,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 39,
        "fromName" : "Filter",
        "toId" : 38,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 38,
        "fromName" : "Project",
        "toId" : 17,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Join",
        "toId" : 16,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "Project",
        "toId" : 15,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 43,
        "fromName" : "LogicalRelation",
        "toId" : 42,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 42,
        "fromName" : "Filter",
        "toId" : 41,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 41,
        "fromName" : "Project",
        "toId" : 15,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "Join",
        "toId" : 14,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Project",
        "toId" : 13,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 46,
        "fromName" : "LogicalRelation",
        "toId" : 45,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 45,
        "fromName" : "Filter",
        "toId" : 44,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 44,
        "fromName" : "Project",
        "toId" : 13,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Join",
        "toId" : 12,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 12,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "Join",
        "toId" : 10,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 49,
        "fromName" : "LogicalRelation",
        "toId" : 48,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 48,
        "fromName" : "Filter",
        "toId" : 47,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 47,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Join",
        "toId" : 8,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 52,
        "fromName" : "LogicalRelation",
        "toId" : 51,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 51,
        "fromName" : "Filter",
        "toId" : 50,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 50,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Join",
        "toId" : 6,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Project",
        "toId" : 5,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 55,
        "fromName" : "LogicalRelation",
        "toId" : 54,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 54,
        "fromName" : "Filter",
        "toId" : 53,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 53,
        "fromName" : "Project",
        "toId" : 5,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Join",
        "toId" : 4,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Project",
        "toId" : 3,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Aggregate",
        "toId" : 2,
        "toName" : "Sort",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Sort",
        "toId" : 1,
        "toName" : "LocalLimit",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "LocalLimit",
        "toId" : 0,
        "toName" : "GlobalLimit",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [total_cnt#2L DESC NULLS LAST, i_item_desc#60 ASC NULLS FIRST, w_warehouse_name#44 ASC NULLS FIRST, d_week_seq#96 ASC NULLS FIRST], true\n      +- Aggregate [i_item_desc#60, w_warehouse_name#44, d_week_seq#96], [i_item_desc#60, w_warehouse_name#44, d_week_seq#96, sum(CASE WHEN isnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS no_promo#0L, sum(CASE WHEN isnotnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS promo#1L, count(1) AS total_cnt#2L]\n         +- Project [w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120]\n            +- Join LeftOuter, ((cr_item_sk#140 = cs_item_sk#18) AND (cr_order_number#154L = cs_order_number#20L))\n               :- Project [cs_item_sk#18, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120]\n               :  +- Join LeftOuter, (cs_promo_sk#19 = p_promo_sk#120)\n               :     :- Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96]\n               :     :  +- Join Inner, (i_item_sk#56 = cs_item_sk#18)\n               :     :     :- Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, d_week_seq#96]\n               :     :     :  +- Join Inner, ((((inv_quantity_on_hand#40 < cs_quantity#21) AND (cs_item_sk#18 = inv_item_sk#38)) AND (cs_sold_date_sk#37 = d_date_sk#92)) AND (d_date#196 > date_add(d_date#94, 5)))\n               :     :     :     :- Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#196]\n               :     :     :     :  +- Join Inner, (cs_bill_cdemo_sk#7 = cd_demo_sk#78)\n               :     :     :     :     :- Project [cs_bill_cdemo_sk#7, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#196]\n               :     :     :     :     :  +- Join Inner, (cs_ship_date_sk#5 = d_date_sk#194)\n               :     :     :     :     :     :- Project [cs_ship_date_sk#5, cs_bill_cdemo_sk#7, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37]\n               :     :     :     :     :     :  +- Join Inner, (cs_bill_hdemo_sk#8 = hd_demo_sk#87)\n               :     :     :     :     :     :     :- Project [cs_ship_date_sk#5, cs_bill_cdemo_sk#7, cs_bill_hdemo_sk#8, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37]\n               :     :     :     :     :     :     :  +- Filter ((((((isnotnull(cs_quantity#21) AND isnotnull(cs_item_sk#18)) AND isnotnull(cs_bill_cdemo_sk#7)) AND isnotnull(cs_bill_hdemo_sk#8)) AND isnotnull(cs_sold_date_sk#37)) AND isnotnull(cs_ship_date_sk#5)) AND dynamicpruning#241 [cs_sold_date_sk#37])\n               :     :     :     :     :     :     :     :  +- Project [inv_item_sk#38, inv_quantity_on_hand#40, w_warehouse_name#44, d_date_sk#92, d_date#94, d_week_seq#96]\n               :     :     :     :     :     :     :     :     +- Join Inner, (d_week_seq#96 = d_week_seq#170)\n               :     :     :     :     :     :     :     :        :- Project [inv_item_sk#38, inv_quantity_on_hand#40, d_week_seq#170, w_warehouse_name#44]\n               :     :     :     :     :     :     :     :        :  +- Join Inner, (w_warehouse_sk#42 = inv_warehouse_sk#39)\n               :     :     :     :     :     :     :     :        :     :- Project [inv_item_sk#38, inv_warehouse_sk#39, inv_quantity_on_hand#40, d_week_seq#170]\n               :     :     :     :     :     :     :     :        :     :  +- Join Inner, (inv_date_sk#41 = d_date_sk#166)\n               :     :     :     :     :     :     :     :        :     :     :- Filter (((isnotnull(inv_quantity_on_hand#40) AND isnotnull(inv_item_sk#38)) AND isnotnull(inv_warehouse_sk#39)) AND isnotnull(inv_date_sk#41))\n               :     :     :     :     :     :     :     :        :     :     :  +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#38,inv_warehouse_sk#39,inv_quantity_on_hand#40,inv_date_sk#41] parquet\n               :     :     :     :     :     :     :     :        :     :     +- Project [d_date_sk#166, d_week_seq#170]\n               :     :     :     :     :     :     :     :        :     :        +- Filter (isnotnull(d_week_seq#170) AND isnotnull(d_date_sk#166))\n               :     :     :     :     :     :     :     :        :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#166,d_date_id#167,d_date#168,d_month_seq#169,d_week_seq#170,d_quarter_seq#171,d_year#172,d_dow#173,d_moy#174,d_dom#175,d_qoy#176,d_fy_year#177,d_fy_quarter_seq#178,d_fy_week_seq#179,d_day_name#180,d_quarter_name#181,d_holiday#182,d_weekend#183,d_following_holiday#184,d_first_dom#185,d_last_dom#186,d_same_day_ly#187,d_same_day_lq#188,d_current_day#189,... 4 more fields] parquet\n               :     :     :     :     :     :     :     :        :     +- Project [w_warehouse_sk#42, w_warehouse_name#44]\n               :     :     :     :     :     :     :     :        :        +- Filter isnotnull(w_warehouse_sk#42)\n               :     :     :     :     :     :     :     :        :           +- Relation spark_catalog.tpcds_100.warehouse[w_warehouse_sk#42,w_warehouse_id#43,w_warehouse_name#44,w_warehouse_sq_ft#45,w_street_number#46,w_street_name#47,w_street_type#48,w_suite_number#49,w_city#50,w_county#51,w_state#52,w_zip#53,w_country#54,w_gmt_offset#55] parquet\n               :     :     :     :     :     :     :     :        +- Project [d_date_sk#92, d_date#94, d_week_seq#96]\n               :     :     :     :     :     :     :     :           +- Filter (((isnotnull(d_year#98) AND (d_year#98 = 2001)) AND isnotnull(d_date_sk#92)) AND (isnotnull(d_week_seq#96) AND isnotnull(d_date#94)))\n               :     :     :     :     :     :     :     :              +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#92,d_date_id#93,d_date#94,d_month_seq#95,d_week_seq#96,d_quarter_seq#97,d_year#98,d_dow#99,d_moy#100,d_dom#101,d_qoy#102,d_fy_year#103,d_fy_quarter_seq#104,d_fy_week_seq#105,d_day_name#106,d_quarter_name#107,d_holiday#108,d_weekend#109,d_following_holiday#110,d_first_dom#111,d_last_dom#112,d_same_day_ly#113,d_same_day_lq#114,d_current_day#115,... 4 more fields] parquet\n               :     :     :     :     :     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#4,cs_ship_date_sk#5,cs_bill_customer_sk#6,cs_bill_cdemo_sk#7,cs_bill_hdemo_sk#8,cs_bill_addr_sk#9,cs_ship_customer_sk#10,cs_ship_cdemo_sk#11,cs_ship_hdemo_sk#12,cs_ship_addr_sk#13,cs_call_center_sk#14,cs_catalog_page_sk#15,cs_ship_mode_sk#16,cs_warehouse_sk#17,cs_item_sk#18,cs_promo_sk#19,cs_order_number#20L,cs_quantity#21,cs_wholesale_cost#22,cs_list_price#23,cs_sales_price#24,cs_ext_discount_amt#25,cs_ext_sales_price#26,cs_ext_wholesale_cost#27,... 10 more fields] parquet\n               :     :     :     :     :     :     +- Project [hd_demo_sk#87]\n               :     :     :     :     :     :        +- Filter ((isnotnull(hd_buy_potential#89) AND (hd_buy_potential#89 = 1001-5000)) AND isnotnull(hd_demo_sk#87))\n               :     :     :     :     :     :           +- Relation spark_catalog.tpcds_100.household_demographics[hd_demo_sk#87,hd_income_band_sk#88,hd_buy_potential#89,hd_dep_count#90,hd_vehicle_count#91] parquet\n               :     :     :     :     :     +- Project [d_date_sk#194, d_date#196]\n               :     :     :     :     :        +- Filter (isnotnull(d_date#196) AND isnotnull(d_date_sk#194))\n               :     :     :     :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#194,d_date_id#195,d_date#196,d_month_seq#197,d_week_seq#198,d_quarter_seq#199,d_year#200,d_dow#201,d_moy#202,d_dom#203,d_qoy#204,d_fy_year#205,d_fy_quarter_seq#206,d_fy_week_seq#207,d_day_name#208,d_quarter_name#209,d_holiday#210,d_weekend#211,d_following_holiday#212,d_first_dom#213,d_last_dom#214,d_same_day_ly#215,d_same_day_lq#216,d_current_day#217,... 4 more fields] parquet\n               :     :     :     :     +- Project [cd_demo_sk#78]\n               :     :     :     :        +- Filter ((isnotnull(cd_marital_status#80) AND (cd_marital_status#80 = M)) AND isnotnull(cd_demo_sk#78))\n               :     :     :     :           +- Relation spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#78,cd_gender#79,cd_marital_status#80,cd_education_status#81,cd_purchase_estimate#82,cd_credit_rating#83,cd_dep_count#84,cd_dep_employed_count#85,cd_dep_college_count#86] parquet\n               :     :     :     +- Project [inv_item_sk#38, inv_quantity_on_hand#40, w_warehouse_name#44, d_date_sk#92, d_date#94, d_week_seq#96]\n               :     :     :        +- Join Inner, (d_week_seq#96 = d_week_seq#170)\n               :     :     :           :- Project [inv_item_sk#38, inv_quantity_on_hand#40, d_week_seq#170, w_warehouse_name#44]\n               :     :     :           :  +- Join Inner, (w_warehouse_sk#42 = inv_warehouse_sk#39)\n               :     :     :           :     :- Project [inv_item_sk#38, inv_warehouse_sk#39, inv_quantity_on_hand#40, d_week_seq#170]\n               :     :     :           :     :  +- Join Inner, (inv_date_sk#41 = d_date_sk#166)\n               :     :     :           :     :     :- Filter (((isnotnull(inv_quantity_on_hand#40) AND isnotnull(inv_item_sk#38)) AND isnotnull(inv_warehouse_sk#39)) AND isnotnull(inv_date_sk#41))\n               :     :     :           :     :     :  +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#38,inv_warehouse_sk#39,inv_quantity_on_hand#40,inv_date_sk#41] parquet\n               :     :     :           :     :     +- Project [d_date_sk#166, d_week_seq#170]\n               :     :     :           :     :        +- Filter (isnotnull(d_week_seq#170) AND isnotnull(d_date_sk#166))\n               :     :     :           :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#166,d_date_id#167,d_date#168,d_month_seq#169,d_week_seq#170,d_quarter_seq#171,d_year#172,d_dow#173,d_moy#174,d_dom#175,d_qoy#176,d_fy_year#177,d_fy_quarter_seq#178,d_fy_week_seq#179,d_day_name#180,d_quarter_name#181,d_holiday#182,d_weekend#183,d_following_holiday#184,d_first_dom#185,d_last_dom#186,d_same_day_ly#187,d_same_day_lq#188,d_current_day#189,... 4 more fields] parquet\n               :     :     :           :     +- Project [w_warehouse_sk#42, w_warehouse_name#44]\n               :     :     :           :        +- Filter isnotnull(w_warehouse_sk#42)\n               :     :     :           :           +- Relation spark_catalog.tpcds_100.warehouse[w_warehouse_sk#42,w_warehouse_id#43,w_warehouse_name#44,w_warehouse_sq_ft#45,w_street_number#46,w_street_name#47,w_street_type#48,w_suite_number#49,w_city#50,w_county#51,w_state#52,w_zip#53,w_country#54,w_gmt_offset#55] parquet\n               :     :     :           +- Project [d_date_sk#92, d_date#94, d_week_seq#96]\n               :     :     :              +- Filter (((isnotnull(d_year#98) AND (d_year#98 = 2001)) AND isnotnull(d_date_sk#92)) AND (isnotnull(d_week_seq#96) AND isnotnull(d_date#94)))\n               :     :     :                 +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#92,d_date_id#93,d_date#94,d_month_seq#95,d_week_seq#96,d_quarter_seq#97,d_year#98,d_dow#99,d_moy#100,d_dom#101,d_qoy#102,d_fy_year#103,d_fy_quarter_seq#104,d_fy_week_seq#105,d_day_name#106,d_quarter_name#107,d_holiday#108,d_weekend#109,d_following_holiday#110,d_first_dom#111,d_last_dom#112,d_same_day_ly#113,d_same_day_lq#114,d_current_day#115,... 4 more fields] parquet\n               :     :     +- Project [i_item_sk#56, i_item_desc#60]\n               :     :        +- Filter isnotnull(i_item_sk#56)\n               :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#56,i_item_id#57,i_rec_start_date#58,i_rec_end_date#59,i_item_desc#60,i_current_price#61,i_wholesale_cost#62,i_brand_id#63,i_brand#64,i_class_id#65,i_class#66,i_category_id#67,i_category#68,i_manufact_id#69,i_manufact#70,i_size#71,i_formulation#72,i_color#73,i_units#74,i_container#75,i_manager_id#76,i_product_name#77] parquet\n               :     +- Project [p_promo_sk#120]\n               :        +- Filter isnotnull(p_promo_sk#120)\n               :           +- Relation spark_catalog.tpcds_100.promotion[p_promo_sk#120,p_promo_id#121,p_start_date_sk#122,p_end_date_sk#123,p_item_sk#124,p_cost#125,p_response_target#126,p_promo_name#127,p_channel_dmail#128,p_channel_email#129,p_channel_catalog#130,p_channel_tv#131,p_channel_radio#132,p_channel_press#133,p_channel_event#134,p_channel_demo#135,p_channel_details#136,p_purpose#137,p_discount_active#138] parquet\n               +- Project [cr_item_sk#140, cr_order_number#154L]\n                  +- Filter (isnotnull(cr_item_sk#140) AND isnotnull(cr_order_number#154L))\n                     +- Relation spark_catalog.tpcds_100.catalog_returns[cr_returned_time_sk#139,cr_item_sk#140,cr_refunded_customer_sk#141,cr_refunded_cdemo_sk#142,cr_refunded_hdemo_sk#143,cr_refunded_addr_sk#144,cr_returning_customer_sk#145,cr_returning_cdemo_sk#146,cr_returning_hdemo_sk#147,cr_returning_addr_sk#148,cr_call_center_sk#149,cr_catalog_page_sk#150,cr_ship_mode_sk#151,cr_warehouse_sk#152,cr_reason_sk#153,cr_order_number#154L,cr_return_quantity#155,cr_return_amount#156,cr_return_tax#157,cr_return_amt_inc_tax#158,cr_fee#159,cr_return_ship_cost#160,cr_refunded_cash#161,cr_reversed_charge#162,... 3 more fields] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 41954647540,
      "inputRowCount" : 559353001
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "4" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 81626472,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 266467152,
            "rowCount" : 4758342,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276], ShuffleQueryStage 9 "
          },
          "8" : {
            "sign" : 1839805995,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 35021051091466423200000,
            "rowCount" : 515015457227447400000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96] "
          },
          "4" : {
            "sign" : -1309253170,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 415245649302926466055516800000000,
            "rowCount" : 7415100880409401179562800000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120] "
          },
          "15" : {
            "sign" : 392999575,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1056576,
            "rowCount" : 1000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_promo_sk#120], BroadcastQueryStage 7 "
          },
          "11" : {
            "sign" : 2118538542,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 191868503672970600,
            "rowCount" : 2524585574644350,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((((inv_quantity_on_hand#40 < cs_quantity#21) AND (cs_item_sk#18 = inv_item_sk#38)) AND (cs_sold_date_sk#37 = d_date_sk#92)) AND (d_date#276 > date_add(d_date#94, 5))) "
          },
          "9" : {
            "sign" : 429511464,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 37081112920376212800000,
            "rowCount" : 515015457227447400000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#56 = cs_item_sk#18) "
          },
          "13" : {
            "sign" : 1821927658,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 38483303416,
            "rowCount" : 530559925,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [inv_item_sk#38, inv_quantity_on_hand#40, w_warehouse_name#44, d_date_sk#92, d_date#94, d_week_seq#96], ShuffleQueryStage 10 "
          },
          "16" : {
            "sign" : -751614694,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 345547728,
            "rowCount" : 14397822,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cr_item_sk#140, cr_order_number#154L], ShuffleQueryStage 8 "
          },
          "5" : {
            "sign" : 965250267,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 593208070432752094365024000000000,
            "rowCount" : 7415100880409401179562800000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, ((cr_item_sk#140 = cs_item_sk#18) AND (cr_order_number#154L = cs_order_number#20L)) "
          },
          "10" : {
            "sign" : -1232359769,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 121180107582928800,
            "rowCount" : 2524585574644350,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, d_week_seq#96] "
          },
          "6" : {
            "sign" : 669358718,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 35021051091466423200000000,
            "rowCount" : 515015457227447400000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#18, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120] "
          },
          "1" : {
            "sign" : 1621151794,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 563547666911114489646772800000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "14" : {
            "sign" : -555763869,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 26102424,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#56, i_item_desc#60], ShuffleQueryStage 6 "
          },
          "0" : {
            "sign" : 1330138621,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 7600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 739438099,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 563547666911114489646772800000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [total_cnt#244L DESC NULLS LAST, i_item_desc#60 ASC NULLS FIRST, w_warehouse_name#44 ASC NULLS FIRST, d_week_seq#96 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -1076760654,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 37081112920376212800000000,
            "rowCount" : 515015457227447400000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (cs_promo_sk#19 = p_promo_sk#120) "
          },
          "3" : {
            "sign" : -1435056577,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 563547666911114489646772800000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_desc#60, w_warehouse_name#44, d_week_seq#96], [i_item_desc#60, w_warehouse_name#44, d_week_seq#96, sum(CASE WHEN isnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS no_promo#242L, sum(CASE WHEN isnotnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS promo#243L, count(1) AS total_cnt#244L] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [total_cnt#244L DESC NULLS LAST, i_item_desc#60 ASC NULLS FIRST, w_warehouse_name#44 ASC NULLS FIRST, d_week_seq#96 ASC NULLS FIRST], true\n      +- Aggregate [i_item_desc#60, w_warehouse_name#44, d_week_seq#96], [i_item_desc#60, w_warehouse_name#44, d_week_seq#96, sum(CASE WHEN isnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS no_promo#242L, sum(CASE WHEN isnotnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS promo#243L, count(1) AS total_cnt#244L]\n         +- Project [w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120]\n            +- Join LeftOuter, ((cr_item_sk#140 = cs_item_sk#18) AND (cr_order_number#154L = cs_order_number#20L))\n               :- Project [cs_item_sk#18, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120]\n               :  +- Join LeftOuter, (cs_promo_sk#19 = p_promo_sk#120)\n               :     :- Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96]\n               :     :  +- Join Inner, (i_item_sk#56 = cs_item_sk#18)\n               :     :     :- Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, d_week_seq#96]\n               :     :     :  +- Join Inner, ((((inv_quantity_on_hand#40 < cs_quantity#21) AND (cs_item_sk#18 = inv_item_sk#38)) AND (cs_sold_date_sk#37 = d_date_sk#92)) AND (d_date#276 > date_add(d_date#94, 5)))\n               :     :     :     :- LogicalQueryStage Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276], ShuffleQueryStage 9\n               :     :     :     +- LogicalQueryStage Project [inv_item_sk#38, inv_quantity_on_hand#40, w_warehouse_name#44, d_date_sk#92, d_date#94, d_week_seq#96], ShuffleQueryStage 10\n               :     :     +- LogicalQueryStage Project [i_item_sk#56, i_item_desc#60], ShuffleQueryStage 6\n               :     +- LogicalQueryStage Project [p_promo_sk#120], BroadcastQueryStage 7\n               +- LogicalQueryStage Project [cr_item_sk#140, cr_order_number#154L], ShuffleQueryStage 8\n"
      },
      "IM" : {
        "inputSizeInBytes" : 39122477296,
        "inputRowCount" : 549921089
      },
      "PD" : {
        "2" : [ 654178, 650486, 646620, 652932, 645360, 641610, 650818, 640693, 649460, 649634, 648398, 643291, 647753, 637714, 650495, 650278, 637498, 644304, 637101, 650601, 640426, 651499, 645889, 652834, 646948, 636850, 644594, 649723, 640949, 652307, 640393, 647922, 643054, 646489, 639538, 649268, 645654, 634854, 651067, 648030, 645578, 645093, 657157, 646809, 648319, 646075, 637205, 651330, 643648, 645177, 642746, 648751, 644981, 648013, 655359, 646055, 640170, 641189, 639522, 645078, 645630, 646847, 649515, 646149, 648072, 642337, 643088, 649593, 651844, 639639, 648228, 640618, 644769, 646345, 649972, 648205, 644979, 651757, 649967, 643440, 647534, 648746, 650429, 650891, 645429, 640288, 647313, 649385, 649006, 643173, 646487, 655414, 645253, 648638, 649942, 647005, 640030, 650357, 650468, 642218, 647606, 647125, 644483, 647012, 643700, 639588, 640391, 645345, 642513, 643911, 640668, 640718, 645234, 650266, 640132, 650412, 640690, 643709, 640121, 648931, 645452, 651030, 646231, 650877, 646071, 649126, 648915, 642978, 645893, 644418, 644688, 643187, 643342, 641615, 643609, 645740, 644717, 643628, 639635, 655357, 643557, 646513, 647424, 644212, 648841, 646819, 643664, 651208, 646861, 646697, 643374, 643094, 640001, 639093, 644725, 643069, 643927, 643615, 656245, 649605, 647256, 652656, 645016, 641054, 645992, 647908, 649534, 648750, 640270, 646632, 648311, 643557, 647402, 644426, 650469, 641850, 642039, 647078, 647655, 644419, 644274, 642454, 641271, 644268, 646681, 641873, 647951, 646710, 645895, 642228, 645030, 640906, 649081, 641591, 654357, 650741, 647276, 644911, 649036, 654199 ],
        "1" : [ 869733, 872352, 872523, 871425, 879575, 868699, 871770, 876110, 871061, 872488, 870939, 878388, 873867, 870326, 876242, 881379, 871819, 873267, 872915, 873515, 878776, 878535, 864494, 878370, 864051, 872669, 871821, 867560, 870022, 868050, 870182, 873418, 875889, 868884, 868031, 873312, 878796, 871548, 875267, 865325, 881690, 873362, 872116, 865033, 877887, 868969, 872052, 876543, 873779, 873750, 871472, 877694, 869031, 878273, 877713, 883851, 872448, 871438, 870692, 870343, 865735, 875230, 874006, 873339, 869294, 875428, 873270, 876866, 874152, 876993, 870926, 868629, 874861, 875554, 866224, 871047, 880913, 880063, 876407, 879255, 866541, 872294, 868281, 865933, 870114, 870135, 877524, 877971, 870596, 871049, 870057, 866978, 871210, 868107, 869688, 875431, 870061, 868573, 877720, 866982, 869690, 874123, 873250, 878881, 874801, 875705, 876569, 871705, 876799, 868380, 869872, 872376, 871013, 880001, 873315, 874392, 877754, 875735, 878253, 872996, 868309, 879540, 874157, 877577, 879179, 868696, 876276, 871298, 869333, 867917, 878970, 874641, 867519, 872035, 880456, 864445, 864205, 865400, 872894, 867628, 873138, 869804, 867063, 870335, 870645, 871198, 870294, 869534, 871569, 868726, 871965, 874207, 876020, 874678, 870509, 871208, 869284, 877122, 873641, 873423, 866238, 865704, 867280, 865074, 877670, 877361, 874542, 874648, 875843, 873115, 873698, 874207, 872229, 875618, 876602, 876637, 872269, 865260, 870725, 869498, 879674, 873699, 868540, 872195, 866180, 873610, 876886, 878349, 881525, 876123, 880515, 870708, 870010, 876456, 863139, 876243, 874623, 872242, 875261, 864785 ],
        "3" : [ 34952062, 34952062, 34827322, 34889692, 34636815, 34574445, 34952062, 34818366, 34636815, 34827322, 34889692, 34952062, 34952062, 34503119, 34889692, 34827322, 34755996, 34636815, 34952062, 34952062, 34818366, 34952062, 34952062, 34889692, 34952062, 34952062, 34818366, 34755996, 34631256, 34952062, 34636815, 34952062, 34952062, 34952062, 34952062, 34889692, 34574445, 34952062, 34889692, 34889692, 34574445, 34889692, 34952062, 34952062, 34952062, 34952062, 34889692, 34889692, 34952062, 34952062, 34889692, 34636815, 34636815, 34636815, 34827322, 34952062, 34952062, 34889692, 34889692, 34503119, 34952062, 34818366, 34827322, 34764952, 34952062, 34889692, 34889692, 34827322, 34574445, 34889692, 34827322, 34952062, 34952062, 34952062, 34889692, 34440749, 34889692, 34818366, 34512075, 34834980, 34952062, 34889692, 34952062, 34574445, 34755996, 34631256, 34889692, 34952062, 34952062, 34952062, 34636815, 34889692, 34952062, 34755996, 34952062, 34827322, 34827322, 34755996, 34889692, 34636815, 34889692, 34952062, 34889692, 34574445, 34764952, 34889692, 34818366, 34952062, 34574445, 34889692, 34889692, 34889692, 34889692, 34818366, 34952062, 34889692, 34755996, 34889692, 34952062, 34952062, 34889692, 34889692, 34818366, 34952062, 34952062, 34952062, 34952062, 34636815, 35147806, 34952062, 34952062, 34952062, 34952062, 34574445, 34636815, 34889692, 34889692, 34952062, 34952062, 34952062, 34321568, 34574445, 34889692, 34818366, 34889692, 34889692, 34952062, 34889692, 34818366, 34952062, 34755996, 34889692, 34952062, 34636815, 34889692, 34952062, 34952062, 34574445, 34952062, 34827322, 34952062, 34889692, 34889692, 34952062, 34636815, 34952062, 34889692, 34818366, 34889692, 34952062, 34952062, 34827322, 34818366, 34889692, 34952062, 34889692, 35147806, 34636815, 34952062, 34952062, 34827322, 34952062, 34818366, 34889692, 34952062, 34889692, 34952062, 35147806, 34952062, 35147806, 34952062, 34952062, 34818366, 34952062, 34636815, 34952062, 34889692, 34952062, 34321568, 34818366 ],
        "0" : [ 84280, 84280, 84280, 92709, 92709, 84280, 92709, 84280, 76619, 92709, 92709, 84280, 92709, 84280, 84280, 84280, 84280, 84280, 92709, 92709, 92709, 92709, 84280, 84280, 92709, 84280, 84280, 92709, 84280, 92709, 92709, 92709, 92709, 84280, 84280, 92709, 84280, 84280, 84280, 92709, 84280, 84280, 84280, 92709, 92709, 84280, 84280, 84280, 84280, 84280, 92709, 92709, 84280, 84280, 84280, 92709, 92709, 92709, 84280, 84280, 84280, 92709, 84280, 92709, 84280, 92709, 92709, 84280, 92709, 92709, 92709, 84280, 92709, 92709, 84280, 92709, 84280, 92709, 84280, 84280, 92709, 84280, 92709, 84280, 92709, 84280, 84280, 92709, 92709, 84280, 84280, 84280, 92709, 84280, 92709, 92709, 84280, 92709, 92709, 84280, 84280, 92709, 84280, 92709, 92709, 84280, 84280, 92709, 84280, 92709, 84280, 92709, 84280, 92709, 92709, 92709, 76619, 92709, 84280, 84280, 84280, 92709, 92709, 92709, 92709, 92709, 84280, 84280, 92709, 84280, 84280, 84280, 84280, 92709, 84280, 84280, 92709, 92709, 92709, 84280, 84280, 84280, 92709, 92709, 92709, 84280, 84280, 84280, 92709, 84280, 92709, 84280, 92709, 84280, 84280, 92709, 84280, 92709, 84280, 84280, 84280, 92709, 92709, 92709, 84280, 92709, 84280, 84280, 92709, 84280, 84280, 92709, 84280, 84280, 92709, 84280, 84280, 84280, 84280, 84280, 84280, 84280, 92709, 84280, 92709, 92709, 84280, 84280, 84280, 84280, 92709, 84280, 84280, 84280, 84280, 84280, 84280, 84280, 92709, 92709 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227343592,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 57641,
        "IOBytes" : {
          "Total" : 7210264979,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 7077265740,
            "SW" : 132999239
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 392999575,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1056576,
            "rowCount" : 1000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_promo_sk#120], BroadcastQueryStage 7 "
          },
          "8" : {
            "sign" : -755627975,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9001735008000,
            "rowCount" : 132378456000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96] "
          },
          "4" : {
            "sign" : 1628108944,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 106733840982878592000000,
            "rowCount" : 1905961446122832000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120] "
          },
          "11" : {
            "sign" : -555763869,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 26102424,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#56, i_item_desc#60], ShuffleQueryStage 6 "
          },
          "9" : {
            "sign" : 1745752950,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 9531248832000,
            "rowCount" : 132378456000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#56 = cs_item_sk#18) "
          },
          "13" : {
            "sign" : -751614694,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 345547728,
            "rowCount" : 14397822,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cr_item_sk#140, cr_order_number#154L], ShuffleQueryStage 8 "
          },
          "5" : {
            "sign" : 2065499465,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 152476915689826560000000,
            "rowCount" : 1905961446122832000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, ((cr_item_sk#140 = cs_item_sk#18) AND (cr_order_number#154L = cs_order_number#20L)) "
          },
          "10" : {
            "sign" : 829347355,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 41875280,
            "rowCount" : 648914,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, d_week_seq#96], ShuffleQueryStage 11 "
          },
          "6" : {
            "sign" : -513166746,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9001735008000000,
            "rowCount" : 132378456000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#18, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120] "
          },
          "1" : {
            "sign" : -1864401710,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 144853069905335232000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 2139041599,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 7600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1860947755,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 144853069905335232000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [total_cnt#244L DESC NULLS LAST, i_item_desc#60 ASC NULLS FIRST, w_warehouse_name#44 ASC NULLS FIRST, d_week_seq#96 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 263823136,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 9531248832000000,
            "rowCount" : 132378456000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (cs_promo_sk#19 = p_promo_sk#120) "
          },
          "3" : {
            "sign" : -350875675,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 144853069905335232000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_desc#60, w_warehouse_name#44, d_week_seq#96], [i_item_desc#60, w_warehouse_name#44, d_week_seq#96, sum(CASE WHEN isnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS no_promo#242L, sum(CASE WHEN isnotnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS promo#243L, count(1) AS total_cnt#244L] "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [total_cnt#244L DESC NULLS LAST, i_item_desc#60 ASC NULLS FIRST, w_warehouse_name#44 ASC NULLS FIRST, d_week_seq#96 ASC NULLS FIRST], true\n      +- Aggregate [i_item_desc#60, w_warehouse_name#44, d_week_seq#96], [i_item_desc#60, w_warehouse_name#44, d_week_seq#96, sum(CASE WHEN isnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS no_promo#242L, sum(CASE WHEN isnotnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS promo#243L, count(1) AS total_cnt#244L]\n         +- Project [w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120]\n            +- Join LeftOuter, ((cr_item_sk#140 = cs_item_sk#18) AND (cr_order_number#154L = cs_order_number#20L))\n               :- Project [cs_item_sk#18, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120]\n               :  +- Join LeftOuter, (cs_promo_sk#19 = p_promo_sk#120)\n               :     :- Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96]\n               :     :  +- Join Inner, (i_item_sk#56 = cs_item_sk#18)\n               :     :     :- LogicalQueryStage Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, d_week_seq#96], ShuffleQueryStage 11\n               :     :     +- LogicalQueryStage Project [i_item_sk#56, i_item_desc#60], ShuffleQueryStage 6\n               :     +- LogicalQueryStage Project [p_promo_sk#120], BroadcastQueryStage 7\n               +- LogicalQueryStage Project [cr_item_sk#140, cr_order_number#154L], ShuffleQueryStage 8\n"
      },
      "IM" : {
        "inputSizeInBytes" : 414582008,
        "inputRowCount" : 15251736
      },
      "PD" : {
        "4" : [ 124070, 121248, 114804, 126740, 120694, 113051, 123522, 108110, 116239, 126588, 117116, 114658, 127708, 117049, 124542, 119649, 119826, 122896, 131498, 128624, 123113, 124524, 118199, 119099, 120147, 119510, 121629, 122753, 123174, 117250, 130153, 122339, 123536, 115229, 119825, 122146, 112400, 109740, 111197, 127234, 117765, 117154, 116663, 128700, 118735, 121047, 120968, 118690, 113969, 125218, 125385, 125041, 119952, 126111, 119962, 123866, 121995, 123904, 116894, 119901, 114606, 118776, 115424, 126515, 122607, 116541, 125862, 121865, 119513, 118474, 122349, 122152, 124814, 117156, 121007, 119115, 114770, 119024, 119394, 118349, 117025, 114172, 126994, 119560, 123408, 119505, 114043, 125287, 127813, 116569, 129555, 112293, 123462, 114281, 122169, 117284, 116498, 119814, 125976, 117075, 119967, 119809, 119497, 124162, 120210, 120751, 121344, 126385, 118742, 120709, 122471, 121186, 116200, 127716, 111383, 120391, 116233, 118868, 113665, 125715, 124198, 116896, 132756, 118182, 120752, 115977, 126081, 107675, 115396, 115896, 116888, 116907, 121717, 117384, 120320, 118117, 117924, 121478, 121192, 118272, 121185, 118828, 122989, 124412, 119214, 120568, 113564, 123438, 124365, 126364, 123082, 112671, 121903, 117975, 120610, 131524, 123271, 127865, 119545, 118663, 114713, 121061, 118788, 116970, 122469, 121053, 125470, 115024, 121220, 117621, 114541, 125354, 120771, 120995, 120840, 116620, 109052, 115572, 117869, 120425, 122616, 123469, 116753, 118397, 132437, 128011, 117075, 122754, 116939, 116349, 117287, 120041, 122171, 116826, 118624, 115754, 122513, 121570, 129799, 126528 ],
        "1" : [ 869733, 872352, 872523, 871425, 879575, 868699, 871770, 876110, 871061, 872488, 870939, 878388, 873867, 870326, 876242, 881379, 871819, 873267, 872915, 873515, 878776, 878535, 864494, 878370, 864051, 872669, 871821, 867560, 870022, 868050, 870182, 873418, 875889, 868884, 868031, 873312, 878796, 871548, 875267, 865325, 881690, 873362, 872116, 865033, 877887, 868969, 872052, 876543, 873779, 873750, 871472, 877694, 869031, 878273, 877713, 883851, 872448, 871438, 870692, 870343, 865735, 875230, 874006, 873339, 869294, 875428, 873270, 876866, 874152, 876993, 870926, 868629, 874861, 875554, 866224, 871047, 880913, 880063, 876407, 879255, 866541, 872294, 868281, 865933, 870114, 870135, 877524, 877971, 870596, 871049, 870057, 866978, 871210, 868107, 869688, 875431, 870061, 868573, 877720, 866982, 869690, 874123, 873250, 878881, 874801, 875705, 876569, 871705, 876799, 868380, 869872, 872376, 871013, 880001, 873315, 874392, 877754, 875735, 878253, 872996, 868309, 879540, 874157, 877577, 879179, 868696, 876276, 871298, 869333, 867917, 878970, 874641, 867519, 872035, 880456, 864445, 864205, 865400, 872894, 867628, 873138, 869804, 867063, 870335, 870645, 871198, 870294, 869534, 871569, 868726, 871965, 874207, 876020, 874678, 870509, 871208, 869284, 877122, 873641, 873423, 866238, 865704, 867280, 865074, 877670, 877361, 874542, 874648, 875843, 873115, 873698, 874207, 872229, 875618, 876602, 876637, 872269, 865260, 870725, 869498, 879674, 873699, 868540, 872195, 866180, 873610, 876886, 878349, 881525, 876123, 880515, 870708, 870010, 876456, 863139, 876243, 874623, 872242, 875261, 864785 ],
        "0" : [ 84280, 84280, 84280, 92709, 92709, 84280, 92709, 84280, 76619, 92709, 92709, 84280, 92709, 84280, 84280, 84280, 84280, 84280, 92709, 92709, 92709, 92709, 84280, 84280, 92709, 84280, 84280, 92709, 84280, 92709, 92709, 92709, 92709, 84280, 84280, 92709, 84280, 84280, 84280, 92709, 84280, 84280, 84280, 92709, 92709, 84280, 84280, 84280, 84280, 84280, 92709, 92709, 84280, 84280, 84280, 92709, 92709, 92709, 84280, 84280, 84280, 92709, 84280, 92709, 84280, 92709, 92709, 84280, 92709, 92709, 92709, 84280, 92709, 92709, 84280, 92709, 84280, 92709, 84280, 84280, 92709, 84280, 92709, 84280, 92709, 84280, 84280, 92709, 92709, 84280, 84280, 84280, 92709, 84280, 92709, 92709, 84280, 92709, 92709, 84280, 84280, 92709, 84280, 92709, 92709, 84280, 84280, 92709, 84280, 92709, 84280, 92709, 84280, 92709, 92709, 92709, 76619, 92709, 84280, 84280, 84280, 92709, 92709, 92709, 92709, 92709, 84280, 84280, 92709, 84280, 84280, 84280, 84280, 92709, 84280, 84280, 92709, 92709, 92709, 84280, 84280, 84280, 92709, 92709, 92709, 84280, 84280, 84280, 92709, 84280, 92709, 84280, 92709, 84280, 84280, 92709, 84280, 92709, 84280, 84280, 84280, 92709, 92709, 92709, 84280, 92709, 84280, 84280, 92709, 84280, 84280, 92709, 84280, 84280, 92709, 84280, 84280, 84280, 84280, 84280, 84280, 84280, 92709, 84280, 92709, 92709, 84280, 84280, 84280, 84280, 92709, 84280, 84280, 84280, 84280, 84280, 84280, 84280, 92709, 92709 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227390636,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 10597,
        "IOBytes" : {
          "Total" : 426134967,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 316099041,
            "SW" : 110035926
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : 1892326517,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 523205102857248,
            "rowCount" : 9342948265308,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120] "
          },
          "5" : {
            "sign" : 2116972536,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 747435861224640,
            "rowCount" : 9342948265308,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, ((cr_item_sk#140 = cs_item_sk#18) AND (cr_order_number#154L = cs_order_number#20L)) "
          },
          "6" : {
            "sign" : -1692637585,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 114407440,
            "rowCount" : 648914,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_item_sk#18, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120], ShuffleQueryStage 12 "
          },
          "1" : {
            "sign" : -1965377969,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 710064068163408,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -1238483930,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 7600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -915708848,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 710064068163408,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [total_cnt#244L DESC NULLS LAST, i_item_desc#60 ASC NULLS FIRST, w_warehouse_name#44 ASC NULLS FIRST, d_week_seq#96 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -751614694,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 345547728,
            "rowCount" : 14397822,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cr_item_sk#140, cr_order_number#154L], ShuffleQueryStage 8 "
          },
          "3" : {
            "sign" : -438395428,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 710064068163408,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_desc#60, w_warehouse_name#44, d_week_seq#96], [i_item_desc#60, w_warehouse_name#44, d_week_seq#96, sum(CASE WHEN isnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS no_promo#242L, sum(CASE WHEN isnotnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS promo#243L, count(1) AS total_cnt#244L] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [total_cnt#244L DESC NULLS LAST, i_item_desc#60 ASC NULLS FIRST, w_warehouse_name#44 ASC NULLS FIRST, d_week_seq#96 ASC NULLS FIRST], true\n      +- Aggregate [i_item_desc#60, w_warehouse_name#44, d_week_seq#96], [i_item_desc#60, w_warehouse_name#44, d_week_seq#96, sum(CASE WHEN isnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS no_promo#242L, sum(CASE WHEN isnotnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS promo#243L, count(1) AS total_cnt#244L]\n         +- Project [w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120]\n            +- Join LeftOuter, ((cr_item_sk#140 = cs_item_sk#18) AND (cr_order_number#154L = cs_order_number#20L))\n               :- LogicalQueryStage Project [cs_item_sk#18, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120], ShuffleQueryStage 12\n               +- LogicalQueryStage Project [cr_item_sk#140, cr_order_number#154L], ShuffleQueryStage 8\n"
      },
      "IM" : {
        "inputSizeInBytes" : 459955168,
        "inputRowCount" : 15046736
      },
      "PD" : {
        "5" : [ 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 240463, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 240463, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 240463, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 240463, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 240463, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 240463, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509 ],
        "1" : [ 869733, 872352, 872523, 871425, 879575, 868699, 871770, 876110, 871061, 872488, 870939, 878388, 873867, 870326, 876242, 881379, 871819, 873267, 872915, 873515, 878776, 878535, 864494, 878370, 864051, 872669, 871821, 867560, 870022, 868050, 870182, 873418, 875889, 868884, 868031, 873312, 878796, 871548, 875267, 865325, 881690, 873362, 872116, 865033, 877887, 868969, 872052, 876543, 873779, 873750, 871472, 877694, 869031, 878273, 877713, 883851, 872448, 871438, 870692, 870343, 865735, 875230, 874006, 873339, 869294, 875428, 873270, 876866, 874152, 876993, 870926, 868629, 874861, 875554, 866224, 871047, 880913, 880063, 876407, 879255, 866541, 872294, 868281, 865933, 870114, 870135, 877524, 877971, 870596, 871049, 870057, 866978, 871210, 868107, 869688, 875431, 870061, 868573, 877720, 866982, 869690, 874123, 873250, 878881, 874801, 875705, 876569, 871705, 876799, 868380, 869872, 872376, 871013, 880001, 873315, 874392, 877754, 875735, 878253, 872996, 868309, 879540, 874157, 877577, 879179, 868696, 876276, 871298, 869333, 867917, 878970, 874641, 867519, 872035, 880456, 864445, 864205, 865400, 872894, 867628, 873138, 869804, 867063, 870335, 870645, 871198, 870294, 869534, 871569, 868726, 871965, 874207, 876020, 874678, 870509, 871208, 869284, 877122, 873641, 873423, 866238, 865704, 867280, 865074, 877670, 877361, 874542, 874648, 875843, 873115, 873698, 874207, 872229, 875618, 876602, 876637, 872269, 865260, 870725, 869498, 879674, 873699, 868540, 872195, 866180, 873610, 876886, 878349, 881525, 876123, 880515, 870708, 870010, 876456, 863139, 876243, 874623, 872242, 875261, 864785 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227393676,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 7557,
        "IOBytes" : {
          "Total" : 335916684,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 276377071,
            "SW" : 59539613
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "45" : {
            "sign" : -1032223007,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 665105855668008,
            "rowCount" : 27712743986167,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_item_sk#38, inv_warehouse_sk#39, inv_quantity_on_hand#40, d_week_seq#250] "
          },
          "34" : {
            "sign" : -1760684413,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3810,
            "rowCount" : 15,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [w_warehouse_sk#42, w_warehouse_id#43, w_warehouse_name#44, w_warehouse_sq_ft#45, w_street_number#46, w_street_name#47, w_street_type#48, w_suite_number#49, w_city#50, w_county#51, w_state#52, w_zip#53, w_country#54, w_gmt_offset#55], `spark_catalog`.`tpcds_100`.`warehouse`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "12" : {
            "sign" : 1162202968,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 170237781782295058944000,
            "rowCount" : 4728827271730418304000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276] "
          },
          "51" : {
            "sign" : 392999575,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1056576,
            "rowCount" : 1000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_promo_sk#120], BroadcastQueryStage 7 "
          },
          "8" : {
            "sign" : 457928107,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3909230676122352000,
            "rowCount" : 57488686413564000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96] "
          },
          "19" : {
            "sign" : -1021307787,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29208491104,
            "rowCount" : 140425438,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((((isnotnull(cs_quantity#21) AND isnotnull(cs_item_sk#18)) AND isnotnull(cs_bill_cdemo_sk#7)) AND isnotnull(cs_bill_hdemo_sk#8)) AND isnotnull(cs_sold_date_sk#37)) AND isnotnull(cs_ship_date_sk#5)) AND dynamicpruning#312 [cs_sold_date_sk#37]) "
          },
          "23" : {
            "sign" : 1157017916,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 20397545676,
            "rowCount" : 443424906,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_item_sk#38, inv_quantity_on_hand#40, d_week_seq#250, w_warehouse_name#44] "
          },
          "4" : {
            "sign" : 605357118,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3219366439159584000000,
            "rowCount" : 57488686413564000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120] "
          },
          "40" : {
            "sign" : -1565019817,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 32143552,
            "rowCount" : 384160,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cd_demo_sk#78], BroadcastQueryStage 2 "
          },
          "15" : {
            "sign" : -30813488,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 590857218458611200,
            "rowCount" : 12309525384554400,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_ship_date_sk#5 = d_date_sk#274) "
          },
          "11" : {
            "sign" : 1264681322,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 21417353761916,
            "rowCount" : 281807286341,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((((inv_quantity_on_hand#40 < cs_quantity#21) AND (cs_item_sk#18 = inv_item_sk#38)) AND (cs_sold_date_sk#37 = d_date_sk#92)) AND (d_date#276 > date_add(d_date#94, 5))) "
          },
          "9" : {
            "sign" : -1144099232,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4139185421776608000,
            "rowCount" : 57488686413564000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#56 = cs_item_sk#18) "
          },
          "44" : {
            "sign" : -146841954,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 19953175670040240,
            "rowCount" : 415691159792505,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (w_warehouse_sk#42 = inv_warehouse_sk#39) "
          },
          "33" : {
            "sign" : 286634251,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3810,
            "rowCount" : 15,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(w_warehouse_sk#42) "
          },
          "22" : {
            "sign" : -1455753177,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 30962488,
            "rowCount" : 533836,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_week_seq#96 = d_week_seq#250) "
          },
          "26" : {
            "sign" : 1208309761,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 12504999808,
            "rowCount" : 390781244,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_date_sk#41 = d_date_sk#246) "
          },
          "50" : {
            "sign" : -555763869,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 26102424,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#56, i_item_desc#60], ShuffleQueryStage 6 "
          },
          "37" : {
            "sign" : -1106989248,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#92, d_date_id#93, d_date#94, d_month_seq#95, d_week_seq#96, d_quarter_seq#97, d_year#98, d_dow#99, d_moy#100, d_dom#101, d_qoy#102, d_fy_year#103, d_fy_quarter_seq#104, d_fy_week_seq#105, d_day_name#106, d_quarter_name#107, d_holiday#108, d_weekend#109, d_following_holiday#110, d_first_dom#111, d_last_dom#112, d_same_day_ly#113, d_same_day_lq#114, d_current_day#115, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "13" : {
            "sign" : -810340919,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 208068399956138405376000,
            "rowCount" : 4728827271730418304000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_bill_cdemo_sk#7 = cd_demo_sk#78) "
          },
          "46" : {
            "sign" : -416211700,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 886807807557344,
            "rowCount" : 27712743986167,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_date_sk#41 = d_date_sk#246) "
          },
          "24" : {
            "sign" : 1236194322,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 23944944924,
            "rowCount" : 443424906,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (w_warehouse_sk#42 = inv_warehouse_sk#39) "
          },
          "35" : {
            "sign" : 1080210064,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11520,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#92, d_date#94, d_week_seq#96] "
          },
          "16" : {
            "sign" : 1655517881,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6740421024000,
            "rowCount" : 168510525600,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ship_date_sk#5, cs_bill_cdemo_sk#7, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37] "
          },
          "5" : {
            "sign" : 558694907,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4599094913085120000000,
            "rowCount" : 57488686413564000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, ((cr_item_sk#140 = cs_item_sk#18) AND (cr_order_number#154L = cs_order_number#20L)) "
          },
          "10" : {
            "sign" : 1479726127,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 13526749744368,
            "rowCount" : 281807286341,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, d_week_seq#96] "
          },
          "48" : {
            "sign" : -1076342462,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048696,
            "rowCount" : 15,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [w_warehouse_sk#42, w_warehouse_name#44], BroadcastQueryStage 4 "
          },
          "21" : {
            "sign" : 1825441690,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 28827144,
            "rowCount" : 533836,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_item_sk#38, inv_quantity_on_hand#40, w_warehouse_name#44, d_date_sk#92, d_date#94, d_week_seq#96] "
          },
          "43" : {
            "sign" : -1467010230,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 16627646391700200,
            "rowCount" : 415691159792505,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_item_sk#38, inv_quantity_on_hand#40, d_week_seq#250, w_warehouse_name#44] "
          },
          "32" : {
            "sign" : 636141117,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 570,
            "rowCount" : 15,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [w_warehouse_sk#42, w_warehouse_name#44] "
          },
          "49" : {
            "sign" : -1197927662,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049000,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#92, d_date#94, d_week_seq#96], BroadcastQueryStage 5 "
          },
          "6" : {
            "sign" : 1480046838,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3909230676122352000000,
            "rowCount" : 57488686413564000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#18, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120] "
          },
          "36" : {
            "sign" : -909628679,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 141696,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_year#98) AND (d_year#98 = 2001)) AND isnotnull(d_date_sk#92)) AND (isnotnull(d_week_seq#96) AND isnotnull(d_date#94))) "
          },
          "1" : {
            "sign" : 1611917970,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 4369140167430864000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "39" : {
            "sign" : 1506376545,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 4778696,
            "rowCount" : 73049,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#274, d_date#276], BroadcastQueryStage 1 "
          },
          "17" : {
            "sign" : 1864733852,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 8088505228800,
            "rowCount" : 168510525600,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_bill_hdemo_sk#8 = hd_demo_sk#87) "
          },
          "25" : {
            "sign" : 207833722,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9378749856,
            "rowCount" : 390781244,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_item_sk#38, inv_warehouse_sk#39, inv_quantity_on_hand#40, d_week_seq#250] "
          },
          "14" : {
            "sign" : 1097149525,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 492381015382176000,
            "rowCount" : 12309525384554400,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_bill_cdemo_sk#7, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276] "
          },
          "47" : {
            "sign" : -240996296,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 4778696,
            "rowCount" : 73049,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#246, d_week_seq#250], BroadcastQueryStage 3 "
          },
          "31" : {
            "sign" : 418201062,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#246, d_date_id#247, d_date#248, d_month_seq#249, d_week_seq#250, d_quarter_seq#251, d_year#252, d_dow#253, d_moy#254, d_dom#255, d_qoy#256, d_fy_year#257, d_fy_quarter_seq#258, d_fy_week_seq#259, d_day_name#260, d_quarter_name#261, d_holiday#262, d_weekend#263, d_following_holiday#264, d_first_dom#265, d_last_dom#266, d_same_day_ly#267, d_same_day_lq#268, d_current_day#269, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "42" : {
            "sign" : -1665386653,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 7889818212861744900,
            "rowCount" : 151727273324264325,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_week_seq#96 = d_week_seq#250) "
          },
          "0" : {
            "sign" : -1637207315,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 7600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -2121399422,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#4, cs_ship_date_sk#5, cs_bill_customer_sk#6, cs_bill_cdemo_sk#7, cs_bill_hdemo_sk#8, cs_bill_addr_sk#9, cs_ship_customer_sk#10, cs_ship_cdemo_sk#11, cs_ship_hdemo_sk#12, cs_ship_addr_sk#13, cs_call_center_sk#14, cs_catalog_page_sk#15, cs_ship_mode_sk#16, cs_warehouse_sk#17, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_wholesale_cost#22, cs_list_price#23, cs_sales_price#24, cs_ext_discount_amt#25, cs_ext_sales_price#26, cs_ext_wholesale_cost#27, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "27" : {
            "sign" : 1335160095,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 9104927592,
            "rowCount" : 379371983,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(inv_quantity_on_hand#40) AND isnotnull(inv_item_sk#38)) AND isnotnull(inv_warehouse_sk#39)) AND isnotnull(inv_date_sk#41)) "
          },
          "2" : {
            "sign" : 346042755,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 4369140167430864000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [total_cnt#244L DESC NULLS LAST, i_item_desc#60 ASC NULLS FIRST, w_warehouse_name#44 ASC NULLS FIRST, d_week_seq#96 ASC NULLS FIRST], true "
          },
          "38" : {
            "sign" : -1060340266,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1105376,
            "rowCount" : 1200,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [hd_demo_sk#87], BroadcastQueryStage 0 "
          },
          "18" : {
            "sign" : -1095379746,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6178719272,
            "rowCount" : 140425438,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ship_date_sk#5, cs_bill_cdemo_sk#7, cs_bill_hdemo_sk#8, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37] "
          },
          "30" : {
            "sign" : 1257810160,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(d_week_seq#250) AND isnotnull(d_date_sk#246)) "
          },
          "7" : {
            "sign" : -1053229306,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4139185421776608000000,
            "rowCount" : 57488686413564000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (cs_promo_sk#19 = p_promo_sk#120) "
          },
          "29" : {
            "sign" : 281420113,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1168784,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#246, d_week_seq#250] "
          },
          "41" : {
            "sign" : -841627234,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 7282909119564687600,
            "rowCount" : 151727273324264325,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_item_sk#38, inv_quantity_on_hand#40, w_warehouse_name#44, d_date_sk#92, d_date#94, d_week_seq#96] "
          },
          "3" : {
            "sign" : -687931681,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 4369140167430864000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_desc#60, w_warehouse_name#44, d_week_seq#96], [i_item_desc#60, w_warehouse_name#44, d_week_seq#96, sum(CASE WHEN isnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS no_promo#242L, sum(CASE WHEN isnotnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS promo#243L, count(1) AS total_cnt#244L] "
          },
          "52" : {
            "sign" : -751614694,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 287956440,
            "rowCount" : 14397822,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cr_item_sk#140, cr_order_number#154L], ShuffleQueryStage 8 "
          },
          "28" : {
            "sign" : 683407923,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 9583920000,
            "rowCount" : 399330000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [inv_item_sk#38, inv_warehouse_sk#39, inv_quantity_on_hand#40, inv_date_sk#41], `spark_catalog`.`tpcds_100`.`inventory`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 20,
          "fromName" : "LogicalRelation",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalRelation",
          "toId" : 27,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Filter",
          "toId" : 26,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "LogicalRelation",
          "toId" : 30,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Filter",
          "toId" : 29,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Project",
          "toId" : 26,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Join",
          "toId" : 25,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Project",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "LogicalRelation",
          "toId" : 33,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "Filter",
          "toId" : 32,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "Project",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Join",
          "toId" : 23,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Project",
          "toId" : 22,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "LogicalRelation",
          "toId" : 36,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "Filter",
          "toId" : 35,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "Project",
          "toId" : 22,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Join",
          "toId" : 21,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Project",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 19,
          "fromName" : "Filter",
          "toId" : 18,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Project",
          "toId" : 17,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "LogicalQueryStage",
          "toId" : 17,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Join",
          "toId" : 16,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Filter",
          "toId" : 46,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 47,
          "fromName" : "LogicalQueryStage",
          "toId" : 46,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 46,
          "fromName" : "Join",
          "toId" : 45,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 45,
          "fromName" : "Project",
          "toId" : 44,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 48,
          "fromName" : "LogicalQueryStage",
          "toId" : 44,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 44,
          "fromName" : "Join",
          "toId" : 43,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 43,
          "fromName" : "Project",
          "toId" : 42,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 49,
          "fromName" : "LogicalQueryStage",
          "toId" : 42,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 42,
          "fromName" : "Join",
          "toId" : 41,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 41,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 50,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 51,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 52,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [total_cnt#244L DESC NULLS LAST, i_item_desc#60 ASC NULLS FIRST, w_warehouse_name#44 ASC NULLS FIRST, d_week_seq#96 ASC NULLS FIRST], true\n      +- Aggregate [i_item_desc#60, w_warehouse_name#44, d_week_seq#96], [i_item_desc#60, w_warehouse_name#44, d_week_seq#96, sum(CASE WHEN isnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS no_promo#242L, sum(CASE WHEN isnotnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS promo#243L, count(1) AS total_cnt#244L]\n         +- Project [w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120]\n            +- Join LeftOuter, ((cr_item_sk#140 = cs_item_sk#18) AND (cr_order_number#154L = cs_order_number#20L))\n               :- Project [cs_item_sk#18, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120]\n               :  +- Join LeftOuter, (cs_promo_sk#19 = p_promo_sk#120)\n               :     :- Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96]\n               :     :  +- Join Inner, (i_item_sk#56 = cs_item_sk#18)\n               :     :     :- Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, d_week_seq#96]\n               :     :     :  +- Join Inner, ((((inv_quantity_on_hand#40 < cs_quantity#21) AND (cs_item_sk#18 = inv_item_sk#38)) AND (cs_sold_date_sk#37 = d_date_sk#92)) AND (d_date#276 > date_add(d_date#94, 5)))\n               :     :     :     :- Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276]\n               :     :     :     :  +- Join Inner, (cs_bill_cdemo_sk#7 = cd_demo_sk#78)\n               :     :     :     :     :- Project [cs_bill_cdemo_sk#7, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276]\n               :     :     :     :     :  +- Join Inner, (cs_ship_date_sk#5 = d_date_sk#274)\n               :     :     :     :     :     :- Project [cs_ship_date_sk#5, cs_bill_cdemo_sk#7, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37]\n               :     :     :     :     :     :  +- Join Inner, (cs_bill_hdemo_sk#8 = hd_demo_sk#87)\n               :     :     :     :     :     :     :- Project [cs_ship_date_sk#5, cs_bill_cdemo_sk#7, cs_bill_hdemo_sk#8, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37]\n               :     :     :     :     :     :     :  +- Filter ((((((isnotnull(cs_quantity#21) AND isnotnull(cs_item_sk#18)) AND isnotnull(cs_bill_cdemo_sk#7)) AND isnotnull(cs_bill_hdemo_sk#8)) AND isnotnull(cs_sold_date_sk#37)) AND isnotnull(cs_ship_date_sk#5)) AND dynamicpruning#312 [cs_sold_date_sk#37])\n               :     :     :     :     :     :     :     :  +- Project [inv_item_sk#38, inv_quantity_on_hand#40, w_warehouse_name#44, d_date_sk#92, d_date#94, d_week_seq#96]\n               :     :     :     :     :     :     :     :     +- Join Inner, (d_week_seq#96 = d_week_seq#250)\n               :     :     :     :     :     :     :     :        :- Project [inv_item_sk#38, inv_quantity_on_hand#40, d_week_seq#250, w_warehouse_name#44]\n               :     :     :     :     :     :     :     :        :  +- Join Inner, (w_warehouse_sk#42 = inv_warehouse_sk#39)\n               :     :     :     :     :     :     :     :        :     :- Project [inv_item_sk#38, inv_warehouse_sk#39, inv_quantity_on_hand#40, d_week_seq#250]\n               :     :     :     :     :     :     :     :        :     :  +- Join Inner, (inv_date_sk#41 = d_date_sk#246)\n               :     :     :     :     :     :     :     :        :     :     :- Filter (((isnotnull(inv_quantity_on_hand#40) AND isnotnull(inv_item_sk#38)) AND isnotnull(inv_warehouse_sk#39)) AND isnotnull(inv_date_sk#41))\n               :     :     :     :     :     :     :     :        :     :     :  +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#38,inv_warehouse_sk#39,inv_quantity_on_hand#40,inv_date_sk#41] parquet\n               :     :     :     :     :     :     :     :        :     :     +- Project [d_date_sk#246, d_week_seq#250]\n               :     :     :     :     :     :     :     :        :     :        +- Filter (isnotnull(d_week_seq#250) AND isnotnull(d_date_sk#246))\n               :     :     :     :     :     :     :     :        :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#246,d_date_id#247,d_date#248,d_month_seq#249,d_week_seq#250,d_quarter_seq#251,d_year#252,d_dow#253,d_moy#254,d_dom#255,d_qoy#256,d_fy_year#257,d_fy_quarter_seq#258,d_fy_week_seq#259,d_day_name#260,d_quarter_name#261,d_holiday#262,d_weekend#263,d_following_holiday#264,d_first_dom#265,d_last_dom#266,d_same_day_ly#267,d_same_day_lq#268,d_current_day#269,... 4 more fields] parquet\n               :     :     :     :     :     :     :     :        :     +- Project [w_warehouse_sk#42, w_warehouse_name#44]\n               :     :     :     :     :     :     :     :        :        +- Filter isnotnull(w_warehouse_sk#42)\n               :     :     :     :     :     :     :     :        :           +- Relation spark_catalog.tpcds_100.warehouse[w_warehouse_sk#42,w_warehouse_id#43,w_warehouse_name#44,w_warehouse_sq_ft#45,w_street_number#46,w_street_name#47,w_street_type#48,w_suite_number#49,w_city#50,w_county#51,w_state#52,w_zip#53,w_country#54,w_gmt_offset#55] parquet\n               :     :     :     :     :     :     :     :        +- Project [d_date_sk#92, d_date#94, d_week_seq#96]\n               :     :     :     :     :     :     :     :           +- Filter (((isnotnull(d_year#98) AND (d_year#98 = 2001)) AND isnotnull(d_date_sk#92)) AND (isnotnull(d_week_seq#96) AND isnotnull(d_date#94)))\n               :     :     :     :     :     :     :     :              +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#92,d_date_id#93,d_date#94,d_month_seq#95,d_week_seq#96,d_quarter_seq#97,d_year#98,d_dow#99,d_moy#100,d_dom#101,d_qoy#102,d_fy_year#103,d_fy_quarter_seq#104,d_fy_week_seq#105,d_day_name#106,d_quarter_name#107,d_holiday#108,d_weekend#109,d_following_holiday#110,d_first_dom#111,d_last_dom#112,d_same_day_ly#113,d_same_day_lq#114,d_current_day#115,... 4 more fields] parquet\n               :     :     :     :     :     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#4,cs_ship_date_sk#5,cs_bill_customer_sk#6,cs_bill_cdemo_sk#7,cs_bill_hdemo_sk#8,cs_bill_addr_sk#9,cs_ship_customer_sk#10,cs_ship_cdemo_sk#11,cs_ship_hdemo_sk#12,cs_ship_addr_sk#13,cs_call_center_sk#14,cs_catalog_page_sk#15,cs_ship_mode_sk#16,cs_warehouse_sk#17,cs_item_sk#18,cs_promo_sk#19,cs_order_number#20L,cs_quantity#21,cs_wholesale_cost#22,cs_list_price#23,cs_sales_price#24,cs_ext_discount_amt#25,cs_ext_sales_price#26,cs_ext_wholesale_cost#27,... 10 more fields] parquet\n               :     :     :     :     :     :     +- LogicalQueryStage Project [hd_demo_sk#87], BroadcastQueryStage 0\n               :     :     :     :     :     +- LogicalQueryStage Project [d_date_sk#274, d_date#276], BroadcastQueryStage 1\n               :     :     :     :     +- LogicalQueryStage Project [cd_demo_sk#78], BroadcastQueryStage 2\n               :     :     :     +- Project [inv_item_sk#38, inv_quantity_on_hand#40, w_warehouse_name#44, d_date_sk#92, d_date#94, d_week_seq#96]\n               :     :     :        +- Join Inner, (d_week_seq#96 = d_week_seq#250)\n               :     :     :           :- Project [inv_item_sk#38, inv_quantity_on_hand#40, d_week_seq#250, w_warehouse_name#44]\n               :     :     :           :  +- Join Inner, (w_warehouse_sk#42 = inv_warehouse_sk#39)\n               :     :     :           :     :- Project [inv_item_sk#38, inv_warehouse_sk#39, inv_quantity_on_hand#40, d_week_seq#250]\n               :     :     :           :     :  +- Join Inner, (inv_date_sk#41 = d_date_sk#246)\n               :     :     :           :     :     :- Filter (((isnotnull(inv_quantity_on_hand#40) AND isnotnull(inv_item_sk#38)) AND isnotnull(inv_warehouse_sk#39)) AND isnotnull(inv_date_sk#41))\n               :     :     :           :     :     :  +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#38,inv_warehouse_sk#39,inv_quantity_on_hand#40,inv_date_sk#41] parquet\n               :     :     :           :     :     +- LogicalQueryStage Project [d_date_sk#246, d_week_seq#250], BroadcastQueryStage 3\n               :     :     :           :     +- LogicalQueryStage Project [w_warehouse_sk#42, w_warehouse_name#44], BroadcastQueryStage 4\n               :     :     :           +- LogicalQueryStage Project [d_date_sk#92, d_date#94, d_week_seq#96], BroadcastQueryStage 5\n               :     :     +- LogicalQueryStage Project [i_item_sk#56, i_item_desc#60], ShuffleQueryStage 6\n               :     +- LogicalQueryStage Project [p_promo_sk#120], BroadcastQueryStage 7\n               +- LogicalQueryStage Project [cr_item_sk#140, cr_order_number#154L], ShuffleQueryStage 8\n"
      },
      "IM" : {
        "inputSizeInBytes" : 39744726992,
        "inputRowCount" : 557737677
      },
      "PD" : {
        "0" : [ 84280, 84280, 84280, 92709, 92709, 84280, 92709, 84280, 76619, 92709, 92709, 84280, 92709, 84280, 84280, 84280, 84280, 84280, 92709, 92709, 92709, 92709, 84280, 84280, 92709, 84280, 84280, 92709, 84280, 92709, 92709, 92709, 92709, 84280, 84280, 92709, 84280, 84280, 84280, 92709, 84280, 84280, 84280, 92709, 92709, 84280, 84280, 84280, 84280, 84280, 92709, 92709, 84280, 84280, 84280, 92709, 92709, 92709, 84280, 84280, 84280, 92709, 84280, 92709, 84280, 92709, 92709, 84280, 92709, 92709, 92709, 84280, 92709, 92709, 84280, 92709, 84280, 92709, 84280, 84280, 92709, 84280, 92709, 84280, 92709, 84280, 84280, 92709, 92709, 84280, 84280, 84280, 92709, 84280, 92709, 92709, 84280, 92709, 92709, 84280, 84280, 92709, 84280, 92709, 92709, 84280, 84280, 92709, 84280, 92709, 84280, 92709, 84280, 92709, 92709, 92709, 76619, 92709, 84280, 84280, 84280, 92709, 92709, 92709, 92709, 92709, 84280, 84280, 92709, 84280, 84280, 84280, 84280, 92709, 84280, 84280, 92709, 92709, 92709, 84280, 84280, 84280, 92709, 92709, 92709, 84280, 84280, 84280, 92709, 84280, 92709, 84280, 92709, 84280, 84280, 92709, 84280, 92709, 84280, 84280, 84280, 92709, 92709, 92709, 84280, 92709, 84280, 84280, 92709, 84280, 84280, 92709, 84280, 84280, 92709, 84280, 84280, 84280, 84280, 84280, 84280, 84280, 92709, 84280, 92709, 92709, 84280, 84280, 84280, 84280, 92709, 84280, 84280, 84280, 84280, 84280, 84280, 84280, 92709, 92709 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227298851,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 102382,
        "IOBytes" : {
          "Total" : 17944118502,
          "Details" : {
            "IR" : 3806345679,
            "IW" : 0,
            "SR" : 7077265740,
            "SW" : 7060507083
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 81626472,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 5162730192,
            "rowCount" : 143409172,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276], ShuffleQueryStage 9 "
          },
          "8" : {
            "sign" : 1839805995,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2091041491152000,
            "rowCount" : 28257317448000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96] "
          },
          "4" : {
            "sign" : -1309253170,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 25224317262455491872000000,
            "rowCount" : 406843826813798256000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120] "
          },
          "15" : {
            "sign" : 392999575,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1056576,
            "rowCount" : 1000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_promo_sk#120], BroadcastQueryStage 7 "
          },
          "11" : {
            "sign" : 2118538542,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 11358333484,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((((inv_quantity_on_hand#40 < cs_quantity#21) AND (cs_item_sk#18 = inv_item_sk#38)) AND (cs_sold_date_sk#37 = d_date_sk#92)) AND (d_date#276 > date_add(d_date#94, 5))) "
          },
          "9" : {
            "sign" : 429511464,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2204070760944000,
            "rowCount" : 28257317448000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#56 = cs_item_sk#18) "
          },
          "13" : {
            "sign" : 1821927658,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 28827144,
            "rowCount" : 533836,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [inv_item_sk#38, inv_quantity_on_hand#40, w_warehouse_name#44, d_date_sk#92, d_date#94, d_week_seq#96], ShuffleQueryStage 10 "
          },
          "16" : {
            "sign" : -751614694,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 345547728,
            "rowCount" : 14397822,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cr_item_sk#140, cr_order_number#154L], ShuffleQueryStage 8 "
          },
          "5" : {
            "sign" : 965250267,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 34988569105986650016000000,
            "rowCount" : 406843826813798256000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, ((cr_item_sk#140 = cs_item_sk#18) AND (cr_order_number#154L = cs_order_number#20L)) "
          },
          "10" : {
            "sign" : -1232359769,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 7479878148,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, d_week_seq#96] "
          },
          "6" : {
            "sign" : 669358718,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2091041491152000000,
            "rowCount" : 28257317448000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#18, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120] "
          },
          "1" : {
            "sign" : 1621151794,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 34233001999046738969142857,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "14" : {
            "sign" : -555763869,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 26102424,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#56, i_item_desc#60], ShuffleQueryStage 6 "
          },
          "0" : {
            "sign" : 1330138621,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 7600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 739438099,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 34233001999046738969142857,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [total_cnt#244L DESC NULLS LAST, i_item_desc#60 ASC NULLS FIRST, w_warehouse_name#44 ASC NULLS FIRST, d_week_seq#96 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -1076760654,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2204070760944000000,
            "rowCount" : 28257317448000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (cs_promo_sk#19 = p_promo_sk#120) "
          },
          "3" : {
            "sign" : -1435056577,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 34233001999046738969142857,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_desc#60, w_warehouse_name#44, d_week_seq#96], [i_item_desc#60, w_warehouse_name#44, d_week_seq#96, sum(CASE WHEN isnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS no_promo#242L, sum(CASE WHEN isnotnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS promo#243L, count(1) AS total_cnt#244L] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [total_cnt#244L DESC NULLS LAST, i_item_desc#60 ASC NULLS FIRST, w_warehouse_name#44 ASC NULLS FIRST, d_week_seq#96 ASC NULLS FIRST], true\n      +- Aggregate [i_item_desc#60, w_warehouse_name#44, d_week_seq#96], [i_item_desc#60, w_warehouse_name#44, d_week_seq#96, sum(CASE WHEN isnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS no_promo#242L, sum(CASE WHEN isnotnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS promo#243L, count(1) AS total_cnt#244L]\n         +- Project [w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120]\n            +- Join LeftOuter, ((cr_item_sk#140 = cs_item_sk#18) AND (cr_order_number#154L = cs_order_number#20L))\n               :- Project [cs_item_sk#18, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120]\n               :  +- Join LeftOuter, (cs_promo_sk#19 = p_promo_sk#120)\n               :     :- Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96]\n               :     :  +- Join Inner, (i_item_sk#56 = cs_item_sk#18)\n               :     :     :- Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, d_week_seq#96]\n               :     :     :  +- Join Inner, ((((inv_quantity_on_hand#40 < cs_quantity#21) AND (cs_item_sk#18 = inv_item_sk#38)) AND (cs_sold_date_sk#37 = d_date_sk#92)) AND (d_date#276 > date_add(d_date#94, 5)))\n               :     :     :     :- LogicalQueryStage Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276], ShuffleQueryStage 9\n               :     :     :     +- LogicalQueryStage Project [inv_item_sk#38, inv_quantity_on_hand#40, w_warehouse_name#44, d_date_sk#92, d_date#94, d_week_seq#96], ShuffleQueryStage 10\n               :     :     +- LogicalQueryStage Project [i_item_sk#56, i_item_desc#60], ShuffleQueryStage 6\n               :     +- LogicalQueryStage Project [p_promo_sk#120], BroadcastQueryStage 7\n               +- LogicalQueryStage Project [cr_item_sk#140, cr_order_number#154L], ShuffleQueryStage 8\n"
      },
      "IM" : {
        "inputSizeInBytes" : 5564264064,
        "inputRowCount" : 158545830
      },
      "PD" : {
        "1" : [ 869733, 872352, 872523, 871425, 879575, 868699, 871770, 876110, 871061, 872488, 870939, 878388, 873867, 870326, 876242, 881379, 871819, 873267, 872915, 873515, 878776, 878535, 864494, 878370, 864051, 872669, 871821, 867560, 870022, 868050, 870182, 873418, 875889, 868884, 868031, 873312, 878796, 871548, 875267, 865325, 881690, 873362, 872116, 865033, 877887, 868969, 872052, 876543, 873779, 873750, 871472, 877694, 869031, 878273, 877713, 883851, 872448, 871438, 870692, 870343, 865735, 875230, 874006, 873339, 869294, 875428, 873270, 876866, 874152, 876993, 870926, 868629, 874861, 875554, 866224, 871047, 880913, 880063, 876407, 879255, 866541, 872294, 868281, 865933, 870114, 870135, 877524, 877971, 870596, 871049, 870057, 866978, 871210, 868107, 869688, 875431, 870061, 868573, 877720, 866982, 869690, 874123, 873250, 878881, 874801, 875705, 876569, 871705, 876799, 868380, 869872, 872376, 871013, 880001, 873315, 874392, 877754, 875735, 878253, 872996, 868309, 879540, 874157, 877577, 879179, 868696, 876276, 871298, 869333, 867917, 878970, 874641, 867519, 872035, 880456, 864445, 864205, 865400, 872894, 867628, 873138, 869804, 867063, 870335, 870645, 871198, 870294, 869534, 871569, 868726, 871965, 874207, 876020, 874678, 870509, 871208, 869284, 877122, 873641, 873423, 866238, 865704, 867280, 865074, 877670, 877361, 874542, 874648, 875843, 873115, 873698, 874207, 872229, 875618, 876602, 876637, 872269, 865260, 870725, 869498, 879674, 873699, 868540, 872195, 866180, 873610, 876886, 878349, 881525, 876123, 880515, 870708, 870010, 876456, 863139, 876243, 874623, 872242, 875261, 864785 ],
        "0" : [ 84280, 84280, 84280, 92709, 92709, 84280, 92709, 84280, 76619, 92709, 92709, 84280, 92709, 84280, 84280, 84280, 84280, 84280, 92709, 92709, 92709, 92709, 84280, 84280, 92709, 84280, 84280, 92709, 84280, 92709, 92709, 92709, 92709, 84280, 84280, 92709, 84280, 84280, 84280, 92709, 84280, 84280, 84280, 92709, 92709, 84280, 84280, 84280, 84280, 84280, 92709, 92709, 84280, 84280, 84280, 92709, 92709, 92709, 84280, 84280, 84280, 92709, 84280, 92709, 84280, 92709, 92709, 84280, 92709, 92709, 92709, 84280, 92709, 92709, 84280, 92709, 84280, 92709, 84280, 84280, 92709, 84280, 92709, 84280, 92709, 84280, 84280, 92709, 92709, 84280, 84280, 84280, 92709, 84280, 92709, 92709, 84280, 92709, 92709, 84280, 84280, 92709, 84280, 92709, 92709, 84280, 84280, 92709, 84280, 92709, 84280, 92709, 84280, 92709, 92709, 92709, 76619, 92709, 84280, 84280, 84280, 92709, 92709, 92709, 92709, 92709, 84280, 84280, 92709, 84280, 84280, 84280, 84280, 92709, 84280, 84280, 92709, 92709, 92709, 84280, 84280, 84280, 92709, 92709, 92709, 84280, 84280, 84280, 92709, 84280, 92709, 84280, 92709, 84280, 84280, 92709, 84280, 92709, 84280, 84280, 84280, 92709, 92709, 92709, 84280, 92709, 84280, 84280, 92709, 84280, 84280, 92709, 84280, 84280, 92709, 84280, 84280, 84280, 84280, 84280, 84280, 84280, 92709, 84280, 92709, 92709, 84280, 84280, 84280, 84280, 92709, 84280, 84280, 84280, 84280, 84280, 84280, 84280, 92709, 92709 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 82,
        "FinishedTasksTotalTimeInMs" : 47800.0,
        "FinishedTasksDistributionInMs" : [ 326.0, 456.0, 529.0, 597.0, 1201.0 ]
      },
      "StartTimeInMs" : 1702227321172,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 80061,
        "IOBytes" : {
          "Total" : 17629338763,
          "Details" : {
            "IR" : 3657907085,
            "IW" : 0,
            "SR" : 7077265740,
            "SW" : 6894165938
          }
        }
      }
    },
    "7" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : 520512238,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 7600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "1" : {
            "sign" : -1513476883,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 112124304,
            "rowCount" : 635516,
            "isRuntime" : true,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -2079151528,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 112124304,
            "rowCount" : 635516,
            "isRuntime" : true,
            "predicate" : " (unknown) Sort Arguments: [total_cnt#244L DESC NULLS LAST, i_item_desc#60 ASC NULLS FIRST, w_warehouse_name#44 ASC NULLS FIRST, d_week_seq#96 ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : 698372794,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 112124304,
            "rowCount" : 635516,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [i_item_desc#60, w_warehouse_name#44, d_week_seq#96], [i_item_desc#60, w_warehouse_name#44, d_week_seq#96, sum(CASE WHEN isnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS no_promo#242L, sum(CASE WHEN isnotnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS promo#243L, count(1) AS total_cnt#244L], HashAggregate(keys=[i_item_desc#60, w_warehouse_name#44, d_week_seq#96], functions=[sum(CASE WHEN isnull(p_promo_sk#120) THEN 1 ELSE 0 END), sum(CASE WHEN isnotnull(p_promo_sk#120) THEN 1 ELSE 0 END), count(1)]) "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [total_cnt#244L DESC NULLS LAST, i_item_desc#60 ASC NULLS FIRST, w_warehouse_name#44 ASC NULLS FIRST, d_week_seq#96 ASC NULLS FIRST], true\n      +- LogicalQueryStage Aggregate [i_item_desc#60, w_warehouse_name#44, d_week_seq#96], [i_item_desc#60, w_warehouse_name#44, d_week_seq#96, sum(CASE WHEN isnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS no_promo#242L, sum(CASE WHEN isnotnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS promo#243L, count(1) AS total_cnt#244L], HashAggregate(keys=[i_item_desc#60, w_warehouse_name#44, d_week_seq#96], functions=[sum(CASE WHEN isnull(p_promo_sk#120) THEN 1 ELSE 0 END), sum(CASE WHEN isnotnull(p_promo_sk#120) THEN 1 ELSE 0 END), count(1)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 112124304,
        "inputRowCount" : 635516
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227400252,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 981,
        "IOBytes" : {
          "Total" : 59539613,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 59539613,
            "SW" : 0
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 81626472,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 266467152,
            "rowCount" : 4758342,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276], ShuffleQueryStage 9 "
          },
          "8" : {
            "sign" : 1839805995,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 38346470627631552000,
            "rowCount" : 518195549022048000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96] "
          },
          "4" : {
            "sign" : -1309253170,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 462575011112726713126272000000,
            "rowCount" : 7460887276011721179456000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120] "
          },
          "15" : {
            "sign" : 392999575,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1056576,
            "rowCount" : 1000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_promo_sk#120], BroadcastQueryStage 7 "
          },
          "11" : {
            "sign" : 2118538542,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 208294289312784,
            "rowCount" : 2540174259912,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((((inv_quantity_on_hand#40 < cs_quantity#21) AND (cs_item_sk#18 = inv_item_sk#38)) AND (cs_sold_date_sk#37 = d_date_sk#92)) AND (d_date#276 > date_add(d_date#94, 5))) "
          },
          "9" : {
            "sign" : 429511464,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 40419252823719744000,
            "rowCount" : 518195549022048000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#56 = cs_item_sk#18) "
          },
          "13" : {
            "sign" : 1821927658,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 28827144,
            "rowCount" : 533836,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [inv_item_sk#38, inv_quantity_on_hand#40, w_warehouse_name#44, d_date_sk#92, d_date#94, d_week_seq#96], ShuffleQueryStage 10 "
          },
          "16" : {
            "sign" : -751614694,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 345547728,
            "rowCount" : 14397822,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cr_item_sk#140, cr_order_number#154L], ShuffleQueryStage 8 "
          },
          "5" : {
            "sign" : 965250267,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 641636305737008021433216000000,
            "rowCount" : 7460887276011721179456000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, ((cr_item_sk#140 = cs_item_sk#18) AND (cr_order_number#154L = cs_order_number#20L)) "
          },
          "10" : {
            "sign" : -1232359769,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 137169410035248,
            "rowCount" : 2540174259912,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, d_week_seq#96] "
          },
          "6" : {
            "sign" : 669358718,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 38346470627631552000000,
            "rowCount" : 518195549022048000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#18, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120] "
          },
          "1" : {
            "sign" : 1621151794,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 627780372224414824957083428571,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "14" : {
            "sign" : -555763869,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 26102424,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#56, i_item_desc#60], ShuffleQueryStage 6 "
          },
          "0" : {
            "sign" : 1330138621,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 7600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 739438099,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 627780372224414824957083428571,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [total_cnt#244L DESC NULLS LAST, i_item_desc#60 ASC NULLS FIRST, w_warehouse_name#44 ASC NULLS FIRST, d_week_seq#96 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -1076760654,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 40419252823719744000000,
            "rowCount" : 518195549022048000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (cs_promo_sk#19 = p_promo_sk#120) "
          },
          "3" : {
            "sign" : -1435056577,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 627780372224414824957083428571,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_desc#60, w_warehouse_name#44, d_week_seq#96], [i_item_desc#60, w_warehouse_name#44, d_week_seq#96, sum(CASE WHEN isnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS no_promo#242L, sum(CASE WHEN isnotnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS promo#243L, count(1) AS total_cnt#244L] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [total_cnt#244L DESC NULLS LAST, i_item_desc#60 ASC NULLS FIRST, w_warehouse_name#44 ASC NULLS FIRST, d_week_seq#96 ASC NULLS FIRST], true\n      +- Aggregate [i_item_desc#60, w_warehouse_name#44, d_week_seq#96], [i_item_desc#60, w_warehouse_name#44, d_week_seq#96, sum(CASE WHEN isnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS no_promo#242L, sum(CASE WHEN isnotnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS promo#243L, count(1) AS total_cnt#244L]\n         +- Project [w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120]\n            +- Join LeftOuter, ((cr_item_sk#140 = cs_item_sk#18) AND (cr_order_number#154L = cs_order_number#20L))\n               :- Project [cs_item_sk#18, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120]\n               :  +- Join LeftOuter, (cs_promo_sk#19 = p_promo_sk#120)\n               :     :- Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96]\n               :     :  +- Join Inner, (i_item_sk#56 = cs_item_sk#18)\n               :     :     :- Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, d_week_seq#96]\n               :     :     :  +- Join Inner, ((((inv_quantity_on_hand#40 < cs_quantity#21) AND (cs_item_sk#18 = inv_item_sk#38)) AND (cs_sold_date_sk#37 = d_date_sk#92)) AND (d_date#276 > date_add(d_date#94, 5)))\n               :     :     :     :- LogicalQueryStage Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276], ShuffleQueryStage 9\n               :     :     :     +- LogicalQueryStage Project [inv_item_sk#38, inv_quantity_on_hand#40, w_warehouse_name#44, d_date_sk#92, d_date#94, d_week_seq#96], ShuffleQueryStage 10\n               :     :     +- LogicalQueryStage Project [i_item_sk#56, i_item_desc#60], ShuffleQueryStage 6\n               :     +- LogicalQueryStage Project [p_promo_sk#120], BroadcastQueryStage 7\n               +- LogicalQueryStage Project [cr_item_sk#140, cr_order_number#154L], ShuffleQueryStage 8\n"
      },
      "IM" : {
        "inputSizeInBytes" : 668001024,
        "inputRowCount" : 19895000
      },
      "PD" : {
        "2" : [ 654178, 650486, 646620, 652932, 645360, 641610, 650818, 640693, 649460, 649634, 648398, 643291, 647753, 637714, 650495, 650278, 637498, 644304, 637101, 650601, 640426, 651499, 645889, 652834, 646948, 636850, 644594, 649723, 640949, 652307, 640393, 647922, 643054, 646489, 639538, 649268, 645654, 634854, 651067, 648030, 645578, 645093, 657157, 646809, 648319, 646075, 637205, 651330, 643648, 645177, 642746, 648751, 644981, 648013, 655359, 646055, 640170, 641189, 639522, 645078, 645630, 646847, 649515, 646149, 648072, 642337, 643088, 649593, 651844, 639639, 648228, 640618, 644769, 646345, 649972, 648205, 644979, 651757, 649967, 643440, 647534, 648746, 650429, 650891, 645429, 640288, 647313, 649385, 649006, 643173, 646487, 655414, 645253, 648638, 649942, 647005, 640030, 650357, 650468, 642218, 647606, 647125, 644483, 647012, 643700, 639588, 640391, 645345, 642513, 643911, 640668, 640718, 645234, 650266, 640132, 650412, 640690, 643709, 640121, 648931, 645452, 651030, 646231, 650877, 646071, 649126, 648915, 642978, 645893, 644418, 644688, 643187, 643342, 641615, 643609, 645740, 644717, 643628, 639635, 655357, 643557, 646513, 647424, 644212, 648841, 646819, 643664, 651208, 646861, 646697, 643374, 643094, 640001, 639093, 644725, 643069, 643927, 643615, 656245, 649605, 647256, 652656, 645016, 641054, 645992, 647908, 649534, 648750, 640270, 646632, 648311, 643557, 647402, 644426, 650469, 641850, 642039, 647078, 647655, 644419, 644274, 642454, 641271, 644268, 646681, 641873, 647951, 646710, 645895, 642228, 645030, 640906, 649081, 641591, 654357, 650741, 647276, 644911, 649036, 654199 ],
        "1" : [ 869733, 872352, 872523, 871425, 879575, 868699, 871770, 876110, 871061, 872488, 870939, 878388, 873867, 870326, 876242, 881379, 871819, 873267, 872915, 873515, 878776, 878535, 864494, 878370, 864051, 872669, 871821, 867560, 870022, 868050, 870182, 873418, 875889, 868884, 868031, 873312, 878796, 871548, 875267, 865325, 881690, 873362, 872116, 865033, 877887, 868969, 872052, 876543, 873779, 873750, 871472, 877694, 869031, 878273, 877713, 883851, 872448, 871438, 870692, 870343, 865735, 875230, 874006, 873339, 869294, 875428, 873270, 876866, 874152, 876993, 870926, 868629, 874861, 875554, 866224, 871047, 880913, 880063, 876407, 879255, 866541, 872294, 868281, 865933, 870114, 870135, 877524, 877971, 870596, 871049, 870057, 866978, 871210, 868107, 869688, 875431, 870061, 868573, 877720, 866982, 869690, 874123, 873250, 878881, 874801, 875705, 876569, 871705, 876799, 868380, 869872, 872376, 871013, 880001, 873315, 874392, 877754, 875735, 878253, 872996, 868309, 879540, 874157, 877577, 879179, 868696, 876276, 871298, 869333, 867917, 878970, 874641, 867519, 872035, 880456, 864445, 864205, 865400, 872894, 867628, 873138, 869804, 867063, 870335, 870645, 871198, 870294, 869534, 871569, 868726, 871965, 874207, 876020, 874678, 870509, 871208, 869284, 877122, 873641, 873423, 866238, 865704, 867280, 865074, 877670, 877361, 874542, 874648, 875843, 873115, 873698, 874207, 872229, 875618, 876602, 876637, 872269, 865260, 870725, 869498, 879674, 873699, 868540, 872195, 866180, 873610, 876886, 878349, 881525, 876123, 880515, 870708, 870010, 876456, 863139, 876243, 874623, 872242, 875261, 864785 ],
        "0" : [ 84280, 84280, 84280, 92709, 92709, 84280, 92709, 84280, 76619, 92709, 92709, 84280, 92709, 84280, 84280, 84280, 84280, 84280, 92709, 92709, 92709, 92709, 84280, 84280, 92709, 84280, 84280, 92709, 84280, 92709, 92709, 92709, 92709, 84280, 84280, 92709, 84280, 84280, 84280, 92709, 84280, 84280, 84280, 92709, 92709, 84280, 84280, 84280, 84280, 84280, 92709, 92709, 84280, 84280, 84280, 92709, 92709, 92709, 84280, 84280, 84280, 92709, 84280, 92709, 84280, 92709, 92709, 84280, 92709, 92709, 92709, 84280, 92709, 92709, 84280, 92709, 84280, 92709, 84280, 84280, 92709, 84280, 92709, 84280, 92709, 84280, 84280, 92709, 92709, 84280, 84280, 84280, 92709, 84280, 92709, 92709, 84280, 92709, 92709, 84280, 84280, 92709, 84280, 92709, 92709, 84280, 84280, 92709, 84280, 92709, 84280, 92709, 84280, 92709, 92709, 92709, 76619, 92709, 84280, 84280, 84280, 92709, 92709, 92709, 92709, 92709, 84280, 84280, 92709, 84280, 84280, 84280, 84280, 92709, 84280, 84280, 92709, 92709, 92709, 84280, 84280, 84280, 92709, 92709, 92709, 84280, 84280, 84280, 92709, 84280, 92709, 84280, 92709, 84280, 84280, 92709, 84280, 92709, 84280, 84280, 84280, 92709, 92709, 92709, 84280, 92709, 84280, 84280, 92709, 84280, 84280, 92709, 84280, 84280, 92709, 84280, 84280, 84280, 84280, 84280, 84280, 84280, 92709, 84280, 92709, 92709, 84280, 84280, 84280, 84280, 92709, 84280, 84280, 84280, 84280, 84280, 84280, 84280, 92709, 92709 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227323059,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 78174,
        "IOBytes" : {
          "Total" : 15962996859,
          "Details" : {
            "IR" : 2114708963,
            "IW" : 0,
            "SR" : 7077265740,
            "SW" : 6771022156
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "12" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 383266094,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 34663495447,
                "rowCount" : 207565841
              },
              "compileTime" : {
                "sizeInBytes" : 34663495447,
                "rowCount" : 207565841
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#18, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120] "
          },
          "1" : {
            "sign" : -1890187498,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 35493758811,
                "rowCount" : 207565841
              },
              "compileTime" : {
                "sizeInBytes" : 35493758811,
                "rowCount" : 207565841
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (cs_promo_sk#19 = p_promo_sk#120) "
          },
          "2" : {
            "sign" : 95492441,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 24027033651,
                "rowCount" : 143874453
              },
              "compileTime" : {
                "sizeInBytes" : 24027033651,
                "rowCount" : 143874453
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96] "
          },
          "3" : {
            "sign" : 866560874,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 24602531463,
                "rowCount" : 143874453
              },
              "compileTime" : {
                "sizeInBytes" : 24602531463,
                "rowCount" : 143874453
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#56 = cs_item_sk#18) "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cs_item_sk#18, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120]\n+- Join LeftOuter, (cs_promo_sk#19 = p_promo_sk#120)\n   :- Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96]\n   :  +- Join Inner, (i_item_sk#56 = cs_item_sk#18)\n   :     :- Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, d_week_seq#96]\n   :     :  +- Join Inner, ((((inv_quantity_on_hand#40 < cs_quantity#21) AND (cs_item_sk#18 = inv_item_sk#38)) AND (cs_sold_date_sk#37 = d_date_sk#92)) AND (d_date#276 > date_add(d_date#94, 5)))\n   :     :     :- Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276]\n   :     :     :  +- Join Inner, (cs_bill_cdemo_sk#7 = cd_demo_sk#78)\n   :     :     :     :- Project [cs_bill_cdemo_sk#7, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276]\n   :     :     :     :  +- Join Inner, (cs_ship_date_sk#5 = d_date_sk#274)\n   :     :     :     :     :- Project [cs_ship_date_sk#5, cs_bill_cdemo_sk#7, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37]\n   :     :     :     :     :  +- Join Inner, (cs_bill_hdemo_sk#8 = hd_demo_sk#87)\n   :     :     :     :     :     :- Project [cs_ship_date_sk#5, cs_bill_cdemo_sk#7, cs_bill_hdemo_sk#8, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37]\n   :     :     :     :     :     :  +- Filter ((((((isnotnull(cs_quantity#21) AND isnotnull(cs_item_sk#18)) AND isnotnull(cs_bill_cdemo_sk#7)) AND isnotnull(cs_bill_hdemo_sk#8)) AND isnotnull(cs_sold_date_sk#37)) AND isnotnull(cs_ship_date_sk#5)) AND dynamicpruning#312 [cs_sold_date_sk#37])\n   :     :     :     :     :     :     :  +- Project [inv_item_sk#38, inv_quantity_on_hand#40, w_warehouse_name#44, d_date_sk#92, d_date#94, d_week_seq#96]\n   :     :     :     :     :     :     :     +- Join Inner, (d_week_seq#96 = d_week_seq#250)\n   :     :     :     :     :     :     :        :- Project [inv_item_sk#38, inv_quantity_on_hand#40, d_week_seq#250, w_warehouse_name#44]\n   :     :     :     :     :     :     :        :  +- Join Inner, (w_warehouse_sk#42 = inv_warehouse_sk#39)\n   :     :     :     :     :     :     :        :     :- Project [inv_item_sk#38, inv_warehouse_sk#39, inv_quantity_on_hand#40, d_week_seq#250]\n   :     :     :     :     :     :     :        :     :  +- Join Inner, (inv_date_sk#41 = d_date_sk#246)\n   :     :     :     :     :     :     :        :     :     :- Filter (((isnotnull(inv_quantity_on_hand#40) AND isnotnull(inv_item_sk#38)) AND isnotnull(inv_warehouse_sk#39)) AND isnotnull(inv_date_sk#41))\n   :     :     :     :     :     :     :        :     :     :  +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#38,inv_warehouse_sk#39,inv_quantity_on_hand#40,inv_date_sk#41] parquet\n   :     :     :     :     :     :     :        :     :     +- Project [d_date_sk#246, d_week_seq#250]\n   :     :     :     :     :     :     :        :     :        +- Filter (isnotnull(d_week_seq#250) AND isnotnull(d_date_sk#246))\n   :     :     :     :     :     :     :        :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#246,d_date_id#247,d_date#248,d_month_seq#249,d_week_seq#250,d_quarter_seq#251,d_year#252,d_dow#253,d_moy#254,d_dom#255,d_qoy#256,d_fy_year#257,d_fy_quarter_seq#258,d_fy_week_seq#259,d_day_name#260,d_quarter_name#261,d_holiday#262,d_weekend#263,d_following_holiday#264,d_first_dom#265,d_last_dom#266,d_same_day_ly#267,d_same_day_lq#268,d_current_day#269,... 4 more fields] parquet\n   :     :     :     :     :     :     :        :     +- Project [w_warehouse_sk#42, w_warehouse_name#44]\n   :     :     :     :     :     :     :        :        +- Filter isnotnull(w_warehouse_sk#42)\n   :     :     :     :     :     :     :        :           +- Relation spark_catalog.tpcds_100.warehouse[w_warehouse_sk#42,w_warehouse_id#43,w_warehouse_name#44,w_warehouse_sq_ft#45,w_street_number#46,w_street_name#47,w_street_type#48,w_suite_number#49,w_city#50,w_county#51,w_state#52,w_zip#53,w_country#54,w_gmt_offset#55] parquet\n   :     :     :     :     :     :     :        +- Project [d_date_sk#92, d_date#94, d_week_seq#96]\n   :     :     :     :     :     :     :           +- Filter (((isnotnull(d_year#98) AND (d_year#98 = 2001)) AND isnotnull(d_date_sk#92)) AND (isnotnull(d_week_seq#96) AND isnotnull(d_date#94)))\n   :     :     :     :     :     :     :              +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#92,d_date_id#93,d_date#94,d_month_seq#95,d_week_seq#96,d_quarter_seq#97,d_year#98,d_dow#99,d_moy#100,d_dom#101,d_qoy#102,d_fy_year#103,d_fy_quarter_seq#104,d_fy_week_seq#105,d_day_name#106,d_quarter_name#107,d_holiday#108,d_weekend#109,d_following_holiday#110,d_first_dom#111,d_last_dom#112,d_same_day_ly#113,d_same_day_lq#114,d_current_day#115,... 4 more fields] parquet\n   :     :     :     :     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#4,cs_ship_date_sk#5,cs_bill_customer_sk#6,cs_bill_cdemo_sk#7,cs_bill_hdemo_sk#8,cs_bill_addr_sk#9,cs_ship_customer_sk#10,cs_ship_cdemo_sk#11,cs_ship_hdemo_sk#12,cs_ship_addr_sk#13,cs_call_center_sk#14,cs_catalog_page_sk#15,cs_ship_mode_sk#16,cs_warehouse_sk#17,cs_item_sk#18,cs_promo_sk#19,cs_order_number#20L,cs_quantity#21,cs_wholesale_cost#22,cs_list_price#23,cs_sales_price#24,cs_ext_discount_amt#25,cs_ext_sales_price#26,cs_ext_wholesale_cost#27,... 10 more fields] parquet\n   :     :     :     :     :     +- Project [hd_demo_sk#87]\n   :     :     :     :     :        +- Filter ((isnotnull(hd_buy_potential#89) AND (hd_buy_potential#89 = 1001-5000)) AND isnotnull(hd_demo_sk#87))\n   :     :     :     :     :           +- Relation spark_catalog.tpcds_100.household_demographics[hd_demo_sk#87,hd_income_band_sk#88,hd_buy_potential#89,hd_dep_count#90,hd_vehicle_count#91] parquet\n   :     :     :     :     +- Project [d_date_sk#274, d_date#276]\n   :     :     :     :        +- Filter (isnotnull(d_date#276) AND isnotnull(d_date_sk#274))\n   :     :     :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#274,d_date_id#275,d_date#276,d_month_seq#277,d_week_seq#278,d_quarter_seq#279,d_year#280,d_dow#281,d_moy#282,d_dom#283,d_qoy#284,d_fy_year#285,d_fy_quarter_seq#286,d_fy_week_seq#287,d_day_name#288,d_quarter_name#289,d_holiday#290,d_weekend#291,d_following_holiday#292,d_first_dom#293,d_last_dom#294,d_same_day_ly#295,d_same_day_lq#296,d_current_day#297,... 4 more fields] parquet\n   :     :     :     +- Project [cd_demo_sk#78]\n   :     :     :        +- Filter ((isnotnull(cd_marital_status#80) AND (cd_marital_status#80 = M)) AND isnotnull(cd_demo_sk#78))\n   :     :     :           +- Relation spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#78,cd_gender#79,cd_marital_status#80,cd_education_status#81,cd_purchase_estimate#82,cd_credit_rating#83,cd_dep_count#84,cd_dep_employed_count#85,cd_dep_college_count#86] parquet\n   :     :     +- Project [inv_item_sk#38, inv_quantity_on_hand#40, w_warehouse_name#44, d_date_sk#92, d_date#94, d_week_seq#96]\n   :     :        +- Join Inner, (d_week_seq#96 = d_week_seq#250)\n   :     :           :- Project [inv_item_sk#38, inv_quantity_on_hand#40, d_week_seq#250, w_warehouse_name#44]\n   :     :           :  +- Join Inner, (w_warehouse_sk#42 = inv_warehouse_sk#39)\n   :     :           :     :- Project [inv_item_sk#38, inv_warehouse_sk#39, inv_quantity_on_hand#40, d_week_seq#250]\n   :     :           :     :  +- Join Inner, (inv_date_sk#41 = d_date_sk#246)\n   :     :           :     :     :- Filter (((isnotnull(inv_quantity_on_hand#40) AND isnotnull(inv_item_sk#38)) AND isnotnull(inv_warehouse_sk#39)) AND isnotnull(inv_date_sk#41))\n   :     :           :     :     :  +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#38,inv_warehouse_sk#39,inv_quantity_on_hand#40,inv_date_sk#41] parquet\n   :     :           :     :     +- Project [d_date_sk#246, d_week_seq#250]\n   :     :           :     :        +- Filter (isnotnull(d_week_seq#250) AND isnotnull(d_date_sk#246))\n   :     :           :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#246,d_date_id#247,d_date#248,d_month_seq#249,d_week_seq#250,d_quarter_seq#251,d_year#252,d_dow#253,d_moy#254,d_dom#255,d_qoy#256,d_fy_year#257,d_fy_quarter_seq#258,d_fy_week_seq#259,d_day_name#260,d_quarter_name#261,d_holiday#262,d_weekend#263,d_following_holiday#264,d_first_dom#265,d_last_dom#266,d_same_day_ly#267,d_same_day_lq#268,d_current_day#269,... 4 more fields] parquet\n   :     :           :     +- Project [w_warehouse_sk#42, w_warehouse_name#44]\n   :     :           :        +- Filter isnotnull(w_warehouse_sk#42)\n   :     :           :           +- Relation spark_catalog.tpcds_100.warehouse[w_warehouse_sk#42,w_warehouse_id#43,w_warehouse_name#44,w_warehouse_sq_ft#45,w_street_number#46,w_street_name#47,w_street_type#48,w_suite_number#49,w_city#50,w_county#51,w_state#52,w_zip#53,w_country#54,w_gmt_offset#55] parquet\n   :     :           +- Project [d_date_sk#92, d_date#94, d_week_seq#96]\n   :     :              +- Filter (((isnotnull(d_year#98) AND (d_year#98 = 2001)) AND isnotnull(d_date_sk#92)) AND (isnotnull(d_week_seq#96) AND isnotnull(d_date#94)))\n   :     :                 +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#92,d_date_id#93,d_date#94,d_month_seq#95,d_week_seq#96,d_quarter_seq#97,d_year#98,d_dow#99,d_moy#100,d_dom#101,d_qoy#102,d_fy_year#103,d_fy_quarter_seq#104,d_fy_week_seq#105,d_day_name#106,d_quarter_name#107,d_holiday#108,d_weekend#109,d_following_holiday#110,d_first_dom#111,d_last_dom#112,d_same_day_ly#113,d_same_day_lq#114,d_current_day#115,... 4 more fields] parquet\n   :     +- Project [i_item_sk#56, i_item_desc#60]\n   :        +- Filter isnotnull(i_item_sk#56)\n   :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#56,i_item_id#57,i_rec_start_date#58,i_rec_end_date#59,i_item_desc#60,i_current_price#61,i_wholesale_cost#62,i_brand_id#63,i_brand#64,i_class_id#65,i_class#66,i_category_id#67,i_category#68,i_manufact_id#69,i_manufact#70,i_size#71,i_formulation#72,i_color#73,i_units#74,i_container#75,i_manager_id#76,i_product_name#77] parquet\n   +- Project [p_promo_sk#120]\n      +- Filter isnotnull(p_promo_sk#120)\n         +- Relation spark_catalog.tpcds_100.promotion[p_promo_sk#120,p_promo_id#121,p_start_date_sk#122,p_end_date_sk#123,p_item_sk#124,p_cost#125,p_response_target#126,p_promo_name#127,p_channel_dmail#128,p_channel_email#129,p_channel_catalog#130,p_channel_tv#131,p_channel_radio#132,p_channel_press#133,p_channel_event#134,p_channel_demo#135,p_channel_details#136,p_purpose#137,p_discount_active#138] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : -1692183250,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1056576,
            "rowCount" : 1000,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [p_promo_sk#120] Arguments: 7 "
          },
          "4" : {
            "sign" : 1285563864,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [5]: [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, d_week_seq#96] Arguments: [cs_item_sk#18 ASC NULLS FIRST], false, 0 "
          },
          "5" : {
            "sign" : 62886701,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 41875280,
            "rowCount" : 648914,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [5]: [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, d_week_seq#96] Arguments: 11 "
          },
          "6" : {
            "sign" : 1463157525,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [i_item_sk#56, i_item_desc#60] Arguments: [i_item_sk#56 ASC NULLS FIRST], false, 0 "
          },
          "1" : {
            "sign" : -847768994,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 35493758811,
            "rowCount" : 207565841,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [cs_promo_sk#19] Right keys [1]: [p_promo_sk#120] Join type: LeftOuter Join condition: None "
          },
          "0" : {
            "sign" : 1761059538,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 34663495447,
            "rowCount" : 207565841,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [cs_item_sk#18, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120] Input [7]: [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120] "
          },
          "2" : {
            "sign" : -1976574246,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 24027033651,
            "rowCount" : 143874453,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96] Input [7]: [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, d_week_seq#96, i_item_sk#56, i_item_desc#60] "
          },
          "7" : {
            "sign" : 1870726481,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 26102424,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [i_item_sk#56, i_item_desc#60] Arguments: 6 "
          },
          "3" : {
            "sign" : 538910851,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 24602531463,
            "rowCount" : 143874453,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [cs_item_sk#18] Right keys [1]: [i_item_sk#56] Join type: Inner Join condition: None "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Sort",
          "toId" : 3,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "ShuffleQueryStage",
          "toId" : 6,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Sort",
          "toId" : 3,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "SortMergeJoin",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cs_item_sk#18, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120]\n+- BroadcastHashJoin [cs_promo_sk#19], [p_promo_sk#120], LeftOuter, BuildRight, false\n   :- Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96]\n   :  +- SortMergeJoin [cs_item_sk#18], [i_item_sk#56], Inner\n   :     :- Sort [cs_item_sk#18 ASC NULLS FIRST], false, 0\n   :     :  +- ShuffleQueryStage 11\n   :     :     +- Exchange hashpartitioning(cs_item_sk#18, 200), ENSURE_REQUIREMENTS, [plan_id=1292]\n   :     :        +- *(14) Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, d_week_seq#96]\n   :     :           +- *(14) SortMergeJoin [cs_item_sk#18, cs_sold_date_sk#37], [inv_item_sk#38, d_date_sk#92], Inner, ((inv_quantity_on_hand#40 < cs_quantity#21) AND (d_date#276 > date_add(d_date#94, 5)))\n   :     :              :- *(12) Sort [cs_item_sk#18 ASC NULLS FIRST, cs_sold_date_sk#37 ASC NULLS FIRST], false, 0\n   :     :              :  +- ShuffleQueryStage 9\n   :     :              :     +- Exchange hashpartitioning(cs_item_sk#18, cs_sold_date_sk#37, 200), ENSURE_REQUIREMENTS, [plan_id=963]\n   :     :              :        +- *(10) Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276]\n   :     :              :           +- *(10) BroadcastHashJoin [cs_bill_cdemo_sk#7], [cd_demo_sk#78], Inner, BuildRight, false\n   :     :              :              :- *(10) Project [cs_bill_cdemo_sk#7, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276]\n   :     :              :              :  +- *(10) BroadcastHashJoin [cs_ship_date_sk#5], [d_date_sk#274], Inner, BuildRight, false\n   :     :              :              :     :- *(10) Project [cs_ship_date_sk#5, cs_bill_cdemo_sk#7, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37]\n   :     :              :              :     :  +- *(10) BroadcastHashJoin [cs_bill_hdemo_sk#8], [hd_demo_sk#87], Inner, BuildRight, false\n   :     :              :              :     :     :- *(10) Filter ((((isnotnull(cs_quantity#21) AND isnotnull(cs_item_sk#18)) AND isnotnull(cs_bill_cdemo_sk#7)) AND isnotnull(cs_bill_hdemo_sk#8)) AND isnotnull(cs_ship_date_sk#5))\n   :     :              :              :     :     :  +- *(10) ColumnarToRow\n   :     :              :              :     :     :     +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_ship_date_sk#5,cs_bill_cdemo_sk#7,cs_bill_hdemo_sk#8,cs_item_sk#18,cs_promo_sk#19,cs_order_number#20L,cs_quantity#21,cs_sold_date_sk#37] Batched: true, DataFilters: [isnotnull(cs_quantity#21), isnotnull(cs_item_sk#18), isnotnull(cs_bill_cdemo_sk#7), isnotnull(cs..., Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#37), dynamicpruningexpression(true)], PushedFilters: [IsNotNull(cs_quantity), IsNotNull(cs_item_sk), IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_hd..., ReadSchema: struct<cs_ship_date_sk:int,cs_bill_cdemo_sk:int,cs_bill_hdemo_sk:int,cs_item_sk:int,cs_promo_sk:i...\n   :     :              :              :     :     +- BroadcastQueryStage 0\n   :     :              :              :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=493]\n   :     :              :              :     :           +- *(1) Project [hd_demo_sk#87]\n   :     :              :              :     :              +- *(1) Filter ((isnotnull(hd_buy_potential#89) AND (hd_buy_potential#89 = 1001-5000)) AND isnotnull(hd_demo_sk#87))\n   :     :              :              :     :                 +- *(1) ColumnarToRow\n   :     :              :              :     :                    +- FileScan parquet spark_catalog.tpcds_100.household_demographics[hd_demo_sk#87,hd_buy_potential#89] Batched: true, DataFilters: [isnotnull(hd_buy_potential#89), (hd_buy_potential#89 = 1001-5000), isnotnull(hd_demo_sk#87)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/household..., PartitionFilters: [], PushedFilters: [IsNotNull(hd_buy_potential), EqualTo(hd_buy_potential,1001-5000), IsNotNull(hd_demo_sk)], ReadSchema: struct<hd_demo_sk:int,hd_buy_potential:string>\n   :     :              :              :     +- BroadcastQueryStage 1\n   :     :              :              :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=512]\n   :     :              :              :           +- *(2) Filter (isnotnull(d_date#276) AND isnotnull(d_date_sk#274))\n   :     :              :              :              +- *(2) ColumnarToRow\n   :     :              :              :                 +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#274,d_date#276] Batched: true, DataFilters: [isnotnull(d_date#276), isnotnull(d_date_sk#274)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_date:date>\n   :     :              :              +- BroadcastQueryStage 2\n   :     :              :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=531]\n   :     :              :                    +- *(3) Project [cd_demo_sk#78]\n   :     :              :                       +- *(3) Filter ((isnotnull(cd_marital_status#80) AND (cd_marital_status#80 = M)) AND isnotnull(cd_demo_sk#78))\n   :     :              :                          +- *(3) ColumnarToRow\n   :     :              :                             +- FileScan parquet spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#78,cd_marital_status#80] Batched: true, DataFilters: [isnotnull(cd_marital_status#80), (cd_marital_status#80 = M), isnotnull(cd_demo_sk#78)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(cd_marital_status), EqualTo(cd_marital_status,M), IsNotNull(cd_demo_sk)], ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string>\n   :     :              +- *(13) Sort [inv_item_sk#38 ASC NULLS FIRST, d_date_sk#92 ASC NULLS FIRST], false, 0\n   :     :                 +- ShuffleQueryStage 10\n   :     :                    +- Exchange hashpartitioning(inv_item_sk#38, d_date_sk#92, 200), ENSURE_REQUIREMENTS, [plan_id=1010]\n   :     :                       +- *(11) Project [inv_item_sk#38, inv_quantity_on_hand#40, w_warehouse_name#44, d_date_sk#92, d_date#94, d_week_seq#96]\n   :     :                          +- *(11) BroadcastHashJoin [d_week_seq#250], [d_week_seq#96], Inner, BuildRight, false\n   :     :                             :- *(11) Project [inv_item_sk#38, inv_quantity_on_hand#40, d_week_seq#250, w_warehouse_name#44]\n   :     :                             :  +- *(11) BroadcastHashJoin [inv_warehouse_sk#39], [w_warehouse_sk#42], Inner, BuildRight, false\n   :     :                             :     :- *(11) Project [inv_item_sk#38, inv_warehouse_sk#39, inv_quantity_on_hand#40, d_week_seq#250]\n   :     :                             :     :  +- *(11) BroadcastHashJoin [inv_date_sk#41], [d_date_sk#246], Inner, BuildRight, false\n   :     :                             :     :     :- *(11) Filter ((isnotnull(inv_quantity_on_hand#40) AND isnotnull(inv_item_sk#38)) AND isnotnull(inv_warehouse_sk#39))\n   :     :                             :     :     :  +- *(11) ColumnarToRow\n   :     :                             :     :     :     +- FileScan parquet spark_catalog.tpcds_100.inventory[inv_item_sk#38,inv_warehouse_sk#39,inv_quantity_on_hand#40,inv_date_sk#41] Batched: true, DataFilters: [isnotnull(inv_quantity_on_hand#40), isnotnull(inv_item_sk#38), isnotnull(inv_warehouse_sk#39)], Format: Parquet, Location: InMemoryFileIndex(261 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/invento..., PartitionFilters: [isnotnull(inv_date_sk#41)], PushedFilters: [IsNotNull(inv_quantity_on_hand), IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)], ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>\n   :     :                             :     :     +- BroadcastQueryStage 3\n   :     :                             :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=552]\n   :     :                             :     :           +- *(4) Filter (isnotnull(d_week_seq#250) AND isnotnull(d_date_sk#246))\n   :     :                             :     :              +- *(4) ColumnarToRow\n   :     :                             :     :                 +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#246,d_week_seq#250] Batched: true, DataFilters: [isnotnull(d_week_seq#250), isnotnull(d_date_sk#246)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_week_seq:int>\n   :     :                             :     +- BroadcastQueryStage 4\n   :     :                             :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=569]\n   :     :                             :           +- *(5) Filter isnotnull(w_warehouse_sk#42)\n   :     :                             :              +- *(5) ColumnarToRow\n   :     :                             :                 +- FileScan parquet spark_catalog.tpcds_100.warehouse[w_warehouse_sk#42,w_warehouse_name#44] Batched: true, DataFilters: [isnotnull(w_warehouse_sk#42)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/warehouse], PartitionFilters: [], PushedFilters: [IsNotNull(w_warehouse_sk)], ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>\n   :     :                             +- BroadcastQueryStage 5\n   :     :                                +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [plan_id=588]\n   :     :                                   +- *(6) Project [d_date_sk#92, d_date#94, d_week_seq#96]\n   :     :                                      +- *(6) Filter ((((isnotnull(d_year#98) AND (d_year#98 = 2001)) AND isnotnull(d_date_sk#92)) AND isnotnull(d_week_seq#96)) AND isnotnull(d_date#94))\n   :     :                                         +- *(6) ColumnarToRow\n   :     :                                            +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#92,d_date#94,d_week_seq#96,d_year#98] Batched: true, DataFilters: [isnotnull(d_year#98), (d_year#98 = 2001), isnotnull(d_date_sk#92), isnotnull(d_week_seq#96), isn..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk), IsNotNull(d_week_seq), IsNotNull(..., ReadSchema: struct<d_date_sk:int,d_date:date,d_week_seq:int,d_year:int>\n   :     +- Sort [i_item_sk#56 ASC NULLS FIRST], false, 0\n   :        +- ShuffleQueryStage 6\n   :           +- Exchange hashpartitioning(i_item_sk#56, 200), ENSURE_REQUIREMENTS, [plan_id=613]\n   :              +- *(7) Filter isnotnull(i_item_sk#56)\n   :                 +- *(7) ColumnarToRow\n   :                    +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#56,i_item_desc#60] Batched: true, DataFilters: [isnotnull(i_item_sk#56)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_desc:string>\n   +- BroadcastQueryStage 7\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=632]\n         +- *(8) Filter isnotnull(p_promo_sk#120)\n            +- *(8) ColumnarToRow\n               +- FileScan parquet spark_catalog.tpcds_100.promotion[p_promo_sk#120] Batched: true, DataFilters: [isnotnull(p_promo_sk#120)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/promotion], PartitionFilters: [], PushedFilters: [IsNotNull(p_promo_sk)], ReadSchema: struct<p_promo_sk:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 69034280,
        "inputRowCount" : 853914
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "4" : [ 124070, 121248, 114804, 126740, 120694, 113051, 123522, 108110, 116239, 126588, 117116, 114658, 127708, 117049, 124542, 119649, 119826, 122896, 131498, 128624, 123113, 124524, 118199, 119099, 120147, 119510, 121629, 122753, 123174, 117250, 130153, 122339, 123536, 115229, 119825, 122146, 112400, 109740, 111197, 127234, 117765, 117154, 116663, 128700, 118735, 121047, 120968, 118690, 113969, 125218, 125385, 125041, 119952, 126111, 119962, 123866, 121995, 123904, 116894, 119901, 114606, 118776, 115424, 126515, 122607, 116541, 125862, 121865, 119513, 118474, 122349, 122152, 124814, 117156, 121007, 119115, 114770, 119024, 119394, 118349, 117025, 114172, 126994, 119560, 123408, 119505, 114043, 125287, 127813, 116569, 129555, 112293, 123462, 114281, 122169, 117284, 116498, 119814, 125976, 117075, 119967, 119809, 119497, 124162, 120210, 120751, 121344, 126385, 118742, 120709, 122471, 121186, 116200, 127716, 111383, 120391, 116233, 118868, 113665, 125715, 124198, 116896, 132756, 118182, 120752, 115977, 126081, 107675, 115396, 115896, 116888, 116907, 121717, 117384, 120320, 118117, 117924, 121478, 121192, 118272, 121185, 118828, 122989, 124412, 119214, 120568, 113564, 123438, 124365, 126364, 123082, 112671, 121903, 117975, 120610, 131524, 123271, 127865, 119545, 118663, 114713, 121061, 118788, 116970, 122469, 121053, 125470, 115024, 121220, 117621, 114541, 125354, 120771, 120995, 120840, 116620, 109052, 115572, 117869, 120425, 122616, 123469, 116753, 118397, 132437, 128011, 117075, 122754, 116939, 116349, 117287, 120041, 122171, 116826, 118624, 115754, 122513, 121570, 129799, 126528 ],
        "0" : [ 84280, 84280, 84280, 92709, 92709, 84280, 92709, 84280, 76619, 92709, 92709, 84280, 92709, 84280, 84280, 84280, 84280, 84280, 92709, 92709, 92709, 92709, 84280, 84280, 92709, 84280, 84280, 92709, 84280, 92709, 92709, 92709, 92709, 84280, 84280, 92709, 84280, 84280, 84280, 92709, 84280, 84280, 84280, 92709, 92709, 84280, 84280, 84280, 84280, 84280, 92709, 92709, 84280, 84280, 84280, 92709, 92709, 92709, 84280, 84280, 84280, 92709, 84280, 92709, 84280, 92709, 92709, 84280, 92709, 92709, 92709, 84280, 92709, 92709, 84280, 92709, 84280, 92709, 84280, 84280, 92709, 84280, 92709, 84280, 92709, 84280, 84280, 92709, 92709, 84280, 84280, 84280, 92709, 84280, 92709, 92709, 84280, 92709, 92709, 84280, 84280, 92709, 84280, 92709, 92709, 84280, 84280, 92709, 84280, 92709, 84280, 92709, 84280, 92709, 92709, 92709, 76619, 92709, 84280, 84280, 84280, 92709, 92709, 92709, 92709, 92709, 84280, 84280, 92709, 84280, 84280, 84280, 84280, 92709, 84280, 84280, 92709, 92709, 92709, 84280, 84280, 84280, 92709, 92709, 92709, 84280, 84280, 84280, 92709, 84280, 92709, 84280, 92709, 84280, 84280, 92709, 84280, 92709, 84280, 84280, 84280, 92709, 92709, 92709, 84280, 92709, 84280, 84280, 92709, 84280, 84280, 92709, 84280, 84280, 92709, 84280, 84280, 84280, 84280, 84280, 84280, 84280, 92709, 84280, 92709, 92709, 84280, 84280, 84280, 84280, 92709, 84280, 84280, 84280, 84280, 84280, 84280, 84280, 92709, 92709 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 12,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 21 ],
      "Objectives" : {
        "DurationInMs" : 2854,
        "TotalTasksDurationInMs" : 2842,
        "IOBytes" : {
          "Total" : 90218283,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 39721970,
            "SW" : 50496313
          }
        }
      }
    },
    "8" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 547200820,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 287956440,
                "rowCount" : 14397822
              },
              "compileTime" : {
                "sizeInBytes" : 287956440,
                "rowCount" : 14397822
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cr_item_sk#140, cr_order_number#154L] "
          },
          "1" : {
            "sign" : -1364696436,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2246060232,
                "rowCount" : 14397822
              },
              "compileTime" : {
                "sizeInBytes" : 2246060232,
                "rowCount" : 14397822
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(cr_item_sk#140) AND isnotnull(cr_order_number#154L)) "
          },
          "2" : {
            "sign" : 1154450115,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2246060232,
                "rowCount" : 14397822
              },
              "compileTime" : {
                "sizeInBytes" : 2246060232,
                "rowCount" : 14397822
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cr_returned_time_sk#139, cr_item_sk#140, cr_refunded_customer_sk#141, cr_refunded_cdemo_sk#142, cr_refunded_hdemo_sk#143, cr_refunded_addr_sk#144, cr_returning_customer_sk#145, cr_returning_cdemo_sk#146, cr_returning_hdemo_sk#147, cr_returning_addr_sk#148, cr_call_center_sk#149, cr_catalog_page_sk#150, cr_ship_mode_sk#151, cr_warehouse_sk#152, cr_reason_sk#153, cr_order_number#154L, cr_return_quantity#155, cr_return_amount#156, cr_return_tax#157, cr_return_amt_inc_tax#158, cr_fee#159, cr_return_ship_cost#160, cr_refunded_cash#161, cr_reversed_charge#162, ... 3 more fields], `spark_catalog`.`tpcds_100`.`catalog_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cr_item_sk#140, cr_order_number#154L]\n+- Filter (isnotnull(cr_item_sk#140) AND isnotnull(cr_order_number#154L))\n   +- Relation spark_catalog.tpcds_100.catalog_returns[cr_returned_time_sk#139,cr_item_sk#140,cr_refunded_customer_sk#141,cr_refunded_cdemo_sk#142,cr_refunded_hdemo_sk#143,cr_refunded_addr_sk#144,cr_returning_customer_sk#145,cr_returning_cdemo_sk#146,cr_returning_hdemo_sk#147,cr_returning_addr_sk#148,cr_call_center_sk#149,cr_catalog_page_sk#150,cr_ship_mode_sk#151,cr_warehouse_sk#152,cr_reason_sk#153,cr_order_number#154L,cr_return_quantity#155,cr_return_amount#156,cr_return_tax#157,cr_return_amt_inc_tax#158,cr_fee#159,cr_return_ship_cost#160,cr_refunded_cash#161,cr_reversed_charge#162,... 3 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1053885594,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 287956440,
            "rowCount" : 14397822,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [cr_item_sk#140, cr_order_number#154L] Input [3]: [cr_item_sk#140, cr_order_number#154L, cr_returned_date_sk#165] "
          },
          "1" : {
            "sign" : 174671858,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 287956440,
            "rowCount" : 14397822,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [cr_item_sk#140, cr_order_number#154L, cr_returned_date_sk#165] Condition : (isnotnull(cr_item_sk#140) AND isnotnull(cr_order_number#154L)) "
          },
          "2" : {
            "sign" : 1535825961,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 287956440,
            "rowCount" : 14397822,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.catalog_returns Output [3]: [cr_item_sk#140, cr_order_number#154L, cr_returned_date_sk#165] Batched: true Location: CatalogFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_returns] PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)] ReadSchema: struct<cr_item_sk:int,cr_order_number:bigint> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.catalog_returns",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cr_item_sk#140, cr_order_number#154L]\n+- Filter (isnotnull(cr_item_sk#140) AND isnotnull(cr_order_number#154L))\n   +- FileScan parquet spark_catalog.tpcds_100.catalog_returns[cr_item_sk#140,cr_order_number#154L,cr_returned_date_sk#165] Batched: true, DataFilters: [isnotnull(cr_item_sk#140), isnotnull(cr_order_number#154L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_re..., PartitionFilters: [], PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)], ReadSchema: struct<cr_item_sk:int,cr_order_number:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 287956440,
        "inputRowCount" : 14397822
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 8,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 11 ],
      "Objectives" : {
        "DurationInMs" : 22412,
        "TotalTasksDurationInMs" : 305115,
        "IOBytes" : {
          "Total" : 314779739,
          "Details" : {
            "IR" : 148438594,
            "IW" : 0,
            "SR" : 0,
            "SW" : 166341145
          }
        }
      }
    },
    "4" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 636141117,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 570,
                "rowCount" : 15
              },
              "compileTime" : {
                "sizeInBytes" : 570,
                "rowCount" : 15
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [w_warehouse_sk#42, w_warehouse_name#44] "
          },
          "1" : {
            "sign" : 286634251,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3810,
                "rowCount" : 15
              },
              "compileTime" : {
                "sizeInBytes" : 3810,
                "rowCount" : 15
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(w_warehouse_sk#42) "
          },
          "2" : {
            "sign" : -1760684413,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3810,
                "rowCount" : 15
              },
              "compileTime" : {
                "sizeInBytes" : 3810,
                "rowCount" : 15
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [w_warehouse_sk#42, w_warehouse_id#43, w_warehouse_name#44, w_warehouse_sq_ft#45, w_street_number#46, w_street_name#47, w_street_type#48, w_suite_number#49, w_city#50, w_county#51, w_state#52, w_zip#53, w_country#54, w_gmt_offset#55], `spark_catalog`.`tpcds_100`.`warehouse`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [w_warehouse_sk#42, w_warehouse_name#44]\n+- Filter isnotnull(w_warehouse_sk#42)\n   +- Relation spark_catalog.tpcds_100.warehouse[w_warehouse_sk#42,w_warehouse_id#43,w_warehouse_name#44,w_warehouse_sq_ft#45,w_street_number#46,w_street_name#47,w_street_type#48,w_suite_number#49,w_city#50,w_county#51,w_state#52,w_zip#53,w_country#54,w_gmt_offset#55] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 28404144,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 570,
            "rowCount" : 15,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [w_warehouse_sk#42, w_warehouse_name#44] Condition : isnotnull(w_warehouse_sk#42) "
          },
          "1" : {
            "sign" : -2026246856,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 570,
            "rowCount" : 15,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.warehouse Output [2]: [w_warehouse_sk#42, w_warehouse_name#44] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/warehouse] PushedFilters: [IsNotNull(w_warehouse_sk)] ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.warehouse",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull(w_warehouse_sk#42)\n+- FileScan parquet spark_catalog.tpcds_100.warehouse[w_warehouse_sk#42,w_warehouse_name#44] Batched: true, DataFilters: [isnotnull(w_warehouse_sk#42)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/warehouse], PartitionFilters: [], PushedFilters: [IsNotNull(w_warehouse_sk)], ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 570,
        "inputRowCount" : 15
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 4 ],
      "Objectives" : {
        "DurationInMs" : 4724,
        "TotalTasksDurationInMs" : 4720,
        "IOBytes" : {
          "Total" : 6239,
          "Details" : {
            "IR" : 6239,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "11" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -316335885,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7479878148,
                "rowCount" : 138516262
              },
              "compileTime" : {
                "sizeInBytes" : 7479878148,
                "rowCount" : 138516262
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, d_week_seq#96] "
          },
          "1" : {
            "sign" : -216162468,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11358333484,
                "rowCount" : 138516262
              },
              "compileTime" : {
                "sizeInBytes" : 11358333484,
                "rowCount" : 138516262
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((((inv_quantity_on_hand#40 < cs_quantity#21) AND (cs_item_sk#18 = inv_item_sk#38)) AND (cs_sold_date_sk#37 = d_date_sk#92)) AND (d_date#276 > date_add(d_date#94, 5))) "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, d_week_seq#96]\n+- Join Inner, ((((inv_quantity_on_hand#40 < cs_quantity#21) AND (cs_item_sk#18 = inv_item_sk#38)) AND (cs_sold_date_sk#37 = d_date_sk#92)) AND (d_date#276 > date_add(d_date#94, 5)))\n   :- Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276]\n   :  +- Join Inner, (cs_bill_cdemo_sk#7 = cd_demo_sk#78)\n   :     :- Project [cs_bill_cdemo_sk#7, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276]\n   :     :  +- Join Inner, (cs_ship_date_sk#5 = d_date_sk#274)\n   :     :     :- Project [cs_ship_date_sk#5, cs_bill_cdemo_sk#7, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37]\n   :     :     :  +- Join Inner, (cs_bill_hdemo_sk#8 = hd_demo_sk#87)\n   :     :     :     :- Project [cs_ship_date_sk#5, cs_bill_cdemo_sk#7, cs_bill_hdemo_sk#8, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37]\n   :     :     :     :  +- Filter ((((((isnotnull(cs_quantity#21) AND isnotnull(cs_item_sk#18)) AND isnotnull(cs_bill_cdemo_sk#7)) AND isnotnull(cs_bill_hdemo_sk#8)) AND isnotnull(cs_sold_date_sk#37)) AND isnotnull(cs_ship_date_sk#5)) AND dynamicpruning#312 [cs_sold_date_sk#37])\n   :     :     :     :     :  +- Project [inv_item_sk#38, inv_quantity_on_hand#40, w_warehouse_name#44, d_date_sk#92, d_date#94, d_week_seq#96]\n   :     :     :     :     :     +- Join Inner, (d_week_seq#96 = d_week_seq#250)\n   :     :     :     :     :        :- Project [inv_item_sk#38, inv_quantity_on_hand#40, d_week_seq#250, w_warehouse_name#44]\n   :     :     :     :     :        :  +- Join Inner, (w_warehouse_sk#42 = inv_warehouse_sk#39)\n   :     :     :     :     :        :     :- Project [inv_item_sk#38, inv_warehouse_sk#39, inv_quantity_on_hand#40, d_week_seq#250]\n   :     :     :     :     :        :     :  +- Join Inner, (inv_date_sk#41 = d_date_sk#246)\n   :     :     :     :     :        :     :     :- Filter (((isnotnull(inv_quantity_on_hand#40) AND isnotnull(inv_item_sk#38)) AND isnotnull(inv_warehouse_sk#39)) AND isnotnull(inv_date_sk#41))\n   :     :     :     :     :        :     :     :  +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#38,inv_warehouse_sk#39,inv_quantity_on_hand#40,inv_date_sk#41] parquet\n   :     :     :     :     :        :     :     +- Project [d_date_sk#246, d_week_seq#250]\n   :     :     :     :     :        :     :        +- Filter (isnotnull(d_week_seq#250) AND isnotnull(d_date_sk#246))\n   :     :     :     :     :        :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#246,d_date_id#247,d_date#248,d_month_seq#249,d_week_seq#250,d_quarter_seq#251,d_year#252,d_dow#253,d_moy#254,d_dom#255,d_qoy#256,d_fy_year#257,d_fy_quarter_seq#258,d_fy_week_seq#259,d_day_name#260,d_quarter_name#261,d_holiday#262,d_weekend#263,d_following_holiday#264,d_first_dom#265,d_last_dom#266,d_same_day_ly#267,d_same_day_lq#268,d_current_day#269,... 4 more fields] parquet\n   :     :     :     :     :        :     +- Project [w_warehouse_sk#42, w_warehouse_name#44]\n   :     :     :     :     :        :        +- Filter isnotnull(w_warehouse_sk#42)\n   :     :     :     :     :        :           +- Relation spark_catalog.tpcds_100.warehouse[w_warehouse_sk#42,w_warehouse_id#43,w_warehouse_name#44,w_warehouse_sq_ft#45,w_street_number#46,w_street_name#47,w_street_type#48,w_suite_number#49,w_city#50,w_county#51,w_state#52,w_zip#53,w_country#54,w_gmt_offset#55] parquet\n   :     :     :     :     :        +- Project [d_date_sk#92, d_date#94, d_week_seq#96]\n   :     :     :     :     :           +- Filter (((isnotnull(d_year#98) AND (d_year#98 = 2001)) AND isnotnull(d_date_sk#92)) AND (isnotnull(d_week_seq#96) AND isnotnull(d_date#94)))\n   :     :     :     :     :              +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#92,d_date_id#93,d_date#94,d_month_seq#95,d_week_seq#96,d_quarter_seq#97,d_year#98,d_dow#99,d_moy#100,d_dom#101,d_qoy#102,d_fy_year#103,d_fy_quarter_seq#104,d_fy_week_seq#105,d_day_name#106,d_quarter_name#107,d_holiday#108,d_weekend#109,d_following_holiday#110,d_first_dom#111,d_last_dom#112,d_same_day_ly#113,d_same_day_lq#114,d_current_day#115,... 4 more fields] parquet\n   :     :     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#4,cs_ship_date_sk#5,cs_bill_customer_sk#6,cs_bill_cdemo_sk#7,cs_bill_hdemo_sk#8,cs_bill_addr_sk#9,cs_ship_customer_sk#10,cs_ship_cdemo_sk#11,cs_ship_hdemo_sk#12,cs_ship_addr_sk#13,cs_call_center_sk#14,cs_catalog_page_sk#15,cs_ship_mode_sk#16,cs_warehouse_sk#17,cs_item_sk#18,cs_promo_sk#19,cs_order_number#20L,cs_quantity#21,cs_wholesale_cost#22,cs_list_price#23,cs_sales_price#24,cs_ext_discount_amt#25,cs_ext_sales_price#26,cs_ext_wholesale_cost#27,... 10 more fields] parquet\n   :     :     :     +- Project [hd_demo_sk#87]\n   :     :     :        +- Filter ((isnotnull(hd_buy_potential#89) AND (hd_buy_potential#89 = 1001-5000)) AND isnotnull(hd_demo_sk#87))\n   :     :     :           +- Relation spark_catalog.tpcds_100.household_demographics[hd_demo_sk#87,hd_income_band_sk#88,hd_buy_potential#89,hd_dep_count#90,hd_vehicle_count#91] parquet\n   :     :     +- Project [d_date_sk#274, d_date#276]\n   :     :        +- Filter (isnotnull(d_date#276) AND isnotnull(d_date_sk#274))\n   :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#274,d_date_id#275,d_date#276,d_month_seq#277,d_week_seq#278,d_quarter_seq#279,d_year#280,d_dow#281,d_moy#282,d_dom#283,d_qoy#284,d_fy_year#285,d_fy_quarter_seq#286,d_fy_week_seq#287,d_day_name#288,d_quarter_name#289,d_holiday#290,d_weekend#291,d_following_holiday#292,d_first_dom#293,d_last_dom#294,d_same_day_ly#295,d_same_day_lq#296,d_current_day#297,... 4 more fields] parquet\n   :     +- Project [cd_demo_sk#78]\n   :        +- Filter ((isnotnull(cd_marital_status#80) AND (cd_marital_status#80 = M)) AND isnotnull(cd_demo_sk#78))\n   :           +- Relation spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#78,cd_gender#79,cd_marital_status#80,cd_education_status#81,cd_purchase_estimate#82,cd_credit_rating#83,cd_dep_count#84,cd_dep_employed_count#85,cd_dep_college_count#86] parquet\n   +- Project [inv_item_sk#38, inv_quantity_on_hand#40, w_warehouse_name#44, d_date_sk#92, d_date#94, d_week_seq#96]\n      +- Join Inner, (d_week_seq#96 = d_week_seq#250)\n         :- Project [inv_item_sk#38, inv_quantity_on_hand#40, d_week_seq#250, w_warehouse_name#44]\n         :  +- Join Inner, (w_warehouse_sk#42 = inv_warehouse_sk#39)\n         :     :- Project [inv_item_sk#38, inv_warehouse_sk#39, inv_quantity_on_hand#40, d_week_seq#250]\n         :     :  +- Join Inner, (inv_date_sk#41 = d_date_sk#246)\n         :     :     :- Filter (((isnotnull(inv_quantity_on_hand#40) AND isnotnull(inv_item_sk#38)) AND isnotnull(inv_warehouse_sk#39)) AND isnotnull(inv_date_sk#41))\n         :     :     :  +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#38,inv_warehouse_sk#39,inv_quantity_on_hand#40,inv_date_sk#41] parquet\n         :     :     +- Project [d_date_sk#246, d_week_seq#250]\n         :     :        +- Filter (isnotnull(d_week_seq#250) AND isnotnull(d_date_sk#246))\n         :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#246,d_date_id#247,d_date#248,d_month_seq#249,d_week_seq#250,d_quarter_seq#251,d_year#252,d_dow#253,d_moy#254,d_dom#255,d_qoy#256,d_fy_year#257,d_fy_quarter_seq#258,d_fy_week_seq#259,d_day_name#260,d_quarter_name#261,d_holiday#262,d_weekend#263,d_following_holiday#264,d_first_dom#265,d_last_dom#266,d_same_day_ly#267,d_same_day_lq#268,d_current_day#269,... 4 more fields] parquet\n         :     +- Project [w_warehouse_sk#42, w_warehouse_name#44]\n         :        +- Filter isnotnull(w_warehouse_sk#42)\n         :           +- Relation spark_catalog.tpcds_100.warehouse[w_warehouse_sk#42,w_warehouse_id#43,w_warehouse_name#44,w_warehouse_sq_ft#45,w_street_number#46,w_street_name#47,w_street_type#48,w_suite_number#49,w_city#50,w_county#51,w_state#52,w_zip#53,w_country#54,w_gmt_offset#55] parquet\n         +- Project [d_date_sk#92, d_date#94, d_week_seq#96]\n            +- Filter (((isnotnull(d_year#98) AND (d_year#98 = 2001)) AND isnotnull(d_date_sk#92)) AND (isnotnull(d_week_seq#96) AND isnotnull(d_date#94)))\n               +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#92,d_date_id#93,d_date#94,d_month_seq#95,d_week_seq#96,d_quarter_seq#97,d_year#98,d_dow#99,d_moy#100,d_dom#101,d_qoy#102,d_fy_year#103,d_fy_quarter_seq#104,d_fy_week_seq#105,d_day_name#106,d_quarter_name#107,d_holiday#108,d_weekend#109,d_following_holiday#110,d_first_dom#111,d_last_dom#112,d_same_day_ly#113,d_same_day_lq#114,d_current_day#115,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 1400267698,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [6]: [inv_item_sk#38, inv_quantity_on_hand#40, w_warehouse_name#44, d_date_sk#92, d_date#94, d_week_seq#96] Arguments: [inv_item_sk#38 ASC NULLS FIRST, d_date_sk#92 ASC NULLS FIRST], false, 0 "
          },
          "5" : {
            "sign" : -485254523,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 38483303416,
            "rowCount" : 530559925,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [6]: [inv_item_sk#38, inv_quantity_on_hand#40, w_warehouse_name#44, d_date_sk#92, d_date#94, d_week_seq#96] Arguments: 10 "
          },
          "1" : {
            "sign" : 991838350,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 11358333484,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [2]: [cs_item_sk#18, cs_sold_date_sk#37] Right keys [2]: [inv_item_sk#38, d_date_sk#92] Join type: Inner Join condition: ((inv_quantity_on_hand#40 < cs_quantity#21) AND (d_date#276 > date_add(d_date#94, 5))) "
          },
          "0" : {
            "sign" : 289258777,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 7479878148,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, d_week_seq#96] Input [12]: [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276, inv_item_sk#38, inv_quantity_on_hand#40, w_warehouse_name#44, d_date_sk#92, d_date#94, d_week_seq#96] "
          },
          "2" : {
            "sign" : -1613402770,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [6]: [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276] Arguments: [cs_item_sk#18 ASC NULLS FIRST, cs_sold_date_sk#37 ASC NULLS FIRST], false, 0 "
          },
          "3" : {
            "sign" : -1026801876,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 266467152,
            "rowCount" : 4758342,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [6]: [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276] Arguments: 9 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "SortMergeJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, d_week_seq#96]\n+- SortMergeJoin [cs_item_sk#18, cs_sold_date_sk#37], [inv_item_sk#38, d_date_sk#92], Inner, ((inv_quantity_on_hand#40 < cs_quantity#21) AND (d_date#276 > date_add(d_date#94, 5)))\n   :- Sort [cs_item_sk#18 ASC NULLS FIRST, cs_sold_date_sk#37 ASC NULLS FIRST], false, 0\n   :  +- ShuffleQueryStage 9\n   :     +- Exchange hashpartitioning(cs_item_sk#18, cs_sold_date_sk#37, 200), ENSURE_REQUIREMENTS, [plan_id=963]\n   :        +- *(10) Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276]\n   :           +- *(10) BroadcastHashJoin [cs_bill_cdemo_sk#7], [cd_demo_sk#78], Inner, BuildRight, false\n   :              :- *(10) Project [cs_bill_cdemo_sk#7, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276]\n   :              :  +- *(10) BroadcastHashJoin [cs_ship_date_sk#5], [d_date_sk#274], Inner, BuildRight, false\n   :              :     :- *(10) Project [cs_ship_date_sk#5, cs_bill_cdemo_sk#7, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37]\n   :              :     :  +- *(10) BroadcastHashJoin [cs_bill_hdemo_sk#8], [hd_demo_sk#87], Inner, BuildRight, false\n   :              :     :     :- *(10) Filter ((((isnotnull(cs_quantity#21) AND isnotnull(cs_item_sk#18)) AND isnotnull(cs_bill_cdemo_sk#7)) AND isnotnull(cs_bill_hdemo_sk#8)) AND isnotnull(cs_ship_date_sk#5))\n   :              :     :     :  +- *(10) ColumnarToRow\n   :              :     :     :     +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_ship_date_sk#5,cs_bill_cdemo_sk#7,cs_bill_hdemo_sk#8,cs_item_sk#18,cs_promo_sk#19,cs_order_number#20L,cs_quantity#21,cs_sold_date_sk#37] Batched: true, DataFilters: [isnotnull(cs_quantity#21), isnotnull(cs_item_sk#18), isnotnull(cs_bill_cdemo_sk#7), isnotnull(cs..., Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#37), dynamicpruningexpression(true)], PushedFilters: [IsNotNull(cs_quantity), IsNotNull(cs_item_sk), IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_hd..., ReadSchema: struct<cs_ship_date_sk:int,cs_bill_cdemo_sk:int,cs_bill_hdemo_sk:int,cs_item_sk:int,cs_promo_sk:i...\n   :              :     :     +- BroadcastQueryStage 0\n   :              :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=493]\n   :              :     :           +- *(1) Project [hd_demo_sk#87]\n   :              :     :              +- *(1) Filter ((isnotnull(hd_buy_potential#89) AND (hd_buy_potential#89 = 1001-5000)) AND isnotnull(hd_demo_sk#87))\n   :              :     :                 +- *(1) ColumnarToRow\n   :              :     :                    +- FileScan parquet spark_catalog.tpcds_100.household_demographics[hd_demo_sk#87,hd_buy_potential#89] Batched: true, DataFilters: [isnotnull(hd_buy_potential#89), (hd_buy_potential#89 = 1001-5000), isnotnull(hd_demo_sk#87)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/household..., PartitionFilters: [], PushedFilters: [IsNotNull(hd_buy_potential), EqualTo(hd_buy_potential,1001-5000), IsNotNull(hd_demo_sk)], ReadSchema: struct<hd_demo_sk:int,hd_buy_potential:string>\n   :              :     +- BroadcastQueryStage 1\n   :              :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=512]\n   :              :           +- *(2) Filter (isnotnull(d_date#276) AND isnotnull(d_date_sk#274))\n   :              :              +- *(2) ColumnarToRow\n   :              :                 +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#274,d_date#276] Batched: true, DataFilters: [isnotnull(d_date#276), isnotnull(d_date_sk#274)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_date:date>\n   :              +- BroadcastQueryStage 2\n   :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=531]\n   :                    +- *(3) Project [cd_demo_sk#78]\n   :                       +- *(3) Filter ((isnotnull(cd_marital_status#80) AND (cd_marital_status#80 = M)) AND isnotnull(cd_demo_sk#78))\n   :                          +- *(3) ColumnarToRow\n   :                             +- FileScan parquet spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#78,cd_marital_status#80] Batched: true, DataFilters: [isnotnull(cd_marital_status#80), (cd_marital_status#80 = M), isnotnull(cd_demo_sk#78)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(cd_marital_status), EqualTo(cd_marital_status,M), IsNotNull(cd_demo_sk)], ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string>\n   +- Sort [inv_item_sk#38 ASC NULLS FIRST, d_date_sk#92 ASC NULLS FIRST], false, 0\n      +- ShuffleQueryStage 10\n         +- Exchange hashpartitioning(inv_item_sk#38, d_date_sk#92, 200), ENSURE_REQUIREMENTS, [plan_id=1010]\n            +- *(11) Project [inv_item_sk#38, inv_quantity_on_hand#40, w_warehouse_name#44, d_date_sk#92, d_date#94, d_week_seq#96]\n               +- *(11) BroadcastHashJoin [d_week_seq#250], [d_week_seq#96], Inner, BuildRight, false\n                  :- *(11) Project [inv_item_sk#38, inv_quantity_on_hand#40, d_week_seq#250, w_warehouse_name#44]\n                  :  +- *(11) BroadcastHashJoin [inv_warehouse_sk#39], [w_warehouse_sk#42], Inner, BuildRight, false\n                  :     :- *(11) Project [inv_item_sk#38, inv_warehouse_sk#39, inv_quantity_on_hand#40, d_week_seq#250]\n                  :     :  +- *(11) BroadcastHashJoin [inv_date_sk#41], [d_date_sk#246], Inner, BuildRight, false\n                  :     :     :- *(11) Filter ((isnotnull(inv_quantity_on_hand#40) AND isnotnull(inv_item_sk#38)) AND isnotnull(inv_warehouse_sk#39))\n                  :     :     :  +- *(11) ColumnarToRow\n                  :     :     :     +- FileScan parquet spark_catalog.tpcds_100.inventory[inv_item_sk#38,inv_warehouse_sk#39,inv_quantity_on_hand#40,inv_date_sk#41] Batched: true, DataFilters: [isnotnull(inv_quantity_on_hand#40), isnotnull(inv_item_sk#38), isnotnull(inv_warehouse_sk#39)], Format: Parquet, Location: InMemoryFileIndex(261 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/invento..., PartitionFilters: [isnotnull(inv_date_sk#41)], PushedFilters: [IsNotNull(inv_quantity_on_hand), IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)], ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>\n                  :     :     +- BroadcastQueryStage 3\n                  :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=552]\n                  :     :           +- *(4) Filter (isnotnull(d_week_seq#250) AND isnotnull(d_date_sk#246))\n                  :     :              +- *(4) ColumnarToRow\n                  :     :                 +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#246,d_week_seq#250] Batched: true, DataFilters: [isnotnull(d_week_seq#250), isnotnull(d_date_sk#246)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_week_seq:int>\n                  :     +- BroadcastQueryStage 4\n                  :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=569]\n                  :           +- *(5) Filter isnotnull(w_warehouse_sk#42)\n                  :              +- *(5) ColumnarToRow\n                  :                 +- FileScan parquet spark_catalog.tpcds_100.warehouse[w_warehouse_sk#42,w_warehouse_name#44] Batched: true, DataFilters: [isnotnull(w_warehouse_sk#42)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/warehouse], PartitionFilters: [], PushedFilters: [IsNotNull(w_warehouse_sk)], ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>\n                  +- BroadcastQueryStage 5\n                     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [plan_id=588]\n                        +- *(6) Project [d_date_sk#92, d_date#94, d_week_seq#96]\n                           +- *(6) Filter ((((isnotnull(d_year#98) AND (d_year#98 = 2001)) AND isnotnull(d_date_sk#92)) AND isnotnull(d_week_seq#96)) AND isnotnull(d_date#94))\n                              +- *(6) ColumnarToRow\n                                 +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#92,d_date#94,d_week_seq#96,d_year#98] Batched: true, DataFilters: [isnotnull(d_year#98), (d_year#98 = 2001), isnotnull(d_date_sk#92), isnotnull(d_week_seq#96), isn..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk), IsNotNull(d_week_seq), IsNotNull(..., ReadSchema: struct<d_date_sk:int,d_date:date,d_week_seq:int,d_year:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 38749770568,
        "inputRowCount" : 535318267
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "2" : [ 654178, 650486, 646620, 652932, 645360, 641610, 650818, 640693, 649460, 649634, 648398, 643291, 647753, 637714, 650495, 650278, 637498, 644304, 637101, 650601, 640426, 651499, 645889, 652834, 646948, 636850, 644594, 649723, 640949, 652307, 640393, 647922, 643054, 646489, 639538, 649268, 645654, 634854, 651067, 648030, 645578, 645093, 657157, 646809, 648319, 646075, 637205, 651330, 643648, 645177, 642746, 648751, 644981, 648013, 655359, 646055, 640170, 641189, 639522, 645078, 645630, 646847, 649515, 646149, 648072, 642337, 643088, 649593, 651844, 639639, 648228, 640618, 644769, 646345, 649972, 648205, 644979, 651757, 649967, 643440, 647534, 648746, 650429, 650891, 645429, 640288, 647313, 649385, 649006, 643173, 646487, 655414, 645253, 648638, 649942, 647005, 640030, 650357, 650468, 642218, 647606, 647125, 644483, 647012, 643700, 639588, 640391, 645345, 642513, 643911, 640668, 640718, 645234, 650266, 640132, 650412, 640690, 643709, 640121, 648931, 645452, 651030, 646231, 650877, 646071, 649126, 648915, 642978, 645893, 644418, 644688, 643187, 643342, 641615, 643609, 645740, 644717, 643628, 639635, 655357, 643557, 646513, 647424, 644212, 648841, 646819, 643664, 651208, 646861, 646697, 643374, 643094, 640001, 639093, 644725, 643069, 643927, 643615, 656245, 649605, 647256, 652656, 645016, 641054, 645992, 647908, 649534, 648750, 640270, 646632, 648311, 643557, 647402, 644426, 650469, 641850, 642039, 647078, 647655, 644419, 644274, 642454, 641271, 644268, 646681, 641873, 647951, 646710, 645895, 642228, 645030, 640906, 649081, 641591, 654357, 650741, 647276, 644911, 649036, 654199 ],
        "3" : [ 34952062, 34952062, 34827322, 34889692, 34636815, 34574445, 34952062, 34818366, 34636815, 34827322, 34889692, 34952062, 34952062, 34503119, 34889692, 34827322, 34755996, 34636815, 34952062, 34952062, 34818366, 34952062, 34952062, 34889692, 34952062, 34952062, 34818366, 34755996, 34631256, 34952062, 34636815, 34952062, 34952062, 34952062, 34952062, 34889692, 34574445, 34952062, 34889692, 34889692, 34574445, 34889692, 34952062, 34952062, 34952062, 34952062, 34889692, 34889692, 34952062, 34952062, 34889692, 34636815, 34636815, 34636815, 34827322, 34952062, 34952062, 34889692, 34889692, 34503119, 34952062, 34818366, 34827322, 34764952, 34952062, 34889692, 34889692, 34827322, 34574445, 34889692, 34827322, 34952062, 34952062, 34952062, 34889692, 34440749, 34889692, 34818366, 34512075, 34834980, 34952062, 34889692, 34952062, 34574445, 34755996, 34631256, 34889692, 34952062, 34952062, 34952062, 34636815, 34889692, 34952062, 34755996, 34952062, 34827322, 34827322, 34755996, 34889692, 34636815, 34889692, 34952062, 34889692, 34574445, 34764952, 34889692, 34818366, 34952062, 34574445, 34889692, 34889692, 34889692, 34889692, 34818366, 34952062, 34889692, 34755996, 34889692, 34952062, 34952062, 34889692, 34889692, 34818366, 34952062, 34952062, 34952062, 34952062, 34636815, 35147806, 34952062, 34952062, 34952062, 34952062, 34574445, 34636815, 34889692, 34889692, 34952062, 34952062, 34952062, 34321568, 34574445, 34889692, 34818366, 34889692, 34889692, 34952062, 34889692, 34818366, 34952062, 34755996, 34889692, 34952062, 34636815, 34889692, 34952062, 34952062, 34574445, 34952062, 34827322, 34952062, 34889692, 34889692, 34952062, 34636815, 34952062, 34889692, 34818366, 34889692, 34952062, 34952062, 34827322, 34818366, 34889692, 34952062, 34889692, 35147806, 34636815, 34952062, 34952062, 34827322, 34952062, 34818366, 34889692, 34952062, 34889692, 34952062, 35147806, 34952062, 35147806, 34952062, 34952062, 34818366, 34952062, 34636815, 34952062, 34889692, 34952062, 34321568, 34818366 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 11,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 16 ],
      "Objectives" : {
        "DurationInMs" : 46789,
        "TotalTasksDurationInMs" : 684123,
        "IOBytes" : {
          "Total" : 6784130012,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 6761166699,
            "SW" : 22963313
          }
        }
      }
    },
    "9" : {
      "QSLogical" : {
        "operators" : {
          "8" : {
            "sign" : -2121399422,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              },
              "compileTime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#4, cs_ship_date_sk#5, cs_bill_customer_sk#6, cs_bill_cdemo_sk#7, cs_bill_hdemo_sk#8, cs_bill_addr_sk#9, cs_ship_customer_sk#10, cs_ship_cdemo_sk#11, cs_ship_hdemo_sk#12, cs_ship_addr_sk#13, cs_call_center_sk#14, cs_catalog_page_sk#15, cs_ship_mode_sk#16, cs_warehouse_sk#17, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_wholesale_cost#22, cs_list_price#23, cs_sales_price#24, cs_ext_discount_amt#25, cs_ext_sales_price#26, cs_ext_wholesale_cost#27, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "4" : {
            "sign" : -1742305774,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5666080280,
                "rowCount" : 141652007
              },
              "compileTime" : {
                "sizeInBytes" : 5666080280,
                "rowCount" : 141652007
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ship_date_sk#5, cs_bill_cdemo_sk#7, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37] "
          },
          "5" : {
            "sign" : 1697874553,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6799296336,
                "rowCount" : 141652007
              },
              "compileTime" : {
                "sizeInBytes" : 6799296336,
                "rowCount" : 141652007
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_bill_hdemo_sk#8 = hd_demo_sk#87) "
          },
          "6" : {
            "sign" : -1095379746,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6178719272,
                "rowCount" : 140425438
              },
              "compileTime" : {
                "sizeInBytes" : 6178719272,
                "rowCount" : 140425438
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ship_date_sk#5, cs_bill_cdemo_sk#7, cs_bill_hdemo_sk#8, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37] "
          },
          "1" : {
            "sign" : -1408962813,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6310003568,
                "rowCount" : 143409172
              },
              "compileTime" : {
                "sizeInBytes" : 6310003568,
                "rowCount" : 143409172
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_bill_cdemo_sk#7 = cd_demo_sk#78) "
          },
          "0" : {
            "sign" : 1186843664,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5162730192,
                "rowCount" : 143409172
              },
              "compileTime" : {
                "sizeInBytes" : 5162730192,
                "rowCount" : 143409172
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276] "
          },
          "2" : {
            "sign" : 1264739532,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5536721800,
                "rowCount" : 138418045
              },
              "compileTime" : {
                "sizeInBytes" : 5536721800,
                "rowCount" : 138418045
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_bill_cdemo_sk#7, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276] "
          },
          "7" : {
            "sign" : -1021307787,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29208491104,
                "rowCount" : 140425438
              },
              "compileTime" : {
                "sizeInBytes" : 29208491104,
                "rowCount" : 140425438
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((((isnotnull(cs_quantity#21) AND isnotnull(cs_item_sk#18)) AND isnotnull(cs_bill_cdemo_sk#7)) AND isnotnull(cs_bill_hdemo_sk#8)) AND isnotnull(cs_sold_date_sk#37)) AND isnotnull(cs_ship_date_sk#5)) AND dynamicpruning#312 [cs_sold_date_sk#37]) "
          },
          "3" : {
            "sign" : -2027472773,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6644066160,
                "rowCount" : 138418045
              },
              "compileTime" : {
                "sizeInBytes" : 6644066160,
                "rowCount" : 138418045
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_ship_date_sk#5 = d_date_sk#274) "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalRelation",
          "toId" : 7,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276]\n+- Join Inner, (cs_bill_cdemo_sk#7 = cd_demo_sk#78)\n   :- Project [cs_bill_cdemo_sk#7, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276]\n   :  +- Join Inner, (cs_ship_date_sk#5 = d_date_sk#274)\n   :     :- Project [cs_ship_date_sk#5, cs_bill_cdemo_sk#7, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37]\n   :     :  +- Join Inner, (cs_bill_hdemo_sk#8 = hd_demo_sk#87)\n   :     :     :- Project [cs_ship_date_sk#5, cs_bill_cdemo_sk#7, cs_bill_hdemo_sk#8, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37]\n   :     :     :  +- Filter ((((((isnotnull(cs_quantity#21) AND isnotnull(cs_item_sk#18)) AND isnotnull(cs_bill_cdemo_sk#7)) AND isnotnull(cs_bill_hdemo_sk#8)) AND isnotnull(cs_sold_date_sk#37)) AND isnotnull(cs_ship_date_sk#5)) AND dynamicpruning#312 [cs_sold_date_sk#37])\n   :     :     :     :  +- Project [inv_item_sk#38, inv_quantity_on_hand#40, w_warehouse_name#44, d_date_sk#92, d_date#94, d_week_seq#96]\n   :     :     :     :     +- Join Inner, (d_week_seq#96 = d_week_seq#250)\n   :     :     :     :        :- Project [inv_item_sk#38, inv_quantity_on_hand#40, d_week_seq#250, w_warehouse_name#44]\n   :     :     :     :        :  +- Join Inner, (w_warehouse_sk#42 = inv_warehouse_sk#39)\n   :     :     :     :        :     :- Project [inv_item_sk#38, inv_warehouse_sk#39, inv_quantity_on_hand#40, d_week_seq#250]\n   :     :     :     :        :     :  +- Join Inner, (inv_date_sk#41 = d_date_sk#246)\n   :     :     :     :        :     :     :- Filter (((isnotnull(inv_quantity_on_hand#40) AND isnotnull(inv_item_sk#38)) AND isnotnull(inv_warehouse_sk#39)) AND isnotnull(inv_date_sk#41))\n   :     :     :     :        :     :     :  +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#38,inv_warehouse_sk#39,inv_quantity_on_hand#40,inv_date_sk#41] parquet\n   :     :     :     :        :     :     +- Project [d_date_sk#246, d_week_seq#250]\n   :     :     :     :        :     :        +- Filter (isnotnull(d_week_seq#250) AND isnotnull(d_date_sk#246))\n   :     :     :     :        :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#246,d_date_id#247,d_date#248,d_month_seq#249,d_week_seq#250,d_quarter_seq#251,d_year#252,d_dow#253,d_moy#254,d_dom#255,d_qoy#256,d_fy_year#257,d_fy_quarter_seq#258,d_fy_week_seq#259,d_day_name#260,d_quarter_name#261,d_holiday#262,d_weekend#263,d_following_holiday#264,d_first_dom#265,d_last_dom#266,d_same_day_ly#267,d_same_day_lq#268,d_current_day#269,... 4 more fields] parquet\n   :     :     :     :        :     +- Project [w_warehouse_sk#42, w_warehouse_name#44]\n   :     :     :     :        :        +- Filter isnotnull(w_warehouse_sk#42)\n   :     :     :     :        :           +- Relation spark_catalog.tpcds_100.warehouse[w_warehouse_sk#42,w_warehouse_id#43,w_warehouse_name#44,w_warehouse_sq_ft#45,w_street_number#46,w_street_name#47,w_street_type#48,w_suite_number#49,w_city#50,w_county#51,w_state#52,w_zip#53,w_country#54,w_gmt_offset#55] parquet\n   :     :     :     :        +- Project [d_date_sk#92, d_date#94, d_week_seq#96]\n   :     :     :     :           +- Filter (((isnotnull(d_year#98) AND (d_year#98 = 2001)) AND isnotnull(d_date_sk#92)) AND (isnotnull(d_week_seq#96) AND isnotnull(d_date#94)))\n   :     :     :     :              +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#92,d_date_id#93,d_date#94,d_month_seq#95,d_week_seq#96,d_quarter_seq#97,d_year#98,d_dow#99,d_moy#100,d_dom#101,d_qoy#102,d_fy_year#103,d_fy_quarter_seq#104,d_fy_week_seq#105,d_day_name#106,d_quarter_name#107,d_holiday#108,d_weekend#109,d_following_holiday#110,d_first_dom#111,d_last_dom#112,d_same_day_ly#113,d_same_day_lq#114,d_current_day#115,... 4 more fields] parquet\n   :     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#4,cs_ship_date_sk#5,cs_bill_customer_sk#6,cs_bill_cdemo_sk#7,cs_bill_hdemo_sk#8,cs_bill_addr_sk#9,cs_ship_customer_sk#10,cs_ship_cdemo_sk#11,cs_ship_hdemo_sk#12,cs_ship_addr_sk#13,cs_call_center_sk#14,cs_catalog_page_sk#15,cs_ship_mode_sk#16,cs_warehouse_sk#17,cs_item_sk#18,cs_promo_sk#19,cs_order_number#20L,cs_quantity#21,cs_wholesale_cost#22,cs_list_price#23,cs_sales_price#24,cs_ext_discount_amt#25,cs_ext_sales_price#26,cs_ext_wholesale_cost#27,... 10 more fields] parquet\n   :     :     +- Project [hd_demo_sk#87]\n   :     :        +- Filter ((isnotnull(hd_buy_potential#89) AND (hd_buy_potential#89 = 1001-5000)) AND isnotnull(hd_demo_sk#87))\n   :     :           +- Relation spark_catalog.tpcds_100.household_demographics[hd_demo_sk#87,hd_income_band_sk#88,hd_buy_potential#89,hd_dep_count#90,hd_vehicle_count#91] parquet\n   :     +- Project [d_date_sk#274, d_date#276]\n   :        +- Filter (isnotnull(d_date#276) AND isnotnull(d_date_sk#274))\n   :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#274,d_date_id#275,d_date#276,d_month_seq#277,d_week_seq#278,d_quarter_seq#279,d_year#280,d_dow#281,d_moy#282,d_dom#283,d_qoy#284,d_fy_year#285,d_fy_quarter_seq#286,d_fy_week_seq#287,d_day_name#288,d_quarter_name#289,d_holiday#290,d_weekend#291,d_following_holiday#292,d_first_dom#293,d_last_dom#294,d_same_day_ly#295,d_same_day_lq#296,d_current_day#297,... 4 more fields] parquet\n   +- Project [cd_demo_sk#78]\n      +- Filter ((isnotnull(cd_marital_status#80) AND (cd_marital_status#80 = M)) AND isnotnull(cd_demo_sk#78))\n         +- Relation spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#78,cd_gender#79,cd_marital_status#80,cd_education_status#81,cd_purchase_estimate#82,cd_credit_rating#83,cd_dep_count#84,cd_dep_employed_count#85,cd_dep_college_count#86] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : -308616549,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1105376,
            "rowCount" : 1200,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [hd_demo_sk#87] Arguments: 0 "
          },
          "4" : {
            "sign" : 745343392,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 5666080280,
            "rowCount" : 141652007,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [7]: [cs_ship_date_sk#5, cs_bill_cdemo_sk#7, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37] Input [9]: [cs_ship_date_sk#5, cs_bill_cdemo_sk#7, cs_bill_hdemo_sk#8, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, hd_demo_sk#87] "
          },
          "9" : {
            "sign" : 356383998,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 4778696,
            "rowCount" : 73049,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [d_date_sk#274, d_date#276] Arguments: 1 "
          },
          "5" : {
            "sign" : 394115675,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 6799296336,
            "rowCount" : 141652007,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [cs_bill_hdemo_sk#8] Right keys [1]: [hd_demo_sk#87] Join type: Inner Join condition: None "
          },
          "10" : {
            "sign" : -1371546969,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 32143552,
            "rowCount" : 384160,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [cd_demo_sk#78] Arguments: 2 "
          },
          "6" : {
            "sign" : -1140363114,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 6178719272,
            "rowCount" : 140425438,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [8]: [cs_ship_date_sk#5, cs_bill_cdemo_sk#7, cs_bill_hdemo_sk#8, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37] Condition : ((((isnotnull(cs_quantity#21) AND isnotnull(cs_item_sk#18)) AND isnotnull(cs_bill_cdemo_sk#7)) AND isnotnull(cs_bill_hdemo_sk#8)) AND isnotnull(cs_ship_date_sk#5)) "
          },
          "1" : {
            "sign" : -1128852391,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 6310003568,
            "rowCount" : 143409172,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [cs_bill_cdemo_sk#7] Right keys [1]: [cd_demo_sk#78] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 1430045720,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 5162730192,
            "rowCount" : 143409172,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276] Input [8]: [cs_bill_cdemo_sk#7, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276, cd_demo_sk#78] "
          },
          "2" : {
            "sign" : -1122657691,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 5536721800,
            "rowCount" : 138418045,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [7]: [cs_bill_cdemo_sk#7, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276] Input [9]: [cs_ship_date_sk#5, cs_bill_cdemo_sk#7, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date_sk#274, d_date#276] "
          },
          "7" : {
            "sign" : -1515376959,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 6178719272,
            "rowCount" : 140425438,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.catalog_sales Output [8]: [cs_ship_date_sk#5, cs_bill_cdemo_sk#7, cs_bill_hdemo_sk#8, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_sales/cs_sold_date_sk=2450815, ... 1835 entries] PartitionFilters: [isnotnull(cs_sold_date_sk#37), dynamicpruningexpression(true)] PushedFilters: [IsNotNull(cs_quantity), IsNotNull(cs_item_sk), IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_hdemo_sk), IsNotNull(cs_ship_date_sk)] ReadSchema: struct<cs_ship_date_sk:int,cs_bill_cdemo_sk:int,cs_bill_hdemo_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:bigint,cs_quantity:int> "
          },
          "3" : {
            "sign" : 2051560284,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 6644066160,
            "rowCount" : 138418045,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [cs_ship_date_sk#5] Right keys [1]: [d_date_sk#274] Join type: Inner Join condition: None "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.catalog_sales",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "BroadcastQueryStage",
          "toId" : 5,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "BroadcastHashJoin",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "BroadcastQueryStage",
          "toId" : 3,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "BroadcastHashJoin",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276]\n+- BroadcastHashJoin [cs_bill_cdemo_sk#7], [cd_demo_sk#78], Inner, BuildRight, false\n   :- Project [cs_bill_cdemo_sk#7, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276]\n   :  +- BroadcastHashJoin [cs_ship_date_sk#5], [d_date_sk#274], Inner, BuildRight, false\n   :     :- Project [cs_ship_date_sk#5, cs_bill_cdemo_sk#7, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37]\n   :     :  +- BroadcastHashJoin [cs_bill_hdemo_sk#8], [hd_demo_sk#87], Inner, BuildRight, false\n   :     :     :- Filter ((((isnotnull(cs_quantity#21) AND isnotnull(cs_item_sk#18)) AND isnotnull(cs_bill_cdemo_sk#7)) AND isnotnull(cs_bill_hdemo_sk#8)) AND isnotnull(cs_ship_date_sk#5))\n   :     :     :  +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_ship_date_sk#5,cs_bill_cdemo_sk#7,cs_bill_hdemo_sk#8,cs_item_sk#18,cs_promo_sk#19,cs_order_number#20L,cs_quantity#21,cs_sold_date_sk#37] Batched: true, DataFilters: [isnotnull(cs_quantity#21), isnotnull(cs_item_sk#18), isnotnull(cs_bill_cdemo_sk#7), isnotnull(cs..., Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#37), dynamicpruningexpression(true)], PushedFilters: [IsNotNull(cs_quantity), IsNotNull(cs_item_sk), IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_hd..., ReadSchema: struct<cs_ship_date_sk:int,cs_bill_cdemo_sk:int,cs_bill_hdemo_sk:int,cs_item_sk:int,cs_promo_sk:i...\n   :     :     +- BroadcastQueryStage 0\n   :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=493]\n   :     :           +- *(1) Project [hd_demo_sk#87]\n   :     :              +- *(1) Filter ((isnotnull(hd_buy_potential#89) AND (hd_buy_potential#89 = 1001-5000)) AND isnotnull(hd_demo_sk#87))\n   :     :                 +- *(1) ColumnarToRow\n   :     :                    +- FileScan parquet spark_catalog.tpcds_100.household_demographics[hd_demo_sk#87,hd_buy_potential#89] Batched: true, DataFilters: [isnotnull(hd_buy_potential#89), (hd_buy_potential#89 = 1001-5000), isnotnull(hd_demo_sk#87)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/household..., PartitionFilters: [], PushedFilters: [IsNotNull(hd_buy_potential), EqualTo(hd_buy_potential,1001-5000), IsNotNull(hd_demo_sk)], ReadSchema: struct<hd_demo_sk:int,hd_buy_potential:string>\n   :     +- BroadcastQueryStage 1\n   :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=512]\n   :           +- *(2) Filter (isnotnull(d_date#276) AND isnotnull(d_date_sk#274))\n   :              +- *(2) ColumnarToRow\n   :                 +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#274,d_date#276] Batched: true, DataFilters: [isnotnull(d_date#276), isnotnull(d_date_sk#274)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_date:date>\n   +- BroadcastQueryStage 2\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=531]\n         +- *(3) Project [cd_demo_sk#78]\n            +- *(3) Filter ((isnotnull(cd_marital_status#80) AND (cd_marital_status#80 = M)) AND isnotnull(cd_demo_sk#78))\n               +- *(3) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#78,cd_marital_status#80] Batched: true, DataFilters: [isnotnull(cd_marital_status#80), (cd_marital_status#80 = M), isnotnull(cd_demo_sk#78)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(cd_marital_status), EqualTo(cd_marital_status,M), IsNotNull(cd_demo_sk)], ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 6216746896,
        "inputRowCount" : 140883847
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 9,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 12 ],
      "Objectives" : {
        "DurationInMs" : 23940,
        "TotalTasksDurationInMs" : 79110,
        "IOBytes" : {
          "Total" : 1666341904,
          "Details" : {
            "IR" : 1543198122,
            "IW" : 0,
            "SR" : 0,
            "SW" : 123143782
          }
        }
      }
    },
    "13" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1508980001,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 36324022175,
                "rowCount" : 207565841
              },
              "compileTime" : {
                "sizeInBytes" : 36324022175,
                "rowCount" : 207565841
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_item_desc#60, w_warehouse_name#44, d_week_seq#96], [i_item_desc#60, w_warehouse_name#44, d_week_seq#96, sum(CASE WHEN isnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS no_promo#242L, sum(CASE WHEN isnotnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS promo#243L, count(1) AS total_cnt#244L] "
          },
          "1" : {
            "sign" : 1075691160,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 32172705355,
                "rowCount" : 207565841
              },
              "compileTime" : {
                "sizeInBytes" : 32172705355,
                "rowCount" : 207565841
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120] "
          },
          "2" : {
            "sign" : -1945341499,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 37154285539,
                "rowCount" : 207565841
              },
              "compileTime" : {
                "sizeInBytes" : 37154285539,
                "rowCount" : 207565841
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, ((cr_item_sk#140 = cs_item_sk#18) AND (cr_order_number#154L = cs_order_number#20L)) "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [i_item_desc#60, w_warehouse_name#44, d_week_seq#96], [i_item_desc#60, w_warehouse_name#44, d_week_seq#96, sum(CASE WHEN isnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS no_promo#242L, sum(CASE WHEN isnotnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS promo#243L, count(1) AS total_cnt#244L]\n+- Project [w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120]\n   +- Join LeftOuter, ((cr_item_sk#140 = cs_item_sk#18) AND (cr_order_number#154L = cs_order_number#20L))\n      :- Project [cs_item_sk#18, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120]\n      :  +- Join LeftOuter, (cs_promo_sk#19 = p_promo_sk#120)\n      :     :- Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96]\n      :     :  +- Join Inner, (i_item_sk#56 = cs_item_sk#18)\n      :     :     :- Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, d_week_seq#96]\n      :     :     :  +- Join Inner, ((((inv_quantity_on_hand#40 < cs_quantity#21) AND (cs_item_sk#18 = inv_item_sk#38)) AND (cs_sold_date_sk#37 = d_date_sk#92)) AND (d_date#276 > date_add(d_date#94, 5)))\n      :     :     :     :- Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276]\n      :     :     :     :  +- Join Inner, (cs_bill_cdemo_sk#7 = cd_demo_sk#78)\n      :     :     :     :     :- Project [cs_bill_cdemo_sk#7, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276]\n      :     :     :     :     :  +- Join Inner, (cs_ship_date_sk#5 = d_date_sk#274)\n      :     :     :     :     :     :- Project [cs_ship_date_sk#5, cs_bill_cdemo_sk#7, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37]\n      :     :     :     :     :     :  +- Join Inner, (cs_bill_hdemo_sk#8 = hd_demo_sk#87)\n      :     :     :     :     :     :     :- Project [cs_ship_date_sk#5, cs_bill_cdemo_sk#7, cs_bill_hdemo_sk#8, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37]\n      :     :     :     :     :     :     :  +- Filter ((((((isnotnull(cs_quantity#21) AND isnotnull(cs_item_sk#18)) AND isnotnull(cs_bill_cdemo_sk#7)) AND isnotnull(cs_bill_hdemo_sk#8)) AND isnotnull(cs_sold_date_sk#37)) AND isnotnull(cs_ship_date_sk#5)) AND dynamicpruning#312 [cs_sold_date_sk#37])\n      :     :     :     :     :     :     :     :  +- Project [inv_item_sk#38, inv_quantity_on_hand#40, w_warehouse_name#44, d_date_sk#92, d_date#94, d_week_seq#96]\n      :     :     :     :     :     :     :     :     +- Join Inner, (d_week_seq#96 = d_week_seq#250)\n      :     :     :     :     :     :     :     :        :- Project [inv_item_sk#38, inv_quantity_on_hand#40, d_week_seq#250, w_warehouse_name#44]\n      :     :     :     :     :     :     :     :        :  +- Join Inner, (w_warehouse_sk#42 = inv_warehouse_sk#39)\n      :     :     :     :     :     :     :     :        :     :- Project [inv_item_sk#38, inv_warehouse_sk#39, inv_quantity_on_hand#40, d_week_seq#250]\n      :     :     :     :     :     :     :     :        :     :  +- Join Inner, (inv_date_sk#41 = d_date_sk#246)\n      :     :     :     :     :     :     :     :        :     :     :- Filter (((isnotnull(inv_quantity_on_hand#40) AND isnotnull(inv_item_sk#38)) AND isnotnull(inv_warehouse_sk#39)) AND isnotnull(inv_date_sk#41))\n      :     :     :     :     :     :     :     :        :     :     :  +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#38,inv_warehouse_sk#39,inv_quantity_on_hand#40,inv_date_sk#41] parquet\n      :     :     :     :     :     :     :     :        :     :     +- Project [d_date_sk#246, d_week_seq#250]\n      :     :     :     :     :     :     :     :        :     :        +- Filter (isnotnull(d_week_seq#250) AND isnotnull(d_date_sk#246))\n      :     :     :     :     :     :     :     :        :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#246,d_date_id#247,d_date#248,d_month_seq#249,d_week_seq#250,d_quarter_seq#251,d_year#252,d_dow#253,d_moy#254,d_dom#255,d_qoy#256,d_fy_year#257,d_fy_quarter_seq#258,d_fy_week_seq#259,d_day_name#260,d_quarter_name#261,d_holiday#262,d_weekend#263,d_following_holiday#264,d_first_dom#265,d_last_dom#266,d_same_day_ly#267,d_same_day_lq#268,d_current_day#269,... 4 more fields] parquet\n      :     :     :     :     :     :     :     :        :     +- Project [w_warehouse_sk#42, w_warehouse_name#44]\n      :     :     :     :     :     :     :     :        :        +- Filter isnotnull(w_warehouse_sk#42)\n      :     :     :     :     :     :     :     :        :           +- Relation spark_catalog.tpcds_100.warehouse[w_warehouse_sk#42,w_warehouse_id#43,w_warehouse_name#44,w_warehouse_sq_ft#45,w_street_number#46,w_street_name#47,w_street_type#48,w_suite_number#49,w_city#50,w_county#51,w_state#52,w_zip#53,w_country#54,w_gmt_offset#55] parquet\n      :     :     :     :     :     :     :     :        +- Project [d_date_sk#92, d_date#94, d_week_seq#96]\n      :     :     :     :     :     :     :     :           +- Filter (((isnotnull(d_year#98) AND (d_year#98 = 2001)) AND isnotnull(d_date_sk#92)) AND (isnotnull(d_week_seq#96) AND isnotnull(d_date#94)))\n      :     :     :     :     :     :     :     :              +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#92,d_date_id#93,d_date#94,d_month_seq#95,d_week_seq#96,d_quarter_seq#97,d_year#98,d_dow#99,d_moy#100,d_dom#101,d_qoy#102,d_fy_year#103,d_fy_quarter_seq#104,d_fy_week_seq#105,d_day_name#106,d_quarter_name#107,d_holiday#108,d_weekend#109,d_following_holiday#110,d_first_dom#111,d_last_dom#112,d_same_day_ly#113,d_same_day_lq#114,d_current_day#115,... 4 more fields] parquet\n      :     :     :     :     :     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#4,cs_ship_date_sk#5,cs_bill_customer_sk#6,cs_bill_cdemo_sk#7,cs_bill_hdemo_sk#8,cs_bill_addr_sk#9,cs_ship_customer_sk#10,cs_ship_cdemo_sk#11,cs_ship_hdemo_sk#12,cs_ship_addr_sk#13,cs_call_center_sk#14,cs_catalog_page_sk#15,cs_ship_mode_sk#16,cs_warehouse_sk#17,cs_item_sk#18,cs_promo_sk#19,cs_order_number#20L,cs_quantity#21,cs_wholesale_cost#22,cs_list_price#23,cs_sales_price#24,cs_ext_discount_amt#25,cs_ext_sales_price#26,cs_ext_wholesale_cost#27,... 10 more fields] parquet\n      :     :     :     :     :     :     +- Project [hd_demo_sk#87]\n      :     :     :     :     :     :        +- Filter ((isnotnull(hd_buy_potential#89) AND (hd_buy_potential#89 = 1001-5000)) AND isnotnull(hd_demo_sk#87))\n      :     :     :     :     :     :           +- Relation spark_catalog.tpcds_100.household_demographics[hd_demo_sk#87,hd_income_band_sk#88,hd_buy_potential#89,hd_dep_count#90,hd_vehicle_count#91] parquet\n      :     :     :     :     :     +- Project [d_date_sk#274, d_date#276]\n      :     :     :     :     :        +- Filter (isnotnull(d_date#276) AND isnotnull(d_date_sk#274))\n      :     :     :     :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#274,d_date_id#275,d_date#276,d_month_seq#277,d_week_seq#278,d_quarter_seq#279,d_year#280,d_dow#281,d_moy#282,d_dom#283,d_qoy#284,d_fy_year#285,d_fy_quarter_seq#286,d_fy_week_seq#287,d_day_name#288,d_quarter_name#289,d_holiday#290,d_weekend#291,d_following_holiday#292,d_first_dom#293,d_last_dom#294,d_same_day_ly#295,d_same_day_lq#296,d_current_day#297,... 4 more fields] parquet\n      :     :     :     :     +- Project [cd_demo_sk#78]\n      :     :     :     :        +- Filter ((isnotnull(cd_marital_status#80) AND (cd_marital_status#80 = M)) AND isnotnull(cd_demo_sk#78))\n      :     :     :     :           +- Relation spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#78,cd_gender#79,cd_marital_status#80,cd_education_status#81,cd_purchase_estimate#82,cd_credit_rating#83,cd_dep_count#84,cd_dep_employed_count#85,cd_dep_college_count#86] parquet\n      :     :     :     +- Project [inv_item_sk#38, inv_quantity_on_hand#40, w_warehouse_name#44, d_date_sk#92, d_date#94, d_week_seq#96]\n      :     :     :        +- Join Inner, (d_week_seq#96 = d_week_seq#250)\n      :     :     :           :- Project [inv_item_sk#38, inv_quantity_on_hand#40, d_week_seq#250, w_warehouse_name#44]\n      :     :     :           :  +- Join Inner, (w_warehouse_sk#42 = inv_warehouse_sk#39)\n      :     :     :           :     :- Project [inv_item_sk#38, inv_warehouse_sk#39, inv_quantity_on_hand#40, d_week_seq#250]\n      :     :     :           :     :  +- Join Inner, (inv_date_sk#41 = d_date_sk#246)\n      :     :     :           :     :     :- Filter (((isnotnull(inv_quantity_on_hand#40) AND isnotnull(inv_item_sk#38)) AND isnotnull(inv_warehouse_sk#39)) AND isnotnull(inv_date_sk#41))\n      :     :     :           :     :     :  +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#38,inv_warehouse_sk#39,inv_quantity_on_hand#40,inv_date_sk#41] parquet\n      :     :     :           :     :     +- Project [d_date_sk#246, d_week_seq#250]\n      :     :     :           :     :        +- Filter (isnotnull(d_week_seq#250) AND isnotnull(d_date_sk#246))\n      :     :     :           :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#246,d_date_id#247,d_date#248,d_month_seq#249,d_week_seq#250,d_quarter_seq#251,d_year#252,d_dow#253,d_moy#254,d_dom#255,d_qoy#256,d_fy_year#257,d_fy_quarter_seq#258,d_fy_week_seq#259,d_day_name#260,d_quarter_name#261,d_holiday#262,d_weekend#263,d_following_holiday#264,d_first_dom#265,d_last_dom#266,d_same_day_ly#267,d_same_day_lq#268,d_current_day#269,... 4 more fields] parquet\n      :     :     :           :     +- Project [w_warehouse_sk#42, w_warehouse_name#44]\n      :     :     :           :        +- Filter isnotnull(w_warehouse_sk#42)\n      :     :     :           :           +- Relation spark_catalog.tpcds_100.warehouse[w_warehouse_sk#42,w_warehouse_id#43,w_warehouse_name#44,w_warehouse_sq_ft#45,w_street_number#46,w_street_name#47,w_street_type#48,w_suite_number#49,w_city#50,w_county#51,w_state#52,w_zip#53,w_country#54,w_gmt_offset#55] parquet\n      :     :     :           +- Project [d_date_sk#92, d_date#94, d_week_seq#96]\n      :     :     :              +- Filter (((isnotnull(d_year#98) AND (d_year#98 = 2001)) AND isnotnull(d_date_sk#92)) AND (isnotnull(d_week_seq#96) AND isnotnull(d_date#94)))\n      :     :     :                 +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#92,d_date_id#93,d_date#94,d_month_seq#95,d_week_seq#96,d_quarter_seq#97,d_year#98,d_dow#99,d_moy#100,d_dom#101,d_qoy#102,d_fy_year#103,d_fy_quarter_seq#104,d_fy_week_seq#105,d_day_name#106,d_quarter_name#107,d_holiday#108,d_weekend#109,d_following_holiday#110,d_first_dom#111,d_last_dom#112,d_same_day_ly#113,d_same_day_lq#114,d_current_day#115,... 4 more fields] parquet\n      :     :     +- Project [i_item_sk#56, i_item_desc#60]\n      :     :        +- Filter isnotnull(i_item_sk#56)\n      :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#56,i_item_id#57,i_rec_start_date#58,i_rec_end_date#59,i_item_desc#60,i_current_price#61,i_wholesale_cost#62,i_brand_id#63,i_brand#64,i_class_id#65,i_class#66,i_category_id#67,i_category#68,i_manufact_id#69,i_manufact#70,i_size#71,i_formulation#72,i_color#73,i_units#74,i_container#75,i_manager_id#76,i_product_name#77] parquet\n      :     +- Project [p_promo_sk#120]\n      :        +- Filter isnotnull(p_promo_sk#120)\n      :           +- Relation spark_catalog.tpcds_100.promotion[p_promo_sk#120,p_promo_id#121,p_start_date_sk#122,p_end_date_sk#123,p_item_sk#124,p_cost#125,p_response_target#126,p_promo_name#127,p_channel_dmail#128,p_channel_email#129,p_channel_catalog#130,p_channel_tv#131,p_channel_radio#132,p_channel_press#133,p_channel_event#134,p_channel_demo#135,p_channel_details#136,p_purpose#137,p_discount_active#138] parquet\n      +- Project [cr_item_sk#140, cr_order_number#154L]\n         +- Filter (isnotnull(cr_item_sk#140) AND isnotnull(cr_order_number#154L))\n            +- Relation spark_catalog.tpcds_100.catalog_returns[cr_returned_time_sk#139,cr_item_sk#140,cr_refunded_customer_sk#141,cr_refunded_cdemo_sk#142,cr_refunded_hdemo_sk#143,cr_refunded_addr_sk#144,cr_returning_customer_sk#145,cr_returning_cdemo_sk#146,cr_returning_hdemo_sk#147,cr_returning_addr_sk#148,cr_call_center_sk#149,cr_catalog_page_sk#150,cr_ship_mode_sk#151,cr_warehouse_sk#152,cr_reason_sk#153,cr_order_number#154L,cr_return_quantity#155,cr_return_amount#156,cr_return_tax#157,cr_return_amt_inc_tax#158,cr_fee#159,cr_return_ship_cost#160,cr_refunded_cash#161,cr_reversed_charge#162,... 3 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -752670498,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 114407440,
            "rowCount" : 648914,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [6]: [cs_item_sk#18, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120] Arguments: 12 "
          },
          "5" : {
            "sign" : -659895507,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [cr_item_sk#140, cr_order_number#154L] Arguments: [cr_item_sk#140 ASC NULLS FIRST, cr_order_number#154L ASC NULLS FIRST], false, 0 "
          },
          "6" : {
            "sign" : 1869306763,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 345547728,
            "rowCount" : 14397822,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [cr_item_sk#140, cr_order_number#154L] Arguments: 8 "
          },
          "1" : {
            "sign" : -944371093,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 32172705355,
            "rowCount" : 207565841,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120] Input [8]: [cs_item_sk#18, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120, cr_item_sk#140, cr_order_number#154L] "
          },
          "0" : {
            "sign" : -927487093,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 36324022175,
            "rowCount" : 207565841,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [4]: [w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120] Keys [3]: [i_item_desc#60, w_warehouse_name#44, d_week_seq#96] Functions [3]: [partial_sum(CASE WHEN isnull(p_promo_sk#120) THEN 1 ELSE 0 END), partial_sum(CASE WHEN isnotnull(p_promo_sk#120) THEN 1 ELSE 0 END), partial_count(1)] Aggregate Attributes [3]: [sum#313L, sum#314L, count#315L] Results [6]: [i_item_desc#60, w_warehouse_name#44, d_week_seq#96, sum#316L, sum#317L, count#318L] "
          },
          "2" : {
            "sign" : -1954006538,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 37154285539,
            "rowCount" : 207565841,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [2]: [cs_item_sk#18, cs_order_number#20L] Right keys [2]: [cr_item_sk#140, cr_order_number#154L] Join type: LeftOuter Join condition: None "
          },
          "3" : {
            "sign" : -105678834,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [6]: [cs_item_sk#18, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120] Arguments: [cs_item_sk#18 ASC NULLS FIRST, cs_order_number#20L ASC NULLS FIRST], false, 0 "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "ShuffleQueryStage",
          "toId" : 5,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "SortMergeJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[i_item_desc#60, w_warehouse_name#44, d_week_seq#96], functions=[partial_sum(CASE WHEN isnull(p_promo_sk#120) THEN 1 ELSE 0 END), partial_sum(CASE WHEN isnotnull(p_promo_sk#120) THEN 1 ELSE 0 END), partial_count(1)], output=[i_item_desc#60, w_warehouse_name#44, d_week_seq#96, sum#316L, sum#317L, count#318L])\n+- Project [w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120]\n   +- SortMergeJoin [cs_item_sk#18, cs_order_number#20L], [cr_item_sk#140, cr_order_number#154L], LeftOuter\n      :- Sort [cs_item_sk#18 ASC NULLS FIRST, cs_order_number#20L ASC NULLS FIRST], false, 0\n      :  +- ShuffleQueryStage 12\n      :     +- Exchange hashpartitioning(cs_item_sk#18, cs_order_number#20L, 200), ENSURE_REQUIREMENTS, [plan_id=1420]\n      :        +- *(17) Project [cs_item_sk#18, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120]\n      :           +- *(17) BroadcastHashJoin [cs_promo_sk#19], [p_promo_sk#120], LeftOuter, BuildRight, false\n      :              :- *(17) Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96]\n      :              :  +- *(17) SortMergeJoin [cs_item_sk#18], [i_item_sk#56], Inner\n      :              :     :- *(15) Sort [cs_item_sk#18 ASC NULLS FIRST], false, 0\n      :              :     :  +- AQEShuffleRead coalesced\n      :              :     :     +- ShuffleQueryStage 11\n      :              :     :        +- Exchange hashpartitioning(cs_item_sk#18, 200), ENSURE_REQUIREMENTS, [plan_id=1292]\n      :              :     :           +- *(14) Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, d_week_seq#96]\n      :              :     :              +- *(14) SortMergeJoin [cs_item_sk#18, cs_sold_date_sk#37], [inv_item_sk#38, d_date_sk#92], Inner, ((inv_quantity_on_hand#40 < cs_quantity#21) AND (d_date#276 > date_add(d_date#94, 5)))\n      :              :     :                 :- *(12) Sort [cs_item_sk#18 ASC NULLS FIRST, cs_sold_date_sk#37 ASC NULLS FIRST], false, 0\n      :              :     :                 :  +- ShuffleQueryStage 9\n      :              :     :                 :     +- Exchange hashpartitioning(cs_item_sk#18, cs_sold_date_sk#37, 200), ENSURE_REQUIREMENTS, [plan_id=963]\n      :              :     :                 :        +- *(10) Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276]\n      :              :     :                 :           +- *(10) BroadcastHashJoin [cs_bill_cdemo_sk#7], [cd_demo_sk#78], Inner, BuildRight, false\n      :              :     :                 :              :- *(10) Project [cs_bill_cdemo_sk#7, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276]\n      :              :     :                 :              :  +- *(10) BroadcastHashJoin [cs_ship_date_sk#5], [d_date_sk#274], Inner, BuildRight, false\n      :              :     :                 :              :     :- *(10) Project [cs_ship_date_sk#5, cs_bill_cdemo_sk#7, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37]\n      :              :     :                 :              :     :  +- *(10) BroadcastHashJoin [cs_bill_hdemo_sk#8], [hd_demo_sk#87], Inner, BuildRight, false\n      :              :     :                 :              :     :     :- *(10) Filter ((((isnotnull(cs_quantity#21) AND isnotnull(cs_item_sk#18)) AND isnotnull(cs_bill_cdemo_sk#7)) AND isnotnull(cs_bill_hdemo_sk#8)) AND isnotnull(cs_ship_date_sk#5))\n      :              :     :                 :              :     :     :  +- *(10) ColumnarToRow\n      :              :     :                 :              :     :     :     +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_ship_date_sk#5,cs_bill_cdemo_sk#7,cs_bill_hdemo_sk#8,cs_item_sk#18,cs_promo_sk#19,cs_order_number#20L,cs_quantity#21,cs_sold_date_sk#37] Batched: true, DataFilters: [isnotnull(cs_quantity#21), isnotnull(cs_item_sk#18), isnotnull(cs_bill_cdemo_sk#7), isnotnull(cs..., Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#37), dynamicpruningexpression(true)], PushedFilters: [IsNotNull(cs_quantity), IsNotNull(cs_item_sk), IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_hd..., ReadSchema: struct<cs_ship_date_sk:int,cs_bill_cdemo_sk:int,cs_bill_hdemo_sk:int,cs_item_sk:int,cs_promo_sk:i...\n      :              :     :                 :              :     :     +- BroadcastQueryStage 0\n      :              :     :                 :              :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=493]\n      :              :     :                 :              :     :           +- *(1) Project [hd_demo_sk#87]\n      :              :     :                 :              :     :              +- *(1) Filter ((isnotnull(hd_buy_potential#89) AND (hd_buy_potential#89 = 1001-5000)) AND isnotnull(hd_demo_sk#87))\n      :              :     :                 :              :     :                 +- *(1) ColumnarToRow\n      :              :     :                 :              :     :                    +- FileScan parquet spark_catalog.tpcds_100.household_demographics[hd_demo_sk#87,hd_buy_potential#89] Batched: true, DataFilters: [isnotnull(hd_buy_potential#89), (hd_buy_potential#89 = 1001-5000), isnotnull(hd_demo_sk#87)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/household..., PartitionFilters: [], PushedFilters: [IsNotNull(hd_buy_potential), EqualTo(hd_buy_potential,1001-5000), IsNotNull(hd_demo_sk)], ReadSchema: struct<hd_demo_sk:int,hd_buy_potential:string>\n      :              :     :                 :              :     +- BroadcastQueryStage 1\n      :              :     :                 :              :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=512]\n      :              :     :                 :              :           +- *(2) Filter (isnotnull(d_date#276) AND isnotnull(d_date_sk#274))\n      :              :     :                 :              :              +- *(2) ColumnarToRow\n      :              :     :                 :              :                 +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#274,d_date#276] Batched: true, DataFilters: [isnotnull(d_date#276), isnotnull(d_date_sk#274)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_date:date>\n      :              :     :                 :              +- BroadcastQueryStage 2\n      :              :     :                 :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=531]\n      :              :     :                 :                    +- *(3) Project [cd_demo_sk#78]\n      :              :     :                 :                       +- *(3) Filter ((isnotnull(cd_marital_status#80) AND (cd_marital_status#80 = M)) AND isnotnull(cd_demo_sk#78))\n      :              :     :                 :                          +- *(3) ColumnarToRow\n      :              :     :                 :                             +- FileScan parquet spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#78,cd_marital_status#80] Batched: true, DataFilters: [isnotnull(cd_marital_status#80), (cd_marital_status#80 = M), isnotnull(cd_demo_sk#78)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(cd_marital_status), EqualTo(cd_marital_status,M), IsNotNull(cd_demo_sk)], ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string>\n      :              :     :                 +- *(13) Sort [inv_item_sk#38 ASC NULLS FIRST, d_date_sk#92 ASC NULLS FIRST], false, 0\n      :              :     :                    +- ShuffleQueryStage 10\n      :              :     :                       +- Exchange hashpartitioning(inv_item_sk#38, d_date_sk#92, 200), ENSURE_REQUIREMENTS, [plan_id=1010]\n      :              :     :                          +- *(11) Project [inv_item_sk#38, inv_quantity_on_hand#40, w_warehouse_name#44, d_date_sk#92, d_date#94, d_week_seq#96]\n      :              :     :                             +- *(11) BroadcastHashJoin [d_week_seq#250], [d_week_seq#96], Inner, BuildRight, false\n      :              :     :                                :- *(11) Project [inv_item_sk#38, inv_quantity_on_hand#40, d_week_seq#250, w_warehouse_name#44]\n      :              :     :                                :  +- *(11) BroadcastHashJoin [inv_warehouse_sk#39], [w_warehouse_sk#42], Inner, BuildRight, false\n      :              :     :                                :     :- *(11) Project [inv_item_sk#38, inv_warehouse_sk#39, inv_quantity_on_hand#40, d_week_seq#250]\n      :              :     :                                :     :  +- *(11) BroadcastHashJoin [inv_date_sk#41], [d_date_sk#246], Inner, BuildRight, false\n      :              :     :                                :     :     :- *(11) Filter ((isnotnull(inv_quantity_on_hand#40) AND isnotnull(inv_item_sk#38)) AND isnotnull(inv_warehouse_sk#39))\n      :              :     :                                :     :     :  +- *(11) ColumnarToRow\n      :              :     :                                :     :     :     +- FileScan parquet spark_catalog.tpcds_100.inventory[inv_item_sk#38,inv_warehouse_sk#39,inv_quantity_on_hand#40,inv_date_sk#41] Batched: true, DataFilters: [isnotnull(inv_quantity_on_hand#40), isnotnull(inv_item_sk#38), isnotnull(inv_warehouse_sk#39)], Format: Parquet, Location: InMemoryFileIndex(261 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/invento..., PartitionFilters: [isnotnull(inv_date_sk#41)], PushedFilters: [IsNotNull(inv_quantity_on_hand), IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)], ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>\n      :              :     :                                :     :     +- BroadcastQueryStage 3\n      :              :     :                                :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=552]\n      :              :     :                                :     :           +- *(4) Filter (isnotnull(d_week_seq#250) AND isnotnull(d_date_sk#246))\n      :              :     :                                :     :              +- *(4) ColumnarToRow\n      :              :     :                                :     :                 +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#246,d_week_seq#250] Batched: true, DataFilters: [isnotnull(d_week_seq#250), isnotnull(d_date_sk#246)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_week_seq:int>\n      :              :     :                                :     +- BroadcastQueryStage 4\n      :              :     :                                :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=569]\n      :              :     :                                :           +- *(5) Filter isnotnull(w_warehouse_sk#42)\n      :              :     :                                :              +- *(5) ColumnarToRow\n      :              :     :                                :                 +- FileScan parquet spark_catalog.tpcds_100.warehouse[w_warehouse_sk#42,w_warehouse_name#44] Batched: true, DataFilters: [isnotnull(w_warehouse_sk#42)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/warehouse], PartitionFilters: [], PushedFilters: [IsNotNull(w_warehouse_sk)], ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>\n      :              :     :                                +- BroadcastQueryStage 5\n      :              :     :                                   +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [plan_id=588]\n      :              :     :                                      +- *(6) Project [d_date_sk#92, d_date#94, d_week_seq#96]\n      :              :     :                                         +- *(6) Filter ((((isnotnull(d_year#98) AND (d_year#98 = 2001)) AND isnotnull(d_date_sk#92)) AND isnotnull(d_week_seq#96)) AND isnotnull(d_date#94))\n      :              :     :                                            +- *(6) ColumnarToRow\n      :              :     :                                               +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#92,d_date#94,d_week_seq#96,d_year#98] Batched: true, DataFilters: [isnotnull(d_year#98), (d_year#98 = 2001), isnotnull(d_date_sk#92), isnotnull(d_week_seq#96), isn..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk), IsNotNull(d_week_seq), IsNotNull(..., ReadSchema: struct<d_date_sk:int,d_date:date,d_week_seq:int,d_year:int>\n      :              :     +- *(16) Sort [i_item_sk#56 ASC NULLS FIRST], false, 0\n      :              :        +- AQEShuffleRead coalesced\n      :              :           +- ShuffleQueryStage 6\n      :              :              +- Exchange hashpartitioning(i_item_sk#56, 200), ENSURE_REQUIREMENTS, [plan_id=613]\n      :              :                 +- *(7) Filter isnotnull(i_item_sk#56)\n      :              :                    +- *(7) ColumnarToRow\n      :              :                       +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#56,i_item_desc#60] Batched: true, DataFilters: [isnotnull(i_item_sk#56)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_desc:string>\n      :              +- BroadcastQueryStage 7\n      :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=632]\n      :                    +- *(8) Filter isnotnull(p_promo_sk#120)\n      :                       +- *(8) ColumnarToRow\n      :                          +- FileScan parquet spark_catalog.tpcds_100.promotion[p_promo_sk#120] Batched: true, DataFilters: [isnotnull(p_promo_sk#120)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/promotion], PartitionFilters: [], PushedFilters: [IsNotNull(p_promo_sk)], ReadSchema: struct<p_promo_sk:int>\n      +- Sort [cr_item_sk#140 ASC NULLS FIRST, cr_order_number#154L ASC NULLS FIRST], false, 0\n         +- ShuffleQueryStage 8\n            +- Exchange hashpartitioning(cr_item_sk#140, cr_order_number#154L, 200), ENSURE_REQUIREMENTS, [plan_id=653]\n               +- *(9) Project [cr_item_sk#140, cr_order_number#154L]\n                  +- *(9) Filter (isnotnull(cr_item_sk#140) AND isnotnull(cr_order_number#154L))\n                     +- *(9) ColumnarToRow\n                        +- FileScan parquet spark_catalog.tpcds_100.catalog_returns[cr_item_sk#140,cr_order_number#154L,cr_returned_date_sk#165] Batched: true, DataFilters: [isnotnull(cr_item_sk#140), isnotnull(cr_order_number#154L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_re..., PartitionFilters: [], PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)], ReadSchema: struct<cr_item_sk:int,cr_order_number:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 459955168,
        "inputRowCount" : 15046736
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "5" : [ 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 240463, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 240463, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 240463, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 290960, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 240463, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 240463, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 240463, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509, 264509 ],
        "1" : [ 869733, 872352, 872523, 871425, 879575, 868699, 871770, 876110, 871061, 872488, 870939, 878388, 873867, 870326, 876242, 881379, 871819, 873267, 872915, 873515, 878776, 878535, 864494, 878370, 864051, 872669, 871821, 867560, 870022, 868050, 870182, 873418, 875889, 868884, 868031, 873312, 878796, 871548, 875267, 865325, 881690, 873362, 872116, 865033, 877887, 868969, 872052, 876543, 873779, 873750, 871472, 877694, 869031, 878273, 877713, 883851, 872448, 871438, 870692, 870343, 865735, 875230, 874006, 873339, 869294, 875428, 873270, 876866, 874152, 876993, 870926, 868629, 874861, 875554, 866224, 871047, 880913, 880063, 876407, 879255, 866541, 872294, 868281, 865933, 870114, 870135, 877524, 877971, 870596, 871049, 870057, 866978, 871210, 868107, 869688, 875431, 870061, 868573, 877720, 866982, 869690, 874123, 873250, 878881, 874801, 875705, 876569, 871705, 876799, 868380, 869872, 872376, 871013, 880001, 873315, 874392, 877754, 875735, 878253, 872996, 868309, 879540, 874157, 877577, 879179, 868696, 876276, 871298, 869333, 867917, 878970, 874641, 867519, 872035, 880456, 864445, 864205, 865400, 872894, 867628, 873138, 869804, 867063, 870335, 870645, 871198, 870294, 869534, 871569, 868726, 871965, 874207, 876020, 874678, 870509, 871208, 869284, 877122, 873641, 873423, 866238, 865704, 867280, 865074, 877670, 877361, 874542, 874648, 875843, 873115, 873698, 874207, 872229, 875618, 876602, 876637, 872269, 865260, 870725, 869498, 879674, 873699, 868540, 872195, 866180, 873610, 876886, 878349, 881525, 876123, 880515, 870708, 870010, 876456, 863139, 876243, 874623, 872242, 875261, 864785 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 13,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 28 ],
      "Objectives" : {
        "DurationInMs" : 6375,
        "TotalTasksDurationInMs" : 21303,
        "IOBytes" : {
          "Total" : 276377071,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 216837458,
            "SW" : 59539613
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1080210064,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11520,
                "rowCount" : 576
              },
              "compileTime" : {
                "sizeInBytes" : 11520,
                "rowCount" : 576
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#92, d_date#94, d_week_seq#96] "
          },
          "1" : {
            "sign" : -909628679,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 141696,
                "rowCount" : 576
              },
              "compileTime" : {
                "sizeInBytes" : 141696,
                "rowCount" : 576
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_year#98) AND (d_year#98 = 2001)) AND isnotnull(d_date_sk#92)) AND (isnotnull(d_week_seq#96) AND isnotnull(d_date#94))) "
          },
          "2" : {
            "sign" : -1106989248,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#92, d_date_id#93, d_date#94, d_month_seq#95, d_week_seq#96, d_quarter_seq#97, d_year#98, d_dow#99, d_moy#100, d_dom#101, d_qoy#102, d_fy_year#103, d_fy_quarter_seq#104, d_fy_week_seq#105, d_day_name#106, d_quarter_name#107, d_holiday#108, d_weekend#109, d_following_holiday#110, d_first_dom#111, d_last_dom#112, d_same_day_ly#113, d_same_day_lq#114, d_current_day#115, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#92, d_date#94, d_week_seq#96]\n+- Filter (((isnotnull(d_year#98) AND (d_year#98 = 2001)) AND isnotnull(d_date_sk#92)) AND (isnotnull(d_week_seq#96) AND isnotnull(d_date#94)))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#92,d_date_id#93,d_date#94,d_month_seq#95,d_week_seq#96,d_quarter_seq#97,d_year#98,d_dow#99,d_moy#100,d_dom#101,d_qoy#102,d_fy_year#103,d_fy_quarter_seq#104,d_fy_week_seq#105,d_day_name#106,d_quarter_name#107,d_holiday#108,d_weekend#109,d_following_holiday#110,d_first_dom#111,d_last_dom#112,d_same_day_ly#113,d_same_day_lq#114,d_current_day#115,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 792377674,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 11520,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [d_date_sk#92, d_date#94, d_week_seq#96] Input [4]: [d_date_sk#92, d_date#94, d_week_seq#96, d_year#98] "
          },
          "1" : {
            "sign" : 512306513,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 11520,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [d_date_sk#92, d_date#94, d_week_seq#96, d_year#98] Condition : ((((isnotnull(d_year#98) AND (d_year#98 = 2001)) AND isnotnull(d_date_sk#92)) AND isnotnull(d_week_seq#96)) AND isnotnull(d_date#94)) "
          },
          "2" : {
            "sign" : 391875586,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 11520,
            "rowCount" : 576,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [4]: [d_date_sk#92, d_date#94, d_week_seq#96, d_year#98] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk), IsNotNull(d_week_seq), IsNotNull(d_date)] ReadSchema: struct<d_date_sk:int,d_date:date,d_week_seq:int,d_year:int> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#92, d_date#94, d_week_seq#96]\n+- Filter ((((isnotnull(d_year#98) AND (d_year#98 = 2001)) AND isnotnull(d_date_sk#92)) AND isnotnull(d_week_seq#96)) AND isnotnull(d_date#94))\n   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#92,d_date#94,d_week_seq#96,d_year#98] Batched: true, DataFilters: [isnotnull(d_year#98), (d_year#98 = 2001), isnotnull(d_date_sk#92), isnotnull(d_week_seq#96), isn..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk), IsNotNull(d_week_seq), IsNotNull(..., ReadSchema: struct<d_date_sk:int,d_date:date,d_week_seq:int,d_year:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 11520,
        "inputRowCount" : 576
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 9 ],
      "Objectives" : {
        "DurationInMs" : 2154,
        "TotalTasksDurationInMs" : 2150,
        "IOBytes" : {
          "Total" : 596399,
          "Details" : {
            "IR" : 596399,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "10" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 207833722,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9378749856,
                "rowCount" : 390781244
              },
              "compileTime" : {
                "sizeInBytes" : 9378749856,
                "rowCount" : 390781244
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_item_sk#38, inv_warehouse_sk#39, inv_quantity_on_hand#40, d_week_seq#250] "
          },
          "5" : {
            "sign" : 1208309761,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 12504999808,
                "rowCount" : 390781244
              },
              "compileTime" : {
                "sizeInBytes" : 12504999808,
                "rowCount" : 390781244
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_date_sk#41 = d_date_sk#246) "
          },
          "6" : {
            "sign" : 1335160095,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9104927592,
                "rowCount" : 379371983
              },
              "compileTime" : {
                "sizeInBytes" : 9104927592,
                "rowCount" : 379371983
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(inv_quantity_on_hand#40) AND isnotnull(inv_item_sk#38)) AND isnotnull(inv_warehouse_sk#39)) AND isnotnull(inv_date_sk#41)) "
          },
          "1" : {
            "sign" : -1455753177,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 30962488,
                "rowCount" : 533836
              },
              "compileTime" : {
                "sizeInBytes" : 30962488,
                "rowCount" : 533836
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_week_seq#96 = d_week_seq#250) "
          },
          "0" : {
            "sign" : 1825441690,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 28827144,
                "rowCount" : 533836
              },
              "compileTime" : {
                "sizeInBytes" : 28827144,
                "rowCount" : 533836
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_item_sk#38, inv_quantity_on_hand#40, w_warehouse_name#44, d_date_sk#92, d_date#94, d_week_seq#96] "
          },
          "2" : {
            "sign" : 1157017916,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 20397545676,
                "rowCount" : 443424906
              },
              "compileTime" : {
                "sizeInBytes" : 20397545676,
                "rowCount" : 443424906
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_item_sk#38, inv_quantity_on_hand#40, d_week_seq#250, w_warehouse_name#44] "
          },
          "7" : {
            "sign" : 683407923,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9583920000,
                "rowCount" : 399330000
              },
              "compileTime" : {
                "sizeInBytes" : 9583920000,
                "rowCount" : 399330000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [inv_item_sk#38, inv_warehouse_sk#39, inv_quantity_on_hand#40, inv_date_sk#41], `spark_catalog`.`tpcds_100`.`inventory`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : 1236194322,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 23944944924,
                "rowCount" : 443424906
              },
              "compileTime" : {
                "sizeInBytes" : 23944944924,
                "rowCount" : 443424906
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (w_warehouse_sk#42 = inv_warehouse_sk#39) "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalRelation",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [inv_item_sk#38, inv_quantity_on_hand#40, w_warehouse_name#44, d_date_sk#92, d_date#94, d_week_seq#96]\n+- Join Inner, (d_week_seq#96 = d_week_seq#250)\n   :- Project [inv_item_sk#38, inv_quantity_on_hand#40, d_week_seq#250, w_warehouse_name#44]\n   :  +- Join Inner, (w_warehouse_sk#42 = inv_warehouse_sk#39)\n   :     :- Project [inv_item_sk#38, inv_warehouse_sk#39, inv_quantity_on_hand#40, d_week_seq#250]\n   :     :  +- Join Inner, (inv_date_sk#41 = d_date_sk#246)\n   :     :     :- Filter (((isnotnull(inv_quantity_on_hand#40) AND isnotnull(inv_item_sk#38)) AND isnotnull(inv_warehouse_sk#39)) AND isnotnull(inv_date_sk#41))\n   :     :     :  +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#38,inv_warehouse_sk#39,inv_quantity_on_hand#40,inv_date_sk#41] parquet\n   :     :     +- Project [d_date_sk#246, d_week_seq#250]\n   :     :        +- Filter (isnotnull(d_week_seq#250) AND isnotnull(d_date_sk#246))\n   :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#246,d_date_id#247,d_date#248,d_month_seq#249,d_week_seq#250,d_quarter_seq#251,d_year#252,d_dow#253,d_moy#254,d_dom#255,d_qoy#256,d_fy_year#257,d_fy_quarter_seq#258,d_fy_week_seq#259,d_day_name#260,d_quarter_name#261,d_holiday#262,d_weekend#263,d_following_holiday#264,d_first_dom#265,d_last_dom#266,d_same_day_ly#267,d_same_day_lq#268,d_current_day#269,... 4 more fields] parquet\n   :     +- Project [w_warehouse_sk#42, w_warehouse_name#44]\n   :        +- Filter isnotnull(w_warehouse_sk#42)\n   :           +- Relation spark_catalog.tpcds_100.warehouse[w_warehouse_sk#42,w_warehouse_id#43,w_warehouse_name#44,w_warehouse_sq_ft#45,w_street_number#46,w_street_name#47,w_street_type#48,w_suite_number#49,w_city#50,w_county#51,w_state#52,w_zip#53,w_country#54,w_gmt_offset#55] parquet\n   +- Project [d_date_sk#92, d_date#94, d_week_seq#96]\n      +- Filter (((isnotnull(d_year#98) AND (d_year#98 = 2001)) AND isnotnull(d_date_sk#92)) AND (isnotnull(d_week_seq#96) AND isnotnull(d_date#94)))\n         +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#92,d_date_id#93,d_date#94,d_month_seq#95,d_week_seq#96,d_quarter_seq#97,d_year#98,d_dow#99,d_moy#100,d_dom#101,d_qoy#102,d_fy_year#103,d_fy_quarter_seq#104,d_fy_week_seq#105,d_day_name#106,d_quarter_name#107,d_holiday#108,d_weekend#109,d_following_holiday#110,d_first_dom#111,d_last_dom#112,d_same_day_ly#113,d_same_day_lq#114,d_current_day#115,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : -1051995500,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 4778696,
            "rowCount" : 73049,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [d_date_sk#246, d_week_seq#250] Arguments: 3 "
          },
          "4" : {
            "sign" : -508836061,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 9378749856,
            "rowCount" : 390781244,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [inv_item_sk#38, inv_warehouse_sk#39, inv_quantity_on_hand#40, d_week_seq#250] Input [6]: [inv_item_sk#38, inv_warehouse_sk#39, inv_quantity_on_hand#40, inv_date_sk#41, d_date_sk#246, d_week_seq#250] "
          },
          "9" : {
            "sign" : 1625597624,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048696,
            "rowCount" : 15,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [w_warehouse_sk#42, w_warehouse_name#44] Arguments: 4 "
          },
          "5" : {
            "sign" : 734012104,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 12504999808,
            "rowCount" : 390781244,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [inv_date_sk#41] Right keys [1]: [d_date_sk#246] Join type: Inner Join condition: None "
          },
          "10" : {
            "sign" : 546809616,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1049000,
            "rowCount" : 365,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [3]: [d_date_sk#92, d_date#94, d_week_seq#96] Arguments: 5 "
          },
          "6" : {
            "sign" : -1976981933,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 9104927592,
            "rowCount" : 379371983,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [inv_item_sk#38, inv_warehouse_sk#39, inv_quantity_on_hand#40, inv_date_sk#41] Condition : ((isnotnull(inv_quantity_on_hand#40) AND isnotnull(inv_item_sk#38)) AND isnotnull(inv_warehouse_sk#39)) "
          },
          "1" : {
            "sign" : -1692336331,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 30962488,
            "rowCount" : 533836,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [d_week_seq#250] Right keys [1]: [d_week_seq#96] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : -45185956,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 28827144,
            "rowCount" : 533836,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [inv_item_sk#38, inv_quantity_on_hand#40, w_warehouse_name#44, d_date_sk#92, d_date#94, d_week_seq#96] Input [7]: [inv_item_sk#38, inv_quantity_on_hand#40, d_week_seq#250, w_warehouse_name#44, d_date_sk#92, d_date#94, d_week_seq#96] "
          },
          "2" : {
            "sign" : 772808148,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 20397545676,
            "rowCount" : 443424906,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [inv_item_sk#38, inv_quantity_on_hand#40, d_week_seq#250, w_warehouse_name#44] Input [6]: [inv_item_sk#38, inv_warehouse_sk#39, inv_quantity_on_hand#40, d_week_seq#250, w_warehouse_sk#42, w_warehouse_name#44] "
          },
          "7" : {
            "sign" : 899250169,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 9104927592,
            "rowCount" : 379371983,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.inventory Output [4]: [inv_item_sk#38, inv_warehouse_sk#39, inv_quantity_on_hand#40, inv_date_sk#41] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/inventory/inv_date_sk=2450815, ... 260 entries] PartitionFilters: [isnotnull(inv_date_sk#41)] PushedFilters: [IsNotNull(inv_quantity_on_hand), IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)] ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int> "
          },
          "3" : {
            "sign" : 2003861070,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 23944944924,
            "rowCount" : 443424906,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [inv_warehouse_sk#39] Right keys [1]: [w_warehouse_sk#42] Join type: Inner Join condition: None "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.inventory",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "BroadcastQueryStage",
          "toId" : 5,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "BroadcastHashJoin",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "BroadcastQueryStage",
          "toId" : 3,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "BroadcastHashJoin",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [inv_item_sk#38, inv_quantity_on_hand#40, w_warehouse_name#44, d_date_sk#92, d_date#94, d_week_seq#96]\n+- BroadcastHashJoin [d_week_seq#250], [d_week_seq#96], Inner, BuildRight, false\n   :- Project [inv_item_sk#38, inv_quantity_on_hand#40, d_week_seq#250, w_warehouse_name#44]\n   :  +- BroadcastHashJoin [inv_warehouse_sk#39], [w_warehouse_sk#42], Inner, BuildRight, false\n   :     :- Project [inv_item_sk#38, inv_warehouse_sk#39, inv_quantity_on_hand#40, d_week_seq#250]\n   :     :  +- BroadcastHashJoin [inv_date_sk#41], [d_date_sk#246], Inner, BuildRight, false\n   :     :     :- Filter ((isnotnull(inv_quantity_on_hand#40) AND isnotnull(inv_item_sk#38)) AND isnotnull(inv_warehouse_sk#39))\n   :     :     :  +- FileScan parquet spark_catalog.tpcds_100.inventory[inv_item_sk#38,inv_warehouse_sk#39,inv_quantity_on_hand#40,inv_date_sk#41] Batched: true, DataFilters: [isnotnull(inv_quantity_on_hand#40), isnotnull(inv_item_sk#38), isnotnull(inv_warehouse_sk#39)], Format: Parquet, Location: InMemoryFileIndex(261 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/invento..., PartitionFilters: [isnotnull(inv_date_sk#41)], PushedFilters: [IsNotNull(inv_quantity_on_hand), IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)], ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>\n   :     :     +- BroadcastQueryStage 3\n   :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=552]\n   :     :           +- *(4) Filter (isnotnull(d_week_seq#250) AND isnotnull(d_date_sk#246))\n   :     :              +- *(4) ColumnarToRow\n   :     :                 +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#246,d_week_seq#250] Batched: true, DataFilters: [isnotnull(d_week_seq#250), isnotnull(d_date_sk#246)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_week_seq:int>\n   :     +- BroadcastQueryStage 4\n   :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=569]\n   :           +- *(5) Filter isnotnull(w_warehouse_sk#42)\n   :              +- *(5) ColumnarToRow\n   :                 +- FileScan parquet spark_catalog.tpcds_100.warehouse[w_warehouse_sk#42,w_warehouse_name#44] Batched: true, DataFilters: [isnotnull(w_warehouse_sk#42)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/warehouse], PartitionFilters: [], PushedFilters: [IsNotNull(w_warehouse_sk)], ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>\n   +- BroadcastQueryStage 5\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [plan_id=588]\n         +- *(6) Project [d_date_sk#92, d_date#94, d_week_seq#96]\n            +- *(6) Filter ((((isnotnull(d_year#98) AND (d_year#98 = 2001)) AND isnotnull(d_date_sk#92)) AND isnotnull(d_week_seq#96)) AND isnotnull(d_date#94))\n               +- *(6) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#92,d_date#94,d_week_seq#96,d_year#98] Batched: true, DataFilters: [isnotnull(d_year#98), (d_year#98 = 2001), isnotnull(d_date_sk#92), isnotnull(d_week_seq#96), isn..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk), IsNotNull(d_week_seq), IsNotNull(..., ReadSchema: struct<d_date_sk:int,d_date:date,d_week_seq:int,d_year:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 9111803984,
        "inputRowCount" : 379445412
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 10,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 13 ],
      "Objectives" : {
        "DurationInMs" : 44401,
        "TotalTasksDurationInMs" : 230488,
        "IOBytes" : {
          "Total" : 8752731880,
          "Details" : {
            "IR" : 2114708963,
            "IW" : 0,
            "SR" : 0,
            "SW" : 6638022917
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -906443417,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 12000,
                "rowCount" : 1000
              },
              "compileTime" : {
                "sizeInBytes" : 12000,
                "rowCount" : 1000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [p_promo_sk#120] "
          },
          "1" : {
            "sign" : 1813135065,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 269000,
                "rowCount" : 1000
              },
              "compileTime" : {
                "sizeInBytes" : 269000,
                "rowCount" : 1000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(p_promo_sk#120) "
          },
          "2" : {
            "sign" : -1973574145,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 269000,
                "rowCount" : 1000
              },
              "compileTime" : {
                "sizeInBytes" : 269000,
                "rowCount" : 1000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [p_promo_sk#120, p_promo_id#121, p_start_date_sk#122, p_end_date_sk#123, p_item_sk#124, p_cost#125, p_response_target#126, p_promo_name#127, p_channel_dmail#128, p_channel_email#129, p_channel_catalog#130, p_channel_tv#131, p_channel_radio#132, p_channel_press#133, p_channel_event#134, p_channel_demo#135, p_channel_details#136, p_purpose#137, p_discount_active#138], `spark_catalog`.`tpcds_100`.`promotion`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [p_promo_sk#120]\n+- Filter isnotnull(p_promo_sk#120)\n   +- Relation spark_catalog.tpcds_100.promotion[p_promo_sk#120,p_promo_id#121,p_start_date_sk#122,p_end_date_sk#123,p_item_sk#124,p_cost#125,p_response_target#126,p_promo_name#127,p_channel_dmail#128,p_channel_email#129,p_channel_catalog#130,p_channel_tv#131,p_channel_radio#132,p_channel_press#133,p_channel_event#134,p_channel_demo#135,p_channel_details#136,p_purpose#137,p_discount_active#138] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1243520388,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 12000,
            "rowCount" : 1000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [1]: [p_promo_sk#120] Condition : isnotnull(p_promo_sk#120) "
          },
          "1" : {
            "sign" : 1811852202,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 12000,
            "rowCount" : 1000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.promotion Output [1]: [p_promo_sk#120] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/promotion] PushedFilters: [IsNotNull(p_promo_sk)] ReadSchema: struct<p_promo_sk:int> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.promotion",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull(p_promo_sk#120)\n+- FileScan parquet spark_catalog.tpcds_100.promotion[p_promo_sk#120] Batched: true, DataFilters: [isnotnull(p_promo_sk#120)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/promotion], PartitionFilters: [], PushedFilters: [IsNotNull(p_promo_sk)], ReadSchema: struct<p_promo_sk:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 12000,
        "inputRowCount" : 1000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 6 ],
      "Objectives" : {
        "DurationInMs" : 4457,
        "TotalTasksDurationInMs" : 4454,
        "IOBytes" : {
          "Total" : 12191,
          "Details" : {
            "IR" : 12191,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 69492475,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1168784,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 1168784,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#274, d_date#276] "
          },
          "1" : {
            "sign" : 1663551117,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(d_date#276) AND isnotnull(d_date_sk#274)) "
          },
          "2" : {
            "sign" : -1375901434,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#274, d_date_id#275, d_date#276, d_month_seq#277, d_week_seq#278, d_quarter_seq#279, d_year#280, d_dow#281, d_moy#282, d_dom#283, d_qoy#284, d_fy_year#285, d_fy_quarter_seq#286, d_fy_week_seq#287, d_day_name#288, d_quarter_name#289, d_holiday#290, d_weekend#291, d_following_holiday#292, d_first_dom#293, d_last_dom#294, d_same_day_ly#295, d_same_day_lq#296, d_current_day#297, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#274, d_date#276]\n+- Filter (isnotnull(d_date#276) AND isnotnull(d_date_sk#274))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#274,d_date_id#275,d_date#276,d_month_seq#277,d_week_seq#278,d_quarter_seq#279,d_year#280,d_dow#281,d_moy#282,d_dom#283,d_qoy#284,d_fy_year#285,d_fy_quarter_seq#286,d_fy_week_seq#287,d_day_name#288,d_quarter_name#289,d_holiday#290,d_weekend#291,d_following_holiday#292,d_first_dom#293,d_last_dom#294,d_same_day_ly#295,d_same_day_lq#296,d_current_day#297,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -535424383,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 1168784,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [d_date_sk#274, d_date#276] Condition : (isnotnull(d_date#276) AND isnotnull(d_date_sk#274)) "
          },
          "1" : {
            "sign" : -1675378200,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 1168784,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [2]: [d_date_sk#274, d_date#276] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_date), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_date:date> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(d_date#276) AND isnotnull(d_date_sk#274))\n+- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#274,d_date#276] Batched: true, DataFilters: [isnotnull(d_date#276), isnotnull(d_date_sk#274)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_date:date>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1168784,
        "inputRowCount" : 73049
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 2419,
        "TotalTasksDurationInMs" : 2411,
        "IOBytes" : {
          "Total" : 425402,
          "Details" : {
            "IR" : 425402,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "14" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1751068791,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7600,
                "rowCount" : 100
              },
              "compileTime" : {
                "sizeInBytes" : 7600,
                "rowCount" : 100
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "1" : {
            "sign" : 330054798,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 36324022175,
                "rowCount" : 207565841
              },
              "compileTime" : {
                "sizeInBytes" : 36324022175,
                "rowCount" : 207565841
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1722089715,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 36324022175,
                "rowCount" : 207565841
              },
              "compileTime" : {
                "sizeInBytes" : 36324022175,
                "rowCount" : 207565841
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [total_cnt#244L DESC NULLS LAST, i_item_desc#60 ASC NULLS FIRST, w_warehouse_name#44 ASC NULLS FIRST, d_week_seq#96 ASC NULLS FIRST], true "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [total_cnt#244L DESC NULLS LAST, i_item_desc#60 ASC NULLS FIRST, w_warehouse_name#44 ASC NULLS FIRST, d_week_seq#96 ASC NULLS FIRST], true\n      +- Aggregate [i_item_desc#60, w_warehouse_name#44, d_week_seq#96], [i_item_desc#60, w_warehouse_name#44, d_week_seq#96, sum(CASE WHEN isnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS no_promo#242L, sum(CASE WHEN isnotnull(p_promo_sk#120) THEN 1 ELSE 0 END) AS promo#243L, count(1) AS total_cnt#244L]\n         +- Project [w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120]\n            +- Join LeftOuter, ((cr_item_sk#140 = cs_item_sk#18) AND (cr_order_number#154L = cs_order_number#20L))\n               :- Project [cs_item_sk#18, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120]\n               :  +- Join LeftOuter, (cs_promo_sk#19 = p_promo_sk#120)\n               :     :- Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96]\n               :     :  +- Join Inner, (i_item_sk#56 = cs_item_sk#18)\n               :     :     :- Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, d_week_seq#96]\n               :     :     :  +- Join Inner, ((((inv_quantity_on_hand#40 < cs_quantity#21) AND (cs_item_sk#18 = inv_item_sk#38)) AND (cs_sold_date_sk#37 = d_date_sk#92)) AND (d_date#276 > date_add(d_date#94, 5)))\n               :     :     :     :- Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276]\n               :     :     :     :  +- Join Inner, (cs_bill_cdemo_sk#7 = cd_demo_sk#78)\n               :     :     :     :     :- Project [cs_bill_cdemo_sk#7, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276]\n               :     :     :     :     :  +- Join Inner, (cs_ship_date_sk#5 = d_date_sk#274)\n               :     :     :     :     :     :- Project [cs_ship_date_sk#5, cs_bill_cdemo_sk#7, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37]\n               :     :     :     :     :     :  +- Join Inner, (cs_bill_hdemo_sk#8 = hd_demo_sk#87)\n               :     :     :     :     :     :     :- Project [cs_ship_date_sk#5, cs_bill_cdemo_sk#7, cs_bill_hdemo_sk#8, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37]\n               :     :     :     :     :     :     :  +- Filter ((((((isnotnull(cs_quantity#21) AND isnotnull(cs_item_sk#18)) AND isnotnull(cs_bill_cdemo_sk#7)) AND isnotnull(cs_bill_hdemo_sk#8)) AND isnotnull(cs_sold_date_sk#37)) AND isnotnull(cs_ship_date_sk#5)) AND dynamicpruning#312 [cs_sold_date_sk#37])\n               :     :     :     :     :     :     :     :  +- Project [inv_item_sk#38, inv_quantity_on_hand#40, w_warehouse_name#44, d_date_sk#92, d_date#94, d_week_seq#96]\n               :     :     :     :     :     :     :     :     +- Join Inner, (d_week_seq#96 = d_week_seq#250)\n               :     :     :     :     :     :     :     :        :- Project [inv_item_sk#38, inv_quantity_on_hand#40, d_week_seq#250, w_warehouse_name#44]\n               :     :     :     :     :     :     :     :        :  +- Join Inner, (w_warehouse_sk#42 = inv_warehouse_sk#39)\n               :     :     :     :     :     :     :     :        :     :- Project [inv_item_sk#38, inv_warehouse_sk#39, inv_quantity_on_hand#40, d_week_seq#250]\n               :     :     :     :     :     :     :     :        :     :  +- Join Inner, (inv_date_sk#41 = d_date_sk#246)\n               :     :     :     :     :     :     :     :        :     :     :- Filter (((isnotnull(inv_quantity_on_hand#40) AND isnotnull(inv_item_sk#38)) AND isnotnull(inv_warehouse_sk#39)) AND isnotnull(inv_date_sk#41))\n               :     :     :     :     :     :     :     :        :     :     :  +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#38,inv_warehouse_sk#39,inv_quantity_on_hand#40,inv_date_sk#41] parquet\n               :     :     :     :     :     :     :     :        :     :     +- Project [d_date_sk#246, d_week_seq#250]\n               :     :     :     :     :     :     :     :        :     :        +- Filter (isnotnull(d_week_seq#250) AND isnotnull(d_date_sk#246))\n               :     :     :     :     :     :     :     :        :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#246,d_date_id#247,d_date#248,d_month_seq#249,d_week_seq#250,d_quarter_seq#251,d_year#252,d_dow#253,d_moy#254,d_dom#255,d_qoy#256,d_fy_year#257,d_fy_quarter_seq#258,d_fy_week_seq#259,d_day_name#260,d_quarter_name#261,d_holiday#262,d_weekend#263,d_following_holiday#264,d_first_dom#265,d_last_dom#266,d_same_day_ly#267,d_same_day_lq#268,d_current_day#269,... 4 more fields] parquet\n               :     :     :     :     :     :     :     :        :     +- Project [w_warehouse_sk#42, w_warehouse_name#44]\n               :     :     :     :     :     :     :     :        :        +- Filter isnotnull(w_warehouse_sk#42)\n               :     :     :     :     :     :     :     :        :           +- Relation spark_catalog.tpcds_100.warehouse[w_warehouse_sk#42,w_warehouse_id#43,w_warehouse_name#44,w_warehouse_sq_ft#45,w_street_number#46,w_street_name#47,w_street_type#48,w_suite_number#49,w_city#50,w_county#51,w_state#52,w_zip#53,w_country#54,w_gmt_offset#55] parquet\n               :     :     :     :     :     :     :     :        +- Project [d_date_sk#92, d_date#94, d_week_seq#96]\n               :     :     :     :     :     :     :     :           +- Filter (((isnotnull(d_year#98) AND (d_year#98 = 2001)) AND isnotnull(d_date_sk#92)) AND (isnotnull(d_week_seq#96) AND isnotnull(d_date#94)))\n               :     :     :     :     :     :     :     :              +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#92,d_date_id#93,d_date#94,d_month_seq#95,d_week_seq#96,d_quarter_seq#97,d_year#98,d_dow#99,d_moy#100,d_dom#101,d_qoy#102,d_fy_year#103,d_fy_quarter_seq#104,d_fy_week_seq#105,d_day_name#106,d_quarter_name#107,d_holiday#108,d_weekend#109,d_following_holiday#110,d_first_dom#111,d_last_dom#112,d_same_day_ly#113,d_same_day_lq#114,d_current_day#115,... 4 more fields] parquet\n               :     :     :     :     :     :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#4,cs_ship_date_sk#5,cs_bill_customer_sk#6,cs_bill_cdemo_sk#7,cs_bill_hdemo_sk#8,cs_bill_addr_sk#9,cs_ship_customer_sk#10,cs_ship_cdemo_sk#11,cs_ship_hdemo_sk#12,cs_ship_addr_sk#13,cs_call_center_sk#14,cs_catalog_page_sk#15,cs_ship_mode_sk#16,cs_warehouse_sk#17,cs_item_sk#18,cs_promo_sk#19,cs_order_number#20L,cs_quantity#21,cs_wholesale_cost#22,cs_list_price#23,cs_sales_price#24,cs_ext_discount_amt#25,cs_ext_sales_price#26,cs_ext_wholesale_cost#27,... 10 more fields] parquet\n               :     :     :     :     :     :     +- Project [hd_demo_sk#87]\n               :     :     :     :     :     :        +- Filter ((isnotnull(hd_buy_potential#89) AND (hd_buy_potential#89 = 1001-5000)) AND isnotnull(hd_demo_sk#87))\n               :     :     :     :     :     :           +- Relation spark_catalog.tpcds_100.household_demographics[hd_demo_sk#87,hd_income_band_sk#88,hd_buy_potential#89,hd_dep_count#90,hd_vehicle_count#91] parquet\n               :     :     :     :     :     +- Project [d_date_sk#274, d_date#276]\n               :     :     :     :     :        +- Filter (isnotnull(d_date#276) AND isnotnull(d_date_sk#274))\n               :     :     :     :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#274,d_date_id#275,d_date#276,d_month_seq#277,d_week_seq#278,d_quarter_seq#279,d_year#280,d_dow#281,d_moy#282,d_dom#283,d_qoy#284,d_fy_year#285,d_fy_quarter_seq#286,d_fy_week_seq#287,d_day_name#288,d_quarter_name#289,d_holiday#290,d_weekend#291,d_following_holiday#292,d_first_dom#293,d_last_dom#294,d_same_day_ly#295,d_same_day_lq#296,d_current_day#297,... 4 more fields] parquet\n               :     :     :     :     +- Project [cd_demo_sk#78]\n               :     :     :     :        +- Filter ((isnotnull(cd_marital_status#80) AND (cd_marital_status#80 = M)) AND isnotnull(cd_demo_sk#78))\n               :     :     :     :           +- Relation spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#78,cd_gender#79,cd_marital_status#80,cd_education_status#81,cd_purchase_estimate#82,cd_credit_rating#83,cd_dep_count#84,cd_dep_employed_count#85,cd_dep_college_count#86] parquet\n               :     :     :     +- Project [inv_item_sk#38, inv_quantity_on_hand#40, w_warehouse_name#44, d_date_sk#92, d_date#94, d_week_seq#96]\n               :     :     :        +- Join Inner, (d_week_seq#96 = d_week_seq#250)\n               :     :     :           :- Project [inv_item_sk#38, inv_quantity_on_hand#40, d_week_seq#250, w_warehouse_name#44]\n               :     :     :           :  +- Join Inner, (w_warehouse_sk#42 = inv_warehouse_sk#39)\n               :     :     :           :     :- Project [inv_item_sk#38, inv_warehouse_sk#39, inv_quantity_on_hand#40, d_week_seq#250]\n               :     :     :           :     :  +- Join Inner, (inv_date_sk#41 = d_date_sk#246)\n               :     :     :           :     :     :- Filter (((isnotnull(inv_quantity_on_hand#40) AND isnotnull(inv_item_sk#38)) AND isnotnull(inv_warehouse_sk#39)) AND isnotnull(inv_date_sk#41))\n               :     :     :           :     :     :  +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#38,inv_warehouse_sk#39,inv_quantity_on_hand#40,inv_date_sk#41] parquet\n               :     :     :           :     :     +- Project [d_date_sk#246, d_week_seq#250]\n               :     :     :           :     :        +- Filter (isnotnull(d_week_seq#250) AND isnotnull(d_date_sk#246))\n               :     :     :           :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#246,d_date_id#247,d_date#248,d_month_seq#249,d_week_seq#250,d_quarter_seq#251,d_year#252,d_dow#253,d_moy#254,d_dom#255,d_qoy#256,d_fy_year#257,d_fy_quarter_seq#258,d_fy_week_seq#259,d_day_name#260,d_quarter_name#261,d_holiday#262,d_weekend#263,d_following_holiday#264,d_first_dom#265,d_last_dom#266,d_same_day_ly#267,d_same_day_lq#268,d_current_day#269,... 4 more fields] parquet\n               :     :     :           :     +- Project [w_warehouse_sk#42, w_warehouse_name#44]\n               :     :     :           :        +- Filter isnotnull(w_warehouse_sk#42)\n               :     :     :           :           +- Relation spark_catalog.tpcds_100.warehouse[w_warehouse_sk#42,w_warehouse_id#43,w_warehouse_name#44,w_warehouse_sq_ft#45,w_street_number#46,w_street_name#47,w_street_type#48,w_suite_number#49,w_city#50,w_county#51,w_state#52,w_zip#53,w_country#54,w_gmt_offset#55] parquet\n               :     :     :           +- Project [d_date_sk#92, d_date#94, d_week_seq#96]\n               :     :     :              +- Filter (((isnotnull(d_year#98) AND (d_year#98 = 2001)) AND isnotnull(d_date_sk#92)) AND (isnotnull(d_week_seq#96) AND isnotnull(d_date#94)))\n               :     :     :                 +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#92,d_date_id#93,d_date#94,d_month_seq#95,d_week_seq#96,d_quarter_seq#97,d_year#98,d_dow#99,d_moy#100,d_dom#101,d_qoy#102,d_fy_year#103,d_fy_quarter_seq#104,d_fy_week_seq#105,d_day_name#106,d_quarter_name#107,d_holiday#108,d_weekend#109,d_following_holiday#110,d_first_dom#111,d_last_dom#112,d_same_day_ly#113,d_same_day_lq#114,d_current_day#115,... 4 more fields] parquet\n               :     :     +- Project [i_item_sk#56, i_item_desc#60]\n               :     :        +- Filter isnotnull(i_item_sk#56)\n               :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#56,i_item_id#57,i_rec_start_date#58,i_rec_end_date#59,i_item_desc#60,i_current_price#61,i_wholesale_cost#62,i_brand_id#63,i_brand#64,i_class_id#65,i_class#66,i_category_id#67,i_category#68,i_manufact_id#69,i_manufact#70,i_size#71,i_formulation#72,i_color#73,i_units#74,i_container#75,i_manager_id#76,i_product_name#77] parquet\n               :     +- Project [p_promo_sk#120]\n               :        +- Filter isnotnull(p_promo_sk#120)\n               :           +- Relation spark_catalog.tpcds_100.promotion[p_promo_sk#120,p_promo_id#121,p_start_date_sk#122,p_end_date_sk#123,p_item_sk#124,p_cost#125,p_response_target#126,p_promo_name#127,p_channel_dmail#128,p_channel_email#129,p_channel_catalog#130,p_channel_tv#131,p_channel_radio#132,p_channel_press#133,p_channel_event#134,p_channel_demo#135,p_channel_details#136,p_purpose#137,p_discount_active#138] parquet\n               +- Project [cr_item_sk#140, cr_order_number#154L]\n                  +- Filter (isnotnull(cr_item_sk#140) AND isnotnull(cr_order_number#154L))\n                     +- Relation spark_catalog.tpcds_100.catalog_returns[cr_returned_time_sk#139,cr_item_sk#140,cr_refunded_customer_sk#141,cr_refunded_cdemo_sk#142,cr_refunded_hdemo_sk#143,cr_refunded_addr_sk#144,cr_returning_customer_sk#145,cr_returning_cdemo_sk#146,cr_returning_hdemo_sk#147,cr_returning_addr_sk#148,cr_call_center_sk#149,cr_catalog_page_sk#150,cr_ship_mode_sk#151,cr_warehouse_sk#152,cr_reason_sk#153,cr_order_number#154L,cr_return_quantity#155,cr_return_amount#156,cr_return_tax#157,cr_return_amt_inc_tax#158,cr_fee#159,cr_return_ship_cost#160,cr_refunded_cash#161,cr_reversed_charge#162,... 3 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 449819395,
            "className" : "org.apache.spark.sql.execution.TakeOrderedAndProjectExec",
            "sizeInBytes" : 7600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) TakeOrderedAndProject Input [6]: [i_item_desc#60, w_warehouse_name#44, d_week_seq#96, no_promo#242L, promo#243L, total_cnt#244L] Arguments: 100, [total_cnt#244L DESC NULLS LAST, i_item_desc#60 ASC NULLS FIRST, w_warehouse_name#44 ASC NULLS FIRST, d_week_seq#96 ASC NULLS FIRST], [i_item_desc#60, w_warehouse_name#44, d_week_seq#96, no_promo#242L, promo#243L, total_cnt#244L] "
          },
          "1" : {
            "sign" : -796722062,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 112124304,
            "rowCount" : 635516,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [6]: [i_item_desc#60, w_warehouse_name#44, d_week_seq#96, sum#316L, sum#317L, count#318L] Keys [3]: [i_item_desc#60, w_warehouse_name#44, d_week_seq#96] Functions [3]: [sum(CASE WHEN isnull(p_promo_sk#120) THEN 1 ELSE 0 END), sum(CASE WHEN isnotnull(p_promo_sk#120) THEN 1 ELSE 0 END), count(1)] Aggregate Attributes [3]: [sum(CASE WHEN isnull(p_promo_sk#120) THEN 1 ELSE 0 END)#304L, sum(CASE WHEN isnotnull(p_promo_sk#120) THEN 1 ELSE 0 END)#305L, count(1)#245L] Results [6]: [i_item_desc#60, w_warehouse_name#44, d_week_seq#96, sum(CASE WHEN isnull(p_promo_sk#120) THEN 1 ELSE 0 END)#304L AS no_promo#242L, sum(CASE WHEN isnotnull(p_promo_sk#120) THEN 1 ELSE 0 END)#305L AS promo#243L, count(1)#245L AS total_cnt#244L] "
          },
          "2" : {
            "sign" : -323982021,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 36324022175,
            "rowCount" : 207565841,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [6]: [i_item_desc#60, w_warehouse_name#44, d_week_seq#96, sum#316L, sum#317L, count#318L] Arguments: 13 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "ShuffleQueryStage",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "TakeOrderedAndProject",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "TakeOrderedAndProject(limit=100, orderBy=[total_cnt#244L DESC NULLS LAST,i_item_desc#60 ASC NULLS FIRST,w_warehouse_name#44 ASC NULLS FIRST,d_week_seq#96 ASC NULLS FIRST], output=[i_item_desc#60,w_warehouse_name#44,d_week_seq#96,no_promo#242L,promo#243L,total_cnt#244L])\n+- HashAggregate(keys=[i_item_desc#60, w_warehouse_name#44, d_week_seq#96], functions=[sum(CASE WHEN isnull(p_promo_sk#120) THEN 1 ELSE 0 END), sum(CASE WHEN isnotnull(p_promo_sk#120) THEN 1 ELSE 0 END), count(1)], output=[i_item_desc#60, w_warehouse_name#44, d_week_seq#96, no_promo#242L, promo#243L, total_cnt#244L])\n   +- ShuffleQueryStage 13\n      +- Exchange hashpartitioning(i_item_desc#60, w_warehouse_name#44, d_week_seq#96, 200), ENSURE_REQUIREMENTS, [plan_id=1509]\n         +- *(20) HashAggregate(keys=[i_item_desc#60, w_warehouse_name#44, d_week_seq#96], functions=[partial_sum(CASE WHEN isnull(p_promo_sk#120) THEN 1 ELSE 0 END), partial_sum(CASE WHEN isnotnull(p_promo_sk#120) THEN 1 ELSE 0 END), partial_count(1)], output=[i_item_desc#60, w_warehouse_name#44, d_week_seq#96, sum#316L, sum#317L, count#318L])\n            +- *(20) Project [w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120]\n               +- *(20) SortMergeJoin [cs_item_sk#18, cs_order_number#20L], [cr_item_sk#140, cr_order_number#154L], LeftOuter\n                  :- *(18) Sort [cs_item_sk#18 ASC NULLS FIRST, cs_order_number#20L ASC NULLS FIRST], false, 0\n                  :  +- AQEShuffleRead coalesced\n                  :     +- ShuffleQueryStage 12\n                  :        +- Exchange hashpartitioning(cs_item_sk#18, cs_order_number#20L, 200), ENSURE_REQUIREMENTS, [plan_id=1420]\n                  :           +- *(17) Project [cs_item_sk#18, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96, p_promo_sk#120]\n                  :              +- *(17) BroadcastHashJoin [cs_promo_sk#19], [p_promo_sk#120], LeftOuter, BuildRight, false\n                  :                 :- *(17) Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, i_item_desc#60, d_week_seq#96]\n                  :                 :  +- *(17) SortMergeJoin [cs_item_sk#18], [i_item_sk#56], Inner\n                  :                 :     :- *(15) Sort [cs_item_sk#18 ASC NULLS FIRST], false, 0\n                  :                 :     :  +- AQEShuffleRead coalesced\n                  :                 :     :     +- ShuffleQueryStage 11\n                  :                 :     :        +- Exchange hashpartitioning(cs_item_sk#18, 200), ENSURE_REQUIREMENTS, [plan_id=1292]\n                  :                 :     :           +- *(14) Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, w_warehouse_name#44, d_week_seq#96]\n                  :                 :     :              +- *(14) SortMergeJoin [cs_item_sk#18, cs_sold_date_sk#37], [inv_item_sk#38, d_date_sk#92], Inner, ((inv_quantity_on_hand#40 < cs_quantity#21) AND (d_date#276 > date_add(d_date#94, 5)))\n                  :                 :     :                 :- *(12) Sort [cs_item_sk#18 ASC NULLS FIRST, cs_sold_date_sk#37 ASC NULLS FIRST], false, 0\n                  :                 :     :                 :  +- ShuffleQueryStage 9\n                  :                 :     :                 :     +- Exchange hashpartitioning(cs_item_sk#18, cs_sold_date_sk#37, 200), ENSURE_REQUIREMENTS, [plan_id=963]\n                  :                 :     :                 :        +- *(10) Project [cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276]\n                  :                 :     :                 :           +- *(10) BroadcastHashJoin [cs_bill_cdemo_sk#7], [cd_demo_sk#78], Inner, BuildRight, false\n                  :                 :     :                 :              :- *(10) Project [cs_bill_cdemo_sk#7, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37, d_date#276]\n                  :                 :     :                 :              :  +- *(10) BroadcastHashJoin [cs_ship_date_sk#5], [d_date_sk#274], Inner, BuildRight, false\n                  :                 :     :                 :              :     :- *(10) Project [cs_ship_date_sk#5, cs_bill_cdemo_sk#7, cs_item_sk#18, cs_promo_sk#19, cs_order_number#20L, cs_quantity#21, cs_sold_date_sk#37]\n                  :                 :     :                 :              :     :  +- *(10) BroadcastHashJoin [cs_bill_hdemo_sk#8], [hd_demo_sk#87], Inner, BuildRight, false\n                  :                 :     :                 :              :     :     :- *(10) Filter ((((isnotnull(cs_quantity#21) AND isnotnull(cs_item_sk#18)) AND isnotnull(cs_bill_cdemo_sk#7)) AND isnotnull(cs_bill_hdemo_sk#8)) AND isnotnull(cs_ship_date_sk#5))\n                  :                 :     :                 :              :     :     :  +- *(10) ColumnarToRow\n                  :                 :     :                 :              :     :     :     +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_ship_date_sk#5,cs_bill_cdemo_sk#7,cs_bill_hdemo_sk#8,cs_item_sk#18,cs_promo_sk#19,cs_order_number#20L,cs_quantity#21,cs_sold_date_sk#37] Batched: true, DataFilters: [isnotnull(cs_quantity#21), isnotnull(cs_item_sk#18), isnotnull(cs_bill_cdemo_sk#7), isnotnull(cs..., Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#37), dynamicpruningexpression(true)], PushedFilters: [IsNotNull(cs_quantity), IsNotNull(cs_item_sk), IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_hd..., ReadSchema: struct<cs_ship_date_sk:int,cs_bill_cdemo_sk:int,cs_bill_hdemo_sk:int,cs_item_sk:int,cs_promo_sk:i...\n                  :                 :     :                 :              :     :     +- BroadcastQueryStage 0\n                  :                 :     :                 :              :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=493]\n                  :                 :     :                 :              :     :           +- *(1) Project [hd_demo_sk#87]\n                  :                 :     :                 :              :     :              +- *(1) Filter ((isnotnull(hd_buy_potential#89) AND (hd_buy_potential#89 = 1001-5000)) AND isnotnull(hd_demo_sk#87))\n                  :                 :     :                 :              :     :                 +- *(1) ColumnarToRow\n                  :                 :     :                 :              :     :                    +- FileScan parquet spark_catalog.tpcds_100.household_demographics[hd_demo_sk#87,hd_buy_potential#89] Batched: true, DataFilters: [isnotnull(hd_buy_potential#89), (hd_buy_potential#89 = 1001-5000), isnotnull(hd_demo_sk#87)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/household..., PartitionFilters: [], PushedFilters: [IsNotNull(hd_buy_potential), EqualTo(hd_buy_potential,1001-5000), IsNotNull(hd_demo_sk)], ReadSchema: struct<hd_demo_sk:int,hd_buy_potential:string>\n                  :                 :     :                 :              :     +- BroadcastQueryStage 1\n                  :                 :     :                 :              :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=512]\n                  :                 :     :                 :              :           +- *(2) Filter (isnotnull(d_date#276) AND isnotnull(d_date_sk#274))\n                  :                 :     :                 :              :              +- *(2) ColumnarToRow\n                  :                 :     :                 :              :                 +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#274,d_date#276] Batched: true, DataFilters: [isnotnull(d_date#276), isnotnull(d_date_sk#274)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_date:date>\n                  :                 :     :                 :              +- BroadcastQueryStage 2\n                  :                 :     :                 :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=531]\n                  :                 :     :                 :                    +- *(3) Project [cd_demo_sk#78]\n                  :                 :     :                 :                       +- *(3) Filter ((isnotnull(cd_marital_status#80) AND (cd_marital_status#80 = M)) AND isnotnull(cd_demo_sk#78))\n                  :                 :     :                 :                          +- *(3) ColumnarToRow\n                  :                 :     :                 :                             +- FileScan parquet spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#78,cd_marital_status#80] Batched: true, DataFilters: [isnotnull(cd_marital_status#80), (cd_marital_status#80 = M), isnotnull(cd_demo_sk#78)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(cd_marital_status), EqualTo(cd_marital_status,M), IsNotNull(cd_demo_sk)], ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string>\n                  :                 :     :                 +- *(13) Sort [inv_item_sk#38 ASC NULLS FIRST, d_date_sk#92 ASC NULLS FIRST], false, 0\n                  :                 :     :                    +- ShuffleQueryStage 10\n                  :                 :     :                       +- Exchange hashpartitioning(inv_item_sk#38, d_date_sk#92, 200), ENSURE_REQUIREMENTS, [plan_id=1010]\n                  :                 :     :                          +- *(11) Project [inv_item_sk#38, inv_quantity_on_hand#40, w_warehouse_name#44, d_date_sk#92, d_date#94, d_week_seq#96]\n                  :                 :     :                             +- *(11) BroadcastHashJoin [d_week_seq#250], [d_week_seq#96], Inner, BuildRight, false\n                  :                 :     :                                :- *(11) Project [inv_item_sk#38, inv_quantity_on_hand#40, d_week_seq#250, w_warehouse_name#44]\n                  :                 :     :                                :  +- *(11) BroadcastHashJoin [inv_warehouse_sk#39], [w_warehouse_sk#42], Inner, BuildRight, false\n                  :                 :     :                                :     :- *(11) Project [inv_item_sk#38, inv_warehouse_sk#39, inv_quantity_on_hand#40, d_week_seq#250]\n                  :                 :     :                                :     :  +- *(11) BroadcastHashJoin [inv_date_sk#41], [d_date_sk#246], Inner, BuildRight, false\n                  :                 :     :                                :     :     :- *(11) Filter ((isnotnull(inv_quantity_on_hand#40) AND isnotnull(inv_item_sk#38)) AND isnotnull(inv_warehouse_sk#39))\n                  :                 :     :                                :     :     :  +- *(11) ColumnarToRow\n                  :                 :     :                                :     :     :     +- FileScan parquet spark_catalog.tpcds_100.inventory[inv_item_sk#38,inv_warehouse_sk#39,inv_quantity_on_hand#40,inv_date_sk#41] Batched: true, DataFilters: [isnotnull(inv_quantity_on_hand#40), isnotnull(inv_item_sk#38), isnotnull(inv_warehouse_sk#39)], Format: Parquet, Location: InMemoryFileIndex(261 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/invento..., PartitionFilters: [isnotnull(inv_date_sk#41)], PushedFilters: [IsNotNull(inv_quantity_on_hand), IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)], ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>\n                  :                 :     :                                :     :     +- BroadcastQueryStage 3\n                  :                 :     :                                :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=552]\n                  :                 :     :                                :     :           +- *(4) Filter (isnotnull(d_week_seq#250) AND isnotnull(d_date_sk#246))\n                  :                 :     :                                :     :              +- *(4) ColumnarToRow\n                  :                 :     :                                :     :                 +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#246,d_week_seq#250] Batched: true, DataFilters: [isnotnull(d_week_seq#250), isnotnull(d_date_sk#246)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_week_seq:int>\n                  :                 :     :                                :     +- BroadcastQueryStage 4\n                  :                 :     :                                :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=569]\n                  :                 :     :                                :           +- *(5) Filter isnotnull(w_warehouse_sk#42)\n                  :                 :     :                                :              +- *(5) ColumnarToRow\n                  :                 :     :                                :                 +- FileScan parquet spark_catalog.tpcds_100.warehouse[w_warehouse_sk#42,w_warehouse_name#44] Batched: true, DataFilters: [isnotnull(w_warehouse_sk#42)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/warehouse], PartitionFilters: [], PushedFilters: [IsNotNull(w_warehouse_sk)], ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>\n                  :                 :     :                                +- BroadcastQueryStage 5\n                  :                 :     :                                   +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [plan_id=588]\n                  :                 :     :                                      +- *(6) Project [d_date_sk#92, d_date#94, d_week_seq#96]\n                  :                 :     :                                         +- *(6) Filter ((((isnotnull(d_year#98) AND (d_year#98 = 2001)) AND isnotnull(d_date_sk#92)) AND isnotnull(d_week_seq#96)) AND isnotnull(d_date#94))\n                  :                 :     :                                            +- *(6) ColumnarToRow\n                  :                 :     :                                               +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#92,d_date#94,d_week_seq#96,d_year#98] Batched: true, DataFilters: [isnotnull(d_year#98), (d_year#98 = 2001), isnotnull(d_date_sk#92), isnotnull(d_week_seq#96), isn..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk), IsNotNull(d_week_seq), IsNotNull(..., ReadSchema: struct<d_date_sk:int,d_date:date,d_week_seq:int,d_year:int>\n                  :                 :     +- *(16) Sort [i_item_sk#56 ASC NULLS FIRST], false, 0\n                  :                 :        +- AQEShuffleRead coalesced\n                  :                 :           +- ShuffleQueryStage 6\n                  :                 :              +- Exchange hashpartitioning(i_item_sk#56, 200), ENSURE_REQUIREMENTS, [plan_id=613]\n                  :                 :                 +- *(7) Filter isnotnull(i_item_sk#56)\n                  :                 :                    +- *(7) ColumnarToRow\n                  :                 :                       +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#56,i_item_desc#60] Batched: true, DataFilters: [isnotnull(i_item_sk#56)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_desc:string>\n                  :                 +- BroadcastQueryStage 7\n                  :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=632]\n                  :                       +- *(8) Filter isnotnull(p_promo_sk#120)\n                  :                          +- *(8) ColumnarToRow\n                  :                             +- FileScan parquet spark_catalog.tpcds_100.promotion[p_promo_sk#120] Batched: true, DataFilters: [isnotnull(p_promo_sk#120)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/promotion], PartitionFilters: [], PushedFilters: [IsNotNull(p_promo_sk)], ReadSchema: struct<p_promo_sk:int>\n                  +- *(19) Sort [cr_item_sk#140 ASC NULLS FIRST, cr_order_number#154L ASC NULLS FIRST], false, 0\n                     +- AQEShuffleRead coalesced\n                        +- ShuffleQueryStage 8\n                           +- Exchange hashpartitioning(cr_item_sk#140, cr_order_number#154L, 200), ENSURE_REQUIREMENTS, [plan_id=653]\n                              +- *(9) Project [cr_item_sk#140, cr_order_number#154L]\n                                 +- *(9) Filter (isnotnull(cr_item_sk#140) AND isnotnull(cr_order_number#154L))\n                                    +- *(9) ColumnarToRow\n                                       +- FileScan parquet spark_catalog.tpcds_100.catalog_returns[cr_item_sk#140,cr_order_number#154L,cr_returned_date_sk#165] Batched: true, DataFilters: [isnotnull(cr_item_sk#140), isnotnull(cr_order_number#154L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_re..., PartitionFilters: [], PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)], ReadSchema: struct<cr_item_sk:int,cr_order_number:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 112124304,
        "inputRowCount" : 635516
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "6" : [ 317444, 326714, 305441, 330646, 323140, 300586, 317444, 317444, 309015, 317444, 309015, 300586, 310620, 317444, 309015, 305441, 309015, 309015, 317444, 312947, 309015, 305441, 305441, 309015, 313870, 300586, 305441, 317444, 313870, 309015, 313870, 326714, 317444, 313870, 309015, 309015, 317444, 313870, 317444, 309015, 317444, 321376, 318285, 300586, 312947, 317444, 326714, 300586, 326714, 317444, 309015, 323140, 297012, 297012, 326714, 305441, 318285, 317444, 309015, 317444, 318285, 318285, 323140, 321376, 309015, 317444, 313870, 305441, 302191, 322217, 300586, 309015, 313870, 312947, 317444, 323140, 305441, 309015, 313870, 318285, 323140, 293762, 305441, 309015, 305441, 292157, 309015, 326714, 309015, 317444, 317444, 317444, 317444, 309015, 305441, 309015, 309015, 313870, 309015, 321376, 314711, 305441, 313870, 305441, 317444, 305441, 297012, 309015, 317444, 317444, 313870, 309015, 300586, 309015, 305441, 309015, 313870, 314711, 309015, 313870, 300586, 309015, 319890, 292157, 309015, 309015, 309015, 297012, 309015, 313870, 313870, 309015, 305441, 317444, 305441, 317444, 300586, 310620, 313870, 317444, 309015, 322217, 314711, 317444, 297012, 305441, 313870, 309015, 309015, 318285, 312947, 312947, 305441, 309015, 302191, 317444, 313870, 297012, 317444, 314711, 309015, 317444, 326714, 305441, 292157, 312947, 309015, 313870, 305441, 309015, 313788, 309015, 321376, 300586, 313870, 322217, 317444, 309015, 310620, 313870, 305441, 313870, 321376, 317444, 305441, 321376, 309015, 313870, 323140, 288583, 326714, 326714, 317444, 314711, 313870, 300586, 321376, 305441, 326714, 321376 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 14,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 36 ],
      "Objectives" : {
        "DurationInMs" : 818,
        "TotalTasksDurationInMs" : 808,
        "IOBytes" : {
          "Total" : 59539613,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 59539613,
            "SW" : 0
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1002334805,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14400,
                "rowCount" : 1200
              },
              "compileTime" : {
                "sizeInBytes" : 14400,
                "rowCount" : 1200
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [hd_demo_sk#87] "
          },
          "1" : {
            "sign" : -1932629129,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 52800,
                "rowCount" : 1200
              },
              "compileTime" : {
                "sizeInBytes" : 52800,
                "rowCount" : 1200
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(hd_buy_potential#89) AND (hd_buy_potential#89 = 1001-5000)) AND isnotnull(hd_demo_sk#87)) "
          },
          "2" : {
            "sign" : -98187502,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 316800,
                "rowCount" : 7200
              },
              "compileTime" : {
                "sizeInBytes" : 316800,
                "rowCount" : 7200
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [hd_demo_sk#87, hd_income_band_sk#88, hd_buy_potential#89, hd_dep_count#90, hd_vehicle_count#91], `spark_catalog`.`tpcds_100`.`household_demographics`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [hd_demo_sk#87]\n+- Filter ((isnotnull(hd_buy_potential#89) AND (hd_buy_potential#89 = 1001-5000)) AND isnotnull(hd_demo_sk#87))\n   +- Relation spark_catalog.tpcds_100.household_demographics[hd_demo_sk#87,hd_income_band_sk#88,hd_buy_potential#89,hd_dep_count#90,hd_vehicle_count#91] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -2114154298,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 14400,
            "rowCount" : 1200,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [hd_demo_sk#87] Input [2]: [hd_demo_sk#87, hd_buy_potential#89] "
          },
          "1" : {
            "sign" : -1857416600,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 14400,
            "rowCount" : 1200,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [hd_demo_sk#87, hd_buy_potential#89] Condition : ((isnotnull(hd_buy_potential#89) AND (hd_buy_potential#89 = 1001-5000)) AND isnotnull(hd_demo_sk#87)) "
          },
          "2" : {
            "sign" : 1558677699,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 14400,
            "rowCount" : 1200,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.household_demographics Output [2]: [hd_demo_sk#87, hd_buy_potential#89] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/household_demographics] PushedFilters: [IsNotNull(hd_buy_potential), EqualTo(hd_buy_potential,1001-5000), IsNotNull(hd_demo_sk)] ReadSchema: struct<hd_demo_sk:int,hd_buy_potential:string> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.household_demographics",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [hd_demo_sk#87]\n+- Filter ((isnotnull(hd_buy_potential#89) AND (hd_buy_potential#89 = 1001-5000)) AND isnotnull(hd_demo_sk#87))\n   +- FileScan parquet spark_catalog.tpcds_100.household_demographics[hd_demo_sk#87,hd_buy_potential#89] Batched: true, DataFilters: [isnotnull(hd_buy_potential#89), (hd_buy_potential#89 = 1001-5000), isnotnull(hd_demo_sk#87)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/household..., PartitionFilters: [], PushedFilters: [IsNotNull(hd_buy_potential), EqualTo(hd_buy_potential,1001-5000), IsNotNull(hd_demo_sk)], ReadSchema: struct<hd_demo_sk:int,hd_buy_potential:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 14400,
        "inputRowCount" : 1200
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 7 ],
      "Objectives" : {
        "DurationInMs" : 2622,
        "TotalTasksDurationInMs" : 2618,
        "IOBytes" : {
          "Total" : 31657,
          "Details" : {
            "IR" : 31657,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1130789446,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4609920,
                "rowCount" : 384160
              },
              "compileTime" : {
                "sizeInBytes" : 4609920,
                "rowCount" : 384160
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cd_demo_sk#78] "
          },
          "1" : {
            "sign" : -1716393061,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 36495200,
                "rowCount" : 384160
              },
              "compileTime" : {
                "sizeInBytes" : 36495200,
                "rowCount" : 384160
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(cd_marital_status#80) AND (cd_marital_status#80 = M)) AND isnotnull(cd_demo_sk#78)) "
          },
          "2" : {
            "sign" : -1724258072,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 182476000,
                "rowCount" : 1920800
              },
              "compileTime" : {
                "sizeInBytes" : 182476000,
                "rowCount" : 1920800
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cd_demo_sk#78, cd_gender#79, cd_marital_status#80, cd_education_status#81, cd_purchase_estimate#82, cd_credit_rating#83, cd_dep_count#84, cd_dep_employed_count#85, cd_dep_college_count#86], `spark_catalog`.`tpcds_100`.`customer_demographics`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cd_demo_sk#78]\n+- Filter ((isnotnull(cd_marital_status#80) AND (cd_marital_status#80 = M)) AND isnotnull(cd_demo_sk#78))\n   +- Relation spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#78,cd_gender#79,cd_marital_status#80,cd_education_status#81,cd_purchase_estimate#82,cd_credit_rating#83,cd_dep_count#84,cd_dep_employed_count#85,cd_dep_college_count#86] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1117026787,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 4609920,
            "rowCount" : 384160,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [cd_demo_sk#78] Input [2]: [cd_demo_sk#78, cd_marital_status#80] "
          },
          "1" : {
            "sign" : 65965922,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 4609920,
            "rowCount" : 384160,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [cd_demo_sk#78, cd_marital_status#80] Condition : ((isnotnull(cd_marital_status#80) AND (cd_marital_status#80 = M)) AND isnotnull(cd_demo_sk#78)) "
          },
          "2" : {
            "sign" : -1271445003,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 4609920,
            "rowCount" : 384160,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer_demographics Output [2]: [cd_demo_sk#78, cd_marital_status#80] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_demographics] PushedFilters: [IsNotNull(cd_marital_status), EqualTo(cd_marital_status,M), IsNotNull(cd_demo_sk)] ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer_demographics",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cd_demo_sk#78]\n+- Filter ((isnotnull(cd_marital_status#80) AND (cd_marital_status#80 = M)) AND isnotnull(cd_demo_sk#78))\n   +- FileScan parquet spark_catalog.tpcds_100.customer_demographics[cd_demo_sk#78,cd_marital_status#80] Batched: true, DataFilters: [isnotnull(cd_marital_status#80), (cd_marital_status#80 = M), isnotnull(cd_demo_sk#78)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(cd_marital_status), EqualTo(cd_marital_status,M), IsNotNull(cd_demo_sk)], ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 4609920,
        "inputRowCount" : 384160
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 8 ],
      "Objectives" : {
        "DurationInMs" : 2592,
        "TotalTasksDurationInMs" : 5102,
        "IOBytes" : {
          "Total" : 7742683,
          "Details" : {
            "IR" : 7742683,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -47889715,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 25500000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 25500000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#56, i_item_desc#60] "
          },
          "1" : {
            "sign" : 1772582654,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(i_item_sk#56) "
          },
          "2" : {
            "sign" : 335627173,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#56, i_item_id#57, i_rec_start_date#58, i_rec_end_date#59, i_item_desc#60, i_current_price#61, i_wholesale_cost#62, i_brand_id#63, i_brand#64, i_class_id#65, i_class#66, i_category_id#67, i_category#68, i_manufact_id#69, i_manufact#70, i_size#71, i_formulation#72, i_color#73, i_units#74, i_container#75, i_manager_id#76, i_product_name#77], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#56, i_item_desc#60]\n+- Filter isnotnull(i_item_sk#56)\n   +- Relation spark_catalog.tpcds_100.item[i_item_sk#56,i_item_id#57,i_rec_start_date#58,i_rec_end_date#59,i_item_desc#60,i_current_price#61,i_wholesale_cost#62,i_brand_id#63,i_brand#64,i_class_id#65,i_class#66,i_category_id#67,i_category#68,i_manufact_id#69,i_manufact#70,i_size#71,i_formulation#72,i_color#73,i_units#74,i_container#75,i_manager_id#76,i_product_name#77] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1591153663,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 25500000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [i_item_sk#56, i_item_desc#60] Condition : isnotnull(i_item_sk#56) "
          },
          "1" : {
            "sign" : -377358470,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 25500000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.item Output [2]: [i_item_sk#56, i_item_desc#60] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item] PushedFilters: [IsNotNull(i_item_sk)] ReadSchema: struct<i_item_sk:int,i_item_desc:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.item",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull(i_item_sk#56)\n+- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#56,i_item_desc#60] Batched: true, DataFilters: [isnotnull(i_item_sk#56)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_item_desc:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 25500000,
        "inputRowCount" : 204000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 2 ],
      "Objectives" : {
        "DurationInMs" : 4491,
        "TotalTasksDurationInMs" : 15907,
        "IOBytes" : {
          "Total" : 28373372,
          "Details" : {
            "IR" : 11614715,
            "IW" : 0,
            "SR" : 0,
            "SW" : 16758657
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 281420113,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1168784,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 1168784,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#246, d_week_seq#250] "
          },
          "1" : {
            "sign" : 1257810160,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(d_week_seq#250) AND isnotnull(d_date_sk#246)) "
          },
          "2" : {
            "sign" : 418201062,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#246, d_date_id#247, d_date#248, d_month_seq#249, d_week_seq#250, d_quarter_seq#251, d_year#252, d_dow#253, d_moy#254, d_dom#255, d_qoy#256, d_fy_year#257, d_fy_quarter_seq#258, d_fy_week_seq#259, d_day_name#260, d_quarter_name#261, d_holiday#262, d_weekend#263, d_following_holiday#264, d_first_dom#265, d_last_dom#266, d_same_day_ly#267, d_same_day_lq#268, d_current_day#269, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#246, d_week_seq#250]\n+- Filter (isnotnull(d_week_seq#250) AND isnotnull(d_date_sk#246))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#246,d_date_id#247,d_date#248,d_month_seq#249,d_week_seq#250,d_quarter_seq#251,d_year#252,d_dow#253,d_moy#254,d_dom#255,d_qoy#256,d_fy_year#257,d_fy_quarter_seq#258,d_fy_week_seq#259,d_day_name#260,d_quarter_name#261,d_holiday#262,d_weekend#263,d_following_holiday#264,d_first_dom#265,d_last_dom#266,d_same_day_ly#267,d_same_day_lq#268,d_current_day#269,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1506354227,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 1168784,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [d_date_sk#246, d_week_seq#250] Condition : (isnotnull(d_week_seq#250) AND isnotnull(d_date_sk#246)) "
          },
          "1" : {
            "sign" : -524481469,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 1168784,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [2]: [d_date_sk#246, d_week_seq#250] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_week_seq:int> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(d_week_seq#250) AND isnotnull(d_date_sk#246))\n+- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#246,d_week_seq#250] Batched: true, DataFilters: [isnotnull(d_week_seq#250), isnotnull(d_date_sk#246)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_week_seq:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1168784,
        "inputRowCount" : 73049
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 5 ],
      "Objectives" : {
        "DurationInMs" : 2677,
        "TotalTasksDurationInMs" : 2674,
        "IOBytes" : {
          "Total" : 243142,
          "Details" : {
            "IR" : 243142,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702227291908,
  "SQLEndTimeInMs" : 1702227401233,
  "Objectives" : {
    "DurationInMs" : 109325,
    "IOBytes" : {
      "Total" : 17981549587,
      "Details" : {
        "IR" : 3827018107,
        "IW" : 0,
        "SR" : 7077265740,
        "SW" : 7077265740
      }
    }
  }
}
