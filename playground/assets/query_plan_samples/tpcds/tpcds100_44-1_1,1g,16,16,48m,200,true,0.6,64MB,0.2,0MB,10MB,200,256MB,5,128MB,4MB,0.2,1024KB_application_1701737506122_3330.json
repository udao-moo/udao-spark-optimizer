{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "34" : {
          "sign" : 1532293437,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 9588000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#84, i_product_name#105] "
        },
        "12" : {
          "sign" : 421127200,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.WindowGroupLimit",
          "sizeInBytes" : 31120,
          "rowCount" : 1556,
          "isRuntime" : false,
          "predicate" : " (unknown) WindowGroupLimit Arguments: [rank_col#1 ASC NULLS FIRST], rank(rank_col#1), 10 "
        },
        "8" : {
          "sign" : -950488923,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 619810816,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (rnk#4 = rnk#9) "
        },
        "19" : {
          "sign" : -1634103909,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1949120,
          "rowCount" : 97456,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_store_sk#118, ss_net_profit#133] "
        },
        "23" : {
          "sign" : 415559398,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 37344,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((rnk#9 < 11) AND isnotnull(item_sk#5)) "
        },
        "4" : {
          "sign" : 536112056,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 38849352004458545460000,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#84 = item_sk#5) "
        },
        "15" : {
          "sign" : 1358527363,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 43315220,
          "rowCount" : 2165761,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#17, ss_net_profit#37] "
        },
        "11" : {
          "sign" : 63114786,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
          "sizeInBytes" : 37344,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Window Arguments: [rank(rank_col#1) windowspecdefinition(rank_col#1 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#4], [rank_col#1 ASC NULLS FIRST] "
        },
        "9" : {
          "sign" : -1214696613,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 24896,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [item_sk#0, rnk#4] "
        },
        "33" : {
          "sign" : 74022018,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#39, i_item_id#40, i_rec_start_date#41, i_rec_end_date#42, i_item_desc#43, i_current_price#44, i_wholesale_cost#45, i_brand_id#46, i_brand#47, i_class_id#48, i_class#49, i_category_id#50, i_category#51, i_manufact_id#52, i_manufact#53, i_size#54, i_formulation#55, i_color#56, i_units#57, i_container#58, i_manager_id#59, i_product_name#60], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "22" : {
          "sign" : 1443045350,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 24896,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [item_sk#5, rnk#9] "
        },
        "26" : {
          "sign" : -1370326430,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 31120,
          "rowCount" : 1556,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(rank_col#6) AND (cast(rank_col#6 as decimal(13,7)) > (0.9 * scalar-subquery#8 []))) "
        },
        "13" : {
          "sign" : 1726338745,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 31120,
          "rowCount" : 1556,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(rank_col#1) AND (cast(rank_col#1 as decimal(13,7)) > (0.9 * scalar-subquery#3 []))) "
        },
        "24" : {
          "sign" : -1334727977,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
          "sizeInBytes" : 37344,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Window Arguments: [rank(rank_col#6) windowspecdefinition(rank_col#6 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#9], [rank_col#6 DESC NULLS LAST] "
        },
        "35" : {
          "sign" : -1437122227,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(i_item_sk#84) "
        },
        "16" : {
          "sign" : -836273392,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 329195672,
          "rowCount" : 2165761,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(ss_store_sk#22) AND (ss_store_sk#22 = 50)) "
        },
        "5" : {
          "sign" : -2099408743,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 4051872340890545,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [rnk#4, item_sk#5, i_product_name#60] "
        },
        "10" : {
          "sign" : -1352997337,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 37344,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((rnk#4 < 11) AND isnotnull(item_sk#0)) "
        },
        "21" : {
          "sign" : -371595817,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 43776970976,
          "rowCount" : 288006388,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#112, ss_item_sk#113, ss_customer_sk#114, ss_cdemo_sk#115, ss_hdemo_sk#116, ss_addr_sk#117, ss_store_sk#118, ss_promo_sk#119, ss_ticket_number#120L, ss_quantity#121, ss_wholesale_cost#122, ss_list_price#123, ss_sales_price#124, ss_ext_discount_amt#125, ss_ext_sales_price#126, ss_ext_wholesale_cost#127, ss_ext_list_price#128, ss_ext_tax#129, ss_coupon_amt#130, ss_net_paid#131, ss_net_paid_inc_tax#132, ss_net_profit#133, ss_sold_date_sk#134], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "32" : {
          "sign" : -1087608288,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(i_item_sk#39) "
        },
        "6" : {
          "sign" : 709320274,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 4952288416644000,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#39 = item_sk#0) "
        },
        "36" : {
          "sign" : -948605159,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#84, i_item_id#85, i_rec_start_date#86, i_rec_end_date#87, i_item_desc#88, i_current_price#89, i_wholesale_cost#90, i_brand_id#91, i_brand#92, i_class_id#93, i_class#94, i_category_id#95, i_category#96, i_manufact_id#97, i_manufact#98, i_size#99, i_formulation#100, i_color#101, i_units#102, i_container#103, i_manager_id#104, i_product_name#105], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "1" : {
          "sign" : -24470871,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
          "sizeInBytes" : 33669438403864072732000,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) LocalLimit Arguments: 100 "
        },
        "17" : {
          "sign" : 437822322,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 43776970976,
          "rowCount" : 288006388,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#16, ss_item_sk#17, ss_customer_sk#18, ss_cdemo_sk#19, ss_hdemo_sk#20, ss_addr_sk#21, ss_store_sk#22, ss_promo_sk#23, ss_ticket_number#24L, ss_quantity#25, ss_wholesale_cost#26, ss_list_price#27, ss_sales_price#28, ss_ext_discount_amt#29, ss_ext_sales_price#30, ss_ext_wholesale_cost#31, ss_ext_list_price#32, ss_ext_tax#33, ss_coupon_amt#34, ss_net_paid#35, ss_net_paid_inc_tax#36, ss_net_profit#37, ss_sold_date_sk#38], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "25" : {
          "sign" : -900749741,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.WindowGroupLimit",
          "sizeInBytes" : 31120,
          "rowCount" : 1556,
          "isRuntime" : false,
          "predicate" : " (unknown) WindowGroupLimit Arguments: [rank_col#6 DESC NULLS LAST], rank(rank_col#6), 10 "
        },
        "14" : {
          "sign" : 1568532261,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 31120,
          "rowCount" : 1556,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [ss_item_sk#17], [ss_item_sk#17 AS item_sk#0, cast((avg(UnscaledValue(ss_net_profit#37)) / 100.0) as decimal(11,6)) AS rank_col#1] "
        },
        "31" : {
          "sign" : 217095632,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 9588000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#39, i_product_name#60] "
        },
        "0" : {
          "sign" : 336428044,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
          "sizeInBytes" : 5200,
          "rowCount" : 100,
          "isRuntime" : false,
          "predicate" : " (unknown) GlobalLimit Arguments: 100 "
        },
        "20" : {
          "sign" : -468623257,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 14813312,
          "rowCount" : 97456,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(ss_store_sk#118) AND ((ss_store_sk#118 = 50) AND isnull(ss_hdemo_sk#116))) "
        },
        "27" : {
          "sign" : 2122199847,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 31120,
          "rowCount" : 1556,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [ss_item_sk#62], [ss_item_sk#62 AS item_sk#5, cast((avg(UnscaledValue(ss_net_profit#82)) / 100.0) as decimal(11,6)) AS rank_col#6] "
        },
        "2" : {
          "sign" : 1807235446,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 33669438403864072732000,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [rnk#4 ASC NULLS FIRST], true "
        },
        "18" : {
          "sign" : -1006133232,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 16,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [ss_store_sk#118], [cast((avg(UnscaledValue(ss_net_profit#133)) / 100.0) as decimal(11,6)) AS rank_col#2] "
        },
        "30" : {
          "sign" : -521746698,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 43776970976,
          "rowCount" : 288006388,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#61, ss_item_sk#62, ss_customer_sk#63, ss_cdemo_sk#64, ss_hdemo_sk#65, ss_addr_sk#66, ss_store_sk#67, ss_promo_sk#68, ss_ticket_number#69L, ss_quantity#70, ss_wholesale_cost#71, ss_list_price#72, ss_sales_price#73, ss_ext_discount_amt#74, ss_ext_sales_price#75, ss_ext_wholesale_cost#76, ss_ext_list_price#77, ss_ext_tax#78, ss_coupon_amt#79, ss_net_paid#80, ss_net_paid_inc_tax#81, ss_net_profit#82, ss_sold_date_sk#83], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "7" : {
          "sign" : 805983535,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 516509013,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [item_sk#0, rnk#4, item_sk#5] "
        },
        "29" : {
          "sign" : 539316532,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 329195672,
          "rowCount" : 2165761,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(ss_store_sk#67) AND (ss_store_sk#67 = 50)) "
        },
        "3" : {
          "sign" : 404044321,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 33669438403864072732000,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [rnk#4, i_product_name#60 AS best_performing#10, i_product_name#105 AS worst_performing#11] "
        },
        "28" : {
          "sign" : 2137896251,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 43315220,
          "rowCount" : 2165761,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#62, ss_net_profit#82] "
        }
      },
      "links" : [ {
        "fromId" : 17,
        "fromName" : "LogicalRelation",
        "toId" : 16,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "Filter",
        "toId" : 15,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "Project",
        "toId" : 14,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Aggregate",
        "toId" : 13,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "LogicalRelation",
        "toId" : 20,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "Filter",
        "toId" : 19,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "Project",
        "toId" : 18,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "Aggregate",
        "toId" : 13,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 13,
        "fromName" : "Filter",
        "toId" : 12,
        "toName" : "WindowGroupLimit",
        "linkType" : "Operator"
      }, {
        "fromId" : 12,
        "fromName" : "WindowGroupLimit",
        "toId" : 11,
        "toName" : "Window",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "Window",
        "toId" : 10,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Filter",
        "toId" : 9,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Project",
        "toId" : 8,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 30,
        "fromName" : "LogicalRelation",
        "toId" : 29,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 29,
        "fromName" : "Filter",
        "toId" : 28,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "Project",
        "toId" : 27,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "Aggregate",
        "toId" : 26,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "Aggregate",
        "toId" : 26,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 26,
        "fromName" : "Filter",
        "toId" : 25,
        "toName" : "WindowGroupLimit",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "WindowGroupLimit",
        "toId" : 24,
        "toName" : "Window",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "Window",
        "toId" : 23,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "Filter",
        "toId" : 22,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "Project",
        "toId" : 8,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Join",
        "toId" : 7,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Project",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 33,
        "fromName" : "LogicalRelation",
        "toId" : 32,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 32,
        "fromName" : "Filter",
        "toId" : 31,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 31,
        "fromName" : "Project",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Join",
        "toId" : 5,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Project",
        "toId" : 4,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 36,
        "fromName" : "LogicalRelation",
        "toId" : 35,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 35,
        "fromName" : "Filter",
        "toId" : 34,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 34,
        "fromName" : "Project",
        "toId" : 4,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Join",
        "toId" : 3,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Project",
        "toId" : 2,
        "toName" : "Sort",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Sort",
        "toId" : 1,
        "toName" : "LocalLimit",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "LocalLimit",
        "toId" : 0,
        "toName" : "GlobalLimit",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [rnk#4 ASC NULLS FIRST], true\n      +- Project [rnk#4, i_product_name#60 AS best_performing#10, i_product_name#105 AS worst_performing#11]\n         +- Join Inner, (i_item_sk#84 = item_sk#5)\n            :- Project [rnk#4, item_sk#5, i_product_name#60]\n            :  +- Join Inner, (i_item_sk#39 = item_sk#0)\n            :     :- Project [item_sk#0, rnk#4, item_sk#5]\n            :     :  +- Join Inner, (rnk#4 = rnk#9)\n            :     :     :- Project [item_sk#0, rnk#4]\n            :     :     :  +- Filter ((rnk#4 < 11) AND isnotnull(item_sk#0))\n            :     :     :     +- Window [rank(rank_col#1) windowspecdefinition(rank_col#1 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#4], [rank_col#1 ASC NULLS FIRST]\n            :     :     :        +- WindowGroupLimit [rank_col#1 ASC NULLS FIRST], rank(rank_col#1), 10\n            :     :     :           +- Filter (isnotnull(rank_col#1) AND (cast(rank_col#1 as decimal(13,7)) > (0.9 * scalar-subquery#3 [])))\n            :     :     :              :  +- Aggregate [ss_store_sk#118], [cast((avg(UnscaledValue(ss_net_profit#133)) / 100.0) as decimal(11,6)) AS rank_col#2]\n            :     :     :              :     +- Project [ss_store_sk#118, ss_net_profit#133]\n            :     :     :              :        +- Filter (isnotnull(ss_store_sk#118) AND ((ss_store_sk#118 = 50) AND isnull(ss_hdemo_sk#116)))\n            :     :     :              :           +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#112,ss_item_sk#113,ss_customer_sk#114,ss_cdemo_sk#115,ss_hdemo_sk#116,ss_addr_sk#117,ss_store_sk#118,ss_promo_sk#119,ss_ticket_number#120L,ss_quantity#121,ss_wholesale_cost#122,ss_list_price#123,ss_sales_price#124,ss_ext_discount_amt#125,ss_ext_sales_price#126,ss_ext_wholesale_cost#127,ss_ext_list_price#128,ss_ext_tax#129,ss_coupon_amt#130,ss_net_paid#131,ss_net_paid_inc_tax#132,ss_net_profit#133,ss_sold_date_sk#134] parquet\n            :     :     :              +- Aggregate [ss_item_sk#17], [ss_item_sk#17 AS item_sk#0, cast((avg(UnscaledValue(ss_net_profit#37)) / 100.0) as decimal(11,6)) AS rank_col#1]\n            :     :     :                 +- Project [ss_item_sk#17, ss_net_profit#37]\n            :     :     :                    +- Filter (isnotnull(ss_store_sk#22) AND (ss_store_sk#22 = 50))\n            :     :     :                       +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#16,ss_item_sk#17,ss_customer_sk#18,ss_cdemo_sk#19,ss_hdemo_sk#20,ss_addr_sk#21,ss_store_sk#22,ss_promo_sk#23,ss_ticket_number#24L,ss_quantity#25,ss_wholesale_cost#26,ss_list_price#27,ss_sales_price#28,ss_ext_discount_amt#29,ss_ext_sales_price#30,ss_ext_wholesale_cost#31,ss_ext_list_price#32,ss_ext_tax#33,ss_coupon_amt#34,ss_net_paid#35,ss_net_paid_inc_tax#36,ss_net_profit#37,ss_sold_date_sk#38] parquet\n            :     :     +- Project [item_sk#5, rnk#9]\n            :     :        +- Filter ((rnk#9 < 11) AND isnotnull(item_sk#5))\n            :     :           +- Window [rank(rank_col#6) windowspecdefinition(rank_col#6 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#9], [rank_col#6 DESC NULLS LAST]\n            :     :              +- WindowGroupLimit [rank_col#6 DESC NULLS LAST], rank(rank_col#6), 10\n            :     :                 +- Filter (isnotnull(rank_col#6) AND (cast(rank_col#6 as decimal(13,7)) > (0.9 * scalar-subquery#8 [])))\n            :     :                    :  +- Aggregate [ss_store_sk#118], [cast((avg(UnscaledValue(ss_net_profit#133)) / 100.0) as decimal(11,6)) AS rank_col#2]\n            :     :                    :     +- Project [ss_store_sk#118, ss_net_profit#133]\n            :     :                    :        +- Filter (isnotnull(ss_store_sk#118) AND ((ss_store_sk#118 = 50) AND isnull(ss_hdemo_sk#116)))\n            :     :                    :           +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#112,ss_item_sk#113,ss_customer_sk#114,ss_cdemo_sk#115,ss_hdemo_sk#116,ss_addr_sk#117,ss_store_sk#118,ss_promo_sk#119,ss_ticket_number#120L,ss_quantity#121,ss_wholesale_cost#122,ss_list_price#123,ss_sales_price#124,ss_ext_discount_amt#125,ss_ext_sales_price#126,ss_ext_wholesale_cost#127,ss_ext_list_price#128,ss_ext_tax#129,ss_coupon_amt#130,ss_net_paid#131,ss_net_paid_inc_tax#132,ss_net_profit#133,ss_sold_date_sk#134] parquet\n            :     :                    +- Aggregate [ss_item_sk#62], [ss_item_sk#62 AS item_sk#5, cast((avg(UnscaledValue(ss_net_profit#82)) / 100.0) as decimal(11,6)) AS rank_col#6]\n            :     :                       +- Project [ss_item_sk#62, ss_net_profit#82]\n            :     :                          +- Filter (isnotnull(ss_store_sk#67) AND (ss_store_sk#67 = 50))\n            :     :                             +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#61,ss_item_sk#62,ss_customer_sk#63,ss_cdemo_sk#64,ss_hdemo_sk#65,ss_addr_sk#66,ss_store_sk#67,ss_promo_sk#68,ss_ticket_number#69L,ss_quantity#70,ss_wholesale_cost#71,ss_list_price#72,ss_sales_price#73,ss_ext_discount_amt#74,ss_ext_sales_price#75,ss_ext_wholesale_cost#76,ss_ext_list_price#77,ss_ext_tax#78,ss_coupon_amt#79,ss_net_paid#80,ss_net_paid_inc_tax#81,ss_net_profit#82,ss_sold_date_sk#83] parquet\n            :     +- Project [i_item_sk#39, i_product_name#60]\n            :        +- Filter isnotnull(i_item_sk#39)\n            :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#39,i_item_id#40,i_rec_start_date#41,i_rec_end_date#42,i_item_desc#43,i_current_price#44,i_wholesale_cost#45,i_brand_id#46,i_brand#47,i_class_id#48,i_class#49,i_category_id#50,i_category#51,i_manufact_id#52,i_manufact#53,i_size#54,i_formulation#55,i_color#56,i_units#57,i_container#58,i_manager_id#59,i_product_name#60] parquet\n            +- Project [i_item_sk#84, i_product_name#105]\n               +- Filter isnotnull(i_item_sk#84)\n                  +- Relation spark_catalog.tpcds_100.item[i_item_sk#84,i_item_id#85,i_rec_start_date#86,i_rec_end_date#87,i_item_desc#88,i_current_price#89,i_wholesale_cost#90,i_brand_id#91,i_brand#92,i_class_id#93,i_class#94,i_category_id#95,i_category#96,i_manufact_id#97,i_manufact#98,i_size#99,i_formulation#100,i_color#101,i_units#102,i_container#103,i_manager_id#104,i_product_name#105] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 87727749952,
      "inputRowCount" : 576420776
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "4" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -111107467,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 26484900,
            "rowCount" : 1324245,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: WindowGroupLimit [rank_col#193 ASC NULLS FIRST], rank(rank_col#193), 10, WindowGroupLimit [rank_col#193 ASC NULLS FIRST], rank(rank_col#193), 10, Final "
          },
          "8" : {
            "sign" : 1605040646,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4449463200,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (rnk#196 = rnk#201) "
          },
          "4" : {
            "sign" : -1238512421,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1028127047052648023321344,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#231 = item_sk#197) "
          },
          "15" : {
            "sign" : -711316971,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 316,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(rank_col#198) windowspecdefinition(rank_col#198 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#201], [rank_col#198 DESC NULLS LAST] "
          },
          "11" : {
            "sign" : 366413303,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 31781880,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(rank_col#193) windowspecdefinition(rank_col#193 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#196], [rank_col#193 ASC NULLS FIRST] "
          },
          "9" : {
            "sign" : 1245322642,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 21187920,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [item_sk#192, rnk#196] "
          },
          "13" : {
            "sign" : -1976818022,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 210,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [item_sk#197, rnk#201] "
          },
          "16" : {
            "sign" : 8695221,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 264,
            "rowCount" : 11,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: WindowGroupLimit [rank_col#198 DESC NULLS LAST], rank(rank_col#198), 10, WindowGroupLimit [rank_col#198 DESC NULLS LAST], rank(rank_col#198), 10, Final "
          },
          "5" : {
            "sign" : 1976490641,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 55848497136034909,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [rnk#196, item_sk#197, i_product_name#60] "
          },
          "10" : {
            "sign" : 2083569508,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 31781880,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((rnk#196 < 11) AND isnotnull(item_sk#192)) "
          },
          "6" : {
            "sign" : -2031055206,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 68259274277376000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#39 = item_sk#192) "
          },
          "1" : {
            "sign" : 104829725,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 891043440778961620211831,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : 870855655,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 18409216,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#39, i_product_name#60], BroadcastQueryStage 3 "
          },
          "14" : {
            "sign" : 273831984,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 316,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((rnk#201 < 11) AND isnotnull(item_sk#197)) "
          },
          "0" : {
            "sign" : 2087796574,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 5200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1692428664,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 891043440778961620211831,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [rnk#196 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 1965566262,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 18409216,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#231, i_product_name#252], BroadcastQueryStage 5 "
          },
          "7" : {
            "sign" : 2122756592,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3707886000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [item_sk#192, rnk#196, item_sk#197] "
          },
          "3" : {
            "sign" : -524664069,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 891043440778961620211831,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [rnk#196, i_product_name#60 AS best_performing#202, i_product_name#252 AS worst_performing#203] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Window",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Window",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [rnk#196 ASC NULLS FIRST], true\n      +- Project [rnk#196, i_product_name#60 AS best_performing#202, i_product_name#252 AS worst_performing#203]\n         +- Join Inner, (i_item_sk#231 = item_sk#197)\n            :- Project [rnk#196, item_sk#197, i_product_name#60]\n            :  +- Join Inner, (i_item_sk#39 = item_sk#192)\n            :     :- Project [item_sk#192, rnk#196, item_sk#197]\n            :     :  +- Join Inner, (rnk#196 = rnk#201)\n            :     :     :- Project [item_sk#192, rnk#196]\n            :     :     :  +- Filter ((rnk#196 < 11) AND isnotnull(item_sk#192))\n            :     :     :     +- Window [rank(rank_col#193) windowspecdefinition(rank_col#193 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#196], [rank_col#193 ASC NULLS FIRST]\n            :     :     :        +- LogicalQueryStage WindowGroupLimit [rank_col#193 ASC NULLS FIRST], rank(rank_col#193), 10, WindowGroupLimit [rank_col#193 ASC NULLS FIRST], rank(rank_col#193), 10, Final\n            :     :     +- Project [item_sk#197, rnk#201]\n            :     :        +- Filter ((rnk#201 < 11) AND isnotnull(item_sk#197))\n            :     :           +- Window [rank(rank_col#198) windowspecdefinition(rank_col#198 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#201], [rank_col#198 DESC NULLS LAST]\n            :     :              +- LogicalQueryStage WindowGroupLimit [rank_col#198 DESC NULLS LAST], rank(rank_col#198), 10, WindowGroupLimit [rank_col#198 DESC NULLS LAST], rank(rank_col#198), 10, Final\n            :     +- LogicalQueryStage Project [i_item_sk#39, i_product_name#60], BroadcastQueryStage 3\n            +- LogicalQueryStage Project [i_item_sk#231, i_product_name#252], BroadcastQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 63303596,
        "inputRowCount" : 1732256
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227031524,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 857,
        "IOBytes" : {
          "Total" : 18871659,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 18871491,
            "SW" : 168
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -111107467,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 264,
            "rowCount" : 11,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: WindowGroupLimit [rank_col#193 ASC NULLS FIRST], rank(rank_col#193), 10, WindowGroupLimit [rank_col#193 ASC NULLS FIRST], rank(rank_col#193), 10, Final "
          },
          "8" : {
            "sign" : 1979712290,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 44100,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (rnk#196 = rnk#201) "
          },
          "4" : {
            "sign" : -515632793,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 10190083777972786688,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#231 = item_sk#197) "
          },
          "15" : {
            "sign" : 1965566262,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 18409216,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#231, i_product_name#252], BroadcastQueryStage 5 "
          },
          "11" : {
            "sign" : 366413303,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 316,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(rank_col#193) windowspecdefinition(rank_col#193 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#196], [rank_col#193 ASC NULLS FIRST] "
          },
          "9" : {
            "sign" : 1245322642,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 210,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [item_sk#192, rnk#196] "
          },
          "13" : {
            "sign" : -1164286914,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 210,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [item_sk#197, rnk#201], BroadcastQueryStage 8 "
          },
          "5" : {
            "sign" : -916672609,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 553531653818,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [rnk#196, item_sk#197, i_product_name#60] "
          },
          "10" : {
            "sign" : 2083569508,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 316,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((rnk#196 < 11) AND isnotnull(item_sk#192)) "
          },
          "6" : {
            "sign" : -993818970,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 676538688000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#39 = item_sk#192) "
          },
          "1" : {
            "sign" : -225237027,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 8831405940909748462,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "14" : {
            "sign" : 870855655,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 18409216,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#39, i_product_name#60], BroadcastQueryStage 3 "
          },
          "0" : {
            "sign" : 564887364,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 5200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1077059558,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 8831405940909748462,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [rnk#196 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -318095340,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 36750,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [item_sk#192, rnk#196, item_sk#197] "
          },
          "3" : {
            "sign" : 1804264891,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 8831405940909748462,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [rnk#196, i_product_name#60 AS best_performing#202, i_product_name#252 AS worst_performing#203] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Window",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [rnk#196 ASC NULLS FIRST], true\n      +- Project [rnk#196, i_product_name#60 AS best_performing#202, i_product_name#252 AS worst_performing#203]\n         +- Join Inner, (i_item_sk#231 = item_sk#197)\n            :- Project [rnk#196, item_sk#197, i_product_name#60]\n            :  +- Join Inner, (i_item_sk#39 = item_sk#192)\n            :     :- Project [item_sk#192, rnk#196, item_sk#197]\n            :     :  +- Join Inner, (rnk#196 = rnk#201)\n            :     :     :- Project [item_sk#192, rnk#196]\n            :     :     :  +- Filter ((rnk#196 < 11) AND isnotnull(item_sk#192))\n            :     :     :     +- Window [rank(rank_col#193) windowspecdefinition(rank_col#193 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#196], [rank_col#193 ASC NULLS FIRST]\n            :     :     :        +- LogicalQueryStage WindowGroupLimit [rank_col#193 ASC NULLS FIRST], rank(rank_col#193), 10, WindowGroupLimit [rank_col#193 ASC NULLS FIRST], rank(rank_col#193), 10, Final\n            :     :     +- LogicalQueryStage Project [item_sk#197, rnk#201], BroadcastQueryStage 8\n            :     +- LogicalQueryStage Project [i_item_sk#39, i_product_name#60], BroadcastQueryStage 3\n            +- LogicalQueryStage Project [i_item_sk#231, i_product_name#252], BroadcastQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 36818906,
        "inputRowCount" : 408011
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227031621,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 760,
        "IOBytes" : {
          "Total" : 366,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 366,
            "SW" : 0
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -111107467,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 264,
            "rowCount" : 11,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: WindowGroupLimit [rank_col#193 ASC NULLS FIRST], rank(rank_col#193), 10, WindowGroupLimit [rank_col#193 ASC NULLS FIRST], rank(rank_col#193), 10, Final "
          },
          "8" : {
            "sign" : 1979712290,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 220217760,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (rnk#196 = rnk#201) "
          },
          "4" : {
            "sign" : -515632793,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 50885202353701608445952,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#231 = item_sk#197) "
          },
          "15" : {
            "sign" : 1965566262,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 18409216,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#231, i_product_name#252], BroadcastQueryStage 5 "
          },
          "11" : {
            "sign" : 366413303,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 316,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(rank_col#193) windowspecdefinition(rank_col#193 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#196], [rank_col#193 ASC NULLS FIRST] "
          },
          "9" : {
            "sign" : 1245322642,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 210,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [item_sk#192, rnk#196] "
          },
          "13" : {
            "sign" : -1164286914,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048656,
            "rowCount" : 10,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [item_sk#197, rnk#201], BroadcastQueryStage 8 "
          },
          "5" : {
            "sign" : -916672609,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2764115666506472,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [rnk#196, item_sk#197, i_product_name#60] "
          },
          "10" : {
            "sign" : 2083569508,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 316,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((rnk#196 < 11) AND isnotnull(item_sk#192)) "
          },
          "6" : {
            "sign" : -993818970,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3378363592396800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#39 = item_sk#192) "
          },
          "1" : {
            "sign" : -225237027,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 44100508706541393986491,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "14" : {
            "sign" : 870855655,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 18409216,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#39, i_product_name#60], BroadcastQueryStage 3 "
          },
          "0" : {
            "sign" : 564887364,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 5200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1077059558,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 44100508706541393986491,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [rnk#196 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -318095340,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 183514800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [item_sk#192, rnk#196, item_sk#197] "
          },
          "3" : {
            "sign" : 1804264891,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 44100508706541393986491,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [rnk#196, i_product_name#60 AS best_performing#202, i_product_name#252 AS worst_performing#203] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Window",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [rnk#196 ASC NULLS FIRST], true\n      +- Project [rnk#196, i_product_name#60 AS best_performing#202, i_product_name#252 AS worst_performing#203]\n         +- Join Inner, (i_item_sk#231 = item_sk#197)\n            :- Project [rnk#196, item_sk#197, i_product_name#60]\n            :  +- Join Inner, (i_item_sk#39 = item_sk#192)\n            :     :- Project [item_sk#192, rnk#196, item_sk#197]\n            :     :  +- Join Inner, (rnk#196 = rnk#201)\n            :     :     :- Project [item_sk#192, rnk#196]\n            :     :     :  +- Filter ((rnk#196 < 11) AND isnotnull(item_sk#192))\n            :     :     :     +- Window [rank(rank_col#193) windowspecdefinition(rank_col#193 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#196], [rank_col#193 ASC NULLS FIRST]\n            :     :     :        +- LogicalQueryStage WindowGroupLimit [rank_col#193 ASC NULLS FIRST], rank(rank_col#193), 10, WindowGroupLimit [rank_col#193 ASC NULLS FIRST], rank(rank_col#193), 10, Final\n            :     :     +- LogicalQueryStage Project [item_sk#197, rnk#201], BroadcastQueryStage 8\n            :     +- LogicalQueryStage Project [i_item_sk#39, i_product_name#60], BroadcastQueryStage 3\n            +- LogicalQueryStage Project [i_item_sk#231, i_product_name#252], BroadcastQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 37867352,
        "inputRowCount" : 408021
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227031828,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 553,
        "IOBytes" : {
          "Total" : 168,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 168,
            "SW" : 0
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 173848433,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.WindowGroupLimit",
            "sizeInBytes" : 31120,
            "rowCount" : 1556,
            "isRuntime" : false,
            "predicate" : " (unknown) WindowGroupLimit Arguments: [rank_col#193 ASC NULLS FIRST], rank(rank_col#193), 10 "
          },
          "8" : {
            "sign" : -166792566,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 619810816,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (rnk#196 = rnk#201) "
          },
          "19" : {
            "sign" : 343164446,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24896,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [item_sk#197, rnk#201] "
          },
          "23" : {
            "sign" : 900293838,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 31120,
            "rowCount" : 1556,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(rank_col#198) AND (cast(rank_col#198 as decimal(13,7)) > (0.9 * scalar-subquery#200 []))) "
          },
          "4" : {
            "sign" : -294565837,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 143218234409517381495808,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#231 = item_sk#197) "
          },
          "15" : {
            "sign" : -1370298864,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ss_store_sk#264], [cast((avg(UnscaledValue(ss_net_profit#279)) / 100.0) as decimal(11,6)) AS rank_col#194] "
          },
          "11" : {
            "sign" : -1298056837,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 37344,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(rank_col#193) windowspecdefinition(rank_col#193 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#196], [rank_col#193 ASC NULLS FIRST] "
          },
          "9" : {
            "sign" : 1731203200,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24896,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [item_sk#192, rnk#196] "
          },
          "22" : {
            "sign" : 1098531931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.WindowGroupLimit",
            "sizeInBytes" : 31120,
            "rowCount" : 1556,
            "isRuntime" : false,
            "predicate" : " (unknown) WindowGroupLimit Arguments: [rank_col#198 DESC NULLS LAST], rank(rank_col#198), 10 "
          },
          "26" : {
            "sign" : 1965566262,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 18409216,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#231, i_product_name#252], BroadcastQueryStage 5 "
          },
          "13" : {
            "sign" : 1561192338,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 31120,
            "rowCount" : 1556,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(rank_col#193) AND (cast(rank_col#193 as decimal(13,7)) > (0.9 * scalar-subquery#195 []))) "
          },
          "24" : {
            "sign" : 1553306599,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 31120,
            "rowCount" : 1556,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ss_item_sk#209], [ss_item_sk#209 AS item_sk#197, cast((avg(UnscaledValue(ss_net_profit#229)) / 100.0) as decimal(11,6)) AS rank_col#198], HashAggregate(keys=[ss_item_sk#209], functions=[avg(UnscaledValue(ss_net_profit#229))]) "
          },
          "16" : {
            "sign" : 688166844,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1949120,
            "rowCount" : 97456,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_store_sk#264, ss_net_profit#279] "
          },
          "5" : {
            "sign" : -1362288757,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 7779703079670388,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [rnk#196, item_sk#197, i_product_name#60] "
          },
          "10" : {
            "sign" : 1773031394,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 37344,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((rnk#196 < 11) AND isnotnull(item_sk#192)) "
          },
          "21" : {
            "sign" : -1710456871,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 37344,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(rank_col#198) windowspecdefinition(rank_col#198 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#201], [rank_col#198 DESC NULLS LAST] "
          },
          "6" : {
            "sign" : -1881583040,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 9508525986263808,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#39 = item_sk#192) "
          },
          "1" : {
            "sign" : -1294121405,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 124122469821581730629700,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : 372768429,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14813312,
            "rowCount" : 97456,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ss_store_sk#264) AND ((ss_store_sk#264 = 50) AND isnull(ss_hdemo_sk#262))) "
          },
          "25" : {
            "sign" : 870855655,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 18409216,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#39, i_product_name#60], BroadcastQueryStage 3 "
          },
          "14" : {
            "sign" : 555319348,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 31120,
            "rowCount" : 1556,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ss_item_sk#17], [ss_item_sk#17 AS item_sk#192, cast((avg(UnscaledValue(ss_net_profit#37)) / 100.0) as decimal(11,6)) AS rank_col#193], HashAggregate(keys=[ss_item_sk#17], functions=[avg(UnscaledValue(ss_net_profit#37))]) "
          },
          "0" : {
            "sign" : 891919568,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 5200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 1157460694,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 37344,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((rnk#201 < 11) AND isnotnull(item_sk#197)) "
          },
          "2" : {
            "sign" : 400986278,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 124122469821581730629700,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [rnk#196 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : -18853771,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 43776970976,
            "rowCount" : 288006388,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#258, ss_item_sk#259, ss_customer_sk#260, ss_cdemo_sk#261, ss_hdemo_sk#262, ss_addr_sk#263, ss_store_sk#264, ss_promo_sk#265, ss_ticket_number#266L, ss_quantity#267, ss_wholesale_cost#268, ss_list_price#269, ss_sales_price#270, ss_ext_discount_amt#271, ss_ext_sales_price#272, ss_ext_wholesale_cost#273, ss_ext_list_price#274, ss_ext_tax#275, ss_coupon_amt#276, ss_net_paid#277, ss_net_paid_inc_tax#278, ss_net_profit#279, ss_sold_date_sk#280], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "7" : {
            "sign" : 910502126,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 516509013,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [item_sk#192, rnk#196, item_sk#197] "
          },
          "3" : {
            "sign" : -1687605403,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 124122469821581730629700,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [rnk#196, i_product_name#60 AS best_performing#202, i_product_name#252 AS worst_performing#203] "
          }
        },
        "links" : [ {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalRelation",
          "toId" : 17,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Filter",
          "toId" : 16,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Aggregate",
          "toId" : 13,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 13,
          "fromName" : "Filter",
          "toId" : 12,
          "toName" : "WindowGroupLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "WindowGroupLimit",
          "toId" : 11,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Window",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalQueryStage",
          "toId" : 23,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Aggregate",
          "toId" : 23,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 23,
          "fromName" : "Filter",
          "toId" : 22,
          "toName" : "WindowGroupLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "WindowGroupLimit",
          "toId" : 21,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Window",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Filter",
          "toId" : 19,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [rnk#196 ASC NULLS FIRST], true\n      +- Project [rnk#196, i_product_name#60 AS best_performing#202, i_product_name#252 AS worst_performing#203]\n         +- Join Inner, (i_item_sk#231 = item_sk#197)\n            :- Project [rnk#196, item_sk#197, i_product_name#60]\n            :  +- Join Inner, (i_item_sk#39 = item_sk#192)\n            :     :- Project [item_sk#192, rnk#196, item_sk#197]\n            :     :  +- Join Inner, (rnk#196 = rnk#201)\n            :     :     :- Project [item_sk#192, rnk#196]\n            :     :     :  +- Filter ((rnk#196 < 11) AND isnotnull(item_sk#192))\n            :     :     :     +- Window [rank(rank_col#193) windowspecdefinition(rank_col#193 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#196], [rank_col#193 ASC NULLS FIRST]\n            :     :     :        +- WindowGroupLimit [rank_col#193 ASC NULLS FIRST], rank(rank_col#193), 10\n            :     :     :           +- Filter (isnotnull(rank_col#193) AND (cast(rank_col#193 as decimal(13,7)) > (0.9 * scalar-subquery#195 [])))\n            :     :     :              :  +- Aggregate [ss_store_sk#264], [cast((avg(UnscaledValue(ss_net_profit#279)) / 100.0) as decimal(11,6)) AS rank_col#194]\n            :     :     :              :     +- Project [ss_store_sk#264, ss_net_profit#279]\n            :     :     :              :        +- Filter (isnotnull(ss_store_sk#264) AND ((ss_store_sk#264 = 50) AND isnull(ss_hdemo_sk#262)))\n            :     :     :              :           +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#258,ss_item_sk#259,ss_customer_sk#260,ss_cdemo_sk#261,ss_hdemo_sk#262,ss_addr_sk#263,ss_store_sk#264,ss_promo_sk#265,ss_ticket_number#266L,ss_quantity#267,ss_wholesale_cost#268,ss_list_price#269,ss_sales_price#270,ss_ext_discount_amt#271,ss_ext_sales_price#272,ss_ext_wholesale_cost#273,ss_ext_list_price#274,ss_ext_tax#275,ss_coupon_amt#276,ss_net_paid#277,ss_net_paid_inc_tax#278,ss_net_profit#279,ss_sold_date_sk#280] parquet\n            :     :     :              +- LogicalQueryStage Aggregate [ss_item_sk#17], [ss_item_sk#17 AS item_sk#192, cast((avg(UnscaledValue(ss_net_profit#37)) / 100.0) as decimal(11,6)) AS rank_col#193], HashAggregate(keys=[ss_item_sk#17], functions=[avg(UnscaledValue(ss_net_profit#37))])\n            :     :     +- Project [item_sk#197, rnk#201]\n            :     :        +- Filter ((rnk#201 < 11) AND isnotnull(item_sk#197))\n            :     :           +- Window [rank(rank_col#198) windowspecdefinition(rank_col#198 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#201], [rank_col#198 DESC NULLS LAST]\n            :     :              +- WindowGroupLimit [rank_col#198 DESC NULLS LAST], rank(rank_col#198), 10\n            :     :                 +- Filter (isnotnull(rank_col#198) AND (cast(rank_col#198 as decimal(13,7)) > (0.9 * scalar-subquery#200 [])))\n            :     :                    :  +- Aggregate [ss_store_sk#264], [cast((avg(UnscaledValue(ss_net_profit#279)) / 100.0) as decimal(11,6)) AS rank_col#194]\n            :     :                    :     +- Project [ss_store_sk#264, ss_net_profit#279]\n            :     :                    :        +- Filter (isnotnull(ss_store_sk#264) AND ((ss_store_sk#264 = 50) AND isnull(ss_hdemo_sk#262)))\n            :     :                    :           +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#258,ss_item_sk#259,ss_customer_sk#260,ss_cdemo_sk#261,ss_hdemo_sk#262,ss_addr_sk#263,ss_store_sk#264,ss_promo_sk#265,ss_ticket_number#266L,ss_quantity#267,ss_wholesale_cost#268,ss_list_price#269,ss_sales_price#270,ss_ext_discount_amt#271,ss_ext_sales_price#272,ss_ext_wholesale_cost#273,ss_ext_list_price#274,ss_ext_tax#275,ss_coupon_amt#276,ss_net_paid#277,ss_net_paid_inc_tax#278,ss_net_profit#279,ss_sold_date_sk#280] parquet\n            :     :                    +- LogicalQueryStage Aggregate [ss_item_sk#209], [ss_item_sk#209 AS item_sk#197, cast((avg(UnscaledValue(ss_net_profit#229)) / 100.0) as decimal(11,6)) AS rank_col#198], HashAggregate(keys=[ss_item_sk#209], functions=[avg(UnscaledValue(ss_net_profit#229))])\n            :     +- LogicalQueryStage Project [i_item_sk#39, i_product_name#60], BroadcastQueryStage 3\n            +- LogicalQueryStage Project [i_item_sk#231, i_product_name#252], BroadcastQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 36880672,
        "inputRowCount" : 411112
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226996633,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 35748,
        "IOBytes" : {
          "Total" : 3815905697,
          "Details" : {
            "IR" : 3759268662,
            "IW" : 0,
            "SR" : 37754080,
            "SW" : 18882955
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 173848433,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.WindowGroupLimit",
            "sizeInBytes" : 26484900,
            "rowCount" : 1324245,
            "isRuntime" : false,
            "predicate" : " (unknown) WindowGroupLimit Arguments: [rank_col#193 ASC NULLS FIRST], rank(rank_col#193), 10 "
          },
          "8" : {
            "sign" : -166792566,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 448927953926400,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (rnk#196 = rnk#201) "
          },
          "19" : {
            "sign" : 343164446,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 21187920,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [item_sk#197, rnk#201] "
          },
          "23" : {
            "sign" : 900293838,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 26484900,
            "rowCount" : 1324245,
            "isRuntime" : true,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(rank_col#198) AND (cast(rank_col#198 as decimal(13,7)) > (0.9 * scalar-subquery#200 []))) "
          },
          "4" : {
            "sign" : -294565837,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 103732731537084486389276312064,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#231 = item_sk#197) "
          },
          "15" : {
            "sign" : -1370298864,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ss_store_sk#264], [cast((avg(UnscaledValue(ss_net_profit#279)) / 100.0) as decimal(11,6)) AS rank_col#194] "
          },
          "11" : {
            "sign" : -1298056837,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 31781880,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(rank_col#193) windowspecdefinition(rank_col#193 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#196], [rank_col#193 ASC NULLS FIRST] "
          },
          "9" : {
            "sign" : 1731203200,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 21187920,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [item_sk#192, rnk#196] "
          },
          "22" : {
            "sign" : 1098531931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.WindowGroupLimit",
            "sizeInBytes" : 26484900,
            "rowCount" : 1324245,
            "isRuntime" : false,
            "predicate" : " (unknown) WindowGroupLimit Arguments: [rank_col#198 DESC NULLS LAST], rank(rank_col#198), 10 "
          },
          "26" : {
            "sign" : 1965566262,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 18409216,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#231, i_product_name#252], BroadcastQueryStage 5 "
          },
          "13" : {
            "sign" : 1561192338,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 26484900,
            "rowCount" : 1324245,
            "isRuntime" : true,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(rank_col#193) AND (cast(rank_col#193 as decimal(13,7)) > (0.9 * scalar-subquery#195 []))) "
          },
          "24" : {
            "sign" : 1553306599,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 42375840,
            "rowCount" : 1324245,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ss_item_sk#209], [ss_item_sk#209 AS item_sk#197, cast((avg(UnscaledValue(ss_net_profit#229)) / 100.0) as decimal(11,6)) AS rank_col#198], HashAggregate(keys=[ss_item_sk#209], functions=[avg(UnscaledValue(ss_net_profit#229))]) "
          },
          "16" : {
            "sign" : 688166844,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1949120,
            "rowCount" : 97456,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_store_sk#264, ss_net_profit#279] "
          },
          "5" : {
            "sign" : -1362288757,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 5634826140183508433454,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [rnk#196, item_sk#197, i_product_name#60] "
          },
          "10" : {
            "sign" : 1773031394,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 31781880,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((rnk#196 < 11) AND isnotnull(item_sk#192)) "
          },
          "21" : {
            "sign" : -1710456871,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "sizeInBytes" : 31781880,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(rank_col#198) windowspecdefinition(rank_col#198 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#201], [rank_col#198 DESC NULLS LAST] "
          },
          "6" : {
            "sign" : -1881583040,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 6887009726890954752000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#39 = item_sk#192) "
          },
          "1" : {
            "sign" : -1294121405,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 89901700665473221537372803788,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : 372768429,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14813312,
            "rowCount" : 97456,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ss_store_sk#264) AND ((ss_store_sk#264 = 50) AND isnull(ss_hdemo_sk#262))) "
          },
          "25" : {
            "sign" : 870855655,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 18409216,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#39, i_product_name#60], BroadcastQueryStage 3 "
          },
          "14" : {
            "sign" : 555319348,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 42375840,
            "rowCount" : 1324245,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ss_item_sk#17], [ss_item_sk#17 AS item_sk#192, cast((avg(UnscaledValue(ss_net_profit#37)) / 100.0) as decimal(11,6)) AS rank_col#193], HashAggregate(keys=[ss_item_sk#17], functions=[avg(UnscaledValue(ss_net_profit#37))]) "
          },
          "0" : {
            "sign" : 891919568,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 5200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 1157460694,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 31781880,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((rnk#201 < 11) AND isnotnull(item_sk#197)) "
          },
          "2" : {
            "sign" : 400986278,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 89901700665473221537372803788,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [rnk#196 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : -18853771,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 43776970976,
            "rowCount" : 288006388,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#258, ss_item_sk#259, ss_customer_sk#260, ss_cdemo_sk#261, ss_hdemo_sk#262, ss_addr_sk#263, ss_store_sk#264, ss_promo_sk#265, ss_ticket_number#266L, ss_quantity#267, ss_wholesale_cost#268, ss_list_price#269, ss_sales_price#270, ss_ext_discount_amt#271, ss_ext_sales_price#272, ss_ext_wholesale_cost#273, ss_ext_list_price#274, ss_ext_tax#275, ss_coupon_amt#276, ss_net_paid#277, ss_net_paid_inc_tax#278, ss_net_profit#279, ss_sold_date_sk#280], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "7" : {
            "sign" : 910502126,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 374106628272000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [item_sk#192, rnk#196, item_sk#197] "
          },
          "3" : {
            "sign" : -1687605403,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 89901700665473221537372803788,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [rnk#196, i_product_name#60 AS best_performing#202, i_product_name#252 AS worst_performing#203] "
          }
        },
        "links" : [ {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalRelation",
          "toId" : 17,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Filter",
          "toId" : 16,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Aggregate",
          "toId" : 13,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 13,
          "fromName" : "Filter",
          "toId" : 12,
          "toName" : "WindowGroupLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "WindowGroupLimit",
          "toId" : 11,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Window",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalQueryStage",
          "toId" : 23,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Aggregate",
          "toId" : 23,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 23,
          "fromName" : "Filter",
          "toId" : 22,
          "toName" : "WindowGroupLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "WindowGroupLimit",
          "toId" : 21,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Window",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Filter",
          "toId" : 19,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [rnk#196 ASC NULLS FIRST], true\n      +- Project [rnk#196, i_product_name#60 AS best_performing#202, i_product_name#252 AS worst_performing#203]\n         +- Join Inner, (i_item_sk#231 = item_sk#197)\n            :- Project [rnk#196, item_sk#197, i_product_name#60]\n            :  +- Join Inner, (i_item_sk#39 = item_sk#192)\n            :     :- Project [item_sk#192, rnk#196, item_sk#197]\n            :     :  +- Join Inner, (rnk#196 = rnk#201)\n            :     :     :- Project [item_sk#192, rnk#196]\n            :     :     :  +- Filter ((rnk#196 < 11) AND isnotnull(item_sk#192))\n            :     :     :     +- Window [rank(rank_col#193) windowspecdefinition(rank_col#193 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#196], [rank_col#193 ASC NULLS FIRST]\n            :     :     :        +- WindowGroupLimit [rank_col#193 ASC NULLS FIRST], rank(rank_col#193), 10\n            :     :     :           +- Filter (isnotnull(rank_col#193) AND (cast(rank_col#193 as decimal(13,7)) > (0.9 * scalar-subquery#195 [])))\n            :     :     :              :  +- Aggregate [ss_store_sk#264], [cast((avg(UnscaledValue(ss_net_profit#279)) / 100.0) as decimal(11,6)) AS rank_col#194]\n            :     :     :              :     +- Project [ss_store_sk#264, ss_net_profit#279]\n            :     :     :              :        +- Filter (isnotnull(ss_store_sk#264) AND ((ss_store_sk#264 = 50) AND isnull(ss_hdemo_sk#262)))\n            :     :     :              :           +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#258,ss_item_sk#259,ss_customer_sk#260,ss_cdemo_sk#261,ss_hdemo_sk#262,ss_addr_sk#263,ss_store_sk#264,ss_promo_sk#265,ss_ticket_number#266L,ss_quantity#267,ss_wholesale_cost#268,ss_list_price#269,ss_sales_price#270,ss_ext_discount_amt#271,ss_ext_sales_price#272,ss_ext_wholesale_cost#273,ss_ext_list_price#274,ss_ext_tax#275,ss_coupon_amt#276,ss_net_paid#277,ss_net_paid_inc_tax#278,ss_net_profit#279,ss_sold_date_sk#280] parquet\n            :     :     :              +- LogicalQueryStage Aggregate [ss_item_sk#17], [ss_item_sk#17 AS item_sk#192, cast((avg(UnscaledValue(ss_net_profit#37)) / 100.0) as decimal(11,6)) AS rank_col#193], HashAggregate(keys=[ss_item_sk#17], functions=[avg(UnscaledValue(ss_net_profit#37))])\n            :     :     +- Project [item_sk#197, rnk#201]\n            :     :        +- Filter ((rnk#201 < 11) AND isnotnull(item_sk#197))\n            :     :           +- Window [rank(rank_col#198) windowspecdefinition(rank_col#198 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#201], [rank_col#198 DESC NULLS LAST]\n            :     :              +- WindowGroupLimit [rank_col#198 DESC NULLS LAST], rank(rank_col#198), 10\n            :     :                 +- Filter (isnotnull(rank_col#198) AND (cast(rank_col#198 as decimal(13,7)) > (0.9 * scalar-subquery#200 [])))\n            :     :                    :  +- Aggregate [ss_store_sk#264], [cast((avg(UnscaledValue(ss_net_profit#279)) / 100.0) as decimal(11,6)) AS rank_col#194]\n            :     :                    :     +- Project [ss_store_sk#264, ss_net_profit#279]\n            :     :                    :        +- Filter (isnotnull(ss_store_sk#264) AND ((ss_store_sk#264 = 50) AND isnull(ss_hdemo_sk#262)))\n            :     :                    :           +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#258,ss_item_sk#259,ss_customer_sk#260,ss_cdemo_sk#261,ss_hdemo_sk#262,ss_addr_sk#263,ss_store_sk#264,ss_promo_sk#265,ss_ticket_number#266L,ss_quantity#267,ss_wholesale_cost#268,ss_list_price#269,ss_sales_price#270,ss_ext_discount_amt#271,ss_ext_sales_price#272,ss_ext_wholesale_cost#273,ss_ext_list_price#274,ss_ext_tax#275,ss_coupon_amt#276,ss_net_paid#277,ss_net_paid_inc_tax#278,ss_net_profit#279,ss_sold_date_sk#280] parquet\n            :     :                    +- LogicalQueryStage Aggregate [ss_item_sk#209], [ss_item_sk#209 AS item_sk#197, cast((avg(UnscaledValue(ss_net_profit#229)) / 100.0) as decimal(11,6)) AS rank_col#198], HashAggregate(keys=[ss_item_sk#209], functions=[avg(UnscaledValue(ss_net_profit#229))])\n            :     +- LogicalQueryStage Project [i_item_sk#39, i_product_name#60], BroadcastQueryStage 3\n            +- LogicalQueryStage Project [i_item_sk#231, i_product_name#252], BroadcastQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 121570112,
        "inputRowCount" : 3056490
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227019100,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 13281,
        "IOBytes" : {
          "Total" : 1421417331,
          "Details" : {
            "IR" : 1383651421,
            "IW" : 0,
            "SR" : 37754080,
            "SW" : 11830
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : 767007182,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 5152,
            "rowCount" : 161,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ss_store_sk#264], [cast((avg(UnscaledValue(ss_net_profit#279)) / 100.0) as decimal(11,6)) AS rank_col#194], HashAggregate(keys=[ss_store_sk#264], functions=[avg(UnscaledValue(ss_net_profit#279))]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [ss_store_sk#264], [cast((avg(UnscaledValue(ss_net_profit#279)) / 100.0) as decimal(11,6)) AS rank_col#194], HashAggregate(keys=[ss_store_sk#264], functions=[avg(UnscaledValue(ss_net_profit#279))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 5152,
        "inputRowCount" : 161
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227029671,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 2710,
        "IOBytes" : {
          "Total" : 37754446,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 37754080,
            "SW" : 366
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "4" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 173848433,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.WindowGroupLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 26484900,
                "rowCount" : 1324245
              },
              "compileTime" : {
                "sizeInBytes" : 26484900,
                "rowCount" : 1324245
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) WindowGroupLimit Arguments: [rank_col#193 ASC NULLS FIRST], rank(rank_col#193), 10 "
          },
          "1" : {
            "sign" : 1561192338,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 26484900,
                "rowCount" : 1324245
              },
              "compileTime" : {
                "sizeInBytes" : 26484900,
                "rowCount" : 1324245
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(rank_col#193) AND (cast(rank_col#193 as decimal(13,7)) > (0.9 * scalar-subquery#195 []))) "
          },
          "2" : {
            "sign" : 555319348,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 42375840,
                "rowCount" : 1324245
              },
              "compileTime" : {
                "sizeInBytes" : 31120,
                "rowCount" : 1556
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ss_item_sk#17], [ss_item_sk#17 AS item_sk#192, cast((avg(UnscaledValue(ss_net_profit#37)) / 100.0) as decimal(11,6)) AS rank_col#193], HashAggregate(keys=[ss_item_sk#17], functions=[avg(UnscaledValue(ss_net_profit#37))]) "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalQueryStage",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "WindowGroupLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "WindowGroupLimit [rank_col#193 ASC NULLS FIRST], rank(rank_col#193), 10\n+- Filter (isnotnull(rank_col#193) AND (cast(rank_col#193 as decimal(13,7)) > (0.9 * scalar-subquery#195 [])))\n   :  +- Aggregate [ss_store_sk#264], [cast((avg(UnscaledValue(ss_net_profit#279)) / 100.0) as decimal(11,6)) AS rank_col#194]\n   :     +- Project [ss_store_sk#264, ss_net_profit#279]\n   :        +- Filter (isnotnull(ss_store_sk#264) AND ((ss_store_sk#264 = 50) AND isnull(ss_hdemo_sk#262)))\n   :           +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#258,ss_item_sk#259,ss_customer_sk#260,ss_cdemo_sk#261,ss_hdemo_sk#262,ss_addr_sk#263,ss_store_sk#264,ss_promo_sk#265,ss_ticket_number#266L,ss_quantity#267,ss_wholesale_cost#268,ss_list_price#269,ss_sales_price#270,ss_ext_discount_amt#271,ss_ext_sales_price#272,ss_ext_wholesale_cost#273,ss_ext_list_price#274,ss_ext_tax#275,ss_coupon_amt#276,ss_net_paid#277,ss_net_paid_inc_tax#278,ss_net_profit#279,ss_sold_date_sk#280] parquet\n   +- LogicalQueryStage Aggregate [ss_item_sk#17], [ss_item_sk#17 AS item_sk#192, cast((avg(UnscaledValue(ss_net_profit#37)) / 100.0) as decimal(11,6)) AS rank_col#193], HashAggregate(keys=[ss_item_sk#17], functions=[avg(UnscaledValue(ss_net_profit#37))])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -50350017,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 31120,
            "rowCount" : 1556,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [ss_item_sk#17, sum#324, count#325L] Arguments: 0 "
          },
          "1" : {
            "sign" : 452395000,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [item_sk#192, rank_col#193] Arguments: [rank_col#193 ASC NULLS FIRST], false, 0 "
          },
          "0" : {
            "sign" : -882731698,
            "className" : "org.apache.spark.sql.execution.window.WindowGroupLimitExec",
            "sizeInBytes" : 26484900,
            "rowCount" : 1324245,
            "isRuntime" : false,
            "predicate" : " (unknown) WindowGroupLimit Input [2]: [item_sk#192, rank_col#193] Arguments: [rank_col#193 ASC NULLS FIRST], rank(rank_col#193), 10, Partial "
          },
          "2" : {
            "sign" : -513910763,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 26484900,
            "rowCount" : 1324245,
            "isRuntime" : true,
            "predicate" : " (unknown) Filter Input [2]: [item_sk#192, rank_col#193] Condition : (isnotnull(rank_col#193) AND (cast(rank_col#193 as decimal(13,7)) > (0.9 * Subquery subquery#195, [id=#133]))) "
          },
          "3" : {
            "sign" : 1327186066,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 42375840,
            "rowCount" : 1324245,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [3]: [ss_item_sk#17, sum#324, count#325L] Keys [1]: [ss_item_sk#17] Functions [1]: [avg(UnscaledValue(ss_net_profit#37))] Aggregate Attributes [1]: [avg(UnscaledValue(ss_net_profit#37))#253] Results [2]: [ss_item_sk#17 AS item_sk#192, cast((avg(UnscaledValue(ss_net_profit#37))#253 / 100.0) as decimal(11,6)) AS rank_col#193] "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 3,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "HashAggregate",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Sort",
          "toId" : 0,
          "toName" : "WindowGroupLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "WindowGroupLimit [rank_col#193 ASC NULLS FIRST], rank(rank_col#193), 10, Partial\n+- Sort [rank_col#193 ASC NULLS FIRST], false, 0\n   +- Filter (isnotnull(rank_col#193) AND (cast(rank_col#193 as decimal(13,7)) > (0.9 * Subquery subquery#195, [id=#133])))\n      :  +- Subquery subquery#195, [id=#133]\n      :     +- AdaptiveSparkPlan isFinalPlan=false\n      :        +- HashAggregate(keys=[ss_store_sk#264], functions=[avg(UnscaledValue(ss_net_profit#279))], output=[rank_col#194])\n      :           +- Exchange hashpartitioning(ss_store_sk#264, 200), ENSURE_REQUIREMENTS, [plan_id=131]\n      :              +- HashAggregate(keys=[ss_store_sk#264], functions=[partial_avg(UnscaledValue(ss_net_profit#279))], output=[ss_store_sk#264, sum#332, count#333L])\n      :                 +- Project [ss_store_sk#264, ss_net_profit#279]\n      :                    +- Filter ((isnotnull(ss_store_sk#264) AND (ss_store_sk#264 = 50)) AND isnull(ss_hdemo_sk#262))\n      :                       +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_hdemo_sk#262,ss_store_sk#264,ss_net_profit#279,ss_sold_date_sk#280] Batched: true, DataFilters: [isnotnull(ss_store_sk#264), (ss_store_sk#264 = 50), isnull(ss_hdemo_sk#262)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_store_sk), EqualTo(ss_store_sk,50), IsNull(ss_hdemo_sk)], ReadSchema: struct<ss_hdemo_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>\n      +- HashAggregate(keys=[ss_item_sk#17], functions=[avg(UnscaledValue(ss_net_profit#37))], output=[item_sk#192, rank_col#193])\n         +- ShuffleQueryStage 0\n            +- Exchange hashpartitioning(ss_item_sk#17, 200), ENSURE_REQUIREMENTS, [plan_id=250]\n               +- *(1) HashAggregate(keys=[ss_item_sk#17], functions=[partial_avg(UnscaledValue(ss_net_profit#37))], output=[ss_item_sk#17, sum#324, count#325L])\n                  +- *(1) Project [ss_item_sk#17, ss_net_profit#37]\n                     +- *(1) Filter (isnotnull(ss_store_sk#22) AND (ss_store_sk#22 = 50))\n                        +- *(1) ColumnarToRow\n                           +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#17,ss_store_sk#22,ss_net_profit#37,ss_sold_date_sk#38] Batched: true, DataFilters: [isnotnull(ss_store_sk#22), (ss_store_sk#22 = 50)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_store_sk), EqualTo(ss_store_sk,50)], ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 42375840,
        "inputRowCount" : 1324245
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "0" : [ 97415, 98259, 100504, 98597, 101221, 100109, 103966, 93967, 89457, 99550, 103406, 95424, 99195, 96721, 98728, 98340, 98073, 100322, 103868, 101778, 99462, 101891, 95651, 95393, 103358, 98367, 98106, 102256, 95425, 97140, 101264, 97687, 102160, 96975, 98075, 99475, 97538, 97868, 97702, 101563, 95890, 96346, 94260, 97663, 98514, 99975, 98858, 95299, 95274, 94754, 106008, 100981, 100441, 101029, 99413, 99397, 102771, 99763, 96991, 99672, 98850, 100261, 98245, 100996, 93133, 97106, 103208, 98250, 103705, 101430, 100665, 95541, 101307, 101974, 98171, 101964, 92944, 101608, 101370, 97831, 100802, 96578, 98532, 101329, 103216, 98632, 98004, 101964, 104342, 98963, 101884, 98925, 99377, 91491, 101194, 102617, 96202, 95841, 102224, 95484, 97800, 101623, 97925, 102478, 98602, 101335, 100285, 104971, 94849, 97857, 95896, 97286, 93736, 103080, 96929, 99345, 96505, 97527, 93496, 101058, 97076, 99123, 104768, 100247, 98853, 99600, 99595, 96142, 101610, 95116, 98224, 101300, 97308, 97054, 95860, 97399, 97074, 102443, 101389, 99165, 99837, 95440, 100832, 104263, 99035, 103529, 95809, 97892, 101153, 102263, 96932, 90145, 99991, 97168, 99949, 104111, 100832, 98310, 100399, 91251, 96363, 102238, 100912, 102450, 99753, 100064, 97420, 96700, 100120, 98017, 97727, 102123, 100755, 99559, 100893, 97374, 89232, 95932, 97893, 97677, 100451, 96449, 100400, 97872, 102612, 104757, 98162, 99105, 99463, 95450, 100321, 97307, 100755, 93128, 99596, 94568, 97629, 93864, 101457, 104860 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 7 ],
      "Objectives" : {
        "DurationInMs" : 1508,
        "TotalTasksDurationInMs" : 1490,
        "IOBytes" : {
          "Total" : 18871293,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 18871125,
            "SW" : 168
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1098531931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.WindowGroupLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 26484900,
                "rowCount" : 1324245
              },
              "compileTime" : {
                "sizeInBytes" : 26484900,
                "rowCount" : 1324245
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) WindowGroupLimit Arguments: [rank_col#198 DESC NULLS LAST], rank(rank_col#198), 10 "
          },
          "1" : {
            "sign" : 900293838,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 26484900,
                "rowCount" : 1324245
              },
              "compileTime" : {
                "sizeInBytes" : 26484900,
                "rowCount" : 1324245
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(rank_col#198) AND (cast(rank_col#198 as decimal(13,7)) > (0.9 * scalar-subquery#200 []))) "
          },
          "2" : {
            "sign" : 1553306599,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 42375840,
                "rowCount" : 1324245
              },
              "compileTime" : {
                "sizeInBytes" : 31120,
                "rowCount" : 1556
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ss_item_sk#209], [ss_item_sk#209 AS item_sk#197, cast((avg(UnscaledValue(ss_net_profit#229)) / 100.0) as decimal(11,6)) AS rank_col#198], HashAggregate(keys=[ss_item_sk#209], functions=[avg(UnscaledValue(ss_net_profit#229))]) "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalQueryStage",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "WindowGroupLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "WindowGroupLimit [rank_col#198 DESC NULLS LAST], rank(rank_col#198), 10\n+- Filter (isnotnull(rank_col#198) AND (cast(rank_col#198 as decimal(13,7)) > (0.9 * scalar-subquery#200 [])))\n   :  +- Aggregate [ss_store_sk#264], [cast((avg(UnscaledValue(ss_net_profit#279)) / 100.0) as decimal(11,6)) AS rank_col#194]\n   :     +- Project [ss_store_sk#264, ss_net_profit#279]\n   :        +- Filter (isnotnull(ss_store_sk#264) AND ((ss_store_sk#264 = 50) AND isnull(ss_hdemo_sk#262)))\n   :           +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#258,ss_item_sk#259,ss_customer_sk#260,ss_cdemo_sk#261,ss_hdemo_sk#262,ss_addr_sk#263,ss_store_sk#264,ss_promo_sk#265,ss_ticket_number#266L,ss_quantity#267,ss_wholesale_cost#268,ss_list_price#269,ss_sales_price#270,ss_ext_discount_amt#271,ss_ext_sales_price#272,ss_ext_wholesale_cost#273,ss_ext_list_price#274,ss_ext_tax#275,ss_coupon_amt#276,ss_net_paid#277,ss_net_paid_inc_tax#278,ss_net_profit#279,ss_sold_date_sk#280] parquet\n   +- LogicalQueryStage Aggregate [ss_item_sk#209], [ss_item_sk#209 AS item_sk#197, cast((avg(UnscaledValue(ss_net_profit#229)) / 100.0) as decimal(11,6)) AS rank_col#198], HashAggregate(keys=[ss_item_sk#209], functions=[avg(UnscaledValue(ss_net_profit#229))])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 476084740,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 31120,
            "rowCount" : 1556,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [ss_item_sk#209, sum#328, count#329L] Arguments: 2 "
          },
          "1" : {
            "sign" : -60748552,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [item_sk#197, rank_col#198] Arguments: [rank_col#198 DESC NULLS LAST], false, 0 "
          },
          "0" : {
            "sign" : 1271272102,
            "className" : "org.apache.spark.sql.execution.window.WindowGroupLimitExec",
            "sizeInBytes" : 26484900,
            "rowCount" : 1324245,
            "isRuntime" : false,
            "predicate" : " (unknown) WindowGroupLimit Input [2]: [item_sk#197, rank_col#198] Arguments: [rank_col#198 DESC NULLS LAST], rank(rank_col#198), 10, Partial "
          },
          "2" : {
            "sign" : 1145679156,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 26484900,
            "rowCount" : 1324245,
            "isRuntime" : true,
            "predicate" : " (unknown) Filter Input [2]: [item_sk#197, rank_col#198] Condition : (isnotnull(rank_col#198) AND (cast(rank_col#198 as decimal(13,7)) > (0.9 * ReusedSubquery Subquery subquery#195, [id=#133]))) "
          },
          "3" : {
            "sign" : -143257551,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 42375840,
            "rowCount" : 1324245,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [3]: [ss_item_sk#209, sum#328, count#329L] Keys [1]: [ss_item_sk#209] Functions [1]: [avg(UnscaledValue(ss_net_profit#229))] Aggregate Attributes [1]: [avg(UnscaledValue(ss_net_profit#229))#254] Results [2]: [ss_item_sk#209 AS item_sk#197, cast((avg(UnscaledValue(ss_net_profit#229))#254 / 100.0) as decimal(11,6)) AS rank_col#198] "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 3,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "HashAggregate",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Sort",
          "toId" : 0,
          "toName" : "WindowGroupLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "WindowGroupLimit [rank_col#198 DESC NULLS LAST], rank(rank_col#198), 10, Partial\n+- Sort [rank_col#198 DESC NULLS LAST], false, 0\n   +- Filter (isnotnull(rank_col#198) AND (cast(rank_col#198 as decimal(13,7)) > (0.9 * ReusedSubquery Subquery subquery#195, [id=#133])))\n      :  +- ReusedSubquery Subquery subquery#195, [id=#133]\n      +- HashAggregate(keys=[ss_item_sk#209], functions=[avg(UnscaledValue(ss_net_profit#229))], output=[item_sk#197, rank_col#198])\n         +- ShuffleQueryStage 2\n            +- ReusedExchange [ss_item_sk#209, sum#328, count#329L], Exchange hashpartitioning(ss_item_sk#17, 200), ENSURE_REQUIREMENTS, [plan_id=250]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 42375840,
        "inputRowCount" : 1324245
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "0" : [ 97415, 98259, 100504, 98597, 101221, 100109, 103966, 93967, 89457, 99550, 103406, 95424, 99195, 96721, 98728, 98340, 98073, 100322, 103868, 101778, 99462, 101891, 95651, 95393, 103358, 98367, 98106, 102256, 95425, 97140, 101264, 97687, 102160, 96975, 98075, 99475, 97538, 97868, 97702, 101563, 95890, 96346, 94260, 97663, 98514, 99975, 98858, 95299, 95274, 94754, 106008, 100981, 100441, 101029, 99413, 99397, 102771, 99763, 96991, 99672, 98850, 100261, 98245, 100996, 93133, 97106, 103208, 98250, 103705, 101430, 100665, 95541, 101307, 101974, 98171, 101964, 92944, 101608, 101370, 97831, 100802, 96578, 98532, 101329, 103216, 98632, 98004, 101964, 104342, 98963, 101884, 98925, 99377, 91491, 101194, 102617, 96202, 95841, 102224, 95484, 97800, 101623, 97925, 102478, 98602, 101335, 100285, 104971, 94849, 97857, 95896, 97286, 93736, 103080, 96929, 99345, 96505, 97527, 93496, 101058, 97076, 99123, 104768, 100247, 98853, 99600, 99595, 96142, 101610, 95116, 98224, 101300, 97308, 97054, 95860, 97399, 97074, 102443, 101389, 99165, 99837, 95440, 100832, 104263, 99035, 103529, 95809, 97892, 101153, 102263, 96932, 90145, 99991, 97168, 99949, 104111, 100832, 98310, 100399, 91251, 96363, 102238, 100912, 102450, 99753, 100064, 97420, 96700, 100120, 98017, 97727, 102123, 100755, 99559, 100893, 97374, 89232, 95932, 97893, 97677, 100451, 96449, 100400, 97872, 102612, 104757, 98162, 99105, 99463, 95450, 100321, 97307, 100755, 93128, 99596, 94568, 97629, 93864, 101457, 104860 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 8 ],
      "Objectives" : {
        "DurationInMs" : 1370,
        "TotalTasksDurationInMs" : 1362,
        "IOBytes" : {
          "Total" : 18871323,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 18871125,
            "SW" : 198
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1976818022,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 210,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 210,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [item_sk#197, rnk#201] "
          },
          "1" : {
            "sign" : 273831984,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 316,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 316,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((rnk#201 < 11) AND isnotnull(item_sk#197)) "
          },
          "2" : {
            "sign" : -711316971,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 316,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 316,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(rank_col#198) windowspecdefinition(rank_col#198 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#201], [rank_col#198 DESC NULLS LAST] "
          },
          "3" : {
            "sign" : 8695221,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 264,
                "rowCount" : 11
              },
              "compileTime" : {
                "sizeInBytes" : 26484900,
                "rowCount" : 1324245
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: WindowGroupLimit [rank_col#198 DESC NULLS LAST], rank(rank_col#198), 10, WindowGroupLimit [rank_col#198 DESC NULLS LAST], rank(rank_col#198), 10, Final "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Window",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [item_sk#197, rnk#201]\n+- Filter ((rnk#201 < 11) AND isnotnull(item_sk#197))\n   +- Window [rank(rank_col#198) windowspecdefinition(rank_col#198 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#201], [rank_col#198 DESC NULLS LAST]\n      +- LogicalQueryStage WindowGroupLimit [rank_col#198 DESC NULLS LAST], rank(rank_col#198), 10, WindowGroupLimit [rank_col#198 DESC NULLS LAST], rank(rank_col#198), 10, Final\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -1763816774,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : 264,
            "rowCount" : 11,
            "isRuntime" : true,
            "predicate" : " (unknown) Sort Input [2]: [item_sk#197, rank_col#198] Arguments: [rank_col#198 DESC NULLS LAST], false, 0 "
          },
          "5" : {
            "sign" : -679348878,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 26484900,
            "rowCount" : 1324245,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [item_sk#197, rank_col#198] Arguments: 7 "
          },
          "1" : {
            "sign" : -998168588,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 316,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [item_sk#197, rank_col#198, rnk#201] Condition : ((rnk#201 < 11) AND isnotnull(item_sk#197)) "
          },
          "0" : {
            "sign" : -1024176740,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 210,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [item_sk#197, rnk#201] Input [3]: [item_sk#197, rank_col#198, rnk#201] "
          },
          "2" : {
            "sign" : 212308887,
            "className" : "org.apache.spark.sql.execution.window.WindowExec",
            "sizeInBytes" : 316,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Input [2]: [item_sk#197, rank_col#198] Arguments: [rank(rank_col#198) windowspecdefinition(rank_col#198 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#201], [rank_col#198 DESC NULLS LAST] "
          },
          "3" : {
            "sign" : 644840783,
            "className" : "org.apache.spark.sql.execution.window.WindowGroupLimitExec",
            "sizeInBytes" : 264,
            "rowCount" : 11,
            "isRuntime" : true,
            "predicate" : " (unknown) WindowGroupLimit Input [2]: [item_sk#197, rank_col#198] Arguments: [rank_col#198 DESC NULLS LAST], rank(rank_col#198), 10, Final "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Sort",
          "toId" : 3,
          "toName" : "WindowGroupLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "WindowGroupLimit",
          "toId" : 2,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Window",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [item_sk#197, rnk#201]\n+- Filter ((rnk#201 < 11) AND isnotnull(item_sk#197))\n   +- Window [rank(rank_col#198) windowspecdefinition(rank_col#198 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#201], [rank_col#198 DESC NULLS LAST]\n      +- WindowGroupLimit [rank_col#198 DESC NULLS LAST], rank(rank_col#198), 10, Final\n         +- Sort [rank_col#198 DESC NULLS LAST], false, 0\n            +- ShuffleQueryStage 7\n               +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=709]\n                  +- WindowGroupLimit [rank_col#198 DESC NULLS LAST], rank(rank_col#198), 10, Partial\n                     +- *(6) Sort [rank_col#198 DESC NULLS LAST], false, 0\n                        +- *(6) Filter (isnotnull(rank_col#198) AND (cast(rank_col#198 as decimal(13,7)) > (0.9 * ReusedSubquery Subquery subquery#195, [id=#133])))\n                           :  +- ReusedSubquery Subquery subquery#195, [id=#133]\n                           +- *(6) HashAggregate(keys=[ss_item_sk#209], functions=[avg(UnscaledValue(ss_net_profit#229))], output=[item_sk#197, rank_col#198])\n                              +- AQEShuffleRead coalesced\n                                 +- ShuffleQueryStage 2\n                                    +- ReusedExchange [ss_item_sk#209, sum#328, count#329L], Exchange hashpartitioning(ss_item_sk#17, 200), ENSURE_REQUIREMENTS, [plan_id=250]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 264,
        "inputRowCount" : 11
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "3" : [ 207 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 10 ],
      "Objectives" : {
        "DurationInMs" : 204,
        "TotalTasksDurationInMs" : 194,
        "IOBytes" : {
          "Total" : 198,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 198,
            "SW" : 0
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 594464037,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 31120,
                "rowCount" : 1556
              },
              "compileTime" : {
                "sizeInBytes" : 31120,
                "rowCount" : 1556
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ss_item_sk#17], [ss_item_sk#17 AS item_sk#192, cast((avg(UnscaledValue(ss_net_profit#37)) / 100.0) as decimal(11,6)) AS rank_col#193] "
          },
          "1" : {
            "sign" : 1358527363,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 43315220,
                "rowCount" : 2165761
              },
              "compileTime" : {
                "sizeInBytes" : 43315220,
                "rowCount" : 2165761
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#17, ss_net_profit#37] "
          },
          "2" : {
            "sign" : -836273392,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 329195672,
                "rowCount" : 2165761
              },
              "compileTime" : {
                "sizeInBytes" : 329195672,
                "rowCount" : 2165761
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ss_store_sk#22) AND (ss_store_sk#22 = 50)) "
          },
          "3" : {
            "sign" : 437822322,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 43776970976,
                "rowCount" : 288006388
              },
              "compileTime" : {
                "sizeInBytes" : 43776970976,
                "rowCount" : 288006388
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#16, ss_item_sk#17, ss_customer_sk#18, ss_cdemo_sk#19, ss_hdemo_sk#20, ss_addr_sk#21, ss_store_sk#22, ss_promo_sk#23, ss_ticket_number#24L, ss_quantity#25, ss_wholesale_cost#26, ss_list_price#27, ss_sales_price#28, ss_ext_discount_amt#29, ss_ext_sales_price#30, ss_ext_wholesale_cost#31, ss_ext_list_price#32, ss_ext_tax#33, ss_coupon_amt#34, ss_net_paid#35, ss_net_paid_inc_tax#36, ss_net_profit#37, ss_sold_date_sk#38], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "LogicalRelation",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [ss_item_sk#17], [ss_item_sk#17 AS item_sk#192, cast((avg(UnscaledValue(ss_net_profit#37)) / 100.0) as decimal(11,6)) AS rank_col#193]\n+- Project [ss_item_sk#17, ss_net_profit#37]\n   +- Filter (isnotnull(ss_store_sk#22) AND (ss_store_sk#22 = 50))\n      +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#16,ss_item_sk#17,ss_customer_sk#18,ss_cdemo_sk#19,ss_hdemo_sk#20,ss_addr_sk#21,ss_store_sk#22,ss_promo_sk#23,ss_ticket_number#24L,ss_quantity#25,ss_wholesale_cost#26,ss_list_price#27,ss_sales_price#28,ss_ext_discount_amt#29,ss_ext_sales_price#30,ss_ext_wholesale_cost#31,ss_ext_list_price#32,ss_ext_tax#33,ss_coupon_amt#34,ss_net_paid#35,ss_net_paid_inc_tax#36,ss_net_profit#37,ss_sold_date_sk#38] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1667513034,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 31120,
            "rowCount" : 1556,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [2]: [ss_item_sk#17, ss_net_profit#37] Keys [1]: [ss_item_sk#17] Functions [1]: [partial_avg(UnscaledValue(ss_net_profit#37))] Aggregate Attributes [2]: [sum#322, count#323L] Results [3]: [ss_item_sk#17, sum#324, count#325L] "
          },
          "1" : {
            "sign" : 313901962,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 43315220,
            "rowCount" : 2165761,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [ss_item_sk#17, ss_net_profit#37] Input [4]: [ss_item_sk#17, ss_store_sk#22, ss_net_profit#37, ss_sold_date_sk#38] "
          },
          "2" : {
            "sign" : -1829159721,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 43315220,
            "rowCount" : 2165761,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [ss_item_sk#17, ss_store_sk#22, ss_net_profit#37, ss_sold_date_sk#38] Condition : (isnotnull(ss_store_sk#22) AND (ss_store_sk#22 = 50)) "
          },
          "3" : {
            "sign" : 2136002233,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 43315220,
            "rowCount" : 2165761,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_sales Output [4]: [ss_item_sk#17, ss_store_sk#22, ss_net_profit#37, ss_sold_date_sk#38] Batched: true Location: CatalogFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales] PushedFilters: [IsNotNull(ss_store_sk), EqualTo(ss_store_sk,50)] ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_sales",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[ss_item_sk#17], functions=[partial_avg(UnscaledValue(ss_net_profit#37))], output=[ss_item_sk#17, sum#324, count#325L])\n+- Project [ss_item_sk#17, ss_net_profit#37]\n   +- Filter (isnotnull(ss_store_sk#22) AND (ss_store_sk#22 = 50))\n      +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#17,ss_store_sk#22,ss_net_profit#37,ss_sold_date_sk#38] Batched: true, DataFilters: [isnotnull(ss_store_sk#22), (ss_store_sk#22 = 50)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_store_sk), EqualTo(ss_store_sk,50)], ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 43315220,
        "inputRowCount" : 2165761
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 2 ],
      "Objectives" : {
        "DurationInMs" : 23374,
        "TotalTasksDurationInMs" : 195854,
        "IOBytes" : {
          "Total" : 2394488366,
          "Details" : {
            "IR" : 2375617241,
            "IW" : 0,
            "SR" : 0,
            "SW" : 18871125
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 217095632,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9588000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 9588000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#39, i_product_name#60] "
          },
          "1" : {
            "sign" : -1087608288,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(i_item_sk#39) "
          },
          "2" : {
            "sign" : 74022018,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#39, i_item_id#40, i_rec_start_date#41, i_rec_end_date#42, i_item_desc#43, i_current_price#44, i_wholesale_cost#45, i_brand_id#46, i_brand#47, i_class_id#48, i_class#49, i_category_id#50, i_category#51, i_manufact_id#52, i_manufact#53, i_size#54, i_formulation#55, i_color#56, i_units#57, i_container#58, i_manager_id#59, i_product_name#60], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#39, i_product_name#60]\n+- Filter isnotnull(i_item_sk#39)\n   +- Relation spark_catalog.tpcds_100.item[i_item_sk#39,i_item_id#40,i_rec_start_date#41,i_rec_end_date#42,i_item_desc#43,i_current_price#44,i_wholesale_cost#45,i_brand_id#46,i_brand#47,i_class_id#48,i_class#49,i_category_id#50,i_category#51,i_manufact_id#52,i_manufact#53,i_size#54,i_formulation#55,i_color#56,i_units#57,i_container#58,i_manager_id#59,i_product_name#60] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -463088936,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 9588000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [i_item_sk#39, i_product_name#60] Condition : isnotnull(i_item_sk#39) "
          },
          "1" : {
            "sign" : 1119792054,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 9588000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.item Output [2]: [i_item_sk#39, i_product_name#60] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item] PushedFilters: [IsNotNull(i_item_sk)] ReadSchema: struct<i_item_sk:int,i_product_name:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.item",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull(i_item_sk#39)\n+- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#39,i_product_name#60] Batched: true, DataFilters: [isnotnull(i_item_sk#39)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_product_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 9588000,
        "inputRowCount" : 204000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 0 ],
      "Objectives" : {
        "DurationInMs" : 6106,
        "TotalTasksDurationInMs" : 17609,
        "IOBytes" : {
          "Total" : 2361977,
          "Details" : {
            "IR" : 2361977,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1370298864,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 16,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 16,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ss_store_sk#264], [cast((avg(UnscaledValue(ss_net_profit#279)) / 100.0) as decimal(11,6)) AS rank_col#194] "
          },
          "1" : {
            "sign" : 688166844,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1949120,
                "rowCount" : 97456
              },
              "compileTime" : {
                "sizeInBytes" : 1949120,
                "rowCount" : 97456
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_store_sk#264, ss_net_profit#279] "
          },
          "2" : {
            "sign" : 372768429,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14813312,
                "rowCount" : 97456
              },
              "compileTime" : {
                "sizeInBytes" : 14813312,
                "rowCount" : 97456
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ss_store_sk#264) AND ((ss_store_sk#264 = 50) AND isnull(ss_hdemo_sk#262))) "
          },
          "3" : {
            "sign" : -18853771,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 43776970976,
                "rowCount" : 288006388
              },
              "compileTime" : {
                "sizeInBytes" : 43776970976,
                "rowCount" : 288006388
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#258, ss_item_sk#259, ss_customer_sk#260, ss_cdemo_sk#261, ss_hdemo_sk#262, ss_addr_sk#263, ss_store_sk#264, ss_promo_sk#265, ss_ticket_number#266L, ss_quantity#267, ss_wholesale_cost#268, ss_list_price#269, ss_sales_price#270, ss_ext_discount_amt#271, ss_ext_sales_price#272, ss_ext_wholesale_cost#273, ss_ext_list_price#274, ss_ext_tax#275, ss_coupon_amt#276, ss_net_paid#277, ss_net_paid_inc_tax#278, ss_net_profit#279, ss_sold_date_sk#280], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "LogicalRelation",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [ss_store_sk#264], [cast((avg(UnscaledValue(ss_net_profit#279)) / 100.0) as decimal(11,6)) AS rank_col#194]\n+- Project [ss_store_sk#264, ss_net_profit#279]\n   +- Filter (isnotnull(ss_store_sk#264) AND ((ss_store_sk#264 = 50) AND isnull(ss_hdemo_sk#262)))\n      +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#258,ss_item_sk#259,ss_customer_sk#260,ss_cdemo_sk#261,ss_hdemo_sk#262,ss_addr_sk#263,ss_store_sk#264,ss_promo_sk#265,ss_ticket_number#266L,ss_quantity#267,ss_wholesale_cost#268,ss_list_price#269,ss_sales_price#270,ss_ext_discount_amt#271,ss_ext_sales_price#272,ss_ext_wholesale_cost#273,ss_ext_list_price#274,ss_ext_tax#275,ss_coupon_amt#276,ss_net_paid#277,ss_net_paid_inc_tax#278,ss_net_profit#279,ss_sold_date_sk#280] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 908648782,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [2]: [ss_store_sk#264, ss_net_profit#279] Keys [1]: [ss_store_sk#264] Functions [1]: [partial_avg(UnscaledValue(ss_net_profit#279))] Aggregate Attributes [2]: [sum#330, count#331L] Results [3]: [ss_store_sk#264, sum#332, count#333L] "
          },
          "1" : {
            "sign" : 1646428516,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1949120,
            "rowCount" : 97456,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [ss_store_sk#264, ss_net_profit#279] Input [4]: [ss_hdemo_sk#262, ss_store_sk#264, ss_net_profit#279, ss_sold_date_sk#280] "
          },
          "2" : {
            "sign" : 785767951,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 1949120,
            "rowCount" : 97456,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [ss_hdemo_sk#262, ss_store_sk#264, ss_net_profit#279, ss_sold_date_sk#280] Condition : ((isnotnull(ss_store_sk#264) AND (ss_store_sk#264 = 50)) AND isnull(ss_hdemo_sk#262)) "
          },
          "3" : {
            "sign" : -1387796375,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 1949120,
            "rowCount" : 97456,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_sales Output [4]: [ss_hdemo_sk#262, ss_store_sk#264, ss_net_profit#279, ss_sold_date_sk#280] Batched: true Location: CatalogFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales] PushedFilters: [IsNotNull(ss_store_sk), EqualTo(ss_store_sk,50), IsNull(ss_hdemo_sk)] ReadSchema: struct<ss_hdemo_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_sales",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[ss_store_sk#264], functions=[partial_avg(UnscaledValue(ss_net_profit#279))], output=[ss_store_sk#264, sum#332, count#333L])\n+- Project [ss_store_sk#264, ss_net_profit#279]\n   +- Filter ((isnotnull(ss_store_sk#264) AND (ss_store_sk#264 = 50)) AND isnull(ss_hdemo_sk#262))\n      +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_hdemo_sk#262,ss_store_sk#264,ss_net_profit#279,ss_sold_date_sk#280] Batched: true, DataFilters: [isnotnull(ss_store_sk#264), (ss_store_sk#264 = 50), isnull(ss_hdemo_sk#262)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_store_sk), EqualTo(ss_store_sk,50), IsNull(ss_hdemo_sk)], ReadSchema: struct<ss_hdemo_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1949120,
        "inputRowCount" : 97456
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 10025,
        "TotalTasksDurationInMs" : 137125,
        "IOBytes" : {
          "Total" : 1383662885,
          "Details" : {
            "IR" : 1383651421,
            "IW" : 0,
            "SR" : 0,
            "SW" : 11464
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "12" : {
            "sign" : -111107467,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 264,
                "rowCount" : 11
              },
              "compileTime" : {
                "sizeInBytes" : 26484900,
                "rowCount" : 1324245
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: WindowGroupLimit [rank_col#193 ASC NULLS FIRST], rank(rank_col#193), 10, WindowGroupLimit [rank_col#193 ASC NULLS FIRST], rank(rank_col#193), 10, Final "
          },
          "8" : {
            "sign" : 1605040646,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4449463200,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 4449463200,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (rnk#196 = rnk#201) "
          },
          "4" : {
            "sign" : -1238512421,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1028127047052648023321344,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 1028127047052648023321344,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#231 = item_sk#197) "
          },
          "11" : {
            "sign" : 366413303,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Window",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 316,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 316,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Window Arguments: [rank(rank_col#193) windowspecdefinition(rank_col#193 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#196], [rank_col#193 ASC NULLS FIRST] "
          },
          "9" : {
            "sign" : 1245322642,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 210,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 210,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [item_sk#192, rnk#196] "
          },
          "13" : {
            "sign" : 870855655,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 18409216,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 9588000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#39, i_product_name#60], BroadcastQueryStage 3 "
          },
          "5" : {
            "sign" : 1976490641,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 55848497136034909,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 55848497136034909,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [rnk#196, item_sk#197, i_product_name#60] "
          },
          "10" : {
            "sign" : 2083569508,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 316,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 316,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((rnk#196 < 11) AND isnotnull(item_sk#192)) "
          },
          "6" : {
            "sign" : -2031055206,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 68259274277376000,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 68259274277376000,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#39 = item_sk#192) "
          },
          "1" : {
            "sign" : 104829725,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 891043440778961620211831,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 891043440778961620211831,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "14" : {
            "sign" : 1965566262,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 18409216,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 9588000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#231, i_product_name#252], BroadcastQueryStage 5 "
          },
          "0" : {
            "sign" : 2087796574,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5200,
                "rowCount" : 100
              },
              "compileTime" : {
                "sizeInBytes" : 5200,
                "rowCount" : 100
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1692428664,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 891043440778961620211831,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 891043440778961620211831,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [rnk#196 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 2122756592,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3707886000,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 3707886000,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [item_sk#192, rnk#196, item_sk#197] "
          },
          "3" : {
            "sign" : -524664069,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 891043440778961620211831,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 891043440778961620211831,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [rnk#196, i_product_name#60 AS best_performing#202, i_product_name#252 AS worst_performing#203] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Window",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [rnk#196 ASC NULLS FIRST], true\n      +- Project [rnk#196, i_product_name#60 AS best_performing#202, i_product_name#252 AS worst_performing#203]\n         +- Join Inner, (i_item_sk#231 = item_sk#197)\n            :- Project [rnk#196, item_sk#197, i_product_name#60]\n            :  +- Join Inner, (i_item_sk#39 = item_sk#192)\n            :     :- Project [item_sk#192, rnk#196, item_sk#197]\n            :     :  +- Join Inner, (rnk#196 = rnk#201)\n            :     :     :- Project [item_sk#192, rnk#196]\n            :     :     :  +- Filter ((rnk#196 < 11) AND isnotnull(item_sk#192))\n            :     :     :     +- Window [rank(rank_col#193) windowspecdefinition(rank_col#193 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#196], [rank_col#193 ASC NULLS FIRST]\n            :     :     :        +- LogicalQueryStage WindowGroupLimit [rank_col#193 ASC NULLS FIRST], rank(rank_col#193), 10, WindowGroupLimit [rank_col#193 ASC NULLS FIRST], rank(rank_col#193), 10, Final\n            :     :     +- Project [item_sk#197, rnk#201]\n            :     :        +- Filter ((rnk#201 < 11) AND isnotnull(item_sk#197))\n            :     :           +- Window [rank(rank_col#198) windowspecdefinition(rank_col#198 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#201], [rank_col#198 DESC NULLS LAST]\n            :     :              +- LogicalQueryStage WindowGroupLimit [rank_col#198 DESC NULLS LAST], rank(rank_col#198), 10, WindowGroupLimit [rank_col#198 DESC NULLS LAST], rank(rank_col#198), 10, Final\n            :     +- LogicalQueryStage Project [i_item_sk#39, i_product_name#60], BroadcastQueryStage 3\n            +- LogicalQueryStage Project [i_item_sk#231, i_product_name#252], BroadcastQueryStage 5\n"
      },
      "QSPhysical" : {
        "operators" : {
          "12" : {
            "sign" : -30031420,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 26484900,
            "rowCount" : 1324245,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [item_sk#192, rank_col#193] Arguments: 6 "
          },
          "8" : {
            "sign" : 1216634703,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 316,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [item_sk#192, rank_col#193, rnk#196] Condition : ((rnk#196 < 11) AND isnotnull(item_sk#192)) "
          },
          "4" : {
            "sign" : -60983103,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 68259274277376000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [item_sk#192] Right keys [1]: [i_item_sk#39] Join type: Inner Join condition: None "
          },
          "15" : {
            "sign" : 1231244537,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 18409216,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [i_item_sk#231, i_product_name#252] Arguments: 5 "
          },
          "11" : {
            "sign" : -1667109049,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : 264,
            "rowCount" : 11,
            "isRuntime" : true,
            "predicate" : " (unknown) Sort Input [2]: [item_sk#192, rank_col#193] Arguments: [rank_col#193 ASC NULLS FIRST], false, 0 "
          },
          "9" : {
            "sign" : -1868732848,
            "className" : "org.apache.spark.sql.execution.window.WindowExec",
            "sizeInBytes" : 316,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Window Input [2]: [item_sk#192, rank_col#193] Arguments: [rank(rank_col#193) windowspecdefinition(rank_col#193 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#196], [rank_col#193 ASC NULLS FIRST] "
          },
          "13" : {
            "sign" : -360379269,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048656,
            "rowCount" : 10,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [item_sk#197, rnk#201] Arguments: 8 "
          },
          "5" : {
            "sign" : 1188642964,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 3707886000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [item_sk#192, rnk#196, item_sk#197] Input [4]: [item_sk#192, rnk#196, item_sk#197, rnk#201] "
          },
          "10" : {
            "sign" : 1009005408,
            "className" : "org.apache.spark.sql.execution.window.WindowGroupLimitExec",
            "sizeInBytes" : 264,
            "rowCount" : 11,
            "isRuntime" : true,
            "predicate" : " (unknown) WindowGroupLimit Input [2]: [item_sk#192, rank_col#193] Arguments: [rank_col#193 ASC NULLS FIRST], rank(rank_col#193), 10, Final "
          },
          "6" : {
            "sign" : 1138023066,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 4449463200,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [rnk#196] Right keys [1]: [rnk#201] Join type: Inner Join condition: None "
          },
          "1" : {
            "sign" : 162858339,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 891043440778961620211831,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [rnk#196, i_product_name#60 AS best_performing#202, i_product_name#252 AS worst_performing#203] Input [5]: [rnk#196, item_sk#197, i_product_name#60, i_item_sk#231, i_product_name#252] "
          },
          "14" : {
            "sign" : -1686863696,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 18409216,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [i_item_sk#39, i_product_name#60] Arguments: 3 "
          },
          "0" : {
            "sign" : 348226830,
            "className" : "org.apache.spark.sql.execution.TakeOrderedAndProjectExec",
            "sizeInBytes" : 5200,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) TakeOrderedAndProject Input [3]: [rnk#196, best_performing#202, worst_performing#203] Arguments: 100, [rnk#196 ASC NULLS FIRST], [rnk#196, best_performing#202, worst_performing#203] "
          },
          "2" : {
            "sign" : 1168510701,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 1028127047052648023321344,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [item_sk#197] Right keys [1]: [i_item_sk#231] Join type: Inner Join condition: None "
          },
          "7" : {
            "sign" : -1680156629,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 210,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [item_sk#192, rnk#196] Input [3]: [item_sk#192, rank_col#193, rnk#196] "
          },
          "3" : {
            "sign" : 1512149422,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 55848497136034909,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [rnk#196, item_sk#197, i_product_name#60] Input [5]: [item_sk#192, rnk#196, item_sk#197, i_item_sk#39, i_product_name#60] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "ShuffleQueryStage",
          "toId" : 11,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Sort",
          "toId" : 10,
          "toName" : "WindowGroupLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "WindowGroupLimit",
          "toId" : 9,
          "toName" : "Window",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Window",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "BroadcastQueryStage",
          "toId" : 6,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "BroadcastHashJoin",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "BroadcastQueryStage",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastHashJoin",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "TakeOrderedAndProject",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "TakeOrderedAndProject(limit=100, orderBy=[rnk#196 ASC NULLS FIRST], output=[rnk#196,best_performing#202,worst_performing#203])\n+- Project [rnk#196, i_product_name#60 AS best_performing#202, i_product_name#252 AS worst_performing#203]\n   +- BroadcastHashJoin [item_sk#197], [i_item_sk#231], Inner, BuildRight, false\n      :- Project [rnk#196, item_sk#197, i_product_name#60]\n      :  +- BroadcastHashJoin [item_sk#192], [i_item_sk#39], Inner, BuildRight, false\n      :     :- Project [item_sk#192, rnk#196, item_sk#197]\n      :     :  +- BroadcastHashJoin [rnk#196], [rnk#201], Inner, BuildRight, false\n      :     :     :- Project [item_sk#192, rnk#196]\n      :     :     :  +- Filter ((rnk#196 < 11) AND isnotnull(item_sk#192))\n      :     :     :     +- Window [rank(rank_col#193) windowspecdefinition(rank_col#193 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#196], [rank_col#193 ASC NULLS FIRST]\n      :     :     :        +- WindowGroupLimit [rank_col#193 ASC NULLS FIRST], rank(rank_col#193), 10, Final\n      :     :     :           +- Sort [rank_col#193 ASC NULLS FIRST], false, 0\n      :     :     :              +- ShuffleQueryStage 6\n      :     :     :                 +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=660]\n      :     :     :                    +- WindowGroupLimit [rank_col#193 ASC NULLS FIRST], rank(rank_col#193), 10, Partial\n      :     :     :                       +- *(5) Sort [rank_col#193 ASC NULLS FIRST], false, 0\n      :     :     :                          +- *(5) Filter (isnotnull(rank_col#193) AND (cast(rank_col#193 as decimal(13,7)) > (0.9 * Subquery subquery#195, [id=#133])))\n      :     :     :                             :  +- Subquery subquery#195, [id=#133]\n      :     :     :                             :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                         +- == Final Plan ==\n                                                            *(2) HashAggregate(keys=[ss_store_sk#264], functions=[avg(UnscaledValue(ss_net_profit#279))], output=[rank_col#194])\n                                                            +- AQEShuffleRead coalesced\n                                                               +- ShuffleQueryStage 0\n                                                                  +- Exchange hashpartitioning(ss_store_sk#264, 200), ENSURE_REQUIREMENTS, [plan_id=749]\n                                                                     +- *(1) HashAggregate(keys=[ss_store_sk#264], functions=[partial_avg(UnscaledValue(ss_net_profit#279))], output=[ss_store_sk#264, sum#332, count#333L])\n                                                                        +- *(1) Project [ss_store_sk#264, ss_net_profit#279]\n                                                                           +- *(1) Filter ((isnotnull(ss_store_sk#264) AND (ss_store_sk#264 = 50)) AND isnull(ss_hdemo_sk#262))\n                                                                              +- *(1) ColumnarToRow\n                                                                                 +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_hdemo_sk#262,ss_store_sk#264,ss_net_profit#279,ss_sold_date_sk#280] Batched: true, DataFilters: [isnotnull(ss_store_sk#264), (ss_store_sk#264 = 50), isnull(ss_hdemo_sk#262)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_store_sk), EqualTo(ss_store_sk,50), IsNull(ss_hdemo_sk)], ReadSchema: struct<ss_hdemo_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>\n                                                         +- == Initial Plan ==\n                                                            HashAggregate(keys=[ss_store_sk#264], functions=[avg(UnscaledValue(ss_net_profit#279))], output=[rank_col#194])\n                                                            +- Exchange hashpartitioning(ss_store_sk#264, 200), ENSURE_REQUIREMENTS, [plan_id=131]\n                                                               +- HashAggregate(keys=[ss_store_sk#264], functions=[partial_avg(UnscaledValue(ss_net_profit#279))], output=[ss_store_sk#264, sum#332, count#333L])\n                                                                  +- Project [ss_store_sk#264, ss_net_profit#279]\n                                                                     +- Filter ((isnotnull(ss_store_sk#264) AND (ss_store_sk#264 = 50)) AND isnull(ss_hdemo_sk#262))\n                                                                        +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_hdemo_sk#262,ss_store_sk#264,ss_net_profit#279,ss_sold_date_sk#280] Batched: true, DataFilters: [isnotnull(ss_store_sk#264), (ss_store_sk#264 = 50), isnull(ss_hdemo_sk#262)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_store_sk), EqualTo(ss_store_sk,50), IsNull(ss_hdemo_sk)], ReadSchema: struct<ss_hdemo_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>\n      :     :     :                             +- *(5) HashAggregate(keys=[ss_item_sk#17], functions=[avg(UnscaledValue(ss_net_profit#37))], output=[item_sk#192, rank_col#193])\n      :     :     :                                +- AQEShuffleRead coalesced\n      :     :     :                                   +- ShuffleQueryStage 0\n      :     :     :                                      +- Exchange hashpartitioning(ss_item_sk#17, 200), ENSURE_REQUIREMENTS, [plan_id=250]\n      :     :     :                                         +- *(1) HashAggregate(keys=[ss_item_sk#17], functions=[partial_avg(UnscaledValue(ss_net_profit#37))], output=[ss_item_sk#17, sum#324, count#325L])\n      :     :     :                                            +- *(1) Project [ss_item_sk#17, ss_net_profit#37]\n      :     :     :                                               +- *(1) Filter (isnotnull(ss_store_sk#22) AND (ss_store_sk#22 = 50))\n      :     :     :                                                  +- *(1) ColumnarToRow\n      :     :     :                                                     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#17,ss_store_sk#22,ss_net_profit#37,ss_sold_date_sk#38] Batched: true, DataFilters: [isnotnull(ss_store_sk#22), (ss_store_sk#22 = 50)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_store_sk), EqualTo(ss_store_sk,50)], ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>\n      :     :     +- BroadcastQueryStage 8\n      :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, false] as bigint)),false), [plan_id=844]\n      :     :           +- *(8) Project [item_sk#197, rnk#201]\n      :     :              +- *(8) Filter ((rnk#201 < 11) AND isnotnull(item_sk#197))\n      :     :                 +- Window [rank(rank_col#198) windowspecdefinition(rank_col#198 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rnk#201], [rank_col#198 DESC NULLS LAST]\n      :     :                    +- WindowGroupLimit [rank_col#198 DESC NULLS LAST], rank(rank_col#198), 10, Final\n      :     :                       +- *(7) Sort [rank_col#198 DESC NULLS LAST], false, 0\n      :     :                          +- ShuffleQueryStage 7\n      :     :                             +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=709]\n      :     :                                +- WindowGroupLimit [rank_col#198 DESC NULLS LAST], rank(rank_col#198), 10, Partial\n      :     :                                   +- *(6) Sort [rank_col#198 DESC NULLS LAST], false, 0\n      :     :                                      +- *(6) Filter (isnotnull(rank_col#198) AND (cast(rank_col#198 as decimal(13,7)) > (0.9 * ReusedSubquery Subquery subquery#195, [id=#133])))\n      :     :                                         :  +- ReusedSubquery Subquery subquery#195, [id=#133]\n      :     :                                         +- *(6) HashAggregate(keys=[ss_item_sk#209], functions=[avg(UnscaledValue(ss_net_profit#229))], output=[item_sk#197, rank_col#198])\n      :     :                                            +- AQEShuffleRead coalesced\n      :     :                                               +- ShuffleQueryStage 2\n      :     :                                                  +- ReusedExchange [ss_item_sk#209, sum#328, count#329L], Exchange hashpartitioning(ss_item_sk#17, 200), ENSURE_REQUIREMENTS, [plan_id=250]\n      :     +- BroadcastQueryStage 3\n      :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=362]\n      :           +- *(3) Filter isnotnull(i_item_sk#39)\n      :              +- *(3) ColumnarToRow\n      :                 +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#39,i_product_name#60] Batched: true, DataFilters: [isnotnull(i_item_sk#39)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_product_name:string>\n      +- BroadcastQueryStage 5\n         +- ReusedExchange [i_item_sk#231, i_product_name#252], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=362]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 37867352,
        "inputRowCount" : 408021
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "2" : [ 171 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 13 ],
      "Objectives" : {
        "DurationInMs" : 404,
        "TotalTasksDurationInMs" : 397,
        "IOBytes" : {
          "Total" : 168,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 168,
            "SW" : 0
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 767007182,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5152,
                "rowCount" : 161
              },
              "compileTime" : {
                "sizeInBytes" : 16,
                "rowCount" : 1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ss_store_sk#264], [cast((avg(UnscaledValue(ss_net_profit#279)) / 100.0) as decimal(11,6)) AS rank_col#194], HashAggregate(keys=[ss_store_sk#264], functions=[avg(UnscaledValue(ss_net_profit#279))]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [ss_store_sk#264], [cast((avg(UnscaledValue(ss_net_profit#279)) / 100.0) as decimal(11,6)) AS rank_col#194], HashAggregate(keys=[ss_store_sk#264], functions=[avg(UnscaledValue(ss_net_profit#279))])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 2053954007,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 5152,
            "rowCount" : 161,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [3]: [ss_store_sk#264, sum#332, count#333L] Keys [1]: [ss_store_sk#264] Functions [1]: [avg(UnscaledValue(ss_net_profit#279))] Aggregate Attributes [1]: [avg(UnscaledValue(ss_net_profit#279))#255] Results [1]: [cast((avg(UnscaledValue(ss_net_profit#279))#255 / 100.0) as decimal(11,6)) AS rank_col#194] "
          },
          "1" : {
            "sign" : 873888398,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [ss_store_sk#264, sum#332, count#333L] Arguments: 0 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[ss_store_sk#264], functions=[avg(UnscaledValue(ss_net_profit#279))], output=[rank_col#194])\n+- ShuffleQueryStage 0\n   +- Exchange hashpartitioning(ss_store_sk#264, 200), ENSURE_REQUIREMENTS, [plan_id=749]\n      +- *(1) HashAggregate(keys=[ss_store_sk#264], functions=[partial_avg(UnscaledValue(ss_net_profit#279))], output=[ss_store_sk#264, sum#332, count#333L])\n         +- *(1) Project [ss_store_sk#264, ss_net_profit#279]\n            +- *(1) Filter ((isnotnull(ss_store_sk#264) AND (ss_store_sk#264 = 50)) AND isnull(ss_hdemo_sk#262))\n               +- *(1) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_hdemo_sk#262,ss_store_sk#264,ss_net_profit#279,ss_sold_date_sk#280] Batched: true, DataFilters: [isnotnull(ss_store_sk#264), (ss_store_sk#264 = 50), isnull(ss_hdemo_sk#262)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_store_sk), EqualTo(ss_store_sk,50), IsNull(ss_hdemo_sk)], ReadSchema: struct<ss_hdemo_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 5152,
        "inputRowCount" : 161
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "1" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 5 ],
      "Objectives" : {
        "DurationInMs" : 286,
        "TotalTasksDurationInMs" : 278,
        "IOBytes" : {
          "Total" : 11464,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 11464,
            "SW" : 0
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702226989243,
  "SQLEndTimeInMs" : 1702227032381,
  "Objectives" : {
    "DurationInMs" : 43138,
    "IOBytes" : {
      "Total" : 3818267674,
      "Details" : {
        "IR" : 3761630639,
        "IW" : 0,
        "SR" : 37754080,
        "SW" : 18882955
      }
    }
  }
}
