{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "45" : {
          "sign" : 20655241,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 7380,
          "rowCount" : 30,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#318) AND ((d_date#318 >= 1998-08-04) AND (d_date#318 <= 1998-09-03))) AND isnotnull(d_date_sk#316)) "
        },
        "34" : {
          "sign" : -2094812933,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 192558,
          "rowCount" : 402,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(s_store_sk#287) "
        },
        "67" : {
          "sign" : -2117188053,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 7380,
          "rowCount" : 30,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#374) AND ((d_date#374 >= 1998-08-04) AND (d_date#374 <= 1998-09-03))) AND isnotnull(d_date_sk#372)) "
        },
        "12" : {
          "sign" : -1079805966,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 9559461060,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#48 = d_date_sk#49) "
        },
        "66" : {
          "sign" : 1990761861,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 360,
          "rowCount" : 30,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#372] "
        },
        "51" : {
          "sign" : -2075838459,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 2246060232,
          "rowCount" : 14397822,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(cr_returned_date_sk#186) AND dynamicpruning#490 [cr_returned_date_sk#186]) "
        },
        "84" : {
          "sign" : -1923657587,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 281520,
          "rowCount" : 2040,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(wp_web_page_sk#428) "
        },
        "8" : {
          "sign" : 672493592,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 5656,
          "rowCount" : 202,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [s_store_sk#77], [s_store_sk#77, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#40)),17,2) AS sales#14, MakeDecimal(sum(UnscaledValue(ss_net_profit#47)),17,2) AS profit#15] "
        },
        "73" : {
          "sign" : 787433531,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 204816640,
          "rowCount" : 7314880,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [wr_return_amt#249, wr_net_loss#257, wp_web_page_sk#428] "
        },
        "78" : {
          "sign" : 177452996,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 945520416,
          "rowCount" : 6566114,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(wr_returned_date_sk#258) AND isnotnull(wr_web_page_sk#245)) AND dynamicpruning#492 [wr_returned_date_sk#258]) "
        },
        "19" : {
          "sign" : 2036889946,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 4824,
          "rowCount" : 402,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [s_store_sk#77] "
        },
        "23" : {
          "sign" : 1449435385,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1605950836,
          "rowCount" : 57355387,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [sr_return_amt#116, sr_net_loss#124, s_store_sk#287] "
        },
        "62" : {
          "sign" : -2036160451,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 2501841780,
          "rowCount" : 69495605,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#220 = d_date_sk#372) "
        },
        "4" : {
          "sign" : 937178704,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Expand",
          "sizeInBytes" : 749553,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Expand Arguments: [[sales#14, returns#2, profit#3, channel#473, id#474, 0], [sales#14, returns#2, profit#3, channel#473, null, 1], [sales#14, returns#2, profit#3, null, null, 3]], [sales#14, returns#2, profit#3, channel#476, id#477, spark_grouping_id#475L] "
        },
        "77" : {
          "sign" : -1092440456,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 210115648,
          "rowCount" : 6566114,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [wr_web_page_sk#245, wr_return_amt#249, wr_net_loss#257, wr_returned_date_sk#258] "
        },
        "40" : {
          "sign" : 928981158,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 4986585432,
          "rowCount" : 138516262,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#159 = d_date_sk#316) "
        },
        "15" : {
          "sign" : -1218510227,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 41806893656,
          "rowCount" : 275045353,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#26, ss_item_sk#27, ss_customer_sk#28, ss_cdemo_sk#29, ss_hdemo_sk#30, ss_addr_sk#31, ss_store_sk#32, ss_promo_sk#33, ss_ticket_number#34L, ss_quantity#35, ss_wholesale_cost#36, ss_list_price#37, ss_sales_price#38, ss_ext_discount_amt#39, ss_ext_sales_price#40, ss_ext_wholesale_cost#41, ss_ext_list_price#42, ss_ext_tax#43, ss_coupon_amt#44, ss_net_paid#45, ss_net_paid_inc_tax#46, ss_net_profit#47, ss_sold_date_sk#48], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "11" : {
          "sign" : 1589625605,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 7435136380,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_store_sk#32, ss_ext_sales_price#40, ss_net_profit#47] "
        },
        "9" : {
          "sign" : -2100435759,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 16179885092,
          "rowCount" : 577853039,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_ext_sales_price#40, ss_net_profit#47, s_store_sk#77] "
        },
        "44" : {
          "sign" : 1254821041,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 360,
          "rowCount" : 30,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#316] "
        },
        "33" : {
          "sign" : 18076678,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 4824,
          "rowCount" : 402,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [s_store_sk#287] "
        },
        "22" : {
          "sign" : 232261437,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 5656,
          "rowCount" : 202,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [s_store_sk#287], [s_store_sk#287, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#16, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#17] "
        },
        "56" : {
          "sign" : -804057335,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 137428,
          "rowCount" : 2021,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [sales#22, coalesce(returns#24, 0.00) AS returns#9, (profit#23 - coalesce(profit_loss#25, 0.00)) AS profit#10, web channel AS channel#485, wp_web_page_sk#221 AS id#486] "
        },
        "55" : {
          "sign" : -1912975282,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#344, d_date_id#345, d_date#346, d_month_seq#347, d_week_seq#348, d_quarter_seq#349, d_year#350, d_dow#351, d_moy#352, d_dom#353, d_qoy#354, d_fy_year#355, d_fy_quarter_seq#356, d_fy_week_seq#357, d_day_name#358, d_quarter_name#359, d_holiday#360, d_weekend#361, d_following_holiday#362, d_first_dom#363, d_last_dom#364, d_same_day_ly#365, d_same_day_lq#366, d_current_day#367, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "26" : {
          "sign" : 1588643032,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 970408620,
          "rowCount" : 26955795,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (sr_returned_date_sk#125 = d_date_sk#259) "
        },
        "50" : {
          "sign" : -607918154,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 460730304,
          "rowCount" : 14397822,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cr_call_center_sk#170, cr_return_amount#177, cr_net_loss#185, cr_returned_date_sk#186] "
        },
        "37" : {
          "sign" : -1872437645,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 43648,
          "rowCount" : 992,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Cross "
        },
        "68" : {
          "sign" : 1691724324,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#372, d_date_id#373, d_date#374, d_month_seq#375, d_week_seq#376, d_quarter_seq#377, d_year#378, d_dow#379, d_moy#380, d_dom#381, d_qoy#382, d_fy_year#383, d_fy_quarter_seq#384, d_fy_week_seq#385, d_day_name#386, d_quarter_name#387, d_holiday#388, d_weekend#389, d_following_holiday#390, d_first_dom#391, d_last_dom#392, d_same_day_ly#393, d_same_day_lq#394, d_current_day#395, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "61" : {
          "sign" : -1916596674,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1945876940,
          "rowCount" : 69495605,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_web_page_sk#198, ws_ext_sales_price#209, ws_net_profit#219] "
        },
        "13" : {
          "sign" : -1861512289,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 8405553536,
          "rowCount" : 262673548,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_store_sk#32, ss_ext_sales_price#40, ss_net_profit#47, ss_sold_date_sk#48] "
        },
        "46" : {
          "sign" : -118872786,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#316, d_date_id#317, d_date#318, d_month_seq#319, d_week_seq#320, d_quarter_seq#321, d_year#322, d_dow#323, d_moy#324, d_dom#325, d_qoy#326, d_fy_year#327, d_fy_quarter_seq#328, d_fy_week_seq#329, d_day_name#330, d_quarter_name#331, d_holiday#332, d_weekend#333, d_following_holiday#334, d_first_dom#335, d_last_dom#336, d_same_day_ly#337, d_same_day_lq#338, d_current_day#339, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "24" : {
          "sign" : -1545662601,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 1835372384,
          "rowCount" : 57355387,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (sr_store_sk#112 = s_store_sk#287) "
        },
        "83" : {
          "sign" : -1223365860,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 24480,
          "rowCount" : 2040,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [wp_web_page_sk#428] "
        },
        "35" : {
          "sign" : -462940472,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 192558,
          "rowCount" : 402,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#287, s_store_id#288, s_rec_start_date#289, s_rec_end_date#290, s_closed_date_sk#291, s_store_name#292, s_number_employees#293, s_floor_space#294, s_hours#295, s_manager#296, s_market_id#297, s_geography_class#298, s_market_desc#299, s_market_manager#300, s_division_id#301, s_division_name#302, s_company_id#303, s_company_name#304, s_street_number#305, s_street_name#306, s_street_type#307, s_suite_number#308, s_city#309, s_county#310, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "16" : {
          "sign" : 1333763490,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 360,
          "rowCount" : 30,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#49] "
        },
        "79" : {
          "sign" : -946634804,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 989985600,
          "rowCount" : 6874900,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [wr_returned_time_sk#235, wr_item_sk#236, wr_refunded_customer_sk#237, wr_refunded_cdemo_sk#238, wr_refunded_hdemo_sk#239, wr_refunded_addr_sk#240, wr_returning_customer_sk#241, wr_returning_cdemo_sk#242, wr_returning_hdemo_sk#243, wr_returning_addr_sk#244, wr_web_page_sk#245, wr_reason_sk#246, wr_order_number#247L, wr_return_quantity#248, wr_return_amt#249, wr_return_tax#250, wr_return_amt_inc_tax#251, wr_fee#252, wr_return_ship_cost#253, wr_refunded_cash#254, wr_reversed_charge#255, wr_account_credit#256, wr_net_loss#257, wr_returned_date_sk#258], `spark_catalog`.`tpcds_100`.`web_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "5" : {
          "sign" : 342174379,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
          "sizeInBytes" : 218620,
          "rowCount" : 3215,
          "isRuntime" : false,
          "predicate" : " (unknown) Union Arguments: false, false "
        },
        "72" : {
          "sign" : 809010913,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 56532,
          "rowCount" : 2019,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [wp_web_page_sk#428], [wp_web_page_sk#428, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#24, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#25] "
        },
        "10" : {
          "sign" : 1071725676,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 18491297248,
          "rowCount" : 577853039,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#32 = s_store_sk#77) "
        },
        "59" : {
          "sign" : -1202395237,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2228576448,
          "rowCount" : 79592016,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_ext_sales_price#209, ws_net_profit#219, wp_web_page_sk#221] "
        },
        "48" : {
          "sign" : 296617874,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 391166328,
          "rowCount" : 13970226,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cr_call_center_sk#170, cr_return_amount#177, cr_net_loss#185] "
        },
        "21" : {
          "sign" : -1963119530,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 192558,
          "rowCount" : 402,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#77, s_store_id#78, s_rec_start_date#79, s_rec_end_date#80, s_closed_date_sk#81, s_store_name#82, s_number_employees#83, s_floor_space#84, s_hours#85, s_manager#86, s_market_id#87, s_geography_class#88, s_market_desc#89, s_market_manager#90, s_division_id#91, s_division_name#92, s_company_id#93, s_company_name#94, s_street_number#95, s_street_name#96, s_street_type#97, s_suite_number#98, s_city#99, s_county#100, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "76" : {
          "sign" : 239002776,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 240483600,
          "rowCount" : 6680100,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (wr_returned_date_sk#258 = d_date_sk#400) "
        },
        "54" : {
          "sign" : -1600183809,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 7380,
          "rowCount" : 30,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#346) AND ((d_date#346 >= 1998-08-04) AND (d_date#346 <= 1998-09-03))) AND isnotnull(d_date_sk#344)) "
        },
        "43" : {
          "sign" : 25258512,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 29800787536,
          "rowCount" : 143273017,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#126, cs_ship_date_sk#127, cs_bill_customer_sk#128, cs_bill_cdemo_sk#129, cs_bill_hdemo_sk#130, cs_bill_addr_sk#131, cs_ship_customer_sk#132, cs_ship_cdemo_sk#133, cs_ship_hdemo_sk#134, cs_ship_addr_sk#135, cs_call_center_sk#136, cs_catalog_page_sk#137, cs_ship_mode_sk#138, cs_warehouse_sk#139, cs_item_sk#140, cs_promo_sk#141, cs_order_number#142L, cs_quantity#143, cs_wholesale_cost#144, cs_list_price#145, cs_sales_price#146, cs_ext_discount_amt#147, cs_ext_sales_price#148, cs_ext_wholesale_cost#149, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "65" : {
          "sign" : 2130051318,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 14972593792,
          "rowCount" : 71983624,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#187, ws_ship_date_sk#188, ws_item_sk#189, ws_bill_customer_sk#190, ws_bill_cdemo_sk#191, ws_bill_hdemo_sk#192, ws_bill_addr_sk#193, ws_ship_customer_sk#194, ws_ship_cdemo_sk#195, ws_ship_hdemo_sk#196, ws_ship_addr_sk#197, ws_web_page_sk#198, ws_web_site_sk#199, ws_ship_mode_sk#200, ws_warehouse_sk#201, ws_promo_sk#202, ws_order_number#203L, ws_quantity#204, ws_wholesale_cost#205, ws_list_price#206, ws_sales_price#207, ws_ext_discount_amt#208, ws_ext_sales_price#209, ws_ext_wholesale_cost#210, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "71" : {
          "sign" : 493486675,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 281520,
          "rowCount" : 2040,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [wp_web_page_sk#221, wp_web_page_id#222, wp_rec_start_date#223, wp_rec_end_date#224, wp_creation_date_sk#225, wp_access_date_sk#226, wp_autogen_flag#227, wp_customer_sk#228, wp_url#229, wp_type#230, wp_char_count#231, wp_link_count#232, wp_image_count#233, wp_max_ad_count#234], `spark_catalog`.`tpcds_100`.`web_page`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "57" : {
          "sign" : -1462165179,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 97008,
          "rowCount" : 2021,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: LeftOuter, (wp_web_page_sk#221 = wp_web_page_sk#428) "
        },
        "32" : {
          "sign" : -1039269751,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#259, d_date_id#260, d_date#261, d_month_seq#262, d_week_seq#263, d_quarter_seq#264, d_year#265, d_dow#266, d_moy#267, d_dom#268, d_qoy#269, d_fy_year#270, d_fy_quarter_seq#271, d_fy_week_seq#272, d_day_name#273, d_quarter_name#274, d_holiday#275, d_weekend#276, d_following_holiday#277, d_first_dom#278, d_last_dom#279, d_same_day_ly#280, d_same_day_lq#281, d_current_day#282, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "80" : {
          "sign" : 2023545311,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 360,
          "rowCount" : 30,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#400] "
        },
        "82" : {
          "sign" : 158921008,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#400, d_date_id#401, d_date#402, d_month_seq#403, d_week_seq#404, d_quarter_seq#405, d_year#406, d_dow#407, d_moy#408, d_dom#409, d_qoy#410, d_fy_year#411, d_fy_quarter_seq#412, d_fy_week_seq#413, d_day_name#414, d_quarter_name#415, d_holiday#416, d_weekend#417, d_following_holiday#418, d_first_dom#419, d_last_dom#420, d_same_day_ly#421, d_same_day_lq#422, d_current_day#423, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "49" : {
          "sign" : 1855678660,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 502928136,
          "rowCount" : 13970226,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (cr_returned_date_sk#186 = d_date_sk#344) "
        },
        "6" : {
          "sign" : 1543739917,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 13736,
          "rowCount" : 202,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [sales#14, coalesce(returns#16, 0.00) AS returns#2, (profit#15 - coalesce(profit_loss#17, 0.00)) AS profit#3, store channel AS channel#473, s_store_sk#77 AS id#474] "
        },
        "36" : {
          "sign" : 1442293614,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 67456,
          "rowCount" : 992,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [sales#18, returns#20, (profit#19 - profit_loss#21) AS profit#6, catalog channel AS channel#483, cs_call_center_sk#136 AS id#484] "
        },
        "1" : {
          "sign" : -381476676,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
          "sizeInBytes" : 936941,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) LocalLimit Arguments: 100 "
        },
        "39" : {
          "sign" : 125755905,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3878455336,
          "rowCount" : 138516262,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#136, cs_ext_sales_price#148, cs_net_profit#158] "
        },
        "17" : {
          "sign" : -1586626797,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 7380,
          "rowCount" : 30,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#51) AND ((d_date#51 >= 1998-08-04) AND (d_date#51 <= 1998-09-03))) AND isnotnull(d_date_sk#49)) "
        },
        "25" : {
          "sign" : -88293975,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 754762260,
          "rowCount" : 26955795,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [sr_store_sk#112, sr_return_amt#116, sr_net_loss#124] "
        },
        "60" : {
          "sign" : -185552780,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 2546944512,
          "rowCount" : 79592016,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ws_web_page_sk#198 = wp_web_page_sk#221) "
        },
        "14" : {
          "sign" : -1373342276,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 39926379296,
          "rowCount" : 262673548,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_sold_date_sk#48) AND isnotnull(ss_store_sk#32)) AND dynamicpruning#487 [ss_sold_date_sk#48]) "
        },
        "47" : {
          "sign" : -594514610,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 768,
          "rowCount" : 32,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [cr_call_center_sk#170], [MakeDecimal(sum(UnscaledValue(cr_return_amount#177)),17,2) AS returns#20, MakeDecimal(sum(UnscaledValue(cr_net_loss#185)),17,2) AS profit_loss#21] "
        },
        "31" : {
          "sign" : 1244018133,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 7380,
          "rowCount" : 30,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#261) AND ((d_date#261 >= 1998-08-04) AND (d_date#261 <= 1998-09-03))) AND isnotnull(d_date_sk#259)) "
        },
        "69" : {
          "sign" : 1652996543,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 24480,
          "rowCount" : 2040,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [wp_web_page_sk#221] "
        },
        "58" : {
          "sign" : 739797158,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 56588,
          "rowCount" : 2021,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [wp_web_page_sk#221], [wp_web_page_sk#221, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#209)),17,2) AS sales#22, MakeDecimal(sum(UnscaledValue(ws_net_profit#219)),17,2) AS profit#23] "
        },
        "64" : {
          "sign" : 962223329,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 14968867472,
          "rowCount" : 71965709,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(ws_sold_date_sk#220) AND isnotnull(ws_web_page_sk#198)) AND dynamicpruning#491 [ws_sold_date_sk#220]) "
        },
        "53" : {
          "sign" : -1076609600,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 360,
          "rowCount" : 30,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#344] "
        },
        "42" : {
          "sign" : 712069884,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 29800787536,
          "rowCount" : 143273017,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(cs_sold_date_sk#159) AND dynamicpruning#489 [cs_sold_date_sk#159]) "
        },
        "75" : {
          "sign" : 1662007231,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 187042800,
          "rowCount" : 6680100,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [wr_web_page_sk#245, wr_return_amt#249, wr_net_loss#257] "
        },
        "0" : {
          "sign" : -1257292615,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
          "sizeInBytes" : 8000,
          "rowCount" : 100,
          "isRuntime" : false,
          "predicate" : " (unknown) GlobalLimit Arguments: 100 "
        },
        "20" : {
          "sign" : -1738577838,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 192558,
          "rowCount" : 402,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(s_store_sk#77) "
        },
        "27" : {
          "sign" : -1169495209,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 858321760,
          "rowCount" : 26822555,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [sr_store_sk#112, sr_return_amt#116, sr_net_loss#124, sr_returned_date_sk#125] "
        },
        "70" : {
          "sign" : 901241195,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 281520,
          "rowCount" : 2040,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(wp_web_page_sk#221) "
        },
        "2" : {
          "sign" : 2042710607,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 936941,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [channel#476 ASC NULLS FIRST, id#477 ASC NULLS FIRST], true "
        },
        "38" : {
          "sign" : 44973760,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 868,
          "rowCount" : 31,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [cs_call_center_sk#136], [cs_call_center_sk#136, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#148)),17,2) AS sales#18, MakeDecimal(sum(UnscaledValue(cs_net_profit#158)),17,2) AS profit#19] "
        },
        "81" : {
          "sign" : 736211011,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 7380,
          "rowCount" : 30,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#402) AND ((d_date#402 >= 1998-08-04) AND (d_date#402 <= 1998-09-03))) AND isnotnull(d_date_sk#400)) "
        },
        "18" : {
          "sign" : 247686043,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#49, d_date_id#50, d_date#51, d_month_seq#52, d_week_seq#53, d_quarter_seq#54, d_year#55, d_dow#56, d_moy#57, d_dom#58, d_qoy#59, d_fy_year#60, d_fy_quarter_seq#61, d_fy_week_seq#62, d_day_name#63, d_quarter_name#64, d_holiday#65, d_weekend#66, d_following_holiday#67, d_first_dom#68, d_last_dom#69, d_same_day_ly#70, d_same_day_lq#71, d_current_day#72, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "30" : {
          "sign" : -302230147,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 360,
          "rowCount" : 30,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#259] "
        },
        "7" : {
          "sign" : -317684709,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 9696,
          "rowCount" : 202,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: LeftOuter, (s_store_sk#77 = s_store_sk#287) "
        },
        "29" : {
          "sign" : -221723247,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3557606528,
          "rowCount" : 27793801,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#106, sr_item_sk#107, sr_customer_sk#108, sr_cdemo_sk#109, sr_hdemo_sk#110, sr_addr_sk#111, sr_store_sk#112, sr_reason_sk#113, sr_ticket_number#114L, sr_return_quantity#115, sr_return_amt#116, sr_return_tax#117, sr_return_amt_inc_tax#118, sr_fee#119, sr_return_ship_cost#120, sr_refunded_cash#121, sr_reversed_charge#122, sr_store_credit#123, sr_net_loss#124, sr_returned_date_sk#125], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "41" : {
          "sign" : 1210180772,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 4584736544,
          "rowCount" : 143273017,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#136, cs_ext_sales_price#148, cs_net_profit#158, cs_sold_date_sk#159] "
        },
        "63" : {
          "sign" : -1869029180,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2302902688,
          "rowCount" : 71965709,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_web_page_sk#198, ws_ext_sales_price#209, ws_net_profit#219, ws_sold_date_sk#220] "
        },
        "3" : {
          "sign" : -934182476,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 936941,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [channel#476, id#477, spark_grouping_id#475L], [channel#476, id#477, sum(sales#14) AS sales#11, sum(returns#2) AS returns#12, sum(profit#3) AS profit#13] "
        },
        "74" : {
          "sign" : 1686552205,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 234076160,
          "rowCount" : 7314880,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (wr_web_page_sk#245 = wp_web_page_sk#428) "
        },
        "52" : {
          "sign" : 754753016,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 2246060232,
          "rowCount" : 14397822,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cr_returned_time_sk#160, cr_item_sk#161, cr_refunded_customer_sk#162, cr_refunded_cdemo_sk#163, cr_refunded_hdemo_sk#164, cr_refunded_addr_sk#165, cr_returning_customer_sk#166, cr_returning_cdemo_sk#167, cr_returning_hdemo_sk#168, cr_returning_addr_sk#169, cr_call_center_sk#170, cr_catalog_page_sk#171, cr_ship_mode_sk#172, cr_warehouse_sk#173, cr_reason_sk#174, cr_order_number#175L, cr_return_quantity#176, cr_return_amount#177, cr_return_tax#178, cr_return_amt_inc_tax#179, cr_fee#180, cr_return_ship_cost#181, cr_refunded_cash#182, cr_reversed_charge#183, ... 3 more fields], `spark_catalog`.`tpcds_100`.`catalog_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "85" : {
          "sign" : -996397538,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 281520,
          "rowCount" : 2040,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [wp_web_page_sk#428, wp_web_page_id#429, wp_rec_start_date#430, wp_rec_end_date#431, wp_creation_date_sk#432, wp_access_date_sk#433, wp_autogen_flag#434, wp_customer_sk#435, wp_url#436, wp_type#437, wp_char_count#438, wp_link_count#439, wp_image_count#440, wp_max_ad_count#441], `spark_catalog`.`tpcds_100`.`web_page`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "28" : {
          "sign" : -2109625372,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3433287040,
          "rowCount" : 26822555,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(sr_returned_date_sk#125) AND isnotnull(sr_store_sk#112)) AND dynamicpruning#488 [sr_returned_date_sk#125]) "
        }
      },
      "links" : [ {
        "fromId" : 15,
        "fromName" : "LogicalRelation",
        "toId" : 14,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "LogicalRelation",
        "toId" : 17,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Filter",
        "toId" : 16,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "Project",
        "toId" : 14,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 14,
        "fromName" : "Filter",
        "toId" : 13,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Project",
        "toId" : 12,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "Project",
        "toId" : 12,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 12,
        "fromName" : "Join",
        "toId" : 11,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "Project",
        "toId" : 10,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "LogicalRelation",
        "toId" : 20,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "Filter",
        "toId" : 19,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "Project",
        "toId" : 10,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Join",
        "toId" : 9,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Project",
        "toId" : 8,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Aggregate",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 29,
        "fromName" : "LogicalRelation",
        "toId" : 28,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 32,
        "fromName" : "LogicalRelation",
        "toId" : 31,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 31,
        "fromName" : "Filter",
        "toId" : 30,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 30,
        "fromName" : "Project",
        "toId" : 28,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 28,
        "fromName" : "Filter",
        "toId" : 27,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "Project",
        "toId" : 26,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 30,
        "fromName" : "Project",
        "toId" : 26,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "Join",
        "toId" : 25,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "Project",
        "toId" : 24,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 35,
        "fromName" : "LogicalRelation",
        "toId" : 34,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 34,
        "fromName" : "Filter",
        "toId" : 33,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 33,
        "fromName" : "Project",
        "toId" : 24,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "Join",
        "toId" : 23,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "Project",
        "toId" : 22,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "Aggregate",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Join",
        "toId" : 6,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Project",
        "toId" : 5,
        "toName" : "Union",
        "linkType" : "Operator"
      }, {
        "fromId" : 43,
        "fromName" : "LogicalRelation",
        "toId" : 42,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 46,
        "fromName" : "LogicalRelation",
        "toId" : 45,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 45,
        "fromName" : "Filter",
        "toId" : 44,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 44,
        "fromName" : "Project",
        "toId" : 42,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 42,
        "fromName" : "Filter",
        "toId" : 41,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 41,
        "fromName" : "Project",
        "toId" : 40,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 44,
        "fromName" : "Project",
        "toId" : 40,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 40,
        "fromName" : "Join",
        "toId" : 39,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 39,
        "fromName" : "Project",
        "toId" : 38,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 38,
        "fromName" : "Aggregate",
        "toId" : 37,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 52,
        "fromName" : "LogicalRelation",
        "toId" : 51,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 55,
        "fromName" : "LogicalRelation",
        "toId" : 54,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 54,
        "fromName" : "Filter",
        "toId" : 53,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 53,
        "fromName" : "Project",
        "toId" : 51,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 51,
        "fromName" : "Filter",
        "toId" : 50,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 50,
        "fromName" : "Project",
        "toId" : 49,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 53,
        "fromName" : "Project",
        "toId" : 49,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 49,
        "fromName" : "Join",
        "toId" : 48,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 48,
        "fromName" : "Project",
        "toId" : 47,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 47,
        "fromName" : "Aggregate",
        "toId" : 37,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 37,
        "fromName" : "Join",
        "toId" : 36,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 36,
        "fromName" : "Project",
        "toId" : 5,
        "toName" : "Union",
        "linkType" : "Operator"
      }, {
        "fromId" : 65,
        "fromName" : "LogicalRelation",
        "toId" : 64,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 68,
        "fromName" : "LogicalRelation",
        "toId" : 67,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 67,
        "fromName" : "Filter",
        "toId" : 66,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 66,
        "fromName" : "Project",
        "toId" : 64,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 64,
        "fromName" : "Filter",
        "toId" : 63,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 63,
        "fromName" : "Project",
        "toId" : 62,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 66,
        "fromName" : "Project",
        "toId" : 62,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 62,
        "fromName" : "Join",
        "toId" : 61,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 61,
        "fromName" : "Project",
        "toId" : 60,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 71,
        "fromName" : "LogicalRelation",
        "toId" : 70,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 70,
        "fromName" : "Filter",
        "toId" : 69,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 69,
        "fromName" : "Project",
        "toId" : 60,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 60,
        "fromName" : "Join",
        "toId" : 59,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 59,
        "fromName" : "Project",
        "toId" : 58,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 58,
        "fromName" : "Aggregate",
        "toId" : 57,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 79,
        "fromName" : "LogicalRelation",
        "toId" : 78,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 82,
        "fromName" : "LogicalRelation",
        "toId" : 81,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 81,
        "fromName" : "Filter",
        "toId" : 80,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 80,
        "fromName" : "Project",
        "toId" : 78,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 78,
        "fromName" : "Filter",
        "toId" : 77,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 77,
        "fromName" : "Project",
        "toId" : 76,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 80,
        "fromName" : "Project",
        "toId" : 76,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 76,
        "fromName" : "Join",
        "toId" : 75,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 75,
        "fromName" : "Project",
        "toId" : 74,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 85,
        "fromName" : "LogicalRelation",
        "toId" : 84,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 84,
        "fromName" : "Filter",
        "toId" : 83,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 83,
        "fromName" : "Project",
        "toId" : 74,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 74,
        "fromName" : "Join",
        "toId" : 73,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 73,
        "fromName" : "Project",
        "toId" : 72,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 72,
        "fromName" : "Aggregate",
        "toId" : 57,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 57,
        "fromName" : "Join",
        "toId" : 56,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 56,
        "fromName" : "Project",
        "toId" : 5,
        "toName" : "Union",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Union",
        "toId" : 4,
        "toName" : "Expand",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Expand",
        "toId" : 3,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Aggregate",
        "toId" : 2,
        "toName" : "Sort",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Sort",
        "toId" : 1,
        "toName" : "LocalLimit",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "LocalLimit",
        "toId" : 0,
        "toName" : "GlobalLimit",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#476 ASC NULLS FIRST, id#477 ASC NULLS FIRST], true\n      +- Aggregate [channel#476, id#477, spark_grouping_id#475L], [channel#476, id#477, sum(sales#14) AS sales#11, sum(returns#2) AS returns#12, sum(profit#3) AS profit#13]\n         +- Expand [[sales#14, returns#2, profit#3, channel#473, id#474, 0], [sales#14, returns#2, profit#3, channel#473, null, 1], [sales#14, returns#2, profit#3, null, null, 3]], [sales#14, returns#2, profit#3, channel#476, id#477, spark_grouping_id#475L]\n            +- Union false, false\n               :- Project [sales#14, coalesce(returns#16, 0.00) AS returns#2, (profit#15 - coalesce(profit_loss#17, 0.00)) AS profit#3, store channel AS channel#473, s_store_sk#77 AS id#474]\n               :  +- Join LeftOuter, (s_store_sk#77 = s_store_sk#287)\n               :     :- Aggregate [s_store_sk#77], [s_store_sk#77, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#40)),17,2) AS sales#14, MakeDecimal(sum(UnscaledValue(ss_net_profit#47)),17,2) AS profit#15]\n               :     :  +- Project [ss_ext_sales_price#40, ss_net_profit#47, s_store_sk#77]\n               :     :     +- Join Inner, (ss_store_sk#32 = s_store_sk#77)\n               :     :        :- Project [ss_store_sk#32, ss_ext_sales_price#40, ss_net_profit#47]\n               :     :        :  +- Join Inner, (ss_sold_date_sk#48 = d_date_sk#49)\n               :     :        :     :- Project [ss_store_sk#32, ss_ext_sales_price#40, ss_net_profit#47, ss_sold_date_sk#48]\n               :     :        :     :  +- Filter ((isnotnull(ss_sold_date_sk#48) AND isnotnull(ss_store_sk#32)) AND dynamicpruning#487 [ss_sold_date_sk#48])\n               :     :        :     :     :  +- Project [d_date_sk#49]\n               :     :        :     :     :     +- Filter ((isnotnull(d_date#51) AND ((d_date#51 >= 1998-08-04) AND (d_date#51 <= 1998-09-03))) AND isnotnull(d_date_sk#49))\n               :     :        :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#49,d_date_id#50,d_date#51,d_month_seq#52,d_week_seq#53,d_quarter_seq#54,d_year#55,d_dow#56,d_moy#57,d_dom#58,d_qoy#59,d_fy_year#60,d_fy_quarter_seq#61,d_fy_week_seq#62,d_day_name#63,d_quarter_name#64,d_holiday#65,d_weekend#66,d_following_holiday#67,d_first_dom#68,d_last_dom#69,d_same_day_ly#70,d_same_day_lq#71,d_current_day#72,... 4 more fields] parquet\n               :     :        :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#26,ss_item_sk#27,ss_customer_sk#28,ss_cdemo_sk#29,ss_hdemo_sk#30,ss_addr_sk#31,ss_store_sk#32,ss_promo_sk#33,ss_ticket_number#34L,ss_quantity#35,ss_wholesale_cost#36,ss_list_price#37,ss_sales_price#38,ss_ext_discount_amt#39,ss_ext_sales_price#40,ss_ext_wholesale_cost#41,ss_ext_list_price#42,ss_ext_tax#43,ss_coupon_amt#44,ss_net_paid#45,ss_net_paid_inc_tax#46,ss_net_profit#47,ss_sold_date_sk#48] parquet\n               :     :        :     +- Project [d_date_sk#49]\n               :     :        :        +- Filter ((isnotnull(d_date#51) AND ((d_date#51 >= 1998-08-04) AND (d_date#51 <= 1998-09-03))) AND isnotnull(d_date_sk#49))\n               :     :        :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#49,d_date_id#50,d_date#51,d_month_seq#52,d_week_seq#53,d_quarter_seq#54,d_year#55,d_dow#56,d_moy#57,d_dom#58,d_qoy#59,d_fy_year#60,d_fy_quarter_seq#61,d_fy_week_seq#62,d_day_name#63,d_quarter_name#64,d_holiday#65,d_weekend#66,d_following_holiday#67,d_first_dom#68,d_last_dom#69,d_same_day_ly#70,d_same_day_lq#71,d_current_day#72,... 4 more fields] parquet\n               :     :        +- Project [s_store_sk#77]\n               :     :           +- Filter isnotnull(s_store_sk#77)\n               :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#77,s_store_id#78,s_rec_start_date#79,s_rec_end_date#80,s_closed_date_sk#81,s_store_name#82,s_number_employees#83,s_floor_space#84,s_hours#85,s_manager#86,s_market_id#87,s_geography_class#88,s_market_desc#89,s_market_manager#90,s_division_id#91,s_division_name#92,s_company_id#93,s_company_name#94,s_street_number#95,s_street_name#96,s_street_type#97,s_suite_number#98,s_city#99,s_county#100,... 5 more fields] parquet\n               :     +- Aggregate [s_store_sk#287], [s_store_sk#287, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#16, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#17]\n               :        +- Project [sr_return_amt#116, sr_net_loss#124, s_store_sk#287]\n               :           +- Join Inner, (sr_store_sk#112 = s_store_sk#287)\n               :              :- Project [sr_store_sk#112, sr_return_amt#116, sr_net_loss#124]\n               :              :  +- Join Inner, (sr_returned_date_sk#125 = d_date_sk#259)\n               :              :     :- Project [sr_store_sk#112, sr_return_amt#116, sr_net_loss#124, sr_returned_date_sk#125]\n               :              :     :  +- Filter ((isnotnull(sr_returned_date_sk#125) AND isnotnull(sr_store_sk#112)) AND dynamicpruning#488 [sr_returned_date_sk#125])\n               :              :     :     :  +- Project [d_date_sk#259]\n               :              :     :     :     +- Filter ((isnotnull(d_date#261) AND ((d_date#261 >= 1998-08-04) AND (d_date#261 <= 1998-09-03))) AND isnotnull(d_date_sk#259))\n               :              :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#259,d_date_id#260,d_date#261,d_month_seq#262,d_week_seq#263,d_quarter_seq#264,d_year#265,d_dow#266,d_moy#267,d_dom#268,d_qoy#269,d_fy_year#270,d_fy_quarter_seq#271,d_fy_week_seq#272,d_day_name#273,d_quarter_name#274,d_holiday#275,d_weekend#276,d_following_holiday#277,d_first_dom#278,d_last_dom#279,d_same_day_ly#280,d_same_day_lq#281,d_current_day#282,... 4 more fields] parquet\n               :              :     :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#106,sr_item_sk#107,sr_customer_sk#108,sr_cdemo_sk#109,sr_hdemo_sk#110,sr_addr_sk#111,sr_store_sk#112,sr_reason_sk#113,sr_ticket_number#114L,sr_return_quantity#115,sr_return_amt#116,sr_return_tax#117,sr_return_amt_inc_tax#118,sr_fee#119,sr_return_ship_cost#120,sr_refunded_cash#121,sr_reversed_charge#122,sr_store_credit#123,sr_net_loss#124,sr_returned_date_sk#125] parquet\n               :              :     +- Project [d_date_sk#259]\n               :              :        +- Filter ((isnotnull(d_date#261) AND ((d_date#261 >= 1998-08-04) AND (d_date#261 <= 1998-09-03))) AND isnotnull(d_date_sk#259))\n               :              :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#259,d_date_id#260,d_date#261,d_month_seq#262,d_week_seq#263,d_quarter_seq#264,d_year#265,d_dow#266,d_moy#267,d_dom#268,d_qoy#269,d_fy_year#270,d_fy_quarter_seq#271,d_fy_week_seq#272,d_day_name#273,d_quarter_name#274,d_holiday#275,d_weekend#276,d_following_holiday#277,d_first_dom#278,d_last_dom#279,d_same_day_ly#280,d_same_day_lq#281,d_current_day#282,... 4 more fields] parquet\n               :              +- Project [s_store_sk#287]\n               :                 +- Filter isnotnull(s_store_sk#287)\n               :                    +- Relation spark_catalog.tpcds_100.store[s_store_sk#287,s_store_id#288,s_rec_start_date#289,s_rec_end_date#290,s_closed_date_sk#291,s_store_name#292,s_number_employees#293,s_floor_space#294,s_hours#295,s_manager#296,s_market_id#297,s_geography_class#298,s_market_desc#299,s_market_manager#300,s_division_id#301,s_division_name#302,s_company_id#303,s_company_name#304,s_street_number#305,s_street_name#306,s_street_type#307,s_suite_number#308,s_city#309,s_county#310,... 5 more fields] parquet\n               :- Project [sales#18, returns#20, (profit#19 - profit_loss#21) AS profit#6, catalog channel AS channel#483, cs_call_center_sk#136 AS id#484]\n               :  +- Join Cross\n               :     :- Aggregate [cs_call_center_sk#136], [cs_call_center_sk#136, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#148)),17,2) AS sales#18, MakeDecimal(sum(UnscaledValue(cs_net_profit#158)),17,2) AS profit#19]\n               :     :  +- Project [cs_call_center_sk#136, cs_ext_sales_price#148, cs_net_profit#158]\n               :     :     +- Join Inner, (cs_sold_date_sk#159 = d_date_sk#316)\n               :     :        :- Project [cs_call_center_sk#136, cs_ext_sales_price#148, cs_net_profit#158, cs_sold_date_sk#159]\n               :     :        :  +- Filter (isnotnull(cs_sold_date_sk#159) AND dynamicpruning#489 [cs_sold_date_sk#159])\n               :     :        :     :  +- Project [d_date_sk#316]\n               :     :        :     :     +- Filter ((isnotnull(d_date#318) AND ((d_date#318 >= 1998-08-04) AND (d_date#318 <= 1998-09-03))) AND isnotnull(d_date_sk#316))\n               :     :        :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#316,d_date_id#317,d_date#318,d_month_seq#319,d_week_seq#320,d_quarter_seq#321,d_year#322,d_dow#323,d_moy#324,d_dom#325,d_qoy#326,d_fy_year#327,d_fy_quarter_seq#328,d_fy_week_seq#329,d_day_name#330,d_quarter_name#331,d_holiday#332,d_weekend#333,d_following_holiday#334,d_first_dom#335,d_last_dom#336,d_same_day_ly#337,d_same_day_lq#338,d_current_day#339,... 4 more fields] parquet\n               :     :        :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#126,cs_ship_date_sk#127,cs_bill_customer_sk#128,cs_bill_cdemo_sk#129,cs_bill_hdemo_sk#130,cs_bill_addr_sk#131,cs_ship_customer_sk#132,cs_ship_cdemo_sk#133,cs_ship_hdemo_sk#134,cs_ship_addr_sk#135,cs_call_center_sk#136,cs_catalog_page_sk#137,cs_ship_mode_sk#138,cs_warehouse_sk#139,cs_item_sk#140,cs_promo_sk#141,cs_order_number#142L,cs_quantity#143,cs_wholesale_cost#144,cs_list_price#145,cs_sales_price#146,cs_ext_discount_amt#147,cs_ext_sales_price#148,cs_ext_wholesale_cost#149,... 10 more fields] parquet\n               :     :        +- Project [d_date_sk#316]\n               :     :           +- Filter ((isnotnull(d_date#318) AND ((d_date#318 >= 1998-08-04) AND (d_date#318 <= 1998-09-03))) AND isnotnull(d_date_sk#316))\n               :     :              +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#316,d_date_id#317,d_date#318,d_month_seq#319,d_week_seq#320,d_quarter_seq#321,d_year#322,d_dow#323,d_moy#324,d_dom#325,d_qoy#326,d_fy_year#327,d_fy_quarter_seq#328,d_fy_week_seq#329,d_day_name#330,d_quarter_name#331,d_holiday#332,d_weekend#333,d_following_holiday#334,d_first_dom#335,d_last_dom#336,d_same_day_ly#337,d_same_day_lq#338,d_current_day#339,... 4 more fields] parquet\n               :     +- Aggregate [cr_call_center_sk#170], [MakeDecimal(sum(UnscaledValue(cr_return_amount#177)),17,2) AS returns#20, MakeDecimal(sum(UnscaledValue(cr_net_loss#185)),17,2) AS profit_loss#21]\n               :        +- Project [cr_call_center_sk#170, cr_return_amount#177, cr_net_loss#185]\n               :           +- Join Inner, (cr_returned_date_sk#186 = d_date_sk#344)\n               :              :- Project [cr_call_center_sk#170, cr_return_amount#177, cr_net_loss#185, cr_returned_date_sk#186]\n               :              :  +- Filter (isnotnull(cr_returned_date_sk#186) AND dynamicpruning#490 [cr_returned_date_sk#186])\n               :              :     :  +- Project [d_date_sk#344]\n               :              :     :     +- Filter ((isnotnull(d_date#346) AND ((d_date#346 >= 1998-08-04) AND (d_date#346 <= 1998-09-03))) AND isnotnull(d_date_sk#344))\n               :              :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#344,d_date_id#345,d_date#346,d_month_seq#347,d_week_seq#348,d_quarter_seq#349,d_year#350,d_dow#351,d_moy#352,d_dom#353,d_qoy#354,d_fy_year#355,d_fy_quarter_seq#356,d_fy_week_seq#357,d_day_name#358,d_quarter_name#359,d_holiday#360,d_weekend#361,d_following_holiday#362,d_first_dom#363,d_last_dom#364,d_same_day_ly#365,d_same_day_lq#366,d_current_day#367,... 4 more fields] parquet\n               :              :     +- Relation spark_catalog.tpcds_100.catalog_returns[cr_returned_time_sk#160,cr_item_sk#161,cr_refunded_customer_sk#162,cr_refunded_cdemo_sk#163,cr_refunded_hdemo_sk#164,cr_refunded_addr_sk#165,cr_returning_customer_sk#166,cr_returning_cdemo_sk#167,cr_returning_hdemo_sk#168,cr_returning_addr_sk#169,cr_call_center_sk#170,cr_catalog_page_sk#171,cr_ship_mode_sk#172,cr_warehouse_sk#173,cr_reason_sk#174,cr_order_number#175L,cr_return_quantity#176,cr_return_amount#177,cr_return_tax#178,cr_return_amt_inc_tax#179,cr_fee#180,cr_return_ship_cost#181,cr_refunded_cash#182,cr_reversed_charge#183,... 3 more fields] parquet\n               :              +- Project [d_date_sk#344]\n               :                 +- Filter ((isnotnull(d_date#346) AND ((d_date#346 >= 1998-08-04) AND (d_date#346 <= 1998-09-03))) AND isnotnull(d_date_sk#344))\n               :                    +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#344,d_date_id#345,d_date#346,d_month_seq#347,d_week_seq#348,d_quarter_seq#349,d_year#350,d_dow#351,d_moy#352,d_dom#353,d_qoy#354,d_fy_year#355,d_fy_quarter_seq#356,d_fy_week_seq#357,d_day_name#358,d_quarter_name#359,d_holiday#360,d_weekend#361,d_following_holiday#362,d_first_dom#363,d_last_dom#364,d_same_day_ly#365,d_same_day_lq#366,d_current_day#367,... 4 more fields] parquet\n               +- Project [sales#22, coalesce(returns#24, 0.00) AS returns#9, (profit#23 - coalesce(profit_loss#25, 0.00)) AS profit#10, web channel AS channel#485, wp_web_page_sk#221 AS id#486]\n                  +- Join LeftOuter, (wp_web_page_sk#221 = wp_web_page_sk#428)\n                     :- Aggregate [wp_web_page_sk#221], [wp_web_page_sk#221, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#209)),17,2) AS sales#22, MakeDecimal(sum(UnscaledValue(ws_net_profit#219)),17,2) AS profit#23]\n                     :  +- Project [ws_ext_sales_price#209, ws_net_profit#219, wp_web_page_sk#221]\n                     :     +- Join Inner, (ws_web_page_sk#198 = wp_web_page_sk#221)\n                     :        :- Project [ws_web_page_sk#198, ws_ext_sales_price#209, ws_net_profit#219]\n                     :        :  +- Join Inner, (ws_sold_date_sk#220 = d_date_sk#372)\n                     :        :     :- Project [ws_web_page_sk#198, ws_ext_sales_price#209, ws_net_profit#219, ws_sold_date_sk#220]\n                     :        :     :  +- Filter ((isnotnull(ws_sold_date_sk#220) AND isnotnull(ws_web_page_sk#198)) AND dynamicpruning#491 [ws_sold_date_sk#220])\n                     :        :     :     :  +- Project [d_date_sk#372]\n                     :        :     :     :     +- Filter ((isnotnull(d_date#374) AND ((d_date#374 >= 1998-08-04) AND (d_date#374 <= 1998-09-03))) AND isnotnull(d_date_sk#372))\n                     :        :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#372,d_date_id#373,d_date#374,d_month_seq#375,d_week_seq#376,d_quarter_seq#377,d_year#378,d_dow#379,d_moy#380,d_dom#381,d_qoy#382,d_fy_year#383,d_fy_quarter_seq#384,d_fy_week_seq#385,d_day_name#386,d_quarter_name#387,d_holiday#388,d_weekend#389,d_following_holiday#390,d_first_dom#391,d_last_dom#392,d_same_day_ly#393,d_same_day_lq#394,d_current_day#395,... 4 more fields] parquet\n                     :        :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#187,ws_ship_date_sk#188,ws_item_sk#189,ws_bill_customer_sk#190,ws_bill_cdemo_sk#191,ws_bill_hdemo_sk#192,ws_bill_addr_sk#193,ws_ship_customer_sk#194,ws_ship_cdemo_sk#195,ws_ship_hdemo_sk#196,ws_ship_addr_sk#197,ws_web_page_sk#198,ws_web_site_sk#199,ws_ship_mode_sk#200,ws_warehouse_sk#201,ws_promo_sk#202,ws_order_number#203L,ws_quantity#204,ws_wholesale_cost#205,ws_list_price#206,ws_sales_price#207,ws_ext_discount_amt#208,ws_ext_sales_price#209,ws_ext_wholesale_cost#210,... 10 more fields] parquet\n                     :        :     +- Project [d_date_sk#372]\n                     :        :        +- Filter ((isnotnull(d_date#374) AND ((d_date#374 >= 1998-08-04) AND (d_date#374 <= 1998-09-03))) AND isnotnull(d_date_sk#372))\n                     :        :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#372,d_date_id#373,d_date#374,d_month_seq#375,d_week_seq#376,d_quarter_seq#377,d_year#378,d_dow#379,d_moy#380,d_dom#381,d_qoy#382,d_fy_year#383,d_fy_quarter_seq#384,d_fy_week_seq#385,d_day_name#386,d_quarter_name#387,d_holiday#388,d_weekend#389,d_following_holiday#390,d_first_dom#391,d_last_dom#392,d_same_day_ly#393,d_same_day_lq#394,d_current_day#395,... 4 more fields] parquet\n                     :        +- Project [wp_web_page_sk#221]\n                     :           +- Filter isnotnull(wp_web_page_sk#221)\n                     :              +- Relation spark_catalog.tpcds_100.web_page[wp_web_page_sk#221,wp_web_page_id#222,wp_rec_start_date#223,wp_rec_end_date#224,wp_creation_date_sk#225,wp_access_date_sk#226,wp_autogen_flag#227,wp_customer_sk#228,wp_url#229,wp_type#230,wp_char_count#231,wp_link_count#232,wp_image_count#233,wp_max_ad_count#234] parquet\n                     +- Aggregate [wp_web_page_sk#428], [wp_web_page_sk#428, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#24, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#25]\n                        +- Project [wr_return_amt#249, wr_net_loss#257, wp_web_page_sk#428]\n                           +- Join Inner, (wr_web_page_sk#245 = wp_web_page_sk#428)\n                              :- Project [wr_web_page_sk#245, wr_return_amt#249, wr_net_loss#257]\n                              :  +- Join Inner, (wr_returned_date_sk#258 = d_date_sk#400)\n                              :     :- Project [wr_web_page_sk#245, wr_return_amt#249, wr_net_loss#257, wr_returned_date_sk#258]\n                              :     :  +- Filter ((isnotnull(wr_returned_date_sk#258) AND isnotnull(wr_web_page_sk#245)) AND dynamicpruning#492 [wr_returned_date_sk#258])\n                              :     :     :  +- Project [d_date_sk#400]\n                              :     :     :     +- Filter ((isnotnull(d_date#402) AND ((d_date#402 >= 1998-08-04) AND (d_date#402 <= 1998-09-03))) AND isnotnull(d_date_sk#400))\n                              :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#400,d_date_id#401,d_date#402,d_month_seq#403,d_week_seq#404,d_quarter_seq#405,d_year#406,d_dow#407,d_moy#408,d_dom#409,d_qoy#410,d_fy_year#411,d_fy_quarter_seq#412,d_fy_week_seq#413,d_day_name#414,d_quarter_name#415,d_holiday#416,d_weekend#417,d_following_holiday#418,d_first_dom#419,d_last_dom#420,d_same_day_ly#421,d_same_day_lq#422,d_current_day#423,... 4 more fields] parquet\n                              :     :     +- Relation spark_catalog.tpcds_100.web_returns[wr_returned_time_sk#235,wr_item_sk#236,wr_refunded_customer_sk#237,wr_refunded_cdemo_sk#238,wr_refunded_hdemo_sk#239,wr_refunded_addr_sk#240,wr_returning_customer_sk#241,wr_returning_cdemo_sk#242,wr_returning_hdemo_sk#243,wr_returning_addr_sk#244,wr_web_page_sk#245,wr_reason_sk#246,wr_order_number#247L,wr_return_quantity#248,wr_return_amt#249,wr_return_tax#250,wr_return_amt_inc_tax#251,wr_fee#252,wr_return_ship_cost#253,wr_refunded_cash#254,wr_reversed_charge#255,wr_account_credit#256,wr_net_loss#257,wr_returned_date_sk#258] parquet\n                              :     +- Project [d_date_sk#400]\n                              :        +- Filter ((isnotnull(d_date#402) AND ((d_date#402 >= 1998-08-04) AND (d_date#402 <= 1998-09-03))) AND isnotnull(d_date_sk#400))\n                              :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#400,d_date_id#401,d_date#402,d_month_seq#403,d_week_seq#404,d_quarter_seq#405,d_year#406,d_dow#407,d_moy#408,d_dom#409,d_qoy#410,d_fy_year#411,d_fy_quarter_seq#412,d_fy_week_seq#413,d_day_name#414,d_quarter_name#415,d_holiday#416,d_weekend#417,d_following_holiday#418,d_first_dom#419,d_last_dom#420,d_same_day_ly#421,d_same_day_lq#422,d_current_day#423,... 4 more fields] parquet\n                              +- Project [wp_web_page_sk#428]\n                                 +- Filter isnotnull(wp_web_page_sk#428)\n                                    +- Relation spark_catalog.tpcds_100.web_page[wp_web_page_sk#428,wp_web_page_id#429,wp_rec_start_date#430,wp_rec_end_date#431,wp_creation_date_sk#432,wp_access_date_sk#433,wp_autogen_flag#434,wp_customer_sk#435,wp_url#436,wp_type#437,wp_char_count#438,wp_link_count#439,wp_image_count#440,wp_max_ad_count#441] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 93482695824,
      "inputRowCount" : 539811695
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "12" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 116994699,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8192,
            "rowCount" : 256,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cs_call_center_sk#136], [cs_call_center_sk#136, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#148)),17,2) AS sales#511, MakeDecimal(sum(UnscaledValue(cs_net_profit#158)),17,2) AS profit#512], HashAggregate(keys=[cs_call_center_sk#136], functions=[sum(UnscaledValue(cs_ext_sales_price#148)), sum(UnscaledValue(cs_net_profit#158))]) "
          },
          "8" : {
            "sign" : 1996751199,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 102912,
            "rowCount" : 3216,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [s_store_sk#77], [s_store_sk#77, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#40)),17,2) AS sales#507, MakeDecimal(sum(UnscaledValue(ss_net_profit#47)),17,2) AS profit#508], HashAggregate(keys=[s_store_sk#77], functions=[sum(UnscaledValue(ss_ext_sales_price#40)), sum(UnscaledValue(ss_net_profit#47))]) "
          },
          "4" : {
            "sign" : 1758866462,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Expand",
            "sizeInBytes" : 542795405286895356123,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Expand Arguments: [[sales#507, returns#495, profit#496, channel#724, id#725, 0], [sales#507, returns#495, profit#496, channel#724, null, 1], [sales#507, returns#495, profit#496, null, null, 3]], [sales#507, returns#495, profit#496, channel#727, id#728, spark_grouping_id#726L] "
          },
          "15" : {
            "sign" : -573157411,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 135698851321682342400,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (wp_web_page_sk#221 = wp_web_page_sk#688) "
          },
          "11" : {
            "sign" : 341172157,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2883584,
            "rowCount" : 65536,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Cross "
          },
          "9" : {
            "sign" : -1351272337,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051776,
            "rowCount" : 201,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Aggregate [s_store_sk#547], [s_store_sk#547, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#509, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#510], HashAggregate(keys=[s_store_sk#547], functions=[sum(UnscaledValue(sr_return_amt#116)), sum(UnscaledValue(sr_net_loss#124))]), BroadcastQueryStage 24 "
          },
          "13" : {
            "sign" : -207313571,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8192,
            "rowCount" : 256,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cr_call_center_sk#170], [MakeDecimal(sum(UnscaledValue(cr_return_amount#177)),17,2) AS returns#513, MakeDecimal(sum(UnscaledValue(cr_net_loss#185)),17,2) AS profit_loss#514], HashAggregate(keys=[cr_call_center_sk#170], functions=[sum(UnscaledValue(cr_return_amount#177)), sum(UnscaledValue(cr_net_loss#185))]) "
          },
          "16" : {
            "sign" : -1833260765,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 127431120240480,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [wp_web_page_sk#221], [wp_web_page_sk#221, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#209)),17,2) AS sales#515, MakeDecimal(sum(UnscaledValue(ws_net_profit#219)),17,2) AS profit#516], HashAggregate(keys=[wp_web_page_sk#221], functions=[sum(UnscaledValue(ws_ext_sales_price#209)), sum(UnscaledValue(ws_net_profit#219))]) "
          },
          "5" : {
            "sign" : 1598161557,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 158315326542011145536,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "10" : {
            "sign" : 1893133472,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4456448,
            "rowCount" : 65536,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#511, returns#513, (profit#512 - profit_loss#514) AS profit#499, catalog channel AS channel#734, cs_call_center_sk#136 AS id#735] "
          },
          "6" : {
            "sign" : 1669593474,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 43956288,
            "rowCount" : 646416,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#507, coalesce(returns#509, 0.00) AS returns#495, (profit#508 - coalesce(profit_loss#510, 0.00)) AS profit#496, store channel AS channel#724, s_store_sk#77 AS id#725] "
          },
          "1" : {
            "sign" : -1970437103,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 678494256608619195153,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -650696098,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1064880,
            "rowCount" : 1020,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Aggregate [wp_web_page_sk#688], [wp_web_page_sk#688, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#517, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#518], HashAggregate(keys=[wp_web_page_sk#688], functions=[sum(UnscaledValue(wr_return_amt#249)), sum(UnscaledValue(wr_net_loss#257))]), BroadcastQueryStage 23 "
          },
          "14" : {
            "sign" : 1060352720,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 158315326541962732800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#515, coalesce(returns#517, 0.00) AS returns#502, (profit#516 - coalesce(profit_loss#518, 0.00)) AS profit#503, web channel AS channel#736, wp_web_page_sk#221 AS id#737] "
          },
          "0" : {
            "sign" : 955108812,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1772972406,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 678494256608619195153,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#727 ASC NULLS FIRST, id#728 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -1601031917,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 31027968,
            "rowCount" : 646416,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (s_store_sk#77 = s_store_sk#547) "
          },
          "3" : {
            "sign" : -951755349,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 678494256608619195153,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#727, id#728, spark_grouping_id#726L], [channel#727, id#728, sum(sales#507) AS sales#504, sum(returns#495) AS returns#505, sum(profit#496) AS profit#506] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Union",
          "toId" : 4,
          "toName" : "Expand",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Expand",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#727 ASC NULLS FIRST, id#728 ASC NULLS FIRST], true\n      +- Aggregate [channel#727, id#728, spark_grouping_id#726L], [channel#727, id#728, sum(sales#507) AS sales#504, sum(returns#495) AS returns#505, sum(profit#496) AS profit#506]\n         +- Expand [[sales#507, returns#495, profit#496, channel#724, id#725, 0], [sales#507, returns#495, profit#496, channel#724, null, 1], [sales#507, returns#495, profit#496, null, null, 3]], [sales#507, returns#495, profit#496, channel#727, id#728, spark_grouping_id#726L]\n            +- Union false, false\n               :- Project [sales#507, coalesce(returns#509, 0.00) AS returns#495, (profit#508 - coalesce(profit_loss#510, 0.00)) AS profit#496, store channel AS channel#724, s_store_sk#77 AS id#725]\n               :  +- Join LeftOuter, (s_store_sk#77 = s_store_sk#547)\n               :     :- LogicalQueryStage Aggregate [s_store_sk#77], [s_store_sk#77, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#40)),17,2) AS sales#507, MakeDecimal(sum(UnscaledValue(ss_net_profit#47)),17,2) AS profit#508], HashAggregate(keys=[s_store_sk#77], functions=[sum(UnscaledValue(ss_ext_sales_price#40)), sum(UnscaledValue(ss_net_profit#47))])\n               :     +- LogicalQueryStage LogicalQueryStage Aggregate [s_store_sk#547], [s_store_sk#547, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#509, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#510], HashAggregate(keys=[s_store_sk#547], functions=[sum(UnscaledValue(sr_return_amt#116)), sum(UnscaledValue(sr_net_loss#124))]), BroadcastQueryStage 24\n               :- Project [sales#511, returns#513, (profit#512 - profit_loss#514) AS profit#499, catalog channel AS channel#734, cs_call_center_sk#136 AS id#735]\n               :  +- Join Cross\n               :     :- LogicalQueryStage Aggregate [cs_call_center_sk#136], [cs_call_center_sk#136, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#148)),17,2) AS sales#511, MakeDecimal(sum(UnscaledValue(cs_net_profit#158)),17,2) AS profit#512], HashAggregate(keys=[cs_call_center_sk#136], functions=[sum(UnscaledValue(cs_ext_sales_price#148)), sum(UnscaledValue(cs_net_profit#158))])\n               :     +- LogicalQueryStage Aggregate [cr_call_center_sk#170], [MakeDecimal(sum(UnscaledValue(cr_return_amount#177)),17,2) AS returns#513, MakeDecimal(sum(UnscaledValue(cr_net_loss#185)),17,2) AS profit_loss#514], HashAggregate(keys=[cr_call_center_sk#170], functions=[sum(UnscaledValue(cr_return_amount#177)), sum(UnscaledValue(cr_net_loss#185))])\n               +- Project [sales#515, coalesce(returns#517, 0.00) AS returns#502, (profit#516 - coalesce(profit_loss#518, 0.00)) AS profit#503, web channel AS channel#736, wp_web_page_sk#221 AS id#737]\n                  +- Join LeftOuter, (wp_web_page_sk#221 = wp_web_page_sk#688)\n                     :- LogicalQueryStage Aggregate [wp_web_page_sk#221], [wp_web_page_sk#221, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#209)),17,2) AS sales#515, MakeDecimal(sum(UnscaledValue(ws_net_profit#219)),17,2) AS profit#516], HashAggregate(keys=[wp_web_page_sk#221], functions=[sum(UnscaledValue(ws_ext_sales_price#209)), sum(UnscaledValue(ws_net_profit#219))])\n                     +- LogicalQueryStage LogicalQueryStage Aggregate [wp_web_page_sk#688], [wp_web_page_sk#688, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#517, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#518], HashAggregate(keys=[wp_web_page_sk#688], functions=[sum(UnscaledValue(wr_return_amt#249)), sum(UnscaledValue(wr_net_loss#257))]), BroadcastQueryStage 23\n"
      },
      "IM" : {
        "inputSizeInBytes" : 127431122476432,
        "inputRowCount" : 4949
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 15,
        "FinishedTasksTotalTimeInMs" : 54078.0,
        "FinishedTasksDistributionInMs" : [ 181.0, 341.0, 511.0, 8187.0, 8844.0 ]
      },
      "StartTimeInMs" : 1702227389103,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 2528,
        "IOBytes" : {
          "Total" : 16855936,
          "Details" : {
            "IR" : 15496723,
            "IW" : 0,
            "SR" : 781717,
            "SW" : 577496
          }
        }
      }
    },
    "8" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 116994699,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 896,
            "rowCount" : 32,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cs_call_center_sk#136], [cs_call_center_sk#136, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#148)),17,2) AS sales#511, MakeDecimal(sum(UnscaledValue(cs_net_profit#158)),17,2) AS profit#512], HashAggregate(keys=[cs_call_center_sk#136], functions=[sum(UnscaledValue(cs_ext_sales_price#148)), sum(UnscaledValue(cs_net_profit#158))]) "
          },
          "8" : {
            "sign" : 1996751199,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 102912,
            "rowCount" : 3216,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [s_store_sk#77], [s_store_sk#77, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#40)),17,2) AS sales#507, MakeDecimal(sum(UnscaledValue(ss_net_profit#47)),17,2) AS profit#508], HashAggregate(keys=[s_store_sk#77], functions=[sum(UnscaledValue(ss_ext_sales_price#40)), sum(UnscaledValue(ss_net_profit#47))]) "
          },
          "4" : {
            "sign" : -509259298,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Expand",
            "sizeInBytes" : 252484128213915038865,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Expand Arguments: [[sales#507, returns#495, profit#496, channel#724, id#725, 0], [sales#507, returns#495, profit#496, channel#724, null, 1], [sales#507, returns#495, profit#496, null, null, 3]], [sales#507, returns#495, profit#496, channel#727, id#728, spark_grouping_id#726L] "
          },
          "15" : {
            "sign" : -573157411,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 62157842106420372480,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (wp_web_page_sk#221 = wp_web_page_sk#688) "
          },
          "11" : {
            "sign" : 341172157,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 360448,
            "rowCount" : 8192,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Cross "
          },
          "9" : {
            "sign" : -524100177,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 9359355051480,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [s_store_sk#547], [s_store_sk#547, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#509, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#510], HashAggregate(keys=[s_store_sk#547], functions=[sum(UnscaledValue(sr_return_amt#116)), sum(UnscaledValue(sr_net_loss#124))]) "
          },
          "13" : {
            "sign" : -207313571,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8192,
            "rowCount" : 256,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cr_call_center_sk#170], [MakeDecimal(sum(UnscaledValue(cr_return_amount#177)),17,2) AS returns#513, MakeDecimal(sum(UnscaledValue(cr_net_loss#185)),17,2) AS profit_loss#514], HashAggregate(keys=[cr_call_center_sk#170], functions=[sum(UnscaledValue(cr_return_amount#177)), sum(UnscaledValue(cr_net_loss#185))]) "
          },
          "16" : {
            "sign" : -1833260765,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 127431120240480,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [wp_web_page_sk#221], [wp_web_page_sk#221, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#209)),17,2) AS sales#515, MakeDecimal(sum(UnscaledValue(ws_net_profit#219)),17,2) AS profit#516], HashAggregate(keys=[wp_web_page_sk#221], functions=[sum(UnscaledValue(ws_ext_sales_price#209)), sum(UnscaledValue(ws_net_profit#219))]) "
          },
          "5" : {
            "sign" : -1947905643,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 73641204062391886336,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "10" : {
            "sign" : 1893133472,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 557056,
            "rowCount" : 8192,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#511, returns#513, (profit#512 - profit_loss#514) AS profit#499, catalog channel AS channel#734, cs_call_center_sk#136 AS id#735] "
          },
          "6" : {
            "sign" : -1216784766,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1123721604900894720,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#507, coalesce(returns#509, 0.00) AS returns#495, (profit#508 - coalesce(profit_loss#510, 0.00)) AS profit#496, store channel AS channel#724, s_store_sk#77 AS id#725] "
          },
          "1" : {
            "sign" : 2108345873,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 315605160267393798581,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -650696098,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 487776,
            "rowCount" : 15243,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Aggregate [wp_web_page_sk#688], [wp_web_page_sk#688, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#517, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#518], HashAggregate(keys=[wp_web_page_sk#688], functions=[sum(UnscaledValue(wr_return_amt#249)), sum(UnscaledValue(wr_net_loss#257))]), BroadcastQueryStage 23 "
          },
          "14" : {
            "sign" : 1060352720,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 72517482457490434560,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#515, coalesce(returns#517, 0.00) AS returns#502, (profit#516 - coalesce(profit_loss#518, 0.00)) AS profit#503, web channel AS channel#736, wp_web_page_sk#221 AS id#737] "
          },
          "0" : {
            "sign" : -1175081716,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -183063242,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 315605160267393798581,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#727 ASC NULLS FIRST, id#728 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -1088740525,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 963189947057909760,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (s_store_sk#77 = s_store_sk#547) "
          },
          "3" : {
            "sign" : -1250453461,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 315605160267393798581,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#727, id#728, spark_grouping_id#726L], [channel#727, id#728, sum(sales#507) AS sales#504, sum(returns#495) AS returns#505, sum(profit#496) AS profit#506] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Union",
          "toId" : 4,
          "toName" : "Expand",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Expand",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#727 ASC NULLS FIRST, id#728 ASC NULLS FIRST], true\n      +- Aggregate [channel#727, id#728, spark_grouping_id#726L], [channel#727, id#728, sum(sales#507) AS sales#504, sum(returns#495) AS returns#505, sum(profit#496) AS profit#506]\n         +- Expand [[sales#507, returns#495, profit#496, channel#724, id#725, 0], [sales#507, returns#495, profit#496, channel#724, null, 1], [sales#507, returns#495, profit#496, null, null, 3]], [sales#507, returns#495, profit#496, channel#727, id#728, spark_grouping_id#726L]\n            +- Union false, false\n               :- Project [sales#507, coalesce(returns#509, 0.00) AS returns#495, (profit#508 - coalesce(profit_loss#510, 0.00)) AS profit#496, store channel AS channel#724, s_store_sk#77 AS id#725]\n               :  +- Join LeftOuter, (s_store_sk#77 = s_store_sk#547)\n               :     :- LogicalQueryStage Aggregate [s_store_sk#77], [s_store_sk#77, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#40)),17,2) AS sales#507, MakeDecimal(sum(UnscaledValue(ss_net_profit#47)),17,2) AS profit#508], HashAggregate(keys=[s_store_sk#77], functions=[sum(UnscaledValue(ss_ext_sales_price#40)), sum(UnscaledValue(ss_net_profit#47))])\n               :     +- LogicalQueryStage Aggregate [s_store_sk#547], [s_store_sk#547, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#509, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#510], HashAggregate(keys=[s_store_sk#547], functions=[sum(UnscaledValue(sr_return_amt#116)), sum(UnscaledValue(sr_net_loss#124))])\n               :- Project [sales#511, returns#513, (profit#512 - profit_loss#514) AS profit#499, catalog channel AS channel#734, cs_call_center_sk#136 AS id#735]\n               :  +- Join Cross\n               :     :- LogicalQueryStage Aggregate [cs_call_center_sk#136], [cs_call_center_sk#136, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#148)),17,2) AS sales#511, MakeDecimal(sum(UnscaledValue(cs_net_profit#158)),17,2) AS profit#512], HashAggregate(keys=[cs_call_center_sk#136], functions=[sum(UnscaledValue(cs_ext_sales_price#148)), sum(UnscaledValue(cs_net_profit#158))])\n               :     +- LogicalQueryStage Aggregate [cr_call_center_sk#170], [MakeDecimal(sum(UnscaledValue(cr_return_amount#177)),17,2) AS returns#513, MakeDecimal(sum(UnscaledValue(cr_net_loss#185)),17,2) AS profit_loss#514], HashAggregate(keys=[cr_call_center_sk#170], functions=[sum(UnscaledValue(cr_return_amount#177)), sum(UnscaledValue(cr_net_loss#185))])\n               +- Project [sales#515, coalesce(returns#517, 0.00) AS returns#502, (profit#516 - coalesce(profit_loss#518, 0.00)) AS profit#503, web channel AS channel#736, wp_web_page_sk#221 AS id#737]\n                  +- Join LeftOuter, (wp_web_page_sk#221 = wp_web_page_sk#688)\n                     :- LogicalQueryStage Aggregate [wp_web_page_sk#221], [wp_web_page_sk#221, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#209)),17,2) AS sales#515, MakeDecimal(sum(UnscaledValue(ws_net_profit#219)),17,2) AS profit#516], HashAggregate(keys=[wp_web_page_sk#221], functions=[sum(UnscaledValue(ws_ext_sales_price#209)), sum(UnscaledValue(ws_net_profit#219))])\n                     +- LogicalQueryStage LogicalQueryStage Aggregate [wp_web_page_sk#688], [wp_web_page_sk#688, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#517, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#518], HashAggregate(keys=[wp_web_page_sk#688], functions=[sum(UnscaledValue(wr_return_amt#249)), sum(UnscaledValue(wr_net_loss#257))]), BroadcastQueryStage 23\n"
      },
      "IM" : {
        "inputSizeInBytes" : 136790475891736,
        "inputRowCount" : 18747
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 25,
        "FinishedTasksTotalTimeInMs" : 44236.0,
        "FinishedTasksDistributionInMs" : [ 148.0, 377.0, 1578.0, 3314.0, 3970.0 ]
      },
      "StartTimeInMs" : 1702227379411,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 12220,
        "IOBytes" : {
          "Total" : 47672329,
          "Details" : {
            "IR" : 45509292,
            "IW" : 0,
            "SR" : 1403310,
            "SW" : 759727
          }
        }
      }
    },
    "4" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : 1893133472,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 69632,
            "rowCount" : 1024,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#511, returns#513, (profit#512 - profit_loss#514) AS profit#499, catalog channel AS channel#734, cs_call_center_sk#136 AS id#735] "
          },
          "12" : {
            "sign" : 1356657032,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 293143679568,
            "rowCount" : 8142879988,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#48 = d_date_sk#49) "
          },
          "8" : {
            "sign" : 1484025835,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 91656257144928,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [s_store_sk#77], [s_store_sk#77, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#40)),17,2) AS sales#507, MakeDecimal(sum(UnscaledValue(ss_net_profit#47)),17,2) AS profit#508] "
          },
          "19" : {
            "sign" : 529363847,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#49], BroadcastQueryStage 0 "
          },
          "23" : {
            "sign" : 369260853,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 10696405773120,
            "rowCount" : 334262680410,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (sr_store_sk#112 = s_store_sk#547) "
          },
          "4" : {
            "sign" : 482921219,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Expand",
            "sizeInBytes" : 5926438794055456146459417969,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Expand Arguments: [[sales#507, returns#495, profit#496, channel#724, id#725, 0], [sales#507, returns#495, profit#496, channel#724, null, 1], [sales#507, returns#495, profit#496, null, null, 3]], [sales#507, returns#495, profit#496, channel#727, id#728, spark_grouping_id#726L] "
          },
          "40" : {
            "sign" : -1833260765,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 127431120240480,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [wp_web_page_sk#221], [wp_web_page_sk#221, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#209)),17,2) AS sales#515, MakeDecimal(sum(UnscaledValue(ws_net_profit#219)),17,2) AS profit#516], HashAggregate(keys=[wp_web_page_sk#221], functions=[sum(UnscaledValue(ws_ext_sales_price#209)), sum(UnscaledValue(ws_net_profit#219))]) "
          },
          "15" : {
            "sign" : -1218510227,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#26, ss_item_sk#27, ss_customer_sk#28, ss_cdemo_sk#29, ss_hdemo_sk#30, ss_addr_sk#31, ss_store_sk#32, ss_promo_sk#33, ss_ticket_number#34L, ss_quantity#35, ss_wholesale_cost#36, ss_list_price#37, ss_sales_price#38, ss_ext_discount_amt#39, ss_ext_sales_price#40, ss_ext_wholesale_cost#41, ss_ext_list_price#42, ss_ext_tax#43, ss_coupon_amt#44, ss_net_paid#45, ss_net_paid_inc_tax#46, ss_net_profit#47, ss_sold_date_sk#48], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "11" : {
            "sign" : 938967649,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 228000639664,
            "rowCount" : 8142879988,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_store_sk#32, ss_ext_sales_price#40, ss_net_profit#47] "
          },
          "9" : {
            "sign" : 829309728,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 91656257144928,
            "rowCount" : 3273437755176,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_ext_sales_price#40, ss_net_profit#47, s_store_sk#77] "
          },
          "33" : {
            "sign" : 535725253,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051792,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#547], BroadcastQueryStage 5 "
          },
          "22" : {
            "sign" : 1612702496,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9359355051480,
            "rowCount" : 334262680410,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_return_amt#116, sr_net_loss#124, s_store_sk#547] "
          },
          "26" : {
            "sign" : 1906986805,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 858321760,
            "rowCount" : 26822555,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_store_sk#112, sr_return_amt#116, sr_net_loss#124, sr_returned_date_sk#125] "
          },
          "37" : {
            "sign" : -207313571,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 768,
            "rowCount" : 32,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cr_call_center_sk#170], [MakeDecimal(sum(UnscaledValue(cr_return_amount#177)),17,2) AS returns#513, MakeDecimal(sum(UnscaledValue(cr_net_loss#185)),17,2) AS profit_loss#514], HashAggregate(keys=[cr_call_center_sk#170], functions=[sum(UnscaledValue(cr_return_amount#177)), sum(UnscaledValue(cr_net_loss#185))]) "
          },
          "13" : {
            "sign" : 837548438,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 8405553536,
            "rowCount" : 262673548,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_store_sk#32, ss_ext_sales_price#40, ss_net_profit#47, ss_sold_date_sk#48] "
          },
          "24" : {
            "sign" : 2044220995,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 23281977740,
            "rowCount" : 831499205,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_store_sk#112, sr_return_amt#116, sr_net_loss#124] "
          },
          "35" : {
            "sign" : 341172157,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 45056,
            "rowCount" : 1024,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Cross "
          },
          "16" : {
            "sign" : 1333763490,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 360,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#49] "
          },
          "5" : {
            "sign" : -929995520,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 1728544648266174709383996908,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "10" : {
            "sign" : 1108045433,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 104750008165632,
            "rowCount" : 3273437755176,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#32 = s_store_sk#77) "
          },
          "21" : {
            "sign" : -1377171193,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 9359355051480,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [s_store_sk#547], [s_store_sk#547, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#509, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#510] "
          },
          "32" : {
            "sign" : 1820794396,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#519], BroadcastQueryStage 3 "
          },
          "6" : {
            "sign" : 1778692440,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 117851547562476,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#507, coalesce(returns#509, 0.00) AS returns#495, (profit#508 - coalesce(profit_loss#510, 0.00)) AS profit#496, store channel AS channel#724, s_store_sk#77 AS id#725] "
          },
          "36" : {
            "sign" : 116994699,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 896,
            "rowCount" : 32,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cs_call_center_sk#136], [cs_call_center_sk#136, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#148)),17,2) AS sales#511, MakeDecimal(sum(UnscaledValue(cs_net_profit#158)),17,2) AS profit#512], HashAggregate(keys=[cs_call_center_sk#136], functions=[sum(UnscaledValue(cs_ext_sales_price#148)), sum(UnscaledValue(cs_net_profit#158))]) "
          },
          "1" : {
            "sign" : -1134260996,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 7408048492569320183074272461,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "39" : {
            "sign" : -1293409156,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1481609698513763021002598400,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (wp_web_page_sk#221 = wp_web_page_sk#688) "
          },
          "17" : {
            "sign" : -1586626797,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 7380,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#51) AND ((d_date#51 >= 1998-08-04) AND (d_date#51 <= 1998-09-03))) AND isnotnull(d_date_sk#49)) "
          },
          "25" : {
            "sign" : 1845685838,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 29933971380,
            "rowCount" : 831499205,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (sr_returned_date_sk#125 = d_date_sk#519) "
          },
          "14" : {
            "sign" : 1504499251,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39926379296,
            "rowCount" : 262673548,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_sold_date_sk#48) AND isnotnull(ss_store_sk#32)) AND dynamicpruning#738 [ss_sold_date_sk#48]) "
          },
          "31" : {
            "sign" : 781611511,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#519, d_date_id#520, d_date#521, d_month_seq#522, d_week_seq#523, d_quarter_seq#524, d_year#525, d_dow#526, d_moy#527, d_dom#528, d_qoy#529, d_fy_year#530, d_fy_quarter_seq#531, d_fy_week_seq#532, d_day_name#533, d_quarter_name#534, d_holiday#535, d_weekend#536, d_following_holiday#537, d_first_dom#538, d_last_dom#539, d_same_day_ly#540, d_same_day_lq#541, d_current_day#542, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "0" : {
            "sign" : 1981921073,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 1557086341,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051792,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#77], BroadcastQueryStage 1 "
          },
          "27" : {
            "sign" : -2103513388,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3433287040,
            "rowCount" : 26822555,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(sr_returned_date_sk#125) AND isnotnull(sr_store_sk#112)) AND dynamicpruning#739 [sr_returned_date_sk#125]) "
          },
          "2" : {
            "sign" : 1677822491,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 7408048492569320183074272461,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#727 ASC NULLS FIRST, id#728 ASC NULLS FIRST], true "
          },
          "38" : {
            "sign" : -1577871569,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1728544648266056857836364800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#515, coalesce(returns#517, 0.00) AS returns#502, (profit#516 - coalesce(profit_loss#518, 0.00)) AS profit#503, web channel AS channel#736, wp_web_page_sk#221 AS id#737] "
          },
          "18" : {
            "sign" : 247686043,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#49, d_date_id#50, d_date#51, d_month_seq#52, d_week_seq#53, d_quarter_seq#54, d_year#55, d_dow#56, d_moy#57, d_dom#58, d_qoy#59, d_fy_year#60, d_fy_quarter_seq#61, d_fy_week_seq#62, d_day_name#63, d_quarter_name#64, d_holiday#65, d_weekend#66, d_following_holiday#67, d_first_dom#68, d_last_dom#69, d_same_day_ly#70, d_same_day_lq#71, d_current_day#72, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "30" : {
            "sign" : -1168667407,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 7380,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#521) AND ((d_date#521 >= 1998-08-04) AND (d_date#521 <= 1998-09-03))) AND isnotnull(d_date_sk#519)) "
          },
          "7" : {
            "sign" : 503191111,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 101015612196408,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (s_store_sk#77 = s_store_sk#547) "
          },
          "29" : {
            "sign" : -1840330346,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 360,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#519] "
          },
          "41" : {
            "sign" : -1496956867,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 11626749382080,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [wp_web_page_sk#688], [wp_web_page_sk#688, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#517, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#518], HashAggregate(keys=[wp_web_page_sk#688], functions=[sum(UnscaledValue(wr_return_amt#249)), sum(UnscaledValue(wr_net_loss#257))]) "
          },
          "3" : {
            "sign" : 1085156182,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 7408048492569320183074272461,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#727, id#728, spark_grouping_id#726L], [channel#727, id#728, sum(sales#507) AS sales#504, sum(returns#495) AS returns#505, sum(profit#496) AS profit#506] "
          },
          "28" : {
            "sign" : -221723247,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3557606528,
            "rowCount" : 27793801,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#106, sr_item_sk#107, sr_customer_sk#108, sr_cdemo_sk#109, sr_hdemo_sk#110, sr_addr_sk#111, sr_store_sk#112, sr_reason_sk#113, sr_ticket_number#114L, sr_return_quantity#115, sr_return_amt#116, sr_return_tax#117, sr_return_amt_inc_tax#118, sr_fee#119, sr_return_ship_cost#120, sr_refunded_cash#121, sr_reversed_charge#122, sr_store_credit#123, sr_net_loss#124, sr_returned_date_sk#125], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 15,
          "fromName" : "LogicalRelation",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalRelation",
          "toId" : 17,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Filter",
          "toId" : 16,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 14,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Join",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Aggregate",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalRelation",
          "toId" : 27,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "LogicalRelation",
          "toId" : 30,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Filter",
          "toId" : 29,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Project",
          "toId" : 27,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 27,
          "fromName" : "Filter",
          "toId" : 26,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Project",
          "toId" : 25,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "LogicalQueryStage",
          "toId" : 25,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Join",
          "toId" : 24,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Project",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "LogicalQueryStage",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Join",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 21,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Aggregate",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "LogicalQueryStage",
          "toId" : 35,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "LogicalQueryStage",
          "toId" : 35,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "Join",
          "toId" : 34,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "LogicalQueryStage",
          "toId" : 39,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 41,
          "fromName" : "LogicalQueryStage",
          "toId" : 39,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "Join",
          "toId" : 38,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Union",
          "toId" : 4,
          "toName" : "Expand",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Expand",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#727 ASC NULLS FIRST, id#728 ASC NULLS FIRST], true\n      +- Aggregate [channel#727, id#728, spark_grouping_id#726L], [channel#727, id#728, sum(sales#507) AS sales#504, sum(returns#495) AS returns#505, sum(profit#496) AS profit#506]\n         +- Expand [[sales#507, returns#495, profit#496, channel#724, id#725, 0], [sales#507, returns#495, profit#496, channel#724, null, 1], [sales#507, returns#495, profit#496, null, null, 3]], [sales#507, returns#495, profit#496, channel#727, id#728, spark_grouping_id#726L]\n            +- Union false, false\n               :- Project [sales#507, coalesce(returns#509, 0.00) AS returns#495, (profit#508 - coalesce(profit_loss#510, 0.00)) AS profit#496, store channel AS channel#724, s_store_sk#77 AS id#725]\n               :  +- Join LeftOuter, (s_store_sk#77 = s_store_sk#547)\n               :     :- Aggregate [s_store_sk#77], [s_store_sk#77, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#40)),17,2) AS sales#507, MakeDecimal(sum(UnscaledValue(ss_net_profit#47)),17,2) AS profit#508]\n               :     :  +- Project [ss_ext_sales_price#40, ss_net_profit#47, s_store_sk#77]\n               :     :     +- Join Inner, (ss_store_sk#32 = s_store_sk#77)\n               :     :        :- Project [ss_store_sk#32, ss_ext_sales_price#40, ss_net_profit#47]\n               :     :        :  +- Join Inner, (ss_sold_date_sk#48 = d_date_sk#49)\n               :     :        :     :- Project [ss_store_sk#32, ss_ext_sales_price#40, ss_net_profit#47, ss_sold_date_sk#48]\n               :     :        :     :  +- Filter ((isnotnull(ss_sold_date_sk#48) AND isnotnull(ss_store_sk#32)) AND dynamicpruning#738 [ss_sold_date_sk#48])\n               :     :        :     :     :  +- Project [d_date_sk#49]\n               :     :        :     :     :     +- Filter ((isnotnull(d_date#51) AND ((d_date#51 >= 1998-08-04) AND (d_date#51 <= 1998-09-03))) AND isnotnull(d_date_sk#49))\n               :     :        :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#49,d_date_id#50,d_date#51,d_month_seq#52,d_week_seq#53,d_quarter_seq#54,d_year#55,d_dow#56,d_moy#57,d_dom#58,d_qoy#59,d_fy_year#60,d_fy_quarter_seq#61,d_fy_week_seq#62,d_day_name#63,d_quarter_name#64,d_holiday#65,d_weekend#66,d_following_holiday#67,d_first_dom#68,d_last_dom#69,d_same_day_ly#70,d_same_day_lq#71,d_current_day#72,... 4 more fields] parquet\n               :     :        :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#26,ss_item_sk#27,ss_customer_sk#28,ss_cdemo_sk#29,ss_hdemo_sk#30,ss_addr_sk#31,ss_store_sk#32,ss_promo_sk#33,ss_ticket_number#34L,ss_quantity#35,ss_wholesale_cost#36,ss_list_price#37,ss_sales_price#38,ss_ext_discount_amt#39,ss_ext_sales_price#40,ss_ext_wholesale_cost#41,ss_ext_list_price#42,ss_ext_tax#43,ss_coupon_amt#44,ss_net_paid#45,ss_net_paid_inc_tax#46,ss_net_profit#47,ss_sold_date_sk#48] parquet\n               :     :        :     +- LogicalQueryStage Project [d_date_sk#49], BroadcastQueryStage 0\n               :     :        +- LogicalQueryStage Project [s_store_sk#77], BroadcastQueryStage 1\n               :     +- Aggregate [s_store_sk#547], [s_store_sk#547, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#509, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#510]\n               :        +- Project [sr_return_amt#116, sr_net_loss#124, s_store_sk#547]\n               :           +- Join Inner, (sr_store_sk#112 = s_store_sk#547)\n               :              :- Project [sr_store_sk#112, sr_return_amt#116, sr_net_loss#124]\n               :              :  +- Join Inner, (sr_returned_date_sk#125 = d_date_sk#519)\n               :              :     :- Project [sr_store_sk#112, sr_return_amt#116, sr_net_loss#124, sr_returned_date_sk#125]\n               :              :     :  +- Filter ((isnotnull(sr_returned_date_sk#125) AND isnotnull(sr_store_sk#112)) AND dynamicpruning#739 [sr_returned_date_sk#125])\n               :              :     :     :  +- Project [d_date_sk#519]\n               :              :     :     :     +- Filter ((isnotnull(d_date#521) AND ((d_date#521 >= 1998-08-04) AND (d_date#521 <= 1998-09-03))) AND isnotnull(d_date_sk#519))\n               :              :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#519,d_date_id#520,d_date#521,d_month_seq#522,d_week_seq#523,d_quarter_seq#524,d_year#525,d_dow#526,d_moy#527,d_dom#528,d_qoy#529,d_fy_year#530,d_fy_quarter_seq#531,d_fy_week_seq#532,d_day_name#533,d_quarter_name#534,d_holiday#535,d_weekend#536,d_following_holiday#537,d_first_dom#538,d_last_dom#539,d_same_day_ly#540,d_same_day_lq#541,d_current_day#542,... 4 more fields] parquet\n               :              :     :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#106,sr_item_sk#107,sr_customer_sk#108,sr_cdemo_sk#109,sr_hdemo_sk#110,sr_addr_sk#111,sr_store_sk#112,sr_reason_sk#113,sr_ticket_number#114L,sr_return_quantity#115,sr_return_amt#116,sr_return_tax#117,sr_return_amt_inc_tax#118,sr_fee#119,sr_return_ship_cost#120,sr_refunded_cash#121,sr_reversed_charge#122,sr_store_credit#123,sr_net_loss#124,sr_returned_date_sk#125] parquet\n               :              :     +- LogicalQueryStage Project [d_date_sk#519], BroadcastQueryStage 3\n               :              +- LogicalQueryStage Project [s_store_sk#547], BroadcastQueryStage 5\n               :- Project [sales#511, returns#513, (profit#512 - profit_loss#514) AS profit#499, catalog channel AS channel#734, cs_call_center_sk#136 AS id#735]\n               :  +- Join Cross\n               :     :- LogicalQueryStage Aggregate [cs_call_center_sk#136], [cs_call_center_sk#136, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#148)),17,2) AS sales#511, MakeDecimal(sum(UnscaledValue(cs_net_profit#158)),17,2) AS profit#512], HashAggregate(keys=[cs_call_center_sk#136], functions=[sum(UnscaledValue(cs_ext_sales_price#148)), sum(UnscaledValue(cs_net_profit#158))])\n               :     +- LogicalQueryStage Aggregate [cr_call_center_sk#170], [MakeDecimal(sum(UnscaledValue(cr_return_amount#177)),17,2) AS returns#513, MakeDecimal(sum(UnscaledValue(cr_net_loss#185)),17,2) AS profit_loss#514], HashAggregate(keys=[cr_call_center_sk#170], functions=[sum(UnscaledValue(cr_return_amount#177)), sum(UnscaledValue(cr_net_loss#185))])\n               +- Project [sales#515, coalesce(returns#517, 0.00) AS returns#502, (profit#516 - coalesce(profit_loss#518, 0.00)) AS profit#503, web channel AS channel#736, wp_web_page_sk#221 AS id#737]\n                  +- Join LeftOuter, (wp_web_page_sk#221 = wp_web_page_sk#688)\n                     :- LogicalQueryStage Aggregate [wp_web_page_sk#221], [wp_web_page_sk#221, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#209)),17,2) AS sales#515, MakeDecimal(sum(UnscaledValue(ws_net_profit#219)),17,2) AS profit#516], HashAggregate(keys=[wp_web_page_sk#221], functions=[sum(UnscaledValue(ws_ext_sales_price#209)), sum(UnscaledValue(ws_net_profit#219))])\n                     +- LogicalQueryStage Aggregate [wp_web_page_sk#688], [wp_web_page_sk#688, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#517, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#518], HashAggregate(keys=[wp_web_page_sk#688], functions=[sum(UnscaledValue(wr_return_amt#249)), sum(UnscaledValue(wr_net_loss#257))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 139103238325640,
        "inputRowCount" : 302840084
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227375741,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 15890,
        "IOBytes" : {
          "Total" : 101481985,
          "Details" : {
            "IR" : 98675365,
            "IW" : 0,
            "SR" : 1403310,
            "SW" : 1403310
          }
        }
      }
    },
    "15" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -351824335,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "1" : {
            "sign" : 1901946196,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 178944,
            "rowCount" : 1243,
            "isRuntime" : true,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -677928889,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 178944,
            "rowCount" : 1243,
            "isRuntime" : true,
            "predicate" : " (unknown) Sort Arguments: [channel#727 ASC NULLS FIRST, id#728 ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : -1294968454,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 178944,
            "rowCount" : 1243,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [channel#727, id#728, spark_grouping_id#726L], [channel#727, id#728, sum(sales#507) AS sales#504, sum(returns#495) AS returns#505, sum(profit#496) AS profit#506], HashAggregate(keys=[channel#727, id#728, spark_grouping_id#726L], functions=[sum(sales#507), sum(returns#495), sum(profit#496)]) "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#727 ASC NULLS FIRST, id#728 ASC NULLS FIRST], true\n      +- LogicalQueryStage Aggregate [channel#727, id#728, spark_grouping_id#726L], [channel#727, id#728, sum(sales#507) AS sales#504, sum(returns#495) AS returns#505, sum(profit#496) AS profit#506], HashAggregate(keys=[channel#727, id#728, spark_grouping_id#726L], functions=[sum(sales#507), sum(returns#495), sum(profit#496)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 178944,
        "inputRowCount" : 1243
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227391285,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 346,
        "IOBytes" : {
          "Total" : 89061,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 89061,
            "SW" : 0
          }
        }
      }
    },
    "11" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 116994699,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 896,
            "rowCount" : 32,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cs_call_center_sk#136], [cs_call_center_sk#136, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#148)),17,2) AS sales#511, MakeDecimal(sum(UnscaledValue(cs_net_profit#158)),17,2) AS profit#512], HashAggregate(keys=[cs_call_center_sk#136], functions=[sum(UnscaledValue(cs_ext_sales_price#148)), sum(UnscaledValue(cs_net_profit#158))]) "
          },
          "8" : {
            "sign" : 1996751199,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 102912,
            "rowCount" : 3216,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [s_store_sk#77], [s_store_sk#77, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#40)),17,2) AS sales#507, MakeDecimal(sum(UnscaledValue(ss_net_profit#47)),17,2) AS profit#508], HashAggregate(keys=[s_store_sk#77], functions=[sum(UnscaledValue(ss_ext_sales_price#40)), sum(UnscaledValue(ss_net_profit#47))]) "
          },
          "4" : {
            "sign" : 1758866462,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Expand",
            "sizeInBytes" : 542795405286881986779,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Expand Arguments: [[sales#507, returns#495, profit#496, channel#724, id#725, 0], [sales#507, returns#495, profit#496, channel#724, null, 1], [sales#507, returns#495, profit#496, null, null, 3]], [sales#507, returns#495, profit#496, channel#727, id#728, spark_grouping_id#726L] "
          },
          "15" : {
            "sign" : -573157411,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 135698851321682342400,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (wp_web_page_sk#221 = wp_web_page_sk#688) "
          },
          "11" : {
            "sign" : 341172157,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 360448,
            "rowCount" : 8192,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Cross "
          },
          "9" : {
            "sign" : -1351272337,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051776,
            "rowCount" : 201,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Aggregate [s_store_sk#547], [s_store_sk#547, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#509, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#510], HashAggregate(keys=[s_store_sk#547], functions=[sum(UnscaledValue(sr_return_amt#116)), sum(UnscaledValue(sr_net_loss#124))]), BroadcastQueryStage 24 "
          },
          "13" : {
            "sign" : -207313571,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8192,
            "rowCount" : 256,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cr_call_center_sk#170], [MakeDecimal(sum(UnscaledValue(cr_return_amount#177)),17,2) AS returns#513, MakeDecimal(sum(UnscaledValue(cr_net_loss#185)),17,2) AS profit_loss#514], HashAggregate(keys=[cr_call_center_sk#170], functions=[sum(UnscaledValue(cr_return_amount#177)), sum(UnscaledValue(cr_net_loss#185))]) "
          },
          "16" : {
            "sign" : -1833260765,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 127431120240480,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [wp_web_page_sk#221], [wp_web_page_sk#221, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#209)),17,2) AS sales#515, MakeDecimal(sum(UnscaledValue(ws_net_profit#219)),17,2) AS profit#516], HashAggregate(keys=[wp_web_page_sk#221], functions=[sum(UnscaledValue(ws_ext_sales_price#209)), sum(UnscaledValue(ws_net_profit#219))]) "
          },
          "5" : {
            "sign" : 1598161557,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 158315326542007246144,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "10" : {
            "sign" : 1893133472,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 557056,
            "rowCount" : 8192,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#511, returns#513, (profit#512 - profit_loss#514) AS profit#499, catalog channel AS channel#734, cs_call_center_sk#136 AS id#735] "
          },
          "6" : {
            "sign" : 1669593474,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 43956288,
            "rowCount" : 646416,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#507, coalesce(returns#509, 0.00) AS returns#495, (profit#508 - coalesce(profit_loss#510, 0.00)) AS profit#496, store channel AS channel#724, s_store_sk#77 AS id#725] "
          },
          "1" : {
            "sign" : -1970437103,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 678494256608602483473,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -650696098,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1064880,
            "rowCount" : 1020,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Aggregate [wp_web_page_sk#688], [wp_web_page_sk#688, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#517, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#518], HashAggregate(keys=[wp_web_page_sk#688], functions=[sum(UnscaledValue(wr_return_amt#249)), sum(UnscaledValue(wr_net_loss#257))]), BroadcastQueryStage 23 "
          },
          "14" : {
            "sign" : 1060352720,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 158315326541962732800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#515, coalesce(returns#517, 0.00) AS returns#502, (profit#516 - coalesce(profit_loss#518, 0.00)) AS profit#503, web channel AS channel#736, wp_web_page_sk#221 AS id#737] "
          },
          "0" : {
            "sign" : 955108812,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1772972406,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 678494256608602483473,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#727 ASC NULLS FIRST, id#728 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -1601031917,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 31027968,
            "rowCount" : 646416,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (s_store_sk#77 = s_store_sk#547) "
          },
          "3" : {
            "sign" : -951755349,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 678494256608602483473,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#727, id#728, spark_grouping_id#726L], [channel#727, id#728, sum(sales#507) AS sales#504, sum(returns#495) AS returns#505, sum(profit#496) AS profit#506] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Union",
          "toId" : 4,
          "toName" : "Expand",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Expand",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#727 ASC NULLS FIRST, id#728 ASC NULLS FIRST], true\n      +- Aggregate [channel#727, id#728, spark_grouping_id#726L], [channel#727, id#728, sum(sales#507) AS sales#504, sum(returns#495) AS returns#505, sum(profit#496) AS profit#506]\n         +- Expand [[sales#507, returns#495, profit#496, channel#724, id#725, 0], [sales#507, returns#495, profit#496, channel#724, null, 1], [sales#507, returns#495, profit#496, null, null, 3]], [sales#507, returns#495, profit#496, channel#727, id#728, spark_grouping_id#726L]\n            +- Union false, false\n               :- Project [sales#507, coalesce(returns#509, 0.00) AS returns#495, (profit#508 - coalesce(profit_loss#510, 0.00)) AS profit#496, store channel AS channel#724, s_store_sk#77 AS id#725]\n               :  +- Join LeftOuter, (s_store_sk#77 = s_store_sk#547)\n               :     :- LogicalQueryStage Aggregate [s_store_sk#77], [s_store_sk#77, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#40)),17,2) AS sales#507, MakeDecimal(sum(UnscaledValue(ss_net_profit#47)),17,2) AS profit#508], HashAggregate(keys=[s_store_sk#77], functions=[sum(UnscaledValue(ss_ext_sales_price#40)), sum(UnscaledValue(ss_net_profit#47))])\n               :     +- LogicalQueryStage LogicalQueryStage Aggregate [s_store_sk#547], [s_store_sk#547, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#509, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#510], HashAggregate(keys=[s_store_sk#547], functions=[sum(UnscaledValue(sr_return_amt#116)), sum(UnscaledValue(sr_net_loss#124))]), BroadcastQueryStage 24\n               :- Project [sales#511, returns#513, (profit#512 - profit_loss#514) AS profit#499, catalog channel AS channel#734, cs_call_center_sk#136 AS id#735]\n               :  +- Join Cross\n               :     :- LogicalQueryStage Aggregate [cs_call_center_sk#136], [cs_call_center_sk#136, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#148)),17,2) AS sales#511, MakeDecimal(sum(UnscaledValue(cs_net_profit#158)),17,2) AS profit#512], HashAggregate(keys=[cs_call_center_sk#136], functions=[sum(UnscaledValue(cs_ext_sales_price#148)), sum(UnscaledValue(cs_net_profit#158))])\n               :     +- LogicalQueryStage Aggregate [cr_call_center_sk#170], [MakeDecimal(sum(UnscaledValue(cr_return_amount#177)),17,2) AS returns#513, MakeDecimal(sum(UnscaledValue(cr_net_loss#185)),17,2) AS profit_loss#514], HashAggregate(keys=[cr_call_center_sk#170], functions=[sum(UnscaledValue(cr_return_amount#177)), sum(UnscaledValue(cr_net_loss#185))])\n               +- Project [sales#515, coalesce(returns#517, 0.00) AS returns#502, (profit#516 - coalesce(profit_loss#518, 0.00)) AS profit#503, web channel AS channel#736, wp_web_page_sk#221 AS id#737]\n                  +- Join LeftOuter, (wp_web_page_sk#221 = wp_web_page_sk#688)\n                     :- LogicalQueryStage Aggregate [wp_web_page_sk#221], [wp_web_page_sk#221, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#209)),17,2) AS sales#515, MakeDecimal(sum(UnscaledValue(ws_net_profit#219)),17,2) AS profit#516], HashAggregate(keys=[wp_web_page_sk#221], functions=[sum(UnscaledValue(ws_ext_sales_price#209)), sum(UnscaledValue(ws_net_profit#219))])\n                     +- LogicalQueryStage LogicalQueryStage Aggregate [wp_web_page_sk#688], [wp_web_page_sk#688, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#517, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#518], HashAggregate(keys=[wp_web_page_sk#688], functions=[sum(UnscaledValue(wr_return_amt#249)), sum(UnscaledValue(wr_net_loss#257))]), BroadcastQueryStage 23\n"
      },
      "IM" : {
        "inputSizeInBytes" : 127431122469136,
        "inputRowCount" : 4725
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 9,
        "FinishedTasksNum" : 23,
        "FinishedTasksTotalTimeInMs" : 43936.0,
        "FinishedTasksDistributionInMs" : [ 181.0, 383.0, 2292.0, 3315.0, 3970.0 ]
      },
      "StartTimeInMs" : 1702227380054,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 11577,
        "IOBytes" : {
          "Total" : 43920309,
          "Details" : {
            "IR" : 42543227,
            "IW" : 0,
            "SR" : 781717,
            "SW" : 595365
          }
        }
      }
    },
    "9" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 116994699,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 896,
            "rowCount" : 32,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cs_call_center_sk#136], [cs_call_center_sk#136, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#148)),17,2) AS sales#511, MakeDecimal(sum(UnscaledValue(cs_net_profit#158)),17,2) AS profit#512], HashAggregate(keys=[cs_call_center_sk#136], functions=[sum(UnscaledValue(cs_ext_sales_price#148)), sum(UnscaledValue(cs_net_profit#158))]) "
          },
          "8" : {
            "sign" : 1996751199,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 102912,
            "rowCount" : 3216,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [s_store_sk#77], [s_store_sk#77, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#40)),17,2) AS sales#507, MakeDecimal(sum(UnscaledValue(ss_net_profit#47)),17,2) AS profit#508], HashAggregate(keys=[s_store_sk#77], functions=[sum(UnscaledValue(ss_ext_sales_price#40)), sum(UnscaledValue(ss_net_profit#47))]) "
          },
          "4" : {
            "sign" : -509259298,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Expand",
            "sizeInBytes" : 248631368428094716194,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Expand Arguments: [[sales#507, returns#495, profit#496, channel#724, id#725, 0], [sales#507, returns#495, profit#496, channel#724, null, 1], [sales#507, returns#495, profit#496, null, null, 3]], [sales#507, returns#495, profit#496, channel#727, id#728, spark_grouping_id#726L] "
          },
          "15" : {
            "sign" : -573157411,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 62157842106420372480,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (wp_web_page_sk#221 = wp_web_page_sk#688) "
          },
          "11" : {
            "sign" : 341172157,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 360448,
            "rowCount" : 8192,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Cross "
          },
          "9" : {
            "sign" : -524100177,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 102912,
            "rowCount" : 3216,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [s_store_sk#547], [s_store_sk#547, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#509, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#510], HashAggregate(keys=[s_store_sk#547], functions=[sum(UnscaledValue(sr_return_amt#116)), sum(UnscaledValue(sr_net_loss#124))]) "
          },
          "13" : {
            "sign" : -207313571,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8192,
            "rowCount" : 256,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cr_call_center_sk#170], [MakeDecimal(sum(UnscaledValue(cr_return_amount#177)),17,2) AS returns#513, MakeDecimal(sum(UnscaledValue(cr_net_loss#185)),17,2) AS profit_loss#514], HashAggregate(keys=[cr_call_center_sk#170], functions=[sum(UnscaledValue(cr_return_amount#177)), sum(UnscaledValue(cr_net_loss#185))]) "
          },
          "16" : {
            "sign" : -1833260765,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 127431120240480,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [wp_web_page_sk#221], [wp_web_page_sk#221, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#209)),17,2) AS sales#515, MakeDecimal(sum(UnscaledValue(ws_net_profit#219)),17,2) AS profit#516], HashAggregate(keys=[wp_web_page_sk#221], functions=[sum(UnscaledValue(ws_ext_sales_price#209)), sum(UnscaledValue(ws_net_profit#219))]) "
          },
          "5" : {
            "sign" : -1947905643,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 72517482458194292224,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "10" : {
            "sign" : 1893133472,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 557056,
            "rowCount" : 8192,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#511, returns#513, (profit#512 - profit_loss#514) AS profit#499, catalog channel AS channel#734, cs_call_center_sk#136 AS id#735] "
          },
          "6" : {
            "sign" : -1216784766,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 703300608,
            "rowCount" : 10342656,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#507, coalesce(returns#509, 0.00) AS returns#495, (profit#508 - coalesce(profit_loss#510, 0.00)) AS profit#496, store channel AS channel#724, s_store_sk#77 AS id#725] "
          },
          "1" : {
            "sign" : 2108345873,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 310789210535118395242,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -650696098,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 487776,
            "rowCount" : 15243,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Aggregate [wp_web_page_sk#688], [wp_web_page_sk#688, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#517, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#518], HashAggregate(keys=[wp_web_page_sk#688], functions=[sum(UnscaledValue(wr_return_amt#249)), sum(UnscaledValue(wr_net_loss#257))]), BroadcastQueryStage 23 "
          },
          "14" : {
            "sign" : 1060352720,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 72517482457490434560,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#515, coalesce(returns#517, 0.00) AS returns#502, (profit#516 - coalesce(profit_loss#518, 0.00)) AS profit#503, web channel AS channel#736, wp_web_page_sk#221 AS id#737] "
          },
          "0" : {
            "sign" : -1175081716,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -183063242,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 310789210535118395242,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#727 ASC NULLS FIRST, id#728 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -1088740525,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 496447488,
            "rowCount" : 10342656,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (s_store_sk#77 = s_store_sk#547) "
          },
          "3" : {
            "sign" : -1250453461,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 310789210535118395242,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#727, id#728, spark_grouping_id#726L], [channel#727, id#728, sum(sales#507) AS sales#504, sum(returns#495) AS returns#505, sum(profit#496) AS profit#506] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Union",
          "toId" : 4,
          "toName" : "Expand",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Expand",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#727 ASC NULLS FIRST, id#728 ASC NULLS FIRST], true\n      +- Aggregate [channel#727, id#728, spark_grouping_id#726L], [channel#727, id#728, sum(sales#507) AS sales#504, sum(returns#495) AS returns#505, sum(profit#496) AS profit#506]\n         +- Expand [[sales#507, returns#495, profit#496, channel#724, id#725, 0], [sales#507, returns#495, profit#496, channel#724, null, 1], [sales#507, returns#495, profit#496, null, null, 3]], [sales#507, returns#495, profit#496, channel#727, id#728, spark_grouping_id#726L]\n            +- Union false, false\n               :- Project [sales#507, coalesce(returns#509, 0.00) AS returns#495, (profit#508 - coalesce(profit_loss#510, 0.00)) AS profit#496, store channel AS channel#724, s_store_sk#77 AS id#725]\n               :  +- Join LeftOuter, (s_store_sk#77 = s_store_sk#547)\n               :     :- LogicalQueryStage Aggregate [s_store_sk#77], [s_store_sk#77, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#40)),17,2) AS sales#507, MakeDecimal(sum(UnscaledValue(ss_net_profit#47)),17,2) AS profit#508], HashAggregate(keys=[s_store_sk#77], functions=[sum(UnscaledValue(ss_ext_sales_price#40)), sum(UnscaledValue(ss_net_profit#47))])\n               :     +- LogicalQueryStage Aggregate [s_store_sk#547], [s_store_sk#547, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#509, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#510], HashAggregate(keys=[s_store_sk#547], functions=[sum(UnscaledValue(sr_return_amt#116)), sum(UnscaledValue(sr_net_loss#124))])\n               :- Project [sales#511, returns#513, (profit#512 - profit_loss#514) AS profit#499, catalog channel AS channel#734, cs_call_center_sk#136 AS id#735]\n               :  +- Join Cross\n               :     :- LogicalQueryStage Aggregate [cs_call_center_sk#136], [cs_call_center_sk#136, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#148)),17,2) AS sales#511, MakeDecimal(sum(UnscaledValue(cs_net_profit#158)),17,2) AS profit#512], HashAggregate(keys=[cs_call_center_sk#136], functions=[sum(UnscaledValue(cs_ext_sales_price#148)), sum(UnscaledValue(cs_net_profit#158))])\n               :     +- LogicalQueryStage Aggregate [cr_call_center_sk#170], [MakeDecimal(sum(UnscaledValue(cr_return_amount#177)),17,2) AS returns#513, MakeDecimal(sum(UnscaledValue(cr_net_loss#185)),17,2) AS profit_loss#514], HashAggregate(keys=[cr_call_center_sk#170], functions=[sum(UnscaledValue(cr_return_amount#177)), sum(UnscaledValue(cr_net_loss#185))])\n               +- Project [sales#515, coalesce(returns#517, 0.00) AS returns#502, (profit#516 - coalesce(profit_loss#518, 0.00)) AS profit#503, web channel AS channel#736, wp_web_page_sk#221 AS id#737]\n                  +- Join LeftOuter, (wp_web_page_sk#221 = wp_web_page_sk#688)\n                     :- LogicalQueryStage Aggregate [wp_web_page_sk#221], [wp_web_page_sk#221, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#209)),17,2) AS sales#515, MakeDecimal(sum(UnscaledValue(ws_net_profit#219)),17,2) AS profit#516], HashAggregate(keys=[wp_web_page_sk#221], functions=[sum(UnscaledValue(ws_ext_sales_price#209)), sum(UnscaledValue(ws_net_profit#219))])\n                     +- LogicalQueryStage LogicalQueryStage Aggregate [wp_web_page_sk#688], [wp_web_page_sk#688, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#517, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#518], HashAggregate(keys=[wp_web_page_sk#688], functions=[sum(UnscaledValue(wr_return_amt#249)), sum(UnscaledValue(wr_net_loss#257))]), BroadcastQueryStage 23\n"
      },
      "IM" : {
        "inputSizeInBytes" : 127431120943168,
        "inputRowCount" : 21963
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 10,
        "FinishedTasksNum" : 23,
        "FinishedTasksTotalTimeInMs" : 43936.0,
        "FinishedTasksDistributionInMs" : [ 181.0, 383.0, 2292.0, 3315.0, 3970.0 ]
      },
      "StartTimeInMs" : 1702227379700,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 11931,
        "IOBytes" : {
          "Total" : 44541902,
          "Details" : {
            "IR" : 42543227,
            "IW" : 0,
            "SR" : 1403310,
            "SW" : 595365
          }
        }
      }
    },
    "13" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 116994699,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8192,
            "rowCount" : 256,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cs_call_center_sk#136], [cs_call_center_sk#136, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#148)),17,2) AS sales#511, MakeDecimal(sum(UnscaledValue(cs_net_profit#158)),17,2) AS profit#512], HashAggregate(keys=[cs_call_center_sk#136], functions=[sum(UnscaledValue(cs_ext_sales_price#148)), sum(UnscaledValue(cs_net_profit#158))]) "
          },
          "8" : {
            "sign" : 1996751199,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 102912,
            "rowCount" : 3216,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [s_store_sk#77], [s_store_sk#77, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#40)),17,2) AS sales#507, MakeDecimal(sum(UnscaledValue(ss_net_profit#47)),17,2) AS profit#508], HashAggregate(keys=[s_store_sk#77], functions=[sum(UnscaledValue(ss_ext_sales_price#40)), sum(UnscaledValue(ss_net_profit#47))]) "
          },
          "4" : {
            "sign" : -592179779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Expand",
            "sizeInBytes" : 542795405286881031825,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Expand Arguments: [[sales#507, returns#495, profit#496, channel#724, id#725, 0], [sales#507, returns#495, profit#496, channel#724, null, 1], [sales#507, returns#495, profit#496, null, null, 3]], [sales#507, returns#495, profit#496, channel#727, id#728, spark_grouping_id#726L] "
          },
          "15" : {
            "sign" : -573157411,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 135698851321682342400,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (wp_web_page_sk#221 = wp_web_page_sk#688) "
          },
          "11" : {
            "sign" : -1534844644,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 180224,
            "rowCount" : 4096,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Cross "
          },
          "9" : {
            "sign" : -1351272337,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051776,
            "rowCount" : 201,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Aggregate [s_store_sk#547], [s_store_sk#547, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#509, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#510], HashAggregate(keys=[s_store_sk#547], functions=[sum(UnscaledValue(sr_return_amt#116)), sum(UnscaledValue(sr_net_loss#124))]), BroadcastQueryStage 24 "
          },
          "13" : {
            "sign" : 628219580,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 384,
            "rowCount" : 16,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Aggregate [cr_call_center_sk#170], [MakeDecimal(sum(UnscaledValue(cr_return_amount#177)),17,2) AS returns#513, MakeDecimal(sum(UnscaledValue(cr_net_loss#185)),17,2) AS profit_loss#514], HashAggregate(keys=[cr_call_center_sk#170], functions=[sum(UnscaledValue(cr_return_amount#177)), sum(UnscaledValue(cr_net_loss#185))]), BroadcastQueryStage 25 "
          },
          "16" : {
            "sign" : -1833260765,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 127431120240480,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [wp_web_page_sk#221], [wp_web_page_sk#221, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#209)),17,2) AS sales#515, MakeDecimal(sum(UnscaledValue(ws_net_profit#219)),17,2) AS profit#516], HashAggregate(keys=[wp_web_page_sk#221], functions=[sum(UnscaledValue(ws_ext_sales_price#209)), sum(UnscaledValue(ws_net_profit#219))]) "
          },
          "5" : {
            "sign" : 734519412,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 158315326542006967616,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "10" : {
            "sign" : 704340543,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 278528,
            "rowCount" : 4096,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#511, returns#513, (profit#512 - profit_loss#514) AS profit#499, catalog channel AS channel#734, cs_call_center_sk#136 AS id#735] "
          },
          "6" : {
            "sign" : 1669593474,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 43956288,
            "rowCount" : 646416,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#507, coalesce(returns#509, 0.00) AS returns#495, (profit#508 - coalesce(profit_loss#510, 0.00)) AS profit#496, store channel AS channel#724, s_store_sk#77 AS id#725] "
          },
          "1" : {
            "sign" : 237341936,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 678494256608601289781,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -650696098,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1064880,
            "rowCount" : 1020,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Aggregate [wp_web_page_sk#688], [wp_web_page_sk#688, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#517, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#518], HashAggregate(keys=[wp_web_page_sk#688], functions=[sum(UnscaledValue(wr_return_amt#249)), sum(UnscaledValue(wr_net_loss#257))]), BroadcastQueryStage 23 "
          },
          "14" : {
            "sign" : 1060352720,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 158315326541962732800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#515, coalesce(returns#517, 0.00) AS returns#502, (profit#516 - coalesce(profit_loss#518, 0.00)) AS profit#503, web channel AS channel#736, wp_web_page_sk#221 AS id#737] "
          },
          "0" : {
            "sign" : -1353204757,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -518414315,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 678494256608601289781,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#727 ASC NULLS FIRST, id#728 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -1601031917,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 31027968,
            "rowCount" : 646416,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (s_store_sk#77 = s_store_sk#547) "
          },
          "3" : {
            "sign" : 1454662410,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 678494256608601289781,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#727, id#728, spark_grouping_id#726L], [channel#727, id#728, sum(sales#507) AS sales#504, sum(returns#495) AS returns#505, sum(profit#496) AS profit#506] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Union",
          "toId" : 4,
          "toName" : "Expand",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Expand",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#727 ASC NULLS FIRST, id#728 ASC NULLS FIRST], true\n      +- Aggregate [channel#727, id#728, spark_grouping_id#726L], [channel#727, id#728, sum(sales#507) AS sales#504, sum(returns#495) AS returns#505, sum(profit#496) AS profit#506]\n         +- Expand [[sales#507, returns#495, profit#496, channel#724, id#725, 0], [sales#507, returns#495, profit#496, channel#724, null, 1], [sales#507, returns#495, profit#496, null, null, 3]], [sales#507, returns#495, profit#496, channel#727, id#728, spark_grouping_id#726L]\n            +- Union false, false\n               :- Project [sales#507, coalesce(returns#509, 0.00) AS returns#495, (profit#508 - coalesce(profit_loss#510, 0.00)) AS profit#496, store channel AS channel#724, s_store_sk#77 AS id#725]\n               :  +- Join LeftOuter, (s_store_sk#77 = s_store_sk#547)\n               :     :- LogicalQueryStage Aggregate [s_store_sk#77], [s_store_sk#77, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#40)),17,2) AS sales#507, MakeDecimal(sum(UnscaledValue(ss_net_profit#47)),17,2) AS profit#508], HashAggregate(keys=[s_store_sk#77], functions=[sum(UnscaledValue(ss_ext_sales_price#40)), sum(UnscaledValue(ss_net_profit#47))])\n               :     +- LogicalQueryStage LogicalQueryStage Aggregate [s_store_sk#547], [s_store_sk#547, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#509, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#510], HashAggregate(keys=[s_store_sk#547], functions=[sum(UnscaledValue(sr_return_amt#116)), sum(UnscaledValue(sr_net_loss#124))]), BroadcastQueryStage 24\n               :- Project [sales#511, returns#513, (profit#512 - profit_loss#514) AS profit#499, catalog channel AS channel#734, cs_call_center_sk#136 AS id#735]\n               :  +- Join Cross\n               :     :- LogicalQueryStage Aggregate [cs_call_center_sk#136], [cs_call_center_sk#136, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#148)),17,2) AS sales#511, MakeDecimal(sum(UnscaledValue(cs_net_profit#158)),17,2) AS profit#512], HashAggregate(keys=[cs_call_center_sk#136], functions=[sum(UnscaledValue(cs_ext_sales_price#148)), sum(UnscaledValue(cs_net_profit#158))])\n               :     +- LogicalQueryStage LogicalQueryStage Aggregate [cr_call_center_sk#170], [MakeDecimal(sum(UnscaledValue(cr_return_amount#177)),17,2) AS returns#513, MakeDecimal(sum(UnscaledValue(cr_net_loss#185)),17,2) AS profit_loss#514], HashAggregate(keys=[cr_call_center_sk#170], functions=[sum(UnscaledValue(cr_return_amount#177)), sum(UnscaledValue(cr_net_loss#185))]), BroadcastQueryStage 25\n               +- Project [sales#515, coalesce(returns#517, 0.00) AS returns#502, (profit#516 - coalesce(profit_loss#518, 0.00)) AS profit#503, web channel AS channel#736, wp_web_page_sk#221 AS id#737]\n                  +- Join LeftOuter, (wp_web_page_sk#221 = wp_web_page_sk#688)\n                     :- LogicalQueryStage Aggregate [wp_web_page_sk#221], [wp_web_page_sk#221, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#209)),17,2) AS sales#515, MakeDecimal(sum(UnscaledValue(ws_net_profit#219)),17,2) AS profit#516], HashAggregate(keys=[wp_web_page_sk#221], functions=[sum(UnscaledValue(ws_ext_sales_price#209)), sum(UnscaledValue(ws_net_profit#219))])\n                     +- LogicalQueryStage LogicalQueryStage Aggregate [wp_web_page_sk#688], [wp_web_page_sk#688, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#517, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#518], HashAggregate(keys=[wp_web_page_sk#688], functions=[sum(UnscaledValue(wr_return_amt#249)), sum(UnscaledValue(wr_net_loss#257))]), BroadcastQueryStage 23\n"
      },
      "IM" : {
        "inputSizeInBytes" : 127431122468624,
        "inputRowCount" : 4709
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 15,
        "FinishedTasksTotalTimeInMs" : 54078.0,
        "FinishedTasksDistributionInMs" : [ 181.0, 341.0, 511.0, 8187.0, 8844.0 ]
      },
      "StartTimeInMs" : 1702227389239,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 2392,
        "IOBytes" : {
          "Total" : 16838093,
          "Details" : {
            "IR" : 15496723,
            "IW" : 0,
            "SR" : 763874,
            "SW" : 577496
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 116994699,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 896,
            "rowCount" : 32,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cs_call_center_sk#136], [cs_call_center_sk#136, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#148)),17,2) AS sales#511, MakeDecimal(sum(UnscaledValue(cs_net_profit#158)),17,2) AS profit#512], HashAggregate(keys=[cs_call_center_sk#136], functions=[sum(UnscaledValue(cs_ext_sales_price#148)), sum(UnscaledValue(cs_net_profit#158))]) "
          },
          "8" : {
            "sign" : 1996751199,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 91656257144928,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [s_store_sk#77], [s_store_sk#77, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#40)),17,2) AS sales#507, MakeDecimal(sum(UnscaledValue(ss_net_profit#47)),17,2) AS profit#508], HashAggregate(keys=[s_store_sk#77], functions=[sum(UnscaledValue(ss_ext_sales_price#40)), sum(UnscaledValue(ss_net_profit#47))]) "
          },
          "4" : {
            "sign" : 1339410365,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Expand",
            "sizeInBytes" : 9357812607291578961054206097,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Expand Arguments: [[sales#507, returns#495, profit#496, channel#724, id#725, 0], [sales#507, returns#495, profit#496, channel#724, null, 1], [sales#507, returns#495, profit#496, null, null, 3]], [sales#507, returns#495, profit#496, channel#727, id#728, spark_grouping_id#726L] "
          },
          "15" : {
            "sign" : -1293409156,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1481609698513763021002598400,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (wp_web_page_sk#221 = wp_web_page_sk#688) "
          },
          "11" : {
            "sign" : 341172157,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 45056,
            "rowCount" : 1024,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Cross "
          },
          "9" : {
            "sign" : -524100177,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 9359355051480,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [s_store_sk#547], [s_store_sk#547, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#509, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#510], HashAggregate(keys=[s_store_sk#547], functions=[sum(UnscaledValue(sr_return_amt#116)), sum(UnscaledValue(sr_net_loss#124))]) "
          },
          "13" : {
            "sign" : -207313571,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 768,
            "rowCount" : 32,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cr_call_center_sk#170], [MakeDecimal(sum(UnscaledValue(cr_return_amount#177)),17,2) AS returns#513, MakeDecimal(sum(UnscaledValue(cr_net_loss#185)),17,2) AS profit_loss#514], HashAggregate(keys=[cr_call_center_sk#170], functions=[sum(UnscaledValue(cr_return_amount#177)), sum(UnscaledValue(cr_net_loss#185))]) "
          },
          "16" : {
            "sign" : -1833260765,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 127431120240480,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [wp_web_page_sk#221], [wp_web_page_sk#221, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#209)),17,2) AS sales#515, MakeDecimal(sum(UnscaledValue(ws_net_profit#219)),17,2) AS profit#516], HashAggregate(keys=[wp_web_page_sk#221], functions=[sum(UnscaledValue(ws_ext_sales_price#209)), sum(UnscaledValue(ws_net_profit#219))]) "
          },
          "5" : {
            "sign" : -1810871244,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 2729362010460043863640810112,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "10" : {
            "sign" : 1893133472,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 69632,
            "rowCount" : 1024,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#511, returns#513, (profit#512 - profit_loss#514) AS profit#499, catalog channel AS channel#734, cs_call_center_sk#136 AS id#735] "
          },
          "6" : {
            "sign" : -1216784766,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1000817362193987005804375680,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#507, coalesce(returns#509, 0.00) AS returns#495, (profit#508 - coalesce(profit_loss#510, 0.00)) AS profit#496, store channel AS channel#724, s_store_sk#77 AS id#725] "
          },
          "1" : {
            "sign" : 298902448,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 11697265759114473701317757621,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -1496956867,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 11626749382080,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [wp_web_page_sk#688], [wp_web_page_sk#688, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#517, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#518], HashAggregate(keys=[wp_web_page_sk#688], functions=[sum(UnscaledValue(wr_return_amt#249)), sum(UnscaledValue(wr_net_loss#257))]) "
          },
          "14" : {
            "sign" : -1577871569,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1728544648266056857836364800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#515, coalesce(returns#517, 0.00) AS returns#502, (profit#516 - coalesce(profit_loss#518, 0.00)) AS profit#503, web channel AS channel#736, wp_web_page_sk#221 AS id#737] "
          },
          "0" : {
            "sign" : -1257907093,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 704925973,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 11697265759114473701317757621,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#727 ASC NULLS FIRST, id#728 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -1088740525,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 857843453309131719260893440,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (s_store_sk#77 = s_store_sk#547) "
          },
          "3" : {
            "sign" : 162893386,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 11697265759114473701317757621,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#727, id#728, spark_grouping_id#726L], [channel#727, id#728, sum(sales#507) AS sales#504, sum(returns#495) AS returns#505, sum(profit#496) AS profit#506] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Union",
          "toId" : 4,
          "toName" : "Expand",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Expand",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#727 ASC NULLS FIRST, id#728 ASC NULLS FIRST], true\n      +- Aggregate [channel#727, id#728, spark_grouping_id#726L], [channel#727, id#728, sum(sales#507) AS sales#504, sum(returns#495) AS returns#505, sum(profit#496) AS profit#506]\n         +- Expand [[sales#507, returns#495, profit#496, channel#724, id#725, 0], [sales#507, returns#495, profit#496, channel#724, null, 1], [sales#507, returns#495, profit#496, null, null, 3]], [sales#507, returns#495, profit#496, channel#727, id#728, spark_grouping_id#726L]\n            +- Union false, false\n               :- Project [sales#507, coalesce(returns#509, 0.00) AS returns#495, (profit#508 - coalesce(profit_loss#510, 0.00)) AS profit#496, store channel AS channel#724, s_store_sk#77 AS id#725]\n               :  +- Join LeftOuter, (s_store_sk#77 = s_store_sk#547)\n               :     :- LogicalQueryStage Aggregate [s_store_sk#77], [s_store_sk#77, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#40)),17,2) AS sales#507, MakeDecimal(sum(UnscaledValue(ss_net_profit#47)),17,2) AS profit#508], HashAggregate(keys=[s_store_sk#77], functions=[sum(UnscaledValue(ss_ext_sales_price#40)), sum(UnscaledValue(ss_net_profit#47))])\n               :     +- LogicalQueryStage Aggregate [s_store_sk#547], [s_store_sk#547, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#509, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#510], HashAggregate(keys=[s_store_sk#547], functions=[sum(UnscaledValue(sr_return_amt#116)), sum(UnscaledValue(sr_net_loss#124))])\n               :- Project [sales#511, returns#513, (profit#512 - profit_loss#514) AS profit#499, catalog channel AS channel#734, cs_call_center_sk#136 AS id#735]\n               :  +- Join Cross\n               :     :- LogicalQueryStage Aggregate [cs_call_center_sk#136], [cs_call_center_sk#136, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#148)),17,2) AS sales#511, MakeDecimal(sum(UnscaledValue(cs_net_profit#158)),17,2) AS profit#512], HashAggregate(keys=[cs_call_center_sk#136], functions=[sum(UnscaledValue(cs_ext_sales_price#148)), sum(UnscaledValue(cs_net_profit#158))])\n               :     +- LogicalQueryStage Aggregate [cr_call_center_sk#170], [MakeDecimal(sum(UnscaledValue(cr_return_amount#177)),17,2) AS returns#513, MakeDecimal(sum(UnscaledValue(cr_net_loss#185)),17,2) AS profit_loss#514], HashAggregate(keys=[cr_call_center_sk#170], functions=[sum(UnscaledValue(cr_return_amount#177)), sum(UnscaledValue(cr_net_loss#185))])\n               +- Project [sales#515, coalesce(returns#517, 0.00) AS returns#502, (profit#516 - coalesce(profit_loss#518, 0.00)) AS profit#503, web channel AS channel#736, wp_web_page_sk#221 AS id#737]\n                  +- Join LeftOuter, (wp_web_page_sk#221 = wp_web_page_sk#688)\n                     :- LogicalQueryStage Aggregate [wp_web_page_sk#221], [wp_web_page_sk#221, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#209)),17,2) AS sales#515, MakeDecimal(sum(UnscaledValue(ws_net_profit#219)),17,2) AS profit#516], HashAggregate(keys=[wp_web_page_sk#221], functions=[sum(UnscaledValue(ws_ext_sales_price#209)), sum(UnscaledValue(ws_net_profit#219))])\n                     +- LogicalQueryStage Aggregate [wp_web_page_sk#688], [wp_web_page_sk#688, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#517, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#518], HashAggregate(keys=[wp_web_page_sk#688], functions=[sum(UnscaledValue(wr_return_amt#249)), sum(UnscaledValue(wr_net_loss#257))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 240073481820632,
        "inputRowCount" : 64
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227375947,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 15684,
        "IOBytes" : {
          "Total" : 101481985,
          "Details" : {
            "IR" : 98675365,
            "IW" : 0,
            "SR" : 1403310,
            "SW" : 1403310
          }
        }
      }
    },
    "10" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 116994699,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 896,
            "rowCount" : 32,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cs_call_center_sk#136], [cs_call_center_sk#136, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#148)),17,2) AS sales#511, MakeDecimal(sum(UnscaledValue(cs_net_profit#158)),17,2) AS profit#512], HashAggregate(keys=[cs_call_center_sk#136], functions=[sum(UnscaledValue(cs_ext_sales_price#148)), sum(UnscaledValue(cs_net_profit#158))]) "
          },
          "8" : {
            "sign" : 1996751199,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 102912,
            "rowCount" : 3216,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [s_store_sk#77], [s_store_sk#77, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#40)),17,2) AS sales#507, MakeDecimal(sum(UnscaledValue(ss_net_profit#47)),17,2) AS profit#508], HashAggregate(keys=[s_store_sk#77], functions=[sum(UnscaledValue(ss_ext_sales_price#40)), sum(UnscaledValue(ss_net_profit#47))]) "
          },
          "4" : {
            "sign" : 1758866462,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Expand",
            "sizeInBytes" : 542795405289142595874,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Expand Arguments: [[sales#507, returns#495, profit#496, channel#724, id#725, 0], [sales#507, returns#495, profit#496, channel#724, null, 1], [sales#507, returns#495, profit#496, null, null, 3]], [sales#507, returns#495, profit#496, channel#727, id#728, spark_grouping_id#726L] "
          },
          "15" : {
            "sign" : -573157411,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 135698851321682342400,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (wp_web_page_sk#221 = wp_web_page_sk#688) "
          },
          "11" : {
            "sign" : 341172157,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 360448,
            "rowCount" : 8192,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Cross "
          },
          "9" : {
            "sign" : -1351272337,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 102912,
            "rowCount" : 3216,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Aggregate [s_store_sk#547], [s_store_sk#547, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#509, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#510], HashAggregate(keys=[s_store_sk#547], functions=[sum(UnscaledValue(sr_return_amt#116)), sum(UnscaledValue(sr_net_loss#124))]), BroadcastQueryStage 24 "
          },
          "13" : {
            "sign" : -207313571,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8192,
            "rowCount" : 256,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cr_call_center_sk#170], [MakeDecimal(sum(UnscaledValue(cr_return_amount#177)),17,2) AS returns#513, MakeDecimal(sum(UnscaledValue(cr_net_loss#185)),17,2) AS profit_loss#514], HashAggregate(keys=[cr_call_center_sk#170], functions=[sum(UnscaledValue(cr_return_amount#177)), sum(UnscaledValue(cr_net_loss#185))]) "
          },
          "16" : {
            "sign" : -1833260765,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 127431120240480,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [wp_web_page_sk#221], [wp_web_page_sk#221, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#209)),17,2) AS sales#515, MakeDecimal(sum(UnscaledValue(ws_net_profit#219)),17,2) AS profit#516], HashAggregate(keys=[wp_web_page_sk#221], functions=[sum(UnscaledValue(ws_ext_sales_price#209)), sum(UnscaledValue(ws_net_profit#219))]) "
          },
          "5" : {
            "sign" : 1598161557,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 158315326542666590464,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "10" : {
            "sign" : 1893133472,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 557056,
            "rowCount" : 8192,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#511, returns#513, (profit#512 - profit_loss#514) AS profit#499, catalog channel AS channel#734, cs_call_center_sk#136 AS id#735] "
          },
          "6" : {
            "sign" : 1669593474,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 703300608,
            "rowCount" : 10342656,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#507, coalesce(returns#509, 0.00) AS returns#495, (profit#508 - coalesce(profit_loss#510, 0.00)) AS profit#496, store channel AS channel#724, s_store_sk#77 AS id#725] "
          },
          "1" : {
            "sign" : -1970437103,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 678494256611428244842,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -650696098,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1064880,
            "rowCount" : 1020,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Aggregate [wp_web_page_sk#688], [wp_web_page_sk#688, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#517, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#518], HashAggregate(keys=[wp_web_page_sk#688], functions=[sum(UnscaledValue(wr_return_amt#249)), sum(UnscaledValue(wr_net_loss#257))]), BroadcastQueryStage 23 "
          },
          "14" : {
            "sign" : 1060352720,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 158315326541962732800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#515, coalesce(returns#517, 0.00) AS returns#502, (profit#516 - coalesce(profit_loss#518, 0.00)) AS profit#503, web channel AS channel#736, wp_web_page_sk#221 AS id#737] "
          },
          "0" : {
            "sign" : 955108812,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1772972406,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 678494256611428244842,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#727 ASC NULLS FIRST, id#728 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -1601031917,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 496447488,
            "rowCount" : 10342656,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (s_store_sk#77 = s_store_sk#547) "
          },
          "3" : {
            "sign" : -951755349,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 678494256611428244842,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#727, id#728, spark_grouping_id#726L], [channel#727, id#728, sum(sales#507) AS sales#504, sum(returns#495) AS returns#505, sum(profit#496) AS profit#506] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Union",
          "toId" : 4,
          "toName" : "Expand",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Expand",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#727 ASC NULLS FIRST, id#728 ASC NULLS FIRST], true\n      +- Aggregate [channel#727, id#728, spark_grouping_id#726L], [channel#727, id#728, sum(sales#507) AS sales#504, sum(returns#495) AS returns#505, sum(profit#496) AS profit#506]\n         +- Expand [[sales#507, returns#495, profit#496, channel#724, id#725, 0], [sales#507, returns#495, profit#496, channel#724, null, 1], [sales#507, returns#495, profit#496, null, null, 3]], [sales#507, returns#495, profit#496, channel#727, id#728, spark_grouping_id#726L]\n            +- Union false, false\n               :- Project [sales#507, coalesce(returns#509, 0.00) AS returns#495, (profit#508 - coalesce(profit_loss#510, 0.00)) AS profit#496, store channel AS channel#724, s_store_sk#77 AS id#725]\n               :  +- Join LeftOuter, (s_store_sk#77 = s_store_sk#547)\n               :     :- LogicalQueryStage Aggregate [s_store_sk#77], [s_store_sk#77, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#40)),17,2) AS sales#507, MakeDecimal(sum(UnscaledValue(ss_net_profit#47)),17,2) AS profit#508], HashAggregate(keys=[s_store_sk#77], functions=[sum(UnscaledValue(ss_ext_sales_price#40)), sum(UnscaledValue(ss_net_profit#47))])\n               :     +- LogicalQueryStage LogicalQueryStage Aggregate [s_store_sk#547], [s_store_sk#547, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#509, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#510], HashAggregate(keys=[s_store_sk#547], functions=[sum(UnscaledValue(sr_return_amt#116)), sum(UnscaledValue(sr_net_loss#124))]), BroadcastQueryStage 24\n               :- Project [sales#511, returns#513, (profit#512 - profit_loss#514) AS profit#499, catalog channel AS channel#734, cs_call_center_sk#136 AS id#735]\n               :  +- Join Cross\n               :     :- LogicalQueryStage Aggregate [cs_call_center_sk#136], [cs_call_center_sk#136, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#148)),17,2) AS sales#511, MakeDecimal(sum(UnscaledValue(cs_net_profit#158)),17,2) AS profit#512], HashAggregate(keys=[cs_call_center_sk#136], functions=[sum(UnscaledValue(cs_ext_sales_price#148)), sum(UnscaledValue(cs_net_profit#158))])\n               :     +- LogicalQueryStage Aggregate [cr_call_center_sk#170], [MakeDecimal(sum(UnscaledValue(cr_return_amount#177)),17,2) AS returns#513, MakeDecimal(sum(UnscaledValue(cr_net_loss#185)),17,2) AS profit_loss#514], HashAggregate(keys=[cr_call_center_sk#170], functions=[sum(UnscaledValue(cr_return_amount#177)), sum(UnscaledValue(cr_net_loss#185))])\n               +- Project [sales#515, coalesce(returns#517, 0.00) AS returns#502, (profit#516 - coalesce(profit_loss#518, 0.00)) AS profit#503, web channel AS channel#736, wp_web_page_sk#221 AS id#737]\n                  +- Join LeftOuter, (wp_web_page_sk#221 = wp_web_page_sk#688)\n                     :- LogicalQueryStage Aggregate [wp_web_page_sk#221], [wp_web_page_sk#221, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#209)),17,2) AS sales#515, MakeDecimal(sum(UnscaledValue(ws_net_profit#219)),17,2) AS profit#516], HashAggregate(keys=[wp_web_page_sk#221], functions=[sum(UnscaledValue(ws_ext_sales_price#209)), sum(UnscaledValue(ws_net_profit#219))])\n                     +- LogicalQueryStage LogicalQueryStage Aggregate [wp_web_page_sk#688], [wp_web_page_sk#688, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#517, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#518], HashAggregate(keys=[wp_web_page_sk#688], functions=[sum(UnscaledValue(wr_return_amt#249)), sum(UnscaledValue(wr_net_loss#257))]), BroadcastQueryStage 23\n"
      },
      "IM" : {
        "inputSizeInBytes" : 127431121520272,
        "inputRowCount" : 7740
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 10,
        "FinishedTasksNum" : 23,
        "FinishedTasksTotalTimeInMs" : 43936.0,
        "FinishedTasksDistributionInMs" : [ 181.0, 383.0, 2292.0, 3315.0, 3970.0 ]
      },
      "StartTimeInMs" : 1702227379923,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 11708,
        "IOBytes" : {
          "Total" : 44084671,
          "Details" : {
            "IR" : 42543227,
            "IW" : 0,
            "SR" : 946079,
            "SW" : 595365
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 116994699,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 896,
            "rowCount" : 32,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cs_call_center_sk#136], [cs_call_center_sk#136, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#148)),17,2) AS sales#511, MakeDecimal(sum(UnscaledValue(cs_net_profit#158)),17,2) AS profit#512], HashAggregate(keys=[cs_call_center_sk#136], functions=[sum(UnscaledValue(cs_ext_sales_price#148)), sum(UnscaledValue(cs_net_profit#158))]) "
          },
          "8" : {
            "sign" : 1996751199,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 91656257144928,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [s_store_sk#77], [s_store_sk#77, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#40)),17,2) AS sales#507, MakeDecimal(sum(UnscaledValue(ss_net_profit#47)),17,2) AS profit#508], HashAggregate(keys=[s_store_sk#77], functions=[sum(UnscaledValue(ss_ext_sales_price#40)), sum(UnscaledValue(ss_net_profit#47))]) "
          },
          "4" : {
            "sign" : 1339410365,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Expand",
            "sizeInBytes" : 9357812607291578961055877265,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Expand Arguments: [[sales#507, returns#495, profit#496, channel#724, id#725, 0], [sales#507, returns#495, profit#496, channel#724, null, 1], [sales#507, returns#495, profit#496, null, null, 3]], [sales#507, returns#495, profit#496, channel#727, id#728, spark_grouping_id#726L] "
          },
          "15" : {
            "sign" : -1293409156,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1481609698513763021002598400,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (wp_web_page_sk#221 = wp_web_page_sk#688) "
          },
          "11" : {
            "sign" : 341172157,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 360448,
            "rowCount" : 8192,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Cross "
          },
          "9" : {
            "sign" : -524100177,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 9359355051480,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [s_store_sk#547], [s_store_sk#547, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#509, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#510], HashAggregate(keys=[s_store_sk#547], functions=[sum(UnscaledValue(sr_return_amt#116)), sum(UnscaledValue(sr_net_loss#124))]) "
          },
          "13" : {
            "sign" : -207313571,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8192,
            "rowCount" : 256,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cr_call_center_sk#170], [MakeDecimal(sum(UnscaledValue(cr_return_amount#177)),17,2) AS returns#513, MakeDecimal(sum(UnscaledValue(cr_net_loss#185)),17,2) AS profit_loss#514], HashAggregate(keys=[cr_call_center_sk#170], functions=[sum(UnscaledValue(cr_return_amount#177)), sum(UnscaledValue(cr_net_loss#185))]) "
          },
          "16" : {
            "sign" : -1833260765,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 127431120240480,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [wp_web_page_sk#221], [wp_web_page_sk#221, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#209)),17,2) AS sales#515, MakeDecimal(sum(UnscaledValue(ws_net_profit#219)),17,2) AS profit#516], HashAggregate(keys=[wp_web_page_sk#221], functions=[sum(UnscaledValue(ws_ext_sales_price#209)), sum(UnscaledValue(ws_net_profit#219))]) "
          },
          "5" : {
            "sign" : -1810871244,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 2729362010460043863641297536,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "10" : {
            "sign" : 1893133472,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 557056,
            "rowCount" : 8192,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#511, returns#513, (profit#512 - profit_loss#514) AS profit#499, catalog channel AS channel#734, cs_call_center_sk#136 AS id#735] "
          },
          "6" : {
            "sign" : -1216784766,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1000817362193987005804375680,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#507, coalesce(returns#509, 0.00) AS returns#495, (profit#508 - coalesce(profit_loss#510, 0.00)) AS profit#496, store channel AS channel#724, s_store_sk#77 AS id#725] "
          },
          "1" : {
            "sign" : 298902448,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 11697265759114473701319846581,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -1496956867,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 11626749382080,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [wp_web_page_sk#688], [wp_web_page_sk#688, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#517, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#518], HashAggregate(keys=[wp_web_page_sk#688], functions=[sum(UnscaledValue(wr_return_amt#249)), sum(UnscaledValue(wr_net_loss#257))]) "
          },
          "14" : {
            "sign" : -1577871569,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1728544648266056857836364800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#515, coalesce(returns#517, 0.00) AS returns#502, (profit#516 - coalesce(profit_loss#518, 0.00)) AS profit#503, web channel AS channel#736, wp_web_page_sk#221 AS id#737] "
          },
          "0" : {
            "sign" : -1257907093,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 704925973,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 11697265759114473701319846581,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#727 ASC NULLS FIRST, id#728 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -1088740525,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 857843453309131719260893440,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (s_store_sk#77 = s_store_sk#547) "
          },
          "3" : {
            "sign" : 162893386,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 11697265759114473701319846581,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#727, id#728, spark_grouping_id#726L], [channel#727, id#728, sum(sales#507) AS sales#504, sum(returns#495) AS returns#505, sum(profit#496) AS profit#506] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Union",
          "toId" : 4,
          "toName" : "Expand",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Expand",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#727 ASC NULLS FIRST, id#728 ASC NULLS FIRST], true\n      +- Aggregate [channel#727, id#728, spark_grouping_id#726L], [channel#727, id#728, sum(sales#507) AS sales#504, sum(returns#495) AS returns#505, sum(profit#496) AS profit#506]\n         +- Expand [[sales#507, returns#495, profit#496, channel#724, id#725, 0], [sales#507, returns#495, profit#496, channel#724, null, 1], [sales#507, returns#495, profit#496, null, null, 3]], [sales#507, returns#495, profit#496, channel#727, id#728, spark_grouping_id#726L]\n            +- Union false, false\n               :- Project [sales#507, coalesce(returns#509, 0.00) AS returns#495, (profit#508 - coalesce(profit_loss#510, 0.00)) AS profit#496, store channel AS channel#724, s_store_sk#77 AS id#725]\n               :  +- Join LeftOuter, (s_store_sk#77 = s_store_sk#547)\n               :     :- LogicalQueryStage Aggregate [s_store_sk#77], [s_store_sk#77, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#40)),17,2) AS sales#507, MakeDecimal(sum(UnscaledValue(ss_net_profit#47)),17,2) AS profit#508], HashAggregate(keys=[s_store_sk#77], functions=[sum(UnscaledValue(ss_ext_sales_price#40)), sum(UnscaledValue(ss_net_profit#47))])\n               :     +- LogicalQueryStage Aggregate [s_store_sk#547], [s_store_sk#547, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#509, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#510], HashAggregate(keys=[s_store_sk#547], functions=[sum(UnscaledValue(sr_return_amt#116)), sum(UnscaledValue(sr_net_loss#124))])\n               :- Project [sales#511, returns#513, (profit#512 - profit_loss#514) AS profit#499, catalog channel AS channel#734, cs_call_center_sk#136 AS id#735]\n               :  +- Join Cross\n               :     :- LogicalQueryStage Aggregate [cs_call_center_sk#136], [cs_call_center_sk#136, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#148)),17,2) AS sales#511, MakeDecimal(sum(UnscaledValue(cs_net_profit#158)),17,2) AS profit#512], HashAggregate(keys=[cs_call_center_sk#136], functions=[sum(UnscaledValue(cs_ext_sales_price#148)), sum(UnscaledValue(cs_net_profit#158))])\n               :     +- LogicalQueryStage Aggregate [cr_call_center_sk#170], [MakeDecimal(sum(UnscaledValue(cr_return_amount#177)),17,2) AS returns#513, MakeDecimal(sum(UnscaledValue(cr_net_loss#185)),17,2) AS profit_loss#514], HashAggregate(keys=[cr_call_center_sk#170], functions=[sum(UnscaledValue(cr_return_amount#177)), sum(UnscaledValue(cr_net_loss#185))])\n               +- Project [sales#515, coalesce(returns#517, 0.00) AS returns#502, (profit#516 - coalesce(profit_loss#518, 0.00)) AS profit#503, web channel AS channel#736, wp_web_page_sk#221 AS id#737]\n                  +- Join LeftOuter, (wp_web_page_sk#221 = wp_web_page_sk#688)\n                     :- LogicalQueryStage Aggregate [wp_web_page_sk#221], [wp_web_page_sk#221, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#209)),17,2) AS sales#515, MakeDecimal(sum(UnscaledValue(ws_net_profit#219)),17,2) AS profit#516], HashAggregate(keys=[wp_web_page_sk#221], functions=[sum(UnscaledValue(ws_ext_sales_price#209)), sum(UnscaledValue(ws_net_profit#219))])\n                     +- LogicalQueryStage Aggregate [wp_web_page_sk#688], [wp_web_page_sk#688, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#517, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#518], HashAggregate(keys=[wp_web_page_sk#688], functions=[sum(UnscaledValue(wr_return_amt#249)), sum(UnscaledValue(wr_net_loss#257))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 240073481828056,
        "inputRowCount" : 288
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 10,
        "FinishedTasksTotalTimeInMs" : 22837.0,
        "FinishedTasksDistributionInMs" : [ 341.0, 1578.0, 2632.0, 2859.0, 3315.0 ]
      },
      "StartTimeInMs" : 1702227377945,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 13686,
        "IOBytes" : {
          "Total" : 99967836,
          "Details" : {
            "IR" : 97179059,
            "IW" : 0,
            "SR" : 1403310,
            "SW" : 1385467
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "45" : {
            "sign" : -1092515391,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 360,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#576], BroadcastQueryStage 7 "
          },
          "34" : {
            "sign" : 976073798,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 67456,
            "rowCount" : 992,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#511, returns#513, (profit#512 - profit_loss#514) AS profit#499, catalog channel AS channel#734, cs_call_center_sk#136 AS id#735] "
          },
          "67" : {
            "sign" : -234906297,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 7380,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#634) AND ((d_date#634 >= 1998-08-04) AND (d_date#634 <= 1998-09-03))) AND isnotnull(d_date_sk#632)) "
          },
          "12" : {
            "sign" : 1356657032,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 9559461060,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#48 = d_date_sk#49) "
          },
          "66" : {
            "sign" : 452661662,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 360,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#632] "
          },
          "51" : {
            "sign" : 754753016,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 2246060232,
            "rowCount" : 14397822,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cr_returned_time_sk#160, cr_item_sk#161, cr_refunded_customer_sk#162, cr_refunded_cdemo_sk#163, cr_refunded_hdemo_sk#164, cr_refunded_addr_sk#165, cr_returning_customer_sk#166, cr_returning_cdemo_sk#167, cr_returning_hdemo_sk#168, cr_returning_addr_sk#169, cr_call_center_sk#170, cr_catalog_page_sk#171, cr_ship_mode_sk#172, cr_warehouse_sk#173, cr_reason_sk#174, cr_order_number#175L, cr_return_quantity#176, cr_return_amount#177, cr_return_tax#178, cr_return_amt_inc_tax#179, cr_fee#180, cr_return_ship_cost#181, cr_refunded_cash#182, cr_reversed_charge#183, ... 3 more fields], `spark_catalog`.`tpcds_100`.`catalog_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "8" : {
            "sign" : 1484025835,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 5656,
            "rowCount" : 202,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [s_store_sk#77], [s_store_sk#77, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#40)),17,2) AS sales#507, MakeDecimal(sum(UnscaledValue(ss_net_profit#47)),17,2) AS profit#508] "
          },
          "73" : {
            "sign" : 2007431986,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 436076928000,
            "rowCount" : 13627404000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (wr_web_page_sk#245 = wp_web_page_sk#688) "
          },
          "78" : {
            "sign" : -946634804,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 989985600,
            "rowCount" : 6874900,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [wr_returned_time_sk#235, wr_item_sk#236, wr_refunded_customer_sk#237, wr_refunded_cdemo_sk#238, wr_refunded_hdemo_sk#239, wr_refunded_addr_sk#240, wr_returning_customer_sk#241, wr_returning_cdemo_sk#242, wr_returning_hdemo_sk#243, wr_returning_addr_sk#244, wr_web_page_sk#245, wr_reason_sk#246, wr_order_number#247L, wr_return_quantity#248, wr_return_amt#249, wr_return_tax#250, wr_return_amt_inc_tax#251, wr_fee#252, wr_return_ship_cost#253, wr_refunded_cash#254, wr_reversed_charge#255, wr_account_credit#256, wr_net_loss#257, wr_returned_date_sk#258], `spark_catalog`.`tpcds_100`.`web_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "19" : {
            "sign" : 529363847,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 360,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#49], BroadcastQueryStage 0 "
          },
          "23" : {
            "sign" : 369260853,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1835372384,
            "rowCount" : 57355387,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (sr_store_sk#112 = s_store_sk#547) "
          },
          "62" : {
            "sign" : -1425629660,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2501841780,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#220 = d_date_sk#632) "
          },
          "4" : {
            "sign" : -1098383858,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Expand",
            "sizeInBytes" : 17404625356770,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Expand Arguments: [[sales#507, returns#495, profit#496, channel#724, id#725, 0], [sales#507, returns#495, profit#496, channel#724, null, 1], [sales#507, returns#495, profit#496, null, null, 3]], [sales#507, returns#495, profit#496, channel#727, id#728, spark_grouping_id#726L] "
          },
          "77" : {
            "sign" : 1384739753,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 945520416,
            "rowCount" : 6566114,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(wr_returned_date_sk#258) AND isnotnull(wr_web_page_sk#245)) AND dynamicpruning#743 [wr_returned_date_sk#258]) "
          },
          "40" : {
            "sign" : 1539958774,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(cs_sold_date_sk#159) AND dynamicpruning#740 [cs_sold_date_sk#159]) "
          },
          "15" : {
            "sign" : -1218510227,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#26, ss_item_sk#27, ss_customer_sk#28, ss_cdemo_sk#29, ss_hdemo_sk#30, ss_addr_sk#31, ss_store_sk#32, ss_promo_sk#33, ss_ticket_number#34L, ss_quantity#35, ss_wholesale_cost#36, ss_list_price#37, ss_sales_price#38, ss_ext_discount_amt#39, ss_ext_sales_price#40, ss_ext_wholesale_cost#41, ss_ext_list_price#42, ss_ext_tax#43, ss_coupon_amt#44, ss_net_paid#45, ss_net_paid_inc_tax#46, ss_net_profit#47, ss_sold_date_sk#48], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "11" : {
            "sign" : 938967649,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 7435136380,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_store_sk#32, ss_ext_sales_price#40, ss_net_profit#47] "
          },
          "9" : {
            "sign" : 829309728,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 16179885092,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_ext_sales_price#40, ss_net_profit#47, s_store_sk#77] "
          },
          "44" : {
            "sign" : 1031072038,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#576, d_date_id#577, d_date#578, d_month_seq#579, d_week_seq#580, d_quarter_seq#581, d_year#582, d_dow#583, d_moy#584, d_dom#585, d_qoy#586, d_fy_year#587, d_fy_quarter_seq#588, d_fy_week_seq#589, d_day_name#590, d_quarter_name#591, d_holiday#592, d_weekend#593, d_following_holiday#594, d_first_dom#595, d_last_dom#596, d_same_day_ly#597, d_same_day_lq#598, d_current_day#599, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "33" : {
            "sign" : 535725253,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 4824,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#547], BroadcastQueryStage 5 "
          },
          "22" : {
            "sign" : 1612702496,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1605950836,
            "rowCount" : 57355387,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_return_amt#116, sr_net_loss#124, s_store_sk#547] "
          },
          "56" : {
            "sign" : 1223062800,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 5076348981200,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#515, coalesce(returns#517, 0.00) AS returns#502, (profit#516 - coalesce(profit_loss#518, 0.00)) AS profit#503, web channel AS channel#736, wp_web_page_sk#221 AS id#737] "
          },
          "55" : {
            "sign" : 449344985,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 360,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#604], BroadcastQueryStage 9 "
          },
          "26" : {
            "sign" : 1906986805,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 858321760,
            "rowCount" : 26822555,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_store_sk#112, sr_return_amt#116, sr_net_loss#124, sr_returned_date_sk#125] "
          },
          "50" : {
            "sign" : -1761970411,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 2246060232,
            "rowCount" : 14397822,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(cr_returned_date_sk#186) AND dynamicpruning#741 [cr_returned_date_sk#186]) "
          },
          "37" : {
            "sign" : 996608995,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3878455336,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#136, cs_ext_sales_price#148, cs_net_profit#158] "
          },
          "68" : {
            "sign" : -782361710,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#632, d_date_id#633, d_date#634, d_month_seq#635, d_week_seq#636, d_quarter_seq#637, d_year#638, d_dow#639, d_moy#640, d_dom#641, d_qoy#642, d_fy_year#643, d_fy_quarter_seq#644, d_fy_week_seq#645, d_day_name#646, d_quarter_name#647, d_holiday#648, d_weekend#649, d_following_holiday#650, d_first_dom#651, d_last_dom#652, d_same_day_ly#653, d_same_day_lq#654, d_current_day#655, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "61" : {
            "sign" : 2121333357,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1945876940,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_web_page_sk#198, ws_ext_sales_price#209, ws_net_profit#219] "
          },
          "13" : {
            "sign" : 837548438,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 8405553536,
            "rowCount" : 262673548,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_store_sk#32, ss_ext_sales_price#40, ss_net_profit#47, ss_sold_date_sk#48] "
          },
          "46" : {
            "sign" : -534237344,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 768,
            "rowCount" : 32,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [cr_call_center_sk#170], [MakeDecimal(sum(UnscaledValue(cr_return_amount#177)),17,2) AS returns#513, MakeDecimal(sum(UnscaledValue(cr_net_loss#185)),17,2) AS profit_loss#514] "
          },
          "24" : {
            "sign" : 2044220995,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 754762260,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_store_sk#112, sr_return_amt#116, sr_net_loss#124] "
          },
          "83" : {
            "sign" : -1794151512,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1064896,
            "rowCount" : 2040,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [wp_web_page_sk#688], BroadcastQueryStage 16 "
          },
          "35" : {
            "sign" : -272191013,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 43648,
            "rowCount" : 992,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Cross "
          },
          "16" : {
            "sign" : 1333763490,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 360,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#49] "
          },
          "79" : {
            "sign" : 2006561059,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 360,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#660] "
          },
          "5" : {
            "sign" : 634337347,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 5076349062392,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "72" : {
            "sign" : 1172371040,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 381567312000,
            "rowCount" : 13627404000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [wr_return_amt#249, wr_net_loss#257, wp_web_page_sk#688] "
          },
          "10" : {
            "sign" : 1108045433,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 18491297248,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#32 = s_store_sk#77) "
          },
          "59" : {
            "sign" : 685678660,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3969588957600,
            "rowCount" : 141771034200,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ext_sales_price#209, ws_net_profit#219, wp_web_page_sk#221] "
          },
          "48" : {
            "sign" : 403488252,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 502928136,
            "rowCount" : 13970226,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cr_returned_date_sk#186 = d_date_sk#604) "
          },
          "21" : {
            "sign" : -1377171193,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 5656,
            "rowCount" : 202,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [s_store_sk#547], [s_store_sk#547, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#509, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#510] "
          },
          "76" : {
            "sign" : -904995115,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 210115648,
            "rowCount" : 6566114,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [wr_web_page_sk#245, wr_return_amt#249, wr_net_loss#257, wr_returned_date_sk#258] "
          },
          "54" : {
            "sign" : -92094020,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#604, d_date_id#605, d_date#606, d_month_seq#607, d_week_seq#608, d_quarter_seq#609, d_year#610, d_dow#611, d_moy#612, d_dom#613, d_qoy#614, d_fy_year#615, d_fy_quarter_seq#616, d_fy_week_seq#617, d_day_name#618, d_quarter_name#619, d_holiday#620, d_weekend#621, d_following_holiday#622, d_first_dom#623, d_last_dom#624, d_same_day_ly#625, d_same_day_lq#626, d_current_day#627, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "43" : {
            "sign" : 1314028921,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 7380,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#578) AND ((d_date#578 >= 1998-08-04) AND (d_date#578 <= 1998-09-03))) AND isnotnull(d_date_sk#576)) "
          },
          "65" : {
            "sign" : 2130051318,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#187, ws_ship_date_sk#188, ws_item_sk#189, ws_bill_customer_sk#190, ws_bill_cdemo_sk#191, ws_bill_hdemo_sk#192, ws_bill_addr_sk#193, ws_ship_customer_sk#194, ws_ship_cdemo_sk#195, ws_ship_hdemo_sk#196, ws_ship_addr_sk#197, ws_web_page_sk#198, ws_web_site_sk#199, ws_ship_mode_sk#200, ws_warehouse_sk#201, ws_promo_sk#202, ws_order_number#203L, ws_quantity#204, ws_wholesale_cost#205, ws_list_price#206, ws_sales_price#207, ws_ext_discount_amt#208, ws_ext_sales_price#209, ws_ext_wholesale_cost#210, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "71" : {
            "sign" : 1515959536,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 381567312000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [wp_web_page_sk#688], [wp_web_page_sk#688, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#517, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#518] "
          },
          "57" : {
            "sign" : -458082627,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4351156269600,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (wp_web_page_sk#221 = wp_web_page_sk#688) "
          },
          "32" : {
            "sign" : 1820794396,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 360,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#519], BroadcastQueryStage 3 "
          },
          "80" : {
            "sign" : 2029584691,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 7380,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#662) AND ((d_date#662 >= 1998-08-04) AND (d_date#662 <= 1998-09-03))) AND isnotnull(d_date_sk#660)) "
          },
          "82" : {
            "sign" : -35121771,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 360,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#660], BroadcastQueryStage 14 "
          },
          "49" : {
            "sign" : 976118808,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 460730304,
            "rowCount" : 14397822,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cr_call_center_sk#170, cr_return_amount#177, cr_net_loss#185, cr_returned_date_sk#186] "
          },
          "6" : {
            "sign" : 1778692440,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 13736,
            "rowCount" : 202,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#507, coalesce(returns#509, 0.00) AS returns#495, (profit#508 - coalesce(profit_loss#510, 0.00)) AS profit#496, store channel AS channel#724, s_store_sk#77 AS id#725] "
          },
          "36" : {
            "sign" : -1659462906,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 868,
            "rowCount" : 31,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [cs_call_center_sk#136], [cs_call_center_sk#136, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#148)),17,2) AS sales#511, MakeDecimal(sum(UnscaledValue(cs_net_profit#158)),17,2) AS profit#512] "
          },
          "1" : {
            "sign" : 1047322943,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 21755781695962,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "39" : {
            "sign" : 1104095894,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4584736544,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#136, cs_ext_sales_price#148, cs_net_profit#158, cs_sold_date_sk#159] "
          },
          "17" : {
            "sign" : -1586626797,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 7380,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#51) AND ((d_date#51 >= 1998-08-04) AND (d_date#51 <= 1998-09-03))) AND isnotnull(d_date_sk#49)) "
          },
          "25" : {
            "sign" : 1845685838,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 970408620,
            "rowCount" : 26955795,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (sr_returned_date_sk#125 = d_date_sk#519) "
          },
          "60" : {
            "sign" : 201888251,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4536673094400,
            "rowCount" : 141771034200,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_web_page_sk#198 = wp_web_page_sk#221) "
          },
          "14" : {
            "sign" : 1504499251,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39926379296,
            "rowCount" : 262673548,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_sold_date_sk#48) AND isnotnull(ss_store_sk#32)) AND dynamicpruning#738 [ss_sold_date_sk#48]) "
          },
          "47" : {
            "sign" : 1563032464,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 391166328,
            "rowCount" : 13970226,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cr_call_center_sk#170, cr_return_amount#177, cr_net_loss#185] "
          },
          "31" : {
            "sign" : 781611511,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#519, d_date_id#520, d_date#521, d_month_seq#522, d_week_seq#523, d_quarter_seq#524, d_year#525, d_dow#526, d_moy#527, d_dom#528, d_qoy#529, d_fy_year#530, d_fy_quarter_seq#531, d_fy_week_seq#532, d_day_name#533, d_quarter_name#534, d_holiday#535, d_weekend#536, d_following_holiday#537, d_first_dom#538, d_last_dom#539, d_same_day_ly#540, d_same_day_lq#541, d_current_day#542, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "69" : {
            "sign" : -1642651491,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 360,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#632], BroadcastQueryStage 11 "
          },
          "58" : {
            "sign" : -56949591,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 3969588957600,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [wp_web_page_sk#221], [wp_web_page_sk#221, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#209)),17,2) AS sales#515, MakeDecimal(sum(UnscaledValue(ws_net_profit#219)),17,2) AS profit#516] "
          },
          "64" : {
            "sign" : 1805309809,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14968867472,
            "rowCount" : 71965709,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ws_sold_date_sk#220) AND isnotnull(ws_web_page_sk#198)) AND dynamicpruning#742 [ws_sold_date_sk#220]) "
          },
          "53" : {
            "sign" : 282097947,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 7380,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#606) AND ((d_date#606 >= 1998-08-04) AND (d_date#606 <= 1998-09-03))) AND isnotnull(d_date_sk#604)) "
          },
          "42" : {
            "sign" : 1237836789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 360,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#576] "
          },
          "75" : {
            "sign" : 242241097,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 240483600,
            "rowCount" : 6680100,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (wr_returned_date_sk#258 = d_date_sk#660) "
          },
          "0" : {
            "sign" : -2121898564,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 1557086341,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 4824,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#77], BroadcastQueryStage 1 "
          },
          "27" : {
            "sign" : -2103513388,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3433287040,
            "rowCount" : 26822555,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(sr_returned_date_sk#125) AND isnotnull(sr_store_sk#112)) AND dynamicpruning#739 [sr_returned_date_sk#125]) "
          },
          "70" : {
            "sign" : -1179502681,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1064896,
            "rowCount" : 2040,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [wp_web_page_sk#221], BroadcastQueryStage 12 "
          },
          "2" : {
            "sign" : -594799578,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 21755781695962,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#727 ASC NULLS FIRST, id#728 ASC NULLS FIRST], true "
          },
          "38" : {
            "sign" : 1174371790,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4986585432,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#159 = d_date_sk#576) "
          },
          "81" : {
            "sign" : 1308865832,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#660, d_date_id#661, d_date#662, d_month_seq#663, d_week_seq#664, d_quarter_seq#665, d_year#666, d_dow#667, d_moy#668, d_dom#669, d_qoy#670, d_fy_year#671, d_fy_quarter_seq#672, d_fy_week_seq#673, d_day_name#674, d_quarter_name#675, d_holiday#676, d_weekend#677, d_following_holiday#678, d_first_dom#679, d_last_dom#680, d_same_day_ly#681, d_same_day_lq#682, d_current_day#683, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "18" : {
            "sign" : 247686043,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#49, d_date_id#50, d_date#51, d_month_seq#52, d_week_seq#53, d_quarter_seq#54, d_year#55, d_dow#56, d_moy#57, d_dom#58, d_qoy#59, d_fy_year#60, d_fy_quarter_seq#61, d_fy_week_seq#62, d_day_name#63, d_quarter_name#64, d_holiday#65, d_weekend#66, d_following_holiday#67, d_first_dom#68, d_last_dom#69, d_same_day_ly#70, d_same_day_lq#71, d_current_day#72, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "30" : {
            "sign" : -1168667407,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 7380,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#521) AND ((d_date#521 >= 1998-08-04) AND (d_date#521 <= 1998-09-03))) AND isnotnull(d_date_sk#519)) "
          },
          "7" : {
            "sign" : 503191111,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 9696,
            "rowCount" : 202,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (s_store_sk#77 = s_store_sk#547) "
          },
          "29" : {
            "sign" : -1840330346,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 360,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#519] "
          },
          "41" : {
            "sign" : 25258512,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#126, cs_ship_date_sk#127, cs_bill_customer_sk#128, cs_bill_cdemo_sk#129, cs_bill_hdemo_sk#130, cs_bill_addr_sk#131, cs_ship_customer_sk#132, cs_ship_cdemo_sk#133, cs_ship_hdemo_sk#134, cs_ship_addr_sk#135, cs_call_center_sk#136, cs_catalog_page_sk#137, cs_ship_mode_sk#138, cs_warehouse_sk#139, cs_item_sk#140, cs_promo_sk#141, cs_order_number#142L, cs_quantity#143, cs_wholesale_cost#144, cs_list_price#145, cs_sales_price#146, cs_ext_discount_amt#147, cs_ext_sales_price#148, cs_ext_wholesale_cost#149, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "63" : {
            "sign" : -1171423834,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2302902688,
            "rowCount" : 71965709,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_web_page_sk#198, ws_ext_sales_price#209, ws_net_profit#219, ws_sold_date_sk#220] "
          },
          "3" : {
            "sign" : 262675481,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 21755781695962,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#727, id#728, spark_grouping_id#726L], [channel#727, id#728, sum(sales#507) AS sales#504, sum(returns#495) AS returns#505, sum(profit#496) AS profit#506] "
          },
          "74" : {
            "sign" : -1957502834,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 187042800,
            "rowCount" : 6680100,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [wr_web_page_sk#245, wr_return_amt#249, wr_net_loss#257] "
          },
          "52" : {
            "sign" : 1680257497,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 360,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#604] "
          },
          "28" : {
            "sign" : -221723247,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3557606528,
            "rowCount" : 27793801,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#106, sr_item_sk#107, sr_customer_sk#108, sr_cdemo_sk#109, sr_hdemo_sk#110, sr_addr_sk#111, sr_store_sk#112, sr_reason_sk#113, sr_ticket_number#114L, sr_return_quantity#115, sr_return_amt#116, sr_return_tax#117, sr_return_amt_inc_tax#118, sr_fee#119, sr_return_ship_cost#120, sr_refunded_cash#121, sr_reversed_charge#122, sr_store_credit#123, sr_net_loss#124, sr_returned_date_sk#125], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 15,
          "fromName" : "LogicalRelation",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalRelation",
          "toId" : 17,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Filter",
          "toId" : 16,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 14,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Join",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Aggregate",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalRelation",
          "toId" : 27,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "LogicalRelation",
          "toId" : 30,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Filter",
          "toId" : 29,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Project",
          "toId" : 27,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 27,
          "fromName" : "Filter",
          "toId" : 26,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Project",
          "toId" : 25,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "LogicalQueryStage",
          "toId" : 25,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Join",
          "toId" : 24,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Project",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "LogicalQueryStage",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Join",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 21,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Aggregate",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 41,
          "fromName" : "LogicalRelation",
          "toId" : 40,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 44,
          "fromName" : "LogicalRelation",
          "toId" : 43,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 43,
          "fromName" : "Filter",
          "toId" : 42,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 42,
          "fromName" : "Project",
          "toId" : 40,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 40,
          "fromName" : "Filter",
          "toId" : 39,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "Project",
          "toId" : 38,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 45,
          "fromName" : "LogicalQueryStage",
          "toId" : 38,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "Join",
          "toId" : 37,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Project",
          "toId" : 36,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "Aggregate",
          "toId" : 35,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 51,
          "fromName" : "LogicalRelation",
          "toId" : 50,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 54,
          "fromName" : "LogicalRelation",
          "toId" : 53,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 53,
          "fromName" : "Filter",
          "toId" : 52,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 52,
          "fromName" : "Project",
          "toId" : 50,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 50,
          "fromName" : "Filter",
          "toId" : 49,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 49,
          "fromName" : "Project",
          "toId" : 48,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 55,
          "fromName" : "LogicalQueryStage",
          "toId" : 48,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 48,
          "fromName" : "Join",
          "toId" : 47,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 47,
          "fromName" : "Project",
          "toId" : 46,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 46,
          "fromName" : "Aggregate",
          "toId" : 35,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "Join",
          "toId" : 34,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 65,
          "fromName" : "LogicalRelation",
          "toId" : 64,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 68,
          "fromName" : "LogicalRelation",
          "toId" : 67,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 67,
          "fromName" : "Filter",
          "toId" : 66,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 66,
          "fromName" : "Project",
          "toId" : 64,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 64,
          "fromName" : "Filter",
          "toId" : 63,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 63,
          "fromName" : "Project",
          "toId" : 62,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 69,
          "fromName" : "LogicalQueryStage",
          "toId" : 62,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 62,
          "fromName" : "Join",
          "toId" : 61,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 61,
          "fromName" : "Project",
          "toId" : 60,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 70,
          "fromName" : "LogicalQueryStage",
          "toId" : 60,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 60,
          "fromName" : "Join",
          "toId" : 59,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 59,
          "fromName" : "Project",
          "toId" : 58,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 58,
          "fromName" : "Aggregate",
          "toId" : 57,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 78,
          "fromName" : "LogicalRelation",
          "toId" : 77,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 81,
          "fromName" : "LogicalRelation",
          "toId" : 80,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 80,
          "fromName" : "Filter",
          "toId" : 79,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 79,
          "fromName" : "Project",
          "toId" : 77,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 77,
          "fromName" : "Filter",
          "toId" : 76,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 76,
          "fromName" : "Project",
          "toId" : 75,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 82,
          "fromName" : "LogicalQueryStage",
          "toId" : 75,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 75,
          "fromName" : "Join",
          "toId" : 74,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 74,
          "fromName" : "Project",
          "toId" : 73,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 83,
          "fromName" : "LogicalQueryStage",
          "toId" : 73,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 73,
          "fromName" : "Join",
          "toId" : 72,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 72,
          "fromName" : "Project",
          "toId" : 71,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 71,
          "fromName" : "Aggregate",
          "toId" : 57,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 57,
          "fromName" : "Join",
          "toId" : 56,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 56,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Union",
          "toId" : 4,
          "toName" : "Expand",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Expand",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#727 ASC NULLS FIRST, id#728 ASC NULLS FIRST], true\n      +- Aggregate [channel#727, id#728, spark_grouping_id#726L], [channel#727, id#728, sum(sales#507) AS sales#504, sum(returns#495) AS returns#505, sum(profit#496) AS profit#506]\n         +- Expand [[sales#507, returns#495, profit#496, channel#724, id#725, 0], [sales#507, returns#495, profit#496, channel#724, null, 1], [sales#507, returns#495, profit#496, null, null, 3]], [sales#507, returns#495, profit#496, channel#727, id#728, spark_grouping_id#726L]\n            +- Union false, false\n               :- Project [sales#507, coalesce(returns#509, 0.00) AS returns#495, (profit#508 - coalesce(profit_loss#510, 0.00)) AS profit#496, store channel AS channel#724, s_store_sk#77 AS id#725]\n               :  +- Join LeftOuter, (s_store_sk#77 = s_store_sk#547)\n               :     :- Aggregate [s_store_sk#77], [s_store_sk#77, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#40)),17,2) AS sales#507, MakeDecimal(sum(UnscaledValue(ss_net_profit#47)),17,2) AS profit#508]\n               :     :  +- Project [ss_ext_sales_price#40, ss_net_profit#47, s_store_sk#77]\n               :     :     +- Join Inner, (ss_store_sk#32 = s_store_sk#77)\n               :     :        :- Project [ss_store_sk#32, ss_ext_sales_price#40, ss_net_profit#47]\n               :     :        :  +- Join Inner, (ss_sold_date_sk#48 = d_date_sk#49)\n               :     :        :     :- Project [ss_store_sk#32, ss_ext_sales_price#40, ss_net_profit#47, ss_sold_date_sk#48]\n               :     :        :     :  +- Filter ((isnotnull(ss_sold_date_sk#48) AND isnotnull(ss_store_sk#32)) AND dynamicpruning#738 [ss_sold_date_sk#48])\n               :     :        :     :     :  +- Project [d_date_sk#49]\n               :     :        :     :     :     +- Filter ((isnotnull(d_date#51) AND ((d_date#51 >= 1998-08-04) AND (d_date#51 <= 1998-09-03))) AND isnotnull(d_date_sk#49))\n               :     :        :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#49,d_date_id#50,d_date#51,d_month_seq#52,d_week_seq#53,d_quarter_seq#54,d_year#55,d_dow#56,d_moy#57,d_dom#58,d_qoy#59,d_fy_year#60,d_fy_quarter_seq#61,d_fy_week_seq#62,d_day_name#63,d_quarter_name#64,d_holiday#65,d_weekend#66,d_following_holiday#67,d_first_dom#68,d_last_dom#69,d_same_day_ly#70,d_same_day_lq#71,d_current_day#72,... 4 more fields] parquet\n               :     :        :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#26,ss_item_sk#27,ss_customer_sk#28,ss_cdemo_sk#29,ss_hdemo_sk#30,ss_addr_sk#31,ss_store_sk#32,ss_promo_sk#33,ss_ticket_number#34L,ss_quantity#35,ss_wholesale_cost#36,ss_list_price#37,ss_sales_price#38,ss_ext_discount_amt#39,ss_ext_sales_price#40,ss_ext_wholesale_cost#41,ss_ext_list_price#42,ss_ext_tax#43,ss_coupon_amt#44,ss_net_paid#45,ss_net_paid_inc_tax#46,ss_net_profit#47,ss_sold_date_sk#48] parquet\n               :     :        :     +- LogicalQueryStage Project [d_date_sk#49], BroadcastQueryStage 0\n               :     :        +- LogicalQueryStage Project [s_store_sk#77], BroadcastQueryStage 1\n               :     +- Aggregate [s_store_sk#547], [s_store_sk#547, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#509, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#510]\n               :        +- Project [sr_return_amt#116, sr_net_loss#124, s_store_sk#547]\n               :           +- Join Inner, (sr_store_sk#112 = s_store_sk#547)\n               :              :- Project [sr_store_sk#112, sr_return_amt#116, sr_net_loss#124]\n               :              :  +- Join Inner, (sr_returned_date_sk#125 = d_date_sk#519)\n               :              :     :- Project [sr_store_sk#112, sr_return_amt#116, sr_net_loss#124, sr_returned_date_sk#125]\n               :              :     :  +- Filter ((isnotnull(sr_returned_date_sk#125) AND isnotnull(sr_store_sk#112)) AND dynamicpruning#739 [sr_returned_date_sk#125])\n               :              :     :     :  +- Project [d_date_sk#519]\n               :              :     :     :     +- Filter ((isnotnull(d_date#521) AND ((d_date#521 >= 1998-08-04) AND (d_date#521 <= 1998-09-03))) AND isnotnull(d_date_sk#519))\n               :              :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#519,d_date_id#520,d_date#521,d_month_seq#522,d_week_seq#523,d_quarter_seq#524,d_year#525,d_dow#526,d_moy#527,d_dom#528,d_qoy#529,d_fy_year#530,d_fy_quarter_seq#531,d_fy_week_seq#532,d_day_name#533,d_quarter_name#534,d_holiday#535,d_weekend#536,d_following_holiday#537,d_first_dom#538,d_last_dom#539,d_same_day_ly#540,d_same_day_lq#541,d_current_day#542,... 4 more fields] parquet\n               :              :     :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#106,sr_item_sk#107,sr_customer_sk#108,sr_cdemo_sk#109,sr_hdemo_sk#110,sr_addr_sk#111,sr_store_sk#112,sr_reason_sk#113,sr_ticket_number#114L,sr_return_quantity#115,sr_return_amt#116,sr_return_tax#117,sr_return_amt_inc_tax#118,sr_fee#119,sr_return_ship_cost#120,sr_refunded_cash#121,sr_reversed_charge#122,sr_store_credit#123,sr_net_loss#124,sr_returned_date_sk#125] parquet\n               :              :     +- LogicalQueryStage Project [d_date_sk#519], BroadcastQueryStage 3\n               :              +- LogicalQueryStage Project [s_store_sk#547], BroadcastQueryStage 5\n               :- Project [sales#511, returns#513, (profit#512 - profit_loss#514) AS profit#499, catalog channel AS channel#734, cs_call_center_sk#136 AS id#735]\n               :  +- Join Cross\n               :     :- Aggregate [cs_call_center_sk#136], [cs_call_center_sk#136, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#148)),17,2) AS sales#511, MakeDecimal(sum(UnscaledValue(cs_net_profit#158)),17,2) AS profit#512]\n               :     :  +- Project [cs_call_center_sk#136, cs_ext_sales_price#148, cs_net_profit#158]\n               :     :     +- Join Inner, (cs_sold_date_sk#159 = d_date_sk#576)\n               :     :        :- Project [cs_call_center_sk#136, cs_ext_sales_price#148, cs_net_profit#158, cs_sold_date_sk#159]\n               :     :        :  +- Filter (isnotnull(cs_sold_date_sk#159) AND dynamicpruning#740 [cs_sold_date_sk#159])\n               :     :        :     :  +- Project [d_date_sk#576]\n               :     :        :     :     +- Filter ((isnotnull(d_date#578) AND ((d_date#578 >= 1998-08-04) AND (d_date#578 <= 1998-09-03))) AND isnotnull(d_date_sk#576))\n               :     :        :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#576,d_date_id#577,d_date#578,d_month_seq#579,d_week_seq#580,d_quarter_seq#581,d_year#582,d_dow#583,d_moy#584,d_dom#585,d_qoy#586,d_fy_year#587,d_fy_quarter_seq#588,d_fy_week_seq#589,d_day_name#590,d_quarter_name#591,d_holiday#592,d_weekend#593,d_following_holiday#594,d_first_dom#595,d_last_dom#596,d_same_day_ly#597,d_same_day_lq#598,d_current_day#599,... 4 more fields] parquet\n               :     :        :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#126,cs_ship_date_sk#127,cs_bill_customer_sk#128,cs_bill_cdemo_sk#129,cs_bill_hdemo_sk#130,cs_bill_addr_sk#131,cs_ship_customer_sk#132,cs_ship_cdemo_sk#133,cs_ship_hdemo_sk#134,cs_ship_addr_sk#135,cs_call_center_sk#136,cs_catalog_page_sk#137,cs_ship_mode_sk#138,cs_warehouse_sk#139,cs_item_sk#140,cs_promo_sk#141,cs_order_number#142L,cs_quantity#143,cs_wholesale_cost#144,cs_list_price#145,cs_sales_price#146,cs_ext_discount_amt#147,cs_ext_sales_price#148,cs_ext_wholesale_cost#149,... 10 more fields] parquet\n               :     :        +- LogicalQueryStage Project [d_date_sk#576], BroadcastQueryStage 7\n               :     +- Aggregate [cr_call_center_sk#170], [MakeDecimal(sum(UnscaledValue(cr_return_amount#177)),17,2) AS returns#513, MakeDecimal(sum(UnscaledValue(cr_net_loss#185)),17,2) AS profit_loss#514]\n               :        +- Project [cr_call_center_sk#170, cr_return_amount#177, cr_net_loss#185]\n               :           +- Join Inner, (cr_returned_date_sk#186 = d_date_sk#604)\n               :              :- Project [cr_call_center_sk#170, cr_return_amount#177, cr_net_loss#185, cr_returned_date_sk#186]\n               :              :  +- Filter (isnotnull(cr_returned_date_sk#186) AND dynamicpruning#741 [cr_returned_date_sk#186])\n               :              :     :  +- Project [d_date_sk#604]\n               :              :     :     +- Filter ((isnotnull(d_date#606) AND ((d_date#606 >= 1998-08-04) AND (d_date#606 <= 1998-09-03))) AND isnotnull(d_date_sk#604))\n               :              :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#604,d_date_id#605,d_date#606,d_month_seq#607,d_week_seq#608,d_quarter_seq#609,d_year#610,d_dow#611,d_moy#612,d_dom#613,d_qoy#614,d_fy_year#615,d_fy_quarter_seq#616,d_fy_week_seq#617,d_day_name#618,d_quarter_name#619,d_holiday#620,d_weekend#621,d_following_holiday#622,d_first_dom#623,d_last_dom#624,d_same_day_ly#625,d_same_day_lq#626,d_current_day#627,... 4 more fields] parquet\n               :              :     +- Relation spark_catalog.tpcds_100.catalog_returns[cr_returned_time_sk#160,cr_item_sk#161,cr_refunded_customer_sk#162,cr_refunded_cdemo_sk#163,cr_refunded_hdemo_sk#164,cr_refunded_addr_sk#165,cr_returning_customer_sk#166,cr_returning_cdemo_sk#167,cr_returning_hdemo_sk#168,cr_returning_addr_sk#169,cr_call_center_sk#170,cr_catalog_page_sk#171,cr_ship_mode_sk#172,cr_warehouse_sk#173,cr_reason_sk#174,cr_order_number#175L,cr_return_quantity#176,cr_return_amount#177,cr_return_tax#178,cr_return_amt_inc_tax#179,cr_fee#180,cr_return_ship_cost#181,cr_refunded_cash#182,cr_reversed_charge#183,... 3 more fields] parquet\n               :              +- LogicalQueryStage Project [d_date_sk#604], BroadcastQueryStage 9\n               +- Project [sales#515, coalesce(returns#517, 0.00) AS returns#502, (profit#516 - coalesce(profit_loss#518, 0.00)) AS profit#503, web channel AS channel#736, wp_web_page_sk#221 AS id#737]\n                  +- Join LeftOuter, (wp_web_page_sk#221 = wp_web_page_sk#688)\n                     :- Aggregate [wp_web_page_sk#221], [wp_web_page_sk#221, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#209)),17,2) AS sales#515, MakeDecimal(sum(UnscaledValue(ws_net_profit#219)),17,2) AS profit#516]\n                     :  +- Project [ws_ext_sales_price#209, ws_net_profit#219, wp_web_page_sk#221]\n                     :     +- Join Inner, (ws_web_page_sk#198 = wp_web_page_sk#221)\n                     :        :- Project [ws_web_page_sk#198, ws_ext_sales_price#209, ws_net_profit#219]\n                     :        :  +- Join Inner, (ws_sold_date_sk#220 = d_date_sk#632)\n                     :        :     :- Project [ws_web_page_sk#198, ws_ext_sales_price#209, ws_net_profit#219, ws_sold_date_sk#220]\n                     :        :     :  +- Filter ((isnotnull(ws_sold_date_sk#220) AND isnotnull(ws_web_page_sk#198)) AND dynamicpruning#742 [ws_sold_date_sk#220])\n                     :        :     :     :  +- Project [d_date_sk#632]\n                     :        :     :     :     +- Filter ((isnotnull(d_date#634) AND ((d_date#634 >= 1998-08-04) AND (d_date#634 <= 1998-09-03))) AND isnotnull(d_date_sk#632))\n                     :        :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#632,d_date_id#633,d_date#634,d_month_seq#635,d_week_seq#636,d_quarter_seq#637,d_year#638,d_dow#639,d_moy#640,d_dom#641,d_qoy#642,d_fy_year#643,d_fy_quarter_seq#644,d_fy_week_seq#645,d_day_name#646,d_quarter_name#647,d_holiday#648,d_weekend#649,d_following_holiday#650,d_first_dom#651,d_last_dom#652,d_same_day_ly#653,d_same_day_lq#654,d_current_day#655,... 4 more fields] parquet\n                     :        :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#187,ws_ship_date_sk#188,ws_item_sk#189,ws_bill_customer_sk#190,ws_bill_cdemo_sk#191,ws_bill_hdemo_sk#192,ws_bill_addr_sk#193,ws_ship_customer_sk#194,ws_ship_cdemo_sk#195,ws_ship_hdemo_sk#196,ws_ship_addr_sk#197,ws_web_page_sk#198,ws_web_site_sk#199,ws_ship_mode_sk#200,ws_warehouse_sk#201,ws_promo_sk#202,ws_order_number#203L,ws_quantity#204,ws_wholesale_cost#205,ws_list_price#206,ws_sales_price#207,ws_ext_discount_amt#208,ws_ext_sales_price#209,ws_ext_wholesale_cost#210,... 10 more fields] parquet\n                     :        :     +- LogicalQueryStage Project [d_date_sk#632], BroadcastQueryStage 11\n                     :        +- LogicalQueryStage Project [wp_web_page_sk#221], BroadcastQueryStage 12\n                     +- Aggregate [wp_web_page_sk#688], [wp_web_page_sk#688, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#517, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#518]\n                        +- Project [wr_return_amt#249, wr_net_loss#257, wp_web_page_sk#688]\n                           +- Join Inner, (wr_web_page_sk#245 = wp_web_page_sk#688)\n                              :- Project [wr_web_page_sk#245, wr_return_amt#249, wr_net_loss#257]\n                              :  +- Join Inner, (wr_returned_date_sk#258 = d_date_sk#660)\n                              :     :- Project [wr_web_page_sk#245, wr_return_amt#249, wr_net_loss#257, wr_returned_date_sk#258]\n                              :     :  +- Filter ((isnotnull(wr_returned_date_sk#258) AND isnotnull(wr_web_page_sk#245)) AND dynamicpruning#743 [wr_returned_date_sk#258])\n                              :     :     :  +- Project [d_date_sk#660]\n                              :     :     :     +- Filter ((isnotnull(d_date#662) AND ((d_date#662 >= 1998-08-04) AND (d_date#662 <= 1998-09-03))) AND isnotnull(d_date_sk#660))\n                              :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#660,d_date_id#661,d_date#662,d_month_seq#663,d_week_seq#664,d_quarter_seq#665,d_year#666,d_dow#667,d_moy#668,d_dom#669,d_qoy#670,d_fy_year#671,d_fy_quarter_seq#672,d_fy_week_seq#673,d_day_name#674,d_quarter_name#675,d_holiday#676,d_weekend#677,d_following_holiday#678,d_first_dom#679,d_last_dom#680,d_same_day_ly#681,d_same_day_lq#682,d_current_day#683,... 4 more fields] parquet\n                              :     :     +- Relation spark_catalog.tpcds_100.web_returns[wr_returned_time_sk#235,wr_item_sk#236,wr_refunded_customer_sk#237,wr_refunded_cdemo_sk#238,wr_refunded_hdemo_sk#239,wr_refunded_addr_sk#240,wr_returning_customer_sk#241,wr_returning_cdemo_sk#242,wr_returning_hdemo_sk#243,wr_returning_addr_sk#244,wr_web_page_sk#245,wr_reason_sk#246,wr_order_number#247L,wr_return_quantity#248,wr_return_amt#249,wr_return_tax#250,wr_return_amt_inc_tax#251,wr_fee#252,wr_return_ship_cost#253,wr_refunded_cash#254,wr_reversed_charge#255,wr_account_credit#256,wr_net_loss#257,wr_returned_date_sk#258] parquet\n                              :     +- LogicalQueryStage Project [d_date_sk#660], BroadcastQueryStage 14\n                              +- LogicalQueryStage Project [wp_web_page_sk#688], BroadcastQueryStage 16\n"
      },
      "IM" : {
        "inputSizeInBytes" : 93376068944,
        "inputRowCount" : 539373581
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 2,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227371031,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 20600,
        "IOBytes" : {
          "Total" : 101667764,
          "Details" : {
            "IR" : 98861144,
            "IW" : 0,
            "SR" : 1403310,
            "SW" : 1403310
          }
        }
      }
    },
    "14" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 116994699,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8192,
            "rowCount" : 256,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cs_call_center_sk#136], [cs_call_center_sk#136, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#148)),17,2) AS sales#511, MakeDecimal(sum(UnscaledValue(cs_net_profit#158)),17,2) AS profit#512], HashAggregate(keys=[cs_call_center_sk#136], functions=[sum(UnscaledValue(cs_ext_sales_price#148)), sum(UnscaledValue(cs_net_profit#158))]) "
          },
          "8" : {
            "sign" : 1996751199,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 102912,
            "rowCount" : 3216,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [s_store_sk#77], [s_store_sk#77, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#40)),17,2) AS sales#507, MakeDecimal(sum(UnscaledValue(ss_net_profit#47)),17,2) AS profit#508], HashAggregate(keys=[s_store_sk#77], functions=[sum(UnscaledValue(ss_ext_sales_price#40)), sum(UnscaledValue(ss_net_profit#47))]) "
          },
          "4" : {
            "sign" : -592179779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Expand",
            "sizeInBytes" : 4032651483,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Expand Arguments: [[sales#507, returns#495, profit#496, channel#724, id#725, 0], [sales#507, returns#495, profit#496, channel#724, null, 1], [sales#507, returns#495, profit#496, null, null, 3]], [sales#507, returns#495, profit#496, channel#727, id#728, spark_grouping_id#726L] "
          },
          "15" : {
            "sign" : -573157411,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 799027200,
            "rowCount" : 16646400,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (wp_web_page_sk#221 = wp_web_page_sk#688) "
          },
          "11" : {
            "sign" : -1534844644,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 180224,
            "rowCount" : 4096,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Cross "
          },
          "9" : {
            "sign" : -1351272337,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051776,
            "rowCount" : 201,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Aggregate [s_store_sk#547], [s_store_sk#547, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#509, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#510], HashAggregate(keys=[s_store_sk#547], functions=[sum(UnscaledValue(sr_return_amt#116)), sum(UnscaledValue(sr_net_loss#124))]), BroadcastQueryStage 24 "
          },
          "13" : {
            "sign" : 628219580,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 384,
            "rowCount" : 16,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Aggregate [cr_call_center_sk#170], [MakeDecimal(sum(UnscaledValue(cr_return_amount#177)),17,2) AS returns#513, MakeDecimal(sum(UnscaledValue(cr_net_loss#185)),17,2) AS profit_loss#514], HashAggregate(keys=[cr_call_center_sk#170], functions=[sum(UnscaledValue(cr_return_amount#177)), sum(UnscaledValue(cr_net_loss#185))]), BroadcastQueryStage 25 "
          },
          "16" : {
            "sign" : -1833260765,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 522240,
            "rowCount" : 16320,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [wp_web_page_sk#221], [wp_web_page_sk#221, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#209)),17,2) AS sales#515, MakeDecimal(sum(UnscaledValue(ws_net_profit#219)),17,2) AS profit#516], HashAggregate(keys=[wp_web_page_sk#221], functions=[sum(UnscaledValue(ws_ext_sales_price#209)), sum(UnscaledValue(ws_net_profit#219))]) "
          },
          "5" : {
            "sign" : 734519412,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 1176190016,
            "rowCount" : 17296912,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "10" : {
            "sign" : 704340543,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 278528,
            "rowCount" : 4096,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#511, returns#513, (profit#512 - profit_loss#514) AS profit#499, catalog channel AS channel#734, cs_call_center_sk#136 AS id#735] "
          },
          "6" : {
            "sign" : 1669593474,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 43956288,
            "rowCount" : 646416,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#507, coalesce(returns#509, 0.00) AS returns#495, (profit#508 - coalesce(profit_loss#510, 0.00)) AS profit#496, store channel AS channel#724, s_store_sk#77 AS id#725] "
          },
          "1" : {
            "sign" : 237341936,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 5040814353,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -650696098,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1064880,
            "rowCount" : 1020,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Aggregate [wp_web_page_sk#688], [wp_web_page_sk#688, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#517, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#518], HashAggregate(keys=[wp_web_page_sk#688], functions=[sum(UnscaledValue(wr_return_amt#249)), sum(UnscaledValue(wr_net_loss#257))]), BroadcastQueryStage 23 "
          },
          "14" : {
            "sign" : 1060352720,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1131955200,
            "rowCount" : 16646400,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#515, coalesce(returns#517, 0.00) AS returns#502, (profit#516 - coalesce(profit_loss#518, 0.00)) AS profit#503, web channel AS channel#736, wp_web_page_sk#221 AS id#737] "
          },
          "0" : {
            "sign" : -1353204757,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -518414315,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 5040814353,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#727 ASC NULLS FIRST, id#728 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -1601031917,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 31027968,
            "rowCount" : 646416,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (s_store_sk#77 = s_store_sk#547) "
          },
          "3" : {
            "sign" : 1454662410,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 5040814353,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#727, id#728, spark_grouping_id#726L], [channel#727, id#728, sum(sales#507) AS sales#504, sum(returns#495) AS returns#505, sum(profit#496) AS profit#506] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Union",
          "toId" : 4,
          "toName" : "Expand",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Expand",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#727 ASC NULLS FIRST, id#728 ASC NULLS FIRST], true\n      +- Aggregate [channel#727, id#728, spark_grouping_id#726L], [channel#727, id#728, sum(sales#507) AS sales#504, sum(returns#495) AS returns#505, sum(profit#496) AS profit#506]\n         +- Expand [[sales#507, returns#495, profit#496, channel#724, id#725, 0], [sales#507, returns#495, profit#496, channel#724, null, 1], [sales#507, returns#495, profit#496, null, null, 3]], [sales#507, returns#495, profit#496, channel#727, id#728, spark_grouping_id#726L]\n            +- Union false, false\n               :- Project [sales#507, coalesce(returns#509, 0.00) AS returns#495, (profit#508 - coalesce(profit_loss#510, 0.00)) AS profit#496, store channel AS channel#724, s_store_sk#77 AS id#725]\n               :  +- Join LeftOuter, (s_store_sk#77 = s_store_sk#547)\n               :     :- LogicalQueryStage Aggregate [s_store_sk#77], [s_store_sk#77, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#40)),17,2) AS sales#507, MakeDecimal(sum(UnscaledValue(ss_net_profit#47)),17,2) AS profit#508], HashAggregate(keys=[s_store_sk#77], functions=[sum(UnscaledValue(ss_ext_sales_price#40)), sum(UnscaledValue(ss_net_profit#47))])\n               :     +- LogicalQueryStage LogicalQueryStage Aggregate [s_store_sk#547], [s_store_sk#547, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#509, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#510], HashAggregate(keys=[s_store_sk#547], functions=[sum(UnscaledValue(sr_return_amt#116)), sum(UnscaledValue(sr_net_loss#124))]), BroadcastQueryStage 24\n               :- Project [sales#511, returns#513, (profit#512 - profit_loss#514) AS profit#499, catalog channel AS channel#734, cs_call_center_sk#136 AS id#735]\n               :  +- Join Cross\n               :     :- LogicalQueryStage Aggregate [cs_call_center_sk#136], [cs_call_center_sk#136, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#148)),17,2) AS sales#511, MakeDecimal(sum(UnscaledValue(cs_net_profit#158)),17,2) AS profit#512], HashAggregate(keys=[cs_call_center_sk#136], functions=[sum(UnscaledValue(cs_ext_sales_price#148)), sum(UnscaledValue(cs_net_profit#158))])\n               :     +- LogicalQueryStage LogicalQueryStage Aggregate [cr_call_center_sk#170], [MakeDecimal(sum(UnscaledValue(cr_return_amount#177)),17,2) AS returns#513, MakeDecimal(sum(UnscaledValue(cr_net_loss#185)),17,2) AS profit_loss#514], HashAggregate(keys=[cr_call_center_sk#170], functions=[sum(UnscaledValue(cr_return_amount#177)), sum(UnscaledValue(cr_net_loss#185))]), BroadcastQueryStage 25\n               +- Project [sales#515, coalesce(returns#517, 0.00) AS returns#502, (profit#516 - coalesce(profit_loss#518, 0.00)) AS profit#503, web channel AS channel#736, wp_web_page_sk#221 AS id#737]\n                  +- Join LeftOuter, (wp_web_page_sk#221 = wp_web_page_sk#688)\n                     :- LogicalQueryStage Aggregate [wp_web_page_sk#221], [wp_web_page_sk#221, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#209)),17,2) AS sales#515, MakeDecimal(sum(UnscaledValue(ws_net_profit#219)),17,2) AS profit#516], HashAggregate(keys=[wp_web_page_sk#221], functions=[sum(UnscaledValue(ws_ext_sales_price#209)), sum(UnscaledValue(ws_net_profit#219))])\n                     +- LogicalQueryStage LogicalQueryStage Aggregate [wp_web_page_sk#688], [wp_web_page_sk#688, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#517, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#518], HashAggregate(keys=[wp_web_page_sk#688], functions=[sum(UnscaledValue(wr_return_amt#249)), sum(UnscaledValue(wr_net_loss#257))]), BroadcastQueryStage 23\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2750384,
        "inputRowCount" : 21029
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227390651,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 980,
        "IOBytes" : {
          "Total" : 852935,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 763874,
            "SW" : 89061
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "45" : {
            "sign" : -1092515391,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#576], BroadcastQueryStage 7 "
          },
          "34" : {
            "sign" : 976073798,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 69632,
            "rowCount" : 1024,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#511, returns#513, (profit#512 - profit_loss#514) AS profit#499, catalog channel AS channel#734, cs_call_center_sk#136 AS id#735] "
          },
          "67" : {
            "sign" : -234906297,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 7380,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#634) AND ((d_date#634 >= 1998-08-04) AND (d_date#634 <= 1998-09-03))) AND isnotnull(d_date_sk#632)) "
          },
          "12" : {
            "sign" : 1356657032,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 293143679568,
            "rowCount" : 8142879988,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#48 = d_date_sk#49) "
          },
          "66" : {
            "sign" : 452661662,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 360,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#632] "
          },
          "51" : {
            "sign" : 754753016,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 2246060232,
            "rowCount" : 14397822,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cr_returned_time_sk#160, cr_item_sk#161, cr_refunded_customer_sk#162, cr_refunded_cdemo_sk#163, cr_refunded_hdemo_sk#164, cr_refunded_addr_sk#165, cr_returning_customer_sk#166, cr_returning_cdemo_sk#167, cr_returning_hdemo_sk#168, cr_returning_addr_sk#169, cr_call_center_sk#170, cr_catalog_page_sk#171, cr_ship_mode_sk#172, cr_warehouse_sk#173, cr_reason_sk#174, cr_order_number#175L, cr_return_quantity#176, cr_return_amount#177, cr_return_tax#178, cr_return_amt_inc_tax#179, cr_fee#180, cr_return_ship_cost#181, cr_refunded_cash#182, cr_reversed_charge#183, ... 3 more fields], `spark_catalog`.`tpcds_100`.`catalog_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "8" : {
            "sign" : 1484025835,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 5656,
            "rowCount" : 202,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [s_store_sk#77], [s_store_sk#77, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#40)),17,2) AS sales#507, MakeDecimal(sum(UnscaledValue(ss_net_profit#47)),17,2) AS profit#508] "
          },
          "73" : {
            "sign" : 2007431986,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 13287713579520,
            "rowCount" : 415241049360,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (wr_web_page_sk#245 = wp_web_page_sk#688) "
          },
          "78" : {
            "sign" : -946634804,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 989985600,
            "rowCount" : 6874900,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [wr_returned_time_sk#235, wr_item_sk#236, wr_refunded_customer_sk#237, wr_refunded_cdemo_sk#238, wr_refunded_hdemo_sk#239, wr_refunded_addr_sk#240, wr_returning_customer_sk#241, wr_returning_cdemo_sk#242, wr_returning_hdemo_sk#243, wr_returning_addr_sk#244, wr_web_page_sk#245, wr_reason_sk#246, wr_order_number#247L, wr_return_quantity#248, wr_return_amt#249, wr_return_tax#250, wr_return_amt_inc_tax#251, wr_fee#252, wr_return_ship_cost#253, wr_refunded_cash#254, wr_reversed_charge#255, wr_account_credit#256, wr_net_loss#257, wr_returned_date_sk#258], `spark_catalog`.`tpcds_100`.`web_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "19" : {
            "sign" : 529363847,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#49], BroadcastQueryStage 0 "
          },
          "23" : {
            "sign" : 369260853,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1835372384,
            "rowCount" : 57355387,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (sr_store_sk#112 = s_store_sk#547) "
          },
          "62" : {
            "sign" : -1425629660,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 80313731244,
            "rowCount" : 2230936979,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#220 = d_date_sk#632) "
          },
          "4" : {
            "sign" : -1098383858,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Expand",
            "sizeInBytes" : 556231478776071,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Expand Arguments: [[sales#507, returns#495, profit#496, channel#724, id#725, 0], [sales#507, returns#495, profit#496, channel#724, null, 1], [sales#507, returns#495, profit#496, null, null, 3]], [sales#507, returns#495, profit#496, channel#727, id#728, spark_grouping_id#726L] "
          },
          "77" : {
            "sign" : 1384739753,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 945520416,
            "rowCount" : 6566114,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(wr_returned_date_sk#258) AND isnotnull(wr_web_page_sk#245)) AND dynamicpruning#743 [wr_returned_date_sk#258]) "
          },
          "40" : {
            "sign" : 1539958774,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(cs_sold_date_sk#159) AND dynamicpruning#740 [cs_sold_date_sk#159]) "
          },
          "15" : {
            "sign" : -1218510227,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#26, ss_item_sk#27, ss_customer_sk#28, ss_cdemo_sk#29, ss_hdemo_sk#30, ss_addr_sk#31, ss_store_sk#32, ss_promo_sk#33, ss_ticket_number#34L, ss_quantity#35, ss_wholesale_cost#36, ss_list_price#37, ss_sales_price#38, ss_ext_discount_amt#39, ss_ext_sales_price#40, ss_ext_wholesale_cost#41, ss_ext_list_price#42, ss_ext_tax#43, ss_coupon_amt#44, ss_net_paid#45, ss_net_paid_inc_tax#46, ss_net_profit#47, ss_sold_date_sk#48], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "11" : {
            "sign" : 938967649,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 228000639664,
            "rowCount" : 8142879988,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_store_sk#32, ss_ext_sales_price#40, ss_net_profit#47] "
          },
          "9" : {
            "sign" : 829309728,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 16179885092,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_ext_sales_price#40, ss_net_profit#47, s_store_sk#77] "
          },
          "44" : {
            "sign" : 1031072038,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#576, d_date_id#577, d_date#578, d_month_seq#579, d_week_seq#580, d_quarter_seq#581, d_year#582, d_dow#583, d_moy#584, d_dom#585, d_qoy#586, d_fy_year#587, d_fy_quarter_seq#588, d_fy_week_seq#589, d_day_name#590, d_quarter_name#591, d_holiday#592, d_weekend#593, d_following_holiday#594, d_first_dom#595, d_last_dom#596, d_same_day_ly#597, d_same_day_lq#598, d_current_day#599, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "33" : {
            "sign" : 535725253,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 4824,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#547], BroadcastQueryStage 5 "
          },
          "22" : {
            "sign" : 1612702496,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1605950836,
            "rowCount" : 57355387,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_return_amt#116, sr_net_loss#124, s_store_sk#547] "
          },
          "56" : {
            "sign" : 1223062800,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 162234181226320,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#515, coalesce(returns#517, 0.00) AS returns#502, (profit#516 - coalesce(profit_loss#518, 0.00)) AS profit#503, web channel AS channel#736, wp_web_page_sk#221 AS id#737] "
          },
          "55" : {
            "sign" : 449344985,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#604], BroadcastQueryStage 9 "
          },
          "26" : {
            "sign" : 1906986805,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 858321760,
            "rowCount" : 26822555,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_store_sk#112, sr_return_amt#116, sr_net_loss#124, sr_returned_date_sk#125] "
          },
          "50" : {
            "sign" : -1761970411,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 2246060232,
            "rowCount" : 14397822,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(cr_returned_date_sk#186) AND dynamicpruning#741 [cr_returned_date_sk#186]) "
          },
          "37" : {
            "sign" : 996608995,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 124360978756,
            "rowCount" : 4441463527,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#136, cs_ext_sales_price#148, cs_net_profit#158] "
          },
          "68" : {
            "sign" : -782361710,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#632, d_date_id#633, d_date#634, d_month_seq#635, d_week_seq#636, d_quarter_seq#637, d_year#638, d_dow#639, d_moy#640, d_dom#641, d_qoy#642, d_fy_year#643, d_fy_quarter_seq#644, d_fy_week_seq#645, d_day_name#646, d_quarter_name#647, d_holiday#648, d_weekend#649, d_following_holiday#650, d_first_dom#651, d_last_dom#652, d_same_day_ly#653, d_same_day_lq#654, d_current_day#655, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "61" : {
            "sign" : 2121333357,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 62466235412,
            "rowCount" : 2230936979,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_web_page_sk#198, ws_ext_sales_price#209, ws_net_profit#219] "
          },
          "13" : {
            "sign" : 837548438,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 8405553536,
            "rowCount" : 262673548,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_store_sk#32, ss_ext_sales_price#40, ss_net_profit#47, ss_sold_date_sk#48] "
          },
          "46" : {
            "sign" : -534237344,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 768,
            "rowCount" : 32,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [cr_call_center_sk#170], [MakeDecimal(sum(UnscaledValue(cr_return_amount#177)),17,2) AS returns#513, MakeDecimal(sum(UnscaledValue(cr_net_loss#185)),17,2) AS profit_loss#514] "
          },
          "24" : {
            "sign" : 2044220995,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 23281977740,
            "rowCount" : 831499205,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_store_sk#112, sr_return_amt#116, sr_net_loss#124] "
          },
          "83" : {
            "sign" : -1794151512,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1064896,
            "rowCount" : 2040,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [wp_web_page_sk#688], BroadcastQueryStage 16 "
          },
          "35" : {
            "sign" : -272191013,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 45056,
            "rowCount" : 1024,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Cross "
          },
          "16" : {
            "sign" : 1333763490,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 360,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#49] "
          },
          "79" : {
            "sign" : 2006561059,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 360,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#660] "
          },
          "5" : {
            "sign" : 634337347,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 162234181309688,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "72" : {
            "sign" : 1172371040,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11626749382080,
            "rowCount" : 415241049360,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [wr_return_amt#249, wr_net_loss#257, wp_web_page_sk#688] "
          },
          "10" : {
            "sign" : 1108045433,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 18491297248,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#32 = s_store_sk#77) "
          },
          "59" : {
            "sign" : 685678660,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 127431120240480,
            "rowCount" : 4551111437160,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ext_sales_price#209, ws_net_profit#219, wp_web_page_sk#221] "
          },
          "48" : {
            "sign" : 403488252,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 16067969352,
            "rowCount" : 446332482,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cr_returned_date_sk#186 = d_date_sk#604) "
          },
          "21" : {
            "sign" : -1377171193,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 5656,
            "rowCount" : 202,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [s_store_sk#547], [s_store_sk#547, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#509, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#510] "
          },
          "76" : {
            "sign" : -904995115,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 210115648,
            "rowCount" : 6566114,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [wr_web_page_sk#245, wr_return_amt#249, wr_net_loss#257, wr_returned_date_sk#258] "
          },
          "54" : {
            "sign" : -92094020,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#604, d_date_id#605, d_date#606, d_month_seq#607, d_week_seq#608, d_quarter_seq#609, d_year#610, d_dow#611, d_moy#612, d_dom#613, d_qoy#614, d_fy_year#615, d_fy_quarter_seq#616, d_fy_week_seq#617, d_day_name#618, d_quarter_name#619, d_holiday#620, d_weekend#621, d_following_holiday#622, d_first_dom#623, d_last_dom#624, d_same_day_ly#625, d_same_day_lq#626, d_current_day#627, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "43" : {
            "sign" : 1314028921,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 7380,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#578) AND ((d_date#578 >= 1998-08-04) AND (d_date#578 <= 1998-09-03))) AND isnotnull(d_date_sk#576)) "
          },
          "65" : {
            "sign" : 2130051318,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#187, ws_ship_date_sk#188, ws_item_sk#189, ws_bill_customer_sk#190, ws_bill_cdemo_sk#191, ws_bill_hdemo_sk#192, ws_bill_addr_sk#193, ws_ship_customer_sk#194, ws_ship_cdemo_sk#195, ws_ship_hdemo_sk#196, ws_ship_addr_sk#197, ws_web_page_sk#198, ws_web_site_sk#199, ws_ship_mode_sk#200, ws_warehouse_sk#201, ws_promo_sk#202, ws_order_number#203L, ws_quantity#204, ws_wholesale_cost#205, ws_list_price#206, ws_sales_price#207, ws_ext_discount_amt#208, ws_ext_sales_price#209, ws_ext_wholesale_cost#210, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "71" : {
            "sign" : 1515959536,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 11626749382080,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [wp_web_page_sk#688], [wp_web_page_sk#688, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#517, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#518] "
          },
          "57" : {
            "sign" : -458082627,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 139057869622560,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (wp_web_page_sk#221 = wp_web_page_sk#688) "
          },
          "32" : {
            "sign" : 1820794396,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#519], BroadcastQueryStage 3 "
          },
          "80" : {
            "sign" : 2029584691,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 7380,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#662) AND ((d_date#662 >= 1998-08-04) AND (d_date#662 <= 1998-09-03))) AND isnotnull(d_date_sk#660)) "
          },
          "82" : {
            "sign" : -35121771,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#660], BroadcastQueryStage 14 "
          },
          "49" : {
            "sign" : 976118808,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 460730304,
            "rowCount" : 14397822,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cr_call_center_sk#170, cr_return_amount#177, cr_net_loss#185, cr_returned_date_sk#186] "
          },
          "6" : {
            "sign" : 1778692440,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 13736,
            "rowCount" : 202,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#507, coalesce(returns#509, 0.00) AS returns#495, (profit#508 - coalesce(profit_loss#510, 0.00)) AS profit#496, store channel AS channel#724, s_store_sk#77 AS id#725] "
          },
          "36" : {
            "sign" : -1659462906,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 896,
            "rowCount" : 32,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [cs_call_center_sk#136], [cs_call_center_sk#136, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#148)),17,2) AS sales#511, MakeDecimal(sum(UnscaledValue(cs_net_profit#158)),17,2) AS profit#512] "
          },
          "1" : {
            "sign" : 1047322943,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 695289348470088,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "39" : {
            "sign" : 1104095894,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4584736544,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#136, cs_ext_sales_price#148, cs_net_profit#158, cs_sold_date_sk#159] "
          },
          "17" : {
            "sign" : -1586626797,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 7380,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#51) AND ((d_date#51 >= 1998-08-04) AND (d_date#51 <= 1998-09-03))) AND isnotnull(d_date_sk#49)) "
          },
          "25" : {
            "sign" : 1845685838,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 29933971380,
            "rowCount" : 831499205,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (sr_returned_date_sk#125 = d_date_sk#519) "
          },
          "60" : {
            "sign" : 201888251,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 145635565989120,
            "rowCount" : 4551111437160,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_web_page_sk#198 = wp_web_page_sk#221) "
          },
          "14" : {
            "sign" : 1504499251,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39926379296,
            "rowCount" : 262673548,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_sold_date_sk#48) AND isnotnull(ss_store_sk#32)) AND dynamicpruning#738 [ss_sold_date_sk#48]) "
          },
          "47" : {
            "sign" : 1563032464,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 12497309496,
            "rowCount" : 446332482,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cr_call_center_sk#170, cr_return_amount#177, cr_net_loss#185] "
          },
          "31" : {
            "sign" : 781611511,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#519, d_date_id#520, d_date#521, d_month_seq#522, d_week_seq#523, d_quarter_seq#524, d_year#525, d_dow#526, d_moy#527, d_dom#528, d_qoy#529, d_fy_year#530, d_fy_quarter_seq#531, d_fy_week_seq#532, d_day_name#533, d_quarter_name#534, d_holiday#535, d_weekend#536, d_following_holiday#537, d_first_dom#538, d_last_dom#539, d_same_day_ly#540, d_same_day_lq#541, d_current_day#542, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "69" : {
            "sign" : -1642651491,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#632], BroadcastQueryStage 11 "
          },
          "58" : {
            "sign" : -56949591,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 127431120240480,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [wp_web_page_sk#221], [wp_web_page_sk#221, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#209)),17,2) AS sales#515, MakeDecimal(sum(UnscaledValue(ws_net_profit#219)),17,2) AS profit#516] "
          },
          "64" : {
            "sign" : 1805309809,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14968867472,
            "rowCount" : 71965709,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ws_sold_date_sk#220) AND isnotnull(ws_web_page_sk#198)) AND dynamicpruning#742 [ws_sold_date_sk#220]) "
          },
          "53" : {
            "sign" : 282097947,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 7380,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#606) AND ((d_date#606 >= 1998-08-04) AND (d_date#606 <= 1998-09-03))) AND isnotnull(d_date_sk#604)) "
          },
          "42" : {
            "sign" : 1237836789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 360,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#576] "
          },
          "75" : {
            "sign" : 242241097,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 7327783224,
            "rowCount" : 203549534,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (wr_returned_date_sk#258 = d_date_sk#660) "
          },
          "0" : {
            "sign" : -2121898564,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 1557086341,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 4824,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#77], BroadcastQueryStage 1 "
          },
          "27" : {
            "sign" : -2103513388,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3433287040,
            "rowCount" : 26822555,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(sr_returned_date_sk#125) AND isnotnull(sr_store_sk#112)) AND dynamicpruning#739 [sr_returned_date_sk#125]) "
          },
          "70" : {
            "sign" : -1179502681,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1064896,
            "rowCount" : 2040,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [wp_web_page_sk#221], BroadcastQueryStage 12 "
          },
          "2" : {
            "sign" : -594799578,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 695289348470088,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#727 ASC NULLS FIRST, id#728 ASC NULLS FIRST], true "
          },
          "38" : {
            "sign" : 1174371790,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 159892686972,
            "rowCount" : 4441463527,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#159 = d_date_sk#576) "
          },
          "81" : {
            "sign" : 1308865832,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#660, d_date_id#661, d_date#662, d_month_seq#663, d_week_seq#664, d_quarter_seq#665, d_year#666, d_dow#667, d_moy#668, d_dom#669, d_qoy#670, d_fy_year#671, d_fy_quarter_seq#672, d_fy_week_seq#673, d_day_name#674, d_quarter_name#675, d_holiday#676, d_weekend#677, d_following_holiday#678, d_first_dom#679, d_last_dom#680, d_same_day_ly#681, d_same_day_lq#682, d_current_day#683, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "18" : {
            "sign" : 247686043,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#49, d_date_id#50, d_date#51, d_month_seq#52, d_week_seq#53, d_quarter_seq#54, d_year#55, d_dow#56, d_moy#57, d_dom#58, d_qoy#59, d_fy_year#60, d_fy_quarter_seq#61, d_fy_week_seq#62, d_day_name#63, d_quarter_name#64, d_holiday#65, d_weekend#66, d_following_holiday#67, d_first_dom#68, d_last_dom#69, d_same_day_ly#70, d_same_day_lq#71, d_current_day#72, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "30" : {
            "sign" : -1168667407,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 7380,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#521) AND ((d_date#521 >= 1998-08-04) AND (d_date#521 <= 1998-09-03))) AND isnotnull(d_date_sk#519)) "
          },
          "7" : {
            "sign" : 503191111,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 9696,
            "rowCount" : 202,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (s_store_sk#77 = s_store_sk#547) "
          },
          "29" : {
            "sign" : -1840330346,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 360,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#519] "
          },
          "41" : {
            "sign" : 25258512,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#126, cs_ship_date_sk#127, cs_bill_customer_sk#128, cs_bill_cdemo_sk#129, cs_bill_hdemo_sk#130, cs_bill_addr_sk#131, cs_ship_customer_sk#132, cs_ship_cdemo_sk#133, cs_ship_hdemo_sk#134, cs_ship_addr_sk#135, cs_call_center_sk#136, cs_catalog_page_sk#137, cs_ship_mode_sk#138, cs_warehouse_sk#139, cs_item_sk#140, cs_promo_sk#141, cs_order_number#142L, cs_quantity#143, cs_wholesale_cost#144, cs_list_price#145, cs_sales_price#146, cs_ext_discount_amt#147, cs_ext_sales_price#148, cs_ext_wholesale_cost#149, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "63" : {
            "sign" : -1171423834,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2302902688,
            "rowCount" : 71965709,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_web_page_sk#198, ws_ext_sales_price#209, ws_net_profit#219, ws_sold_date_sk#220] "
          },
          "3" : {
            "sign" : 262675481,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 695289348470088,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#727, id#728, spark_grouping_id#726L], [channel#727, id#728, sum(sales#507) AS sales#504, sum(returns#495) AS returns#505, sum(profit#496) AS profit#506] "
          },
          "74" : {
            "sign" : -1957502834,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 5699386952,
            "rowCount" : 203549534,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [wr_web_page_sk#245, wr_return_amt#249, wr_net_loss#257] "
          },
          "52" : {
            "sign" : 1680257497,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 360,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#604] "
          },
          "28" : {
            "sign" : -221723247,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3557606528,
            "rowCount" : 27793801,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#106, sr_item_sk#107, sr_customer_sk#108, sr_cdemo_sk#109, sr_hdemo_sk#110, sr_addr_sk#111, sr_store_sk#112, sr_reason_sk#113, sr_ticket_number#114L, sr_return_quantity#115, sr_return_amt#116, sr_return_tax#117, sr_return_amt_inc_tax#118, sr_fee#119, sr_return_ship_cost#120, sr_refunded_cash#121, sr_reversed_charge#122, sr_store_credit#123, sr_net_loss#124, sr_returned_date_sk#125], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 15,
          "fromName" : "LogicalRelation",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalRelation",
          "toId" : 17,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Filter",
          "toId" : 16,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 14,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Join",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Aggregate",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalRelation",
          "toId" : 27,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "LogicalRelation",
          "toId" : 30,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Filter",
          "toId" : 29,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Project",
          "toId" : 27,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 27,
          "fromName" : "Filter",
          "toId" : 26,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Project",
          "toId" : 25,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "LogicalQueryStage",
          "toId" : 25,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Join",
          "toId" : 24,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Project",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "LogicalQueryStage",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Join",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 21,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Aggregate",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 41,
          "fromName" : "LogicalRelation",
          "toId" : 40,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 44,
          "fromName" : "LogicalRelation",
          "toId" : 43,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 43,
          "fromName" : "Filter",
          "toId" : 42,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 42,
          "fromName" : "Project",
          "toId" : 40,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 40,
          "fromName" : "Filter",
          "toId" : 39,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "Project",
          "toId" : 38,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 45,
          "fromName" : "LogicalQueryStage",
          "toId" : 38,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "Join",
          "toId" : 37,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Project",
          "toId" : 36,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "Aggregate",
          "toId" : 35,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 51,
          "fromName" : "LogicalRelation",
          "toId" : 50,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 54,
          "fromName" : "LogicalRelation",
          "toId" : 53,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 53,
          "fromName" : "Filter",
          "toId" : 52,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 52,
          "fromName" : "Project",
          "toId" : 50,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 50,
          "fromName" : "Filter",
          "toId" : 49,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 49,
          "fromName" : "Project",
          "toId" : 48,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 55,
          "fromName" : "LogicalQueryStage",
          "toId" : 48,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 48,
          "fromName" : "Join",
          "toId" : 47,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 47,
          "fromName" : "Project",
          "toId" : 46,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 46,
          "fromName" : "Aggregate",
          "toId" : 35,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "Join",
          "toId" : 34,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 65,
          "fromName" : "LogicalRelation",
          "toId" : 64,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 68,
          "fromName" : "LogicalRelation",
          "toId" : 67,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 67,
          "fromName" : "Filter",
          "toId" : 66,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 66,
          "fromName" : "Project",
          "toId" : 64,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 64,
          "fromName" : "Filter",
          "toId" : 63,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 63,
          "fromName" : "Project",
          "toId" : 62,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 69,
          "fromName" : "LogicalQueryStage",
          "toId" : 62,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 62,
          "fromName" : "Join",
          "toId" : 61,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 61,
          "fromName" : "Project",
          "toId" : 60,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 70,
          "fromName" : "LogicalQueryStage",
          "toId" : 60,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 60,
          "fromName" : "Join",
          "toId" : 59,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 59,
          "fromName" : "Project",
          "toId" : 58,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 58,
          "fromName" : "Aggregate",
          "toId" : 57,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 78,
          "fromName" : "LogicalRelation",
          "toId" : 77,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 81,
          "fromName" : "LogicalRelation",
          "toId" : 80,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 80,
          "fromName" : "Filter",
          "toId" : 79,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 79,
          "fromName" : "Project",
          "toId" : 77,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 77,
          "fromName" : "Filter",
          "toId" : 76,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 76,
          "fromName" : "Project",
          "toId" : 75,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 82,
          "fromName" : "LogicalQueryStage",
          "toId" : 75,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 75,
          "fromName" : "Join",
          "toId" : 74,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 74,
          "fromName" : "Project",
          "toId" : 73,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 83,
          "fromName" : "LogicalQueryStage",
          "toId" : 73,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 73,
          "fromName" : "Join",
          "toId" : 72,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 72,
          "fromName" : "Project",
          "toId" : 71,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 71,
          "fromName" : "Aggregate",
          "toId" : 57,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 57,
          "fromName" : "Join",
          "toId" : 56,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 56,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Union",
          "toId" : 4,
          "toName" : "Expand",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Expand",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#727 ASC NULLS FIRST, id#728 ASC NULLS FIRST], true\n      +- Aggregate [channel#727, id#728, spark_grouping_id#726L], [channel#727, id#728, sum(sales#507) AS sales#504, sum(returns#495) AS returns#505, sum(profit#496) AS profit#506]\n         +- Expand [[sales#507, returns#495, profit#496, channel#724, id#725, 0], [sales#507, returns#495, profit#496, channel#724, null, 1], [sales#507, returns#495, profit#496, null, null, 3]], [sales#507, returns#495, profit#496, channel#727, id#728, spark_grouping_id#726L]\n            +- Union false, false\n               :- Project [sales#507, coalesce(returns#509, 0.00) AS returns#495, (profit#508 - coalesce(profit_loss#510, 0.00)) AS profit#496, store channel AS channel#724, s_store_sk#77 AS id#725]\n               :  +- Join LeftOuter, (s_store_sk#77 = s_store_sk#547)\n               :     :- Aggregate [s_store_sk#77], [s_store_sk#77, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#40)),17,2) AS sales#507, MakeDecimal(sum(UnscaledValue(ss_net_profit#47)),17,2) AS profit#508]\n               :     :  +- Project [ss_ext_sales_price#40, ss_net_profit#47, s_store_sk#77]\n               :     :     +- Join Inner, (ss_store_sk#32 = s_store_sk#77)\n               :     :        :- Project [ss_store_sk#32, ss_ext_sales_price#40, ss_net_profit#47]\n               :     :        :  +- Join Inner, (ss_sold_date_sk#48 = d_date_sk#49)\n               :     :        :     :- Project [ss_store_sk#32, ss_ext_sales_price#40, ss_net_profit#47, ss_sold_date_sk#48]\n               :     :        :     :  +- Filter ((isnotnull(ss_sold_date_sk#48) AND isnotnull(ss_store_sk#32)) AND dynamicpruning#738 [ss_sold_date_sk#48])\n               :     :        :     :     :  +- Project [d_date_sk#49]\n               :     :        :     :     :     +- Filter ((isnotnull(d_date#51) AND ((d_date#51 >= 1998-08-04) AND (d_date#51 <= 1998-09-03))) AND isnotnull(d_date_sk#49))\n               :     :        :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#49,d_date_id#50,d_date#51,d_month_seq#52,d_week_seq#53,d_quarter_seq#54,d_year#55,d_dow#56,d_moy#57,d_dom#58,d_qoy#59,d_fy_year#60,d_fy_quarter_seq#61,d_fy_week_seq#62,d_day_name#63,d_quarter_name#64,d_holiday#65,d_weekend#66,d_following_holiday#67,d_first_dom#68,d_last_dom#69,d_same_day_ly#70,d_same_day_lq#71,d_current_day#72,... 4 more fields] parquet\n               :     :        :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#26,ss_item_sk#27,ss_customer_sk#28,ss_cdemo_sk#29,ss_hdemo_sk#30,ss_addr_sk#31,ss_store_sk#32,ss_promo_sk#33,ss_ticket_number#34L,ss_quantity#35,ss_wholesale_cost#36,ss_list_price#37,ss_sales_price#38,ss_ext_discount_amt#39,ss_ext_sales_price#40,ss_ext_wholesale_cost#41,ss_ext_list_price#42,ss_ext_tax#43,ss_coupon_amt#44,ss_net_paid#45,ss_net_paid_inc_tax#46,ss_net_profit#47,ss_sold_date_sk#48] parquet\n               :     :        :     +- LogicalQueryStage Project [d_date_sk#49], BroadcastQueryStage 0\n               :     :        +- LogicalQueryStage Project [s_store_sk#77], BroadcastQueryStage 1\n               :     +- Aggregate [s_store_sk#547], [s_store_sk#547, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#509, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#510]\n               :        +- Project [sr_return_amt#116, sr_net_loss#124, s_store_sk#547]\n               :           +- Join Inner, (sr_store_sk#112 = s_store_sk#547)\n               :              :- Project [sr_store_sk#112, sr_return_amt#116, sr_net_loss#124]\n               :              :  +- Join Inner, (sr_returned_date_sk#125 = d_date_sk#519)\n               :              :     :- Project [sr_store_sk#112, sr_return_amt#116, sr_net_loss#124, sr_returned_date_sk#125]\n               :              :     :  +- Filter ((isnotnull(sr_returned_date_sk#125) AND isnotnull(sr_store_sk#112)) AND dynamicpruning#739 [sr_returned_date_sk#125])\n               :              :     :     :  +- Project [d_date_sk#519]\n               :              :     :     :     +- Filter ((isnotnull(d_date#521) AND ((d_date#521 >= 1998-08-04) AND (d_date#521 <= 1998-09-03))) AND isnotnull(d_date_sk#519))\n               :              :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#519,d_date_id#520,d_date#521,d_month_seq#522,d_week_seq#523,d_quarter_seq#524,d_year#525,d_dow#526,d_moy#527,d_dom#528,d_qoy#529,d_fy_year#530,d_fy_quarter_seq#531,d_fy_week_seq#532,d_day_name#533,d_quarter_name#534,d_holiday#535,d_weekend#536,d_following_holiday#537,d_first_dom#538,d_last_dom#539,d_same_day_ly#540,d_same_day_lq#541,d_current_day#542,... 4 more fields] parquet\n               :              :     :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#106,sr_item_sk#107,sr_customer_sk#108,sr_cdemo_sk#109,sr_hdemo_sk#110,sr_addr_sk#111,sr_store_sk#112,sr_reason_sk#113,sr_ticket_number#114L,sr_return_quantity#115,sr_return_amt#116,sr_return_tax#117,sr_return_amt_inc_tax#118,sr_fee#119,sr_return_ship_cost#120,sr_refunded_cash#121,sr_reversed_charge#122,sr_store_credit#123,sr_net_loss#124,sr_returned_date_sk#125] parquet\n               :              :     +- LogicalQueryStage Project [d_date_sk#519], BroadcastQueryStage 3\n               :              +- LogicalQueryStage Project [s_store_sk#547], BroadcastQueryStage 5\n               :- Project [sales#511, returns#513, (profit#512 - profit_loss#514) AS profit#499, catalog channel AS channel#734, cs_call_center_sk#136 AS id#735]\n               :  +- Join Cross\n               :     :- Aggregate [cs_call_center_sk#136], [cs_call_center_sk#136, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#148)),17,2) AS sales#511, MakeDecimal(sum(UnscaledValue(cs_net_profit#158)),17,2) AS profit#512]\n               :     :  +- Project [cs_call_center_sk#136, cs_ext_sales_price#148, cs_net_profit#158]\n               :     :     +- Join Inner, (cs_sold_date_sk#159 = d_date_sk#576)\n               :     :        :- Project [cs_call_center_sk#136, cs_ext_sales_price#148, cs_net_profit#158, cs_sold_date_sk#159]\n               :     :        :  +- Filter (isnotnull(cs_sold_date_sk#159) AND dynamicpruning#740 [cs_sold_date_sk#159])\n               :     :        :     :  +- Project [d_date_sk#576]\n               :     :        :     :     +- Filter ((isnotnull(d_date#578) AND ((d_date#578 >= 1998-08-04) AND (d_date#578 <= 1998-09-03))) AND isnotnull(d_date_sk#576))\n               :     :        :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#576,d_date_id#577,d_date#578,d_month_seq#579,d_week_seq#580,d_quarter_seq#581,d_year#582,d_dow#583,d_moy#584,d_dom#585,d_qoy#586,d_fy_year#587,d_fy_quarter_seq#588,d_fy_week_seq#589,d_day_name#590,d_quarter_name#591,d_holiday#592,d_weekend#593,d_following_holiday#594,d_first_dom#595,d_last_dom#596,d_same_day_ly#597,d_same_day_lq#598,d_current_day#599,... 4 more fields] parquet\n               :     :        :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#126,cs_ship_date_sk#127,cs_bill_customer_sk#128,cs_bill_cdemo_sk#129,cs_bill_hdemo_sk#130,cs_bill_addr_sk#131,cs_ship_customer_sk#132,cs_ship_cdemo_sk#133,cs_ship_hdemo_sk#134,cs_ship_addr_sk#135,cs_call_center_sk#136,cs_catalog_page_sk#137,cs_ship_mode_sk#138,cs_warehouse_sk#139,cs_item_sk#140,cs_promo_sk#141,cs_order_number#142L,cs_quantity#143,cs_wholesale_cost#144,cs_list_price#145,cs_sales_price#146,cs_ext_discount_amt#147,cs_ext_sales_price#148,cs_ext_wholesale_cost#149,... 10 more fields] parquet\n               :     :        +- LogicalQueryStage Project [d_date_sk#576], BroadcastQueryStage 7\n               :     +- Aggregate [cr_call_center_sk#170], [MakeDecimal(sum(UnscaledValue(cr_return_amount#177)),17,2) AS returns#513, MakeDecimal(sum(UnscaledValue(cr_net_loss#185)),17,2) AS profit_loss#514]\n               :        +- Project [cr_call_center_sk#170, cr_return_amount#177, cr_net_loss#185]\n               :           +- Join Inner, (cr_returned_date_sk#186 = d_date_sk#604)\n               :              :- Project [cr_call_center_sk#170, cr_return_amount#177, cr_net_loss#185, cr_returned_date_sk#186]\n               :              :  +- Filter (isnotnull(cr_returned_date_sk#186) AND dynamicpruning#741 [cr_returned_date_sk#186])\n               :              :     :  +- Project [d_date_sk#604]\n               :              :     :     +- Filter ((isnotnull(d_date#606) AND ((d_date#606 >= 1998-08-04) AND (d_date#606 <= 1998-09-03))) AND isnotnull(d_date_sk#604))\n               :              :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#604,d_date_id#605,d_date#606,d_month_seq#607,d_week_seq#608,d_quarter_seq#609,d_year#610,d_dow#611,d_moy#612,d_dom#613,d_qoy#614,d_fy_year#615,d_fy_quarter_seq#616,d_fy_week_seq#617,d_day_name#618,d_quarter_name#619,d_holiday#620,d_weekend#621,d_following_holiday#622,d_first_dom#623,d_last_dom#624,d_same_day_ly#625,d_same_day_lq#626,d_current_day#627,... 4 more fields] parquet\n               :              :     +- Relation spark_catalog.tpcds_100.catalog_returns[cr_returned_time_sk#160,cr_item_sk#161,cr_refunded_customer_sk#162,cr_refunded_cdemo_sk#163,cr_refunded_hdemo_sk#164,cr_refunded_addr_sk#165,cr_returning_customer_sk#166,cr_returning_cdemo_sk#167,cr_returning_hdemo_sk#168,cr_returning_addr_sk#169,cr_call_center_sk#170,cr_catalog_page_sk#171,cr_ship_mode_sk#172,cr_warehouse_sk#173,cr_reason_sk#174,cr_order_number#175L,cr_return_quantity#176,cr_return_amount#177,cr_return_tax#178,cr_return_amt_inc_tax#179,cr_fee#180,cr_return_ship_cost#181,cr_refunded_cash#182,cr_reversed_charge#183,... 3 more fields] parquet\n               :              +- LogicalQueryStage Project [d_date_sk#604], BroadcastQueryStage 9\n               +- Project [sales#515, coalesce(returns#517, 0.00) AS returns#502, (profit#516 - coalesce(profit_loss#518, 0.00)) AS profit#503, web channel AS channel#736, wp_web_page_sk#221 AS id#737]\n                  +- Join LeftOuter, (wp_web_page_sk#221 = wp_web_page_sk#688)\n                     :- Aggregate [wp_web_page_sk#221], [wp_web_page_sk#221, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#209)),17,2) AS sales#515, MakeDecimal(sum(UnscaledValue(ws_net_profit#219)),17,2) AS profit#516]\n                     :  +- Project [ws_ext_sales_price#209, ws_net_profit#219, wp_web_page_sk#221]\n                     :     +- Join Inner, (ws_web_page_sk#198 = wp_web_page_sk#221)\n                     :        :- Project [ws_web_page_sk#198, ws_ext_sales_price#209, ws_net_profit#219]\n                     :        :  +- Join Inner, (ws_sold_date_sk#220 = d_date_sk#632)\n                     :        :     :- Project [ws_web_page_sk#198, ws_ext_sales_price#209, ws_net_profit#219, ws_sold_date_sk#220]\n                     :        :     :  +- Filter ((isnotnull(ws_sold_date_sk#220) AND isnotnull(ws_web_page_sk#198)) AND dynamicpruning#742 [ws_sold_date_sk#220])\n                     :        :     :     :  +- Project [d_date_sk#632]\n                     :        :     :     :     +- Filter ((isnotnull(d_date#634) AND ((d_date#634 >= 1998-08-04) AND (d_date#634 <= 1998-09-03))) AND isnotnull(d_date_sk#632))\n                     :        :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#632,d_date_id#633,d_date#634,d_month_seq#635,d_week_seq#636,d_quarter_seq#637,d_year#638,d_dow#639,d_moy#640,d_dom#641,d_qoy#642,d_fy_year#643,d_fy_quarter_seq#644,d_fy_week_seq#645,d_day_name#646,d_quarter_name#647,d_holiday#648,d_weekend#649,d_following_holiday#650,d_first_dom#651,d_last_dom#652,d_same_day_ly#653,d_same_day_lq#654,d_current_day#655,... 4 more fields] parquet\n                     :        :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#187,ws_ship_date_sk#188,ws_item_sk#189,ws_bill_customer_sk#190,ws_bill_cdemo_sk#191,ws_bill_hdemo_sk#192,ws_bill_addr_sk#193,ws_ship_customer_sk#194,ws_ship_cdemo_sk#195,ws_ship_hdemo_sk#196,ws_ship_addr_sk#197,ws_web_page_sk#198,ws_web_site_sk#199,ws_ship_mode_sk#200,ws_warehouse_sk#201,ws_promo_sk#202,ws_order_number#203L,ws_quantity#204,ws_wholesale_cost#205,ws_list_price#206,ws_sales_price#207,ws_ext_discount_amt#208,ws_ext_sales_price#209,ws_ext_wholesale_cost#210,... 10 more fields] parquet\n                     :        :     +- LogicalQueryStage Project [d_date_sk#632], BroadcastQueryStage 11\n                     :        +- LogicalQueryStage Project [wp_web_page_sk#221], BroadcastQueryStage 12\n                     +- Aggregate [wp_web_page_sk#688], [wp_web_page_sk#688, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#517, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#518]\n                        +- Project [wr_return_amt#249, wr_net_loss#257, wp_web_page_sk#688]\n                           +- Join Inner, (wr_web_page_sk#245 = wp_web_page_sk#688)\n                              :- Project [wr_web_page_sk#245, wr_return_amt#249, wr_net_loss#257]\n                              :  +- Join Inner, (wr_returned_date_sk#258 = d_date_sk#660)\n                              :     :- Project [wr_web_page_sk#245, wr_return_amt#249, wr_net_loss#257, wr_returned_date_sk#258]\n                              :     :  +- Filter ((isnotnull(wr_returned_date_sk#258) AND isnotnull(wr_web_page_sk#245)) AND dynamicpruning#743 [wr_returned_date_sk#258])\n                              :     :     :  +- Project [d_date_sk#660]\n                              :     :     :     +- Filter ((isnotnull(d_date#662) AND ((d_date#662 >= 1998-08-04) AND (d_date#662 <= 1998-09-03))) AND isnotnull(d_date_sk#660))\n                              :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#660,d_date_id#661,d_date#662,d_month_seq#663,d_week_seq#664,d_quarter_seq#665,d_year#666,d_dow#667,d_moy#668,d_dom#669,d_qoy#670,d_fy_year#671,d_fy_quarter_seq#672,d_fy_week_seq#673,d_day_name#674,d_quarter_name#675,d_holiday#676,d_weekend#677,d_following_holiday#678,d_first_dom#679,d_last_dom#680,d_same_day_ly#681,d_same_day_lq#682,d_current_day#683,... 4 more fields] parquet\n                              :     :     +- Relation spark_catalog.tpcds_100.web_returns[wr_returned_time_sk#235,wr_item_sk#236,wr_refunded_customer_sk#237,wr_refunded_cdemo_sk#238,wr_refunded_hdemo_sk#239,wr_refunded_addr_sk#240,wr_returning_customer_sk#241,wr_returning_cdemo_sk#242,wr_returning_hdemo_sk#243,wr_returning_addr_sk#244,wr_web_page_sk#245,wr_reason_sk#246,wr_order_number#247L,wr_return_quantity#248,wr_return_amt#249,wr_return_tax#250,wr_return_amt_inc_tax#251,wr_fee#252,wr_return_ship_cost#253,wr_refunded_cash#254,wr_reversed_charge#255,wr_account_credit#256,wr_net_loss#257,wr_returned_date_sk#258] parquet\n                              :     +- LogicalQueryStage Project [d_date_sk#660], BroadcastQueryStage 14\n                              +- LogicalQueryStage Project [wp_web_page_sk#688], BroadcastQueryStage 16\n"
      },
      "IM" : {
        "inputSizeInBytes" : 93382359728,
        "inputRowCount" : 539373587
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227373851,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 17780,
        "IOBytes" : {
          "Total" : 101496026,
          "Details" : {
            "IR" : 98689406,
            "IW" : 0,
            "SR" : 1403310,
            "SW" : 1403310
          }
        }
      }
    },
    "7" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 116994699,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 896,
            "rowCount" : 32,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cs_call_center_sk#136], [cs_call_center_sk#136, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#148)),17,2) AS sales#511, MakeDecimal(sum(UnscaledValue(cs_net_profit#158)),17,2) AS profit#512], HashAggregate(keys=[cs_call_center_sk#136], functions=[sum(UnscaledValue(cs_ext_sales_price#148)), sum(UnscaledValue(cs_net_profit#158))]) "
          },
          "8" : {
            "sign" : 1996751199,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 91656257144928,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [s_store_sk#77], [s_store_sk#77, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#40)),17,2) AS sales#507, MakeDecimal(sum(UnscaledValue(ss_net_profit#47)),17,2) AS profit#508], HashAggregate(keys=[s_store_sk#77], functions=[sum(UnscaledValue(ss_ext_sales_price#40)), sum(UnscaledValue(ss_net_profit#47))]) "
          },
          "4" : {
            "sign" : 1339410365,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Expand",
            "sizeInBytes" : 3431374061867895302726973585,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Expand Arguments: [[sales#507, returns#495, profit#496, channel#724, id#725, 0], [sales#507, returns#495, profit#496, channel#724, null, 1], [sales#507, returns#495, profit#496, null, null, 3]], [sales#507, returns#495, profit#496, channel#727, id#728, spark_grouping_id#726L] "
          },
          "15" : {
            "sign" : -1293409156,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 62157842106420372480,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (wp_web_page_sk#221 = wp_web_page_sk#688) "
          },
          "11" : {
            "sign" : 341172157,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 360448,
            "rowCount" : 8192,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Cross "
          },
          "9" : {
            "sign" : -524100177,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 9359355051480,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [s_store_sk#547], [s_store_sk#547, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#509, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#510], HashAggregate(keys=[s_store_sk#547], functions=[sum(UnscaledValue(sr_return_amt#116)), sum(UnscaledValue(sr_net_loss#124))]) "
          },
          "13" : {
            "sign" : -207313571,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8192,
            "rowCount" : 256,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cr_call_center_sk#170], [MakeDecimal(sum(UnscaledValue(cr_return_amount#177)),17,2) AS returns#513, MakeDecimal(sum(UnscaledValue(cr_net_loss#185)),17,2) AS profit_loss#514], HashAggregate(keys=[cr_call_center_sk#170], functions=[sum(UnscaledValue(cr_return_amount#177)), sum(UnscaledValue(cr_net_loss#185))]) "
          },
          "16" : {
            "sign" : -1833260765,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 127431120240480,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [wp_web_page_sk#221], [wp_web_page_sk#221, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#209)),17,2) AS sales#515, MakeDecimal(sum(UnscaledValue(ws_net_profit#219)),17,2) AS profit#516], HashAggregate(keys=[wp_web_page_sk#221], functions=[sum(UnscaledValue(ws_ext_sales_price#209)), sum(UnscaledValue(ws_net_profit#219))]) "
          },
          "5" : {
            "sign" : -1810871244,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 1000817434711469463295367296,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "10" : {
            "sign" : 1893133472,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 557056,
            "rowCount" : 8192,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#511, returns#513, (profit#512 - profit_loss#514) AS profit#499, catalog channel AS channel#734, cs_call_center_sk#136 AS id#735] "
          },
          "6" : {
            "sign" : -1216784766,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1000817362193987005804375680,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#507, coalesce(returns#509, 0.00) AS returns#495, (profit#508 - coalesce(profit_loss#510, 0.00)) AS profit#496, store channel AS channel#724, s_store_sk#77 AS id#725] "
          },
          "1" : {
            "sign" : 298902448,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 4289217577334869128408716981,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -1496956867,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 487776,
            "rowCount" : 15243,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [wp_web_page_sk#688], [wp_web_page_sk#688, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#517, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#518], HashAggregate(keys=[wp_web_page_sk#688], functions=[sum(UnscaledValue(wr_return_amt#249)), sum(UnscaledValue(wr_net_loss#257))]) "
          },
          "14" : {
            "sign" : -1577871569,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 72517482457490434560,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#515, coalesce(returns#517, 0.00) AS returns#502, (profit#516 - coalesce(profit_loss#518, 0.00)) AS profit#503, web channel AS channel#736, wp_web_page_sk#221 AS id#737] "
          },
          "0" : {
            "sign" : -1257907093,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 704925973,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 4289217577334869128408716981,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#727 ASC NULLS FIRST, id#728 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -1088740525,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 857843453309131719260893440,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (s_store_sk#77 = s_store_sk#547) "
          },
          "3" : {
            "sign" : 162893386,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 4289217577334869128408716981,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#727, id#728, spark_grouping_id#726L], [channel#727, id#728, sum(sales#507) AS sales#504, sum(returns#495) AS returns#505, sum(profit#496) AS profit#506] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Union",
          "toId" : 4,
          "toName" : "Expand",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Expand",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#727 ASC NULLS FIRST, id#728 ASC NULLS FIRST], true\n      +- Aggregate [channel#727, id#728, spark_grouping_id#726L], [channel#727, id#728, sum(sales#507) AS sales#504, sum(returns#495) AS returns#505, sum(profit#496) AS profit#506]\n         +- Expand [[sales#507, returns#495, profit#496, channel#724, id#725, 0], [sales#507, returns#495, profit#496, channel#724, null, 1], [sales#507, returns#495, profit#496, null, null, 3]], [sales#507, returns#495, profit#496, channel#727, id#728, spark_grouping_id#726L]\n            +- Union false, false\n               :- Project [sales#507, coalesce(returns#509, 0.00) AS returns#495, (profit#508 - coalesce(profit_loss#510, 0.00)) AS profit#496, store channel AS channel#724, s_store_sk#77 AS id#725]\n               :  +- Join LeftOuter, (s_store_sk#77 = s_store_sk#547)\n               :     :- LogicalQueryStage Aggregate [s_store_sk#77], [s_store_sk#77, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#40)),17,2) AS sales#507, MakeDecimal(sum(UnscaledValue(ss_net_profit#47)),17,2) AS profit#508], HashAggregate(keys=[s_store_sk#77], functions=[sum(UnscaledValue(ss_ext_sales_price#40)), sum(UnscaledValue(ss_net_profit#47))])\n               :     +- LogicalQueryStage Aggregate [s_store_sk#547], [s_store_sk#547, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#509, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#510], HashAggregate(keys=[s_store_sk#547], functions=[sum(UnscaledValue(sr_return_amt#116)), sum(UnscaledValue(sr_net_loss#124))])\n               :- Project [sales#511, returns#513, (profit#512 - profit_loss#514) AS profit#499, catalog channel AS channel#734, cs_call_center_sk#136 AS id#735]\n               :  +- Join Cross\n               :     :- LogicalQueryStage Aggregate [cs_call_center_sk#136], [cs_call_center_sk#136, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#148)),17,2) AS sales#511, MakeDecimal(sum(UnscaledValue(cs_net_profit#158)),17,2) AS profit#512], HashAggregate(keys=[cs_call_center_sk#136], functions=[sum(UnscaledValue(cs_ext_sales_price#148)), sum(UnscaledValue(cs_net_profit#158))])\n               :     +- LogicalQueryStage Aggregate [cr_call_center_sk#170], [MakeDecimal(sum(UnscaledValue(cr_return_amount#177)),17,2) AS returns#513, MakeDecimal(sum(UnscaledValue(cr_net_loss#185)),17,2) AS profit_loss#514], HashAggregate(keys=[cr_call_center_sk#170], functions=[sum(UnscaledValue(cr_return_amount#177)), sum(UnscaledValue(cr_net_loss#185))])\n               +- Project [sales#515, coalesce(returns#517, 0.00) AS returns#502, (profit#516 - coalesce(profit_loss#518, 0.00)) AS profit#503, web channel AS channel#736, wp_web_page_sk#221 AS id#737]\n                  +- Join LeftOuter, (wp_web_page_sk#221 = wp_web_page_sk#688)\n                     :- LogicalQueryStage Aggregate [wp_web_page_sk#221], [wp_web_page_sk#221, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#209)),17,2) AS sales#515, MakeDecimal(sum(UnscaledValue(ws_net_profit#219)),17,2) AS profit#516], HashAggregate(keys=[wp_web_page_sk#221], functions=[sum(UnscaledValue(ws_ext_sales_price#209)), sum(UnscaledValue(ws_net_profit#219))])\n                     +- LogicalQueryStage Aggregate [wp_web_page_sk#688], [wp_web_page_sk#688, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#517, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#518], HashAggregate(keys=[wp_web_page_sk#688], functions=[sum(UnscaledValue(wr_return_amt#249)), sum(UnscaledValue(wr_net_loss#257))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 228446732933752,
        "inputRowCount" : 15531
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 23,
        "FinishedTasksTotalTimeInMs" : 43936.0,
        "FinishedTasksDistributionInMs" : [ 181.0, 383.0, 2292.0, 3315.0, 3970.0 ]
      },
      "StartTimeInMs" : 1702227378869,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 12762,
        "IOBytes" : {
          "Total" : 98660099,
          "Details" : {
            "IR" : 96328553,
            "IW" : 0,
            "SR" : 1403310,
            "SW" : 928236
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : 1893133472,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 69632,
            "rowCount" : 1024,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#511, returns#513, (profit#512 - profit_loss#514) AS profit#499, catalog channel AS channel#734, cs_call_center_sk#136 AS id#735] "
          },
          "12" : {
            "sign" : 1356657032,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 293143679568,
            "rowCount" : 8142879988,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#48 = d_date_sk#49) "
          },
          "8" : {
            "sign" : 1484025835,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 5656,
            "rowCount" : 202,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [s_store_sk#77], [s_store_sk#77, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#40)),17,2) AS sales#507, MakeDecimal(sum(UnscaledValue(ss_net_profit#47)),17,2) AS profit#508] "
          },
          "19" : {
            "sign" : 529363847,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#49], BroadcastQueryStage 0 "
          },
          "23" : {
            "sign" : 369260853,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1835372384,
            "rowCount" : 57355387,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (sr_store_sk#112 = s_store_sk#547) "
          },
          "4" : {
            "sign" : 482921219,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Expand",
            "sizeInBytes" : 5926438794055052084010679431,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Expand Arguments: [[sales#507, returns#495, profit#496, channel#724, id#725, 0], [sales#507, returns#495, profit#496, channel#724, null, 1], [sales#507, returns#495, profit#496, null, null, 3]], [sales#507, returns#495, profit#496, channel#727, id#728, spark_grouping_id#726L] "
          },
          "40" : {
            "sign" : -1833260765,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 127431120240480,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [wp_web_page_sk#221], [wp_web_page_sk#221, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#209)),17,2) AS sales#515, MakeDecimal(sum(UnscaledValue(ws_net_profit#219)),17,2) AS profit#516], HashAggregate(keys=[wp_web_page_sk#221], functions=[sum(UnscaledValue(ws_ext_sales_price#209)), sum(UnscaledValue(ws_net_profit#219))]) "
          },
          "15" : {
            "sign" : -1218510227,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#26, ss_item_sk#27, ss_customer_sk#28, ss_cdemo_sk#29, ss_hdemo_sk#30, ss_addr_sk#31, ss_store_sk#32, ss_promo_sk#33, ss_ticket_number#34L, ss_quantity#35, ss_wholesale_cost#36, ss_list_price#37, ss_sales_price#38, ss_ext_discount_amt#39, ss_ext_sales_price#40, ss_ext_wholesale_cost#41, ss_ext_list_price#42, ss_ext_tax#43, ss_coupon_amt#44, ss_net_paid#45, ss_net_paid_inc_tax#46, ss_net_profit#47, ss_sold_date_sk#48], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "11" : {
            "sign" : 938967649,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 228000639664,
            "rowCount" : 8142879988,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_store_sk#32, ss_ext_sales_price#40, ss_net_profit#47] "
          },
          "9" : {
            "sign" : 829309728,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 16179885092,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_ext_sales_price#40, ss_net_profit#47, s_store_sk#77] "
          },
          "33" : {
            "sign" : 535725253,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 4824,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#547], BroadcastQueryStage 5 "
          },
          "22" : {
            "sign" : 1612702496,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1605950836,
            "rowCount" : 57355387,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_return_amt#116, sr_net_loss#124, s_store_sk#547] "
          },
          "26" : {
            "sign" : 1906986805,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 858321760,
            "rowCount" : 26822555,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_store_sk#112, sr_return_amt#116, sr_net_loss#124, sr_returned_date_sk#125] "
          },
          "37" : {
            "sign" : -207313571,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 768,
            "rowCount" : 32,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cr_call_center_sk#170], [MakeDecimal(sum(UnscaledValue(cr_return_amount#177)),17,2) AS returns#513, MakeDecimal(sum(UnscaledValue(cr_net_loss#185)),17,2) AS profit_loss#514], HashAggregate(keys=[cr_call_center_sk#170], functions=[sum(UnscaledValue(cr_return_amount#177)), sum(UnscaledValue(cr_net_loss#185))]) "
          },
          "13" : {
            "sign" : 837548438,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 8405553536,
            "rowCount" : 262673548,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_store_sk#32, ss_ext_sales_price#40, ss_net_profit#47, ss_sold_date_sk#48] "
          },
          "24" : {
            "sign" : 2044220995,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 23281977740,
            "rowCount" : 831499205,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_store_sk#112, sr_return_amt#116, sr_net_loss#124] "
          },
          "35" : {
            "sign" : 341172157,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 45056,
            "rowCount" : 1024,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Cross "
          },
          "16" : {
            "sign" : 1333763490,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 360,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#49] "
          },
          "5" : {
            "sign" : -929995520,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 1728544648266056857836448168,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "10" : {
            "sign" : 1108045433,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 18491297248,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#32 = s_store_sk#77) "
          },
          "21" : {
            "sign" : -1377171193,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 5656,
            "rowCount" : 202,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [s_store_sk#547], [s_store_sk#547, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#509, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#510] "
          },
          "32" : {
            "sign" : 1820794396,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#519], BroadcastQueryStage 3 "
          },
          "6" : {
            "sign" : 1778692440,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 13736,
            "rowCount" : 202,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#507, coalesce(returns#509, 0.00) AS returns#495, (profit#508 - coalesce(profit_loss#510, 0.00)) AS profit#496, store channel AS channel#724, s_store_sk#77 AS id#725] "
          },
          "36" : {
            "sign" : 116994699,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 896,
            "rowCount" : 32,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cs_call_center_sk#136], [cs_call_center_sk#136, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#148)),17,2) AS sales#511, MakeDecimal(sum(UnscaledValue(cs_net_profit#158)),17,2) AS profit#512], HashAggregate(keys=[cs_call_center_sk#136], functions=[sum(UnscaledValue(cs_ext_sales_price#148)), sum(UnscaledValue(cs_net_profit#158))]) "
          },
          "1" : {
            "sign" : -1134260996,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 7408048492568815105013349288,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "39" : {
            "sign" : -1293409156,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1481609698513763021002598400,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (wp_web_page_sk#221 = wp_web_page_sk#688) "
          },
          "17" : {
            "sign" : -1586626797,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 7380,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#51) AND ((d_date#51 >= 1998-08-04) AND (d_date#51 <= 1998-09-03))) AND isnotnull(d_date_sk#49)) "
          },
          "25" : {
            "sign" : 1845685838,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 29933971380,
            "rowCount" : 831499205,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (sr_returned_date_sk#125 = d_date_sk#519) "
          },
          "14" : {
            "sign" : 1504499251,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39926379296,
            "rowCount" : 262673548,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_sold_date_sk#48) AND isnotnull(ss_store_sk#32)) AND dynamicpruning#738 [ss_sold_date_sk#48]) "
          },
          "31" : {
            "sign" : 781611511,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#519, d_date_id#520, d_date#521, d_month_seq#522, d_week_seq#523, d_quarter_seq#524, d_year#525, d_dow#526, d_moy#527, d_dom#528, d_qoy#529, d_fy_year#530, d_fy_quarter_seq#531, d_fy_week_seq#532, d_day_name#533, d_quarter_name#534, d_holiday#535, d_weekend#536, d_following_holiday#537, d_first_dom#538, d_last_dom#539, d_same_day_ly#540, d_same_day_lq#541, d_current_day#542, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "0" : {
            "sign" : 1981921073,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 8000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 1557086341,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 4824,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#77], BroadcastQueryStage 1 "
          },
          "27" : {
            "sign" : -2103513388,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3433287040,
            "rowCount" : 26822555,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(sr_returned_date_sk#125) AND isnotnull(sr_store_sk#112)) AND dynamicpruning#739 [sr_returned_date_sk#125]) "
          },
          "2" : {
            "sign" : 1677822491,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 7408048492568815105013349288,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#727 ASC NULLS FIRST, id#728 ASC NULLS FIRST], true "
          },
          "38" : {
            "sign" : -1577871569,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1728544648266056857836364800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#515, coalesce(returns#517, 0.00) AS returns#502, (profit#516 - coalesce(profit_loss#518, 0.00)) AS profit#503, web channel AS channel#736, wp_web_page_sk#221 AS id#737] "
          },
          "18" : {
            "sign" : 247686043,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#49, d_date_id#50, d_date#51, d_month_seq#52, d_week_seq#53, d_quarter_seq#54, d_year#55, d_dow#56, d_moy#57, d_dom#58, d_qoy#59, d_fy_year#60, d_fy_quarter_seq#61, d_fy_week_seq#62, d_day_name#63, d_quarter_name#64, d_holiday#65, d_weekend#66, d_following_holiday#67, d_first_dom#68, d_last_dom#69, d_same_day_ly#70, d_same_day_lq#71, d_current_day#72, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "30" : {
            "sign" : -1168667407,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 7380,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#521) AND ((d_date#521 >= 1998-08-04) AND (d_date#521 <= 1998-09-03))) AND isnotnull(d_date_sk#519)) "
          },
          "7" : {
            "sign" : 503191111,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 9696,
            "rowCount" : 202,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (s_store_sk#77 = s_store_sk#547) "
          },
          "29" : {
            "sign" : -1840330346,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 360,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#519] "
          },
          "41" : {
            "sign" : -1496956867,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 11626749382080,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [wp_web_page_sk#688], [wp_web_page_sk#688, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#517, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#518], HashAggregate(keys=[wp_web_page_sk#688], functions=[sum(UnscaledValue(wr_return_amt#249)), sum(UnscaledValue(wr_net_loss#257))]) "
          },
          "3" : {
            "sign" : 1085156182,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 7408048492568815105013349288,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#727, id#728, spark_grouping_id#726L], [channel#727, id#728, sum(sales#507) AS sales#504, sum(returns#495) AS returns#505, sum(profit#496) AS profit#506] "
          },
          "28" : {
            "sign" : -221723247,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3557606528,
            "rowCount" : 27793801,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#106, sr_item_sk#107, sr_customer_sk#108, sr_cdemo_sk#109, sr_hdemo_sk#110, sr_addr_sk#111, sr_store_sk#112, sr_reason_sk#113, sr_ticket_number#114L, sr_return_quantity#115, sr_return_amt#116, sr_return_tax#117, sr_return_amt_inc_tax#118, sr_fee#119, sr_return_ship_cost#120, sr_refunded_cash#121, sr_reversed_charge#122, sr_store_credit#123, sr_net_loss#124, sr_returned_date_sk#125], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 15,
          "fromName" : "LogicalRelation",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalRelation",
          "toId" : 17,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Filter",
          "toId" : 16,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 14,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Join",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Aggregate",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalRelation",
          "toId" : 27,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "LogicalRelation",
          "toId" : 30,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Filter",
          "toId" : 29,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Project",
          "toId" : 27,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 27,
          "fromName" : "Filter",
          "toId" : 26,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Project",
          "toId" : 25,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "LogicalQueryStage",
          "toId" : 25,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Join",
          "toId" : 24,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Project",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "LogicalQueryStage",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Join",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 21,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Aggregate",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "LogicalQueryStage",
          "toId" : 35,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "LogicalQueryStage",
          "toId" : 35,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "Join",
          "toId" : 34,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "LogicalQueryStage",
          "toId" : 39,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 41,
          "fromName" : "LogicalQueryStage",
          "toId" : 39,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "Join",
          "toId" : 38,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Union",
          "toId" : 4,
          "toName" : "Expand",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Expand",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#727 ASC NULLS FIRST, id#728 ASC NULLS FIRST], true\n      +- Aggregate [channel#727, id#728, spark_grouping_id#726L], [channel#727, id#728, sum(sales#507) AS sales#504, sum(returns#495) AS returns#505, sum(profit#496) AS profit#506]\n         +- Expand [[sales#507, returns#495, profit#496, channel#724, id#725, 0], [sales#507, returns#495, profit#496, channel#724, null, 1], [sales#507, returns#495, profit#496, null, null, 3]], [sales#507, returns#495, profit#496, channel#727, id#728, spark_grouping_id#726L]\n            +- Union false, false\n               :- Project [sales#507, coalesce(returns#509, 0.00) AS returns#495, (profit#508 - coalesce(profit_loss#510, 0.00)) AS profit#496, store channel AS channel#724, s_store_sk#77 AS id#725]\n               :  +- Join LeftOuter, (s_store_sk#77 = s_store_sk#547)\n               :     :- Aggregate [s_store_sk#77], [s_store_sk#77, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#40)),17,2) AS sales#507, MakeDecimal(sum(UnscaledValue(ss_net_profit#47)),17,2) AS profit#508]\n               :     :  +- Project [ss_ext_sales_price#40, ss_net_profit#47, s_store_sk#77]\n               :     :     +- Join Inner, (ss_store_sk#32 = s_store_sk#77)\n               :     :        :- Project [ss_store_sk#32, ss_ext_sales_price#40, ss_net_profit#47]\n               :     :        :  +- Join Inner, (ss_sold_date_sk#48 = d_date_sk#49)\n               :     :        :     :- Project [ss_store_sk#32, ss_ext_sales_price#40, ss_net_profit#47, ss_sold_date_sk#48]\n               :     :        :     :  +- Filter ((isnotnull(ss_sold_date_sk#48) AND isnotnull(ss_store_sk#32)) AND dynamicpruning#738 [ss_sold_date_sk#48])\n               :     :        :     :     :  +- Project [d_date_sk#49]\n               :     :        :     :     :     +- Filter ((isnotnull(d_date#51) AND ((d_date#51 >= 1998-08-04) AND (d_date#51 <= 1998-09-03))) AND isnotnull(d_date_sk#49))\n               :     :        :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#49,d_date_id#50,d_date#51,d_month_seq#52,d_week_seq#53,d_quarter_seq#54,d_year#55,d_dow#56,d_moy#57,d_dom#58,d_qoy#59,d_fy_year#60,d_fy_quarter_seq#61,d_fy_week_seq#62,d_day_name#63,d_quarter_name#64,d_holiday#65,d_weekend#66,d_following_holiday#67,d_first_dom#68,d_last_dom#69,d_same_day_ly#70,d_same_day_lq#71,d_current_day#72,... 4 more fields] parquet\n               :     :        :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#26,ss_item_sk#27,ss_customer_sk#28,ss_cdemo_sk#29,ss_hdemo_sk#30,ss_addr_sk#31,ss_store_sk#32,ss_promo_sk#33,ss_ticket_number#34L,ss_quantity#35,ss_wholesale_cost#36,ss_list_price#37,ss_sales_price#38,ss_ext_discount_amt#39,ss_ext_sales_price#40,ss_ext_wholesale_cost#41,ss_ext_list_price#42,ss_ext_tax#43,ss_coupon_amt#44,ss_net_paid#45,ss_net_paid_inc_tax#46,ss_net_profit#47,ss_sold_date_sk#48] parquet\n               :     :        :     +- LogicalQueryStage Project [d_date_sk#49], BroadcastQueryStage 0\n               :     :        +- LogicalQueryStage Project [s_store_sk#77], BroadcastQueryStage 1\n               :     +- Aggregate [s_store_sk#547], [s_store_sk#547, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#509, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#510]\n               :        +- Project [sr_return_amt#116, sr_net_loss#124, s_store_sk#547]\n               :           +- Join Inner, (sr_store_sk#112 = s_store_sk#547)\n               :              :- Project [sr_store_sk#112, sr_return_amt#116, sr_net_loss#124]\n               :              :  +- Join Inner, (sr_returned_date_sk#125 = d_date_sk#519)\n               :              :     :- Project [sr_store_sk#112, sr_return_amt#116, sr_net_loss#124, sr_returned_date_sk#125]\n               :              :     :  +- Filter ((isnotnull(sr_returned_date_sk#125) AND isnotnull(sr_store_sk#112)) AND dynamicpruning#739 [sr_returned_date_sk#125])\n               :              :     :     :  +- Project [d_date_sk#519]\n               :              :     :     :     +- Filter ((isnotnull(d_date#521) AND ((d_date#521 >= 1998-08-04) AND (d_date#521 <= 1998-09-03))) AND isnotnull(d_date_sk#519))\n               :              :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#519,d_date_id#520,d_date#521,d_month_seq#522,d_week_seq#523,d_quarter_seq#524,d_year#525,d_dow#526,d_moy#527,d_dom#528,d_qoy#529,d_fy_year#530,d_fy_quarter_seq#531,d_fy_week_seq#532,d_day_name#533,d_quarter_name#534,d_holiday#535,d_weekend#536,d_following_holiday#537,d_first_dom#538,d_last_dom#539,d_same_day_ly#540,d_same_day_lq#541,d_current_day#542,... 4 more fields] parquet\n               :              :     :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#106,sr_item_sk#107,sr_customer_sk#108,sr_cdemo_sk#109,sr_hdemo_sk#110,sr_addr_sk#111,sr_store_sk#112,sr_reason_sk#113,sr_ticket_number#114L,sr_return_quantity#115,sr_return_amt#116,sr_return_tax#117,sr_return_amt_inc_tax#118,sr_fee#119,sr_return_ship_cost#120,sr_refunded_cash#121,sr_reversed_charge#122,sr_store_credit#123,sr_net_loss#124,sr_returned_date_sk#125] parquet\n               :              :     +- LogicalQueryStage Project [d_date_sk#519], BroadcastQueryStage 3\n               :              +- LogicalQueryStage Project [s_store_sk#547], BroadcastQueryStage 5\n               :- Project [sales#511, returns#513, (profit#512 - profit_loss#514) AS profit#499, catalog channel AS channel#734, cs_call_center_sk#136 AS id#735]\n               :  +- Join Cross\n               :     :- LogicalQueryStage Aggregate [cs_call_center_sk#136], [cs_call_center_sk#136, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#148)),17,2) AS sales#511, MakeDecimal(sum(UnscaledValue(cs_net_profit#158)),17,2) AS profit#512], HashAggregate(keys=[cs_call_center_sk#136], functions=[sum(UnscaledValue(cs_ext_sales_price#148)), sum(UnscaledValue(cs_net_profit#158))])\n               :     +- LogicalQueryStage Aggregate [cr_call_center_sk#170], [MakeDecimal(sum(UnscaledValue(cr_return_amount#177)),17,2) AS returns#513, MakeDecimal(sum(UnscaledValue(cr_net_loss#185)),17,2) AS profit_loss#514], HashAggregate(keys=[cr_call_center_sk#170], functions=[sum(UnscaledValue(cr_return_amount#177)), sum(UnscaledValue(cr_net_loss#185))])\n               +- Project [sales#515, coalesce(returns#517, 0.00) AS returns#502, (profit#516 - coalesce(profit_loss#518, 0.00)) AS profit#503, web channel AS channel#736, wp_web_page_sk#221 AS id#737]\n                  +- Join LeftOuter, (wp_web_page_sk#221 = wp_web_page_sk#688)\n                     :- LogicalQueryStage Aggregate [wp_web_page_sk#221], [wp_web_page_sk#221, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#209)),17,2) AS sales#515, MakeDecimal(sum(UnscaledValue(ws_net_profit#219)),17,2) AS profit#516], HashAggregate(keys=[wp_web_page_sk#221], functions=[sum(UnscaledValue(ws_ext_sales_price#209)), sum(UnscaledValue(ws_net_profit#219))])\n                     +- LogicalQueryStage Aggregate [wp_web_page_sk#688], [wp_web_page_sk#688, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#517, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#518], HashAggregate(keys=[wp_web_page_sk#688], functions=[sum(UnscaledValue(wr_return_amt#249)), sum(UnscaledValue(wr_net_loss#257))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 139103236231704,
        "inputRowCount" : 302840084
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227374783,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 16848,
        "IOBytes" : {
          "Total" : 101496026,
          "Details" : {
            "IR" : 98689406,
            "IW" : 0,
            "SR" : 1403310,
            "SW" : 1403310
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "12" : {
      "QSLogical" : {
        "operators" : {
          "12" : {
            "sign" : -1833260765,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 522240,
                "rowCount" : 16320
              },
              "compileTime" : {
                "sizeInBytes" : 127431120240480,
                "rowCount" : -1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [wp_web_page_sk#221], [wp_web_page_sk#221, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#209)),17,2) AS sales#515, MakeDecimal(sum(UnscaledValue(ws_net_profit#219)),17,2) AS profit#516], HashAggregate(keys=[wp_web_page_sk#221], functions=[sum(UnscaledValue(ws_ext_sales_price#209)), sum(UnscaledValue(ws_net_profit#219))]) "
          },
          "8" : {
            "sign" : 341172157,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2883584,
                "rowCount" : 65536
              },
              "compileTime" : {
                "sizeInBytes" : 2883584,
                "rowCount" : 65536
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Cross "
          },
          "4" : {
            "sign" : -1601031917,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 31027968,
                "rowCount" : 646416
              },
              "compileTime" : {
                "sizeInBytes" : 31027968,
                "rowCount" : 646416
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (s_store_sk#77 = s_store_sk#547) "
          },
          "11" : {
            "sign" : -573157411,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 799027200,
                "rowCount" : 16646400
              },
              "compileTime" : {
                "sizeInBytes" : 799027200,
                "rowCount" : 16646400
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftOuter, (wp_web_page_sk#221 = wp_web_page_sk#688) "
          },
          "9" : {
            "sign" : 116994699,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 8192,
                "rowCount" : 256
              },
              "compileTime" : {
                "sizeInBytes" : 896,
                "rowCount" : 32
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cs_call_center_sk#136], [cs_call_center_sk#136, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#148)),17,2) AS sales#511, MakeDecimal(sum(UnscaledValue(cs_net_profit#158)),17,2) AS profit#512], HashAggregate(keys=[cs_call_center_sk#136], functions=[sum(UnscaledValue(cs_ext_sales_price#148)), sum(UnscaledValue(cs_net_profit#158))]) "
          },
          "13" : {
            "sign" : -650696098,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1064880,
                "rowCount" : 1020
              },
              "compileTime" : {
                "sizeInBytes" : 487776,
                "rowCount" : 15243
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Aggregate [wp_web_page_sk#688], [wp_web_page_sk#688, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#517, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#518], HashAggregate(keys=[wp_web_page_sk#688], functions=[sum(UnscaledValue(wr_return_amt#249)), sum(UnscaledValue(wr_net_loss#257))]), BroadcastQueryStage 23 "
          },
          "5" : {
            "sign" : 1996751199,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 102912,
                "rowCount" : 3216
              },
              "compileTime" : {
                "sizeInBytes" : 91656257144928,
                "rowCount" : -1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [s_store_sk#77], [s_store_sk#77, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#40)),17,2) AS sales#507, MakeDecimal(sum(UnscaledValue(ss_net_profit#47)),17,2) AS profit#508], HashAggregate(keys=[s_store_sk#77], functions=[sum(UnscaledValue(ss_ext_sales_price#40)), sum(UnscaledValue(ss_net_profit#47))]) "
          },
          "10" : {
            "sign" : 1060352720,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1131955200,
                "rowCount" : 16646400
              },
              "compileTime" : {
                "sizeInBytes" : 1131955200,
                "rowCount" : 16646400
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#515, coalesce(returns#517, 0.00) AS returns#502, (profit#516 - coalesce(profit_loss#518, 0.00)) AS profit#503, web channel AS channel#736, wp_web_page_sk#221 AS id#737] "
          },
          "6" : {
            "sign" : -1351272337,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1051776,
                "rowCount" : 201
              },
              "compileTime" : {
                "sizeInBytes" : 102912,
                "rowCount" : 3216
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Aggregate [s_store_sk#547], [s_store_sk#547, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#509, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#510], HashAggregate(keys=[s_store_sk#547], functions=[sum(UnscaledValue(sr_return_amt#116)), sum(UnscaledValue(sr_net_loss#124))]), BroadcastQueryStage 24 "
          },
          "1" : {
            "sign" : 1758866462,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Expand",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 542795405286895356123,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 542795405286895356123,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Expand Arguments: [[sales#507, returns#495, profit#496, channel#724, id#725, 0], [sales#507, returns#495, profit#496, channel#724, null, 1], [sales#507, returns#495, profit#496, null, null, 3]], [sales#507, returns#495, profit#496, channel#727, id#728, spark_grouping_id#726L] "
          },
          "0" : {
            "sign" : -951755349,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 678494256608619195153,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 678494256608619195153,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#727, id#728, spark_grouping_id#726L], [channel#727, id#728, sum(sales#507) AS sales#504, sum(returns#495) AS returns#505, sum(profit#496) AS profit#506] "
          },
          "2" : {
            "sign" : 1598161557,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 158315326542011145536,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 158315326542011145536,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "7" : {
            "sign" : 1893133472,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4456448,
                "rowCount" : 65536
              },
              "compileTime" : {
                "sizeInBytes" : 4456448,
                "rowCount" : 65536
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#511, returns#513, (profit#512 - profit_loss#514) AS profit#499, catalog channel AS channel#734, cs_call_center_sk#136 AS id#735] "
          },
          "3" : {
            "sign" : 1669593474,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 43956288,
                "rowCount" : 646416
              },
              "compileTime" : {
                "sizeInBytes" : 43956288,
                "rowCount" : 646416
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales#507, coalesce(returns#509, 0.00) AS returns#495, (profit#508 - coalesce(profit_loss#510, 0.00)) AS profit#496, store channel AS channel#724, s_store_sk#77 AS id#725] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Union",
          "toId" : 1,
          "toName" : "Expand",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Expand",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [channel#727, id#728, spark_grouping_id#726L], [channel#727, id#728, sum(sales#507) AS sales#504, sum(returns#495) AS returns#505, sum(profit#496) AS profit#506]\n+- Expand [[sales#507, returns#495, profit#496, channel#724, id#725, 0], [sales#507, returns#495, profit#496, channel#724, null, 1], [sales#507, returns#495, profit#496, null, null, 3]], [sales#507, returns#495, profit#496, channel#727, id#728, spark_grouping_id#726L]\n   +- Union false, false\n      :- Project [sales#507, coalesce(returns#509, 0.00) AS returns#495, (profit#508 - coalesce(profit_loss#510, 0.00)) AS profit#496, store channel AS channel#724, s_store_sk#77 AS id#725]\n      :  +- Join LeftOuter, (s_store_sk#77 = s_store_sk#547)\n      :     :- LogicalQueryStage Aggregate [s_store_sk#77], [s_store_sk#77, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#40)),17,2) AS sales#507, MakeDecimal(sum(UnscaledValue(ss_net_profit#47)),17,2) AS profit#508], HashAggregate(keys=[s_store_sk#77], functions=[sum(UnscaledValue(ss_ext_sales_price#40)), sum(UnscaledValue(ss_net_profit#47))])\n      :     +- LogicalQueryStage LogicalQueryStage Aggregate [s_store_sk#547], [s_store_sk#547, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#509, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#510], HashAggregate(keys=[s_store_sk#547], functions=[sum(UnscaledValue(sr_return_amt#116)), sum(UnscaledValue(sr_net_loss#124))]), BroadcastQueryStage 24\n      :- Project [sales#511, returns#513, (profit#512 - profit_loss#514) AS profit#499, catalog channel AS channel#734, cs_call_center_sk#136 AS id#735]\n      :  +- Join Cross\n      :     :- LogicalQueryStage Aggregate [cs_call_center_sk#136], [cs_call_center_sk#136, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#148)),17,2) AS sales#511, MakeDecimal(sum(UnscaledValue(cs_net_profit#158)),17,2) AS profit#512], HashAggregate(keys=[cs_call_center_sk#136], functions=[sum(UnscaledValue(cs_ext_sales_price#148)), sum(UnscaledValue(cs_net_profit#158))])\n      :     +- LogicalQueryStage Aggregate [cr_call_center_sk#170], [MakeDecimal(sum(UnscaledValue(cr_return_amount#177)),17,2) AS returns#513, MakeDecimal(sum(UnscaledValue(cr_net_loss#185)),17,2) AS profit_loss#514], HashAggregate(keys=[cr_call_center_sk#170], functions=[sum(UnscaledValue(cr_return_amount#177)), sum(UnscaledValue(cr_net_loss#185))])\n      +- Project [sales#515, coalesce(returns#517, 0.00) AS returns#502, (profit#516 - coalesce(profit_loss#518, 0.00)) AS profit#503, web channel AS channel#736, wp_web_page_sk#221 AS id#737]\n         +- Join LeftOuter, (wp_web_page_sk#221 = wp_web_page_sk#688)\n            :- LogicalQueryStage Aggregate [wp_web_page_sk#221], [wp_web_page_sk#221, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#209)),17,2) AS sales#515, MakeDecimal(sum(UnscaledValue(ws_net_profit#219)),17,2) AS profit#516], HashAggregate(keys=[wp_web_page_sk#221], functions=[sum(UnscaledValue(ws_ext_sales_price#209)), sum(UnscaledValue(ws_net_profit#219))])\n            +- LogicalQueryStage LogicalQueryStage Aggregate [wp_web_page_sk#688], [wp_web_page_sk#688, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#517, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#518], HashAggregate(keys=[wp_web_page_sk#688], functions=[sum(UnscaledValue(wr_return_amt#249)), sum(UnscaledValue(wr_net_loss#257))]), BroadcastQueryStage 23\n"
      },
      "QSPhysical" : {
        "operators" : {
          "12" : {
            "sign" : -448154773,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 384,
            "rowCount" : 16,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [returns#513, profit_loss#514] Arguments: 25 "
          },
          "8" : {
            "sign" : 715812086,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 4456448,
            "rowCount" : 65536,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [sales#511, returns#513, (profit#512 - profit_loss#514) AS profit#499, catalog channel AS channel#734, cs_call_center_sk#136 AS id#735] Input [5]: [cs_call_center_sk#136, sales#511, profit#512, returns#513, profit_loss#514] "
          },
          "4" : {
            "sign" : 651465522,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 31027968,
            "rowCount" : 646416,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [s_store_sk#77] Right keys [1]: [s_store_sk#547] Join type: LeftOuter Join condition: None "
          },
          "15" : {
            "sign" : -1160075768,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 522240,
            "rowCount" : 16320,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [3]: [wp_web_page_sk#221, sum#774L, sum#775L] Keys [1]: [wp_web_page_sk#221] Functions [2]: [sum(UnscaledValue(ws_ext_sales_price#209)), sum(UnscaledValue(ws_net_profit#219))] Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_sales_price#209))#710L, sum(UnscaledValue(ws_net_profit#219))#711L] Results [3]: [wp_web_page_sk#221, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#209))#710L,17,2) AS sales#515, MakeDecimal(sum(UnscaledValue(ws_net_profit#219))#711L,17,2) AS profit#516] "
          },
          "11" : {
            "sign" : 1337909936,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 896,
            "rowCount" : 32,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [cs_call_center_sk#136, sum#766L, sum#767L] Arguments: 17 "
          },
          "9" : {
            "sign" : 1929372107,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastNestedLoopJoinExec",
            "sizeInBytes" : 2883584,
            "rowCount" : 65536,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastNestedLoopJoin Join type: Cross Join condition: None "
          },
          "13" : {
            "sign" : 906630932,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1131955200,
            "rowCount" : 16646400,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [sales#515, coalesce(returns#517, 0.00) AS returns#502, (profit#516 - coalesce(profit_loss#518, 0.00)) AS profit#503, web channel AS channel#736, wp_web_page_sk#221 AS id#737] Input [6]: [wp_web_page_sk#221, sales#515, profit#516, wp_web_page_sk#688, returns#517, profit_loss#518] "
          },
          "16" : {
            "sign" : -1717457307,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 127431120240480,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [wp_web_page_sk#221, sum#774L, sum#775L] Arguments: 19 "
          },
          "5" : {
            "sign" : 1924578673,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 102912,
            "rowCount" : 3216,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [3]: [s_store_sk#77, sum#758L, sum#759L] Keys [1]: [s_store_sk#77] Functions [2]: [sum(UnscaledValue(ss_ext_sales_price#40)), sum(UnscaledValue(ss_net_profit#47))] Aggregate Attributes [2]: [sum(UnscaledValue(ss_ext_sales_price#40))#702L, sum(UnscaledValue(ss_net_profit#47))#703L] Results [3]: [s_store_sk#77, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#40))#702L,17,2) AS sales#507, MakeDecimal(sum(UnscaledValue(ss_net_profit#47))#703L,17,2) AS profit#508] "
          },
          "10" : {
            "sign" : -1307610691,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 8192,
            "rowCount" : 256,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [3]: [cs_call_center_sk#136, sum#766L, sum#767L] Keys [1]: [cs_call_center_sk#136] Functions [2]: [sum(UnscaledValue(cs_ext_sales_price#148)), sum(UnscaledValue(cs_net_profit#158))] Aggregate Attributes [2]: [sum(UnscaledValue(cs_ext_sales_price#148))#706L, sum(UnscaledValue(cs_net_profit#158))#707L] Results [3]: [cs_call_center_sk#136, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#148))#706L,17,2) AS sales#511, MakeDecimal(sum(UnscaledValue(cs_net_profit#158))#707L,17,2) AS profit#512] "
          },
          "6" : {
            "sign" : -231305656,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 91656257144928,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [s_store_sk#77, sum#758L, sum#759L] Arguments: 21 "
          },
          "1" : {
            "sign" : 934741993,
            "className" : "org.apache.spark.sql.execution.ExpandExec",
            "sizeInBytes" : 542795405286895356123,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Expand Input [5]: [sales#507, returns#495, profit#496, channel#724, id#725] Arguments: [[sales#507, returns#495, profit#496, channel#724, id#725, 0], [sales#507, returns#495, profit#496, channel#724, null, 1], [sales#507, returns#495, profit#496, null, null, 3]], [sales#507, returns#495, profit#496, channel#727, id#728, spark_grouping_id#726L] "
          },
          "17" : {
            "sign" : -106423407,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1064880,
            "rowCount" : 1020,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [3]: [wp_web_page_sk#688, returns#517, profit_loss#518] Arguments: 23 "
          },
          "14" : {
            "sign" : 1977961071,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 799027200,
            "rowCount" : 16646400,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [wp_web_page_sk#221] Right keys [1]: [wp_web_page_sk#688] Join type: LeftOuter Join condition: None "
          },
          "0" : {
            "sign" : 987595222,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 678494256608619195153,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [6]: [sales#507, returns#495, profit#496, channel#727, id#728, spark_grouping_id#726L] Keys [3]: [channel#727, id#728, spark_grouping_id#726L] Functions [3]: [partial_sum(sales#507), partial_sum(returns#495), partial_sum(profit#496)] Aggregate Attributes [6]: [sum#744, isEmpty#745, sum#746, isEmpty#747, sum#748, isEmpty#749] Results [9]: [channel#727, id#728, spark_grouping_id#726L, sum#750, isEmpty#751, sum#752, isEmpty#753, sum#754, isEmpty#755] "
          },
          "2" : {
            "sign" : 1136148836,
            "className" : "org.apache.spark.sql.execution.UnionExec",
            "sizeInBytes" : 158315326542011145536,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union "
          },
          "7" : {
            "sign" : 812003502,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1051776,
            "rowCount" : 201,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [3]: [s_store_sk#547, returns#509, profit_loss#510] Arguments: 24 "
          },
          "3" : {
            "sign" : 1515895133,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 43956288,
            "rowCount" : 646416,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [sales#507, coalesce(returns#509, 0.00) AS returns#495, (profit#508 - coalesce(profit_loss#510, 0.00)) AS profit#496, store channel AS channel#724, s_store_sk#77 AS id#725] Input [6]: [s_store_sk#77, sales#507, profit#508, s_store_sk#547, returns#509, profit_loss#510] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "ShuffleQueryStage",
          "toId" : 5,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "HashAggregate",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "BroadcastQueryStage",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastHashJoin",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "ShuffleQueryStage",
          "toId" : 10,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "HashAggregate",
          "toId" : 9,
          "toName" : "BroadcastNestedLoopJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "BroadcastQueryStage",
          "toId" : 9,
          "toName" : "BroadcastNestedLoopJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "BroadcastNestedLoopJoin",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "ShuffleQueryStage",
          "toId" : 15,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "HashAggregate",
          "toId" : 14,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "BroadcastQueryStage",
          "toId" : 14,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "BroadcastHashJoin",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Union",
          "toId" : 1,
          "toName" : "Expand",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Expand",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[channel#727, id#728, spark_grouping_id#726L], functions=[partial_sum(sales#507), partial_sum(returns#495), partial_sum(profit#496)], output=[channel#727, id#728, spark_grouping_id#726L, sum#750, isEmpty#751, sum#752, isEmpty#753, sum#754, isEmpty#755])\n+- Expand [[sales#507, returns#495, profit#496, channel#724, id#725, 0], [sales#507, returns#495, profit#496, channel#724, null, 1], [sales#507, returns#495, profit#496, null, null, 3]], [sales#507, returns#495, profit#496, channel#727, id#728, spark_grouping_id#726L]\n   +- Union\n      :- Project [sales#507, coalesce(returns#509, 0.00) AS returns#495, (profit#508 - coalesce(profit_loss#510, 0.00)) AS profit#496, store channel AS channel#724, s_store_sk#77 AS id#725]\n      :  +- BroadcastHashJoin [s_store_sk#77], [s_store_sk#547], LeftOuter, BuildRight, false\n      :     :- HashAggregate(keys=[s_store_sk#77], functions=[sum(UnscaledValue(ss_ext_sales_price#40)), sum(UnscaledValue(ss_net_profit#47))], output=[s_store_sk#77, sales#507, profit#508])\n      :     :  +- ShuffleQueryStage 21\n      :     :     +- Exchange hashpartitioning(s_store_sk#77, 200), ENSURE_REQUIREMENTS, [plan_id=2356]\n      :     :        +- *(15) HashAggregate(keys=[s_store_sk#77], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#40)), partial_sum(UnscaledValue(ss_net_profit#47))], output=[s_store_sk#77, sum#758L, sum#759L])\n      :     :           +- *(15) Project [ss_ext_sales_price#40, ss_net_profit#47, s_store_sk#77]\n      :     :              +- *(15) BroadcastHashJoin [ss_store_sk#32], [s_store_sk#77], Inner, BuildRight, false\n      :     :                 :- *(15) Project [ss_store_sk#32, ss_ext_sales_price#40, ss_net_profit#47]\n      :     :                 :  +- *(15) BroadcastHashJoin [ss_sold_date_sk#48], [d_date_sk#49], Inner, BuildRight, false\n      :     :                 :     :- *(15) Filter isnotnull(ss_store_sk#32)\n      :     :                 :     :  +- *(15) ColumnarToRow\n      :     :                 :     :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_store_sk#32,ss_ext_sales_price#40,ss_net_profit#47,ss_sold_date_sk#48] Batched: true, DataFilters: [isnotnull(ss_store_sk#32)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#48), dynamicpruningexpression(ss_sold_date_sk#48 IN dynamicpruning#740)], PushedFilters: [IsNotNull(ss_store_sk)], ReadSchema: struct<ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>\n      :     :                 :     :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#740, 0, [d_date_sk#576], [id=#1625]\n      :     :                 :     +- BroadcastQueryStage 0\n      :     :                 :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=698]\n      :     :                 :           +- *(1) Project [d_date_sk#49]\n      :     :                 :              +- *(1) Filter (((isnotnull(d_date#51) AND (d_date#51 >= 1998-08-04)) AND (d_date#51 <= 1998-09-03)) AND isnotnull(d_date_sk#49))\n      :     :                 :                 +- *(1) ColumnarToRow\n      :     :                 :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#49,d_date#51] Batched: true, DataFilters: [isnotnull(d_date#51), (d_date#51 >= 1998-08-04), (d_date#51 <= 1998-09-03), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n      :     :                 +- BroadcastQueryStage 1\n      :     :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=717]\n      :     :                       +- *(2) Filter isnotnull(s_store_sk#77)\n      :     :                          +- *(2) ColumnarToRow\n      :     :                             +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#77] Batched: true, DataFilters: [isnotnull(s_store_sk#77)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int>\n      :     +- BroadcastQueryStage 24\n      :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2888]\n      :           +- *(18) HashAggregate(keys=[s_store_sk#547], functions=[sum(UnscaledValue(sr_return_amt#116)), sum(UnscaledValue(sr_net_loss#124))], output=[s_store_sk#547, returns#509, profit_loss#510])\n      :              +- AQEShuffleRead coalesced\n      :                 +- ShuffleQueryStage 22\n      :                    +- Exchange hashpartitioning(s_store_sk#547, 200), ENSURE_REQUIREMENTS, [plan_id=2432]\n      :                       +- *(16) HashAggregate(keys=[s_store_sk#547], functions=[partial_sum(UnscaledValue(sr_return_amt#116)), partial_sum(UnscaledValue(sr_net_loss#124))], output=[s_store_sk#547, sum#762L, sum#763L])\n      :                          +- *(16) Project [sr_return_amt#116, sr_net_loss#124, s_store_sk#547]\n      :                             +- *(16) BroadcastHashJoin [sr_store_sk#112], [s_store_sk#547], Inner, BuildRight, false\n      :                                :- *(16) Project [sr_store_sk#112, sr_return_amt#116, sr_net_loss#124]\n      :                                :  +- *(16) BroadcastHashJoin [sr_returned_date_sk#125], [d_date_sk#519], Inner, BuildRight, false\n      :                                :     :- *(16) Filter isnotnull(sr_store_sk#112)\n      :                                :     :  +- *(16) ColumnarToRow\n      :                                :     :     +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_store_sk#112,sr_return_amt#116,sr_net_loss#124,sr_returned_date_sk#125] Batched: true, DataFilters: [isnotnull(sr_store_sk#112)], Format: Parquet, Location: InMemoryFileIndex(2003 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(sr_returned_date_sk#125), dynamicpruningexpression(sr_returned_date_sk#125 IN dynamicp..., PushedFilters: [IsNotNull(sr_store_sk)], ReadSchema: struct<sr_store_sk:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>\n      :                                :     :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#740, 0, [d_date_sk#576], [id=#1625]\n      :                                :     +- BroadcastQueryStage 3\n      :                                :        +- ReusedExchange [d_date_sk#519], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=698]\n      :                                +- BroadcastQueryStage 5\n      :                                   +- ReusedExchange [s_store_sk#547], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=717]\n      :- Project [sales#511, returns#513, (profit#512 - profit_loss#514) AS profit#499, catalog channel AS channel#734, cs_call_center_sk#136 AS id#735]\n      :  +- BroadcastNestedLoopJoin BuildRight, Cross\n      :     :- HashAggregate(keys=[cs_call_center_sk#136], functions=[sum(UnscaledValue(cs_ext_sales_price#148)), sum(UnscaledValue(cs_net_profit#158))], output=[cs_call_center_sk#136, sales#511, profit#512])\n      :     :  +- ShuffleQueryStage 17\n      :     :     +- Exchange hashpartitioning(cs_call_center_sk#136, 200), ENSURE_REQUIREMENTS, [plan_id=1651]\n      :     :        +- *(11) HashAggregate(keys=[cs_call_center_sk#136], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#148)), partial_sum(UnscaledValue(cs_net_profit#158))], output=[cs_call_center_sk#136, sum#766L, sum#767L])\n      :     :           +- *(11) Project [cs_call_center_sk#136, cs_ext_sales_price#148, cs_net_profit#158]\n      :     :              +- *(11) BroadcastHashJoin [cs_sold_date_sk#159], [d_date_sk#576], Inner, BuildRight, false\n      :     :                 :- *(11) ColumnarToRow\n      :     :                 :  +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_call_center_sk#136,cs_ext_sales_price#148,cs_net_profit#158,cs_sold_date_sk#159] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#159), dynamicpruningexpression(cs_sold_date_sk#159 IN dynamicpruning#7..., PushedFilters: [], ReadSchema: struct<cs_call_center_sk:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>\n      :     :                 :        +- SubqueryBroadcast dynamicpruning#740, 0, [d_date_sk#576], [id=#1625]\n      :     :                 :           +- AdaptiveSparkPlan isFinalPlan=true\n                                             +- == Final Plan ==\n                                                BroadcastQueryStage 1\n                                                +- ReusedExchange [d_date_sk#576], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=698]\n                                             +- == Initial Plan ==\n                                                BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1622]\n                                                +- Project [d_date_sk#576]\n                                                   +- Filter (((isnotnull(d_date#578) AND (d_date#578 >= 1998-08-04)) AND (d_date#578 <= 1998-09-03)) AND isnotnull(d_date_sk#576))\n                                                      +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#576,d_date#578] Batched: true, DataFilters: [isnotnull(d_date#578), (d_date#578 >= 1998-08-04), (d_date#578 <= 1998-09-03), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n      :     :                 +- BroadcastQueryStage 7\n      :     :                    +- ReusedExchange [d_date_sk#576], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=698]\n      :     +- BroadcastQueryStage 25\n      :        +- BroadcastExchange IdentityBroadcastMode, [plan_id=3096]\n      :           +- *(19) HashAggregate(keys=[cr_call_center_sk#170], functions=[sum(UnscaledValue(cr_return_amount#177)), sum(UnscaledValue(cr_net_loss#185))], output=[returns#513, profit_loss#514])\n      :              +- AQEShuffleRead coalesced\n      :                 +- ShuffleQueryStage 18\n      :                    +- Exchange hashpartitioning(cr_call_center_sk#170, 200), ENSURE_REQUIREMENTS, [plan_id=1700]\n      :                       +- *(12) HashAggregate(keys=[cr_call_center_sk#170], functions=[partial_sum(UnscaledValue(cr_return_amount#177)), partial_sum(UnscaledValue(cr_net_loss#185))], output=[cr_call_center_sk#170, sum#770L, sum#771L])\n      :                          +- *(12) Project [cr_call_center_sk#170, cr_return_amount#177, cr_net_loss#185]\n      :                             +- *(12) BroadcastHashJoin [cr_returned_date_sk#186], [d_date_sk#604], Inner, BuildRight, false\n      :                                :- *(12) ColumnarToRow\n      :                                :  +- FileScan parquet spark_catalog.tpcds_100.catalog_returns[cr_call_center_sk#170,cr_return_amount#177,cr_net_loss#185,cr_returned_date_sk#186] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(2101 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cr_returned_date_sk#186), dynamicpruningexpression(cr_returned_date_sk#186 IN dynamicp..., PushedFilters: [], ReadSchema: struct<cr_call_center_sk:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>\n      :                                :        +- ReusedSubquery SubqueryBroadcast dynamicpruning#740, 0, [d_date_sk#576], [id=#1625]\n      :                                +- BroadcastQueryStage 9\n      :                                   +- ReusedExchange [d_date_sk#604], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=698]\n      +- Project [sales#515, coalesce(returns#517, 0.00) AS returns#502, (profit#516 - coalesce(profit_loss#518, 0.00)) AS profit#503, web channel AS channel#736, wp_web_page_sk#221 AS id#737]\n         +- BroadcastHashJoin [wp_web_page_sk#221], [wp_web_page_sk#688], LeftOuter, BuildRight, false\n            :- HashAggregate(keys=[wp_web_page_sk#221], functions=[sum(UnscaledValue(ws_ext_sales_price#209)), sum(UnscaledValue(ws_net_profit#219))], output=[wp_web_page_sk#221, sales#515, profit#516])\n            :  +- ShuffleQueryStage 19\n            :     +- Exchange hashpartitioning(wp_web_page_sk#221, 200), ENSURE_REQUIREMENTS, [plan_id=1771]\n            :        +- *(13) HashAggregate(keys=[wp_web_page_sk#221], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#209)), partial_sum(UnscaledValue(ws_net_profit#219))], output=[wp_web_page_sk#221, sum#774L, sum#775L])\n            :           +- *(13) Project [ws_ext_sales_price#209, ws_net_profit#219, wp_web_page_sk#221]\n            :              +- *(13) BroadcastHashJoin [ws_web_page_sk#198], [wp_web_page_sk#221], Inner, BuildRight, false\n            :                 :- *(13) Project [ws_web_page_sk#198, ws_ext_sales_price#209, ws_net_profit#219]\n            :                 :  +- *(13) BroadcastHashJoin [ws_sold_date_sk#220], [d_date_sk#632], Inner, BuildRight, false\n            :                 :     :- *(13) Filter isnotnull(ws_web_page_sk#198)\n            :                 :     :  +- *(13) ColumnarToRow\n            :                 :     :     +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_web_page_sk#198,ws_ext_sales_price#209,ws_net_profit#219,ws_sold_date_sk#220] Batched: true, DataFilters: [isnotnull(ws_web_page_sk#198)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#220), dynamicpruningexpression(ws_sold_date_sk#220 IN dynamicpruning#7..., PushedFilters: [IsNotNull(ws_web_page_sk)], ReadSchema: struct<ws_web_page_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>\n            :                 :     :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#740, 0, [d_date_sk#576], [id=#1625]\n            :                 :     +- BroadcastQueryStage 11\n            :                 :        +- ReusedExchange [d_date_sk#632], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=698]\n            :                 +- BroadcastQueryStage 12\n            :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=863]\n            :                       +- *(8) Filter isnotnull(wp_web_page_sk#221)\n            :                          +- *(8) ColumnarToRow\n            :                             +- FileScan parquet spark_catalog.tpcds_100.web_page[wp_web_page_sk#221] Batched: true, DataFilters: [isnotnull(wp_web_page_sk#221)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_page], PartitionFilters: [], PushedFilters: [IsNotNull(wp_web_page_sk)], ReadSchema: struct<wp_web_page_sk:int>\n            +- BroadcastQueryStage 23\n               +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2723]\n                  +- *(17) HashAggregate(keys=[wp_web_page_sk#688], functions=[sum(UnscaledValue(wr_return_amt#249)), sum(UnscaledValue(wr_net_loss#257))], output=[wp_web_page_sk#688, returns#517, profit_loss#518])\n                     +- AQEShuffleRead coalesced\n                        +- ShuffleQueryStage 20\n                           +- Exchange hashpartitioning(wp_web_page_sk#688, 200), ENSURE_REQUIREMENTS, [plan_id=1847]\n                              +- *(14) HashAggregate(keys=[wp_web_page_sk#688], functions=[partial_sum(UnscaledValue(wr_return_amt#249)), partial_sum(UnscaledValue(wr_net_loss#257))], output=[wp_web_page_sk#688, sum#778L, sum#779L])\n                                 +- *(14) Project [wr_return_amt#249, wr_net_loss#257, wp_web_page_sk#688]\n                                    +- *(14) BroadcastHashJoin [wr_web_page_sk#245], [wp_web_page_sk#688], Inner, BuildRight, false\n                                       :- *(14) Project [wr_web_page_sk#245, wr_return_amt#249, wr_net_loss#257]\n                                       :  +- *(14) BroadcastHashJoin [wr_returned_date_sk#258], [d_date_sk#660], Inner, BuildRight, false\n                                       :     :- *(14) Filter isnotnull(wr_web_page_sk#245)\n                                       :     :  +- *(14) ColumnarToRow\n                                       :     :     +- FileScan parquet spark_catalog.tpcds_100.web_returns[wr_web_page_sk#245,wr_return_amt#249,wr_net_loss#257,wr_returned_date_sk#258] Batched: true, DataFilters: [isnotnull(wr_web_page_sk#245)], Format: Parquet, Location: InMemoryFileIndex(2179 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_re..., PartitionFilters: [isnotnull(wr_returned_date_sk#258), dynamicpruningexpression(wr_returned_date_sk#258 IN dynamicp..., PushedFilters: [IsNotNull(wr_web_page_sk)], ReadSchema: struct<wr_web_page_sk:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>\n                                       :     :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#740, 0, [d_date_sk#576], [id=#1625]\n                                       :     +- BroadcastQueryStage 14\n                                       :        +- ReusedExchange [d_date_sk#660], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=698]\n                                       +- BroadcastQueryStage 16\n                                          +- ReusedExchange [wp_web_page_sk#688], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=863]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2750384,
        "inputRowCount" : 21029
      },
      "InitialPartitionNum" : 0,
      "PD" : {
        "2" : [ 3671, 3042, 3694, 2526, 1552, 2142, 3671, 1872, 2862, 1872, 2259, 4116, 2526, 2496, 3078, 3186, 4556, 2259, 3354, 2790, 1552, 3375, 3417, 2194, 2220, 2259, 2259, 3480, 1152, 2272, 3438, 3132, 2541, 2246, 1908, 2272, 2844, 1552, 2483, 3132, 1896, 1896, 2220, 2826, 1896, 3417, 2259, 2233, 3132, 2511, 1920, 2772, 3150, 2898, 1896, 2790, 3132, 2272, 1872, 1152, 2541, 1872, 1552, 2844, 1152, 2220, 2880, 2272, 1552, 3096, 3078, 1552, 2586, 3312, 4016, 2880, 1920, 1908, 2790, 1896, 1872, 2586, 2511, 2272, 2511, 3522, 1896, 2541, 2541, 2526, 2272, 2844, 1152, 2790, 2272, 3096, 1908, 3132, 3150, 3354, 2844, 2862, 3060, 2272, 2511, 2826, 4668, 2541, 3186, 3132, 3060, 2259, 2934, 3878, 3375, 2970, 2571, 2272, 2272, 1872, 2207, 1908, 4016, 2272, 2511, 2541, 2482, 1872, 3480, 2273, 1896, 3150, 2934, 2541, 1152, 2556, 2272, 2571, 1552, 2586, 2880, 1552, 1552, 2844, 3078, 1884, 3501, 2511, 1552, 2272, 1552, 2246, 3459, 4016, 2526, 3132, 3204, 2286, 2790, 2496, 2233, 2511, 2526, 2541, 2526, 2571, 0, 2272, 2934, 3096, 4066, 2556, 2826, 3459, 2844, 1896, 1552, 2880, 3459, 1884, 1552, 1932, 3186, 2273, 2541, 2526, 2844, 1872, 3375, 2556, 1152, 2844, 3168, 3114, 2259, 2844, 1152, 1552, 2246, 1896 ],
        "4" : [ 1152, 1152, 1152, 1152, 0, 0, 1552, 1152, 1152, 0, 0, 2272, 1152, 1152, 1152, 0, 0, 0, 1152, 1552, 0, 1552, 1152, 1552, 1152, 1152, 1152, 1152, 0, 0, 1552, 1872, 1872, 1552, 1152, 0, 1152, 1152, 1152, 1552, 0, 1152, 1152, 1552, 1152, 1152, 1152, 1152, 1872, 1552, 1152, 1552, 1552, 1872, 1152, 1552, 1552, 1552, 0, 0, 1152, 0, 0, 1152, 0, 1152, 1552, 0, 0, 1552, 1152, 0, 0, 1152, 0, 1152, 0, 1152, 1152, 1152, 0, 0, 1152, 0, 1152, 1872, 1152, 0, 1552, 0, 0, 1552, 0, 1152, 0, 0, 0, 1152, 1152, 1552, 1872, 1872, 1552, 1872, 0, 0, 1872, 1152, 1872, 1152, 1552, 0, 1152, 1872, 1152, 1152, 1552, 0, 0, 0, 0, 0, 1552, 0, 1152, 0, 0, 0, 1552, 1872, 1152, 1872, 1552, 0, 0, 1152, 1152, 1552, 0, 0, 0, 1152, 0, 1152, 0, 1552, 1552, 0, 0, 0, 1152, 1152, 1152, 1152, 1152, 2272, 1872, 0, 0, 1152, 1152, 1552, 1552, 0, 1152, 1872, 0, 1152, 1152, 1552, 1552, 2272, 1152, 1152, 1552, 0, 0, 0, 1152, 1152, 0, 0, 1872, 0, 1552, 0, 0, 0, 1152, 0, 0, 0, 0, 1152, 1152, 1152, 0, 0, 1552, 0 ],
        "0" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1152, 0, 0, 0, 0, 1152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1146, 1152, 0, 0, 0, 0, 1152, 1152, 0, 0, 0, 1152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1152, 1152, 0, 0, 0, 1152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1152, 0, 0, 0, 0, 0, 1152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 12,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 24 ],
      "Objectives" : {
        "DurationInMs" : 403,
        "TotalTasksDurationInMs" : 989,
        "IOBytes" : {
          "Total" : 763874,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 674813,
            "SW" : 89061
          }
        }
      }
    },
    "8" : {
      "QSLogical" : {
        "operators" : {
          "8" : {
            "sign" : 1820794396,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1048824,
                "rowCount" : 31
              },
              "compileTime" : {
                "sizeInBytes" : 360,
                "rowCount" : 30
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#519], BroadcastQueryStage 3 "
          },
          "4" : {
            "sign" : 1845685838,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29933971380,
                "rowCount" : 831499205
              },
              "compileTime" : {
                "sizeInBytes" : 29933971380,
                "rowCount" : 831499205
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (sr_returned_date_sk#125 = d_date_sk#519) "
          },
          "9" : {
            "sign" : 535725253,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1051792,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 4824,
                "rowCount" : 402
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#547], BroadcastQueryStage 5 "
          },
          "5" : {
            "sign" : 1906986805,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 858321760,
                "rowCount" : 26822555
              },
              "compileTime" : {
                "sizeInBytes" : 858321760,
                "rowCount" : 26822555
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_store_sk#112, sr_return_amt#116, sr_net_loss#124, sr_returned_date_sk#125] "
          },
          "6" : {
            "sign" : -2103513388,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3433287040,
                "rowCount" : 26822555
              },
              "compileTime" : {
                "sizeInBytes" : 3433287040,
                "rowCount" : 26822555
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(sr_returned_date_sk#125) AND isnotnull(sr_store_sk#112)) AND dynamicpruning#739 [sr_returned_date_sk#125]) "
          },
          "1" : {
            "sign" : 1612702496,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9359355051480,
                "rowCount" : 334262680410
              },
              "compileTime" : {
                "sizeInBytes" : 9359355051480,
                "rowCount" : 334262680410
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_return_amt#116, sr_net_loss#124, s_store_sk#547] "
          },
          "0" : {
            "sign" : -1377171193,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9359355051480,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 9359355051480,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [s_store_sk#547], [s_store_sk#547, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#509, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#510] "
          },
          "2" : {
            "sign" : 369260853,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 10696405773120,
                "rowCount" : 334262680410
              },
              "compileTime" : {
                "sizeInBytes" : 10696405773120,
                "rowCount" : 334262680410
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (sr_store_sk#112 = s_store_sk#547) "
          },
          "7" : {
            "sign" : -221723247,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3557606528,
                "rowCount" : 27793801
              },
              "compileTime" : {
                "sizeInBytes" : 3557606528,
                "rowCount" : 27793801
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#106, sr_item_sk#107, sr_customer_sk#108, sr_cdemo_sk#109, sr_hdemo_sk#110, sr_addr_sk#111, sr_store_sk#112, sr_reason_sk#113, sr_ticket_number#114L, sr_return_quantity#115, sr_return_amt#116, sr_return_tax#117, sr_return_amt_inc_tax#118, sr_fee#119, sr_return_ship_cost#120, sr_refunded_cash#121, sr_reversed_charge#122, sr_store_credit#123, sr_net_loss#124, sr_returned_date_sk#125], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : 2044220995,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 23281977740,
                "rowCount" : 831499205
              },
              "compileTime" : {
                "sizeInBytes" : 23281977740,
                "rowCount" : 831499205
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_store_sk#112, sr_return_amt#116, sr_net_loss#124] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalRelation",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [s_store_sk#547], [s_store_sk#547, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#509, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#510]\n+- Project [sr_return_amt#116, sr_net_loss#124, s_store_sk#547]\n   +- Join Inner, (sr_store_sk#112 = s_store_sk#547)\n      :- Project [sr_store_sk#112, sr_return_amt#116, sr_net_loss#124]\n      :  +- Join Inner, (sr_returned_date_sk#125 = d_date_sk#519)\n      :     :- Project [sr_store_sk#112, sr_return_amt#116, sr_net_loss#124, sr_returned_date_sk#125]\n      :     :  +- Filter ((isnotnull(sr_returned_date_sk#125) AND isnotnull(sr_store_sk#112)) AND dynamicpruning#739 [sr_returned_date_sk#125])\n      :     :     :  +- Project [d_date_sk#519]\n      :     :     :     +- Filter ((isnotnull(d_date#521) AND ((d_date#521 >= 1998-08-04) AND (d_date#521 <= 1998-09-03))) AND isnotnull(d_date_sk#519))\n      :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#519,d_date_id#520,d_date#521,d_month_seq#522,d_week_seq#523,d_quarter_seq#524,d_year#525,d_dow#526,d_moy#527,d_dom#528,d_qoy#529,d_fy_year#530,d_fy_quarter_seq#531,d_fy_week_seq#532,d_day_name#533,d_quarter_name#534,d_holiday#535,d_weekend#536,d_following_holiday#537,d_first_dom#538,d_last_dom#539,d_same_day_ly#540,d_same_day_lq#541,d_current_day#542,... 4 more fields] parquet\n      :     :     +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#106,sr_item_sk#107,sr_customer_sk#108,sr_cdemo_sk#109,sr_hdemo_sk#110,sr_addr_sk#111,sr_store_sk#112,sr_reason_sk#113,sr_ticket_number#114L,sr_return_quantity#115,sr_return_amt#116,sr_return_tax#117,sr_return_amt_inc_tax#118,sr_fee#119,sr_return_ship_cost#120,sr_refunded_cash#121,sr_reversed_charge#122,sr_store_credit#123,sr_net_loss#124,sr_returned_date_sk#125] parquet\n      :     +- LogicalQueryStage Project [d_date_sk#519], BroadcastQueryStage 3\n      +- LogicalQueryStage Project [s_store_sk#547], BroadcastQueryStage 5\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : 73471758,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1051792,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [s_store_sk#547] Arguments: 5 "
          },
          "4" : {
            "sign" : -442084163,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 29933971380,
            "rowCount" : 831499205,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [sr_returned_date_sk#125] Right keys [1]: [d_date_sk#519] Join type: Inner Join condition: None "
          },
          "5" : {
            "sign" : 258482382,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 858321760,
            "rowCount" : 26822555,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [sr_store_sk#112, sr_return_amt#116, sr_net_loss#124, sr_returned_date_sk#125] Condition : isnotnull(sr_store_sk#112) "
          },
          "6" : {
            "sign" : 871985264,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 858321760,
            "rowCount" : 26822555,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_returns Output [4]: [sr_store_sk#112, sr_return_amt#116, sr_net_loss#124, sr_returned_date_sk#125] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_returns/sr_returned_date_sk=2450820, ... 2002 entries] PartitionFilters: [isnotnull(sr_returned_date_sk#125), dynamicpruningexpression(sr_returned_date_sk#125 IN dynamicpruning#740)] PushedFilters: [IsNotNull(sr_store_sk)] ReadSchema: struct<sr_store_sk:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)> "
          },
          "1" : {
            "sign" : -1000839200,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 9359355051480,
            "rowCount" : 334262680410,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [sr_return_amt#116, sr_net_loss#124, s_store_sk#547] Input [4]: [sr_store_sk#112, sr_return_amt#116, sr_net_loss#124, s_store_sk#547] "
          },
          "0" : {
            "sign" : 818060521,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 9359355051480,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [3]: [sr_return_amt#116, sr_net_loss#124, s_store_sk#547] Keys [1]: [s_store_sk#547] Functions [2]: [partial_sum(UnscaledValue(sr_return_amt#116)), partial_sum(UnscaledValue(sr_net_loss#124))] Aggregate Attributes [2]: [sum#760L, sum#761L] Results [3]: [s_store_sk#547, sum#762L, sum#763L] "
          },
          "2" : {
            "sign" : -1947688299,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 10696405773120,
            "rowCount" : 334262680410,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [sr_store_sk#112] Right keys [1]: [s_store_sk#547] Join type: Inner Join condition: None "
          },
          "7" : {
            "sign" : 522474402,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#519] Arguments: 3 "
          },
          "3" : {
            "sign" : 1667149622,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 23281977740,
            "rowCount" : 831499205,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [sr_store_sk#112, sr_return_amt#116, sr_net_loss#124] Input [5]: [sr_store_sk#112, sr_return_amt#116, sr_net_loss#124, sr_returned_date_sk#125, d_date_sk#519] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_returns",
          "toId" : 5,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Filter",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "BroadcastQueryStage",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastHashJoin",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[s_store_sk#547], functions=[partial_sum(UnscaledValue(sr_return_amt#116)), partial_sum(UnscaledValue(sr_net_loss#124))], output=[s_store_sk#547, sum#762L, sum#763L])\n+- Project [sr_return_amt#116, sr_net_loss#124, s_store_sk#547]\n   +- BroadcastHashJoin [sr_store_sk#112], [s_store_sk#547], Inner, BuildRight, false\n      :- Project [sr_store_sk#112, sr_return_amt#116, sr_net_loss#124]\n      :  +- BroadcastHashJoin [sr_returned_date_sk#125], [d_date_sk#519], Inner, BuildRight, false\n      :     :- Filter isnotnull(sr_store_sk#112)\n      :     :  +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_store_sk#112,sr_return_amt#116,sr_net_loss#124,sr_returned_date_sk#125] Batched: true, DataFilters: [isnotnull(sr_store_sk#112)], Format: Parquet, Location: InMemoryFileIndex(2003 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(sr_returned_date_sk#125), dynamicpruningexpression(sr_returned_date_sk#125 IN dynamicp..., PushedFilters: [IsNotNull(sr_store_sk)], ReadSchema: struct<sr_store_sk:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>\n      :     :        +- ReusedSubquery SubqueryBroadcast dynamicpruning#740, 0, [d_date_sk#576], [id=#1625]\n      :     +- BroadcastQueryStage 3\n      :        +- ReusedExchange [d_date_sk#519], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=698]\n      +- BroadcastQueryStage 5\n         +- ReusedExchange [s_store_sk#547], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=717]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 860422376,
        "inputRowCount" : 26822988
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 8,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 14 ],
      "Objectives" : {
        "DurationInMs" : 3753,
        "TotalTasksDurationInMs" : 2353,
        "IOBytes" : {
          "Total" : 3130427,
          "Details" : {
            "IR" : 2966065,
            "IW" : 0,
            "SR" : 0,
            "SW" : 164362
          }
        }
      }
    },
    "4" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -1761970411,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2246060232,
                "rowCount" : 14397822
              },
              "compileTime" : {
                "sizeInBytes" : 2246060232,
                "rowCount" : 14397822
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(cr_returned_date_sk#186) AND dynamicpruning#741 [cr_returned_date_sk#186]) "
          },
          "5" : {
            "sign" : 754753016,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2246060232,
                "rowCount" : 14397822
              },
              "compileTime" : {
                "sizeInBytes" : 2246060232,
                "rowCount" : 14397822
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cr_returned_time_sk#160, cr_item_sk#161, cr_refunded_customer_sk#162, cr_refunded_cdemo_sk#163, cr_refunded_hdemo_sk#164, cr_refunded_addr_sk#165, cr_returning_customer_sk#166, cr_returning_cdemo_sk#167, cr_returning_hdemo_sk#168, cr_returning_addr_sk#169, cr_call_center_sk#170, cr_catalog_page_sk#171, cr_ship_mode_sk#172, cr_warehouse_sk#173, cr_reason_sk#174, cr_order_number#175L, cr_return_quantity#176, cr_return_amount#177, cr_return_tax#178, cr_return_amt_inc_tax#179, cr_fee#180, cr_return_ship_cost#181, cr_refunded_cash#182, cr_reversed_charge#183, ... 3 more fields], `spark_catalog`.`tpcds_100`.`catalog_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "6" : {
            "sign" : 449344985,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1048824,
                "rowCount" : 31
              },
              "compileTime" : {
                "sizeInBytes" : 360,
                "rowCount" : 30
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#604], BroadcastQueryStage 9 "
          },
          "1" : {
            "sign" : 1563032464,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 12497309496,
                "rowCount" : 446332482
              },
              "compileTime" : {
                "sizeInBytes" : 12497309496,
                "rowCount" : 446332482
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cr_call_center_sk#170, cr_return_amount#177, cr_net_loss#185] "
          },
          "0" : {
            "sign" : -534237344,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 768,
                "rowCount" : 32
              },
              "compileTime" : {
                "sizeInBytes" : 768,
                "rowCount" : 32
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [cr_call_center_sk#170], [MakeDecimal(sum(UnscaledValue(cr_return_amount#177)),17,2) AS returns#513, MakeDecimal(sum(UnscaledValue(cr_net_loss#185)),17,2) AS profit_loss#514] "
          },
          "2" : {
            "sign" : 403488252,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 16067969352,
                "rowCount" : 446332482
              },
              "compileTime" : {
                "sizeInBytes" : 16067969352,
                "rowCount" : 446332482
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cr_returned_date_sk#186 = d_date_sk#604) "
          },
          "3" : {
            "sign" : 976118808,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 460730304,
                "rowCount" : 14397822
              },
              "compileTime" : {
                "sizeInBytes" : 460730304,
                "rowCount" : 14397822
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cr_call_center_sk#170, cr_return_amount#177, cr_net_loss#185, cr_returned_date_sk#186] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalRelation",
          "toId" : 4,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Filter",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [cr_call_center_sk#170], [MakeDecimal(sum(UnscaledValue(cr_return_amount#177)),17,2) AS returns#513, MakeDecimal(sum(UnscaledValue(cr_net_loss#185)),17,2) AS profit_loss#514]\n+- Project [cr_call_center_sk#170, cr_return_amount#177, cr_net_loss#185]\n   +- Join Inner, (cr_returned_date_sk#186 = d_date_sk#604)\n      :- Project [cr_call_center_sk#170, cr_return_amount#177, cr_net_loss#185, cr_returned_date_sk#186]\n      :  +- Filter (isnotnull(cr_returned_date_sk#186) AND dynamicpruning#741 [cr_returned_date_sk#186])\n      :     :  +- Project [d_date_sk#604]\n      :     :     +- Filter ((isnotnull(d_date#606) AND ((d_date#606 >= 1998-08-04) AND (d_date#606 <= 1998-09-03))) AND isnotnull(d_date_sk#604))\n      :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#604,d_date_id#605,d_date#606,d_month_seq#607,d_week_seq#608,d_quarter_seq#609,d_year#610,d_dow#611,d_moy#612,d_dom#613,d_qoy#614,d_fy_year#615,d_fy_quarter_seq#616,d_fy_week_seq#617,d_day_name#618,d_quarter_name#619,d_holiday#620,d_weekend#621,d_following_holiday#622,d_first_dom#623,d_last_dom#624,d_same_day_ly#625,d_same_day_lq#626,d_current_day#627,... 4 more fields] parquet\n      :     +- Relation spark_catalog.tpcds_100.catalog_returns[cr_returned_time_sk#160,cr_item_sk#161,cr_refunded_customer_sk#162,cr_refunded_cdemo_sk#163,cr_refunded_hdemo_sk#164,cr_refunded_addr_sk#165,cr_returning_customer_sk#166,cr_returning_cdemo_sk#167,cr_returning_hdemo_sk#168,cr_returning_addr_sk#169,cr_call_center_sk#170,cr_catalog_page_sk#171,cr_ship_mode_sk#172,cr_warehouse_sk#173,cr_reason_sk#174,cr_order_number#175L,cr_return_quantity#176,cr_return_amount#177,cr_return_tax#178,cr_return_amt_inc_tax#179,cr_fee#180,cr_return_ship_cost#181,cr_refunded_cash#182,cr_reversed_charge#183,... 3 more fields] parquet\n      +- LogicalQueryStage Project [d_date_sk#604], BroadcastQueryStage 9\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -1967135701,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#604] Arguments: 9 "
          },
          "1" : {
            "sign" : -1742157551,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 12497309496,
            "rowCount" : 446332482,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [cr_call_center_sk#170, cr_return_amount#177, cr_net_loss#185] Input [5]: [cr_call_center_sk#170, cr_return_amount#177, cr_net_loss#185, cr_returned_date_sk#186, d_date_sk#604] "
          },
          "0" : {
            "sign" : -1092916586,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 768,
            "rowCount" : 32,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [3]: [cr_call_center_sk#170, cr_return_amount#177, cr_net_loss#185] Keys [1]: [cr_call_center_sk#170] Functions [2]: [partial_sum(UnscaledValue(cr_return_amount#177)), partial_sum(UnscaledValue(cr_net_loss#185))] Aggregate Attributes [2]: [sum#768L, sum#769L] Results [3]: [cr_call_center_sk#170, sum#770L, sum#771L] "
          },
          "2" : {
            "sign" : 1906208665,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 16067969352,
            "rowCount" : 446332482,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [cr_returned_date_sk#186] Right keys [1]: [d_date_sk#604] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : 1042780411,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 460730304,
            "rowCount" : 14397822,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.catalog_returns Output [4]: [cr_call_center_sk#170, cr_return_amount#177, cr_net_loss#185, cr_returned_date_sk#186] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_returns/cr_returned_date_sk=2450822, ... 2100 entries] PartitionFilters: [isnotnull(cr_returned_date_sk#186), dynamicpruningexpression(cr_returned_date_sk#186 IN dynamicpruning#740)] ReadSchema: struct<cr_call_center_sk:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.catalog_returns",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[cr_call_center_sk#170], functions=[partial_sum(UnscaledValue(cr_return_amount#177)), partial_sum(UnscaledValue(cr_net_loss#185))], output=[cr_call_center_sk#170, sum#770L, sum#771L])\n+- Project [cr_call_center_sk#170, cr_return_amount#177, cr_net_loss#185]\n   +- BroadcastHashJoin [cr_returned_date_sk#186], [d_date_sk#604], Inner, BuildRight, false\n      :- FileScan parquet spark_catalog.tpcds_100.catalog_returns[cr_call_center_sk#170,cr_return_amount#177,cr_net_loss#185,cr_returned_date_sk#186] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(2101 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cr_returned_date_sk#186), dynamicpruningexpression(cr_returned_date_sk#186 IN dynamicp..., PushedFilters: [], ReadSchema: struct<cr_call_center_sk:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>\n      :     +- ReusedSubquery SubqueryBroadcast dynamicpruning#740, 0, [d_date_sk#576], [id=#1625]\n      +- BroadcastQueryStage 9\n         +- ReusedExchange [d_date_sk#604], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=698]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 461779128,
        "inputRowCount" : 14397853
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 10 ],
      "Objectives" : {
        "DurationInMs" : 3382,
        "TotalTasksDurationInMs" : 6700,
        "IOBytes" : {
          "Total" : 1514149,
          "Details" : {
            "IR" : 1496306,
            "IW" : 0,
            "SR" : 0,
            "SW" : 17843
          }
        }
      }
    },
    "11" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -207313571,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 8192,
                "rowCount" : 256
              },
              "compileTime" : {
                "sizeInBytes" : 768,
                "rowCount" : 32
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cr_call_center_sk#170], [MakeDecimal(sum(UnscaledValue(cr_return_amount#177)),17,2) AS returns#513, MakeDecimal(sum(UnscaledValue(cr_net_loss#185)),17,2) AS profit_loss#514], HashAggregate(keys=[cr_call_center_sk#170], functions=[sum(UnscaledValue(cr_return_amount#177)), sum(UnscaledValue(cr_net_loss#185))]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [cr_call_center_sk#170], [MakeDecimal(sum(UnscaledValue(cr_return_amount#177)),17,2) AS returns#513, MakeDecimal(sum(UnscaledValue(cr_net_loss#185)),17,2) AS profit_loss#514], HashAggregate(keys=[cr_call_center_sk#170], functions=[sum(UnscaledValue(cr_return_amount#177)), sum(UnscaledValue(cr_net_loss#185))])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1119509701,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 8192,
            "rowCount" : 256,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [3]: [cr_call_center_sk#170, sum#770L, sum#771L] Keys [1]: [cr_call_center_sk#170] Functions [2]: [sum(UnscaledValue(cr_return_amount#177)), sum(UnscaledValue(cr_net_loss#185))] Aggregate Attributes [2]: [sum(UnscaledValue(cr_return_amount#177))#708L, sum(UnscaledValue(cr_net_loss#185))#709L] Results [2]: [MakeDecimal(sum(UnscaledValue(cr_return_amount#177))#708L,17,2) AS returns#513, MakeDecimal(sum(UnscaledValue(cr_net_loss#185))#709L,17,2) AS profit_loss#514] "
          },
          "1" : {
            "sign" : 551078225,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 768,
            "rowCount" : 32,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [cr_call_center_sk#170, sum#770L, sum#771L] Arguments: 18 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[cr_call_center_sk#170], functions=[sum(UnscaledValue(cr_return_amount#177)), sum(UnscaledValue(cr_net_loss#185))], output=[returns#513, profit_loss#514])\n+- ShuffleQueryStage 18\n   +- Exchange hashpartitioning(cr_call_center_sk#170, 200), ENSURE_REQUIREMENTS, [plan_id=1700]\n      +- *(12) HashAggregate(keys=[cr_call_center_sk#170], functions=[partial_sum(UnscaledValue(cr_return_amount#177)), partial_sum(UnscaledValue(cr_net_loss#185))], output=[cr_call_center_sk#170, sum#770L, sum#771L])\n         +- *(12) Project [cr_call_center_sk#170, cr_return_amount#177, cr_net_loss#185]\n            +- *(12) BroadcastHashJoin [cr_returned_date_sk#186], [d_date_sk#604], Inner, BuildRight, false\n               :- *(12) ColumnarToRow\n               :  +- FileScan parquet spark_catalog.tpcds_100.catalog_returns[cr_call_center_sk#170,cr_return_amount#177,cr_net_loss#185,cr_returned_date_sk#186] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(2101 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cr_returned_date_sk#186), dynamicpruningexpression(cr_returned_date_sk#186 IN dynamicp..., PushedFilters: [], ReadSchema: struct<cr_call_center_sk:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>\n               :        +- ReusedSubquery SubqueryBroadcast dynamicpruning#740, 0, [d_date_sk#576], [id=#1625]\n               +- BroadcastQueryStage 9\n                  +- ReusedExchange [d_date_sk#604], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=698]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 8192,
        "inputRowCount" : 256
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "1" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1152, 0, 0, 0, 0, 1152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1056, 1152, 0, 0, 0, 0, 1152, 1152, 0, 0, 0, 1152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1152, 1152, 0, 0, 0, 1152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1152, 0, 0, 0, 0, 0, 1152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 15,
        "FinishedTasksTotalTimeInMs" : 54078.0,
        "FinishedTasksDistributionInMs" : [ 181.0, 341.0, 511.0, 8187.0, 8844.0 ]
      },
      "QueryStageOptimizationId" : 11,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 20 ],
      "Objectives" : {
        "DurationInMs" : 57,
        "TotalTasksDurationInMs" : 52,
        "IOBytes" : {
          "Total" : 17843,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 17843,
            "SW" : 0
          }
        }
      }
    },
    "9" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1496956867,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 487776,
                "rowCount" : 15243
              },
              "compileTime" : {
                "sizeInBytes" : 11626749382080,
                "rowCount" : -1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [wp_web_page_sk#688], [wp_web_page_sk#688, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#517, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#518], HashAggregate(keys=[wp_web_page_sk#688], functions=[sum(UnscaledValue(wr_return_amt#249)), sum(UnscaledValue(wr_net_loss#257))]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [wp_web_page_sk#688], [wp_web_page_sk#688, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#517, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#518], HashAggregate(keys=[wp_web_page_sk#688], functions=[sum(UnscaledValue(wr_return_amt#249)), sum(UnscaledValue(wr_net_loss#257))])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1666541761,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 487776,
            "rowCount" : 15243,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [3]: [wp_web_page_sk#688, sum#778L, sum#779L] Keys [1]: [wp_web_page_sk#688] Functions [2]: [sum(UnscaledValue(wr_return_amt#249)), sum(UnscaledValue(wr_net_loss#257))] Aggregate Attributes [2]: [sum(UnscaledValue(wr_return_amt#249))#712L, sum(UnscaledValue(wr_net_loss#257))#713L] Results [3]: [wp_web_page_sk#688, MakeDecimal(sum(UnscaledValue(wr_return_amt#249))#712L,17,2) AS returns#517, MakeDecimal(sum(UnscaledValue(wr_net_loss#257))#713L,17,2) AS profit_loss#518] "
          },
          "1" : {
            "sign" : -1130952157,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 11626749382080,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [wp_web_page_sk#688, sum#778L, sum#779L] Arguments: 20 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[wp_web_page_sk#688], functions=[sum(UnscaledValue(wr_return_amt#249)), sum(UnscaledValue(wr_net_loss#257))], output=[wp_web_page_sk#688, returns#517, profit_loss#518])\n+- ShuffleQueryStage 20\n   +- Exchange hashpartitioning(wp_web_page_sk#688, 200), ENSURE_REQUIREMENTS, [plan_id=1847]\n      +- *(14) HashAggregate(keys=[wp_web_page_sk#688], functions=[partial_sum(UnscaledValue(wr_return_amt#249)), partial_sum(UnscaledValue(wr_net_loss#257))], output=[wp_web_page_sk#688, sum#778L, sum#779L])\n         +- *(14) Project [wr_return_amt#249, wr_net_loss#257, wp_web_page_sk#688]\n            +- *(14) BroadcastHashJoin [wr_web_page_sk#245], [wp_web_page_sk#688], Inner, BuildRight, false\n               :- *(14) Project [wr_web_page_sk#245, wr_return_amt#249, wr_net_loss#257]\n               :  +- *(14) BroadcastHashJoin [wr_returned_date_sk#258], [d_date_sk#660], Inner, BuildRight, false\n               :     :- *(14) Filter isnotnull(wr_web_page_sk#245)\n               :     :  +- *(14) ColumnarToRow\n               :     :     +- FileScan parquet spark_catalog.tpcds_100.web_returns[wr_web_page_sk#245,wr_return_amt#249,wr_net_loss#257,wr_returned_date_sk#258] Batched: true, DataFilters: [isnotnull(wr_web_page_sk#245)], Format: Parquet, Location: InMemoryFileIndex(2179 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_re..., PartitionFilters: [isnotnull(wr_returned_date_sk#258), dynamicpruningexpression(wr_returned_date_sk#258 IN dynamicp..., PushedFilters: [IsNotNull(wr_web_page_sk)], ReadSchema: struct<wr_web_page_sk:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>\n               :     :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#740, 0, [d_date_sk#576], [id=#1625]\n               :     +- BroadcastQueryStage 14\n               :        +- ReusedExchange [d_date_sk#660], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=698]\n               +- BroadcastQueryStage 16\n                  +- ReusedExchange [wp_web_page_sk#688], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=863]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 487776,
        "inputRowCount" : 15243
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "3" : [ 3435, 2904, 3592, 2416, 1552, 2019, 3509, 1774, 2654, 1781, 2046, 3839, 2378, 2414, 3006, 2934, 4356, 2069, 3267, 2673, 1484, 3192, 3255, 2169, 2060, 2012, 1934, 3252, 1080, 2038, 3327, 2872, 2427, 2030, 1767, 2048, 2620, 1509, 2285, 2895, 1647, 1790, 2117, 2642, 1782, 3288, 2142, 2125, 2964, 2417, 1852, 2718, 2937, 2737, 1747, 2664, 2890, 2146, 1758, 936, 2313, 1810, 1491, 2683, 936, 2068, 2799, 2051, 1430, 2976, 3024, 1446, 2378, 3267, 3818, 2640, 1852, 1781, 2698, 1781, 1832, 2416, 2414, 2056, 2402, 3210, 1852, 2361, 2317, 2428, 2013, 2736, 1152, 2643, 1999, 2845, 1718, 2937, 3114, 3225, 2712, 2625, 2973, 2125, 2294, 2724, 4430, 2413, 2982, 3024, 2854, 2017, 2667, 3621, 3204, 2653, 2361, 2086, 2087, 1841, 2044, 1763, 3792, 2088, 2383, 2375, 2333, 1715, 3186, 2123, 1812, 2973, 2685, 2497, 1152, 2499, 2108, 2402, 1432, 2347, 2673, 1412, 1407, 2730, 2937, 1776, 3291, 2348, 1412, 2131, 1304, 2052, 3234, 3857, 2319, 2962, 2868, 2094, 2620, 2375, 2080, 2307, 2483, 2455, 2361, 2443, 0, 2095, 2646, 2919, 3811, 2433, 2673, 3228, 2623, 1785, 1346, 2666, 3267, 1832, 1552, 1781, 2991, 2054, 2542, 2360, 2593, 1756, 3228, 2409, 1080, 2622, 2905, 2934, 2131, 2535, 1080, 1493, 2181, 1758 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 23,
        "FinishedTasksTotalTimeInMs" : 43936.0,
        "FinishedTasksDistributionInMs" : [ 181.0, 383.0, 2292.0, 3315.0, 3970.0 ]
      },
      "QueryStageOptimizationId" : 9,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 16 ],
      "Objectives" : {
        "DurationInMs" : 914,
        "TotalTasksDurationInMs" : 298,
        "IOBytes" : {
          "Total" : 457231,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 457231,
            "SW" : 0
          }
        }
      }
    },
    "13" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 955108812,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 8000,
                "rowCount" : 100
              },
              "compileTime" : {
                "sizeInBytes" : 8000,
                "rowCount" : 100
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "1" : {
            "sign" : -1970437103,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 678494256608619195153,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 678494256608619195153,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1772972406,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 678494256608619195153,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 678494256608619195153,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#727 ASC NULLS FIRST, id#728 ASC NULLS FIRST], true "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#727 ASC NULLS FIRST, id#728 ASC NULLS FIRST], true\n      +- Aggregate [channel#727, id#728, spark_grouping_id#726L], [channel#727, id#728, sum(sales#507) AS sales#504, sum(returns#495) AS returns#505, sum(profit#496) AS profit#506]\n         +- Expand [[sales#507, returns#495, profit#496, channel#724, id#725, 0], [sales#507, returns#495, profit#496, channel#724, null, 1], [sales#507, returns#495, profit#496, null, null, 3]], [sales#507, returns#495, profit#496, channel#727, id#728, spark_grouping_id#726L]\n            +- Union false, false\n               :- Project [sales#507, coalesce(returns#509, 0.00) AS returns#495, (profit#508 - coalesce(profit_loss#510, 0.00)) AS profit#496, store channel AS channel#724, s_store_sk#77 AS id#725]\n               :  +- Join LeftOuter, (s_store_sk#77 = s_store_sk#547)\n               :     :- LogicalQueryStage Aggregate [s_store_sk#77], [s_store_sk#77, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#40)),17,2) AS sales#507, MakeDecimal(sum(UnscaledValue(ss_net_profit#47)),17,2) AS profit#508], HashAggregate(keys=[s_store_sk#77], functions=[sum(UnscaledValue(ss_ext_sales_price#40)), sum(UnscaledValue(ss_net_profit#47))])\n               :     +- LogicalQueryStage LogicalQueryStage Aggregate [s_store_sk#547], [s_store_sk#547, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#509, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#510], HashAggregate(keys=[s_store_sk#547], functions=[sum(UnscaledValue(sr_return_amt#116)), sum(UnscaledValue(sr_net_loss#124))]), BroadcastQueryStage 24\n               :- Project [sales#511, returns#513, (profit#512 - profit_loss#514) AS profit#499, catalog channel AS channel#734, cs_call_center_sk#136 AS id#735]\n               :  +- Join Cross\n               :     :- LogicalQueryStage Aggregate [cs_call_center_sk#136], [cs_call_center_sk#136, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#148)),17,2) AS sales#511, MakeDecimal(sum(UnscaledValue(cs_net_profit#158)),17,2) AS profit#512], HashAggregate(keys=[cs_call_center_sk#136], functions=[sum(UnscaledValue(cs_ext_sales_price#148)), sum(UnscaledValue(cs_net_profit#158))])\n               :     +- LogicalQueryStage Aggregate [cr_call_center_sk#170], [MakeDecimal(sum(UnscaledValue(cr_return_amount#177)),17,2) AS returns#513, MakeDecimal(sum(UnscaledValue(cr_net_loss#185)),17,2) AS profit_loss#514], HashAggregate(keys=[cr_call_center_sk#170], functions=[sum(UnscaledValue(cr_return_amount#177)), sum(UnscaledValue(cr_net_loss#185))])\n               +- Project [sales#515, coalesce(returns#517, 0.00) AS returns#502, (profit#516 - coalesce(profit_loss#518, 0.00)) AS profit#503, web channel AS channel#736, wp_web_page_sk#221 AS id#737]\n                  +- Join LeftOuter, (wp_web_page_sk#221 = wp_web_page_sk#688)\n                     :- LogicalQueryStage Aggregate [wp_web_page_sk#221], [wp_web_page_sk#221, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#209)),17,2) AS sales#515, MakeDecimal(sum(UnscaledValue(ws_net_profit#219)),17,2) AS profit#516], HashAggregate(keys=[wp_web_page_sk#221], functions=[sum(UnscaledValue(ws_ext_sales_price#209)), sum(UnscaledValue(ws_net_profit#219))])\n                     +- LogicalQueryStage LogicalQueryStage Aggregate [wp_web_page_sk#688], [wp_web_page_sk#688, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#517, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#518], HashAggregate(keys=[wp_web_page_sk#688], functions=[sum(UnscaledValue(wr_return_amt#249)), sum(UnscaledValue(wr_net_loss#257))]), BroadcastQueryStage 23\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1219686149,
            "className" : "org.apache.spark.sql.execution.TakeOrderedAndProjectExec",
            "sizeInBytes" : 8000,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) TakeOrderedAndProject Input [5]: [channel#727, id#728, sales#504, returns#505, profit#506] Arguments: 100, [channel#727 ASC NULLS FIRST, id#728 ASC NULLS FIRST], [channel#727, id#728, sales#504, returns#505, profit#506] "
          },
          "1" : {
            "sign" : 278194831,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 178944,
            "rowCount" : 1243,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [9]: [channel#727, id#728, spark_grouping_id#726L, sum#750, isEmpty#751, sum#752, isEmpty#753, sum#754, isEmpty#755] Keys [3]: [channel#727, id#728, spark_grouping_id#726L] Functions [3]: [sum(sales#507), sum(returns#495), sum(profit#496)] Aggregate Attributes [3]: [sum(sales#507)#721, sum(returns#495)#722, sum(profit#496)#723] Results [5]: [channel#727, id#728, sum(sales#507)#721 AS sales#504, sum(returns#495)#722 AS returns#505, sum(profit#496)#723 AS profit#506] "
          },
          "2" : {
            "sign" : -1900417428,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 678494256608619195153,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [9]: [channel#727, id#728, spark_grouping_id#726L, sum#750, isEmpty#751, sum#752, isEmpty#753, sum#754, isEmpty#755] Arguments: 26 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "ShuffleQueryStage",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "TakeOrderedAndProject",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "TakeOrderedAndProject(limit=100, orderBy=[channel#727 ASC NULLS FIRST,id#728 ASC NULLS FIRST], output=[channel#727,id#728,sales#504,returns#505,profit#506])\n+- HashAggregate(keys=[channel#727, id#728, spark_grouping_id#726L], functions=[sum(sales#507), sum(returns#495), sum(profit#496)], output=[channel#727, id#728, sales#504, returns#505, profit#506])\n   +- ShuffleQueryStage 26\n      +- Exchange hashpartitioning(channel#727, id#728, spark_grouping_id#726L, 200), ENSURE_REQUIREMENTS, [plan_id=3251]\n         +- *(23) HashAggregate(keys=[channel#727, id#728, spark_grouping_id#726L], functions=[partial_sum(sales#507), partial_sum(returns#495), partial_sum(profit#496)], output=[channel#727, id#728, spark_grouping_id#726L, sum#750, isEmpty#751, sum#752, isEmpty#753, sum#754, isEmpty#755])\n            +- *(23) Expand [[sales#507, returns#495, profit#496, channel#724, id#725, 0], [sales#507, returns#495, profit#496, channel#724, null, 1], [sales#507, returns#495, profit#496, null, null, 3]], [sales#507, returns#495, profit#496, channel#727, id#728, spark_grouping_id#726L]\n               +- Union\n                  :- *(20) Project [sales#507, coalesce(returns#509, 0.00) AS returns#495, (profit#508 - coalesce(profit_loss#510, 0.00)) AS profit#496, store channel AS channel#724, s_store_sk#77 AS id#725]\n                  :  +- *(20) BroadcastHashJoin [s_store_sk#77], [s_store_sk#547], LeftOuter, BuildRight, false\n                  :     :- *(20) HashAggregate(keys=[s_store_sk#77], functions=[sum(UnscaledValue(ss_ext_sales_price#40)), sum(UnscaledValue(ss_net_profit#47))], output=[s_store_sk#77, sales#507, profit#508])\n                  :     :  +- AQEShuffleRead coalesced\n                  :     :     +- ShuffleQueryStage 21\n                  :     :        +- Exchange hashpartitioning(s_store_sk#77, 200), ENSURE_REQUIREMENTS, [plan_id=2356]\n                  :     :           +- *(15) HashAggregate(keys=[s_store_sk#77], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#40)), partial_sum(UnscaledValue(ss_net_profit#47))], output=[s_store_sk#77, sum#758L, sum#759L])\n                  :     :              +- *(15) Project [ss_ext_sales_price#40, ss_net_profit#47, s_store_sk#77]\n                  :     :                 +- *(15) BroadcastHashJoin [ss_store_sk#32], [s_store_sk#77], Inner, BuildRight, false\n                  :     :                    :- *(15) Project [ss_store_sk#32, ss_ext_sales_price#40, ss_net_profit#47]\n                  :     :                    :  +- *(15) BroadcastHashJoin [ss_sold_date_sk#48], [d_date_sk#49], Inner, BuildRight, false\n                  :     :                    :     :- *(15) Filter isnotnull(ss_store_sk#32)\n                  :     :                    :     :  +- *(15) ColumnarToRow\n                  :     :                    :     :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_store_sk#32,ss_ext_sales_price#40,ss_net_profit#47,ss_sold_date_sk#48] Batched: true, DataFilters: [isnotnull(ss_store_sk#32)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#48), dynamicpruningexpression(ss_sold_date_sk#48 IN dynamicpruning#740)], PushedFilters: [IsNotNull(ss_store_sk)], ReadSchema: struct<ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>\n                  :     :                    :     :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#740, 0, [d_date_sk#576], [id=#1625]\n                  :     :                    :     +- BroadcastQueryStage 0\n                  :     :                    :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=698]\n                  :     :                    :           +- *(1) Project [d_date_sk#49]\n                  :     :                    :              +- *(1) Filter (((isnotnull(d_date#51) AND (d_date#51 >= 1998-08-04)) AND (d_date#51 <= 1998-09-03)) AND isnotnull(d_date_sk#49))\n                  :     :                    :                 +- *(1) ColumnarToRow\n                  :     :                    :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#49,d_date#51] Batched: true, DataFilters: [isnotnull(d_date#51), (d_date#51 >= 1998-08-04), (d_date#51 <= 1998-09-03), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n                  :     :                    +- BroadcastQueryStage 1\n                  :     :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=717]\n                  :     :                          +- *(2) Filter isnotnull(s_store_sk#77)\n                  :     :                             +- *(2) ColumnarToRow\n                  :     :                                +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#77] Batched: true, DataFilters: [isnotnull(s_store_sk#77)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int>\n                  :     +- BroadcastQueryStage 24\n                  :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2888]\n                  :           +- *(18) HashAggregate(keys=[s_store_sk#547], functions=[sum(UnscaledValue(sr_return_amt#116)), sum(UnscaledValue(sr_net_loss#124))], output=[s_store_sk#547, returns#509, profit_loss#510])\n                  :              +- AQEShuffleRead coalesced\n                  :                 +- ShuffleQueryStage 22\n                  :                    +- Exchange hashpartitioning(s_store_sk#547, 200), ENSURE_REQUIREMENTS, [plan_id=2432]\n                  :                       +- *(16) HashAggregate(keys=[s_store_sk#547], functions=[partial_sum(UnscaledValue(sr_return_amt#116)), partial_sum(UnscaledValue(sr_net_loss#124))], output=[s_store_sk#547, sum#762L, sum#763L])\n                  :                          +- *(16) Project [sr_return_amt#116, sr_net_loss#124, s_store_sk#547]\n                  :                             +- *(16) BroadcastHashJoin [sr_store_sk#112], [s_store_sk#547], Inner, BuildRight, false\n                  :                                :- *(16) Project [sr_store_sk#112, sr_return_amt#116, sr_net_loss#124]\n                  :                                :  +- *(16) BroadcastHashJoin [sr_returned_date_sk#125], [d_date_sk#519], Inner, BuildRight, false\n                  :                                :     :- *(16) Filter isnotnull(sr_store_sk#112)\n                  :                                :     :  +- *(16) ColumnarToRow\n                  :                                :     :     +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_store_sk#112,sr_return_amt#116,sr_net_loss#124,sr_returned_date_sk#125] Batched: true, DataFilters: [isnotnull(sr_store_sk#112)], Format: Parquet, Location: InMemoryFileIndex(2003 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(sr_returned_date_sk#125), dynamicpruningexpression(sr_returned_date_sk#125 IN dynamicp..., PushedFilters: [IsNotNull(sr_store_sk)], ReadSchema: struct<sr_store_sk:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>\n                  :                                :     :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#740, 0, [d_date_sk#576], [id=#1625]\n                  :                                :     +- BroadcastQueryStage 3\n                  :                                :        +- ReusedExchange [d_date_sk#519], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=698]\n                  :                                +- BroadcastQueryStage 5\n                  :                                   +- ReusedExchange [s_store_sk#547], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=717]\n                  :- *(21) Project [sales#511, returns#513, (profit#512 - profit_loss#514) AS profit#499, catalog channel AS channel#734, cs_call_center_sk#136 AS id#735]\n                  :  +- *(21) BroadcastNestedLoopJoin BuildRight, Cross\n                  :     :- *(21) HashAggregate(keys=[cs_call_center_sk#136], functions=[sum(UnscaledValue(cs_ext_sales_price#148)), sum(UnscaledValue(cs_net_profit#158))], output=[cs_call_center_sk#136, sales#511, profit#512])\n                  :     :  +- AQEShuffleRead coalesced\n                  :     :     +- ShuffleQueryStage 17\n                  :     :        +- Exchange hashpartitioning(cs_call_center_sk#136, 200), ENSURE_REQUIREMENTS, [plan_id=1651]\n                  :     :           +- *(11) HashAggregate(keys=[cs_call_center_sk#136], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#148)), partial_sum(UnscaledValue(cs_net_profit#158))], output=[cs_call_center_sk#136, sum#766L, sum#767L])\n                  :     :              +- *(11) Project [cs_call_center_sk#136, cs_ext_sales_price#148, cs_net_profit#158]\n                  :     :                 +- *(11) BroadcastHashJoin [cs_sold_date_sk#159], [d_date_sk#576], Inner, BuildRight, false\n                  :     :                    :- *(11) ColumnarToRow\n                  :     :                    :  +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_call_center_sk#136,cs_ext_sales_price#148,cs_net_profit#158,cs_sold_date_sk#159] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#159), dynamicpruningexpression(cs_sold_date_sk#159 IN dynamicpruning#7..., PushedFilters: [], ReadSchema: struct<cs_call_center_sk:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>\n                  :     :                    :        +- SubqueryBroadcast dynamicpruning#740, 0, [d_date_sk#576], [id=#1625]\n                  :     :                    :           +- AdaptiveSparkPlan isFinalPlan=true\n                                                            +- == Final Plan ==\n                                                               BroadcastQueryStage 1\n                                                               +- ReusedExchange [d_date_sk#576], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=698]\n                                                            +- == Initial Plan ==\n                                                               BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1622]\n                                                               +- Project [d_date_sk#576]\n                                                                  +- Filter (((isnotnull(d_date#578) AND (d_date#578 >= 1998-08-04)) AND (d_date#578 <= 1998-09-03)) AND isnotnull(d_date_sk#576))\n                                                                     +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#576,d_date#578] Batched: true, DataFilters: [isnotnull(d_date#578), (d_date#578 >= 1998-08-04), (d_date#578 <= 1998-09-03), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n                  :     :                    +- BroadcastQueryStage 7\n                  :     :                       +- ReusedExchange [d_date_sk#576], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=698]\n                  :     +- BroadcastQueryStage 25\n                  :        +- BroadcastExchange IdentityBroadcastMode, [plan_id=3096]\n                  :           +- *(19) HashAggregate(keys=[cr_call_center_sk#170], functions=[sum(UnscaledValue(cr_return_amount#177)), sum(UnscaledValue(cr_net_loss#185))], output=[returns#513, profit_loss#514])\n                  :              +- AQEShuffleRead coalesced\n                  :                 +- ShuffleQueryStage 18\n                  :                    +- Exchange hashpartitioning(cr_call_center_sk#170, 200), ENSURE_REQUIREMENTS, [plan_id=1700]\n                  :                       +- *(12) HashAggregate(keys=[cr_call_center_sk#170], functions=[partial_sum(UnscaledValue(cr_return_amount#177)), partial_sum(UnscaledValue(cr_net_loss#185))], output=[cr_call_center_sk#170, sum#770L, sum#771L])\n                  :                          +- *(12) Project [cr_call_center_sk#170, cr_return_amount#177, cr_net_loss#185]\n                  :                             +- *(12) BroadcastHashJoin [cr_returned_date_sk#186], [d_date_sk#604], Inner, BuildRight, false\n                  :                                :- *(12) ColumnarToRow\n                  :                                :  +- FileScan parquet spark_catalog.tpcds_100.catalog_returns[cr_call_center_sk#170,cr_return_amount#177,cr_net_loss#185,cr_returned_date_sk#186] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(2101 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cr_returned_date_sk#186), dynamicpruningexpression(cr_returned_date_sk#186 IN dynamicp..., PushedFilters: [], ReadSchema: struct<cr_call_center_sk:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>\n                  :                                :        +- ReusedSubquery SubqueryBroadcast dynamicpruning#740, 0, [d_date_sk#576], [id=#1625]\n                  :                                +- BroadcastQueryStage 9\n                  :                                   +- ReusedExchange [d_date_sk#604], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=698]\n                  +- *(22) Project [sales#515, coalesce(returns#517, 0.00) AS returns#502, (profit#516 - coalesce(profit_loss#518, 0.00)) AS profit#503, web channel AS channel#736, wp_web_page_sk#221 AS id#737]\n                     +- *(22) BroadcastHashJoin [wp_web_page_sk#221], [wp_web_page_sk#688], LeftOuter, BuildRight, false\n                        :- *(22) HashAggregate(keys=[wp_web_page_sk#221], functions=[sum(UnscaledValue(ws_ext_sales_price#209)), sum(UnscaledValue(ws_net_profit#219))], output=[wp_web_page_sk#221, sales#515, profit#516])\n                        :  +- AQEShuffleRead coalesced\n                        :     +- ShuffleQueryStage 19\n                        :        +- Exchange hashpartitioning(wp_web_page_sk#221, 200), ENSURE_REQUIREMENTS, [plan_id=1771]\n                        :           +- *(13) HashAggregate(keys=[wp_web_page_sk#221], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#209)), partial_sum(UnscaledValue(ws_net_profit#219))], output=[wp_web_page_sk#221, sum#774L, sum#775L])\n                        :              +- *(13) Project [ws_ext_sales_price#209, ws_net_profit#219, wp_web_page_sk#221]\n                        :                 +- *(13) BroadcastHashJoin [ws_web_page_sk#198], [wp_web_page_sk#221], Inner, BuildRight, false\n                        :                    :- *(13) Project [ws_web_page_sk#198, ws_ext_sales_price#209, ws_net_profit#219]\n                        :                    :  +- *(13) BroadcastHashJoin [ws_sold_date_sk#220], [d_date_sk#632], Inner, BuildRight, false\n                        :                    :     :- *(13) Filter isnotnull(ws_web_page_sk#198)\n                        :                    :     :  +- *(13) ColumnarToRow\n                        :                    :     :     +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_web_page_sk#198,ws_ext_sales_price#209,ws_net_profit#219,ws_sold_date_sk#220] Batched: true, DataFilters: [isnotnull(ws_web_page_sk#198)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#220), dynamicpruningexpression(ws_sold_date_sk#220 IN dynamicpruning#7..., PushedFilters: [IsNotNull(ws_web_page_sk)], ReadSchema: struct<ws_web_page_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>\n                        :                    :     :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#740, 0, [d_date_sk#576], [id=#1625]\n                        :                    :     +- BroadcastQueryStage 11\n                        :                    :        +- ReusedExchange [d_date_sk#632], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=698]\n                        :                    +- BroadcastQueryStage 12\n                        :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=863]\n                        :                          +- *(8) Filter isnotnull(wp_web_page_sk#221)\n                        :                             +- *(8) ColumnarToRow\n                        :                                +- FileScan parquet spark_catalog.tpcds_100.web_page[wp_web_page_sk#221] Batched: true, DataFilters: [isnotnull(wp_web_page_sk#221)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_page], PartitionFilters: [], PushedFilters: [IsNotNull(wp_web_page_sk)], ReadSchema: struct<wp_web_page_sk:int>\n                        +- BroadcastQueryStage 23\n                           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2723]\n                              +- *(17) HashAggregate(keys=[wp_web_page_sk#688], functions=[sum(UnscaledValue(wr_return_amt#249)), sum(UnscaledValue(wr_net_loss#257))], output=[wp_web_page_sk#688, returns#517, profit_loss#518])\n                                 +- AQEShuffleRead coalesced\n                                    +- ShuffleQueryStage 20\n                                       +- Exchange hashpartitioning(wp_web_page_sk#688, 200), ENSURE_REQUIREMENTS, [plan_id=1847]\n                                          +- *(14) HashAggregate(keys=[wp_web_page_sk#688], functions=[partial_sum(UnscaledValue(wr_return_amt#249)), partial_sum(UnscaledValue(wr_net_loss#257))], output=[wp_web_page_sk#688, sum#778L, sum#779L])\n                                             +- *(14) Project [wr_return_amt#249, wr_net_loss#257, wp_web_page_sk#688]\n                                                +- *(14) BroadcastHashJoin [wr_web_page_sk#245], [wp_web_page_sk#688], Inner, BuildRight, false\n                                                   :- *(14) Project [wr_web_page_sk#245, wr_return_amt#249, wr_net_loss#257]\n                                                   :  +- *(14) BroadcastHashJoin [wr_returned_date_sk#258], [d_date_sk#660], Inner, BuildRight, false\n                                                   :     :- *(14) Filter isnotnull(wr_web_page_sk#245)\n                                                   :     :  +- *(14) ColumnarToRow\n                                                   :     :     +- FileScan parquet spark_catalog.tpcds_100.web_returns[wr_web_page_sk#245,wr_return_amt#249,wr_net_loss#257,wr_returned_date_sk#258] Batched: true, DataFilters: [isnotnull(wr_web_page_sk#245)], Format: Parquet, Location: InMemoryFileIndex(2179 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_re..., PartitionFilters: [isnotnull(wr_returned_date_sk#258), dynamicpruningexpression(wr_returned_date_sk#258 IN dynamicp..., PushedFilters: [IsNotNull(wr_web_page_sk)], ReadSchema: struct<wr_web_page_sk:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>\n                                                   :     :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#740, 0, [d_date_sk#576], [id=#1625]\n                                                   :     +- BroadcastQueryStage 14\n                                                   :        +- ReusedExchange [d_date_sk#660], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=698]\n                                                   +- BroadcastQueryStage 16\n                                                      +- ReusedExchange [wp_web_page_sk#688], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=863]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 178944,
        "inputRowCount" : 1243
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "6" : [ 601, 527, 405, 851, 524, 251, 695, 731, 460, 561, 680, 511, 490, 384, 334, 312, 524, 368, 773, 524, 405, 460, 575, 527, 646, 619, 228, 334, 524, 524, 483, 905, 276, 646, 251, 575, 207, 345, 563, 490, 619, 156, 561, 490, 276, 345, 405, 731, 490, 601, 304, 276, 384, 363, 368, 445, 396, 668, 476, 619, 460, 207, 561, 539, 405, 460, 757, 207, 851, 368, 511, 541, 524, 251, 304, 432, 460, 601, 368, 432, 757, 524, 541, 731, 363, 407, 741, 228, 458, 460, 368, 334, 334, 557, 524, 304, 483, 414, 601, 407, 251, 276, 524, 407, 502, 601, 612, 789, 541, 432, 396, 490, 593, 555, 490, 368, 407, 304, 646, 697, 312, 570, 334, 561, 790, 652, 749, 541, 646, 156, 304, 490, 561, 334, 460, 601, 276, 251, 432, 490, 432, 304, 490, 458, 619, 276, 476, 251, 435, 644, 490, 407, 363, 251, 368, 405, 407, 407, 334, 524, 363, 619, 519, 483, 524, 334, 251, 490, 524, 363, 432, 524, 460, 790, 418, 523, 384, 228, 432, 334, 312, 276, 156, 334, 276, 405, 460, 790, 432, 511, 334, 368, 524, 524, 334, 741, 384, 490, 458, 445 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 13,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 29 ],
      "Objectives" : {
        "DurationInMs" : 185,
        "TotalTasksDurationInMs" : 171,
        "IOBytes" : {
          "Total" : 89061,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 89061,
            "SW" : 0
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "8" : {
            "sign" : -1642651491,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1048824,
                "rowCount" : 31
              },
              "compileTime" : {
                "sizeInBytes" : 360,
                "rowCount" : 30
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#632], BroadcastQueryStage 11 "
          },
          "4" : {
            "sign" : -1425629660,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 80313731244,
                "rowCount" : 2230936979
              },
              "compileTime" : {
                "sizeInBytes" : 80313731244,
                "rowCount" : 2230936979
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_sold_date_sk#220 = d_date_sk#632) "
          },
          "9" : {
            "sign" : -1179502681,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1064896,
                "rowCount" : 2040
              },
              "compileTime" : {
                "sizeInBytes" : 24480,
                "rowCount" : 2040
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [wp_web_page_sk#221], BroadcastQueryStage 12 "
          },
          "5" : {
            "sign" : -1171423834,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2302902688,
                "rowCount" : 71965709
              },
              "compileTime" : {
                "sizeInBytes" : 2302902688,
                "rowCount" : 71965709
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_web_page_sk#198, ws_ext_sales_price#209, ws_net_profit#219, ws_sold_date_sk#220] "
          },
          "6" : {
            "sign" : 1805309809,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14968867472,
                "rowCount" : 71965709
              },
              "compileTime" : {
                "sizeInBytes" : 14968867472,
                "rowCount" : 71965709
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ws_sold_date_sk#220) AND isnotnull(ws_web_page_sk#198)) AND dynamicpruning#742 [ws_sold_date_sk#220]) "
          },
          "1" : {
            "sign" : 685678660,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 127431120240480,
                "rowCount" : 4551111437160
              },
              "compileTime" : {
                "sizeInBytes" : 127431120240480,
                "rowCount" : 4551111437160
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ext_sales_price#209, ws_net_profit#219, wp_web_page_sk#221] "
          },
          "0" : {
            "sign" : -56949591,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 127431120240480,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 127431120240480,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [wp_web_page_sk#221], [wp_web_page_sk#221, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#209)),17,2) AS sales#515, MakeDecimal(sum(UnscaledValue(ws_net_profit#219)),17,2) AS profit#516] "
          },
          "2" : {
            "sign" : 201888251,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 145635565989120,
                "rowCount" : 4551111437160
              },
              "compileTime" : {
                "sizeInBytes" : 145635565989120,
                "rowCount" : 4551111437160
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ws_web_page_sk#198 = wp_web_page_sk#221) "
          },
          "7" : {
            "sign" : 2130051318,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              },
              "compileTime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#187, ws_ship_date_sk#188, ws_item_sk#189, ws_bill_customer_sk#190, ws_bill_cdemo_sk#191, ws_bill_hdemo_sk#192, ws_bill_addr_sk#193, ws_ship_customer_sk#194, ws_ship_cdemo_sk#195, ws_ship_hdemo_sk#196, ws_ship_addr_sk#197, ws_web_page_sk#198, ws_web_site_sk#199, ws_ship_mode_sk#200, ws_warehouse_sk#201, ws_promo_sk#202, ws_order_number#203L, ws_quantity#204, ws_wholesale_cost#205, ws_list_price#206, ws_sales_price#207, ws_ext_discount_amt#208, ws_ext_sales_price#209, ws_ext_wholesale_cost#210, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : 2121333357,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 62466235412,
                "rowCount" : 2230936979
              },
              "compileTime" : {
                "sizeInBytes" : 62466235412,
                "rowCount" : 2230936979
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_web_page_sk#198, ws_ext_sales_price#209, ws_net_profit#219] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalRelation",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [wp_web_page_sk#221], [wp_web_page_sk#221, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#209)),17,2) AS sales#515, MakeDecimal(sum(UnscaledValue(ws_net_profit#219)),17,2) AS profit#516]\n+- Project [ws_ext_sales_price#209, ws_net_profit#219, wp_web_page_sk#221]\n   +- Join Inner, (ws_web_page_sk#198 = wp_web_page_sk#221)\n      :- Project [ws_web_page_sk#198, ws_ext_sales_price#209, ws_net_profit#219]\n      :  +- Join Inner, (ws_sold_date_sk#220 = d_date_sk#632)\n      :     :- Project [ws_web_page_sk#198, ws_ext_sales_price#209, ws_net_profit#219, ws_sold_date_sk#220]\n      :     :  +- Filter ((isnotnull(ws_sold_date_sk#220) AND isnotnull(ws_web_page_sk#198)) AND dynamicpruning#742 [ws_sold_date_sk#220])\n      :     :     :  +- Project [d_date_sk#632]\n      :     :     :     +- Filter ((isnotnull(d_date#634) AND ((d_date#634 >= 1998-08-04) AND (d_date#634 <= 1998-09-03))) AND isnotnull(d_date_sk#632))\n      :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#632,d_date_id#633,d_date#634,d_month_seq#635,d_week_seq#636,d_quarter_seq#637,d_year#638,d_dow#639,d_moy#640,d_dom#641,d_qoy#642,d_fy_year#643,d_fy_quarter_seq#644,d_fy_week_seq#645,d_day_name#646,d_quarter_name#647,d_holiday#648,d_weekend#649,d_following_holiday#650,d_first_dom#651,d_last_dom#652,d_same_day_ly#653,d_same_day_lq#654,d_current_day#655,... 4 more fields] parquet\n      :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#187,ws_ship_date_sk#188,ws_item_sk#189,ws_bill_customer_sk#190,ws_bill_cdemo_sk#191,ws_bill_hdemo_sk#192,ws_bill_addr_sk#193,ws_ship_customer_sk#194,ws_ship_cdemo_sk#195,ws_ship_hdemo_sk#196,ws_ship_addr_sk#197,ws_web_page_sk#198,ws_web_site_sk#199,ws_ship_mode_sk#200,ws_warehouse_sk#201,ws_promo_sk#202,ws_order_number#203L,ws_quantity#204,ws_wholesale_cost#205,ws_list_price#206,ws_sales_price#207,ws_ext_discount_amt#208,ws_ext_sales_price#209,ws_ext_wholesale_cost#210,... 10 more fields] parquet\n      :     +- LogicalQueryStage Project [d_date_sk#632], BroadcastQueryStage 11\n      +- LogicalQueryStage Project [wp_web_page_sk#221], BroadcastQueryStage 12\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : 1865421306,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1064896,
            "rowCount" : 2040,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [wp_web_page_sk#221] Arguments: 12 "
          },
          "4" : {
            "sign" : -1655586435,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 80313731244,
            "rowCount" : 2230936979,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ws_sold_date_sk#220] Right keys [1]: [d_date_sk#632] Join type: Inner Join condition: None "
          },
          "5" : {
            "sign" : 1314910035,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 2302902688,
            "rowCount" : 71965709,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [ws_web_page_sk#198, ws_ext_sales_price#209, ws_net_profit#219, ws_sold_date_sk#220] Condition : isnotnull(ws_web_page_sk#198) "
          },
          "6" : {
            "sign" : 1193387181,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 2302902688,
            "rowCount" : 71965709,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_sales Output [4]: [ws_web_page_sk#198, ws_ext_sales_price#209, ws_net_profit#219, ws_sold_date_sk#220] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales/ws_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ws_sold_date_sk#220), dynamicpruningexpression(ws_sold_date_sk#220 IN dynamicpruning#740)] PushedFilters: [IsNotNull(ws_web_page_sk)] ReadSchema: struct<ws_web_page_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)> "
          },
          "1" : {
            "sign" : -1195778964,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 127431120240480,
            "rowCount" : 4551111437160,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [ws_ext_sales_price#209, ws_net_profit#219, wp_web_page_sk#221] Input [4]: [ws_web_page_sk#198, ws_ext_sales_price#209, ws_net_profit#219, wp_web_page_sk#221] "
          },
          "0" : {
            "sign" : 1162696823,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 127431120240480,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [3]: [ws_ext_sales_price#209, ws_net_profit#219, wp_web_page_sk#221] Keys [1]: [wp_web_page_sk#221] Functions [2]: [partial_sum(UnscaledValue(ws_ext_sales_price#209)), partial_sum(UnscaledValue(ws_net_profit#219))] Aggregate Attributes [2]: [sum#772L, sum#773L] Results [3]: [wp_web_page_sk#221, sum#774L, sum#775L] "
          },
          "2" : {
            "sign" : 247264643,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 145635565989120,
            "rowCount" : 4551111437160,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ws_web_page_sk#198] Right keys [1]: [wp_web_page_sk#221] Join type: Inner Join condition: None "
          },
          "7" : {
            "sign" : 2135953481,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#632] Arguments: 11 "
          },
          "3" : {
            "sign" : -1229157584,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 62466235412,
            "rowCount" : 2230936979,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [ws_web_page_sk#198, ws_ext_sales_price#209, ws_net_profit#219] Input [5]: [ws_web_page_sk#198, ws_ext_sales_price#209, ws_net_profit#219, ws_sold_date_sk#220, d_date_sk#632] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_sales",
          "toId" : 5,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Filter",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "BroadcastQueryStage",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastHashJoin",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[wp_web_page_sk#221], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#209)), partial_sum(UnscaledValue(ws_net_profit#219))], output=[wp_web_page_sk#221, sum#774L, sum#775L])\n+- Project [ws_ext_sales_price#209, ws_net_profit#219, wp_web_page_sk#221]\n   +- BroadcastHashJoin [ws_web_page_sk#198], [wp_web_page_sk#221], Inner, BuildRight, false\n      :- Project [ws_web_page_sk#198, ws_ext_sales_price#209, ws_net_profit#219]\n      :  +- BroadcastHashJoin [ws_sold_date_sk#220], [d_date_sk#632], Inner, BuildRight, false\n      :     :- Filter isnotnull(ws_web_page_sk#198)\n      :     :  +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_web_page_sk#198,ws_ext_sales_price#209,ws_net_profit#219,ws_sold_date_sk#220] Batched: true, DataFilters: [isnotnull(ws_web_page_sk#198)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#220), dynamicpruningexpression(ws_sold_date_sk#220 IN dynamicpruning#7..., PushedFilters: [IsNotNull(ws_web_page_sk)], ReadSchema: struct<ws_web_page_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>\n      :     :        +- ReusedSubquery SubqueryBroadcast dynamicpruning#740, 0, [d_date_sk#576], [id=#1625]\n      :     +- BroadcastQueryStage 11\n      :        +- ReusedExchange [d_date_sk#632], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=698]\n      +- BroadcastQueryStage 12\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=863]\n            +- *(8) Filter isnotnull(wp_web_page_sk#221)\n               +- *(8) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.web_page[wp_web_page_sk#221] Batched: true, DataFilters: [isnotnull(wp_web_page_sk#221)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_page], PartitionFilters: [], PushedFilters: [IsNotNull(wp_web_page_sk)], ReadSchema: struct<wp_web_page_sk:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2305016408,
        "inputRowCount" : 71967780
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 11 ],
      "Objectives" : {
        "DurationInMs" : 15997,
        "TotalTasksDurationInMs" : 66659,
        "IOBytes" : {
          "Total" : 15985158,
          "Details" : {
            "IR" : 15496723,
            "IW" : 0,
            "SR" : 0,
            "SW" : 488435
          }
        }
      }
    },
    "10" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -524100177,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 102912,
                "rowCount" : 3216
              },
              "compileTime" : {
                "sizeInBytes" : 9359355051480,
                "rowCount" : -1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [s_store_sk#547], [s_store_sk#547, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#509, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#510], HashAggregate(keys=[s_store_sk#547], functions=[sum(UnscaledValue(sr_return_amt#116)), sum(UnscaledValue(sr_net_loss#124))]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [s_store_sk#547], [s_store_sk#547, MakeDecimal(sum(UnscaledValue(sr_return_amt#116)),17,2) AS returns#509, MakeDecimal(sum(UnscaledValue(sr_net_loss#124)),17,2) AS profit_loss#510], HashAggregate(keys=[s_store_sk#547], functions=[sum(UnscaledValue(sr_return_amt#116)), sum(UnscaledValue(sr_net_loss#124))])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1687949460,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 102912,
            "rowCount" : 3216,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [3]: [s_store_sk#547, sum#762L, sum#763L] Keys [1]: [s_store_sk#547] Functions [2]: [sum(UnscaledValue(sr_return_amt#116)), sum(UnscaledValue(sr_net_loss#124))] Aggregate Attributes [2]: [sum(UnscaledValue(sr_return_amt#116))#704L, sum(UnscaledValue(sr_net_loss#124))#705L] Results [3]: [s_store_sk#547, MakeDecimal(sum(UnscaledValue(sr_return_amt#116))#704L,17,2) AS returns#509, MakeDecimal(sum(UnscaledValue(sr_net_loss#124))#705L,17,2) AS profit_loss#510] "
          },
          "1" : {
            "sign" : -848096761,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 9359355051480,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [s_store_sk#547, sum#762L, sum#763L] Arguments: 22 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[s_store_sk#547], functions=[sum(UnscaledValue(sr_return_amt#116)), sum(UnscaledValue(sr_net_loss#124))], output=[s_store_sk#547, returns#509, profit_loss#510])\n+- ShuffleQueryStage 22\n   +- Exchange hashpartitioning(s_store_sk#547, 200), ENSURE_REQUIREMENTS, [plan_id=2432]\n      +- *(16) HashAggregate(keys=[s_store_sk#547], functions=[partial_sum(UnscaledValue(sr_return_amt#116)), partial_sum(UnscaledValue(sr_net_loss#124))], output=[s_store_sk#547, sum#762L, sum#763L])\n         +- *(16) Project [sr_return_amt#116, sr_net_loss#124, s_store_sk#547]\n            +- *(16) BroadcastHashJoin [sr_store_sk#112], [s_store_sk#547], Inner, BuildRight, false\n               :- *(16) Project [sr_store_sk#112, sr_return_amt#116, sr_net_loss#124]\n               :  +- *(16) BroadcastHashJoin [sr_returned_date_sk#125], [d_date_sk#519], Inner, BuildRight, false\n               :     :- *(16) Filter isnotnull(sr_store_sk#112)\n               :     :  +- *(16) ColumnarToRow\n               :     :     +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_store_sk#112,sr_return_amt#116,sr_net_loss#124,sr_returned_date_sk#125] Batched: true, DataFilters: [isnotnull(sr_store_sk#112)], Format: Parquet, Location: InMemoryFileIndex(2003 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(sr_returned_date_sk#125), dynamicpruningexpression(sr_returned_date_sk#125 IN dynamicp..., PushedFilters: [IsNotNull(sr_store_sk)], ReadSchema: struct<sr_store_sk:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>\n               :     :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#740, 0, [d_date_sk#576], [id=#1625]\n               :     +- BroadcastQueryStage 3\n               :        +- ReusedExchange [d_date_sk#519], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=698]\n               +- BroadcastQueryStage 5\n                  +- ReusedExchange [s_store_sk#547], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=717]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 102912,
        "inputRowCount" : 3216
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "5" : [ 1152, 1152, 1152, 1152, 0, 0, 1552, 1152, 1152, 0, 0, 2272, 1152, 1152, 1152, 0, 0, 0, 1152, 1552, 0, 1552, 1152, 1552, 1152, 1152, 1152, 1152, 0, 0, 1552, 1872, 1884, 1534, 1152, 0, 1152, 1152, 1152, 1552, 0, 1152, 1152, 1552, 1152, 1152, 1152, 1152, 1884, 1552, 1152, 1552, 1552, 1872, 1152, 1552, 1543, 1543, 0, 0, 1152, 0, 0, 1152, 0, 1152, 1552, 0, 0, 1552, 1152, 0, 0, 1152, 0, 1152, 0, 1152, 1152, 1152, 0, 0, 1152, 0, 1152, 1872, 1152, 0, 1552, 0, 0, 1543, 0, 1152, 0, 0, 0, 1152, 1152, 1552, 1872, 1872, 1552, 1872, 0, 0, 1872, 1152, 1872, 1152, 1552, 0, 1152, 1872, 1152, 1152, 1543, 0, 0, 0, 0, 0, 1552, 0, 1152, 0, 0, 0, 1552, 1872, 1152, 1872, 1552, 0, 0, 1152, 1152, 1552, 0, 0, 0, 1152, 0, 1152, 0, 1552, 1552, 0, 0, 0, 1152, 1152, 1152, 1152, 1152, 2246, 1872, 0, 0, 1152, 1152, 1552, 1552, 0, 1152, 1872, 0, 1152, 1152, 1543, 1552, 2272, 1152, 1152, 1552, 0, 0, 0, 1152, 1152, 0, 0, 1872, 0, 1552, 0, 0, 0, 1152, 0, 0, 0, 0, 1152, 1152, 1152, 0, 0, 1543, 0 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 10,
        "FinishedTasksNum" : 23,
        "FinishedTasksTotalTimeInMs" : 43936.0,
        "FinishedTasksDistributionInMs" : [ 181.0, 383.0, 2292.0, 3315.0, 3970.0 ]
      },
      "QueryStageOptimizationId" : 10,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 18 ],
      "Objectives" : {
        "DurationInMs" : 251,
        "TotalTasksDurationInMs" : 246,
        "IOBytes" : {
          "Total" : 164362,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 164362,
            "SW" : 0
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "8" : {
            "sign" : -35121771,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1048824,
                "rowCount" : 31
              },
              "compileTime" : {
                "sizeInBytes" : 360,
                "rowCount" : 30
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#660], BroadcastQueryStage 14 "
          },
          "4" : {
            "sign" : 242241097,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7327783224,
                "rowCount" : 203549534
              },
              "compileTime" : {
                "sizeInBytes" : 7327783224,
                "rowCount" : 203549534
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (wr_returned_date_sk#258 = d_date_sk#660) "
          },
          "9" : {
            "sign" : -1794151512,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1064896,
                "rowCount" : 2040
              },
              "compileTime" : {
                "sizeInBytes" : 24480,
                "rowCount" : 2040
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [wp_web_page_sk#688], BroadcastQueryStage 16 "
          },
          "5" : {
            "sign" : -904995115,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 210115648,
                "rowCount" : 6566114
              },
              "compileTime" : {
                "sizeInBytes" : 210115648,
                "rowCount" : 6566114
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [wr_web_page_sk#245, wr_return_amt#249, wr_net_loss#257, wr_returned_date_sk#258] "
          },
          "6" : {
            "sign" : 1384739753,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 945520416,
                "rowCount" : 6566114
              },
              "compileTime" : {
                "sizeInBytes" : 945520416,
                "rowCount" : 6566114
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(wr_returned_date_sk#258) AND isnotnull(wr_web_page_sk#245)) AND dynamicpruning#743 [wr_returned_date_sk#258]) "
          },
          "1" : {
            "sign" : 1172371040,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11626749382080,
                "rowCount" : 415241049360
              },
              "compileTime" : {
                "sizeInBytes" : 11626749382080,
                "rowCount" : 415241049360
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [wr_return_amt#249, wr_net_loss#257, wp_web_page_sk#688] "
          },
          "0" : {
            "sign" : 1515959536,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11626749382080,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 11626749382080,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [wp_web_page_sk#688], [wp_web_page_sk#688, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#517, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#518] "
          },
          "2" : {
            "sign" : 2007431986,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 13287713579520,
                "rowCount" : 415241049360
              },
              "compileTime" : {
                "sizeInBytes" : 13287713579520,
                "rowCount" : 415241049360
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (wr_web_page_sk#245 = wp_web_page_sk#688) "
          },
          "7" : {
            "sign" : -946634804,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 989985600,
                "rowCount" : 6874900
              },
              "compileTime" : {
                "sizeInBytes" : 989985600,
                "rowCount" : 6874900
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [wr_returned_time_sk#235, wr_item_sk#236, wr_refunded_customer_sk#237, wr_refunded_cdemo_sk#238, wr_refunded_hdemo_sk#239, wr_refunded_addr_sk#240, wr_returning_customer_sk#241, wr_returning_cdemo_sk#242, wr_returning_hdemo_sk#243, wr_returning_addr_sk#244, wr_web_page_sk#245, wr_reason_sk#246, wr_order_number#247L, wr_return_quantity#248, wr_return_amt#249, wr_return_tax#250, wr_return_amt_inc_tax#251, wr_fee#252, wr_return_ship_cost#253, wr_refunded_cash#254, wr_reversed_charge#255, wr_account_credit#256, wr_net_loss#257, wr_returned_date_sk#258], `spark_catalog`.`tpcds_100`.`web_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : -1957502834,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5699386952,
                "rowCount" : 203549534
              },
              "compileTime" : {
                "sizeInBytes" : 5699386952,
                "rowCount" : 203549534
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [wr_web_page_sk#245, wr_return_amt#249, wr_net_loss#257] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalRelation",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [wp_web_page_sk#688], [wp_web_page_sk#688, MakeDecimal(sum(UnscaledValue(wr_return_amt#249)),17,2) AS returns#517, MakeDecimal(sum(UnscaledValue(wr_net_loss#257)),17,2) AS profit_loss#518]\n+- Project [wr_return_amt#249, wr_net_loss#257, wp_web_page_sk#688]\n   +- Join Inner, (wr_web_page_sk#245 = wp_web_page_sk#688)\n      :- Project [wr_web_page_sk#245, wr_return_amt#249, wr_net_loss#257]\n      :  +- Join Inner, (wr_returned_date_sk#258 = d_date_sk#660)\n      :     :- Project [wr_web_page_sk#245, wr_return_amt#249, wr_net_loss#257, wr_returned_date_sk#258]\n      :     :  +- Filter ((isnotnull(wr_returned_date_sk#258) AND isnotnull(wr_web_page_sk#245)) AND dynamicpruning#743 [wr_returned_date_sk#258])\n      :     :     :  +- Project [d_date_sk#660]\n      :     :     :     +- Filter ((isnotnull(d_date#662) AND ((d_date#662 >= 1998-08-04) AND (d_date#662 <= 1998-09-03))) AND isnotnull(d_date_sk#660))\n      :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#660,d_date_id#661,d_date#662,d_month_seq#663,d_week_seq#664,d_quarter_seq#665,d_year#666,d_dow#667,d_moy#668,d_dom#669,d_qoy#670,d_fy_year#671,d_fy_quarter_seq#672,d_fy_week_seq#673,d_day_name#674,d_quarter_name#675,d_holiday#676,d_weekend#677,d_following_holiday#678,d_first_dom#679,d_last_dom#680,d_same_day_ly#681,d_same_day_lq#682,d_current_day#683,... 4 more fields] parquet\n      :     :     +- Relation spark_catalog.tpcds_100.web_returns[wr_returned_time_sk#235,wr_item_sk#236,wr_refunded_customer_sk#237,wr_refunded_cdemo_sk#238,wr_refunded_hdemo_sk#239,wr_refunded_addr_sk#240,wr_returning_customer_sk#241,wr_returning_cdemo_sk#242,wr_returning_hdemo_sk#243,wr_returning_addr_sk#244,wr_web_page_sk#245,wr_reason_sk#246,wr_order_number#247L,wr_return_quantity#248,wr_return_amt#249,wr_return_tax#250,wr_return_amt_inc_tax#251,wr_fee#252,wr_return_ship_cost#253,wr_refunded_cash#254,wr_reversed_charge#255,wr_account_credit#256,wr_net_loss#257,wr_returned_date_sk#258] parquet\n      :     +- LogicalQueryStage Project [d_date_sk#660], BroadcastQueryStage 14\n      +- LogicalQueryStage Project [wp_web_page_sk#688], BroadcastQueryStage 16\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : -1207286341,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1064896,
            "rowCount" : 2040,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [wp_web_page_sk#688] Arguments: 16 "
          },
          "4" : {
            "sign" : -2134543914,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 7327783224,
            "rowCount" : 203549534,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [wr_returned_date_sk#258] Right keys [1]: [d_date_sk#660] Join type: Inner Join condition: None "
          },
          "5" : {
            "sign" : -1356237958,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 210115648,
            "rowCount" : 6566114,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [wr_web_page_sk#245, wr_return_amt#249, wr_net_loss#257, wr_returned_date_sk#258] Condition : isnotnull(wr_web_page_sk#245) "
          },
          "6" : {
            "sign" : -1253737144,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 210115648,
            "rowCount" : 6566114,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_returns Output [4]: [wr_web_page_sk#245, wr_return_amt#249, wr_net_loss#257, wr_returned_date_sk#258] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_returns/wr_returned_date_sk=2450821, ... 2178 entries] PartitionFilters: [isnotnull(wr_returned_date_sk#258), dynamicpruningexpression(wr_returned_date_sk#258 IN dynamicpruning#740)] PushedFilters: [IsNotNull(wr_web_page_sk)] ReadSchema: struct<wr_web_page_sk:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)> "
          },
          "1" : {
            "sign" : -1525351286,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 11626749382080,
            "rowCount" : 415241049360,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [wr_return_amt#249, wr_net_loss#257, wp_web_page_sk#688] Input [4]: [wr_web_page_sk#245, wr_return_amt#249, wr_net_loss#257, wp_web_page_sk#688] "
          },
          "0" : {
            "sign" : -1694503787,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 11626749382080,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [3]: [wr_return_amt#249, wr_net_loss#257, wp_web_page_sk#688] Keys [1]: [wp_web_page_sk#688] Functions [2]: [partial_sum(UnscaledValue(wr_return_amt#249)), partial_sum(UnscaledValue(wr_net_loss#257))] Aggregate Attributes [2]: [sum#776L, sum#777L] Results [3]: [wp_web_page_sk#688, sum#778L, sum#779L] "
          },
          "2" : {
            "sign" : -1258018292,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 13287713579520,
            "rowCount" : 415241049360,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [wr_web_page_sk#245] Right keys [1]: [wp_web_page_sk#688] Join type: Inner Join condition: None "
          },
          "7" : {
            "sign" : -518296943,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#660] Arguments: 14 "
          },
          "3" : {
            "sign" : 945295,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 5699386952,
            "rowCount" : 203549534,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [wr_web_page_sk#245, wr_return_amt#249, wr_net_loss#257] Input [5]: [wr_web_page_sk#245, wr_return_amt#249, wr_net_loss#257, wr_returned_date_sk#258, d_date_sk#660] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_returns",
          "toId" : 5,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Filter",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "BroadcastQueryStage",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastHashJoin",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[wp_web_page_sk#688], functions=[partial_sum(UnscaledValue(wr_return_amt#249)), partial_sum(UnscaledValue(wr_net_loss#257))], output=[wp_web_page_sk#688, sum#778L, sum#779L])\n+- Project [wr_return_amt#249, wr_net_loss#257, wp_web_page_sk#688]\n   +- BroadcastHashJoin [wr_web_page_sk#245], [wp_web_page_sk#688], Inner, BuildRight, false\n      :- Project [wr_web_page_sk#245, wr_return_amt#249, wr_net_loss#257]\n      :  +- BroadcastHashJoin [wr_returned_date_sk#258], [d_date_sk#660], Inner, BuildRight, false\n      :     :- Filter isnotnull(wr_web_page_sk#245)\n      :     :  +- FileScan parquet spark_catalog.tpcds_100.web_returns[wr_web_page_sk#245,wr_return_amt#249,wr_net_loss#257,wr_returned_date_sk#258] Batched: true, DataFilters: [isnotnull(wr_web_page_sk#245)], Format: Parquet, Location: InMemoryFileIndex(2179 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_re..., PartitionFilters: [isnotnull(wr_returned_date_sk#258), dynamicpruningexpression(wr_returned_date_sk#258 IN dynamicp..., PushedFilters: [IsNotNull(wr_web_page_sk)], ReadSchema: struct<wr_web_page_sk:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>\n      :     :        +- ReusedSubquery SubqueryBroadcast dynamicpruning#740, 0, [d_date_sk#576], [id=#1625]\n      :     +- BroadcastQueryStage 14\n      :        +- ReusedExchange [d_date_sk#660], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=698]\n      +- BroadcastQueryStage 16\n         +- ReusedExchange [wp_web_page_sk#688], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=863]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 212229368,
        "inputRowCount" : 6568185
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 12 ],
      "Objectives" : {
        "DurationInMs" : 4128,
        "TotalTasksDurationInMs" : 3018,
        "IOBytes" : {
          "Total" : 1307737,
          "Details" : {
            "IR" : 850506,
            "IW" : 0,
            "SR" : 0,
            "SW" : 457231
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 2036889946,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4824,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 4824,
                "rowCount" : 402
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#77] "
          },
          "1" : {
            "sign" : -1738577838,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(s_store_sk#77) "
          },
          "2" : {
            "sign" : -1963119530,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#77, s_store_id#78, s_rec_start_date#79, s_rec_end_date#80, s_closed_date_sk#81, s_store_name#82, s_number_employees#83, s_floor_space#84, s_hours#85, s_manager#86, s_market_id#87, s_geography_class#88, s_market_desc#89, s_market_manager#90, s_division_id#91, s_division_name#92, s_company_id#93, s_company_name#94, s_street_number#95, s_street_name#96, s_street_type#97, s_suite_number#98, s_city#99, s_county#100, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [s_store_sk#77]\n+- Filter isnotnull(s_store_sk#77)\n   +- Relation spark_catalog.tpcds_100.store[s_store_sk#77,s_store_id#78,s_rec_start_date#79,s_rec_end_date#80,s_closed_date_sk#81,s_store_name#82,s_number_employees#83,s_floor_space#84,s_hours#85,s_manager#86,s_market_id#87,s_geography_class#88,s_market_desc#89,s_market_manager#90,s_division_id#91,s_division_name#92,s_company_id#93,s_company_name#94,s_street_number#95,s_street_name#96,s_street_type#97,s_suite_number#98,s_city#99,s_county#100,... 5 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 557196848,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 4824,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [1]: [s_store_sk#77] Condition : isnotnull(s_store_sk#77) "
          },
          "1" : {
            "sign" : -1290708172,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 4824,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store Output [1]: [s_store_sk#77] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store] PushedFilters: [IsNotNull(s_store_sk)] ReadSchema: struct<s_store_sk:int> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull(s_store_sk#77)\n+- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#77] Batched: true, DataFilters: [isnotnull(s_store_sk#77)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 4824,
        "inputRowCount" : 402
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 8 ],
      "Objectives" : {
        "DurationInMs" : 6666,
        "TotalTasksDurationInMs" : 6661,
        "IOBytes" : {
          "Total" : 14041,
          "Details" : {
            "IR" : 14041,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1333763490,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 360,
                "rowCount" : 30
              },
              "compileTime" : {
                "sizeInBytes" : 360,
                "rowCount" : 30
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#49] "
          },
          "1" : {
            "sign" : -1586626797,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7380,
                "rowCount" : 30
              },
              "compileTime" : {
                "sizeInBytes" : 7380,
                "rowCount" : 30
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#51) AND ((d_date#51 >= 1998-08-04) AND (d_date#51 <= 1998-09-03))) AND isnotnull(d_date_sk#49)) "
          },
          "2" : {
            "sign" : 247686043,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#49, d_date_id#50, d_date#51, d_month_seq#52, d_week_seq#53, d_quarter_seq#54, d_year#55, d_dow#56, d_moy#57, d_dom#58, d_qoy#59, d_fy_year#60, d_fy_quarter_seq#61, d_fy_week_seq#62, d_day_name#63, d_quarter_name#64, d_holiday#65, d_weekend#66, d_following_holiday#67, d_first_dom#68, d_last_dom#69, d_same_day_ly#70, d_same_day_lq#71, d_current_day#72, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#49]\n+- Filter ((isnotnull(d_date#51) AND ((d_date#51 >= 1998-08-04) AND (d_date#51 <= 1998-09-03))) AND isnotnull(d_date_sk#49))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#49,d_date_id#50,d_date#51,d_month_seq#52,d_week_seq#53,d_quarter_seq#54,d_year#55,d_dow#56,d_moy#57,d_dom#58,d_qoy#59,d_fy_year#60,d_fy_quarter_seq#61,d_fy_week_seq#62,d_day_name#63,d_quarter_name#64,d_holiday#65,d_weekend#66,d_following_holiday#67,d_first_dom#68,d_last_dom#69,d_same_day_ly#70,d_same_day_lq#71,d_current_day#72,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1694088755,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 360,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [d_date_sk#49] Input [2]: [d_date_sk#49, d_date#51] "
          },
          "1" : {
            "sign" : -247298916,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 360,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [d_date_sk#49, d_date#51] Condition : (((isnotnull(d_date#51) AND (d_date#51 >= 1998-08-04)) AND (d_date#51 <= 1998-09-03)) AND isnotnull(d_date_sk#49)) "
          },
          "2" : {
            "sign" : -176268892,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 360,
            "rowCount" : 30,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [2]: [d_date_sk#49, d_date#51] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_date:date> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#49]\n+- Filter (((isnotnull(d_date#51) AND (d_date#51 >= 1998-08-04)) AND (d_date#51 <= 1998-09-03)) AND isnotnull(d_date_sk#49))\n   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#49,d_date#51] Batched: true, DataFilters: [isnotnull(d_date#51), (d_date#51 >= 1998-08-04), (d_date#51 <= 1998-09-03), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 360,
        "inputRowCount" : 30
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 6 ],
      "Objectives" : {
        "DurationInMs" : 4750,
        "TotalTasksDurationInMs" : 4739,
        "IOBytes" : {
          "Total" : 171738,
          "Details" : {
            "IR" : 171738,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1652996543,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 24480,
                "rowCount" : 2040
              },
              "compileTime" : {
                "sizeInBytes" : 24480,
                "rowCount" : 2040
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [wp_web_page_sk#221] "
          },
          "1" : {
            "sign" : 901241195,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 281520,
                "rowCount" : 2040
              },
              "compileTime" : {
                "sizeInBytes" : 281520,
                "rowCount" : 2040
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(wp_web_page_sk#221) "
          },
          "2" : {
            "sign" : 493486675,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 281520,
                "rowCount" : 2040
              },
              "compileTime" : {
                "sizeInBytes" : 281520,
                "rowCount" : 2040
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [wp_web_page_sk#221, wp_web_page_id#222, wp_rec_start_date#223, wp_rec_end_date#224, wp_creation_date_sk#225, wp_access_date_sk#226, wp_autogen_flag#227, wp_customer_sk#228, wp_url#229, wp_type#230, wp_char_count#231, wp_link_count#232, wp_image_count#233, wp_max_ad_count#234], `spark_catalog`.`tpcds_100`.`web_page`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [wp_web_page_sk#221]\n+- Filter isnotnull(wp_web_page_sk#221)\n   +- Relation spark_catalog.tpcds_100.web_page[wp_web_page_sk#221,wp_web_page_id#222,wp_rec_start_date#223,wp_rec_end_date#224,wp_creation_date_sk#225,wp_access_date_sk#226,wp_autogen_flag#227,wp_customer_sk#228,wp_url#229,wp_type#230,wp_char_count#231,wp_link_count#232,wp_image_count#233,wp_max_ad_count#234] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1219107592,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 24480,
            "rowCount" : 2040,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [1]: [wp_web_page_sk#221] Condition : isnotnull(wp_web_page_sk#221) "
          },
          "1" : {
            "sign" : 1495258096,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 24480,
            "rowCount" : 2040,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_page Output [1]: [wp_web_page_sk#221] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_page] PushedFilters: [IsNotNull(wp_web_page_sk)] ReadSchema: struct<wp_web_page_sk:int> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_page",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull(wp_web_page_sk#221)\n+- FileScan parquet spark_catalog.tpcds_100.web_page[wp_web_page_sk#221] Batched: true, DataFilters: [isnotnull(wp_web_page_sk#221)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_page], PartitionFilters: [], PushedFilters: [IsNotNull(wp_web_page_sk)], ReadSchema: struct<wp_web_page_sk:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 24480,
        "inputRowCount" : 2040
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 7 ],
      "Objectives" : {
        "DurationInMs" : 1848,
        "TotalTasksDurationInMs" : 1808,
        "IOBytes" : {
          "Total" : 14450,
          "Details" : {
            "IR" : 14450,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "8" : {
            "sign" : 529363847,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1048824,
                "rowCount" : 31
              },
              "compileTime" : {
                "sizeInBytes" : 360,
                "rowCount" : 30
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#49], BroadcastQueryStage 0 "
          },
          "4" : {
            "sign" : 1356657032,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 293143679568,
                "rowCount" : 8142879988
              },
              "compileTime" : {
                "sizeInBytes" : 293143679568,
                "rowCount" : 8142879988
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#48 = d_date_sk#49) "
          },
          "9" : {
            "sign" : 1557086341,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1051792,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 4824,
                "rowCount" : 402
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#77], BroadcastQueryStage 1 "
          },
          "5" : {
            "sign" : 837548438,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 8405553536,
                "rowCount" : 262673548
              },
              "compileTime" : {
                "sizeInBytes" : 8405553536,
                "rowCount" : 262673548
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_store_sk#32, ss_ext_sales_price#40, ss_net_profit#47, ss_sold_date_sk#48] "
          },
          "6" : {
            "sign" : 1504499251,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 39926379296,
                "rowCount" : 262673548
              },
              "compileTime" : {
                "sizeInBytes" : 39926379296,
                "rowCount" : 262673548
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_sold_date_sk#48) AND isnotnull(ss_store_sk#32)) AND dynamicpruning#738 [ss_sold_date_sk#48]) "
          },
          "1" : {
            "sign" : 829309728,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 91656257144928,
                "rowCount" : 3273437755176
              },
              "compileTime" : {
                "sizeInBytes" : 91656257144928,
                "rowCount" : 3273437755176
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_ext_sales_price#40, ss_net_profit#47, s_store_sk#77] "
          },
          "0" : {
            "sign" : 1484025835,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 91656257144928,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 91656257144928,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [s_store_sk#77], [s_store_sk#77, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#40)),17,2) AS sales#507, MakeDecimal(sum(UnscaledValue(ss_net_profit#47)),17,2) AS profit#508] "
          },
          "2" : {
            "sign" : 1108045433,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 104750008165632,
                "rowCount" : 3273437755176
              },
              "compileTime" : {
                "sizeInBytes" : 104750008165632,
                "rowCount" : 3273437755176
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#32 = s_store_sk#77) "
          },
          "7" : {
            "sign" : -1218510227,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              },
              "compileTime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#26, ss_item_sk#27, ss_customer_sk#28, ss_cdemo_sk#29, ss_hdemo_sk#30, ss_addr_sk#31, ss_store_sk#32, ss_promo_sk#33, ss_ticket_number#34L, ss_quantity#35, ss_wholesale_cost#36, ss_list_price#37, ss_sales_price#38, ss_ext_discount_amt#39, ss_ext_sales_price#40, ss_ext_wholesale_cost#41, ss_ext_list_price#42, ss_ext_tax#43, ss_coupon_amt#44, ss_net_paid#45, ss_net_paid_inc_tax#46, ss_net_profit#47, ss_sold_date_sk#48], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : 938967649,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 228000639664,
                "rowCount" : 8142879988
              },
              "compileTime" : {
                "sizeInBytes" : 228000639664,
                "rowCount" : 8142879988
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_store_sk#32, ss_ext_sales_price#40, ss_net_profit#47] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalRelation",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [s_store_sk#77], [s_store_sk#77, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#40)),17,2) AS sales#507, MakeDecimal(sum(UnscaledValue(ss_net_profit#47)),17,2) AS profit#508]\n+- Project [ss_ext_sales_price#40, ss_net_profit#47, s_store_sk#77]\n   +- Join Inner, (ss_store_sk#32 = s_store_sk#77)\n      :- Project [ss_store_sk#32, ss_ext_sales_price#40, ss_net_profit#47]\n      :  +- Join Inner, (ss_sold_date_sk#48 = d_date_sk#49)\n      :     :- Project [ss_store_sk#32, ss_ext_sales_price#40, ss_net_profit#47, ss_sold_date_sk#48]\n      :     :  +- Filter ((isnotnull(ss_sold_date_sk#48) AND isnotnull(ss_store_sk#32)) AND dynamicpruning#738 [ss_sold_date_sk#48])\n      :     :     :  +- Project [d_date_sk#49]\n      :     :     :     +- Filter ((isnotnull(d_date#51) AND ((d_date#51 >= 1998-08-04) AND (d_date#51 <= 1998-09-03))) AND isnotnull(d_date_sk#49))\n      :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#49,d_date_id#50,d_date#51,d_month_seq#52,d_week_seq#53,d_quarter_seq#54,d_year#55,d_dow#56,d_moy#57,d_dom#58,d_qoy#59,d_fy_year#60,d_fy_quarter_seq#61,d_fy_week_seq#62,d_day_name#63,d_quarter_name#64,d_holiday#65,d_weekend#66,d_following_holiday#67,d_first_dom#68,d_last_dom#69,d_same_day_ly#70,d_same_day_lq#71,d_current_day#72,... 4 more fields] parquet\n      :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#26,ss_item_sk#27,ss_customer_sk#28,ss_cdemo_sk#29,ss_hdemo_sk#30,ss_addr_sk#31,ss_store_sk#32,ss_promo_sk#33,ss_ticket_number#34L,ss_quantity#35,ss_wholesale_cost#36,ss_list_price#37,ss_sales_price#38,ss_ext_discount_amt#39,ss_ext_sales_price#40,ss_ext_wholesale_cost#41,ss_ext_list_price#42,ss_ext_tax#43,ss_coupon_amt#44,ss_net_paid#45,ss_net_paid_inc_tax#46,ss_net_profit#47,ss_sold_date_sk#48] parquet\n      :     +- LogicalQueryStage Project [d_date_sk#49], BroadcastQueryStage 0\n      +- LogicalQueryStage Project [s_store_sk#77], BroadcastQueryStage 1\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : 2106635234,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1051792,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [s_store_sk#77] Arguments: 1 "
          },
          "4" : {
            "sign" : -91975945,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 293143679568,
            "rowCount" : 8142879988,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_sold_date_sk#48] Right keys [1]: [d_date_sk#49] Join type: Inner Join condition: None "
          },
          "5" : {
            "sign" : -2069138617,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 8405553536,
            "rowCount" : 262673548,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [ss_store_sk#32, ss_ext_sales_price#40, ss_net_profit#47, ss_sold_date_sk#48] Condition : isnotnull(ss_store_sk#32) "
          },
          "6" : {
            "sign" : 1666053599,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 8405553536,
            "rowCount" : 262673548,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_sales Output [4]: [ss_store_sk#32, ss_ext_sales_price#40, ss_net_profit#47, ss_sold_date_sk#48] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales/ss_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ss_sold_date_sk#48), dynamicpruningexpression(ss_sold_date_sk#48 IN dynamicpruning#740)] PushedFilters: [IsNotNull(ss_store_sk)] ReadSchema: struct<ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)> "
          },
          "1" : {
            "sign" : 950294238,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 91656257144928,
            "rowCount" : 3273437755176,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [ss_ext_sales_price#40, ss_net_profit#47, s_store_sk#77] Input [4]: [ss_store_sk#32, ss_ext_sales_price#40, ss_net_profit#47, s_store_sk#77] "
          },
          "0" : {
            "sign" : 1869831481,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 91656257144928,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [3]: [ss_ext_sales_price#40, ss_net_profit#47, s_store_sk#77] Keys [1]: [s_store_sk#77] Functions [2]: [partial_sum(UnscaledValue(ss_ext_sales_price#40)), partial_sum(UnscaledValue(ss_net_profit#47))] Aggregate Attributes [2]: [sum#756L, sum#757L] Results [3]: [s_store_sk#77, sum#758L, sum#759L] "
          },
          "2" : {
            "sign" : 411123535,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 104750008165632,
            "rowCount" : 3273437755176,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_store_sk#32] Right keys [1]: [s_store_sk#77] Join type: Inner Join condition: None "
          },
          "7" : {
            "sign" : -1104232533,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#49] Arguments: 0 "
          },
          "3" : {
            "sign" : -543557302,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 228000639664,
            "rowCount" : 8142879988,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [ss_store_sk#32, ss_ext_sales_price#40, ss_net_profit#47] Input [5]: [ss_store_sk#32, ss_ext_sales_price#40, ss_net_profit#47, ss_sold_date_sk#48, d_date_sk#49] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_sales",
          "toId" : 5,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Filter",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "BroadcastQueryStage",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastHashJoin",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[s_store_sk#77], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#40)), partial_sum(UnscaledValue(ss_net_profit#47))], output=[s_store_sk#77, sum#758L, sum#759L])\n+- Project [ss_ext_sales_price#40, ss_net_profit#47, s_store_sk#77]\n   +- BroadcastHashJoin [ss_store_sk#32], [s_store_sk#77], Inner, BuildRight, false\n      :- Project [ss_store_sk#32, ss_ext_sales_price#40, ss_net_profit#47]\n      :  +- BroadcastHashJoin [ss_sold_date_sk#48], [d_date_sk#49], Inner, BuildRight, false\n      :     :- Filter isnotnull(ss_store_sk#32)\n      :     :  +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_store_sk#32,ss_ext_sales_price#40,ss_net_profit#47,ss_sold_date_sk#48] Batched: true, DataFilters: [isnotnull(ss_store_sk#32)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#48), dynamicpruningexpression(ss_sold_date_sk#48 IN dynamicpruning#740)], PushedFilters: [IsNotNull(ss_store_sk)], ReadSchema: struct<ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>\n      :     :        +- ReusedSubquery SubqueryBroadcast dynamicpruning#740, 0, [d_date_sk#576], [id=#1625]\n      :     +- BroadcastQueryStage 0\n      :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=698]\n      :           +- *(1) Project [d_date_sk#49]\n      :              +- *(1) Filter (((isnotnull(d_date#51) AND (d_date#51 >= 1998-08-04)) AND (d_date#51 <= 1998-09-03)) AND isnotnull(d_date_sk#49))\n      :                 +- *(1) ColumnarToRow\n      :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#49,d_date#51] Batched: true, DataFilters: [isnotnull(d_date#51), (d_date#51 >= 1998-08-04), (d_date#51 <= 1998-09-03), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n      +- BroadcastQueryStage 1\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=717]\n            +- *(2) Filter isnotnull(s_store_sk#77)\n               +- *(2) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#77] Batched: true, DataFilters: [isnotnull(s_store_sk#77)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 8407654152,
        "inputRowCount" : 262673981
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 13 ],
      "Objectives" : {
        "DurationInMs" : 3528,
        "TotalTasksDurationInMs" : 4194,
        "IOBytes" : {
          "Total" : 50987770,
          "Details" : {
            "IR" : 50819261,
            "IW" : 0,
            "SR" : 0,
            "SW" : 168509
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 1539958774,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              },
              "compileTime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(cs_sold_date_sk#159) AND dynamicpruning#740 [cs_sold_date_sk#159]) "
          },
          "5" : {
            "sign" : 25258512,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              },
              "compileTime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#126, cs_ship_date_sk#127, cs_bill_customer_sk#128, cs_bill_cdemo_sk#129, cs_bill_hdemo_sk#130, cs_bill_addr_sk#131, cs_ship_customer_sk#132, cs_ship_cdemo_sk#133, cs_ship_hdemo_sk#134, cs_ship_addr_sk#135, cs_call_center_sk#136, cs_catalog_page_sk#137, cs_ship_mode_sk#138, cs_warehouse_sk#139, cs_item_sk#140, cs_promo_sk#141, cs_order_number#142L, cs_quantity#143, cs_wholesale_cost#144, cs_list_price#145, cs_sales_price#146, cs_ext_discount_amt#147, cs_ext_sales_price#148, cs_ext_wholesale_cost#149, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "6" : {
            "sign" : -1092515391,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1048824,
                "rowCount" : 31
              },
              "compileTime" : {
                "sizeInBytes" : 360,
                "rowCount" : 30
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#576], BroadcastQueryStage 7 "
          },
          "1" : {
            "sign" : 996608995,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 124360978756,
                "rowCount" : 4441463527
              },
              "compileTime" : {
                "sizeInBytes" : 124360978756,
                "rowCount" : 4441463527
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#136, cs_ext_sales_price#148, cs_net_profit#158] "
          },
          "0" : {
            "sign" : -1659462906,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 896,
                "rowCount" : 32
              },
              "compileTime" : {
                "sizeInBytes" : 896,
                "rowCount" : 32
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [cs_call_center_sk#136], [cs_call_center_sk#136, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#148)),17,2) AS sales#511, MakeDecimal(sum(UnscaledValue(cs_net_profit#158)),17,2) AS profit#512] "
          },
          "2" : {
            "sign" : 1174371790,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 159892686972,
                "rowCount" : 4441463527
              },
              "compileTime" : {
                "sizeInBytes" : 159892686972,
                "rowCount" : 4441463527
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (cs_sold_date_sk#159 = d_date_sk#576) "
          },
          "3" : {
            "sign" : 1104095894,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4584736544,
                "rowCount" : 143273017
              },
              "compileTime" : {
                "sizeInBytes" : 4584736544,
                "rowCount" : 143273017
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_call_center_sk#136, cs_ext_sales_price#148, cs_net_profit#158, cs_sold_date_sk#159] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalRelation",
          "toId" : 4,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Filter",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [cs_call_center_sk#136], [cs_call_center_sk#136, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#148)),17,2) AS sales#511, MakeDecimal(sum(UnscaledValue(cs_net_profit#158)),17,2) AS profit#512]\n+- Project [cs_call_center_sk#136, cs_ext_sales_price#148, cs_net_profit#158]\n   +- Join Inner, (cs_sold_date_sk#159 = d_date_sk#576)\n      :- Project [cs_call_center_sk#136, cs_ext_sales_price#148, cs_net_profit#158, cs_sold_date_sk#159]\n      :  +- Filter (isnotnull(cs_sold_date_sk#159) AND dynamicpruning#740 [cs_sold_date_sk#159])\n      :     :  +- Project [d_date_sk#576]\n      :     :     +- Filter ((isnotnull(d_date#578) AND ((d_date#578 >= 1998-08-04) AND (d_date#578 <= 1998-09-03))) AND isnotnull(d_date_sk#576))\n      :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#576,d_date_id#577,d_date#578,d_month_seq#579,d_week_seq#580,d_quarter_seq#581,d_year#582,d_dow#583,d_moy#584,d_dom#585,d_qoy#586,d_fy_year#587,d_fy_quarter_seq#588,d_fy_week_seq#589,d_day_name#590,d_quarter_name#591,d_holiday#592,d_weekend#593,d_following_holiday#594,d_first_dom#595,d_last_dom#596,d_same_day_ly#597,d_same_day_lq#598,d_current_day#599,... 4 more fields] parquet\n      :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#126,cs_ship_date_sk#127,cs_bill_customer_sk#128,cs_bill_cdemo_sk#129,cs_bill_hdemo_sk#130,cs_bill_addr_sk#131,cs_ship_customer_sk#132,cs_ship_cdemo_sk#133,cs_ship_hdemo_sk#134,cs_ship_addr_sk#135,cs_call_center_sk#136,cs_catalog_page_sk#137,cs_ship_mode_sk#138,cs_warehouse_sk#139,cs_item_sk#140,cs_promo_sk#141,cs_order_number#142L,cs_quantity#143,cs_wholesale_cost#144,cs_list_price#145,cs_sales_price#146,cs_ext_discount_amt#147,cs_ext_sales_price#148,cs_ext_wholesale_cost#149,... 10 more fields] parquet\n      +- LogicalQueryStage Project [d_date_sk#576], BroadcastQueryStage 7\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 726241999,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#576] Arguments: 7 "
          },
          "1" : {
            "sign" : 853429227,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 124360978756,
            "rowCount" : 4441463527,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [cs_call_center_sk#136, cs_ext_sales_price#148, cs_net_profit#158] Input [5]: [cs_call_center_sk#136, cs_ext_sales_price#148, cs_net_profit#158, cs_sold_date_sk#159, d_date_sk#576] "
          },
          "0" : {
            "sign" : -1295534516,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 896,
            "rowCount" : 32,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [3]: [cs_call_center_sk#136, cs_ext_sales_price#148, cs_net_profit#158] Keys [1]: [cs_call_center_sk#136] Functions [2]: [partial_sum(UnscaledValue(cs_ext_sales_price#148)), partial_sum(UnscaledValue(cs_net_profit#158))] Aggregate Attributes [2]: [sum#764L, sum#765L] Results [3]: [cs_call_center_sk#136, sum#766L, sum#767L] "
          },
          "2" : {
            "sign" : -1288389970,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 159892686972,
            "rowCount" : 4441463527,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [cs_sold_date_sk#159] Right keys [1]: [d_date_sk#576] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : 659715348,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 4584736544,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.catalog_sales Output [4]: [cs_call_center_sk#136, cs_ext_sales_price#148, cs_net_profit#158, cs_sold_date_sk#159] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_sales/cs_sold_date_sk=2450815, ... 1835 entries] PartitionFilters: [isnotnull(cs_sold_date_sk#159), dynamicpruningexpression(cs_sold_date_sk#159 IN dynamicpruning#740)] ReadSchema: struct<cs_call_center_sk:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.catalog_sales",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[cs_call_center_sk#136], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#148)), partial_sum(UnscaledValue(cs_net_profit#158))], output=[cs_call_center_sk#136, sum#766L, sum#767L])\n+- Project [cs_call_center_sk#136, cs_ext_sales_price#148, cs_net_profit#158]\n   +- BroadcastHashJoin [cs_sold_date_sk#159], [d_date_sk#576], Inner, BuildRight, false\n      :- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_call_center_sk#136,cs_ext_sales_price#148,cs_net_profit#158,cs_sold_date_sk#159] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#159), dynamicpruningexpression(cs_sold_date_sk#159 IN dynamicpruning#7..., PushedFilters: [], ReadSchema: struct<cs_call_center_sk:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>\n      :     +- SubqueryBroadcast dynamicpruning#740, 0, [d_date_sk#576], [id=#1625]\n      :        +- AdaptiveSparkPlan isFinalPlan=false\n      :           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1622]\n      :              +- Project [d_date_sk#576]\n      :                 +- Filter (((isnotnull(d_date#578) AND (d_date#578 >= 1998-08-04)) AND (d_date#578 <= 1998-09-03)) AND isnotnull(d_date_sk#576))\n      :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#576,d_date#578] Batched: true, DataFilters: [isnotnull(d_date#578), (d_date#578 >= 1998-08-04), (d_date#578 <= 1998-09-03), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n      +- BroadcastQueryStage 7\n         +- ReusedExchange [d_date_sk#576], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=698]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 4585785368,
        "inputRowCount" : 143273048
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 9 ],
      "Objectives" : {
        "DurationInMs" : 14637,
        "TotalTasksDurationInMs" : 61384,
        "IOBytes" : {
          "Total" : 27064373,
          "Details" : {
            "IR" : 27046504,
            "IW" : 0,
            "SR" : 0,
            "SW" : 17869
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702227368293,
  "SQLEndTimeInMs" : 1702227391631,
  "Objectives" : {
    "DurationInMs" : 23338,
    "IOBytes" : {
      "Total" : 101682214,
      "Details" : {
        "IR" : 98875594,
        "IW" : 0,
        "SR" : 1403310,
        "SW" : 1403310
      }
    }
  }
}
