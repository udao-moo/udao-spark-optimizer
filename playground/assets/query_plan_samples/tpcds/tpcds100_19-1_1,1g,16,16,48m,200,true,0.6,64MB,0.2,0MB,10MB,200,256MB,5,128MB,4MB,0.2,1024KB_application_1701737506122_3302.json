{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "34" : {
          "sign" : -971074395,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 246000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#94, ca_address_id#95, ca_street_number#96, ca_street_name#97, ca_street_type#98, ca_suite_number#99, ca_city#100, ca_county#101, ca_state#102, ca_zip#103, ca_country#104, ca_gmt_offset#105, ca_location_type#106], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "12" : {
          "sign" : 1311865300,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 7435136380,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#32, ss_customer_sk#33, ss_store_sk#37, ss_ext_sales_price#45] "
        },
        "8" : {
          "sign" : 1829604896,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 24416923285,
          "rowCount" : 287257921,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68] "
        },
        "19" : {
          "sign" : 152283653,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 41806893656,
          "rowCount" : 275045353,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#31, ss_item_sk#32, ss_customer_sk#33, ss_cdemo_sk#34, ss_hdemo_sk#35, ss_addr_sk#36, ss_store_sk#37, ss_promo_sk#38, ss_ticket_number#39L, ss_quantity#40, ss_wholesale_cost#41, ss_list_price#42, ss_sales_price#43, ss_ext_discount_amt#44, ss_ext_sales_price#45, ss_ext_wholesale_cost#46, ss_ext_list_price#47, ss_ext_tax#48, ss_coupon_amt#49, ss_net_paid#50, ss_net_paid_inc_tax#51, ss_net_profit#52, ss_sold_date_sk#53], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "23" : {
          "sign" : -1212134612,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 2048208,
          "rowCount" : 4808,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(i_manager_id#74) AND (i_manager_id#74 = 7)) AND isnotnull(i_item_sk#54)) "
        },
        "4" : {
          "sign" : -662885897,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 154782320,
          "rowCount" : 2010160,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_ext_sales_price#45, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68] "
        },
        "15" : {
          "sign" : 1968710013,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 18450,
          "rowCount" : 75,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#11) AND isnotnull(d_year#9)) AND ((d_moy#11 = 11) AND (d_year#9 = 1999))) AND isnotnull(d_date_sk#3)) "
        },
        "11" : {
          "sign" : -1913765556,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 9901582236,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#33 = c_customer_sk#76) "
        },
        "9" : {
          "sign" : -809374173,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 26714986653,
          "rowCount" : 287257921,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#32 = i_item_sk#54) "
        },
        "33" : {
          "sign" : 73781076,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 238586298,
          "rowCount" : 969863,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_address_sk#94) AND isnotnull(ca_zip#103)) "
        },
        "22" : {
          "sign" : -671281459,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 57696,
          "rowCount" : 4808,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#54] "
        },
        "26" : {
          "sign" : 1739402720,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 500000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#76) AND isnotnull(c_current_addr_sk#80)) "
        },
        "13" : {
          "sign" : -1878624488,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 9559461060,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#3 = ss_sold_date_sk#53) "
        },
        "24" : {
          "sign" : 743395023,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#54, i_item_id#55, i_rec_start_date#56, i_rec_end_date#57, i_item_desc#58, i_current_price#59, i_wholesale_cost#60, i_brand_id#61, i_brand#62, i_class_id#63, i_class#64, i_category_id#65, i_category#66, i_manufact_id#67, i_manufact#68, i_size#69, i_formulation#70, i_color#71, i_units#72, i_container#73, i_manager_id#74, i_product_name#75], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "16" : {
          "sign" : 2116768618,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#3, d_date_id#4, d_date#5, d_month_seq#6, d_week_seq#7, d_quarter_seq#8, d_year#9, d_dow#10, d_moy#11, d_dom#12, d_qoy#13, d_fy_year#14, d_fy_quarter_seq#15, d_fy_week_seq#16, d_day_name#17, d_quarter_name#18, d_holiday#19, d_weekend#20, d_following_holiday#21, d_first_dom#22, d_last_dom#23, d_same_day_ly#24, d_same_day_lq#25, d_current_day#26, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "5" : {
          "sign" : -1223884697,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 239209040,
          "rowCount" : 2010160,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((c_current_addr_sk#80 = ca_address_sk#94) AND NOT (substr(ca_zip#103, 1, 5) = substr(s_zip#132, 1, 5))) "
        },
        "10" : {
          "sign" : 311822282,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 7701230628,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#32, ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80] "
        },
        "21" : {
          "sign" : -1628264074,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 57696,
          "rowCount" : 4808,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#54] "
        },
        "32" : {
          "sign" : 1710473876,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 28126027,
          "rowCount" : 969863,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ca_address_sk#94, ca_zip#103] "
        },
        "6" : {
          "sign" : 1297170829,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 56629597822,
          "rowCount" : 577853039,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68, s_zip#132] "
        },
        "1" : {
          "sign" : 1233892411,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
          "sizeInBytes" : 1232,
          "rowCount" : 16,
          "isRuntime" : false,
          "predicate" : " (unknown) LocalLimit Arguments: 100 "
        },
        "17" : {
          "sign" : 1136602853,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 8027326208,
          "rowCount" : 250853944,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#32, ss_customer_sk#33, ss_store_sk#37, ss_ext_sales_price#45, ss_sold_date_sk#53] "
        },
        "25" : {
          "sign" : -1773063633,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 32000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_customer_sk#76, c_current_addr_sk#80] "
        },
        "14" : {
          "sign" : 2002820564,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 900,
          "rowCount" : 75,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#3] "
        },
        "31" : {
          "sign" : 868826989,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 192558,
          "rowCount" : 402,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#107, s_store_id#108, s_rec_start_date#109, s_rec_end_date#110, s_closed_date_sk#111, s_store_name#112, s_number_employees#113, s_floor_space#114, s_hours#115, s_manager#116, s_market_id#117, s_geography_class#118, s_market_desc#119, s_market_manager#120, s_division_id#121, s_division_name#122, s_company_id#123, s_company_name#124, s_street_number#125, s_street_name#126, s_street_type#127, s_suite_number#128, s_city#129, s_county#130, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "0" : {
          "sign" : -1214500746,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
          "sizeInBytes" : 1024,
          "rowCount" : 16,
          "isRuntime" : false,
          "predicate" : " (unknown) GlobalLimit Arguments: 100 "
        },
        "20" : {
          "sign" : 1862923115,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 108,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0) AS bloomFilter#150] "
        },
        "27" : {
          "sign" : 247389664,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 500000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#76, c_customer_id#77, c_current_cdemo_sk#78, c_current_hdemo_sk#79, c_current_addr_sk#80, c_first_shipto_date_sk#81, c_first_sales_date_sk#82, c_salutation#83, c_first_name#84, c_last_name#85, c_preferred_cust_flag#86, c_birth_day#87, c_birth_month#88, c_birth_year#89, c_birth_country#90, c_login#91, c_email_address#92, c_last_review_date#93], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "2" : {
          "sign" : -155922144,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 1232,
          "rowCount" : 16,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [ext_price#2 DESC NULLS LAST, brand#1 ASC NULLS FIRST, brand_id#0 ASC NULLS FIRST, i_manufact_id#67 ASC NULLS FIRST, i_manufact#68 ASC NULLS FIRST], true "
        },
        "18" : {
          "sign" : -243381039,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 38129799488,
          "rowCount" : 250853944,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ss_sold_date_sk#53) AND isnotnull(ss_item_sk#32)) AND isnotnull(ss_customer_sk#33)) AND isnotnull(ss_store_sk#37)) AND (dynamicpruning#148 [ss_sold_date_sk#53] AND might_contain(scalar-subquery#151 [], xxhash64(ss_item_sk#32, 42)))) "
        },
        "30" : {
          "sign" : -407140704,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 192558,
          "rowCount" : 402,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(s_zip#132) AND isnotnull(s_store_sk#107)) "
        },
        "7" : {
          "sign" : 727951660,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 61252422134,
          "rowCount" : 577853039,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#37 = s_store_sk#107) "
        },
        "29" : {
          "sign" : 1238250800,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 11658,
          "rowCount" : 402,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [s_store_sk#107, s_zip#132] "
        },
        "3" : {
          "sign" : 1443798387,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 1232,
          "rowCount" : 16,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [i_brand#62, i_brand_id#61, i_manufact_id#67, i_manufact#68], [i_brand_id#61 AS brand_id#0, i_brand#62 AS brand#1, i_manufact_id#67, i_manufact#68, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#45)),17,2) AS ext_price#2] "
        },
        "28" : {
          "sign" : -1938078493,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 350984,
          "rowCount" : 4808,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#54, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68] "
        }
      },
      "links" : [ {
        "fromId" : 16,
        "fromName" : "LogicalRelation",
        "toId" : 15,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "Filter",
        "toId" : 14,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Project",
        "toId" : 13,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "LogicalRelation",
        "toId" : 18,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Project",
        "toId" : 18,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 24,
        "fromName" : "LogicalRelation",
        "toId" : 23,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "Filter",
        "toId" : 22,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "Project",
        "toId" : 21,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Project",
        "toId" : 20,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "Aggregate",
        "toId" : 18,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 18,
        "fromName" : "Filter",
        "toId" : 17,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Project",
        "toId" : 13,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Join",
        "toId" : 12,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 12,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "LogicalRelation",
        "toId" : 26,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "Filter",
        "toId" : 25,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "Join",
        "toId" : 10,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "Filter",
        "toId" : 28,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Join",
        "toId" : 8,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 31,
        "fromName" : "LogicalRelation",
        "toId" : 30,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 30,
        "fromName" : "Filter",
        "toId" : 29,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 29,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Join",
        "toId" : 6,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Project",
        "toId" : 5,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 34,
        "fromName" : "LogicalRelation",
        "toId" : 33,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 33,
        "fromName" : "Filter",
        "toId" : 32,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 32,
        "fromName" : "Project",
        "toId" : 5,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Join",
        "toId" : 4,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Project",
        "toId" : 3,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Aggregate",
        "toId" : 2,
        "toName" : "Sort",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Sort",
        "toId" : 1,
        "toName" : "LocalLimit",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "LocalLimit",
        "toId" : 0,
        "toName" : "GlobalLimit",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [ext_price#2 DESC NULLS LAST, brand#1 ASC NULLS FIRST, brand_id#0 ASC NULLS FIRST, i_manufact_id#67 ASC NULLS FIRST, i_manufact#68 ASC NULLS FIRST], true\n      +- Aggregate [i_brand#62, i_brand_id#61, i_manufact_id#67, i_manufact#68], [i_brand_id#61 AS brand_id#0, i_brand#62 AS brand#1, i_manufact_id#67, i_manufact#68, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#45)),17,2) AS ext_price#2]\n         +- Project [ss_ext_sales_price#45, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68]\n            +- Join Inner, ((c_current_addr_sk#80 = ca_address_sk#94) AND NOT (substr(ca_zip#103, 1, 5) = substr(s_zip#132, 1, 5)))\n               :- Project [ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68, s_zip#132]\n               :  +- Join Inner, (ss_store_sk#37 = s_store_sk#107)\n               :     :- Project [ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68]\n               :     :  +- Join Inner, (ss_item_sk#32 = i_item_sk#54)\n               :     :     :- Project [ss_item_sk#32, ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80]\n               :     :     :  +- Join Inner, (ss_customer_sk#33 = c_customer_sk#76)\n               :     :     :     :- Project [ss_item_sk#32, ss_customer_sk#33, ss_store_sk#37, ss_ext_sales_price#45]\n               :     :     :     :  +- Join Inner, (d_date_sk#3 = ss_sold_date_sk#53)\n               :     :     :     :     :- Project [d_date_sk#3]\n               :     :     :     :     :  +- Filter (((isnotnull(d_moy#11) AND isnotnull(d_year#9)) AND ((d_moy#11 = 11) AND (d_year#9 = 1999))) AND isnotnull(d_date_sk#3))\n               :     :     :     :     :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#3,d_date_id#4,d_date#5,d_month_seq#6,d_week_seq#7,d_quarter_seq#8,d_year#9,d_dow#10,d_moy#11,d_dom#12,d_qoy#13,d_fy_year#14,d_fy_quarter_seq#15,d_fy_week_seq#16,d_day_name#17,d_quarter_name#18,d_holiday#19,d_weekend#20,d_following_holiday#21,d_first_dom#22,d_last_dom#23,d_same_day_ly#24,d_same_day_lq#25,d_current_day#26,... 4 more fields] parquet\n               :     :     :     :     +- Project [ss_item_sk#32, ss_customer_sk#33, ss_store_sk#37, ss_ext_sales_price#45, ss_sold_date_sk#53]\n               :     :     :     :        +- Filter ((((isnotnull(ss_sold_date_sk#53) AND isnotnull(ss_item_sk#32)) AND isnotnull(ss_customer_sk#33)) AND isnotnull(ss_store_sk#37)) AND (dynamicpruning#148 [ss_sold_date_sk#53] AND might_contain(scalar-subquery#151 [], xxhash64(ss_item_sk#32, 42))))\n               :     :     :     :           :  :- Project [d_date_sk#3]\n               :     :     :     :           :  :  +- Filter (((isnotnull(d_moy#11) AND isnotnull(d_year#9)) AND ((d_moy#11 = 11) AND (d_year#9 = 1999))) AND isnotnull(d_date_sk#3))\n               :     :     :     :           :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#3,d_date_id#4,d_date#5,d_month_seq#6,d_week_seq#7,d_quarter_seq#8,d_year#9,d_dow#10,d_moy#11,d_dom#12,d_qoy#13,d_fy_year#14,d_fy_quarter_seq#15,d_fy_week_seq#16,d_day_name#17,d_quarter_name#18,d_holiday#19,d_weekend#20,d_following_holiday#21,d_first_dom#22,d_last_dom#23,d_same_day_ly#24,d_same_day_lq#25,d_current_day#26,... 4 more fields] parquet\n               :     :     :     :           :  +- Aggregate [bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0) AS bloomFilter#150]\n               :     :     :     :           :     +- Project [i_item_sk#54]\n               :     :     :     :           :        +- Project [i_item_sk#54]\n               :     :     :     :           :           +- Filter ((isnotnull(i_manager_id#74) AND (i_manager_id#74 = 7)) AND isnotnull(i_item_sk#54))\n               :     :     :     :           :              +- Relation spark_catalog.tpcds_100.item[i_item_sk#54,i_item_id#55,i_rec_start_date#56,i_rec_end_date#57,i_item_desc#58,i_current_price#59,i_wholesale_cost#60,i_brand_id#61,i_brand#62,i_class_id#63,i_class#64,i_category_id#65,i_category#66,i_manufact_id#67,i_manufact#68,i_size#69,i_formulation#70,i_color#71,i_units#72,i_container#73,i_manager_id#74,i_product_name#75] parquet\n               :     :     :     :           +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#31,ss_item_sk#32,ss_customer_sk#33,ss_cdemo_sk#34,ss_hdemo_sk#35,ss_addr_sk#36,ss_store_sk#37,ss_promo_sk#38,ss_ticket_number#39L,ss_quantity#40,ss_wholesale_cost#41,ss_list_price#42,ss_sales_price#43,ss_ext_discount_amt#44,ss_ext_sales_price#45,ss_ext_wholesale_cost#46,ss_ext_list_price#47,ss_ext_tax#48,ss_coupon_amt#49,ss_net_paid#50,ss_net_paid_inc_tax#51,ss_net_profit#52,ss_sold_date_sk#53] parquet\n               :     :     :     +- Project [c_customer_sk#76, c_current_addr_sk#80]\n               :     :     :        +- Filter (isnotnull(c_customer_sk#76) AND isnotnull(c_current_addr_sk#80))\n               :     :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#76,c_customer_id#77,c_current_cdemo_sk#78,c_current_hdemo_sk#79,c_current_addr_sk#80,c_first_shipto_date_sk#81,c_first_sales_date_sk#82,c_salutation#83,c_first_name#84,c_last_name#85,c_preferred_cust_flag#86,c_birth_day#87,c_birth_month#88,c_birth_year#89,c_birth_country#90,c_login#91,c_email_address#92,c_last_review_date#93] parquet\n               :     :     +- Project [i_item_sk#54, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68]\n               :     :        +- Filter ((isnotnull(i_manager_id#74) AND (i_manager_id#74 = 7)) AND isnotnull(i_item_sk#54))\n               :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#54,i_item_id#55,i_rec_start_date#56,i_rec_end_date#57,i_item_desc#58,i_current_price#59,i_wholesale_cost#60,i_brand_id#61,i_brand#62,i_class_id#63,i_class#64,i_category_id#65,i_category#66,i_manufact_id#67,i_manufact#68,i_size#69,i_formulation#70,i_color#71,i_units#72,i_container#73,i_manager_id#74,i_product_name#75] parquet\n               :     +- Project [s_store_sk#107, s_zip#132]\n               :        +- Filter (isnotnull(s_zip#132) AND isnotnull(s_store_sk#107))\n               :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#107,s_store_id#108,s_rec_start_date#109,s_rec_end_date#110,s_closed_date_sk#111,s_store_name#112,s_number_employees#113,s_floor_space#114,s_hours#115,s_manager#116,s_market_id#117,s_geography_class#118,s_market_desc#119,s_market_manager#120,s_division_id#121,s_division_name#122,s_company_id#123,s_company_name#124,s_street_number#125,s_street_name#126,s_street_type#127,s_suite_number#128,s_city#129,s_county#130,... 5 more fields] parquet\n               +- Project [ca_address_sk#94, ca_zip#103]\n                  +- Filter (isnotnull(ca_address_sk#94) AND isnotnull(ca_zip#103))\n                     +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#94,ca_address_id#95,ca_street_number#96,ca_street_name#97,ca_street_type#98,ca_suite_number#99,ca_city#100,ca_county#101,ca_state#102,ca_zip#103,ca_country#104,ca_gmt_offset#105,ca_location_type#106] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 42657960268,
      "inputRowCount" : 278322804
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "4" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1044023409,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6325320,
            "rowCount" : 158133,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#32, ss_customer_sk#33, ss_store_sk#37, ss_ext_sales_price#45], ShuffleQueryStage 5 "
          },
          "8" : {
            "sign" : 274868538,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 86257123776000000,
            "rowCount" : 1198015608000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68] "
          },
          "4" : {
            "sign" : 1479111492,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 29893646507003200512000000,
            "rowCount" : 467088226671925008000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_ext_sales_price#45, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68] "
          },
          "15" : {
            "sign" : -829048019,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051792,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#107, s_zip#132], BroadcastQueryStage 3 "
          },
          "11" : {
            "sign" : 995636222,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 11385576000000,
            "rowCount" : 316266000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#33 = c_customer_sk#76) "
          },
          "9" : {
            "sign" : -953582053,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 95841248640000000,
            "rowCount" : 1198015608000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#32 = i_item_sk#54) "
          },
          "13" : {
            "sign" : -1043967880,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 48000000,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#76, c_current_addr_sk#80], ShuffleQueryStage 1 "
          },
          "16" : {
            "sign" : 86825606,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 31035616,
            "rowCount" : 969863,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#94, ca_zip#103], ShuffleQueryStage 4 "
          },
          "5" : {
            "sign" : -580307284,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 52313881387255600896000000,
            "rowCount" : 467088226671925008000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_current_addr_sk#80 = ca_address_sk#94) AND NOT (substr(ca_zip#103, 1, 5) = substr(s_zip#132, 1, 5))) "
          },
          "10" : {
            "sign" : 629336964,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 8855448000000,
            "rowCount" : 316266000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#32, ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80] "
          },
          "6" : {
            "sign" : -1521269372,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 42381000148608000000,
            "rowCount" : 481602274416000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68, s_zip#132] "
          },
          "1" : {
            "sign" : 375070808,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 29893646507003200512000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "14" : {
            "sign" : 894771989,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1179648,
            "rowCount" : 3788,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#54, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68], BroadcastQueryStage 2 "
          },
          "0" : {
            "sign" : 758988615,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 6400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1459648049,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 29893646507003200512000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [ext_price#154 DESC NULLS LAST, brand#153 ASC NULLS FIRST, brand_id#152 ASC NULLS FIRST, i_manufact_id#67 ASC NULLS FIRST, i_manufact#68 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -1971437633,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 46233818343936000000,
            "rowCount" : 481602274416000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#37 = s_store_sk#107) "
          },
          "3" : {
            "sign" : 1809393406,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 29893646507003200512000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_brand#62, i_brand_id#61, i_manufact_id#67, i_manufact#68], [i_brand_id#61 AS brand_id#152, i_brand#62 AS brand#153, i_manufact_id#67, i_manufact#68, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#45)),17,2) AS ext_price#154] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [ext_price#154 DESC NULLS LAST, brand#153 ASC NULLS FIRST, brand_id#152 ASC NULLS FIRST, i_manufact_id#67 ASC NULLS FIRST, i_manufact#68 ASC NULLS FIRST], true\n      +- Aggregate [i_brand#62, i_brand_id#61, i_manufact_id#67, i_manufact#68], [i_brand_id#61 AS brand_id#152, i_brand#62 AS brand#153, i_manufact_id#67, i_manufact#68, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#45)),17,2) AS ext_price#154]\n         +- Project [ss_ext_sales_price#45, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68]\n            +- Join Inner, ((c_current_addr_sk#80 = ca_address_sk#94) AND NOT (substr(ca_zip#103, 1, 5) = substr(s_zip#132, 1, 5)))\n               :- Project [ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68, s_zip#132]\n               :  +- Join Inner, (ss_store_sk#37 = s_store_sk#107)\n               :     :- Project [ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68]\n               :     :  +- Join Inner, (ss_item_sk#32 = i_item_sk#54)\n               :     :     :- Project [ss_item_sk#32, ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80]\n               :     :     :  +- Join Inner, (ss_customer_sk#33 = c_customer_sk#76)\n               :     :     :     :- LogicalQueryStage Project [ss_item_sk#32, ss_customer_sk#33, ss_store_sk#37, ss_ext_sales_price#45], ShuffleQueryStage 5\n               :     :     :     +- LogicalQueryStage Project [c_customer_sk#76, c_current_addr_sk#80], ShuffleQueryStage 1\n               :     :     +- LogicalQueryStage Project [i_item_sk#54, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68], BroadcastQueryStage 2\n               :     +- LogicalQueryStage Project [s_store_sk#107, s_zip#132], BroadcastQueryStage 3\n               +- LogicalQueryStage Project [ca_address_sk#94, ca_zip#103], ShuffleQueryStage 4\n"
      },
      "IM" : {
        "inputSizeInBytes" : 87592376,
        "inputRowCount" : 3132186
      },
      "PD" : {
        "1" : [ 52331, 47574, 52331, 52331, 52331, 47574, 47574, 52331, 47574, 52331, 52331, 47574, 52331, 47574, 47574, 52331, 47574, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 47574, 52331, 52331, 47574, 47574, 52331, 52331, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 52331, 47574, 47574, 47574, 52331, 47574, 47574, 52331, 47574, 52331, 47574, 52331, 47574, 47574, 47574, 52331, 47574, 52331, 47574, 52331, 52331, 47574, 52331, 52331, 52331, 47574, 52331, 52331, 52331, 47574, 52331, 47574, 52331, 47574, 47574, 52331, 52331, 47574, 52331, 47574, 47574, 52331, 52331, 52331, 47574, 52331, 52331, 52331, 52331, 52331, 47574, 47574, 47574, 47574, 47574, 52331, 52331, 47574, 47574, 52331, 52331, 52331, 47574, 47574, 47574, 52331, 47574, 52331, 52331, 52331, 47574, 47574, 47574, 47574, 47574, 52331, 52331, 52331, 52331, 52331, 52331, 47574, 47574, 52331, 47574, 52331, 47574, 52331, 52331, 47574, 47574, 52331, 47574, 52331, 47574, 47574, 52331, 47574, 52331, 52331, 52331, 52331, 52331, 47574, 47574, 47574, 52331, 52331, 47574, 52331, 47574, 52331, 52331, 47574, 47574, 52331, 52331, 47574, 52331, 47574, 52331, 52331, 47574, 52331, 52331, 52331, 52331, 47574, 47574, 47574, 52331, 47574, 47574, 47574, 52331, 52331, 47574, 47574, 52331, 52331, 52331, 52331, 47574, 47574, 52331, 47574, 47574, 47574, 47574, 52331, 52331, 52331, 52331, 52331 ],
        "3" : [ 19879, 19528, 20309, 21831, 20281, 20904, 20302, 19527, 20305, 20631, 19795, 18784, 20735, 20792, 20948, 19297, 19995, 20610, 21308, 18464, 20786, 21033, 19528, 20108, 20472, 18738, 19389, 20660, 20624, 21201, 20594, 19985, 20349, 18302, 19639, 21424, 20291, 20318, 19460, 19185, 19491, 18994, 19601, 21395, 19453, 19863, 20670, 19200, 20313, 20728, 20836, 20802, 20434, 20215, 20240, 19923, 21049, 19339, 20327, 21056, 21290, 19613, 20674, 20118, 21727, 21210, 20770, 20979, 21323, 20673, 19613, 19962, 19924, 20184, 20085, 20135, 19778, 21021, 20159, 19809, 20695, 21786, 20545, 20194, 20522, 18964, 20102, 20175, 19972, 19743, 19947, 19412, 21320, 21271, 20007, 21342, 20043, 19120, 20234, 20521, 19789, 20385, 20292, 19109, 21071, 20080, 20753, 20875, 19311, 19776, 20416, 20725, 20528, 20871, 20735, 20148, 19986, 20303, 20612, 20628, 19491, 19886, 19678, 19723, 20877, 20445, 19960, 21443, 19052, 18863, 21168, 22071, 20611, 20711, 19759, 20075, 21793, 20929, 20650, 20739, 20443, 20077, 20095, 21023, 20451, 20310, 21005, 19742, 20620, 20990, 20991, 20080, 20193, 20414, 21495, 19994, 21118, 20695, 20850, 19175, 19964, 19855, 20255, 20590, 20899, 20592, 20619, 20069, 20637, 21399, 20581, 21994, 21489, 20218, 20270, 22068, 18983, 19992, 19821, 20258, 18638, 21100, 20725, 20817, 20937, 20086, 21122, 20511, 18821, 20527, 21160, 20173, 19330, 19555, 21440, 21184, 19392, 20453, 20433, 19994 ],
        "0" : [ 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 112177, 101979, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 112177, 101979, 112177, 112177, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 112177, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 112177, 101979 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226653801,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 3389,
        "IOBytes" : {
          "Total" : 48436488,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 41049732,
            "SW" : 7386756
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 881744139,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 16777216,
            "rowCount" : 158133,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Project [ss_item_sk#32, ss_customer_sk#33, ss_store_sk#37, ss_ext_sales_price#45], ShuffleQueryStage 5, BroadcastQueryStage 6 "
          },
          "8" : {
            "sign" : 290929352,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 86257123776000000,
            "rowCount" : 1198015608000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68] "
          },
          "4" : {
            "sign" : -1740948228,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 29893646507003200512000000,
            "rowCount" : 467088226671925008000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_ext_sales_price#45, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68] "
          },
          "15" : {
            "sign" : -829048019,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051792,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#107, s_zip#132], BroadcastQueryStage 3 "
          },
          "11" : {
            "sign" : -1937049582,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 11385576000000,
            "rowCount" : 316266000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#33 = c_customer_sk#76) "
          },
          "9" : {
            "sign" : 310732359,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 95841248640000000,
            "rowCount" : 1198015608000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#32 = i_item_sk#54) "
          },
          "13" : {
            "sign" : -1043967880,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 48000000,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#76, c_current_addr_sk#80], ShuffleQueryStage 1 "
          },
          "16" : {
            "sign" : 86825606,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 31035616,
            "rowCount" : 969863,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#94, ca_zip#103], ShuffleQueryStage 4 "
          },
          "5" : {
            "sign" : -1592503856,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 52313881387255600896000000,
            "rowCount" : 467088226671925008000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_current_addr_sk#80 = ca_address_sk#94) AND NOT (substr(ca_zip#103, 1, 5) = substr(s_zip#132, 1, 5))) "
          },
          "10" : {
            "sign" : 14622788,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 8855448000000,
            "rowCount" : 316266000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#32, ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80] "
          },
          "6" : {
            "sign" : -450388400,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 42381000148608000000,
            "rowCount" : 481602274416000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68, s_zip#132] "
          },
          "1" : {
            "sign" : 1812047524,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 29893646507003200512000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "14" : {
            "sign" : 894771989,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1179648,
            "rowCount" : 3788,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#54, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68], BroadcastQueryStage 2 "
          },
          "0" : {
            "sign" : 344909657,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 6400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1452211153,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 29893646507003200512000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [ext_price#154 DESC NULLS LAST, brand#153 ASC NULLS FIRST, brand_id#152 ASC NULLS FIRST, i_manufact_id#67 ASC NULLS FIRST, i_manufact#68 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 449602977,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 46233818343936000000,
            "rowCount" : 481602274416000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#37 = s_store_sk#107) "
          },
          "3" : {
            "sign" : 42626110,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 29893646507003200512000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_brand#62, i_brand_id#61, i_manufact_id#67, i_manufact#68], [i_brand_id#61 AS brand_id#152, i_brand#62 AS brand#153, i_manufact_id#67, i_manufact#68, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#45)),17,2) AS ext_price#154] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [ext_price#154 DESC NULLS LAST, brand#153 ASC NULLS FIRST, brand_id#152 ASC NULLS FIRST, i_manufact_id#67 ASC NULLS FIRST, i_manufact#68 ASC NULLS FIRST], true\n      +- Aggregate [i_brand#62, i_brand_id#61, i_manufact_id#67, i_manufact#68], [i_brand_id#61 AS brand_id#152, i_brand#62 AS brand#153, i_manufact_id#67, i_manufact#68, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#45)),17,2) AS ext_price#154]\n         +- Project [ss_ext_sales_price#45, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68]\n            +- Join Inner, ((c_current_addr_sk#80 = ca_address_sk#94) AND NOT (substr(ca_zip#103, 1, 5) = substr(s_zip#132, 1, 5)))\n               :- Project [ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68, s_zip#132]\n               :  +- Join Inner, (ss_store_sk#37 = s_store_sk#107)\n               :     :- Project [ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68]\n               :     :  +- Join Inner, (ss_item_sk#32 = i_item_sk#54)\n               :     :     :- Project [ss_item_sk#32, ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80]\n               :     :     :  +- Join Inner, (ss_customer_sk#33 = c_customer_sk#76)\n               :     :     :     :- LogicalQueryStage LogicalQueryStage Project [ss_item_sk#32, ss_customer_sk#33, ss_store_sk#37, ss_ext_sales_price#45], ShuffleQueryStage 5, BroadcastQueryStage 6\n               :     :     :     +- LogicalQueryStage Project [c_customer_sk#76, c_current_addr_sk#80], ShuffleQueryStage 1\n               :     :     +- LogicalQueryStage Project [i_item_sk#54, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68], BroadcastQueryStage 2\n               :     +- LogicalQueryStage Project [s_store_sk#107, s_zip#132], BroadcastQueryStage 3\n               +- LogicalQueryStage Project [ca_address_sk#94, ca_zip#103], ShuffleQueryStage 4\n"
      },
      "IM" : {
        "inputSizeInBytes" : 98044272,
        "inputRowCount" : 3132186
      },
      "PD" : {
        "1" : [ 52331, 47574, 52331, 52331, 52331, 47574, 47574, 52331, 47574, 52331, 52331, 47574, 52331, 47574, 47574, 52331, 47574, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 47574, 52331, 52331, 47574, 47574, 52331, 52331, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 52331, 47574, 47574, 47574, 52331, 47574, 47574, 52331, 47574, 52331, 47574, 52331, 47574, 47574, 47574, 52331, 47574, 52331, 47574, 52331, 52331, 47574, 52331, 52331, 52331, 47574, 52331, 52331, 52331, 47574, 52331, 47574, 52331, 47574, 47574, 52331, 52331, 47574, 52331, 47574, 47574, 52331, 52331, 52331, 47574, 52331, 52331, 52331, 52331, 52331, 47574, 47574, 47574, 47574, 47574, 52331, 52331, 47574, 47574, 52331, 52331, 52331, 47574, 47574, 47574, 52331, 47574, 52331, 52331, 52331, 47574, 47574, 47574, 47574, 47574, 52331, 52331, 52331, 52331, 52331, 52331, 47574, 47574, 52331, 47574, 52331, 47574, 52331, 52331, 47574, 47574, 52331, 47574, 52331, 47574, 47574, 52331, 47574, 52331, 52331, 52331, 52331, 52331, 47574, 47574, 47574, 52331, 52331, 47574, 52331, 47574, 52331, 52331, 47574, 47574, 52331, 52331, 47574, 52331, 47574, 52331, 52331, 47574, 52331, 52331, 52331, 52331, 47574, 47574, 47574, 52331, 47574, 47574, 47574, 52331, 52331, 47574, 47574, 52331, 52331, 52331, 52331, 47574, 47574, 52331, 47574, 47574, 47574, 47574, 52331, 52331, 52331, 52331, 52331 ],
        "0" : [ 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 112177, 101979, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 112177, 101979, 112177, 112177, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 112177, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 112177, 101979 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226654254,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 2936,
        "IOBytes" : {
          "Total" : 44558434,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 37171678,
            "SW" : 7386756
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : 227722554,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9815510129856,
            "rowCount" : 153367345779,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_ext_sales_price#45, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68] "
          },
          "5" : {
            "sign" : 1823050596,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 17177142727248,
            "rowCount" : 153367345779,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_current_addr_sk#80 = ca_address_sk#94) AND NOT (substr(ca_zip#103, 1, 5) = substr(s_zip#132, 1, 5))) "
          },
          "6" : {
            "sign" : 168835840,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 16866088,
            "rowCount" : 158133,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68, s_zip#132], ShuffleQueryStage 7 "
          },
          "1" : {
            "sign" : -1622850928,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 9815510129856,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -892080233,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 6400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -448170387,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 9815510129856,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [ext_price#154 DESC NULLS LAST, brand#153 ASC NULLS FIRST, brand_id#152 ASC NULLS FIRST, i_manufact_id#67 ASC NULLS FIRST, i_manufact#68 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 86825606,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 31035616,
            "rowCount" : 969863,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#94, ca_zip#103], ShuffleQueryStage 4 "
          },
          "3" : {
            "sign" : 1630710006,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 9815510129856,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_brand#62, i_brand_id#61, i_manufact_id#67, i_manufact#68], [i_brand_id#61 AS brand_id#152, i_brand#62 AS brand#153, i_manufact_id#67, i_manufact#68, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#45)),17,2) AS ext_price#154] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [ext_price#154 DESC NULLS LAST, brand#153 ASC NULLS FIRST, brand_id#152 ASC NULLS FIRST, i_manufact_id#67 ASC NULLS FIRST, i_manufact#68 ASC NULLS FIRST], true\n      +- Aggregate [i_brand#62, i_brand_id#61, i_manufact_id#67, i_manufact#68], [i_brand_id#61 AS brand_id#152, i_brand#62 AS brand#153, i_manufact_id#67, i_manufact#68, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#45)),17,2) AS ext_price#154]\n         +- Project [ss_ext_sales_price#45, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68]\n            +- Join Inner, ((c_current_addr_sk#80 = ca_address_sk#94) AND NOT (substr(ca_zip#103, 1, 5) = substr(s_zip#132, 1, 5)))\n               :- LogicalQueryStage Project [ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68, s_zip#132], ShuffleQueryStage 7\n               +- LogicalQueryStage Project [ca_address_sk#94, ca_zip#103], ShuffleQueryStage 4\n"
      },
      "IM" : {
        "inputSizeInBytes" : 47901704,
        "inputRowCount" : 1127996
      },
      "PD" : {
        "4" : [ 39317, 39317, 35743, 35743, 39317, 39317, 39317, 35743, 35743, 39317, 35743, 39317, 43249, 39317, 35743, 35743, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 39317, 39317, 35743, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 35743, 39317, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 35743, 35743, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 43249, 35743, 39317, 35743, 35743, 39317, 39317, 39317, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 39317, 35743, 35743, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 35743, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 39317, 39317, 35743, 39317, 39317, 39317, 35743, 39317, 39317, 39317, 35743, 35743, 39317, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 39317, 35743, 39317, 35743, 35743, 39317, 39317, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 39317, 39317, 39317, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 39317 ],
        "1" : [ 52331, 47574, 52331, 52331, 52331, 47574, 47574, 52331, 47574, 52331, 52331, 47574, 52331, 47574, 47574, 52331, 47574, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 47574, 52331, 52331, 47574, 47574, 52331, 52331, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 52331, 47574, 47574, 47574, 52331, 47574, 47574, 52331, 47574, 52331, 47574, 52331, 47574, 47574, 47574, 52331, 47574, 52331, 47574, 52331, 52331, 47574, 52331, 52331, 52331, 47574, 52331, 52331, 52331, 47574, 52331, 47574, 52331, 47574, 47574, 52331, 52331, 47574, 52331, 47574, 47574, 52331, 52331, 52331, 47574, 52331, 52331, 52331, 52331, 52331, 47574, 47574, 47574, 47574, 47574, 52331, 52331, 47574, 47574, 52331, 52331, 52331, 47574, 47574, 47574, 52331, 47574, 52331, 52331, 52331, 47574, 47574, 47574, 47574, 47574, 52331, 52331, 52331, 52331, 52331, 52331, 47574, 47574, 52331, 47574, 52331, 47574, 52331, 52331, 47574, 47574, 52331, 47574, 52331, 47574, 47574, 52331, 47574, 52331, 52331, 52331, 52331, 52331, 47574, 47574, 47574, 52331, 52331, 47574, 52331, 47574, 52331, 52331, 47574, 47574, 52331, 52331, 47574, 52331, 47574, 52331, 52331, 47574, 52331, 52331, 52331, 52331, 47574, 47574, 47574, 52331, 47574, 47574, 47574, 52331, 52331, 47574, 47574, 52331, 52331, 52331, 52331, 47574, 47574, 52331, 47574, 47574, 47574, 47574, 52331, 52331, 52331, 52331, 52331 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226655312,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 1878,
        "IOBytes" : {
          "Total" : 17025686,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 16913611,
            "SW" : 112075
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -242870806,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 210717312960,
            "rowCount" : 7525618320,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#32, ss_customer_sk#33, ss_store_sk#37, ss_ext_sales_price#45] "
          },
          "8" : {
            "sign" : 1652640995,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24416923285,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68] "
          },
          "19" : {
            "sign" : 1968710013,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 18450,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#11) AND isnotnull(d_year#9)) AND ((d_moy#11 = 11) AND (d_year#9 = 1999))) AND isnotnull(d_date_sk#3)) "
          },
          "23" : {
            "sign" : -671281459,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 57696,
            "rowCount" : 4808,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#54] "
          },
          "4" : {
            "sign" : 2044247493,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 154782320,
            "rowCount" : 2010160,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_ext_sales_price#45, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68] "
          },
          "15" : {
            "sign" : 1709412754,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 8027326208,
            "rowCount" : 250853944,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#32, ss_customer_sk#33, ss_store_sk#37, ss_ext_sales_price#45, ss_sold_date_sk#53] "
          },
          "11" : {
            "sign" : 656620601,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 9901582236,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#33 = c_customer_sk#76) "
          },
          "9" : {
            "sign" : 257039694,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 26714986653,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#32 = i_item_sk#54) "
          },
          "22" : {
            "sign" : -1628264074,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 57696,
            "rowCount" : 4808,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#54] "
          },
          "26" : {
            "sign" : -1043967880,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 32000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#76, c_current_addr_sk#80], ShuffleQueryStage 1 "
          },
          "13" : {
            "sign" : 1168380120,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 270922259520,
            "rowCount" : 7525618320,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#3 = ss_sold_date_sk#53) "
          },
          "24" : {
            "sign" : -1212134612,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 2048208,
            "rowCount" : 4808,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(i_manager_id#74) AND (i_manager_id#74 = 7)) AND isnotnull(i_item_sk#54)) "
          },
          "16" : {
            "sign" : -564650684,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 38129799488,
            "rowCount" : 250853944,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ss_sold_date_sk#53) AND isnotnull(ss_item_sk#32)) AND isnotnull(ss_customer_sk#33)) AND isnotnull(ss_store_sk#37)) AND (dynamicpruning#161 [ss_sold_date_sk#53] AND might_contain(scalar-subquery#164 [], xxhash64(ss_item_sk#32, 42)))) "
          },
          "5" : {
            "sign" : -213609987,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 239209040,
            "rowCount" : 2010160,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_current_addr_sk#80 = ca_address_sk#94) AND NOT (substr(ca_zip#103, 1, 5) = substr(s_zip#132, 1, 5))) "
          },
          "10" : {
            "sign" : -68416351,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 7701230628,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#32, ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80] "
          },
          "21" : {
            "sign" : 1338146697,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0) AS bloomFilter#163] "
          },
          "6" : {
            "sign" : 930989143,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 56629597822,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68, s_zip#132] "
          },
          "1" : {
            "sign" : -1476271959,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 1232,
            "rowCount" : 16,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : 152283653,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#31, ss_item_sk#32, ss_customer_sk#33, ss_cdemo_sk#34, ss_hdemo_sk#35, ss_addr_sk#36, ss_store_sk#37, ss_promo_sk#38, ss_ticket_number#39L, ss_quantity#40, ss_wholesale_cost#41, ss_list_price#42, ss_sales_price#43, ss_ext_discount_amt#44, ss_ext_sales_price#45, ss_ext_wholesale_cost#46, ss_ext_list_price#47, ss_ext_tax#48, ss_coupon_amt#49, ss_net_paid#50, ss_net_paid_inc_tax#51, ss_net_profit#52, ss_sold_date_sk#53], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "25" : {
            "sign" : 743395023,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#54, i_item_id#55, i_rec_start_date#56, i_rec_end_date#57, i_item_desc#58, i_current_price#59, i_wholesale_cost#60, i_brand_id#61, i_brand#62, i_class_id#63, i_class#64, i_category_id#65, i_category#66, i_manufact_id#67, i_manufact#68, i_size#69, i_formulation#70, i_color#71, i_units#72, i_container#73, i_manager_id#74, i_product_name#75], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "14" : {
            "sign" : 61761897,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048816,
            "rowCount" : 30,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#3], BroadcastQueryStage 0 "
          },
          "0" : {
            "sign" : -812078942,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 1024,
            "rowCount" : 16,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 2116768618,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#3, d_date_id#4, d_date#5, d_month_seq#6, d_week_seq#7, d_quarter_seq#8, d_year#9, d_dow#10, d_moy#11, d_dom#12, d_qoy#13, d_fy_year#14, d_fy_quarter_seq#15, d_fy_week_seq#16, d_day_name#17, d_quarter_name#18, d_holiday#19, d_weekend#20, d_following_holiday#21, d_first_dom#22, d_last_dom#23, d_same_day_ly#24, d_same_day_lq#25, d_current_day#26, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "27" : {
            "sign" : 894771989,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 350984,
            "rowCount" : 4808,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#54, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68], BroadcastQueryStage 2 "
          },
          "2" : {
            "sign" : -1977610952,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1232,
            "rowCount" : 16,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [ext_price#154 DESC NULLS LAST, brand#153 ASC NULLS FIRST, brand_id#152 ASC NULLS FIRST, i_manufact_id#67 ASC NULLS FIRST, i_manufact#68 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 2002820564,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 900,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#3] "
          },
          "7" : {
            "sign" : -321880064,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 61252422134,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#37 = s_store_sk#107) "
          },
          "29" : {
            "sign" : 86825606,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 28126027,
            "rowCount" : 969863,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#94, ca_zip#103], ShuffleQueryStage 4 "
          },
          "3" : {
            "sign" : 1850246991,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 1232,
            "rowCount" : 16,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_brand#62, i_brand_id#61, i_manufact_id#67, i_manufact#68], [i_brand_id#61 AS brand_id#152, i_brand#62 AS brand#153, i_manufact_id#67, i_manufact#68, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#45)),17,2) AS ext_price#154] "
          },
          "28" : {
            "sign" : -829048019,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 11658,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#107, s_zip#132], BroadcastQueryStage 3 "
          }
        },
        "links" : [ {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalRelation",
          "toId" : 16,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalRelation",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Filter",
          "toId" : 18,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Project",
          "toId" : 16,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 25,
          "fromName" : "LogicalRelation",
          "toId" : 24,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Filter",
          "toId" : 23,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Project",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 21,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Aggregate",
          "toId" : 16,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 16,
          "fromName" : "Filter",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [ext_price#154 DESC NULLS LAST, brand#153 ASC NULLS FIRST, brand_id#152 ASC NULLS FIRST, i_manufact_id#67 ASC NULLS FIRST, i_manufact#68 ASC NULLS FIRST], true\n      +- Aggregate [i_brand#62, i_brand_id#61, i_manufact_id#67, i_manufact#68], [i_brand_id#61 AS brand_id#152, i_brand#62 AS brand#153, i_manufact_id#67, i_manufact#68, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#45)),17,2) AS ext_price#154]\n         +- Project [ss_ext_sales_price#45, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68]\n            +- Join Inner, ((c_current_addr_sk#80 = ca_address_sk#94) AND NOT (substr(ca_zip#103, 1, 5) = substr(s_zip#132, 1, 5)))\n               :- Project [ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68, s_zip#132]\n               :  +- Join Inner, (ss_store_sk#37 = s_store_sk#107)\n               :     :- Project [ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68]\n               :     :  +- Join Inner, (ss_item_sk#32 = i_item_sk#54)\n               :     :     :- Project [ss_item_sk#32, ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80]\n               :     :     :  +- Join Inner, (ss_customer_sk#33 = c_customer_sk#76)\n               :     :     :     :- Project [ss_item_sk#32, ss_customer_sk#33, ss_store_sk#37, ss_ext_sales_price#45]\n               :     :     :     :  +- Join Inner, (d_date_sk#3 = ss_sold_date_sk#53)\n               :     :     :     :     :- LogicalQueryStage Project [d_date_sk#3], BroadcastQueryStage 0\n               :     :     :     :     +- Project [ss_item_sk#32, ss_customer_sk#33, ss_store_sk#37, ss_ext_sales_price#45, ss_sold_date_sk#53]\n               :     :     :     :        +- Filter ((((isnotnull(ss_sold_date_sk#53) AND isnotnull(ss_item_sk#32)) AND isnotnull(ss_customer_sk#33)) AND isnotnull(ss_store_sk#37)) AND (dynamicpruning#161 [ss_sold_date_sk#53] AND might_contain(scalar-subquery#164 [], xxhash64(ss_item_sk#32, 42))))\n               :     :     :     :           :  :- Project [d_date_sk#3]\n               :     :     :     :           :  :  +- Filter (((isnotnull(d_moy#11) AND isnotnull(d_year#9)) AND ((d_moy#11 = 11) AND (d_year#9 = 1999))) AND isnotnull(d_date_sk#3))\n               :     :     :     :           :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#3,d_date_id#4,d_date#5,d_month_seq#6,d_week_seq#7,d_quarter_seq#8,d_year#9,d_dow#10,d_moy#11,d_dom#12,d_qoy#13,d_fy_year#14,d_fy_quarter_seq#15,d_fy_week_seq#16,d_day_name#17,d_quarter_name#18,d_holiday#19,d_weekend#20,d_following_holiday#21,d_first_dom#22,d_last_dom#23,d_same_day_ly#24,d_same_day_lq#25,d_current_day#26,... 4 more fields] parquet\n               :     :     :     :           :  +- Aggregate [bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0) AS bloomFilter#163]\n               :     :     :     :           :     +- Project [i_item_sk#54]\n               :     :     :     :           :        +- Project [i_item_sk#54]\n               :     :     :     :           :           +- Filter ((isnotnull(i_manager_id#74) AND (i_manager_id#74 = 7)) AND isnotnull(i_item_sk#54))\n               :     :     :     :           :              +- Relation spark_catalog.tpcds_100.item[i_item_sk#54,i_item_id#55,i_rec_start_date#56,i_rec_end_date#57,i_item_desc#58,i_current_price#59,i_wholesale_cost#60,i_brand_id#61,i_brand#62,i_class_id#63,i_class#64,i_category_id#65,i_category#66,i_manufact_id#67,i_manufact#68,i_size#69,i_formulation#70,i_color#71,i_units#72,i_container#73,i_manager_id#74,i_product_name#75] parquet\n               :     :     :     :           +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#31,ss_item_sk#32,ss_customer_sk#33,ss_cdemo_sk#34,ss_hdemo_sk#35,ss_addr_sk#36,ss_store_sk#37,ss_promo_sk#38,ss_ticket_number#39L,ss_quantity#40,ss_wholesale_cost#41,ss_list_price#42,ss_sales_price#43,ss_ext_discount_amt#44,ss_ext_sales_price#45,ss_ext_wholesale_cost#46,ss_ext_list_price#47,ss_ext_tax#48,ss_coupon_amt#49,ss_net_paid#50,ss_net_paid_inc_tax#51,ss_net_profit#52,ss_sold_date_sk#53] parquet\n               :     :     :     +- LogicalQueryStage Project [c_customer_sk#76, c_current_addr_sk#80], ShuffleQueryStage 1\n               :     :     +- LogicalQueryStage Project [i_item_sk#54, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68], BroadcastQueryStage 2\n               :     +- LogicalQueryStage Project [s_store_sk#107, s_zip#132], BroadcastQueryStage 3\n               +- LogicalQueryStage Project [ca_address_sk#94, ca_zip#103], ShuffleQueryStage 4\n"
      },
      "IM" : {
        "inputSizeInBytes" : 41868431141,
        "inputRowCount" : 278020456
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 11,
        "FinishedTasksNum" : 16,
        "FinishedTasksTotalTimeInMs" : 14639.0,
        "FinishedTasksDistributionInMs" : [ 34.0, 151.0, 1240.0, 1302.0, 1560.0 ]
      },
      "StartTimeInMs" : 1702226647848,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 9342,
        "IOBytes" : {
          "Total" : 186790207,
          "Details" : {
            "IR" : 104663947,
            "IW" : 0,
            "SR" : 41063130,
            "SW" : 41063130
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : 329333732,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 64160,
            "rowCount" : 5,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0) AS bloomFilter#163], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0) AS bloomFilter#163], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 64160,
        "inputRowCount" : 5
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226651180,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 6010,
        "IOBytes" : {
          "Total" : 131970598,
          "Details" : {
            "IR" : 79642658,
            "IW" : 0,
            "SR" : 41063130,
            "SW" : 11264810
          }
        }
      }
    },
    "7" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -1873627601,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 6400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "1" : {
            "sign" : -1230965588,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 156504,
            "rowCount" : 1893,
            "isRuntime" : true,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1997026649,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 156504,
            "rowCount" : 1893,
            "isRuntime" : true,
            "predicate" : " (unknown) Sort Arguments: [ext_price#154 DESC NULLS LAST, brand#153 ASC NULLS FIRST, brand_id#152 ASC NULLS FIRST, i_manufact_id#67 ASC NULLS FIRST, i_manufact#68 ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : 1216325830,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 156504,
            "rowCount" : 1893,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [i_brand#62, i_brand_id#61, i_manufact_id#67, i_manufact#68], [i_brand_id#61 AS brand_id#152, i_brand#62 AS brand#153, i_manufact_id#67, i_manufact#68, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#45)),17,2) AS ext_price#154], HashAggregate(keys=[i_brand#62, i_brand_id#61, i_manufact_id#67, i_manufact#68], functions=[sum(UnscaledValue(ss_ext_sales_price#45))]) "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [ext_price#154 DESC NULLS LAST, brand#153 ASC NULLS FIRST, brand_id#152 ASC NULLS FIRST, i_manufact_id#67 ASC NULLS FIRST, i_manufact#68 ASC NULLS FIRST], true\n      +- LogicalQueryStage Aggregate [i_brand#62, i_brand_id#61, i_manufact_id#67, i_manufact#68], [i_brand_id#61 AS brand_id#152, i_brand#62 AS brand#153, i_manufact_id#67, i_manufact#68, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#45)),17,2) AS ext_price#154], HashAggregate(keys=[i_brand#62, i_brand_id#61, i_manufact_id#67, i_manufact#68], functions=[sum(UnscaledValue(ss_ext_sales_price#45))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 156504,
        "inputRowCount" : 1893
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226656954,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 236,
        "IOBytes" : {
          "Total" : 112075,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 112075,
            "SW" : 0
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1044023409,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 7435136380,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#32, ss_customer_sk#33, ss_store_sk#37, ss_ext_sales_price#45], ShuffleQueryStage 5 "
          },
          "8" : {
            "sign" : 274868538,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 144844953981120000000,
            "rowCount" : 2011735471960000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68] "
          },
          "4" : {
            "sign" : 1479111492,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 50198101479468779197440000000,
            "rowCount" : 784345335616699674960000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_ext_sales_price#45, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68] "
          },
          "15" : {
            "sign" : -829048019,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051792,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#107, s_zip#132], BroadcastQueryStage 3 "
          },
          "11" : {
            "sign" : 995636222,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 19118922120000000,
            "rowCount" : 531081170000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#33 = c_customer_sk#76) "
          },
          "9" : {
            "sign" : -953582053,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 160938837756800000000,
            "rowCount" : 2011735471960000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#32 = i_item_sk#54) "
          },
          "13" : {
            "sign" : -1043967880,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 48000000,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#76, c_current_addr_sk#80], ShuffleQueryStage 1 "
          },
          "16" : {
            "sign" : 86825606,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 31035616,
            "rowCount" : 969863,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#94, ca_zip#103], ShuffleQueryStage 4 "
          },
          "5" : {
            "sign" : -580307284,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 87846677589070363595520000000,
            "rowCount" : 784345335616699674960000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_current_addr_sk#80 = ca_address_sk#94) AND NOT (substr(ca_zip#103, 1, 5) = substr(s_zip#132, 1, 5))) "
          },
          "10" : {
            "sign" : 629336964,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 14870272760000000,
            "rowCount" : 531081170000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#32, ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80] "
          },
          "6" : {
            "sign" : -1521269372,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 71167154056056960000000,
            "rowCount" : 808717659727920000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68, s_zip#132] "
          },
          "1" : {
            "sign" : 375070808,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 50198101479468779197440000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "14" : {
            "sign" : 894771989,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1179648,
            "rowCount" : 3788,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#54, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68], BroadcastQueryStage 2 "
          },
          "0" : {
            "sign" : 758988615,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 6400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1459648049,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 50198101479468779197440000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [ext_price#154 DESC NULLS LAST, brand#153 ASC NULLS FIRST, brand_id#152 ASC NULLS FIRST, i_manufact_id#67 ASC NULLS FIRST, i_manufact#68 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -1971437633,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 77636895333880320000000,
            "rowCount" : 808717659727920000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#37 = s_store_sk#107) "
          },
          "3" : {
            "sign" : 1809393406,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 50198101479468779197440000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_brand#62, i_brand_id#61, i_manufact_id#67, i_manufact#68], [i_brand_id#61 AS brand_id#152, i_brand#62 AS brand#153, i_manufact_id#67, i_manufact#68, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#45)),17,2) AS ext_price#154] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [ext_price#154 DESC NULLS LAST, brand#153 ASC NULLS FIRST, brand_id#152 ASC NULLS FIRST, i_manufact_id#67 ASC NULLS FIRST, i_manufact#68 ASC NULLS FIRST], true\n      +- Aggregate [i_brand#62, i_brand_id#61, i_manufact_id#67, i_manufact#68], [i_brand_id#61 AS brand_id#152, i_brand#62 AS brand#153, i_manufact_id#67, i_manufact#68, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#45)),17,2) AS ext_price#154]\n         +- Project [ss_ext_sales_price#45, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68]\n            +- Join Inner, ((c_current_addr_sk#80 = ca_address_sk#94) AND NOT (substr(ca_zip#103, 1, 5) = substr(s_zip#132, 1, 5)))\n               :- Project [ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68, s_zip#132]\n               :  +- Join Inner, (ss_store_sk#37 = s_store_sk#107)\n               :     :- Project [ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68]\n               :     :  +- Join Inner, (ss_item_sk#32 = i_item_sk#54)\n               :     :     :- Project [ss_item_sk#32, ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80]\n               :     :     :  +- Join Inner, (ss_customer_sk#33 = c_customer_sk#76)\n               :     :     :     :- LogicalQueryStage Project [ss_item_sk#32, ss_customer_sk#33, ss_store_sk#37, ss_ext_sales_price#45], ShuffleQueryStage 5\n               :     :     :     +- LogicalQueryStage Project [c_customer_sk#76, c_current_addr_sk#80], ShuffleQueryStage 1\n               :     :     +- LogicalQueryStage Project [i_item_sk#54, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68], BroadcastQueryStage 2\n               :     +- LogicalQueryStage Project [s_store_sk#107, s_zip#132], BroadcastQueryStage 3\n               +- LogicalQueryStage Project [ca_address_sk#94, ca_zip#103], ShuffleQueryStage 4\n"
      },
      "IM" : {
        "inputSizeInBytes" : 7516403436,
        "inputRowCount" : 268514638
      },
      "PD" : {
        "1" : [ 52331, 47574, 52331, 52331, 52331, 47574, 47574, 52331, 47574, 52331, 52331, 47574, 52331, 47574, 47574, 52331, 47574, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 47574, 52331, 52331, 47574, 47574, 52331, 52331, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 52331, 47574, 47574, 47574, 52331, 47574, 47574, 52331, 47574, 52331, 47574, 52331, 47574, 47574, 47574, 52331, 47574, 52331, 47574, 52331, 52331, 47574, 52331, 52331, 52331, 47574, 52331, 52331, 52331, 47574, 52331, 47574, 52331, 47574, 47574, 52331, 52331, 47574, 52331, 47574, 47574, 52331, 52331, 52331, 47574, 52331, 52331, 52331, 52331, 52331, 47574, 47574, 47574, 47574, 47574, 52331, 52331, 47574, 47574, 52331, 52331, 52331, 47574, 47574, 47574, 52331, 47574, 52331, 52331, 52331, 47574, 47574, 47574, 47574, 47574, 52331, 52331, 52331, 52331, 52331, 52331, 47574, 47574, 52331, 47574, 52331, 47574, 52331, 52331, 47574, 47574, 52331, 47574, 52331, 47574, 47574, 52331, 47574, 52331, 52331, 52331, 52331, 52331, 47574, 47574, 47574, 52331, 52331, 47574, 52331, 47574, 52331, 52331, 47574, 47574, 52331, 52331, 47574, 52331, 47574, 52331, 52331, 47574, 52331, 52331, 52331, 52331, 47574, 47574, 47574, 52331, 47574, 47574, 47574, 52331, 52331, 47574, 47574, 52331, 52331, 52331, 52331, 47574, 47574, 52331, 47574, 47574, 47574, 47574, 52331, 52331, 52331, 52331, 52331 ],
        "0" : [ 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 112177, 101979, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 112177, 101979, 112177, 112177, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 112177, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 112177, 101979 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 15,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226651487,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 5703,
        "IOBytes" : {
          "Total" : 131957200,
          "Details" : {
            "IR" : 79642658,
            "IW" : 0,
            "SR" : 41049732,
            "SW" : 11264810
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "8" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1044023409,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6325320,
                "rowCount" : 158133
              },
              "compileTime" : {
                "sizeInBytes" : 7435136380,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#32, ss_customer_sk#33, ss_store_sk#37, ss_ext_sales_price#45], ShuffleQueryStage 5 "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Project [ss_item_sk#32, ss_customer_sk#33, ss_store_sk#37, ss_ext_sales_price#45], ShuffleQueryStage 5\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 278539809,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 6325320,
            "rowCount" : 158133,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [ss_item_sk#32, ss_customer_sk#33, ss_store_sk#37, ss_ext_sales_price#45] Arguments: 5 "
          }
        },
        "links" : [ ],
        "rawPlan" : "ShuffleQueryStage 5\n+- Exchange hashpartitioning(ss_customer_sk#33, 200), ENSURE_REQUIREMENTS, [plan_id=536]\n   +- *(6) Project [ss_item_sk#32, ss_customer_sk#33, ss_store_sk#37, ss_ext_sales_price#45]\n      +- *(6) BroadcastHashJoin [d_date_sk#3], [ss_sold_date_sk#53], Inner, BuildLeft, false\n         :- BroadcastQueryStage 0\n         :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=272]\n         :     +- *(1) Project [d_date_sk#3]\n         :        +- *(1) Filter ((((isnotnull(d_moy#11) AND isnotnull(d_year#9)) AND (d_moy#11 = 11)) AND (d_year#9 = 1999)) AND isnotnull(d_date_sk#3))\n         :           +- *(1) ColumnarToRow\n         :              +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#3,d_year#9,d_moy#11] Batched: true, DataFilters: [isnotnull(d_moy#11), isnotnull(d_year#9), (d_moy#11 = 11), (d_year#9 = 1999), isnotnull(d_date_s..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n         +- *(6) Filter (((isnotnull(ss_item_sk#32) AND isnotnull(ss_customer_sk#33)) AND isnotnull(ss_store_sk#37)) AND might_contain(Subquery subquery#164, [id=#112], xxhash64(ss_item_sk#32, 42)))\n            :  +- Subquery subquery#164, [id=#112]\n            :     +- AdaptiveSparkPlan isFinalPlan=true\n                     +- == Final Plan ==\n                        ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0)], output=[bloomFilter#163])\n                        +- ShuffleQueryStage 0\n                           +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=598]\n                              +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0)], output=[buf#168])\n                                 +- *(1) Project [i_item_sk#54]\n                                    +- *(1) Filter ((isnotnull(i_manager_id#74) AND (i_manager_id#74 = 7)) AND isnotnull(i_item_sk#54))\n                                       +- *(1) ColumnarToRow\n                                          +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#54,i_manager_id#74] Batched: true, DataFilters: [isnotnull(i_manager_id#74), (i_manager_id#74 = 7), isnotnull(i_item_sk#54)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,7), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manager_id:int>\n                     +- == Initial Plan ==\n                        ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0)], output=[bloomFilter#163])\n                        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=110]\n                           +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0)], output=[buf#168])\n                              +- Project [i_item_sk#54]\n                                 +- Filter ((isnotnull(i_manager_id#74) AND (i_manager_id#74 = 7)) AND isnotnull(i_item_sk#54))\n                                    +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#54,i_manager_id#74] Batched: true, DataFilters: [isnotnull(i_manager_id#74), (i_manager_id#74 = 7), isnotnull(i_item_sk#54)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,7), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manager_id:int>\n            +- *(6) ColumnarToRow\n               +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#32,ss_customer_sk#33,ss_store_sk#37,ss_ext_sales_price#45,ss_sold_date_sk#53] Batched: true, DataFilters: [isnotnull(ss_item_sk#32), isnotnull(ss_customer_sk#33), isnotnull(ss_store_sk#37)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#53), dynamicpruningexpression(ss_sold_date_sk#53 IN dynamicpruning#161)], PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2)>\n                     +- SubqueryBroadcast dynamicpruning#161, 0, [d_date_sk#3], [id=#510]\n                        +- AdaptiveSparkPlan isFinalPlan=true\n                           +- == Final Plan ==\n                              BroadcastQueryStage 1\n                              +- ReusedExchange [d_date_sk#3], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=272]\n                           +- == Initial Plan ==\n                              BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=507]\n                              +- Project [d_date_sk#3]\n                                 +- Filter ((((isnotnull(d_moy#11) AND isnotnull(d_year#9)) AND (d_moy#11 = 11)) AND (d_year#9 = 1999)) AND isnotnull(d_date_sk#3))\n                                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#3,d_year#9,d_moy#11] Batched: true, DataFilters: [isnotnull(d_moy#11), isnotnull(d_year#9), (d_moy#11 = 11), (d_year#9 = 1999), isnotnull(d_date_s..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 6325320,
        "inputRowCount" : 158133
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "3" : [ 19879, 19528, 20309, 21831, 20281, 20904, 20302, 19527, 20305, 20631, 19795, 18784, 20735, 20792, 20948, 19297, 19995, 20610, 21308, 18464, 20786, 21033, 19528, 20108, 20472, 18738, 19389, 20660, 20624, 21201, 20594, 19985, 20349, 18302, 19639, 21424, 20291, 20318, 19460, 19185, 19491, 18994, 19601, 21395, 19453, 19863, 20670, 19200, 20313, 20728, 20836, 20802, 20434, 20215, 20240, 19923, 21049, 19339, 20327, 21056, 21290, 19613, 20674, 20118, 21727, 21210, 20770, 20979, 21323, 20673, 19613, 19962, 19924, 20184, 20085, 20135, 19778, 21021, 20159, 19809, 20695, 21786, 20545, 20194, 20522, 18964, 20102, 20175, 19972, 19743, 19947, 19412, 21320, 21271, 20007, 21342, 20043, 19120, 20234, 20521, 19789, 20385, 20292, 19109, 21071, 20080, 20753, 20875, 19311, 19776, 20416, 20725, 20528, 20871, 20735, 20148, 19986, 20303, 20612, 20628, 19491, 19886, 19678, 19723, 20877, 20445, 19960, 21443, 19052, 18863, 21168, 22071, 20611, 20711, 19759, 20075, 21793, 20929, 20650, 20739, 20443, 20077, 20095, 21023, 20451, 20310, 21005, 19742, 20620, 20990, 20991, 20080, 20193, 20414, 21495, 19994, 21118, 20695, 20850, 19175, 19964, 19855, 20255, 20590, 20899, 20592, 20619, 20069, 20637, 21399, 20581, 21994, 21489, 20218, 20270, 22068, 18983, 19992, 19821, 20258, 18638, 21100, 20725, 20817, 20937, 20086, 21122, 20511, 18821, 20527, 21160, 20173, 19330, 19555, 21440, 21184, 19392, 20453, 20433, 19994 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 8,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 11 ],
      "Objectives" : {
        "DurationInMs" : 299,
        "TotalTasksDurationInMs" : 294,
        "IOBytes" : {
          "Total" : 3878054,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 3878054,
            "SW" : 0
          }
        }
      }
    },
    "4" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1710473876,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 28126027,
                "rowCount" : 969863
              },
              "compileTime" : {
                "sizeInBytes" : 28126027,
                "rowCount" : 969863
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_address_sk#94, ca_zip#103] "
          },
          "1" : {
            "sign" : 73781076,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 238586298,
                "rowCount" : 969863
              },
              "compileTime" : {
                "sizeInBytes" : 238586298,
                "rowCount" : 969863
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_address_sk#94) AND isnotnull(ca_zip#103)) "
          },
          "2" : {
            "sign" : -971074395,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 246000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 246000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#94, ca_address_id#95, ca_street_number#96, ca_street_name#97, ca_street_type#98, ca_suite_number#99, ca_city#100, ca_county#101, ca_state#102, ca_zip#103, ca_country#104, ca_gmt_offset#105, ca_location_type#106], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ca_address_sk#94, ca_zip#103]\n+- Filter (isnotnull(ca_address_sk#94) AND isnotnull(ca_zip#103))\n   +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#94,ca_address_id#95,ca_street_number#96,ca_street_name#97,ca_street_type#98,ca_suite_number#99,ca_city#100,ca_county#101,ca_state#102,ca_zip#103,ca_country#104,ca_gmt_offset#105,ca_location_type#106] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 178171779,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 28126027,
            "rowCount" : 969863,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [ca_address_sk#94, ca_zip#103] Condition : (isnotnull(ca_address_sk#94) AND isnotnull(ca_zip#103)) "
          },
          "1" : {
            "sign" : -1608986476,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 28126027,
            "rowCount" : 969863,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer_address Output [2]: [ca_address_sk#94, ca_zip#103] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_address] PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_zip)] ReadSchema: struct<ca_address_sk:int,ca_zip:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer_address",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(ca_address_sk#94) AND isnotnull(ca_zip#103))\n+- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#94,ca_zip#103] Batched: true, DataFilters: [isnotnull(ca_address_sk#94), isnotnull(ca_zip#103)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_zip)], ReadSchema: struct<ca_address_sk:int,ca_zip:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 28126027,
        "inputRowCount" : 969863
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 5 ],
      "Objectives" : {
        "DurationInMs" : 3977,
        "TotalTasksDurationInMs" : 3051,
        "IOBytes" : {
          "Total" : 15239656,
          "Details" : {
            "IR" : 5712801,
            "IW" : 0,
            "SR" : 0,
            "SW" : 9526855
          }
        }
      }
    },
    "11" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 758988615,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6400,
                "rowCount" : 100
              },
              "compileTime" : {
                "sizeInBytes" : 6400,
                "rowCount" : 100
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "1" : {
            "sign" : 375070808,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29893646507003200512000000,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 29893646507003200512000000,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1459648049,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29893646507003200512000000,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 29893646507003200512000000,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [ext_price#154 DESC NULLS LAST, brand#153 ASC NULLS FIRST, brand_id#152 ASC NULLS FIRST, i_manufact_id#67 ASC NULLS FIRST, i_manufact#68 ASC NULLS FIRST], true "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [ext_price#154 DESC NULLS LAST, brand#153 ASC NULLS FIRST, brand_id#152 ASC NULLS FIRST, i_manufact_id#67 ASC NULLS FIRST, i_manufact#68 ASC NULLS FIRST], true\n      +- Aggregate [i_brand#62, i_brand_id#61, i_manufact_id#67, i_manufact#68], [i_brand_id#61 AS brand_id#152, i_brand#62 AS brand#153, i_manufact_id#67, i_manufact#68, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#45)),17,2) AS ext_price#154]\n         +- Project [ss_ext_sales_price#45, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68]\n            +- Join Inner, ((c_current_addr_sk#80 = ca_address_sk#94) AND NOT (substr(ca_zip#103, 1, 5) = substr(s_zip#132, 1, 5)))\n               :- Project [ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68, s_zip#132]\n               :  +- Join Inner, (ss_store_sk#37 = s_store_sk#107)\n               :     :- Project [ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68]\n               :     :  +- Join Inner, (ss_item_sk#32 = i_item_sk#54)\n               :     :     :- Project [ss_item_sk#32, ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80]\n               :     :     :  +- Join Inner, (ss_customer_sk#33 = c_customer_sk#76)\n               :     :     :     :- LogicalQueryStage Project [ss_item_sk#32, ss_customer_sk#33, ss_store_sk#37, ss_ext_sales_price#45], ShuffleQueryStage 5\n               :     :     :     +- LogicalQueryStage Project [c_customer_sk#76, c_current_addr_sk#80], ShuffleQueryStage 1\n               :     :     +- LogicalQueryStage Project [i_item_sk#54, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68], BroadcastQueryStage 2\n               :     +- LogicalQueryStage Project [s_store_sk#107, s_zip#132], BroadcastQueryStage 3\n               +- LogicalQueryStage Project [ca_address_sk#94, ca_zip#103], ShuffleQueryStage 4\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1935766965,
            "className" : "org.apache.spark.sql.execution.TakeOrderedAndProjectExec",
            "sizeInBytes" : 6400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) TakeOrderedAndProject Input [5]: [brand_id#152, brand#153, i_manufact_id#67, i_manufact#68, ext_price#154] Arguments: 100, [ext_price#154 DESC NULLS LAST, brand#153 ASC NULLS FIRST, brand_id#152 ASC NULLS FIRST, i_manufact_id#67 ASC NULLS FIRST, i_manufact#68 ASC NULLS FIRST], [brand_id#152, brand#153, i_manufact_id#67, i_manufact#68, ext_price#154] "
          },
          "1" : {
            "sign" : 950654998,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 156504,
            "rowCount" : 1893,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [5]: [i_brand#62, i_brand_id#61, i_manufact_id#67, i_manufact#68, sum#166L] Keys [4]: [i_brand#62, i_brand_id#61, i_manufact_id#67, i_manufact#68] Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#45))] Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#45))#155L] Results [5]: [i_brand_id#61 AS brand_id#152, i_brand#62 AS brand#153, i_manufact_id#67, i_manufact#68, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#45))#155L,17,2) AS ext_price#154] "
          },
          "2" : {
            "sign" : -63323579,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 29893646507003200512000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [5]: [i_brand#62, i_brand_id#61, i_manufact_id#67, i_manufact#68, sum#166L] Arguments: 8 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "ShuffleQueryStage",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "TakeOrderedAndProject",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "TakeOrderedAndProject(limit=100, orderBy=[ext_price#154 DESC NULLS LAST,brand#153 ASC NULLS FIRST,brand_id#152 ASC NULLS FIRST,i_manufact_id#67 ASC NULLS FIRST,i_manufact#68 ASC NULLS FIRST], output=[brand_id#152,brand#153,i_manufact_id#67,i_manufact#68,ext_price#154])\n+- HashAggregate(keys=[i_brand#62, i_brand_id#61, i_manufact_id#67, i_manufact#68], functions=[sum(UnscaledValue(ss_ext_sales_price#45))], output=[brand_id#152, brand#153, i_manufact_id#67, i_manufact#68, ext_price#154])\n   +- ShuffleQueryStage 8\n      +- Exchange hashpartitioning(i_brand#62, i_brand_id#61, i_manufact_id#67, i_manufact#68, 200), ENSURE_REQUIREMENTS, [plan_id=993]\n         +- *(10) HashAggregate(keys=[i_brand#62, i_brand_id#61, i_manufact_id#67, i_manufact#68], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#45))], output=[i_brand#62, i_brand_id#61, i_manufact_id#67, i_manufact#68, sum#166L])\n            +- *(10) Project [ss_ext_sales_price#45, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68]\n               +- *(10) SortMergeJoin [c_current_addr_sk#80], [ca_address_sk#94], Inner, NOT (substr(ca_zip#103, 1, 5) = substr(s_zip#132, 1, 5))\n                  :- *(8) Sort [c_current_addr_sk#80 ASC NULLS FIRST], false, 0\n                  :  +- AQEShuffleRead coalesced\n                  :     +- ShuffleQueryStage 7\n                  :        +- Exchange hashpartitioning(c_current_addr_sk#80, 200), ENSURE_REQUIREMENTS, [plan_id=908]\n                  :           +- *(7) Project [ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68, s_zip#132]\n                  :              +- *(7) BroadcastHashJoin [ss_store_sk#37], [s_store_sk#107], Inner, BuildRight, false\n                  :                 :- *(7) Project [ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68]\n                  :                 :  +- *(7) BroadcastHashJoin [ss_item_sk#32], [i_item_sk#54], Inner, BuildRight, false\n                  :                 :     :- *(7) Project [ss_item_sk#32, ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80]\n                  :                 :     :  +- *(7) BroadcastHashJoin [ss_customer_sk#33], [c_customer_sk#76], Inner, BuildLeft, false\n                  :                 :     :     :- BroadcastQueryStage 6\n                  :                 :     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [plan_id=789]\n                  :                 :     :     :     +- AQEShuffleRead local\n                  :                 :     :     :        +- ShuffleQueryStage 5\n                  :                 :     :     :           +- Exchange hashpartitioning(ss_customer_sk#33, 200), ENSURE_REQUIREMENTS, [plan_id=536]\n                  :                 :     :     :              +- *(6) Project [ss_item_sk#32, ss_customer_sk#33, ss_store_sk#37, ss_ext_sales_price#45]\n                  :                 :     :     :                 +- *(6) BroadcastHashJoin [d_date_sk#3], [ss_sold_date_sk#53], Inner, BuildLeft, false\n                  :                 :     :     :                    :- BroadcastQueryStage 0\n                  :                 :     :     :                    :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=272]\n                  :                 :     :     :                    :     +- *(1) Project [d_date_sk#3]\n                  :                 :     :     :                    :        +- *(1) Filter ((((isnotnull(d_moy#11) AND isnotnull(d_year#9)) AND (d_moy#11 = 11)) AND (d_year#9 = 1999)) AND isnotnull(d_date_sk#3))\n                  :                 :     :     :                    :           +- *(1) ColumnarToRow\n                  :                 :     :     :                    :              +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#3,d_year#9,d_moy#11] Batched: true, DataFilters: [isnotnull(d_moy#11), isnotnull(d_year#9), (d_moy#11 = 11), (d_year#9 = 1999), isnotnull(d_date_s..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n                  :                 :     :     :                    +- *(6) Filter (((isnotnull(ss_item_sk#32) AND isnotnull(ss_customer_sk#33)) AND isnotnull(ss_store_sk#37)) AND might_contain(Subquery subquery#164, [id=#112], xxhash64(ss_item_sk#32, 42)))\n                  :                 :     :     :                       :  +- Subquery subquery#164, [id=#112]\n                  :                 :     :     :                       :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                 +- == Final Plan ==\n                                                                                    ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0)], output=[bloomFilter#163])\n                                                                                    +- ShuffleQueryStage 0\n                                                                                       +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=598]\n                                                                                          +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0)], output=[buf#168])\n                                                                                             +- *(1) Project [i_item_sk#54]\n                                                                                                +- *(1) Filter ((isnotnull(i_manager_id#74) AND (i_manager_id#74 = 7)) AND isnotnull(i_item_sk#54))\n                                                                                                   +- *(1) ColumnarToRow\n                                                                                                      +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#54,i_manager_id#74] Batched: true, DataFilters: [isnotnull(i_manager_id#74), (i_manager_id#74 = 7), isnotnull(i_item_sk#54)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,7), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manager_id:int>\n                                                                                 +- == Initial Plan ==\n                                                                                    ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0)], output=[bloomFilter#163])\n                                                                                    +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=110]\n                                                                                       +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0)], output=[buf#168])\n                                                                                          +- Project [i_item_sk#54]\n                                                                                             +- Filter ((isnotnull(i_manager_id#74) AND (i_manager_id#74 = 7)) AND isnotnull(i_item_sk#54))\n                                                                                                +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#54,i_manager_id#74] Batched: true, DataFilters: [isnotnull(i_manager_id#74), (i_manager_id#74 = 7), isnotnull(i_item_sk#54)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,7), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manager_id:int>\n                  :                 :     :     :                       +- *(6) ColumnarToRow\n                  :                 :     :     :                          +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#32,ss_customer_sk#33,ss_store_sk#37,ss_ext_sales_price#45,ss_sold_date_sk#53] Batched: true, DataFilters: [isnotnull(ss_item_sk#32), isnotnull(ss_customer_sk#33), isnotnull(ss_store_sk#37)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#53), dynamicpruningexpression(ss_sold_date_sk#53 IN dynamicpruning#161)], PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2)>\n                  :                 :     :     :                                +- SubqueryBroadcast dynamicpruning#161, 0, [d_date_sk#3], [id=#510]\n                  :                 :     :     :                                   +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                       +- == Final Plan ==\n                                                                                          BroadcastQueryStage 1\n                                                                                          +- ReusedExchange [d_date_sk#3], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=272]\n                                                                                       +- == Initial Plan ==\n                                                                                          BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=507]\n                                                                                          +- Project [d_date_sk#3]\n                                                                                             +- Filter ((((isnotnull(d_moy#11) AND isnotnull(d_year#9)) AND (d_moy#11 = 11)) AND (d_year#9 = 1999)) AND isnotnull(d_date_sk#3))\n                                                                                                +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#3,d_year#9,d_moy#11] Batched: true, DataFilters: [isnotnull(d_moy#11), isnotnull(d_year#9), (d_moy#11 = 11), (d_year#9 = 1999), isnotnull(d_date_s..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n                  :                 :     :     +- AQEShuffleRead local\n                  :                 :     :        +- ShuffleQueryStage 1\n                  :                 :     :           +- Exchange hashpartitioning(c_customer_sk#76, 200), ENSURE_REQUIREMENTS, [plan_id=293]\n                  :                 :     :              +- *(2) Filter (isnotnull(c_customer_sk#76) AND isnotnull(c_current_addr_sk#80))\n                  :                 :     :                 +- *(2) ColumnarToRow\n                  :                 :     :                    +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#76,c_current_addr_sk#80] Batched: true, DataFilters: [isnotnull(c_customer_sk#76), isnotnull(c_current_addr_sk#80)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)], ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>\n                  :                 :     +- BroadcastQueryStage 2\n                  :                 :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=314]\n                  :                 :           +- *(3) Project [i_item_sk#54, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68]\n                  :                 :              +- *(3) Filter ((isnotnull(i_manager_id#74) AND (i_manager_id#74 = 7)) AND isnotnull(i_item_sk#54))\n                  :                 :                 +- *(3) ColumnarToRow\n                  :                 :                    +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#54,i_brand_id#61,i_brand#62,i_manufact_id#67,i_manufact#68,i_manager_id#74] Batched: true, DataFilters: [isnotnull(i_manager_id#74), (i_manager_id#74 = 7), isnotnull(i_item_sk#54)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,7), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_brand:string,i_manufact_id:int,i_manufact:string,i_manager_...\n                  :                 +- BroadcastQueryStage 3\n                  :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=333]\n                  :                       +- *(4) Filter (isnotnull(s_zip#132) AND isnotnull(s_store_sk#107))\n                  :                          +- *(4) ColumnarToRow\n                  :                             +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#107,s_zip#132] Batched: true, DataFilters: [isnotnull(s_zip#132), isnotnull(s_store_sk#107)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_zip), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_zip:string>\n                  +- *(9) Sort [ca_address_sk#94 ASC NULLS FIRST], false, 0\n                     +- AQEShuffleRead coalesced\n                        +- ShuffleQueryStage 4\n                           +- Exchange hashpartitioning(ca_address_sk#94, 200), ENSURE_REQUIREMENTS, [plan_id=352]\n                              +- *(5) Filter (isnotnull(ca_address_sk#94) AND isnotnull(ca_zip#103))\n                                 +- *(5) ColumnarToRow\n                                    +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#94,ca_zip#103] Batched: true, DataFilters: [isnotnull(ca_address_sk#94), isnotnull(ca_zip#103)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_zip)], ReadSchema: struct<ca_address_sk:int,ca_zip:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 156504,
        "inputRowCount" : 1893
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "5" : [ 789, 539, 490, 652, 304, 717, 334, 490, 593, 539, 490, 717, 593, 1051, 539, 405, 652, 717, 539, 717, 490, 539, 368, 717, 652, 490, 490, 717, 955, 490, 490, 539, 868, 717, 652, 368, 593, 368, 652, 490, 717, 593, 539, 445, 405, 652, 490, 490, 652, 789, 445, 539, 539, 789, 334, 539, 334, 405, 490, 490, 368, 445, 539, 368, 789, 868, 652, 955, 405, 717, 405, 490, 304, 789, 593, 717, 445, 490, 405, 868, 652, 789, 652, 368, 539, 490, 652, 593, 405, 652, 717, 955, 652, 717, 405, 539, 652, 593, 490, 276, 593, 789, 593, 539, 593, 652, 368, 789, 539, 593, 368, 593, 717, 593, 868, 539, 717, 789, 593, 405, 405, 539, 652, 539, 593, 445, 717, 490, 445, 539, 868, 652, 368, 539, 593, 593, 593, 717, 539, 652, 593, 717, 652, 868, 593, 445, 593, 539, 539, 490, 445, 652, 539, 445, 405, 652, 868, 539, 539, 539, 539, 789, 539, 490, 445, 593, 717, 652, 789, 334, 445, 652, 490, 789, 717, 593, 189, 490, 868, 717, 445, 652, 405, 405, 717, 789, 490, 490, 652, 789, 789, 652, 445, 539, 593, 789, 789, 868, 593, 789 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 11,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 22 ],
      "Objectives" : {
        "DurationInMs" : 109,
        "TotalTasksDurationInMs" : 100,
        "IOBytes" : {
          "Total" : 112075,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 112075,
            "SW" : 0
          }
        }
      }
    },
    "9" : {
      "QSLogical" : {
        "operators" : {
          "8" : {
            "sign" : -829048019,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1051792,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 11658,
                "rowCount" : 402
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#107, s_zip#132], BroadcastQueryStage 3 "
          },
          "4" : {
            "sign" : 629336964,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 8855448000000,
                "rowCount" : 316266000000
              },
              "compileTime" : {
                "sizeInBytes" : 8855448000000,
                "rowCount" : 316266000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#32, ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80] "
          },
          "5" : {
            "sign" : 995636222,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11385576000000,
                "rowCount" : 316266000000
              },
              "compileTime" : {
                "sizeInBytes" : 11385576000000,
                "rowCount" : 316266000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#33 = c_customer_sk#76) "
          },
          "6" : {
            "sign" : -1043967880,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 48000000,
                "rowCount" : 2000000
              },
              "compileTime" : {
                "sizeInBytes" : 32000000,
                "rowCount" : 2000000
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#76, c_current_addr_sk#80], ShuffleQueryStage 1 "
          },
          "1" : {
            "sign" : -1971437633,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 46233818343936000000,
                "rowCount" : 481602274416000000
              },
              "compileTime" : {
                "sizeInBytes" : 46233818343936000000,
                "rowCount" : 481602274416000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#37 = s_store_sk#107) "
          },
          "0" : {
            "sign" : -1521269372,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 42381000148608000000,
                "rowCount" : 481602274416000000
              },
              "compileTime" : {
                "sizeInBytes" : 42381000148608000000,
                "rowCount" : 481602274416000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68, s_zip#132] "
          },
          "2" : {
            "sign" : 274868538,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86257123776000000,
                "rowCount" : 1198015608000000
              },
              "compileTime" : {
                "sizeInBytes" : 86257123776000000,
                "rowCount" : 1198015608000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68] "
          },
          "7" : {
            "sign" : 894771989,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1179648,
                "rowCount" : 3788
              },
              "compileTime" : {
                "sizeInBytes" : 350984,
                "rowCount" : 4808
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#54, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68], BroadcastQueryStage 2 "
          },
          "3" : {
            "sign" : -953582053,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 95841248640000000,
                "rowCount" : 1198015608000000
              },
              "compileTime" : {
                "sizeInBytes" : 95841248640000000,
                "rowCount" : 1198015608000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#32 = i_item_sk#54) "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68, s_zip#132]\n+- Join Inner, (ss_store_sk#37 = s_store_sk#107)\n   :- Project [ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68]\n   :  +- Join Inner, (ss_item_sk#32 = i_item_sk#54)\n   :     :- Project [ss_item_sk#32, ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80]\n   :     :  +- Join Inner, (ss_customer_sk#33 = c_customer_sk#76)\n   :     :     :- LogicalQueryStage Project [ss_item_sk#32, ss_customer_sk#33, ss_store_sk#37, ss_ext_sales_price#45], ShuffleQueryStage 5\n   :     :     +- LogicalQueryStage Project [c_customer_sk#76, c_current_addr_sk#80], ShuffleQueryStage 1\n   :     +- LogicalQueryStage Project [i_item_sk#54, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68], BroadcastQueryStage 2\n   +- LogicalQueryStage Project [s_store_sk#107, s_zip#132], BroadcastQueryStage 3\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : 1339885010,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1179648,
            "rowCount" : 3788,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [5]: [i_item_sk#54, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68] Arguments: 2 "
          },
          "4" : {
            "sign" : 495666327,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 8855448000000,
            "rowCount" : 316266000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [ss_item_sk#32, ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80] Input [6]: [ss_item_sk#32, ss_customer_sk#33, ss_store_sk#37, ss_ext_sales_price#45, c_customer_sk#76, c_current_addr_sk#80] "
          },
          "9" : {
            "sign" : -1533303574,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1051792,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [s_store_sk#107, s_zip#132] Arguments: 3 "
          },
          "5" : {
            "sign" : -1797070043,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 11385576000000,
            "rowCount" : 316266000000,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_customer_sk#33] Right keys [1]: [c_customer_sk#76] Join type: Inner Join condition: None "
          },
          "6" : {
            "sign" : 482684028,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 16777216,
            "rowCount" : 158133,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [4]: [ss_item_sk#32, ss_customer_sk#33, ss_store_sk#37, ss_ext_sales_price#45] Arguments: 6 "
          },
          "1" : {
            "sign" : -1230544896,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 46233818343936000000,
            "rowCount" : 481602274416000000,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_store_sk#37] Right keys [1]: [s_store_sk#107] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : -286574269,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 42381000148608000000,
            "rowCount" : 481602274416000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [7]: [ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68, s_zip#132] Input [9]: [ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68, s_store_sk#107, s_zip#132] "
          },
          "2" : {
            "sign" : -860041900,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 86257123776000000,
            "rowCount" : 1198015608000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [7]: [ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68] Input [9]: [ss_item_sk#32, ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80, i_item_sk#54, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68] "
          },
          "7" : {
            "sign" : -1997987111,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 48000000,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [c_customer_sk#76, c_current_addr_sk#80] Arguments: 1 "
          },
          "3" : {
            "sign" : -696037411,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 95841248640000000,
            "rowCount" : 1198015608000000,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_item_sk#32] Right keys [1]: [i_item_sk#54] Join type: Inner Join condition: None "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "BroadcastQueryStage",
          "toId" : 5,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "ShuffleQueryStage",
          "toId" : 5,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "BroadcastHashJoin",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "BroadcastQueryStage",
          "toId" : 3,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "BroadcastHashJoin",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68, s_zip#132]\n+- BroadcastHashJoin [ss_store_sk#37], [s_store_sk#107], Inner, BuildRight, false\n   :- Project [ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68]\n   :  +- BroadcastHashJoin [ss_item_sk#32], [i_item_sk#54], Inner, BuildRight, false\n   :     :- Project [ss_item_sk#32, ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80]\n   :     :  +- BroadcastHashJoin [ss_customer_sk#33], [c_customer_sk#76], Inner, BuildLeft, false\n   :     :     :- BroadcastQueryStage 6\n   :     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [plan_id=789]\n   :     :     :     +- AQEShuffleRead local\n   :     :     :        +- ShuffleQueryStage 5\n   :     :     :           +- Exchange hashpartitioning(ss_customer_sk#33, 200), ENSURE_REQUIREMENTS, [plan_id=536]\n   :     :     :              +- *(6) Project [ss_item_sk#32, ss_customer_sk#33, ss_store_sk#37, ss_ext_sales_price#45]\n   :     :     :                 +- *(6) BroadcastHashJoin [d_date_sk#3], [ss_sold_date_sk#53], Inner, BuildLeft, false\n   :     :     :                    :- BroadcastQueryStage 0\n   :     :     :                    :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=272]\n   :     :     :                    :     +- *(1) Project [d_date_sk#3]\n   :     :     :                    :        +- *(1) Filter ((((isnotnull(d_moy#11) AND isnotnull(d_year#9)) AND (d_moy#11 = 11)) AND (d_year#9 = 1999)) AND isnotnull(d_date_sk#3))\n   :     :     :                    :           +- *(1) ColumnarToRow\n   :     :     :                    :              +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#3,d_year#9,d_moy#11] Batched: true, DataFilters: [isnotnull(d_moy#11), isnotnull(d_year#9), (d_moy#11 = 11), (d_year#9 = 1999), isnotnull(d_date_s..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n   :     :     :                    +- *(6) Filter (((isnotnull(ss_item_sk#32) AND isnotnull(ss_customer_sk#33)) AND isnotnull(ss_store_sk#37)) AND might_contain(Subquery subquery#164, [id=#112], xxhash64(ss_item_sk#32, 42)))\n   :     :     :                       :  +- Subquery subquery#164, [id=#112]\n   :     :     :                       :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                +- == Final Plan ==\n                                                   ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0)], output=[bloomFilter#163])\n                                                   +- ShuffleQueryStage 0\n                                                      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=598]\n                                                         +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0)], output=[buf#168])\n                                                            +- *(1) Project [i_item_sk#54]\n                                                               +- *(1) Filter ((isnotnull(i_manager_id#74) AND (i_manager_id#74 = 7)) AND isnotnull(i_item_sk#54))\n                                                                  +- *(1) ColumnarToRow\n                                                                     +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#54,i_manager_id#74] Batched: true, DataFilters: [isnotnull(i_manager_id#74), (i_manager_id#74 = 7), isnotnull(i_item_sk#54)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,7), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manager_id:int>\n                                                +- == Initial Plan ==\n                                                   ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0)], output=[bloomFilter#163])\n                                                   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=110]\n                                                      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0)], output=[buf#168])\n                                                         +- Project [i_item_sk#54]\n                                                            +- Filter ((isnotnull(i_manager_id#74) AND (i_manager_id#74 = 7)) AND isnotnull(i_item_sk#54))\n                                                               +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#54,i_manager_id#74] Batched: true, DataFilters: [isnotnull(i_manager_id#74), (i_manager_id#74 = 7), isnotnull(i_item_sk#54)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,7), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manager_id:int>\n   :     :     :                       +- *(6) ColumnarToRow\n   :     :     :                          +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#32,ss_customer_sk#33,ss_store_sk#37,ss_ext_sales_price#45,ss_sold_date_sk#53] Batched: true, DataFilters: [isnotnull(ss_item_sk#32), isnotnull(ss_customer_sk#33), isnotnull(ss_store_sk#37)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#53), dynamicpruningexpression(ss_sold_date_sk#53 IN dynamicpruning#161)], PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2)>\n   :     :     :                                +- SubqueryBroadcast dynamicpruning#161, 0, [d_date_sk#3], [id=#510]\n   :     :     :                                   +- AdaptiveSparkPlan isFinalPlan=true\n                                                      +- == Final Plan ==\n                                                         BroadcastQueryStage 1\n                                                         +- ReusedExchange [d_date_sk#3], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=272]\n                                                      +- == Initial Plan ==\n                                                         BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=507]\n                                                         +- Project [d_date_sk#3]\n                                                            +- Filter ((((isnotnull(d_moy#11) AND isnotnull(d_year#9)) AND (d_moy#11 = 11)) AND (d_year#9 = 1999)) AND isnotnull(d_date_sk#3))\n                                                               +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#3,d_year#9,d_moy#11] Batched: true, DataFilters: [isnotnull(d_moy#11), isnotnull(d_year#9), (d_moy#11 = 11), (d_year#9 = 1999), isnotnull(d_date_s..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n   :     :     +- ShuffleQueryStage 1\n   :     :        +- Exchange hashpartitioning(c_customer_sk#76, 200), ENSURE_REQUIREMENTS, [plan_id=293]\n   :     :           +- *(2) Filter (isnotnull(c_customer_sk#76) AND isnotnull(c_current_addr_sk#80))\n   :     :              +- *(2) ColumnarToRow\n   :     :                 +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#76,c_current_addr_sk#80] Batched: true, DataFilters: [isnotnull(c_customer_sk#76), isnotnull(c_current_addr_sk#80)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)], ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>\n   :     +- BroadcastQueryStage 2\n   :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=314]\n   :           +- *(3) Project [i_item_sk#54, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68]\n   :              +- *(3) Filter ((isnotnull(i_manager_id#74) AND (i_manager_id#74 = 7)) AND isnotnull(i_item_sk#54))\n   :                 +- *(3) ColumnarToRow\n   :                    +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#54,i_brand_id#61,i_brand#62,i_manufact_id#67,i_manufact#68,i_manager_id#74] Batched: true, DataFilters: [isnotnull(i_manager_id#74), (i_manager_id#74 = 7), isnotnull(i_item_sk#54)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,7), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_brand:string,i_manufact_id:int,i_manufact:string,i_manager_...\n   +- BroadcastQueryStage 3\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=333]\n         +- *(4) Filter (isnotnull(s_zip#132) AND isnotnull(s_store_sk#107))\n            +- *(4) ColumnarToRow\n               +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#107,s_zip#132] Batched: true, DataFilters: [isnotnull(s_zip#132), isnotnull(s_store_sk#107)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_zip), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_zip:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 67008656,
        "inputRowCount" : 2162323
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "0" : [ 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 112177, 101979, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 112177, 101979, 112177, 112177, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 112177, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 112177, 101979 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 9,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 13 ],
      "Objectives" : {
        "DurationInMs" : 988,
        "TotalTasksDurationInMs" : 982,
        "IOBytes" : {
          "Total" : 27532748,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 20258067,
            "SW" : 7274681
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 743395023,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#54, i_item_id#55, i_rec_start_date#56, i_rec_end_date#57, i_item_desc#58, i_current_price#59, i_wholesale_cost#60, i_brand_id#61, i_brand#62, i_class_id#63, i_class#64, i_category_id#65, i_category#66, i_manufact_id#67, i_manufact#68, i_size#69, i_formulation#70, i_color#71, i_units#72, i_container#73, i_manager_id#74, i_product_name#75], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : -1628264074,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 57696,
                "rowCount" : 4808
              },
              "compileTime" : {
                "sizeInBytes" : 57696,
                "rowCount" : 4808
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#54] "
          },
          "0" : {
            "sign" : 1338146697,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0) AS bloomFilter#163] "
          },
          "2" : {
            "sign" : -671281459,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 57696,
                "rowCount" : 4808
              },
              "compileTime" : {
                "sizeInBytes" : 57696,
                "rowCount" : 4808
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#54] "
          },
          "3" : {
            "sign" : -1212134612,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2048208,
                "rowCount" : 4808
              },
              "compileTime" : {
                "sizeInBytes" : 2048208,
                "rowCount" : 4808
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(i_manager_id#74) AND (i_manager_id#74 = 7)) AND isnotnull(i_item_sk#54)) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0) AS bloomFilter#163]\n+- Project [i_item_sk#54]\n   +- Project [i_item_sk#54]\n      +- Filter ((isnotnull(i_manager_id#74) AND (i_manager_id#74 = 7)) AND isnotnull(i_item_sk#54))\n         +- Relation spark_catalog.tpcds_100.item[i_item_sk#54,i_item_id#55,i_rec_start_date#56,i_rec_end_date#57,i_item_desc#58,i_current_price#59,i_wholesale_cost#60,i_brand_id#61,i_brand#62,i_class_id#63,i_class#64,i_category_id#65,i_category#66,i_manufact_id#67,i_manufact#68,i_size#69,i_formulation#70,i_color#71,i_units#72,i_container#73,i_manager_id#74,i_product_name#75] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -2052333866,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [i_item_sk#54] Keys: [] Functions [1]: [partial_bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0)] Aggregate Attributes [1]: [buf#167] Results [1]: [buf#168] "
          },
          "1" : {
            "sign" : -327420021,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 57696,
            "rowCount" : 4808,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [i_item_sk#54] Input [2]: [i_item_sk#54, i_manager_id#74] "
          },
          "2" : {
            "sign" : -1681756212,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 57696,
            "rowCount" : 4808,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [i_item_sk#54, i_manager_id#74] Condition : ((isnotnull(i_manager_id#74) AND (i_manager_id#74 = 7)) AND isnotnull(i_item_sk#54)) "
          },
          "3" : {
            "sign" : -1492199863,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 57696,
            "rowCount" : 4808,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.item Output [2]: [i_item_sk#54, i_manager_id#74] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item] PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,7), IsNotNull(i_item_sk)] ReadSchema: struct<i_item_sk:int,i_manager_id:int> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.item",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0)], output=[buf#168])\n+- Project [i_item_sk#54]\n   +- Filter ((isnotnull(i_manager_id#74) AND (i_manager_id#74 = 7)) AND isnotnull(i_item_sk#54))\n      +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#54,i_manager_id#74] Batched: true, DataFilters: [isnotnull(i_manager_id#74), (i_manager_id#74 = 7), isnotnull(i_item_sk#54)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,7), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manager_id:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 57696,
        "inputRowCount" : 4808
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 11,
        "FinishedTasksNum" : 16,
        "FinishedTasksTotalTimeInMs" : 14639.0,
        "FinishedTasksDistributionInMs" : [ 34.0, 151.0, 1240.0, 1302.0, 1560.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 6 ],
      "Objectives" : {
        "DurationInMs" : 3223,
        "TotalTasksDurationInMs" : 5596,
        "IOBytes" : {
          "Total" : 1061796,
          "Details" : {
            "IR" : 1048398,
            "IW" : 0,
            "SR" : 0,
            "SW" : 13398
          }
        }
      }
    },
    "10" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1809393406,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29893646507003200512000000,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 29893646507003200512000000,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_brand#62, i_brand_id#61, i_manufact_id#67, i_manufact#68], [i_brand_id#61 AS brand_id#152, i_brand#62 AS brand#153, i_manufact_id#67, i_manufact#68, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#45)),17,2) AS ext_price#154] "
          },
          "1" : {
            "sign" : 1479111492,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29893646507003200512000000,
                "rowCount" : 467088226671925008000000
              },
              "compileTime" : {
                "sizeInBytes" : 29893646507003200512000000,
                "rowCount" : 467088226671925008000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_ext_sales_price#45, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68] "
          },
          "2" : {
            "sign" : -580307284,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 52313881387255600896000000,
                "rowCount" : 467088226671925008000000
              },
              "compileTime" : {
                "sizeInBytes" : 52313881387255600896000000,
                "rowCount" : 467088226671925008000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_current_addr_sk#80 = ca_address_sk#94) AND NOT (substr(ca_zip#103, 1, 5) = substr(s_zip#132, 1, 5))) "
          },
          "3" : {
            "sign" : 86825606,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 31035616,
                "rowCount" : 969863
              },
              "compileTime" : {
                "sizeInBytes" : 28126027,
                "rowCount" : 969863
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#94, ca_zip#103], ShuffleQueryStage 4 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [i_brand#62, i_brand_id#61, i_manufact_id#67, i_manufact#68], [i_brand_id#61 AS brand_id#152, i_brand#62 AS brand#153, i_manufact_id#67, i_manufact#68, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#45)),17,2) AS ext_price#154]\n+- Project [ss_ext_sales_price#45, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68]\n   +- Join Inner, ((c_current_addr_sk#80 = ca_address_sk#94) AND NOT (substr(ca_zip#103, 1, 5) = substr(s_zip#132, 1, 5)))\n      :- Project [ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68, s_zip#132]\n      :  +- Join Inner, (ss_store_sk#37 = s_store_sk#107)\n      :     :- Project [ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68]\n      :     :  +- Join Inner, (ss_item_sk#32 = i_item_sk#54)\n      :     :     :- Project [ss_item_sk#32, ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80]\n      :     :     :  +- Join Inner, (ss_customer_sk#33 = c_customer_sk#76)\n      :     :     :     :- LogicalQueryStage Project [ss_item_sk#32, ss_customer_sk#33, ss_store_sk#37, ss_ext_sales_price#45], ShuffleQueryStage 5\n      :     :     :     +- LogicalQueryStage Project [c_customer_sk#76, c_current_addr_sk#80], ShuffleQueryStage 1\n      :     :     +- LogicalQueryStage Project [i_item_sk#54, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68], BroadcastQueryStage 2\n      :     +- LogicalQueryStage Project [s_store_sk#107, s_zip#132], BroadcastQueryStage 3\n      +- LogicalQueryStage Project [ca_address_sk#94, ca_zip#103], ShuffleQueryStage 4\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 691773867,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 16866088,
            "rowCount" : 158133,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [7]: [ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68, s_zip#132] Arguments: 7 "
          },
          "5" : {
            "sign" : -1768377899,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [ca_address_sk#94, ca_zip#103] Arguments: [ca_address_sk#94 ASC NULLS FIRST], false, 0 "
          },
          "6" : {
            "sign" : -1434987431,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 31035616,
            "rowCount" : 969863,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [ca_address_sk#94, ca_zip#103] Arguments: 4 "
          },
          "1" : {
            "sign" : -600283097,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 29893646507003200512000000,
            "rowCount" : 467088226671925008000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [ss_ext_sales_price#45, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68] Input [9]: [ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68, s_zip#132, ca_address_sk#94, ca_zip#103] "
          },
          "0" : {
            "sign" : 1424080033,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 29893646507003200512000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [5]: [ss_ext_sales_price#45, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68] Keys [4]: [i_brand#62, i_brand_id#61, i_manufact_id#67, i_manufact#68] Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#45))] Aggregate Attributes [1]: [sum#165L] Results [5]: [i_brand#62, i_brand_id#61, i_manufact_id#67, i_manufact#68, sum#166L] "
          },
          "2" : {
            "sign" : 803221319,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 52313881387255600896000000,
            "rowCount" : 467088226671925008000000,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [c_current_addr_sk#80] Right keys [1]: [ca_address_sk#94] Join type: Inner Join condition: NOT (substr(ca_zip#103, 1, 5) = substr(s_zip#132, 1, 5)) "
          },
          "3" : {
            "sign" : -1115510388,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [7]: [ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68, s_zip#132] Arguments: [c_current_addr_sk#80 ASC NULLS FIRST], false, 0 "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "ShuffleQueryStage",
          "toId" : 5,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "SortMergeJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[i_brand#62, i_brand_id#61, i_manufact_id#67, i_manufact#68], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#45))], output=[i_brand#62, i_brand_id#61, i_manufact_id#67, i_manufact#68, sum#166L])\n+- Project [ss_ext_sales_price#45, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68]\n   +- SortMergeJoin [c_current_addr_sk#80], [ca_address_sk#94], Inner, NOT (substr(ca_zip#103, 1, 5) = substr(s_zip#132, 1, 5))\n      :- Sort [c_current_addr_sk#80 ASC NULLS FIRST], false, 0\n      :  +- ShuffleQueryStage 7\n      :     +- Exchange hashpartitioning(c_current_addr_sk#80, 200), ENSURE_REQUIREMENTS, [plan_id=908]\n      :        +- *(7) Project [ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68, s_zip#132]\n      :           +- *(7) BroadcastHashJoin [ss_store_sk#37], [s_store_sk#107], Inner, BuildRight, false\n      :              :- *(7) Project [ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68]\n      :              :  +- *(7) BroadcastHashJoin [ss_item_sk#32], [i_item_sk#54], Inner, BuildRight, false\n      :              :     :- *(7) Project [ss_item_sk#32, ss_store_sk#37, ss_ext_sales_price#45, c_current_addr_sk#80]\n      :              :     :  +- *(7) BroadcastHashJoin [ss_customer_sk#33], [c_customer_sk#76], Inner, BuildLeft, false\n      :              :     :     :- BroadcastQueryStage 6\n      :              :     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [plan_id=789]\n      :              :     :     :     +- AQEShuffleRead local\n      :              :     :     :        +- ShuffleQueryStage 5\n      :              :     :     :           +- Exchange hashpartitioning(ss_customer_sk#33, 200), ENSURE_REQUIREMENTS, [plan_id=536]\n      :              :     :     :              +- *(6) Project [ss_item_sk#32, ss_customer_sk#33, ss_store_sk#37, ss_ext_sales_price#45]\n      :              :     :     :                 +- *(6) BroadcastHashJoin [d_date_sk#3], [ss_sold_date_sk#53], Inner, BuildLeft, false\n      :              :     :     :                    :- BroadcastQueryStage 0\n      :              :     :     :                    :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=272]\n      :              :     :     :                    :     +- *(1) Project [d_date_sk#3]\n      :              :     :     :                    :        +- *(1) Filter ((((isnotnull(d_moy#11) AND isnotnull(d_year#9)) AND (d_moy#11 = 11)) AND (d_year#9 = 1999)) AND isnotnull(d_date_sk#3))\n      :              :     :     :                    :           +- *(1) ColumnarToRow\n      :              :     :     :                    :              +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#3,d_year#9,d_moy#11] Batched: true, DataFilters: [isnotnull(d_moy#11), isnotnull(d_year#9), (d_moy#11 = 11), (d_year#9 = 1999), isnotnull(d_date_s..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n      :              :     :     :                    +- *(6) Filter (((isnotnull(ss_item_sk#32) AND isnotnull(ss_customer_sk#33)) AND isnotnull(ss_store_sk#37)) AND might_contain(Subquery subquery#164, [id=#112], xxhash64(ss_item_sk#32, 42)))\n      :              :     :     :                       :  +- Subquery subquery#164, [id=#112]\n      :              :     :     :                       :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                                  +- == Final Plan ==\n                                                                     ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0)], output=[bloomFilter#163])\n                                                                     +- ShuffleQueryStage 0\n                                                                        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=598]\n                                                                           +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0)], output=[buf#168])\n                                                                              +- *(1) Project [i_item_sk#54]\n                                                                                 +- *(1) Filter ((isnotnull(i_manager_id#74) AND (i_manager_id#74 = 7)) AND isnotnull(i_item_sk#54))\n                                                                                    +- *(1) ColumnarToRow\n                                                                                       +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#54,i_manager_id#74] Batched: true, DataFilters: [isnotnull(i_manager_id#74), (i_manager_id#74 = 7), isnotnull(i_item_sk#54)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,7), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manager_id:int>\n                                                                  +- == Initial Plan ==\n                                                                     ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0)], output=[bloomFilter#163])\n                                                                     +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=110]\n                                                                        +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0)], output=[buf#168])\n                                                                           +- Project [i_item_sk#54]\n                                                                              +- Filter ((isnotnull(i_manager_id#74) AND (i_manager_id#74 = 7)) AND isnotnull(i_item_sk#54))\n                                                                                 +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#54,i_manager_id#74] Batched: true, DataFilters: [isnotnull(i_manager_id#74), (i_manager_id#74 = 7), isnotnull(i_item_sk#54)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,7), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manager_id:int>\n      :              :     :     :                       +- *(6) ColumnarToRow\n      :              :     :     :                          +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#32,ss_customer_sk#33,ss_store_sk#37,ss_ext_sales_price#45,ss_sold_date_sk#53] Batched: true, DataFilters: [isnotnull(ss_item_sk#32), isnotnull(ss_customer_sk#33), isnotnull(ss_store_sk#37)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#53), dynamicpruningexpression(ss_sold_date_sk#53 IN dynamicpruning#161)], PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2)>\n      :              :     :     :                                +- SubqueryBroadcast dynamicpruning#161, 0, [d_date_sk#3], [id=#510]\n      :              :     :     :                                   +- AdaptiveSparkPlan isFinalPlan=true\n                                                                        +- == Final Plan ==\n                                                                           BroadcastQueryStage 1\n                                                                           +- ReusedExchange [d_date_sk#3], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=272]\n                                                                        +- == Initial Plan ==\n                                                                           BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=507]\n                                                                           +- Project [d_date_sk#3]\n                                                                              +- Filter ((((isnotnull(d_moy#11) AND isnotnull(d_year#9)) AND (d_moy#11 = 11)) AND (d_year#9 = 1999)) AND isnotnull(d_date_sk#3))\n                                                                                 +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#3,d_year#9,d_moy#11] Batched: true, DataFilters: [isnotnull(d_moy#11), isnotnull(d_year#9), (d_moy#11 = 11), (d_year#9 = 1999), isnotnull(d_date_s..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n      :              :     :     +- AQEShuffleRead local\n      :              :     :        +- ShuffleQueryStage 1\n      :              :     :           +- Exchange hashpartitioning(c_customer_sk#76, 200), ENSURE_REQUIREMENTS, [plan_id=293]\n      :              :     :              +- *(2) Filter (isnotnull(c_customer_sk#76) AND isnotnull(c_current_addr_sk#80))\n      :              :     :                 +- *(2) ColumnarToRow\n      :              :     :                    +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#76,c_current_addr_sk#80] Batched: true, DataFilters: [isnotnull(c_customer_sk#76), isnotnull(c_current_addr_sk#80)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)], ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>\n      :              :     +- BroadcastQueryStage 2\n      :              :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=314]\n      :              :           +- *(3) Project [i_item_sk#54, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68]\n      :              :              +- *(3) Filter ((isnotnull(i_manager_id#74) AND (i_manager_id#74 = 7)) AND isnotnull(i_item_sk#54))\n      :              :                 +- *(3) ColumnarToRow\n      :              :                    +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#54,i_brand_id#61,i_brand#62,i_manufact_id#67,i_manufact#68,i_manager_id#74] Batched: true, DataFilters: [isnotnull(i_manager_id#74), (i_manager_id#74 = 7), isnotnull(i_item_sk#54)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,7), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_brand:string,i_manufact_id:int,i_manufact:string,i_manager_...\n      :              +- BroadcastQueryStage 3\n      :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=333]\n      :                    +- *(4) Filter (isnotnull(s_zip#132) AND isnotnull(s_store_sk#107))\n      :                       +- *(4) ColumnarToRow\n      :                          +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#107,s_zip#132] Batched: true, DataFilters: [isnotnull(s_zip#132), isnotnull(s_store_sk#107)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_zip), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_zip:string>\n      +- Sort [ca_address_sk#94 ASC NULLS FIRST], false, 0\n         +- ShuffleQueryStage 4\n            +- Exchange hashpartitioning(ca_address_sk#94, 200), ENSURE_REQUIREMENTS, [plan_id=352]\n               +- *(5) Filter (isnotnull(ca_address_sk#94) AND isnotnull(ca_zip#103))\n                  +- *(5) ColumnarToRow\n                     +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#94,ca_zip#103] Batched: true, DataFilters: [isnotnull(ca_address_sk#94), isnotnull(ca_zip#103)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_zip)], ReadSchema: struct<ca_address_sk:int,ca_zip:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 47901704,
        "inputRowCount" : 1127996
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "4" : [ 39317, 39317, 35743, 35743, 39317, 39317, 39317, 35743, 35743, 39317, 35743, 39317, 43249, 39317, 35743, 35743, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 39317, 39317, 35743, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 35743, 39317, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 35743, 35743, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 43249, 35743, 39317, 35743, 35743, 39317, 39317, 39317, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 39317, 35743, 35743, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 35743, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 39317, 39317, 35743, 39317, 39317, 39317, 35743, 39317, 39317, 39317, 35743, 35743, 39317, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 39317, 35743, 39317, 35743, 35743, 39317, 39317, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 39317, 39317, 39317, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 39317 ],
        "1" : [ 52331, 47574, 52331, 52331, 52331, 47574, 47574, 52331, 47574, 52331, 52331, 47574, 52331, 47574, 47574, 52331, 47574, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 52331, 47574, 52331, 52331, 47574, 47574, 52331, 52331, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 52331, 47574, 47574, 47574, 52331, 47574, 47574, 52331, 47574, 52331, 47574, 52331, 47574, 47574, 47574, 52331, 47574, 52331, 47574, 52331, 52331, 47574, 52331, 52331, 52331, 47574, 52331, 52331, 52331, 47574, 52331, 47574, 52331, 47574, 47574, 52331, 52331, 47574, 52331, 47574, 47574, 52331, 52331, 52331, 47574, 52331, 52331, 52331, 52331, 52331, 47574, 47574, 47574, 47574, 47574, 52331, 52331, 47574, 47574, 52331, 52331, 52331, 47574, 47574, 47574, 52331, 47574, 52331, 52331, 52331, 47574, 47574, 47574, 47574, 47574, 52331, 52331, 52331, 52331, 52331, 52331, 47574, 47574, 52331, 47574, 52331, 47574, 52331, 52331, 47574, 47574, 52331, 47574, 52331, 47574, 47574, 52331, 47574, 52331, 52331, 52331, 52331, 52331, 47574, 47574, 47574, 52331, 52331, 47574, 52331, 47574, 52331, 52331, 47574, 47574, 52331, 52331, 47574, 52331, 47574, 52331, 52331, 47574, 52331, 52331, 52331, 52331, 47574, 47574, 47574, 52331, 47574, 47574, 47574, 52331, 52331, 47574, 47574, 52331, 52331, 52331, 52331, 47574, 47574, 52331, 47574, 47574, 47574, 47574, 52331, 52331, 52331, 52331, 52331 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 10,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 17 ],
      "Objectives" : {
        "DurationInMs" : 1439,
        "TotalTasksDurationInMs" : 1431,
        "IOBytes" : {
          "Total" : 16913611,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 16801536,
            "SW" : 112075
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 329333732,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 64160,
                "rowCount" : 5
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0) AS bloomFilter#163], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0) AS bloomFilter#163], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0)])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 562425367,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 64160,
            "rowCount" : 5,
            "isRuntime" : true,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [buf#168] Keys: [] Functions [1]: [bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0)] Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0)#162] Results [1]: [bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0)#162 AS bloomFilter#163] "
          },
          "1" : {
            "sign" : -1793802093,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [buf#168] Arguments: 0 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0)], output=[bloomFilter#163])\n+- ShuffleQueryStage 0\n   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=598]\n      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0)], output=[buf#168])\n         +- *(1) Project [i_item_sk#54]\n            +- *(1) Filter ((isnotnull(i_manager_id#74) AND (i_manager_id#74 = 7)) AND isnotnull(i_item_sk#54))\n               +- *(1) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#54,i_manager_id#74] Batched: true, DataFilters: [isnotnull(i_manager_id#74), (i_manager_id#74 = 7), isnotnull(i_item_sk#54)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,7), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manager_id:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 64160,
        "inputRowCount" : 5
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "2" : [ 14348 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 8 ],
      "Objectives" : {
        "DurationInMs" : 164,
        "TotalTasksDurationInMs" : 139,
        "IOBytes" : {
          "Total" : 13398,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 13398,
            "SW" : 0
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1938078493,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 350984,
                "rowCount" : 4808
              },
              "compileTime" : {
                "sizeInBytes" : 350984,
                "rowCount" : 4808
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#54, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68] "
          },
          "1" : {
            "sign" : -1212134612,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2048208,
                "rowCount" : 4808
              },
              "compileTime" : {
                "sizeInBytes" : 2048208,
                "rowCount" : 4808
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(i_manager_id#74) AND (i_manager_id#74 = 7)) AND isnotnull(i_item_sk#54)) "
          },
          "2" : {
            "sign" : 743395023,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#54, i_item_id#55, i_rec_start_date#56, i_rec_end_date#57, i_item_desc#58, i_current_price#59, i_wholesale_cost#60, i_brand_id#61, i_brand#62, i_class_id#63, i_class#64, i_category_id#65, i_category#66, i_manufact_id#67, i_manufact#68, i_size#69, i_formulation#70, i_color#71, i_units#72, i_container#73, i_manager_id#74, i_product_name#75], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#54, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68]\n+- Filter ((isnotnull(i_manager_id#74) AND (i_manager_id#74 = 7)) AND isnotnull(i_item_sk#54))\n   +- Relation spark_catalog.tpcds_100.item[i_item_sk#54,i_item_id#55,i_rec_start_date#56,i_rec_end_date#57,i_item_desc#58,i_current_price#59,i_wholesale_cost#60,i_brand_id#61,i_brand#62,i_class_id#63,i_class#64,i_category_id#65,i_category#66,i_manufact_id#67,i_manufact#68,i_size#69,i_formulation#70,i_color#71,i_units#72,i_container#73,i_manager_id#74,i_product_name#75] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1802985935,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 350984,
            "rowCount" : 4808,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [i_item_sk#54, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68] Input [6]: [i_item_sk#54, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68, i_manager_id#74] "
          },
          "1" : {
            "sign" : 226619046,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 350984,
            "rowCount" : 4808,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [6]: [i_item_sk#54, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68, i_manager_id#74] Condition : ((isnotnull(i_manager_id#74) AND (i_manager_id#74 = 7)) AND isnotnull(i_item_sk#54)) "
          },
          "2" : {
            "sign" : -2028008093,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 350984,
            "rowCount" : 4808,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.item Output [6]: [i_item_sk#54, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68, i_manager_id#74] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item] PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,7), IsNotNull(i_item_sk)] ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_brand:string,i_manufact_id:int,i_manufact:string,i_manager_id:int> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.item",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#54, i_brand_id#61, i_brand#62, i_manufact_id#67, i_manufact#68]\n+- Filter ((isnotnull(i_manager_id#74) AND (i_manager_id#74 = 7)) AND isnotnull(i_item_sk#54))\n   +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#54,i_brand_id#61,i_brand#62,i_manufact_id#67,i_manufact#68,i_manager_id#74] Batched: true, DataFilters: [isnotnull(i_manager_id#74), (i_manager_id#74 = 7), isnotnull(i_item_sk#54)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,7), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_brand:string,i_manufact_id:int,i_manufact:string,i_manager_...\n"
      },
      "IM" : {
        "inputSizeInBytes" : 350984,
        "inputRowCount" : 4808
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 2250,
        "TotalTasksDurationInMs" : 3238,
        "IOBytes" : {
          "Total" : 2097532,
          "Details" : {
            "IR" : 2097532,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 2002820564,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 900,
                "rowCount" : 75
              },
              "compileTime" : {
                "sizeInBytes" : 900,
                "rowCount" : 75
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#3] "
          },
          "1" : {
            "sign" : 1968710013,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 18450,
                "rowCount" : 75
              },
              "compileTime" : {
                "sizeInBytes" : 18450,
                "rowCount" : 75
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#11) AND isnotnull(d_year#9)) AND ((d_moy#11 = 11) AND (d_year#9 = 1999))) AND isnotnull(d_date_sk#3)) "
          },
          "2" : {
            "sign" : 2116768618,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#3, d_date_id#4, d_date#5, d_month_seq#6, d_week_seq#7, d_quarter_seq#8, d_year#9, d_dow#10, d_moy#11, d_dom#12, d_qoy#13, d_fy_year#14, d_fy_quarter_seq#15, d_fy_week_seq#16, d_day_name#17, d_quarter_name#18, d_holiday#19, d_weekend#20, d_following_holiday#21, d_first_dom#22, d_last_dom#23, d_same_day_ly#24, d_same_day_lq#25, d_current_day#26, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#3]\n+- Filter (((isnotnull(d_moy#11) AND isnotnull(d_year#9)) AND ((d_moy#11 = 11) AND (d_year#9 = 1999))) AND isnotnull(d_date_sk#3))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#3,d_date_id#4,d_date#5,d_month_seq#6,d_week_seq#7,d_quarter_seq#8,d_year#9,d_dow#10,d_moy#11,d_dom#12,d_qoy#13,d_fy_year#14,d_fy_quarter_seq#15,d_fy_week_seq#16,d_day_name#17,d_quarter_name#18,d_holiday#19,d_weekend#20,d_following_holiday#21,d_first_dom#22,d_last_dom#23,d_same_day_ly#24,d_same_day_lq#25,d_current_day#26,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 701434732,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 900,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [d_date_sk#3] Input [3]: [d_date_sk#3, d_year#9, d_moy#11] "
          },
          "1" : {
            "sign" : 2081731057,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 900,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [d_date_sk#3, d_year#9, d_moy#11] Condition : ((((isnotnull(d_moy#11) AND isnotnull(d_year#9)) AND (d_moy#11 = 11)) AND (d_year#9 = 1999)) AND isnotnull(d_date_sk#3)) "
          },
          "2" : {
            "sign" : -1233605776,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 900,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [3]: [d_date_sk#3, d_year#9, d_moy#11] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,1999), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#3]\n+- Filter ((((isnotnull(d_moy#11) AND isnotnull(d_year#9)) AND (d_moy#11 = 11)) AND (d_year#9 = 1999)) AND isnotnull(d_date_sk#3))\n   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#3,d_year#9,d_moy#11] Batched: true, DataFilters: [isnotnull(d_moy#11), isnotnull(d_year#9), (d_moy#11 = 11), (d_year#9 = 1999), isnotnull(d_date_s..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 900,
        "inputRowCount" : 75
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 2 ],
      "Objectives" : {
        "DurationInMs" : 1550,
        "TotalTasksDurationInMs" : 383,
        "IOBytes" : {
          "Total" : 93950,
          "Details" : {
            "IR" : 93950,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1238250800,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11658,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 11658,
                "rowCount" : 402
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#107, s_zip#132] "
          },
          "1" : {
            "sign" : -407140704,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(s_zip#132) AND isnotnull(s_store_sk#107)) "
          },
          "2" : {
            "sign" : 868826989,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#107, s_store_id#108, s_rec_start_date#109, s_rec_end_date#110, s_closed_date_sk#111, s_store_name#112, s_number_employees#113, s_floor_space#114, s_hours#115, s_manager#116, s_market_id#117, s_geography_class#118, s_market_desc#119, s_market_manager#120, s_division_id#121, s_division_name#122, s_company_id#123, s_company_name#124, s_street_number#125, s_street_name#126, s_street_type#127, s_suite_number#128, s_city#129, s_county#130, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [s_store_sk#107, s_zip#132]\n+- Filter (isnotnull(s_zip#132) AND isnotnull(s_store_sk#107))\n   +- Relation spark_catalog.tpcds_100.store[s_store_sk#107,s_store_id#108,s_rec_start_date#109,s_rec_end_date#110,s_closed_date_sk#111,s_store_name#112,s_number_employees#113,s_floor_space#114,s_hours#115,s_manager#116,s_market_id#117,s_geography_class#118,s_market_desc#119,s_market_manager#120,s_division_id#121,s_division_name#122,s_company_id#123,s_company_name#124,s_street_number#125,s_street_name#126,s_street_type#127,s_suite_number#128,s_city#129,s_county#130,... 5 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -33009558,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 11658,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [s_store_sk#107, s_zip#132] Condition : (isnotnull(s_zip#132) AND isnotnull(s_store_sk#107)) "
          },
          "1" : {
            "sign" : -1429583817,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 11658,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store Output [2]: [s_store_sk#107, s_zip#132] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store] PushedFilters: [IsNotNull(s_zip), IsNotNull(s_store_sk)] ReadSchema: struct<s_store_sk:int,s_zip:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(s_zip#132) AND isnotnull(s_store_sk#107))\n+- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#107,s_zip#132] Batched: true, DataFilters: [isnotnull(s_zip#132), isnotnull(s_store_sk#107)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_zip), IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_zip:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 11658,
        "inputRowCount" : 402
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 4 ],
      "Objectives" : {
        "DurationInMs" : 1759,
        "TotalTasksDurationInMs" : 477,
        "IOBytes" : {
          "Total" : 14938,
          "Details" : {
            "IR" : 14938,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 152283653,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              },
              "compileTime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#31, ss_item_sk#32, ss_customer_sk#33, ss_cdemo_sk#34, ss_hdemo_sk#35, ss_addr_sk#36, ss_store_sk#37, ss_promo_sk#38, ss_ticket_number#39L, ss_quantity#40, ss_wholesale_cost#41, ss_list_price#42, ss_sales_price#43, ss_ext_discount_amt#44, ss_ext_sales_price#45, ss_ext_wholesale_cost#46, ss_ext_list_price#47, ss_ext_tax#48, ss_coupon_amt#49, ss_net_paid#50, ss_net_paid_inc_tax#51, ss_net_profit#52, ss_sold_date_sk#53], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : 492473675,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9559461060,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 9559461060,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#3 = ss_sold_date_sk#53) "
          },
          "0" : {
            "sign" : -416366911,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7435136380,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 7435136380,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#32, ss_customer_sk#33, ss_store_sk#37, ss_ext_sales_price#45] "
          },
          "2" : {
            "sign" : 1709412754,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 8027326208,
                "rowCount" : 250853944
              },
              "compileTime" : {
                "sizeInBytes" : 8027326208,
                "rowCount" : 250853944
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#32, ss_customer_sk#33, ss_store_sk#37, ss_ext_sales_price#45, ss_sold_date_sk#53] "
          },
          "3" : {
            "sign" : -564650684,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 38129799488,
                "rowCount" : 250853944
              },
              "compileTime" : {
                "sizeInBytes" : 38129799488,
                "rowCount" : 250853944
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ss_sold_date_sk#53) AND isnotnull(ss_item_sk#32)) AND isnotnull(ss_customer_sk#33)) AND isnotnull(ss_store_sk#37)) AND (dynamicpruning#161 [ss_sold_date_sk#53] AND might_contain(scalar-subquery#164 [], xxhash64(ss_item_sk#32, 42)))) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_item_sk#32, ss_customer_sk#33, ss_store_sk#37, ss_ext_sales_price#45]\n+- Join Inner, (d_date_sk#3 = ss_sold_date_sk#53)\n   :- Project [d_date_sk#3]\n   :  +- Filter (((isnotnull(d_moy#11) AND isnotnull(d_year#9)) AND ((d_moy#11 = 11) AND (d_year#9 = 1999))) AND isnotnull(d_date_sk#3))\n   :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#3,d_date_id#4,d_date#5,d_month_seq#6,d_week_seq#7,d_quarter_seq#8,d_year#9,d_dow#10,d_moy#11,d_dom#12,d_qoy#13,d_fy_year#14,d_fy_quarter_seq#15,d_fy_week_seq#16,d_day_name#17,d_quarter_name#18,d_holiday#19,d_weekend#20,d_following_holiday#21,d_first_dom#22,d_last_dom#23,d_same_day_ly#24,d_same_day_lq#25,d_current_day#26,... 4 more fields] parquet\n   +- Project [ss_item_sk#32, ss_customer_sk#33, ss_store_sk#37, ss_ext_sales_price#45, ss_sold_date_sk#53]\n      +- Filter ((((isnotnull(ss_sold_date_sk#53) AND isnotnull(ss_item_sk#32)) AND isnotnull(ss_customer_sk#33)) AND isnotnull(ss_store_sk#37)) AND (dynamicpruning#161 [ss_sold_date_sk#53] AND might_contain(scalar-subquery#164 [], xxhash64(ss_item_sk#32, 42))))\n         :  :- Project [d_date_sk#3]\n         :  :  +- Filter (((isnotnull(d_moy#11) AND isnotnull(d_year#9)) AND ((d_moy#11 = 11) AND (d_year#9 = 1999))) AND isnotnull(d_date_sk#3))\n         :  :     +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#3,d_date_id#4,d_date#5,d_month_seq#6,d_week_seq#7,d_quarter_seq#8,d_year#9,d_dow#10,d_moy#11,d_dom#12,d_qoy#13,d_fy_year#14,d_fy_quarter_seq#15,d_fy_week_seq#16,d_day_name#17,d_quarter_name#18,d_holiday#19,d_weekend#20,d_following_holiday#21,d_first_dom#22,d_last_dom#23,d_same_day_ly#24,d_same_day_lq#25,d_current_day#26,... 4 more fields] parquet\n         :  +- Aggregate [bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0) AS bloomFilter#163]\n         :     +- Project [i_item_sk#54]\n         :        +- Project [i_item_sk#54]\n         :           +- Filter ((isnotnull(i_manager_id#74) AND (i_manager_id#74 = 7)) AND isnotnull(i_item_sk#54))\n         :              +- Relation spark_catalog.tpcds_100.item[i_item_sk#54,i_item_id#55,i_rec_start_date#56,i_rec_end_date#57,i_item_desc#58,i_current_price#59,i_wholesale_cost#60,i_brand_id#61,i_brand#62,i_class_id#63,i_class#64,i_category_id#65,i_category#66,i_manufact_id#67,i_manufact#68,i_size#69,i_formulation#70,i_color#71,i_units#72,i_container#73,i_manager_id#74,i_product_name#75] parquet\n         +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#31,ss_item_sk#32,ss_customer_sk#33,ss_cdemo_sk#34,ss_hdemo_sk#35,ss_addr_sk#36,ss_store_sk#37,ss_promo_sk#38,ss_ticket_number#39L,ss_quantity#40,ss_wholesale_cost#41,ss_list_price#42,ss_sales_price#43,ss_ext_discount_amt#44,ss_ext_sales_price#45,ss_ext_wholesale_cost#46,ss_ext_list_price#47,ss_ext_tax#48,ss_coupon_amt#49,ss_net_paid#50,ss_net_paid_inc_tax#51,ss_net_profit#52,ss_sold_date_sk#53] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -1895158451,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 8027326208,
            "rowCount" : 250853944,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_sales Output [5]: [ss_item_sk#32, ss_customer_sk#33, ss_store_sk#37, ss_ext_sales_price#45, ss_sold_date_sk#53] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales/ss_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ss_sold_date_sk#53), dynamicpruningexpression(ss_sold_date_sk#53 IN dynamicpruning#161)] PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_store_sk)] ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2)> "
          },
          "1" : {
            "sign" : 1518973538,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 9559461060,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [d_date_sk#3] Right keys [1]: [ss_sold_date_sk#53] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : -213592060,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 7435136380,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [ss_item_sk#32, ss_customer_sk#33, ss_store_sk#37, ss_ext_sales_price#45] Input [6]: [d_date_sk#3, ss_item_sk#32, ss_customer_sk#33, ss_store_sk#37, ss_ext_sales_price#45, ss_sold_date_sk#53] "
          },
          "2" : {
            "sign" : 1872979138,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048816,
            "rowCount" : 30,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#3] Arguments: 0 "
          },
          "3" : {
            "sign" : 832818238,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 8027326208,
            "rowCount" : 250853944,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [5]: [ss_item_sk#32, ss_customer_sk#33, ss_store_sk#37, ss_ext_sales_price#45, ss_sold_date_sk#53] Condition : (((isnotnull(ss_item_sk#32) AND isnotnull(ss_customer_sk#33)) AND isnotnull(ss_store_sk#37)) AND might_contain(Subquery subquery#164, [id=#112], xxhash64(ss_item_sk#32, 42))) "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_sales",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_item_sk#32, ss_customer_sk#33, ss_store_sk#37, ss_ext_sales_price#45]\n+- BroadcastHashJoin [d_date_sk#3], [ss_sold_date_sk#53], Inner, BuildLeft, false\n   :- BroadcastQueryStage 0\n   :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=272]\n   :     +- *(1) Project [d_date_sk#3]\n   :        +- *(1) Filter ((((isnotnull(d_moy#11) AND isnotnull(d_year#9)) AND (d_moy#11 = 11)) AND (d_year#9 = 1999)) AND isnotnull(d_date_sk#3))\n   :           +- *(1) ColumnarToRow\n   :              +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#3,d_year#9,d_moy#11] Batched: true, DataFilters: [isnotnull(d_moy#11), isnotnull(d_year#9), (d_moy#11 = 11), (d_year#9 = 1999), isnotnull(d_date_s..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n   +- Filter (((isnotnull(ss_item_sk#32) AND isnotnull(ss_customer_sk#33)) AND isnotnull(ss_store_sk#37)) AND might_contain(Subquery subquery#164, [id=#112], xxhash64(ss_item_sk#32, 42)))\n      :  +- Subquery subquery#164, [id=#112]\n      :     +- AdaptiveSparkPlan isFinalPlan=false\n      :        +- ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0)], output=[bloomFilter#163])\n      :           +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=110]\n      :              +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#54, 42), 4808, 102377, 0, 0)], output=[buf#168])\n      :                 +- Project [i_item_sk#54]\n      :                    +- Filter ((isnotnull(i_manager_id#74) AND (i_manager_id#74 = 7)) AND isnotnull(i_item_sk#54))\n      :                       +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#54,i_manager_id#74] Batched: true, DataFilters: [isnotnull(i_manager_id#74), (i_manager_id#74 = 7), isnotnull(i_item_sk#54)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,7), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_manager_id:int>\n      +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#32,ss_customer_sk#33,ss_store_sk#37,ss_ext_sales_price#45,ss_sold_date_sk#53] Batched: true, DataFilters: [isnotnull(ss_item_sk#32), isnotnull(ss_customer_sk#33), isnotnull(ss_store_sk#37)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#53), dynamicpruningexpression(ss_sold_date_sk#53 IN dynamicpruning#161)], PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_store_sk)], ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2)>\n            +- SubqueryBroadcast dynamicpruning#161, 0, [d_date_sk#3], [id=#510]\n               +- AdaptiveSparkPlan isFinalPlan=false\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=507]\n                     +- Project [d_date_sk#3]\n                        +- Filter ((((isnotnull(d_moy#11) AND isnotnull(d_year#9)) AND (d_moy#11 = 11)) AND (d_year#9 = 1999)) AND isnotnull(d_date_sk#3))\n                           +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#3,d_year#9,d_moy#11] Batched: true, DataFilters: [isnotnull(d_moy#11), isnotnull(d_year#9), (d_moy#11 = 11), (d_year#9 = 1999), isnotnull(d_date_s..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 8028375024,
        "inputRowCount" : 250853974
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 11,
        "FinishedTasksNum" : 16,
        "FinishedTasksTotalTimeInMs" : 14639.0,
        "FinishedTasksDistributionInMs" : [ 34.0, 151.0, 1240.0, 1302.0, 1560.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 9 ],
      "Objectives" : {
        "DurationInMs" : 2318,
        "TotalTasksDurationInMs" : 14305,
        "IOBytes" : {
          "Total" : 83520712,
          "Details" : {
            "IR" : 79642658,
            "IW" : 0,
            "SR" : 0,
            "SW" : 3878054
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1773063633,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 32000000,
                "rowCount" : 2000000
              },
              "compileTime" : {
                "sizeInBytes" : 32000000,
                "rowCount" : 2000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#76, c_current_addr_sk#80] "
          },
          "1" : {
            "sign" : 1739402720,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              },
              "compileTime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#76) AND isnotnull(c_current_addr_sk#80)) "
          },
          "2" : {
            "sign" : 247389664,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              },
              "compileTime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#76, c_customer_id#77, c_current_cdemo_sk#78, c_current_hdemo_sk#79, c_current_addr_sk#80, c_first_shipto_date_sk#81, c_first_sales_date_sk#82, c_salutation#83, c_first_name#84, c_last_name#85, c_preferred_cust_flag#86, c_birth_day#87, c_birth_month#88, c_birth_year#89, c_birth_country#90, c_login#91, c_email_address#92, c_last_review_date#93], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [c_customer_sk#76, c_current_addr_sk#80]\n+- Filter (isnotnull(c_customer_sk#76) AND isnotnull(c_current_addr_sk#80))\n   +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#76,c_customer_id#77,c_current_cdemo_sk#78,c_current_hdemo_sk#79,c_current_addr_sk#80,c_first_shipto_date_sk#81,c_first_sales_date_sk#82,c_salutation#83,c_first_name#84,c_last_name#85,c_preferred_cust_flag#86,c_birth_day#87,c_birth_month#88,c_birth_year#89,c_birth_country#90,c_login#91,c_email_address#92,c_last_review_date#93] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -343220527,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 32000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [c_customer_sk#76, c_current_addr_sk#80] Condition : (isnotnull(c_customer_sk#76) AND isnotnull(c_current_addr_sk#80)) "
          },
          "1" : {
            "sign" : 1159237329,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 32000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer Output [2]: [c_customer_sk#76, c_current_addr_sk#80] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer] PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)] ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(c_customer_sk#76) AND isnotnull(c_current_addr_sk#80))\n+- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#76,c_current_addr_sk#80] Batched: true, DataFilters: [isnotnull(c_customer_sk#76), isnotnull(c_current_addr_sk#80)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)], ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 32000000,
        "inputRowCount" : 2000000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 1 ],
      "Objectives" : {
        "DurationInMs" : 3031,
        "TotalTasksDurationInMs" : 27667,
        "IOBytes" : {
          "Total" : 36405687,
          "Details" : {
            "IR" : 16147620,
            "IW" : 0,
            "SR" : 0,
            "SW" : 20258067
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702226645253,
  "SQLEndTimeInMs" : 1702226657190,
  "Objectives" : {
    "DurationInMs" : 11937,
    "IOBytes" : {
      "Total" : 186884157,
      "Details" : {
        "IR" : 104757897,
        "IW" : 0,
        "SR" : 41063130,
        "SW" : 41063130
      }
    }
  }
}
