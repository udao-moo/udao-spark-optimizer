{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "45" : {
          "sign" : -147715099,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 876588,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#214] "
        },
        "34" : {
          "sign" : -492370393,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2448,
          "rowCount" : 204,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#81] "
        },
        "12" : {
          "sign" : 1634902664,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 231382926,
          "rowCount" : 940581,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_address_sk#172) AND (isnotnull(ca_county#179) AND isnotnull(ca_state#180))) "
        },
        "51" : {
          "sign" : -2062466104,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#253, d_date_id#254, d_date#255, d_month_seq#256, d_week_seq#257, d_quarter_seq#258, d_year#259, d_dow#260, d_moy#261, d_dom#262, d_qoy#263, d_fy_year#264, d_fy_quarter_seq#265, d_fy_week_seq#266, d_day_name#267, d_quarter_name#268, d_holiday#269, d_weekend#270, d_following_holiday#271, d_first_dom#272, d_last_dom#273, d_same_day_ly#274, d_same_day_lq#275, d_current_day#276, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "8" : {
          "sign" : -1238816849,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 40203200,
          "rowCount" : 2010160,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (c_current_addr_sk#135 = ca_address_sk#172) "
        },
        "19" : {
          "sign" : 469948137,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 131287469508000000000,
          "rowCount" : 6564373475400000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#131 = customer_sk#3) "
        },
        "23" : {
          "sign" : 1965102058,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 386139616200,
          "rowCount" : 16089150675,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (sold_date_sk#2 = d_date_sk#103) "
        },
        "4" : {
          "sign" : 1958276265,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 23812188,
          "rowCount" : 1984349,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [c_customer_sk#131], [cast((MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#163)),17,2) / 50) as int) AS segment#11] "
        },
        "40" : {
          "sign" : -1215380203,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 5310811700,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_customer_sk#151, ss_ext_sales_price#163] "
        },
        "15" : {
          "sign" : -1045486471,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 192558,
          "rowCount" : 402,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(s_county#208) AND isnotnull(s_state#209)) "
        },
        "11" : {
          "sign" : -1202574003,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 48910212,
          "rowCount" : 940581,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ca_address_sk#172, ca_county#179, ca_state#180] "
        },
        "9" : {
          "sign" : -724614597,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2464620,
          "rowCount" : 205385,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ca_address_sk#172] "
        },
        "44" : {
          "sign" : -971550717,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 41806893656,
          "rowCount" : 275045353,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#149, ss_item_sk#150, ss_customer_sk#151, ss_cdemo_sk#152, ss_hdemo_sk#153, ss_addr_sk#154, ss_store_sk#155, ss_promo_sk#156, ss_ticket_number#157L, ss_quantity#158, ss_wholesale_cost#159, ss_list_price#160, ss_sales_price#161, ss_ext_discount_amt#162, ss_ext_sales_price#163, ss_ext_wholesale_cost#164, ss_ext_list_price#165, ss_ext_tax#166, ss_coupon_amt#167, ss_net_paid#168, ss_net_paid_inc_tax#169, ss_net_profit#170, ss_sold_date_sk#171], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "33" : {
          "sign" : -432544473,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 14972593792,
          "rowCount" : 71983624,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#47, ws_ship_date_sk#48, ws_item_sk#49, ws_bill_customer_sk#50, ws_bill_cdemo_sk#51, ws_bill_hdemo_sk#52, ws_bill_addr_sk#53, ws_ship_customer_sk#54, ws_ship_cdemo_sk#55, ws_ship_hdemo_sk#56, ws_ship_addr_sk#57, ws_web_page_sk#58, ws_web_site_sk#59, ws_ship_mode_sk#60, ws_warehouse_sk#61, ws_promo_sk#62, ws_order_number#63L, ws_quantity#64, ws_wholesale_cost#65, ws_list_price#66, ws_sales_price#67, ws_ext_discount_amt#68, ws_ext_sales_price#69, ws_ext_wholesale_cost#70, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "22" : {
          "sign" : 952632567,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 257426410800,
          "rowCount" : 16089150675,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [customer_sk#3, item_sk#4] "
        },
        "55" : {
          "sign" : 1525339999,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#281, d_date_id#282, d_date#283, d_month_seq#284, d_week_seq#285, d_quarter_seq#286, d_year#287, d_dow#288, d_moy#289, d_dom#290, d_qoy#291, d_fy_year#292, d_fy_quarter_seq#293, d_fy_week_seq#294, d_day_name#295, d_quarter_name#296, d_holiday#297, d_weekend#298, d_following_holiday#299, d_first_dom#300, d_last_dom#301, d_same_day_ly#302, d_same_day_lq#303, d_current_day#304, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "26" : {
          "sign" : 1479932550,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 29651732864,
          "rowCount" : 142556408,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_item_sk#27) AND isnotnull(cs_sold_date_sk#46)) AND isnotnull(cs_bill_customer_sk#15)) AND dynamicpruning#313 [cs_sold_date_sk#46]) "
        },
        "50" : {
          "sign" : -449639875,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 18450,
          "rowCount" : 75,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#259) AND isnotnull(d_moy#261)) AND ((d_year#259 = 1999) AND (d_moy#261 = 3))) "
        },
        "37" : {
          "sign" : -1692118338,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 32000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_customer_sk#131, c_current_addr_sk#135] "
        },
        "13" : {
          "sign" : -1315552887,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 246000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#172, ca_address_id#173, ca_street_number#174, ca_street_name#175, ca_street_type#176, ca_suite_number#177, ca_city#178, ca_county#179, ca_state#180, ca_zip#181, ca_country#182, ca_gmt_offset#183, ca_location_type#184], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "46" : {
          "sign" : 1063842394,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_month_seq#217) AND ((d_month_seq#217 >= scalar-subquery#9 []) AND (d_month_seq#217 <= scalar-subquery#10 []))) AND isnotnull(d_date_sk#214)) "
        },
        "24" : {
          "sign" : 540901082,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
          "sizeInBytes" : 4290440180,
          "rowCount" : 214522009,
          "isRuntime" : false,
          "predicate" : " (unknown) Union Arguments: false, false "
        },
        "35" : {
          "sign" : 1848238258,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 86904,
          "rowCount" : 204,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(i_category#93) AND isnotnull(i_class#91)) AND ((i_category#93 = Jewelry) AND (i_class#91 = consignment))) AND isnotnull(i_item_sk#81)) "
        },
        "16" : {
          "sign" : -1453409683,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 192558,
          "rowCount" : 402,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#185, s_store_id#186, s_rec_start_date#187, s_rec_end_date#188, s_closed_date_sk#189, s_store_name#190, s_number_employees#191, s_floor_space#192, s_hours#193, s_manager#194, s_market_id#195, s_geography_class#196, s_market_desc#197, s_market_manager#198, s_division_id#199, s_division_name#200, s_company_id#201, s_company_name#202, s_street_number#203, s_street_name#204, s_street_type#205, s_suite_number#206, s_city#207, s_county#208, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "5" : {
          "sign" : 214871338,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 5500879020,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_customer_sk#131, ss_ext_sales_price#163] "
        },
        "10" : {
          "sign" : -1189525871,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 18895420,
          "rowCount" : 205385,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((ca_county#179 = s_county#208) AND (ca_state#180 = s_state#209)) "
        },
        "48" : {
          "sign" : -649018965,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 900,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [(d_month_seq + 1)#247], [(d_month_seq + 1)#247] "
        },
        "21" : {
          "sign" : 1775820706,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 65643734754000,
          "rowCount" : 3282186737700,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (item_sk#4 = i_item_sk#81) "
        },
        "54" : {
          "sign" : 655519742,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 18450,
          "rowCount" : 75,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#287) AND isnotnull(d_moy#289)) AND ((d_year#287 = 1999) AND (d_moy#289 = 3))) "
        },
        "43" : {
          "sign" : 1026074359,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 39925696056,
          "rowCount" : 262669053,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_customer_sk#151) AND isnotnull(ss_sold_date_sk#171)) AND dynamicpruning#314 [ss_sold_date_sk#171]) "
        },
        "32" : {
          "sign" : -89026110,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 14968845008,
          "rowCount" : 71965601,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(ws_item_sk#49) AND isnotnull(ws_sold_date_sk#80)) AND isnotnull(ws_bill_customer_sk#50)) AND dynamicpruning#313 [ws_sold_date_sk#80]) "
        },
        "49" : {
          "sign" : -1587021576,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 900,
          "rowCount" : 75,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [(d_month_seq#256 + 1) AS (d_month_seq + 1)#247] "
        },
        "6" : {
          "sign" : 1421463254,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 6601054824,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#131 = ss_customer_sk#151) "
        },
        "36" : {
          "sign" : -357337018,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#81, i_item_id#82, i_rec_start_date#83, i_rec_end_date#84, i_item_desc#85, i_current_price#86, i_wholesale_cost#87, i_brand_id#88, i_brand#89, i_class_id#90, i_class#91, i_category_id#92, i_category#93, i_manufact_id#94, i_manufact#95, i_size#96, i_formulation#97, i_color#98, i_units#99, i_container#100, i_manager_id#101, i_product_name#102], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "1" : {
          "sign" : 1584276751,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
          "sizeInBytes" : 47624376,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) LocalLimit Arguments: 100 "
        },
        "39" : {
          "sign" : 1043707143,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 500000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#131, c_customer_id#132, c_current_cdemo_sk#133, c_current_hdemo_sk#134, c_current_addr_sk#135, c_first_shipto_date_sk#136, c_first_sales_date_sk#137, c_salutation#138, c_first_name#139, c_last_name#140, c_preferred_cust_flag#141, c_birth_day#142, c_birth_month#143, c_birth_year#144, c_birth_country#145, c_login#146, c_email_address#147, c_last_review_date#148], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "17" : {
          "sign" : 626122226,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 25522816333216,
          "rowCount" : 1595176020826,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [c_customer_sk#131, c_current_addr_sk#135], [c_customer_sk#131, c_current_addr_sk#135] "
        },
        "25" : {
          "sign" : 102980262,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2851128160,
          "rowCount" : 142556408,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_sold_date_sk#46 AS sold_date_sk#2, cs_bill_customer_sk#15 AS customer_sk#3, cs_item_sk#27 AS item_sk#4] "
        },
        "14" : {
          "sign" : 1990640188,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 19698,
          "rowCount" : 402,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [s_county#208, s_state#209] "
        },
        "47" : {
          "sign" : -340464046,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#214, d_date_id#215, d_date#216, d_month_seq#217, d_week_seq#218, d_quarter_seq#219, d_year#220, d_dow#221, d_moy#222, d_dom#223, d_qoy#224, d_fy_year#225, d_fy_quarter_seq#226, d_fy_week_seq#227, d_day_name#228, d_quarter_name#229, d_holiday#230, d_weekend#231, d_following_holiday#232, d_first_dom#233, d_last_dom#234, d_same_day_ly#235, d_same_day_lq#236, d_current_day#237, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "31" : {
          "sign" : 934550008,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1439312020,
          "rowCount" : 71965601,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_sold_date_sk#80 AS sold_date_sk#5, ws_bill_customer_sk#50 AS customer_sk#6, ws_item_sk#49 AS item_sk#7] "
        },
        "53" : {
          "sign" : 1657692873,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 900,
          "rowCount" : 75,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [(d_month_seq#284 + 3) AS (d_month_seq + 3)#248] "
        },
        "42" : {
          "sign" : 1711229203,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 6304057272,
          "rowCount" : 262669053,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_customer_sk#151, ss_ext_sales_price#163, ss_sold_date_sk#171] "
        },
        "0" : {
          "sign" : -944478562,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
          "sizeInBytes" : 2400,
          "rowCount" : 100,
          "isRuntime" : false,
          "predicate" : " (unknown) GlobalLimit Arguments: 100 "
        },
        "20" : {
          "sign" : -1371168830,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 39386240852400,
          "rowCount" : 3282186737700,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [customer_sk#3] "
        },
        "27" : {
          "sign" : -914147946,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 29800787536,
          "rowCount" : 143273017,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#13, cs_ship_date_sk#14, cs_bill_customer_sk#15, cs_bill_cdemo_sk#16, cs_bill_hdemo_sk#17, cs_bill_addr_sk#18, cs_ship_customer_sk#19, cs_ship_cdemo_sk#20, cs_ship_hdemo_sk#21, cs_ship_addr_sk#22, cs_call_center_sk#23, cs_catalog_page_sk#24, cs_ship_mode_sk#25, cs_warehouse_sk#26, cs_item_sk#27, cs_promo_sk#28, cs_order_number#29L, cs_quantity#30, cs_wholesale_cost#31, cs_list_price#32, cs_sales_price#33, cs_ext_discount_amt#34, cs_ext_sales_price#35, cs_ext_wholesale_cost#36, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "2" : {
          "sign" : 801142408,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 47624376,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [segment#11 ASC NULLS FIRST, num_customers#0L ASC NULLS FIRST], true "
        },
        "38" : {
          "sign" : -373996026,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 500000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#131) AND isnotnull(c_current_addr_sk#135)) "
        },
        "18" : {
          "sign" : 274852883,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 105029975606400000000,
          "rowCount" : 6564373475400000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_customer_sk#131, c_current_addr_sk#135] "
        },
        "30" : {
          "sign" : -144809072,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#103, d_date_id#104, d_date#105, d_month_seq#106, d_week_seq#107, d_quarter_seq#108, d_year#109, d_dow#110, d_moy#111, d_dom#112, d_qoy#113, d_fy_year#114, d_fy_quarter_seq#115, d_fy_week_seq#116, d_day_name#117, d_quarter_name#118, d_holiday#119, d_weekend#120, d_following_holiday#121, d_first_dom#122, d_last_dom#123, d_same_day_ly#124, d_same_day_lq#125, d_current_day#126, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "7" : {
          "sign" : -1533810067,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 24121920,
          "rowCount" : 2010160,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_customer_sk#131] "
        },
        "29" : {
          "sign" : -275590035,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 18450,
          "rowCount" : 75,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#111) AND isnotnull(d_year#109)) AND ((d_moy#111 = 3) AND (d_year#109 = 1999))) AND isnotnull(d_date_sk#103)) "
        },
        "41" : {
          "sign" : 1744444084,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 7435136380,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#171 = d_date_sk#214) "
        },
        "3" : {
          "sign" : -1390630841,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 47624376,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [segment#11], [segment#11, count(1) AS num_customers#0L, (segment#11 * 50) AS segment_base#1] "
        },
        "52" : {
          "sign" : 1212882096,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 900,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [(d_month_seq + 3)#248], [(d_month_seq + 3)#248] "
        },
        "28" : {
          "sign" : 128757161,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 900,
          "rowCount" : 75,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#103] "
        }
      },
      "links" : [ {
        "fromId" : 13,
        "fromName" : "LogicalRelation",
        "toId" : 12,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 12,
        "fromName" : "Filter",
        "toId" : 11,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "Project",
        "toId" : 10,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "LogicalRelation",
        "toId" : 15,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "Filter",
        "toId" : 14,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Project",
        "toId" : 10,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Join",
        "toId" : 9,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Project",
        "toId" : 8,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "LogicalRelation",
        "toId" : 26,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 30,
        "fromName" : "LogicalRelation",
        "toId" : 29,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 29,
        "fromName" : "Filter",
        "toId" : 28,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "Project",
        "toId" : 26,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 26,
        "fromName" : "Filter",
        "toId" : 25,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "Project",
        "toId" : 24,
        "toName" : "Union",
        "linkType" : "Operator"
      }, {
        "fromId" : 33,
        "fromName" : "LogicalRelation",
        "toId" : 32,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "Project",
        "toId" : 32,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 32,
        "fromName" : "Filter",
        "toId" : 31,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 31,
        "fromName" : "Project",
        "toId" : 24,
        "toName" : "Union",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "Union",
        "toId" : 23,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "Project",
        "toId" : 23,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "Join",
        "toId" : 22,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "Project",
        "toId" : 21,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 36,
        "fromName" : "LogicalRelation",
        "toId" : 35,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 35,
        "fromName" : "Filter",
        "toId" : 34,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 34,
        "fromName" : "Project",
        "toId" : 21,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Join",
        "toId" : 20,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "Project",
        "toId" : 19,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 39,
        "fromName" : "LogicalRelation",
        "toId" : 38,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 38,
        "fromName" : "Filter",
        "toId" : 37,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 37,
        "fromName" : "Project",
        "toId" : 19,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "Join",
        "toId" : 18,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "Project",
        "toId" : 17,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Aggregate",
        "toId" : 8,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Join",
        "toId" : 7,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Project",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 44,
        "fromName" : "LogicalRelation",
        "toId" : 43,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 47,
        "fromName" : "LogicalRelation",
        "toId" : 46,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 51,
        "fromName" : "LogicalRelation",
        "toId" : 50,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 50,
        "fromName" : "Filter",
        "toId" : 49,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 49,
        "fromName" : "Project",
        "toId" : 48,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 48,
        "fromName" : "Aggregate",
        "toId" : 46,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 55,
        "fromName" : "LogicalRelation",
        "toId" : 54,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 54,
        "fromName" : "Filter",
        "toId" : 53,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 53,
        "fromName" : "Project",
        "toId" : 52,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 52,
        "fromName" : "Aggregate",
        "toId" : 46,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 46,
        "fromName" : "Filter",
        "toId" : 45,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 45,
        "fromName" : "Project",
        "toId" : 43,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 43,
        "fromName" : "Filter",
        "toId" : 42,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 42,
        "fromName" : "Project",
        "toId" : 41,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 45,
        "fromName" : "Project",
        "toId" : 41,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 41,
        "fromName" : "Join",
        "toId" : 40,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 40,
        "fromName" : "Project",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Join",
        "toId" : 5,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Project",
        "toId" : 4,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Aggregate",
        "toId" : 3,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Aggregate",
        "toId" : 2,
        "toName" : "Sort",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Sort",
        "toId" : 1,
        "toName" : "LocalLimit",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "LocalLimit",
        "toId" : 0,
        "toName" : "GlobalLimit",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [segment#11 ASC NULLS FIRST, num_customers#0L ASC NULLS FIRST], true\n      +- Aggregate [segment#11], [segment#11, count(1) AS num_customers#0L, (segment#11 * 50) AS segment_base#1]\n         +- Aggregate [c_customer_sk#131], [cast((MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#163)),17,2) / 50) as int) AS segment#11]\n            +- Project [c_customer_sk#131, ss_ext_sales_price#163]\n               +- Join Inner, (c_customer_sk#131 = ss_customer_sk#151)\n                  :- Project [c_customer_sk#131]\n                  :  +- Join Inner, (c_current_addr_sk#135 = ca_address_sk#172)\n                  :     :- Project [ca_address_sk#172]\n                  :     :  +- Join Inner, ((ca_county#179 = s_county#208) AND (ca_state#180 = s_state#209))\n                  :     :     :- Project [ca_address_sk#172, ca_county#179, ca_state#180]\n                  :     :     :  +- Filter (isnotnull(ca_address_sk#172) AND (isnotnull(ca_county#179) AND isnotnull(ca_state#180)))\n                  :     :     :     +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#172,ca_address_id#173,ca_street_number#174,ca_street_name#175,ca_street_type#176,ca_suite_number#177,ca_city#178,ca_county#179,ca_state#180,ca_zip#181,ca_country#182,ca_gmt_offset#183,ca_location_type#184] parquet\n                  :     :     +- Project [s_county#208, s_state#209]\n                  :     :        +- Filter (isnotnull(s_county#208) AND isnotnull(s_state#209))\n                  :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#185,s_store_id#186,s_rec_start_date#187,s_rec_end_date#188,s_closed_date_sk#189,s_store_name#190,s_number_employees#191,s_floor_space#192,s_hours#193,s_manager#194,s_market_id#195,s_geography_class#196,s_market_desc#197,s_market_manager#198,s_division_id#199,s_division_name#200,s_company_id#201,s_company_name#202,s_street_number#203,s_street_name#204,s_street_type#205,s_suite_number#206,s_city#207,s_county#208,... 5 more fields] parquet\n                  :     +- Aggregate [c_customer_sk#131, c_current_addr_sk#135], [c_customer_sk#131, c_current_addr_sk#135]\n                  :        +- Project [c_customer_sk#131, c_current_addr_sk#135]\n                  :           +- Join Inner, (c_customer_sk#131 = customer_sk#3)\n                  :              :- Project [customer_sk#3]\n                  :              :  +- Join Inner, (item_sk#4 = i_item_sk#81)\n                  :              :     :- Project [customer_sk#3, item_sk#4]\n                  :              :     :  +- Join Inner, (sold_date_sk#2 = d_date_sk#103)\n                  :              :     :     :- Union false, false\n                  :              :     :     :  :- Project [cs_sold_date_sk#46 AS sold_date_sk#2, cs_bill_customer_sk#15 AS customer_sk#3, cs_item_sk#27 AS item_sk#4]\n                  :              :     :     :  :  +- Filter (((isnotnull(cs_item_sk#27) AND isnotnull(cs_sold_date_sk#46)) AND isnotnull(cs_bill_customer_sk#15)) AND dynamicpruning#313 [cs_sold_date_sk#46])\n                  :              :     :     :  :     :  +- Project [d_date_sk#103]\n                  :              :     :     :  :     :     +- Filter (((isnotnull(d_moy#111) AND isnotnull(d_year#109)) AND ((d_moy#111 = 3) AND (d_year#109 = 1999))) AND isnotnull(d_date_sk#103))\n                  :              :     :     :  :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_date_id#104,d_date#105,d_month_seq#106,d_week_seq#107,d_quarter_seq#108,d_year#109,d_dow#110,d_moy#111,d_dom#112,d_qoy#113,d_fy_year#114,d_fy_quarter_seq#115,d_fy_week_seq#116,d_day_name#117,d_quarter_name#118,d_holiday#119,d_weekend#120,d_following_holiday#121,d_first_dom#122,d_last_dom#123,d_same_day_ly#124,d_same_day_lq#125,d_current_day#126,... 4 more fields] parquet\n                  :              :     :     :  :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#13,cs_ship_date_sk#14,cs_bill_customer_sk#15,cs_bill_cdemo_sk#16,cs_bill_hdemo_sk#17,cs_bill_addr_sk#18,cs_ship_customer_sk#19,cs_ship_cdemo_sk#20,cs_ship_hdemo_sk#21,cs_ship_addr_sk#22,cs_call_center_sk#23,cs_catalog_page_sk#24,cs_ship_mode_sk#25,cs_warehouse_sk#26,cs_item_sk#27,cs_promo_sk#28,cs_order_number#29L,cs_quantity#30,cs_wholesale_cost#31,cs_list_price#32,cs_sales_price#33,cs_ext_discount_amt#34,cs_ext_sales_price#35,cs_ext_wholesale_cost#36,... 10 more fields] parquet\n                  :              :     :     :  +- Project [ws_sold_date_sk#80 AS sold_date_sk#5, ws_bill_customer_sk#50 AS customer_sk#6, ws_item_sk#49 AS item_sk#7]\n                  :              :     :     :     +- Filter (((isnotnull(ws_item_sk#49) AND isnotnull(ws_sold_date_sk#80)) AND isnotnull(ws_bill_customer_sk#50)) AND dynamicpruning#313 [ws_sold_date_sk#80])\n                  :              :     :     :        :  +- Project [d_date_sk#103]\n                  :              :     :     :        :     +- Filter (((isnotnull(d_moy#111) AND isnotnull(d_year#109)) AND ((d_moy#111 = 3) AND (d_year#109 = 1999))) AND isnotnull(d_date_sk#103))\n                  :              :     :     :        :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_date_id#104,d_date#105,d_month_seq#106,d_week_seq#107,d_quarter_seq#108,d_year#109,d_dow#110,d_moy#111,d_dom#112,d_qoy#113,d_fy_year#114,d_fy_quarter_seq#115,d_fy_week_seq#116,d_day_name#117,d_quarter_name#118,d_holiday#119,d_weekend#120,d_following_holiday#121,d_first_dom#122,d_last_dom#123,d_same_day_ly#124,d_same_day_lq#125,d_current_day#126,... 4 more fields] parquet\n                  :              :     :     :        +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#47,ws_ship_date_sk#48,ws_item_sk#49,ws_bill_customer_sk#50,ws_bill_cdemo_sk#51,ws_bill_hdemo_sk#52,ws_bill_addr_sk#53,ws_ship_customer_sk#54,ws_ship_cdemo_sk#55,ws_ship_hdemo_sk#56,ws_ship_addr_sk#57,ws_web_page_sk#58,ws_web_site_sk#59,ws_ship_mode_sk#60,ws_warehouse_sk#61,ws_promo_sk#62,ws_order_number#63L,ws_quantity#64,ws_wholesale_cost#65,ws_list_price#66,ws_sales_price#67,ws_ext_discount_amt#68,ws_ext_sales_price#69,ws_ext_wholesale_cost#70,... 10 more fields] parquet\n                  :              :     :     +- Project [d_date_sk#103]\n                  :              :     :        +- Filter (((isnotnull(d_moy#111) AND isnotnull(d_year#109)) AND ((d_moy#111 = 3) AND (d_year#109 = 1999))) AND isnotnull(d_date_sk#103))\n                  :              :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_date_id#104,d_date#105,d_month_seq#106,d_week_seq#107,d_quarter_seq#108,d_year#109,d_dow#110,d_moy#111,d_dom#112,d_qoy#113,d_fy_year#114,d_fy_quarter_seq#115,d_fy_week_seq#116,d_day_name#117,d_quarter_name#118,d_holiday#119,d_weekend#120,d_following_holiday#121,d_first_dom#122,d_last_dom#123,d_same_day_ly#124,d_same_day_lq#125,d_current_day#126,... 4 more fields] parquet\n                  :              :     +- Project [i_item_sk#81]\n                  :              :        +- Filter (((isnotnull(i_category#93) AND isnotnull(i_class#91)) AND ((i_category#93 = Jewelry) AND (i_class#91 = consignment))) AND isnotnull(i_item_sk#81))\n                  :              :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#81,i_item_id#82,i_rec_start_date#83,i_rec_end_date#84,i_item_desc#85,i_current_price#86,i_wholesale_cost#87,i_brand_id#88,i_brand#89,i_class_id#90,i_class#91,i_category_id#92,i_category#93,i_manufact_id#94,i_manufact#95,i_size#96,i_formulation#97,i_color#98,i_units#99,i_container#100,i_manager_id#101,i_product_name#102] parquet\n                  :              +- Project [c_customer_sk#131, c_current_addr_sk#135]\n                  :                 +- Filter (isnotnull(c_customer_sk#131) AND isnotnull(c_current_addr_sk#135))\n                  :                    +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#131,c_customer_id#132,c_current_cdemo_sk#133,c_current_hdemo_sk#134,c_current_addr_sk#135,c_first_shipto_date_sk#136,c_first_sales_date_sk#137,c_salutation#138,c_first_name#139,c_last_name#140,c_preferred_cust_flag#141,c_birth_day#142,c_birth_month#143,c_birth_year#144,c_birth_country#145,c_login#146,c_email_address#147,c_last_review_date#148] parquet\n                  +- Project [ss_customer_sk#151, ss_ext_sales_price#163]\n                     +- Join Inner, (ss_sold_date_sk#171 = d_date_sk#214)\n                        :- Project [ss_customer_sk#151, ss_ext_sales_price#163, ss_sold_date_sk#171]\n                        :  +- Filter ((isnotnull(ss_customer_sk#151) AND isnotnull(ss_sold_date_sk#171)) AND dynamicpruning#314 [ss_sold_date_sk#171])\n                        :     :  +- Project [d_date_sk#214]\n                        :     :     +- Filter ((isnotnull(d_month_seq#217) AND ((d_month_seq#217 >= scalar-subquery#9 []) AND (d_month_seq#217 <= scalar-subquery#10 []))) AND isnotnull(d_date_sk#214))\n                        :     :        :  :- Aggregate [(d_month_seq + 1)#247], [(d_month_seq + 1)#247]\n                        :     :        :  :  +- Project [(d_month_seq#256 + 1) AS (d_month_seq + 1)#247]\n                        :     :        :  :     +- Filter ((isnotnull(d_year#259) AND isnotnull(d_moy#261)) AND ((d_year#259 = 1999) AND (d_moy#261 = 3)))\n                        :     :        :  :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#253,d_date_id#254,d_date#255,d_month_seq#256,d_week_seq#257,d_quarter_seq#258,d_year#259,d_dow#260,d_moy#261,d_dom#262,d_qoy#263,d_fy_year#264,d_fy_quarter_seq#265,d_fy_week_seq#266,d_day_name#267,d_quarter_name#268,d_holiday#269,d_weekend#270,d_following_holiday#271,d_first_dom#272,d_last_dom#273,d_same_day_ly#274,d_same_day_lq#275,d_current_day#276,... 4 more fields] parquet\n                        :     :        :  +- Aggregate [(d_month_seq + 3)#248], [(d_month_seq + 3)#248]\n                        :     :        :     +- Project [(d_month_seq#284 + 3) AS (d_month_seq + 3)#248]\n                        :     :        :        +- Filter ((isnotnull(d_year#287) AND isnotnull(d_moy#289)) AND ((d_year#287 = 1999) AND (d_moy#289 = 3)))\n                        :     :        :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#281,d_date_id#282,d_date#283,d_month_seq#284,d_week_seq#285,d_quarter_seq#286,d_year#287,d_dow#288,d_moy#289,d_dom#290,d_qoy#291,d_fy_year#292,d_fy_quarter_seq#293,d_fy_week_seq#294,d_day_name#295,d_quarter_name#296,d_holiday#297,d_weekend#298,d_following_holiday#299,d_first_dom#300,d_last_dom#301,d_same_day_ly#302,d_same_day_lq#303,d_current_day#304,... 4 more fields] parquet\n                        :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#214,d_date_id#215,d_date#216,d_month_seq#217,d_week_seq#218,d_quarter_seq#219,d_year#220,d_dow#221,d_moy#222,d_dom#223,d_qoy#224,d_fy_year#225,d_fy_quarter_seq#226,d_fy_week_seq#227,d_day_name#228,d_quarter_name#229,d_holiday#230,d_weekend#231,d_following_holiday#232,d_first_dom#233,d_last_dom#234,d_same_day_ly#235,d_same_day_lq#236,d_current_day#237,... 4 more fields] parquet\n                        :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#149,ss_item_sk#150,ss_customer_sk#151,ss_cdemo_sk#152,ss_hdemo_sk#153,ss_addr_sk#154,ss_store_sk#155,ss_promo_sk#156,ss_ticket_number#157L,ss_quantity#158,ss_wholesale_cost#159,ss_list_price#160,ss_sales_price#161,ss_ext_discount_amt#162,ss_ext_sales_price#163,ss_ext_wholesale_cost#164,ss_ext_list_price#165,ss_ext_tax#166,ss_coupon_amt#167,ss_net_paid#168,ss_net_paid_inc_tax#169,ss_net_profit#170,ss_sold_date_sk#171] parquet\n                        +- Project [d_date_sk#214]\n                           +- Filter ((isnotnull(d_month_seq#217) AND ((d_month_seq#217 >= scalar-subquery#9 []) AND (d_month_seq#217 <= scalar-subquery#10 []))) AND isnotnull(d_date_sk#214))\n                              :  :- Aggregate [(d_month_seq + 1)#247], [(d_month_seq + 1)#247]\n                              :  :  +- Project [(d_month_seq#256 + 1) AS (d_month_seq + 1)#247]\n                              :  :     +- Filter ((isnotnull(d_year#259) AND isnotnull(d_moy#261)) AND ((d_year#259 = 1999) AND (d_moy#261 = 3)))\n                              :  :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#253,d_date_id#254,d_date#255,d_month_seq#256,d_week_seq#257,d_quarter_seq#258,d_year#259,d_dow#260,d_moy#261,d_dom#262,d_qoy#263,d_fy_year#264,d_fy_quarter_seq#265,d_fy_week_seq#266,d_day_name#267,d_quarter_name#268,d_holiday#269,d_weekend#270,d_following_holiday#271,d_first_dom#272,d_last_dom#273,d_same_day_ly#274,d_same_day_lq#275,d_current_day#276,... 4 more fields] parquet\n                              :  +- Aggregate [(d_month_seq + 3)#248], [(d_month_seq + 3)#248]\n                              :     +- Project [(d_month_seq#284 + 3) AS (d_month_seq + 3)#248]\n                              :        +- Filter ((isnotnull(d_year#287) AND isnotnull(d_moy#289)) AND ((d_year#287 = 1999) AND (d_moy#289 = 3)))\n                              :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#281,d_date_id#282,d_date#283,d_month_seq#284,d_week_seq#285,d_quarter_seq#286,d_year#287,d_dow#288,d_moy#289,d_dom#290,d_qoy#291,d_fy_year#292,d_fy_quarter_seq#293,d_fy_week_seq#294,d_day_name#295,d_quarter_name#296,d_holiday#297,d_weekend#298,d_following_holiday#299,d_first_dom#300,d_last_dom#301,d_same_day_ly#302,d_same_day_lq#303,d_current_day#304,... 4 more fields] parquet\n                              +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#214,d_date_id#215,d_date#216,d_month_seq#217,d_week_seq#218,d_quarter_seq#219,d_year#220,d_dow#221,d_moy#222,d_dom#223,d_qoy#224,d_fy_year#225,d_fy_quarter_seq#226,d_fy_week_seq#227,d_day_name#228,d_quarter_name#229,d_holiday#230,d_weekend#231,d_following_holiday#232,d_first_dom#233,d_last_dom#234,d_same_day_ly#235,d_same_day_lq#236,d_current_day#237,... 4 more fields] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 87449311650,
      "inputRowCount" : 493652494
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "12" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -516323340,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 288,
            "rowCount" : 12,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "1" : {
            "sign" : 1805336443,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 288,
            "rowCount" : 12,
            "isRuntime" : true,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 508275722,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 288,
            "rowCount" : 12,
            "isRuntime" : true,
            "predicate" : " (unknown) Sort Arguments: [segment#326 ASC NULLS FIRST, num_customers#315L ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : 1398605167,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 288,
            "rowCount" : 12,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [segment#326], [segment#326, count(1) AS num_customers#315L, (segment#326 * 50) AS segment_base#316], HashAggregate(keys=[segment#326], functions=[count(1)]) "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [segment#326 ASC NULLS FIRST, num_customers#315L ASC NULLS FIRST], true\n      +- LogicalQueryStage Aggregate [segment#326], [segment#326, count(1) AS num_customers#315L, (segment#326 * 50) AS segment_base#316], HashAggregate(keys=[segment#326], functions=[count(1)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 288,
        "inputRowCount" : 12
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227120227,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 580,
        "IOBytes" : {
          "Total" : 768,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 768,
            "SW" : 0
          }
        }
      }
    },
    "8" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 518878046,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 131287469508000000000,
            "rowCount" : 6564373475400000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#131 = customer_sk#318) "
          },
          "8" : {
            "sign" : -2011357762,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3943785579808536320,
            "rowCount" : 197189278990426816,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_current_addr_sk#135 = ca_address_sk#172) "
          },
          "4" : {
            "sign" : -1472869376,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 22836648,
            "rowCount" : 1903054,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_sk#131], [cast((MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#163)),17,2) / 50) as int) AS segment#326] "
          },
          "15" : {
            "sign" : 1922548774,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 185542176,
            "rowCount" : 7730924,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#151, ss_ext_sales_price#163], ShuffleQueryStage 7 "
          },
          "11" : {
            "sign" : -1294298512,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 105029975606400000000,
            "rowCount" : 6564373475400000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#131, c_current_addr_sk#135] "
          },
          "9" : {
            "sign" : 462205045,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6291456,
            "rowCount" : 123616,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#172], BroadcastQueryStage 5 "
          },
          "13" : {
            "sign" : -1278555431,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 39386240852400,
            "rowCount" : 3282186737700,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [customer_sk#318], ShuffleQueryStage 6 "
          },
          "5" : {
            "sign" : 478006776,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 30489106589795728841159680,
            "rowCount" : 1524455329489786442057984,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#131, ss_ext_sales_price#163] "
          },
          "10" : {
            "sign" : -1681627929,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 25522816333216,
            "rowCount" : 1595176020826,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_sk#131, c_current_addr_sk#135], [c_customer_sk#131, c_current_addr_sk#135] "
          },
          "6" : {
            "sign" : 1641370674,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 36586927907754874609391616,
            "rowCount" : 1524455329489786442057984,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#131 = ss_customer_sk#151) "
          },
          "1" : {
            "sign" : 837745483,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 45673296,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "14" : {
            "sign" : 1706886479,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 32000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#131, c_current_addr_sk#135], ShuffleQueryStage 3 "
          },
          "0" : {
            "sign" : 1495793296,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 2400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 916827258,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 45673296,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [segment#326 ASC NULLS FIRST, num_customers#315L ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 1896762982,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2366271347885121792,
            "rowCount" : 197189278990426816,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#131] "
          },
          "3" : {
            "sign" : -181709417,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 45673296,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [segment#326], [segment#326, count(1) AS num_customers#315L, (segment#326 * 50) AS segment_base#316] "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Join",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Aggregate",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Aggregate",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [segment#326 ASC NULLS FIRST, num_customers#315L ASC NULLS FIRST], true\n      +- Aggregate [segment#326], [segment#326, count(1) AS num_customers#315L, (segment#326 * 50) AS segment_base#316]\n         +- Aggregate [c_customer_sk#131], [cast((MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#163)),17,2) / 50) as int) AS segment#326]\n            +- Project [c_customer_sk#131, ss_ext_sales_price#163]\n               +- Join Inner, (c_customer_sk#131 = ss_customer_sk#151)\n                  :- Project [c_customer_sk#131]\n                  :  +- Join Inner, (c_current_addr_sk#135 = ca_address_sk#172)\n                  :     :- LogicalQueryStage Project [ca_address_sk#172], BroadcastQueryStage 5\n                  :     +- Aggregate [c_customer_sk#131, c_current_addr_sk#135], [c_customer_sk#131, c_current_addr_sk#135]\n                  :        +- Project [c_customer_sk#131, c_current_addr_sk#135]\n                  :           +- Join Inner, (c_customer_sk#131 = customer_sk#318)\n                  :              :- LogicalQueryStage Project [customer_sk#318], ShuffleQueryStage 6\n                  :              +- LogicalQueryStage Project [c_customer_sk#131, c_current_addr_sk#135], ShuffleQueryStage 3\n                  +- LogicalQueryStage Project [ss_customer_sk#151, ss_ext_sales_price#163], ShuffleQueryStage 7\n"
      },
      "IM" : {
        "inputSizeInBytes" : 39386464686032,
        "inputRowCount" : 3282196592240
      },
      "PD" : {
        "4" : [ 355234, 352487, 351656, 355874, 357689, 368266, 344148, 359038, 368045, 353689, 361274, 347020, 371909, 356597, 370265, 348613, 355291, 368248, 354867, 343622, 366432, 353274, 366122, 362147, 361969, 348809, 349917, 345903, 362790, 373468, 358944, 344155, 364029, 350409, 366974, 368807, 340139, 341572, 364344, 342853, 359368, 358835, 346571, 369696, 354377, 361306, 362368, 358571, 364791, 350808, 373290, 352784, 357926, 348392, 361885, 362995, 350582, 347785, 349876, 359927, 339897, 361969, 354395, 358129, 358015, 369247, 355070, 356374, 350046, 362147, 376570, 366833, 346393, 359528, 364029, 367027, 356503, 356945, 357290, 345969, 350409, 359792, 366470, 348344, 351877, 355715, 349440, 348950, 357224, 363747, 345479, 354598, 363100, 361037, 355487, 374350, 359952, 355291, 363859, 351011, 354229, 365290, 359934, 339352, 360333, 358393, 358944, 362587, 345198, 351232, 353953, 357069, 357290, 356298, 370172, 353053, 341572, 357511, 347216, 346030, 355658, 363587, 356394, 356670, 354849, 369028, 364189, 345584, 359510, 366188, 355273, 356597, 364791, 366366, 359368, 345969, 372171, 354504, 359485, 354299, 340467, 338944, 352487, 359706, 361385, 368045, 364807, 351585, 364367, 355248, 354849, 352284, 356615, 352487, 351382, 363968, 361926, 354316, 361809, 346172, 345479, 352629, 369468, 352360, 359038, 355273, 356501, 359589, 356927, 357265, 349937, 365477, 378619, 357290, 361926, 351936, 360939, 362790, 361606, 359589, 357493, 360358, 346368, 351893, 369028, 351733, 363197, 363968, 357486, 352469, 348613, 369028, 338927, 345661, 351451, 352487, 360850, 357351, 363435, 346571 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 14,
        "FinishedTasksNum" : 32,
        "FinishedTasksTotalTimeInMs" : 45918.0,
        "FinishedTasksDistributionInMs" : [ 69.0, 106.0, 1082.0, 1738.0, 6606.0 ]
      },
      "StartTimeInMs" : 1702227109294,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 11513,
        "IOBytes" : {
          "Total" : 136577112,
          "Details" : {
            "IR" : 27239914,
            "IW" : 0,
            "SR" : 88732323,
            "SW" : 20604875
          }
        }
      }
    },
    "4" : {
      "LQP" : {
        "operators" : {
          "45" : {
            "sign" : -541859252,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#387, d_date_id#388, d_date#389, d_month_seq#390, d_week_seq#391, d_quarter_seq#392, d_year#393, d_dow#394, d_moy#395, d_dom#396, d_qoy#397, d_fy_year#398, d_fy_quarter_seq#399, d_fy_week_seq#400, d_day_name#401, d_quarter_name#402, d_holiday#403, d_weekend#404, d_following_holiday#405, d_first_dom#406, d_last_dom#407, d_same_day_ly#408, d_same_day_lq#409, d_current_day#410, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "34" : {
            "sign" : -971550717,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#149, ss_item_sk#150, ss_customer_sk#151, ss_cdemo_sk#152, ss_hdemo_sk#153, ss_addr_sk#154, ss_store_sk#155, ss_promo_sk#156, ss_ticket_number#157L, ss_quantity#158, ss_wholesale_cost#159, ss_list_price#160, ss_sales_price#161, ss_ext_discount_amt#162, ss_ext_sales_price#163, ss_ext_wholesale_cost#164, ss_ext_list_price#165, ss_ext_tax#166, ss_coupon_amt#167, ss_net_paid#168, ss_net_paid_inc_tax#169, ss_net_profit#170, ss_sold_date_sk#171], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "12" : {
            "sign" : -2034418965,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 792229779237000000000,
            "rowCount" : 39611488961850000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#131 = customer_sk#318) "
          },
          "8" : {
            "sign" : -1002564459,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3943785579808536320,
            "rowCount" : 197189278990426816,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_current_addr_sk#135 = ca_address_sk#172) "
          },
          "19" : {
            "sign" : 185170765,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29651732864,
            "rowCount" : 142556408,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_item_sk#27) AND isnotnull(cs_sold_date_sk#46)) AND isnotnull(cs_bill_customer_sk#15)) AND dynamicpruning#419 [cs_sold_date_sk#46]) "
          },
          "23" : {
            "sign" : -144809072,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#103, d_date_id#104, d_date#105, d_month_seq#106, d_week_seq#107, d_quarter_seq#108, d_year#109, d_dow#110, d_moy#111, d_dom#112, d_qoy#113, d_fy_year#114, d_fy_quarter_seq#115, d_fy_week_seq#116, d_day_name#117, d_quarter_name#118, d_holiday#119, d_weekend#120, d_following_holiday#121, d_first_dom#122, d_last_dom#123, d_same_day_ly#124, d_same_day_lq#125, d_current_day#126, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "4" : {
            "sign" : 1958021068,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 23812188,
            "rowCount" : 1984349,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_sk#131], [cast((MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#163)),17,2) / 50) as int) AS segment#326] "
          },
          "40" : {
            "sign" : -1495890998,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 18450,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#365) AND isnotnull(d_moy#367)) AND ((d_year#365 = 1999) AND (d_moy#367 = 3))) "
          },
          "15" : {
            "sign" : -1614413795,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 257426410800,
            "rowCount" : 16089150675,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_sk#318, item_sk#319] "
          },
          "11" : {
            "sign" : -680370333,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 633783823389600000000,
            "rowCount" : 39611488961850000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#131, c_current_addr_sk#135] "
          },
          "9" : {
            "sign" : 462205045,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6291456,
            "rowCount" : 123616,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#172], BroadcastQueryStage 5 "
          },
          "44" : {
            "sign" : 1450156779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 18450,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#393) AND isnotnull(d_moy#395)) AND ((d_year#393 = 1999) AND (d_moy#395 = 3))) "
          },
          "33" : {
            "sign" : -1660520969,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39925696056,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_customer_sk#151) AND isnotnull(ss_sold_date_sk#171)) AND dynamicpruning#420 [ss_sold_date_sk#171]) "
          },
          "22" : {
            "sign" : -275590035,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 18450,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#111) AND isnotnull(d_year#109)) AND ((d_moy#111 = 3) AND (d_year#109 = 1999))) AND isnotnull(d_date_sk#103)) "
          },
          "26" : {
            "sign" : -432544473,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#47, ws_ship_date_sk#48, ws_item_sk#49, ws_bill_customer_sk#50, ws_bill_cdemo_sk#51, ws_bill_hdemo_sk#52, ws_bill_addr_sk#53, ws_ship_customer_sk#54, ws_ship_cdemo_sk#55, ws_ship_hdemo_sk#56, ws_ship_addr_sk#57, ws_web_page_sk#58, ws_web_site_sk#59, ws_ship_mode_sk#60, ws_warehouse_sk#61, ws_promo_sk#62, ws_order_number#63L, ws_quantity#64, ws_wholesale_cost#65, ws_list_price#66, ws_sales_price#67, ws_ext_discount_amt#68, ws_ext_sales_price#69, ws_ext_wholesale_cost#70, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "37" : {
            "sign" : 573641338,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#328, d_date_id#329, d_date#330, d_month_seq#331, d_week_seq#332, d_quarter_seq#333, d_year#334, d_dow#335, d_moy#336, d_dom#337, d_qoy#338, d_fy_year#339, d_fy_quarter_seq#340, d_fy_week_seq#341, d_day_name#342, d_quarter_name#343, d_holiday#344, d_weekend#345, d_following_holiday#346, d_first_dom#347, d_last_dom#348, d_same_day_ly#349, d_same_day_lq#350, d_current_day#351, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "13" : {
            "sign" : -1891025296,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 237668933771100,
            "rowCount" : 19805744480925,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_sk#318] "
          },
          "46" : {
            "sign" : -1034105569,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 876588,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#328], BroadcastQueryStage 4 "
          },
          "24" : {
            "sign" : -1424925611,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1439312020,
            "rowCount" : 71965601,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_sold_date_sk#80 AS sold_date_sk#320, ws_bill_customer_sk#50 AS customer_sk#321, ws_item_sk#49 AS item_sk#322] "
          },
          "35" : {
            "sign" : -1811606857,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 876588,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#328] "
          },
          "16" : {
            "sign" : -2097477336,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 386139616200,
            "rowCount" : 16089150675,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (sold_date_sk#317 = d_date_sk#103) "
          },
          "5" : {
            "sign" : -741927052,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 5500879020,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#131, ss_ext_sales_price#163] "
          },
          "10" : {
            "sign" : -784953982,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 25522816333216,
            "rowCount" : 1595176020826,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_sk#131, c_current_addr_sk#135], [c_customer_sk#131, c_current_addr_sk#135] "
          },
          "21" : {
            "sign" : 128757161,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 900,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#103] "
          },
          "43" : {
            "sign" : 1316066587,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 900,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [(d_month_seq#390 + 3) AS (d_month_seq + 3)#357] "
          },
          "32" : {
            "sign" : -666427669,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6304057272,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#151, ss_ext_sales_price#163, ss_sold_date_sk#171] "
          },
          "6" : {
            "sign" : 730377690,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 6601054824,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#131 = ss_customer_sk#151) "
          },
          "36" : {
            "sign" : -956519042,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_month_seq#331) AND ((d_month_seq#331 >= scalar-subquery#324 []) AND (d_month_seq#331 <= scalar-subquery#325 []))) AND isnotnull(d_date_sk#328)) "
          },
          "1" : {
            "sign" : 1625565249,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 47624376,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "39" : {
            "sign" : -1362384554,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 900,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [(d_month_seq#362 + 1) AS (d_month_seq + 1)#356] "
          },
          "17" : {
            "sign" : 411670351,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 4290440180,
            "rowCount" : 214522009,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "25" : {
            "sign" : -47790245,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14968845008,
            "rowCount" : 71965601,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(ws_item_sk#49) AND isnotnull(ws_sold_date_sk#80)) AND isnotnull(ws_bill_customer_sk#50)) AND dynamicpruning#419 [ws_sold_date_sk#80]) "
          },
          "14" : {
            "sign" : -338987739,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 396114889618500,
            "rowCount" : 19805744480925,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (item_sk#319 = i_item_sk#81) "
          },
          "31" : {
            "sign" : -1075478028,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 7435136380,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#171 = d_date_sk#328) "
          },
          "42" : {
            "sign" : -1879834014,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 900,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(d_month_seq + 3)#357], [(d_month_seq + 3)#357] "
          },
          "0" : {
            "sign" : 2091545916,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 2400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -914147946,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#13, cs_ship_date_sk#14, cs_bill_customer_sk#15, cs_bill_cdemo_sk#16, cs_bill_hdemo_sk#17, cs_bill_addr_sk#18, cs_ship_customer_sk#19, cs_ship_cdemo_sk#20, cs_ship_hdemo_sk#21, cs_ship_addr_sk#22, cs_call_center_sk#23, cs_catalog_page_sk#24, cs_ship_mode_sk#25, cs_warehouse_sk#26, cs_item_sk#27, cs_promo_sk#28, cs_order_number#29L, cs_quantity#30, cs_wholesale_cost#31, cs_list_price#32, cs_sales_price#33, cs_ext_discount_amt#34, cs_ext_sales_price#35, cs_ext_wholesale_cost#36, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "27" : {
            "sign" : 1692007655,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 900,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#103], BroadcastQueryStage 1 "
          },
          "2" : {
            "sign" : -1482484078,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 47624376,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [segment#326 ASC NULLS FIRST, num_customers#315L ASC NULLS FIRST], true "
          },
          "38" : {
            "sign" : -500062595,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 900,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(d_month_seq + 1)#356], [(d_month_seq + 1)#356] "
          },
          "18" : {
            "sign" : 1288241140,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2851128160,
            "rowCount" : 142556408,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_sold_date_sk#46 AS sold_date_sk#317, cs_bill_customer_sk#15 AS customer_sk#318, cs_item_sk#27 AS item_sk#319] "
          },
          "30" : {
            "sign" : 1246212009,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 5310811700,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#151, ss_ext_sales_price#163] "
          },
          "7" : {
            "sign" : -1219892893,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2366271347885121792,
            "rowCount" : 197189278990426816,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#131] "
          },
          "29" : {
            "sign" : 1706886479,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 32000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#131, c_current_addr_sk#135], ShuffleQueryStage 3 "
          },
          "41" : {
            "sign" : -2094062293,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#359, d_date_id#360, d_date#361, d_month_seq#362, d_week_seq#363, d_quarter_seq#364, d_year#365, d_dow#366, d_moy#367, d_dom#368, d_qoy#369, d_fy_year#370, d_fy_quarter_seq#371, d_fy_week_seq#372, d_day_name#373, d_quarter_name#374, d_holiday#375, d_weekend#376, d_following_holiday#377, d_first_dom#378, d_last_dom#379, d_same_day_ly#380, d_same_day_lq#381, d_current_day#382, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : -333136139,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 47624376,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [segment#326], [segment#326, count(1) AS num_customers#315L, (segment#326 * 50) AS segment_base#316] "
          },
          "28" : {
            "sign" : -977041583,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1114112,
            "rowCount" : 1231,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#81], BroadcastQueryStage 2 "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalRelation",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "LogicalRelation",
          "toId" : 22,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Filter",
          "toId" : 21,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Project",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 19,
          "fromName" : "Filter",
          "toId" : 18,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Project",
          "toId" : 17,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "LogicalRelation",
          "toId" : 25,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Project",
          "toId" : 25,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 25,
          "fromName" : "Filter",
          "toId" : 24,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Project",
          "toId" : 17,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Union",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Join",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalQueryStage",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Join",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Join",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Aggregate",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "LogicalRelation",
          "toId" : 33,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "LogicalRelation",
          "toId" : 36,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 41,
          "fromName" : "LogicalRelation",
          "toId" : 40,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "Filter",
          "toId" : 39,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "Project",
          "toId" : 38,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "Aggregate",
          "toId" : 36,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 45,
          "fromName" : "LogicalRelation",
          "toId" : 44,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 44,
          "fromName" : "Filter",
          "toId" : 43,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 43,
          "fromName" : "Project",
          "toId" : 42,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 42,
          "fromName" : "Aggregate",
          "toId" : 36,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 36,
          "fromName" : "Filter",
          "toId" : 35,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "Project",
          "toId" : 33,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 33,
          "fromName" : "Filter",
          "toId" : 32,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "Project",
          "toId" : 31,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 46,
          "fromName" : "LogicalQueryStage",
          "toId" : 31,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Join",
          "toId" : 30,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Aggregate",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [segment#326 ASC NULLS FIRST, num_customers#315L ASC NULLS FIRST], true\n      +- Aggregate [segment#326], [segment#326, count(1) AS num_customers#315L, (segment#326 * 50) AS segment_base#316]\n         +- Aggregate [c_customer_sk#131], [cast((MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#163)),17,2) / 50) as int) AS segment#326]\n            +- Project [c_customer_sk#131, ss_ext_sales_price#163]\n               +- Join Inner, (c_customer_sk#131 = ss_customer_sk#151)\n                  :- Project [c_customer_sk#131]\n                  :  +- Join Inner, (c_current_addr_sk#135 = ca_address_sk#172)\n                  :     :- LogicalQueryStage Project [ca_address_sk#172], BroadcastQueryStage 5\n                  :     +- Aggregate [c_customer_sk#131, c_current_addr_sk#135], [c_customer_sk#131, c_current_addr_sk#135]\n                  :        +- Project [c_customer_sk#131, c_current_addr_sk#135]\n                  :           +- Join Inner, (c_customer_sk#131 = customer_sk#318)\n                  :              :- Project [customer_sk#318]\n                  :              :  +- Join Inner, (item_sk#319 = i_item_sk#81)\n                  :              :     :- Project [customer_sk#318, item_sk#319]\n                  :              :     :  +- Join Inner, (sold_date_sk#317 = d_date_sk#103)\n                  :              :     :     :- Union false, false\n                  :              :     :     :  :- Project [cs_sold_date_sk#46 AS sold_date_sk#317, cs_bill_customer_sk#15 AS customer_sk#318, cs_item_sk#27 AS item_sk#319]\n                  :              :     :     :  :  +- Filter (((isnotnull(cs_item_sk#27) AND isnotnull(cs_sold_date_sk#46)) AND isnotnull(cs_bill_customer_sk#15)) AND dynamicpruning#419 [cs_sold_date_sk#46])\n                  :              :     :     :  :     :  +- Project [d_date_sk#103]\n                  :              :     :     :  :     :     +- Filter (((isnotnull(d_moy#111) AND isnotnull(d_year#109)) AND ((d_moy#111 = 3) AND (d_year#109 = 1999))) AND isnotnull(d_date_sk#103))\n                  :              :     :     :  :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_date_id#104,d_date#105,d_month_seq#106,d_week_seq#107,d_quarter_seq#108,d_year#109,d_dow#110,d_moy#111,d_dom#112,d_qoy#113,d_fy_year#114,d_fy_quarter_seq#115,d_fy_week_seq#116,d_day_name#117,d_quarter_name#118,d_holiday#119,d_weekend#120,d_following_holiday#121,d_first_dom#122,d_last_dom#123,d_same_day_ly#124,d_same_day_lq#125,d_current_day#126,... 4 more fields] parquet\n                  :              :     :     :  :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#13,cs_ship_date_sk#14,cs_bill_customer_sk#15,cs_bill_cdemo_sk#16,cs_bill_hdemo_sk#17,cs_bill_addr_sk#18,cs_ship_customer_sk#19,cs_ship_cdemo_sk#20,cs_ship_hdemo_sk#21,cs_ship_addr_sk#22,cs_call_center_sk#23,cs_catalog_page_sk#24,cs_ship_mode_sk#25,cs_warehouse_sk#26,cs_item_sk#27,cs_promo_sk#28,cs_order_number#29L,cs_quantity#30,cs_wholesale_cost#31,cs_list_price#32,cs_sales_price#33,cs_ext_discount_amt#34,cs_ext_sales_price#35,cs_ext_wholesale_cost#36,... 10 more fields] parquet\n                  :              :     :     :  +- Project [ws_sold_date_sk#80 AS sold_date_sk#320, ws_bill_customer_sk#50 AS customer_sk#321, ws_item_sk#49 AS item_sk#322]\n                  :              :     :     :     +- Filter (((isnotnull(ws_item_sk#49) AND isnotnull(ws_sold_date_sk#80)) AND isnotnull(ws_bill_customer_sk#50)) AND dynamicpruning#419 [ws_sold_date_sk#80])\n                  :              :     :     :        :  +- Project [d_date_sk#103]\n                  :              :     :     :        :     +- Filter (((isnotnull(d_moy#111) AND isnotnull(d_year#109)) AND ((d_moy#111 = 3) AND (d_year#109 = 1999))) AND isnotnull(d_date_sk#103))\n                  :              :     :     :        :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_date_id#104,d_date#105,d_month_seq#106,d_week_seq#107,d_quarter_seq#108,d_year#109,d_dow#110,d_moy#111,d_dom#112,d_qoy#113,d_fy_year#114,d_fy_quarter_seq#115,d_fy_week_seq#116,d_day_name#117,d_quarter_name#118,d_holiday#119,d_weekend#120,d_following_holiday#121,d_first_dom#122,d_last_dom#123,d_same_day_ly#124,d_same_day_lq#125,d_current_day#126,... 4 more fields] parquet\n                  :              :     :     :        +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#47,ws_ship_date_sk#48,ws_item_sk#49,ws_bill_customer_sk#50,ws_bill_cdemo_sk#51,ws_bill_hdemo_sk#52,ws_bill_addr_sk#53,ws_ship_customer_sk#54,ws_ship_cdemo_sk#55,ws_ship_hdemo_sk#56,ws_ship_addr_sk#57,ws_web_page_sk#58,ws_web_site_sk#59,ws_ship_mode_sk#60,ws_warehouse_sk#61,ws_promo_sk#62,ws_order_number#63L,ws_quantity#64,ws_wholesale_cost#65,ws_list_price#66,ws_sales_price#67,ws_ext_discount_amt#68,ws_ext_sales_price#69,ws_ext_wholesale_cost#70,... 10 more fields] parquet\n                  :              :     :     +- LogicalQueryStage Project [d_date_sk#103], BroadcastQueryStage 1\n                  :              :     +- LogicalQueryStage Project [i_item_sk#81], BroadcastQueryStage 2\n                  :              +- LogicalQueryStage Project [c_customer_sk#131, c_current_addr_sk#135], ShuffleQueryStage 3\n                  +- Project [ss_customer_sk#151, ss_ext_sales_price#163]\n                     +- Join Inner, (ss_sold_date_sk#171 = d_date_sk#328)\n                        :- Project [ss_customer_sk#151, ss_ext_sales_price#163, ss_sold_date_sk#171]\n                        :  +- Filter ((isnotnull(ss_customer_sk#151) AND isnotnull(ss_sold_date_sk#171)) AND dynamicpruning#420 [ss_sold_date_sk#171])\n                        :     :  +- Project [d_date_sk#328]\n                        :     :     +- Filter ((isnotnull(d_month_seq#331) AND ((d_month_seq#331 >= scalar-subquery#324 []) AND (d_month_seq#331 <= scalar-subquery#325 []))) AND isnotnull(d_date_sk#328))\n                        :     :        :  :- Aggregate [(d_month_seq + 1)#356], [(d_month_seq + 1)#356]\n                        :     :        :  :  +- Project [(d_month_seq#362 + 1) AS (d_month_seq + 1)#356]\n                        :     :        :  :     +- Filter ((isnotnull(d_year#365) AND isnotnull(d_moy#367)) AND ((d_year#365 = 1999) AND (d_moy#367 = 3)))\n                        :     :        :  :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#359,d_date_id#360,d_date#361,d_month_seq#362,d_week_seq#363,d_quarter_seq#364,d_year#365,d_dow#366,d_moy#367,d_dom#368,d_qoy#369,d_fy_year#370,d_fy_quarter_seq#371,d_fy_week_seq#372,d_day_name#373,d_quarter_name#374,d_holiday#375,d_weekend#376,d_following_holiday#377,d_first_dom#378,d_last_dom#379,d_same_day_ly#380,d_same_day_lq#381,d_current_day#382,... 4 more fields] parquet\n                        :     :        :  +- Aggregate [(d_month_seq + 3)#357], [(d_month_seq + 3)#357]\n                        :     :        :     +- Project [(d_month_seq#390 + 3) AS (d_month_seq + 3)#357]\n                        :     :        :        +- Filter ((isnotnull(d_year#393) AND isnotnull(d_moy#395)) AND ((d_year#393 = 1999) AND (d_moy#395 = 3)))\n                        :     :        :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#387,d_date_id#388,d_date#389,d_month_seq#390,d_week_seq#391,d_quarter_seq#392,d_year#393,d_dow#394,d_moy#395,d_dom#396,d_qoy#397,d_fy_year#398,d_fy_quarter_seq#399,d_fy_week_seq#400,d_day_name#401,d_quarter_name#402,d_holiday#403,d_weekend#404,d_following_holiday#405,d_first_dom#406,d_last_dom#407,d_same_day_ly#408,d_same_day_lq#409,d_current_day#410,... 4 more fields] parquet\n                        :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#328,d_date_id#329,d_date#330,d_month_seq#331,d_week_seq#332,d_quarter_seq#333,d_year#334,d_dow#335,d_moy#336,d_dom#337,d_qoy#338,d_fy_year#339,d_fy_quarter_seq#340,d_fy_week_seq#341,d_day_name#342,d_quarter_name#343,d_holiday#344,d_weekend#345,d_following_holiday#346,d_first_dom#347,d_last_dom#348,d_same_day_ly#349,d_same_day_lq#350,d_current_day#351,... 4 more fields] parquet\n                        :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#149,ss_item_sk#150,ss_customer_sk#151,ss_cdemo_sk#152,ss_hdemo_sk#153,ss_addr_sk#154,ss_store_sk#155,ss_promo_sk#156,ss_ticket_number#157L,ss_quantity#158,ss_wholesale_cost#159,ss_list_price#160,ss_sales_price#161,ss_ext_discount_amt#162,ss_ext_sales_price#163,ss_ext_wholesale_cost#164,ss_ext_list_price#165,ss_ext_tax#166,ss_coupon_amt#167,ss_net_paid#168,ss_net_paid_inc_tax#169,ss_net_profit#170,ss_sold_date_sk#171] parquet\n                        +- LogicalQueryStage Project [d_date_sk#328], BroadcastQueryStage 4\n"
      },
      "IM" : {
        "inputSizeInBytes" : 86620558040,
        "inputRowCount" : 492499965
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 6,
        "FinishedTasksNum" : 12,
        "FinishedTasksTotalTimeInMs" : 18269.0,
        "FinishedTasksDistributionInMs" : [ 1082.0, 1085.0, 1213.0, 1738.0, 3298.0 ]
      },
      "StartTimeInMs" : 1702227099609,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 21198,
        "IOBytes" : {
          "Total" : 243309629,
          "Details" : {
            "IR" : 65844865,
            "IW" : 0,
            "SR" : 88732382,
            "SW" : 88732382
          }
        }
      }
    },
    "11" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -1356067838,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 483760000000,
            "rowCount" : 24188000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#131 = customer_sk#318) "
          },
          "8" : {
            "sign" : 25882326,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2434843803648000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_current_addr_sk#135 = ca_address_sk#172) "
          },
          "4" : {
            "sign" : 1146812264,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 135529865264689997414400000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_sk#131], [cast((MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#163)),17,2) / 50) as int) AS segment#326] "
          },
          "15" : {
            "sign" : 1922548774,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 185542176,
            "rowCount" : 7730924,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#151, ss_ext_sales_price#163], ShuffleQueryStage 7 "
          },
          "11" : {
            "sign" : -2098139676,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 387008000000,
            "rowCount" : 24188000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#131, c_current_addr_sk#135] "
          },
          "9" : {
            "sign" : 462205045,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6291456,
            "rowCount" : 123616,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#172], BroadcastQueryStage 5 "
          },
          "13" : {
            "sign" : -5261087,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1572864,
            "rowCount" : 12094,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Project [customer_sk#318], ShuffleQueryStage 6, BroadcastQueryStage 8 "
          },
          "5" : {
            "sign" : 54131260,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 225883108774483329024000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#131, ss_ext_sales_price#163] "
          },
          "10" : {
            "sign" : -1159136231,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 387008000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_sk#131, c_current_addr_sk#135], [c_customer_sk#131, c_current_addr_sk#135] "
          },
          "6" : {
            "sign" : 2028432374,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 271059730529379994828800000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#131 = ss_customer_sk#151) "
          },
          "1" : {
            "sign" : -2133083319,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 271059730529379994828800000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "14" : {
            "sign" : 1706886479,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 48000000,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#131, c_current_addr_sk#135], ShuffleQueryStage 3 "
          },
          "0" : {
            "sign" : 632557016,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 2400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -474354770,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 271059730529379994828800000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [segment#326 ASC NULLS FIRST, num_customers#315L ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 1460224250,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1460906282188800000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#131] "
          },
          "3" : {
            "sign" : -1353061379,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 271059730529379994828800000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [segment#326], [segment#326, count(1) AS num_customers#315L, (segment#326 * 50) AS segment_base#316] "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Join",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Aggregate",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Aggregate",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [segment#326 ASC NULLS FIRST, num_customers#315L ASC NULLS FIRST], true\n      +- Aggregate [segment#326], [segment#326, count(1) AS num_customers#315L, (segment#326 * 50) AS segment_base#316]\n         +- Aggregate [c_customer_sk#131], [cast((MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#163)),17,2) / 50) as int) AS segment#326]\n            +- Project [c_customer_sk#131, ss_ext_sales_price#163]\n               +- Join Inner, (c_customer_sk#131 = ss_customer_sk#151)\n                  :- Project [c_customer_sk#131]\n                  :  +- Join Inner, (c_current_addr_sk#135 = ca_address_sk#172)\n                  :     :- LogicalQueryStage Project [ca_address_sk#172], BroadcastQueryStage 5\n                  :     +- Aggregate [c_customer_sk#131, c_current_addr_sk#135], [c_customer_sk#131, c_current_addr_sk#135]\n                  :        +- Project [c_customer_sk#131, c_current_addr_sk#135]\n                  :           +- Join Inner, (c_customer_sk#131 = customer_sk#318)\n                  :              :- LogicalQueryStage LogicalQueryStage Project [customer_sk#318], ShuffleQueryStage 6, BroadcastQueryStage 8\n                  :              +- LogicalQueryStage Project [c_customer_sk#131, c_current_addr_sk#135], ShuffleQueryStage 3\n                  +- LogicalQueryStage Project [ss_customer_sk#151, ss_ext_sales_price#163], ShuffleQueryStage 7\n"
      },
      "IM" : {
        "inputSizeInBytes" : 241406496,
        "inputRowCount" : 9866634
      },
      "PD" : {
        "4" : [ 355234, 352487, 351656, 355874, 357689, 368266, 344148, 359038, 368045, 353689, 361274, 347020, 371909, 356597, 370265, 348613, 355291, 368248, 354867, 343622, 366432, 353274, 366122, 362147, 361969, 348809, 349917, 345903, 362790, 373468, 358944, 344155, 364029, 350409, 366974, 368807, 340139, 341572, 364344, 342853, 359368, 358835, 346571, 369696, 354377, 361306, 362368, 358571, 364791, 350808, 373290, 352784, 357926, 348392, 361885, 362995, 350582, 347785, 349876, 359927, 339897, 361969, 354395, 358129, 358015, 369247, 355070, 356374, 350046, 362147, 376570, 366833, 346393, 359528, 364029, 367027, 356503, 356945, 357290, 345969, 350409, 359792, 366470, 348344, 351877, 355715, 349440, 348950, 357224, 363747, 345479, 354598, 363100, 361037, 355487, 374350, 359952, 355291, 363859, 351011, 354229, 365290, 359934, 339352, 360333, 358393, 358944, 362587, 345198, 351232, 353953, 357069, 357290, 356298, 370172, 353053, 341572, 357511, 347216, 346030, 355658, 363587, 356394, 356670, 354849, 369028, 364189, 345584, 359510, 366188, 355273, 356597, 364791, 366366, 359368, 345969, 372171, 354504, 359485, 354299, 340467, 338944, 352487, 359706, 361385, 368045, 364807, 351585, 364367, 355248, 354849, 352284, 356615, 352487, 351382, 363968, 361926, 354316, 361809, 346172, 345479, 352629, 369468, 352360, 359038, 355273, 356501, 359589, 356927, 357265, 349937, 365477, 378619, 357290, 361926, 351936, 360939, 362790, 361606, 359589, 357493, 360358, 346368, 351893, 369028, 351733, 363197, 363968, 357486, 352469, 348613, 369028, 338927, 345661, 351451, 352487, 360850, 357351, 363435, 346571 ],
        "0" : [ 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 112177, 101979, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 112177, 101979, 112177, 112177, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 112177, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 112177, 101979 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227116368,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 4439,
        "IOBytes" : {
          "Total" : 88387051,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 88386283,
            "SW" : 768
          }
        }
      }
    },
    "9" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 518878046,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 131287469508000000000,
            "rowCount" : 6564373475400000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#131 = customer_sk#318) "
          },
          "8" : {
            "sign" : -2011357762,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 660791470208738918400000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_current_addr_sk#135 = ca_address_sk#172) "
          },
          "4" : {
            "sign" : -1472869376,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 36781406179430577940746731520000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_sk#131], [cast((MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#163)),17,2) / 50) as int) AS segment#326] "
          },
          "15" : {
            "sign" : 1922548774,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 185542176,
            "rowCount" : 7730924,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#151, ss_ext_sales_price#163], ShuffleQueryStage 7 "
          },
          "11" : {
            "sign" : -1294298512,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 105029975606400000000,
            "rowCount" : 6564373475400000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#131, c_current_addr_sk#135] "
          },
          "9" : {
            "sign" : 462205045,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6291456,
            "rowCount" : 123616,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#172], BroadcastQueryStage 5 "
          },
          "13" : {
            "sign" : -1278555431,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 39386240852400,
            "rowCount" : 3282186737700,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [customer_sk#318], ShuffleQueryStage 6 "
          },
          "5" : {
            "sign" : 478006776,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 61302343632384296567911219200000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#131, ss_ext_sales_price#163] "
          },
          "10" : {
            "sign" : -1681627929,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 105029975606400000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_sk#131, c_current_addr_sk#135], [c_customer_sk#131, c_current_addr_sk#135] "
          },
          "6" : {
            "sign" : 1641370674,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 73562812358861155881493463040000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#131 = ss_customer_sk#151) "
          },
          "1" : {
            "sign" : 837745483,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 73562812358861155881493463040000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "14" : {
            "sign" : 1706886479,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 48000000,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#131, c_current_addr_sk#135], ShuffleQueryStage 3 "
          },
          "0" : {
            "sign" : 1495793296,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 2400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 916827258,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 73562812358861155881493463040000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [segment#326 ASC NULLS FIRST, num_customers#315L ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 1896762982,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 396474882125243351040000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#131] "
          },
          "3" : {
            "sign" : -181709417,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 73562812358861155881493463040000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [segment#326], [segment#326, count(1) AS num_customers#315L, (segment#326 * 50) AS segment_base#316] "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Join",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Aggregate",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Aggregate",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [segment#326 ASC NULLS FIRST, num_customers#315L ASC NULLS FIRST], true\n      +- Aggregate [segment#326], [segment#326, count(1) AS num_customers#315L, (segment#326 * 50) AS segment_base#316]\n         +- Aggregate [c_customer_sk#131], [cast((MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#163)),17,2) / 50) as int) AS segment#326]\n            +- Project [c_customer_sk#131, ss_ext_sales_price#163]\n               +- Join Inner, (c_customer_sk#131 = ss_customer_sk#151)\n                  :- Project [c_customer_sk#131]\n                  :  +- Join Inner, (c_current_addr_sk#135 = ca_address_sk#172)\n                  :     :- LogicalQueryStage Project [ca_address_sk#172], BroadcastQueryStage 5\n                  :     +- Aggregate [c_customer_sk#131, c_current_addr_sk#135], [c_customer_sk#131, c_current_addr_sk#135]\n                  :        +- Project [c_customer_sk#131, c_current_addr_sk#135]\n                  :           +- Join Inner, (c_customer_sk#131 = customer_sk#318)\n                  :              :- LogicalQueryStage Project [customer_sk#318], ShuffleQueryStage 6\n                  :              +- LogicalQueryStage Project [c_customer_sk#131, c_current_addr_sk#135], ShuffleQueryStage 3\n                  +- LogicalQueryStage Project [ss_customer_sk#151, ss_ext_sales_price#163], ShuffleQueryStage 7\n"
      },
      "IM" : {
        "inputSizeInBytes" : 39386480686032,
        "inputRowCount" : 3282196592240
      },
      "PD" : {
        "4" : [ 355234, 352487, 351656, 355874, 357689, 368266, 344148, 359038, 368045, 353689, 361274, 347020, 371909, 356597, 370265, 348613, 355291, 368248, 354867, 343622, 366432, 353274, 366122, 362147, 361969, 348809, 349917, 345903, 362790, 373468, 358944, 344155, 364029, 350409, 366974, 368807, 340139, 341572, 364344, 342853, 359368, 358835, 346571, 369696, 354377, 361306, 362368, 358571, 364791, 350808, 373290, 352784, 357926, 348392, 361885, 362995, 350582, 347785, 349876, 359927, 339897, 361969, 354395, 358129, 358015, 369247, 355070, 356374, 350046, 362147, 376570, 366833, 346393, 359528, 364029, 367027, 356503, 356945, 357290, 345969, 350409, 359792, 366470, 348344, 351877, 355715, 349440, 348950, 357224, 363747, 345479, 354598, 363100, 361037, 355487, 374350, 359952, 355291, 363859, 351011, 354229, 365290, 359934, 339352, 360333, 358393, 358944, 362587, 345198, 351232, 353953, 357069, 357290, 356298, 370172, 353053, 341572, 357511, 347216, 346030, 355658, 363587, 356394, 356670, 354849, 369028, 364189, 345584, 359510, 366188, 355273, 356597, 364791, 366366, 359368, 345969, 372171, 354504, 359485, 354299, 340467, 338944, 352487, 359706, 361385, 368045, 364807, 351585, 364367, 355248, 354849, 352284, 356615, 352487, 351382, 363968, 361926, 354316, 361809, 346172, 345479, 352629, 369468, 352360, 359038, 355273, 356501, 359589, 356927, 357265, 349937, 365477, 378619, 357290, 361926, 351936, 360939, 362790, 361606, 359589, 357493, 360358, 346368, 351893, 369028, 351733, 363197, 363968, 357486, 352469, 348613, 369028, 338927, 345661, 351451, 352487, 360850, 357351, 363435, 346571 ],
        "0" : [ 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 112177, 101979, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 112177, 101979, 112177, 112177, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 112177, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 112177, 101979 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 5,
        "FinishedTasksNum" : 25,
        "FinishedTasksTotalTimeInMs" : 108700.0,
        "FinishedTasksDistributionInMs" : [ 69.0, 95.0, 137.0, 8919.0, 14103.0 ]
      },
      "StartTimeInMs" : 1702227115399,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 5408,
        "IOBytes" : {
          "Total" : 100171425,
          "Details" : {
            "IR" : 11092294,
            "IW" : 0,
            "SR" : 88732323,
            "SW" : 346808
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "45" : {
            "sign" : -541859252,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#387, d_date_id#388, d_date#389, d_month_seq#390, d_week_seq#391, d_quarter_seq#392, d_year#393, d_dow#394, d_moy#395, d_dom#396, d_qoy#397, d_fy_year#398, d_fy_quarter_seq#399, d_fy_week_seq#400, d_day_name#401, d_quarter_name#402, d_holiday#403, d_weekend#404, d_following_holiday#405, d_first_dom#406, d_last_dom#407, d_same_day_ly#408, d_same_day_lq#409, d_current_day#410, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "34" : {
            "sign" : -971550717,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#149, ss_item_sk#150, ss_customer_sk#151, ss_cdemo_sk#152, ss_hdemo_sk#153, ss_addr_sk#154, ss_store_sk#155, ss_promo_sk#156, ss_ticket_number#157L, ss_quantity#158, ss_wholesale_cost#159, ss_list_price#160, ss_sales_price#161, ss_ext_discount_amt#162, ss_ext_sales_price#163, ss_ext_wholesale_cost#164, ss_ext_list_price#165, ss_ext_tax#166, ss_coupon_amt#167, ss_net_paid#168, ss_net_paid_inc_tax#169, ss_net_profit#170, ss_sold_date_sk#171], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "12" : {
            "sign" : -2034418965,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 327454975417960000000,
            "rowCount" : 16372748770898000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#131 = customer_sk#318) "
          },
          "8" : {
            "sign" : -1002564459,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3943785579808536320,
            "rowCount" : 197189278990426816,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_current_addr_sk#135 = ca_address_sk#172) "
          },
          "19" : {
            "sign" : 185170765,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29651732864,
            "rowCount" : 142556408,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_item_sk#27) AND isnotnull(cs_sold_date_sk#46)) AND isnotnull(cs_bill_customer_sk#15)) AND dynamicpruning#419 [cs_sold_date_sk#46]) "
          },
          "23" : {
            "sign" : -144809072,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#103, d_date_id#104, d_date#105, d_month_seq#106, d_week_seq#107, d_quarter_seq#108, d_year#109, d_dow#110, d_moy#111, d_dom#112, d_qoy#113, d_fy_year#114, d_fy_quarter_seq#115, d_fy_week_seq#116, d_day_name#117, d_quarter_name#118, d_holiday#119, d_weekend#120, d_following_holiday#121, d_first_dom#122, d_last_dom#123, d_same_day_ly#124, d_same_day_lq#125, d_current_day#126, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "4" : {
            "sign" : 1958021068,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 23812188,
            "rowCount" : 1984349,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_sk#131], [cast((MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#163)),17,2) / 50) as int) AS segment#326] "
          },
          "40" : {
            "sign" : -1495890998,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 18450,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#365) AND isnotnull(d_moy#367)) AND ((d_year#365 = 1999) AND (d_moy#367 = 3))) "
          },
          "15" : {
            "sign" : -1614413795,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 106402916464,
            "rowCount" : 6650182279,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_sk#318, item_sk#319] "
          },
          "11" : {
            "sign" : -680370333,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 261963980334368000000,
            "rowCount" : 16372748770898000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#131, c_current_addr_sk#135] "
          },
          "9" : {
            "sign" : 462205045,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6291456,
            "rowCount" : 123616,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#172], BroadcastQueryStage 5 "
          },
          "44" : {
            "sign" : 1450156779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 18450,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#393) AND isnotnull(d_moy#395)) AND ((d_year#393 = 1999) AND (d_moy#395 = 3))) "
          },
          "33" : {
            "sign" : -1660520969,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39925696056,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_customer_sk#151) AND isnotnull(ss_sold_date_sk#171)) AND dynamicpruning#420 [ss_sold_date_sk#171]) "
          },
          "22" : {
            "sign" : -275590035,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 18450,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#111) AND isnotnull(d_year#109)) AND ((d_moy#111 = 3) AND (d_year#109 = 1999))) AND isnotnull(d_date_sk#103)) "
          },
          "26" : {
            "sign" : -432544473,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#47, ws_ship_date_sk#48, ws_item_sk#49, ws_bill_customer_sk#50, ws_bill_cdemo_sk#51, ws_bill_hdemo_sk#52, ws_bill_addr_sk#53, ws_ship_customer_sk#54, ws_ship_cdemo_sk#55, ws_ship_hdemo_sk#56, ws_ship_addr_sk#57, ws_web_page_sk#58, ws_web_site_sk#59, ws_ship_mode_sk#60, ws_warehouse_sk#61, ws_promo_sk#62, ws_order_number#63L, ws_quantity#64, ws_wholesale_cost#65, ws_list_price#66, ws_sales_price#67, ws_ext_discount_amt#68, ws_ext_sales_price#69, ws_ext_wholesale_cost#70, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "37" : {
            "sign" : 573641338,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#328, d_date_id#329, d_date#330, d_month_seq#331, d_week_seq#332, d_quarter_seq#333, d_year#334, d_dow#335, d_moy#336, d_dom#337, d_qoy#338, d_fy_year#339, d_fy_quarter_seq#340, d_fy_week_seq#341, d_day_name#342, d_quarter_name#343, d_holiday#344, d_weekend#345, d_following_holiday#346, d_first_dom#347, d_last_dom#348, d_same_day_ly#349, d_same_day_lq#350, d_current_day#351, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "13" : {
            "sign" : -1891025296,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 98236492625388,
            "rowCount" : 8186374385449,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_sk#318] "
          },
          "46" : {
            "sign" : -1034105569,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 876588,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#328], BroadcastQueryStage 4 "
          },
          "24" : {
            "sign" : -1424925611,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1439312020,
            "rowCount" : 71965601,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_sold_date_sk#80 AS sold_date_sk#320, ws_bill_customer_sk#50 AS customer_sk#321, ws_item_sk#49 AS item_sk#322] "
          },
          "35" : {
            "sign" : -1811606857,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 876588,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#328] "
          },
          "16" : {
            "sign" : -2097477336,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 159604374696,
            "rowCount" : 6650182279,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (sold_date_sk#317 = d_date_sk#103) "
          },
          "5" : {
            "sign" : -741927052,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 5500879020,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#131, ss_ext_sales_price#163] "
          },
          "10" : {
            "sign" : -784953982,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 25522816333216,
            "rowCount" : 1595176020826,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_sk#131, c_current_addr_sk#135], [c_customer_sk#131, c_current_addr_sk#135] "
          },
          "21" : {
            "sign" : 128757161,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 900,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#103] "
          },
          "43" : {
            "sign" : 1316066587,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 900,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [(d_month_seq#390 + 3) AS (d_month_seq + 3)#357] "
          },
          "32" : {
            "sign" : -666427669,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6304057272,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#151, ss_ext_sales_price#163, ss_sold_date_sk#171] "
          },
          "6" : {
            "sign" : 730377690,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 6601054824,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#131 = ss_customer_sk#151) "
          },
          "36" : {
            "sign" : -956519042,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_month_seq#331) AND ((d_month_seq#331 >= scalar-subquery#324 []) AND (d_month_seq#331 <= scalar-subquery#325 []))) AND isnotnull(d_date_sk#328)) "
          },
          "1" : {
            "sign" : 1625565249,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 47624376,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "39" : {
            "sign" : -1362384554,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 900,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [(d_month_seq#362 + 1) AS (d_month_seq + 1)#356] "
          },
          "17" : {
            "sign" : 411670351,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 4290440180,
            "rowCount" : 214522009,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "25" : {
            "sign" : -47790245,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14968845008,
            "rowCount" : 71965601,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(ws_item_sk#49) AND isnotnull(ws_sold_date_sk#80)) AND isnotnull(ws_bill_customer_sk#50)) AND dynamicpruning#419 [ws_sold_date_sk#80]) "
          },
          "14" : {
            "sign" : -338987739,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 163727487708980,
            "rowCount" : 8186374385449,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (item_sk#319 = i_item_sk#81) "
          },
          "31" : {
            "sign" : -1075478028,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 7435136380,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#171 = d_date_sk#328) "
          },
          "42" : {
            "sign" : -1879834014,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 900,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(d_month_seq + 3)#357], [(d_month_seq + 3)#357] "
          },
          "0" : {
            "sign" : 2091545916,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 2400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -914147946,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#13, cs_ship_date_sk#14, cs_bill_customer_sk#15, cs_bill_cdemo_sk#16, cs_bill_hdemo_sk#17, cs_bill_addr_sk#18, cs_ship_customer_sk#19, cs_ship_cdemo_sk#20, cs_ship_hdemo_sk#21, cs_ship_addr_sk#22, cs_call_center_sk#23, cs_catalog_page_sk#24, cs_ship_mode_sk#25, cs_warehouse_sk#26, cs_item_sk#27, cs_promo_sk#28, cs_order_number#29L, cs_quantity#30, cs_wholesale_cost#31, cs_list_price#32, cs_sales_price#33, cs_ext_discount_amt#34, cs_ext_sales_price#35, cs_ext_wholesale_cost#36, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "27" : {
            "sign" : 1692007655,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#103], BroadcastQueryStage 1 "
          },
          "2" : {
            "sign" : -1482484078,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 47624376,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [segment#326 ASC NULLS FIRST, num_customers#315L ASC NULLS FIRST], true "
          },
          "38" : {
            "sign" : -500062595,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 900,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(d_month_seq + 1)#356], [(d_month_seq + 1)#356] "
          },
          "18" : {
            "sign" : 1288241140,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2851128160,
            "rowCount" : 142556408,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_sold_date_sk#46 AS sold_date_sk#317, cs_bill_customer_sk#15 AS customer_sk#318, cs_item_sk#27 AS item_sk#319] "
          },
          "30" : {
            "sign" : 1246212009,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 5310811700,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#151, ss_ext_sales_price#163] "
          },
          "7" : {
            "sign" : -1219892893,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2366271347885121792,
            "rowCount" : 197189278990426816,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#131] "
          },
          "29" : {
            "sign" : 1706886479,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 32000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#131, c_current_addr_sk#135], ShuffleQueryStage 3 "
          },
          "41" : {
            "sign" : -2094062293,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#359, d_date_id#360, d_date#361, d_month_seq#362, d_week_seq#363, d_quarter_seq#364, d_year#365, d_dow#366, d_moy#367, d_dom#368, d_qoy#369, d_fy_year#370, d_fy_quarter_seq#371, d_fy_week_seq#372, d_day_name#373, d_quarter_name#374, d_holiday#375, d_weekend#376, d_following_holiday#377, d_first_dom#378, d_last_dom#379, d_same_day_ly#380, d_same_day_lq#381, d_current_day#382, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : -333136139,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 47624376,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [segment#326], [segment#326, count(1) AS num_customers#315L, (segment#326 * 50) AS segment_base#316] "
          },
          "28" : {
            "sign" : -977041583,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1114112,
            "rowCount" : 1231,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#81], BroadcastQueryStage 2 "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalRelation",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "LogicalRelation",
          "toId" : 22,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Filter",
          "toId" : 21,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Project",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 19,
          "fromName" : "Filter",
          "toId" : 18,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Project",
          "toId" : 17,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "LogicalRelation",
          "toId" : 25,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Project",
          "toId" : 25,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 25,
          "fromName" : "Filter",
          "toId" : 24,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Project",
          "toId" : 17,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Union",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Join",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalQueryStage",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Join",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Join",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Aggregate",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "LogicalRelation",
          "toId" : 33,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "LogicalRelation",
          "toId" : 36,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 41,
          "fromName" : "LogicalRelation",
          "toId" : 40,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "Filter",
          "toId" : 39,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "Project",
          "toId" : 38,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "Aggregate",
          "toId" : 36,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 45,
          "fromName" : "LogicalRelation",
          "toId" : 44,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 44,
          "fromName" : "Filter",
          "toId" : 43,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 43,
          "fromName" : "Project",
          "toId" : 42,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 42,
          "fromName" : "Aggregate",
          "toId" : 36,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 36,
          "fromName" : "Filter",
          "toId" : 35,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "Project",
          "toId" : 33,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 33,
          "fromName" : "Filter",
          "toId" : 32,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "Project",
          "toId" : 31,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 46,
          "fromName" : "LogicalQueryStage",
          "toId" : 31,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Join",
          "toId" : 30,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Aggregate",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [segment#326 ASC NULLS FIRST, num_customers#315L ASC NULLS FIRST], true\n      +- Aggregate [segment#326], [segment#326, count(1) AS num_customers#315L, (segment#326 * 50) AS segment_base#316]\n         +- Aggregate [c_customer_sk#131], [cast((MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#163)),17,2) / 50) as int) AS segment#326]\n            +- Project [c_customer_sk#131, ss_ext_sales_price#163]\n               +- Join Inner, (c_customer_sk#131 = ss_customer_sk#151)\n                  :- Project [c_customer_sk#131]\n                  :  +- Join Inner, (c_current_addr_sk#135 = ca_address_sk#172)\n                  :     :- LogicalQueryStage Project [ca_address_sk#172], BroadcastQueryStage 5\n                  :     +- Aggregate [c_customer_sk#131, c_current_addr_sk#135], [c_customer_sk#131, c_current_addr_sk#135]\n                  :        +- Project [c_customer_sk#131, c_current_addr_sk#135]\n                  :           +- Join Inner, (c_customer_sk#131 = customer_sk#318)\n                  :              :- Project [customer_sk#318]\n                  :              :  +- Join Inner, (item_sk#319 = i_item_sk#81)\n                  :              :     :- Project [customer_sk#318, item_sk#319]\n                  :              :     :  +- Join Inner, (sold_date_sk#317 = d_date_sk#103)\n                  :              :     :     :- Union false, false\n                  :              :     :     :  :- Project [cs_sold_date_sk#46 AS sold_date_sk#317, cs_bill_customer_sk#15 AS customer_sk#318, cs_item_sk#27 AS item_sk#319]\n                  :              :     :     :  :  +- Filter (((isnotnull(cs_item_sk#27) AND isnotnull(cs_sold_date_sk#46)) AND isnotnull(cs_bill_customer_sk#15)) AND dynamicpruning#419 [cs_sold_date_sk#46])\n                  :              :     :     :  :     :  +- Project [d_date_sk#103]\n                  :              :     :     :  :     :     +- Filter (((isnotnull(d_moy#111) AND isnotnull(d_year#109)) AND ((d_moy#111 = 3) AND (d_year#109 = 1999))) AND isnotnull(d_date_sk#103))\n                  :              :     :     :  :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_date_id#104,d_date#105,d_month_seq#106,d_week_seq#107,d_quarter_seq#108,d_year#109,d_dow#110,d_moy#111,d_dom#112,d_qoy#113,d_fy_year#114,d_fy_quarter_seq#115,d_fy_week_seq#116,d_day_name#117,d_quarter_name#118,d_holiday#119,d_weekend#120,d_following_holiday#121,d_first_dom#122,d_last_dom#123,d_same_day_ly#124,d_same_day_lq#125,d_current_day#126,... 4 more fields] parquet\n                  :              :     :     :  :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#13,cs_ship_date_sk#14,cs_bill_customer_sk#15,cs_bill_cdemo_sk#16,cs_bill_hdemo_sk#17,cs_bill_addr_sk#18,cs_ship_customer_sk#19,cs_ship_cdemo_sk#20,cs_ship_hdemo_sk#21,cs_ship_addr_sk#22,cs_call_center_sk#23,cs_catalog_page_sk#24,cs_ship_mode_sk#25,cs_warehouse_sk#26,cs_item_sk#27,cs_promo_sk#28,cs_order_number#29L,cs_quantity#30,cs_wholesale_cost#31,cs_list_price#32,cs_sales_price#33,cs_ext_discount_amt#34,cs_ext_sales_price#35,cs_ext_wholesale_cost#36,... 10 more fields] parquet\n                  :              :     :     :  +- Project [ws_sold_date_sk#80 AS sold_date_sk#320, ws_bill_customer_sk#50 AS customer_sk#321, ws_item_sk#49 AS item_sk#322]\n                  :              :     :     :     +- Filter (((isnotnull(ws_item_sk#49) AND isnotnull(ws_sold_date_sk#80)) AND isnotnull(ws_bill_customer_sk#50)) AND dynamicpruning#419 [ws_sold_date_sk#80])\n                  :              :     :     :        :  +- Project [d_date_sk#103]\n                  :              :     :     :        :     +- Filter (((isnotnull(d_moy#111) AND isnotnull(d_year#109)) AND ((d_moy#111 = 3) AND (d_year#109 = 1999))) AND isnotnull(d_date_sk#103))\n                  :              :     :     :        :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_date_id#104,d_date#105,d_month_seq#106,d_week_seq#107,d_quarter_seq#108,d_year#109,d_dow#110,d_moy#111,d_dom#112,d_qoy#113,d_fy_year#114,d_fy_quarter_seq#115,d_fy_week_seq#116,d_day_name#117,d_quarter_name#118,d_holiday#119,d_weekend#120,d_following_holiday#121,d_first_dom#122,d_last_dom#123,d_same_day_ly#124,d_same_day_lq#125,d_current_day#126,... 4 more fields] parquet\n                  :              :     :     :        +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#47,ws_ship_date_sk#48,ws_item_sk#49,ws_bill_customer_sk#50,ws_bill_cdemo_sk#51,ws_bill_hdemo_sk#52,ws_bill_addr_sk#53,ws_ship_customer_sk#54,ws_ship_cdemo_sk#55,ws_ship_hdemo_sk#56,ws_ship_addr_sk#57,ws_web_page_sk#58,ws_web_site_sk#59,ws_ship_mode_sk#60,ws_warehouse_sk#61,ws_promo_sk#62,ws_order_number#63L,ws_quantity#64,ws_wholesale_cost#65,ws_list_price#66,ws_sales_price#67,ws_ext_discount_amt#68,ws_ext_sales_price#69,ws_ext_wholesale_cost#70,... 10 more fields] parquet\n                  :              :     :     +- LogicalQueryStage Project [d_date_sk#103], BroadcastQueryStage 1\n                  :              :     +- LogicalQueryStage Project [i_item_sk#81], BroadcastQueryStage 2\n                  :              +- LogicalQueryStage Project [c_customer_sk#131, c_current_addr_sk#135], ShuffleQueryStage 3\n                  +- Project [ss_customer_sk#151, ss_ext_sales_price#163]\n                     +- Join Inner, (ss_sold_date_sk#171 = d_date_sk#328)\n                        :- Project [ss_customer_sk#151, ss_ext_sales_price#163, ss_sold_date_sk#171]\n                        :  +- Filter ((isnotnull(ss_customer_sk#151) AND isnotnull(ss_sold_date_sk#171)) AND dynamicpruning#420 [ss_sold_date_sk#171])\n                        :     :  +- Project [d_date_sk#328]\n                        :     :     +- Filter ((isnotnull(d_month_seq#331) AND ((d_month_seq#331 >= scalar-subquery#324 []) AND (d_month_seq#331 <= scalar-subquery#325 []))) AND isnotnull(d_date_sk#328))\n                        :     :        :  :- Aggregate [(d_month_seq + 1)#356], [(d_month_seq + 1)#356]\n                        :     :        :  :  +- Project [(d_month_seq#362 + 1) AS (d_month_seq + 1)#356]\n                        :     :        :  :     +- Filter ((isnotnull(d_year#365) AND isnotnull(d_moy#367)) AND ((d_year#365 = 1999) AND (d_moy#367 = 3)))\n                        :     :        :  :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#359,d_date_id#360,d_date#361,d_month_seq#362,d_week_seq#363,d_quarter_seq#364,d_year#365,d_dow#366,d_moy#367,d_dom#368,d_qoy#369,d_fy_year#370,d_fy_quarter_seq#371,d_fy_week_seq#372,d_day_name#373,d_quarter_name#374,d_holiday#375,d_weekend#376,d_following_holiday#377,d_first_dom#378,d_last_dom#379,d_same_day_ly#380,d_same_day_lq#381,d_current_day#382,... 4 more fields] parquet\n                        :     :        :  +- Aggregate [(d_month_seq + 3)#357], [(d_month_seq + 3)#357]\n                        :     :        :     +- Project [(d_month_seq#390 + 3) AS (d_month_seq + 3)#357]\n                        :     :        :        +- Filter ((isnotnull(d_year#393) AND isnotnull(d_moy#395)) AND ((d_year#393 = 1999) AND (d_moy#395 = 3)))\n                        :     :        :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#387,d_date_id#388,d_date#389,d_month_seq#390,d_week_seq#391,d_quarter_seq#392,d_year#393,d_dow#394,d_moy#395,d_dom#396,d_qoy#397,d_fy_year#398,d_fy_quarter_seq#399,d_fy_week_seq#400,d_day_name#401,d_quarter_name#402,d_holiday#403,d_weekend#404,d_following_holiday#405,d_first_dom#406,d_last_dom#407,d_same_day_ly#408,d_same_day_lq#409,d_current_day#410,... 4 more fields] parquet\n                        :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#328,d_date_id#329,d_date#330,d_month_seq#331,d_week_seq#332,d_quarter_seq#333,d_year#334,d_dow#335,d_moy#336,d_dom#337,d_qoy#338,d_fy_year#339,d_fy_quarter_seq#340,d_fy_week_seq#341,d_day_name#342,d_quarter_name#343,d_holiday#344,d_weekend#345,d_following_holiday#346,d_first_dom#347,d_last_dom#348,d_same_day_ly#349,d_same_day_lq#350,d_current_day#351,... 4 more fields] parquet\n                        :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#149,ss_item_sk#150,ss_customer_sk#151,ss_cdemo_sk#152,ss_hdemo_sk#153,ss_addr_sk#154,ss_store_sk#155,ss_promo_sk#156,ss_ticket_number#157L,ss_quantity#158,ss_wholesale_cost#159,ss_list_price#160,ss_sales_price#161,ss_ext_discount_amt#162,ss_ext_sales_price#163,ss_ext_wholesale_cost#164,ss_ext_list_price#165,ss_ext_tax#166,ss_coupon_amt#167,ss_net_paid#168,ss_net_paid_inc_tax#169,ss_net_profit#170,ss_sold_date_sk#171] parquet\n                        +- LogicalQueryStage Project [d_date_sk#328], BroadcastQueryStage 4\n"
      },
      "IM" : {
        "inputSizeInBytes" : 86621605964,
        "inputRowCount" : 492499921
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 3,
        "FinishedTasksNum" : 14,
        "FinishedTasksTotalTimeInMs" : 28070.0,
        "FinishedTasksDistributionInMs" : [ 1082.0, 1085.0, 1213.0, 2553.0, 5135.0 ]
      },
      "StartTimeInMs" : 1702227100696,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 20111,
        "IOBytes" : {
          "Total" : 243215679,
          "Details" : {
            "IR" : 65750915,
            "IW" : 0,
            "SR" : 88732382,
            "SW" : 88732382
          }
        }
      }
    },
    "10" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 518878046,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 483760000000,
            "rowCount" : 24188000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#131 = customer_sk#318) "
          },
          "8" : {
            "sign" : -2011357762,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2434843803648000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_current_addr_sk#135 = ca_address_sk#172) "
          },
          "4" : {
            "sign" : -1472869376,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 135529865264689997414400000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_sk#131], [cast((MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#163)),17,2) / 50) as int) AS segment#326] "
          },
          "15" : {
            "sign" : 1922548774,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 185542176,
            "rowCount" : 7730924,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#151, ss_ext_sales_price#163], ShuffleQueryStage 7 "
          },
          "11" : {
            "sign" : -1294298512,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 387008000000,
            "rowCount" : 24188000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#131, c_current_addr_sk#135] "
          },
          "9" : {
            "sign" : 462205045,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6291456,
            "rowCount" : 123616,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#172], BroadcastQueryStage 5 "
          },
          "13" : {
            "sign" : -1278555431,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 193504,
            "rowCount" : 12094,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [customer_sk#318], ShuffleQueryStage 6 "
          },
          "5" : {
            "sign" : 478006776,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 225883108774483329024000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#131, ss_ext_sales_price#163] "
          },
          "10" : {
            "sign" : -1681627929,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 387008000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_sk#131, c_current_addr_sk#135], [c_customer_sk#131, c_current_addr_sk#135] "
          },
          "6" : {
            "sign" : 1641370674,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 271059730529379994828800000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#131 = ss_customer_sk#151) "
          },
          "1" : {
            "sign" : 837745483,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 271059730529379994828800000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "14" : {
            "sign" : 1706886479,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 48000000,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#131, c_current_addr_sk#135], ShuffleQueryStage 3 "
          },
          "0" : {
            "sign" : 1495793296,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 2400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 916827258,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 271059730529379994828800000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [segment#326 ASC NULLS FIRST, num_customers#315L ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 1896762982,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1460906282188800000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#131] "
          },
          "3" : {
            "sign" : -181709417,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 271059730529379994828800000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [segment#326], [segment#326, count(1) AS num_customers#315L, (segment#326 * 50) AS segment_base#316] "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Join",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Aggregate",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Aggregate",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [segment#326 ASC NULLS FIRST, num_customers#315L ASC NULLS FIRST], true\n      +- Aggregate [segment#326], [segment#326, count(1) AS num_customers#315L, (segment#326 * 50) AS segment_base#316]\n         +- Aggregate [c_customer_sk#131], [cast((MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#163)),17,2) / 50) as int) AS segment#326]\n            +- Project [c_customer_sk#131, ss_ext_sales_price#163]\n               +- Join Inner, (c_customer_sk#131 = ss_customer_sk#151)\n                  :- Project [c_customer_sk#131]\n                  :  +- Join Inner, (c_current_addr_sk#135 = ca_address_sk#172)\n                  :     :- LogicalQueryStage Project [ca_address_sk#172], BroadcastQueryStage 5\n                  :     +- Aggregate [c_customer_sk#131, c_current_addr_sk#135], [c_customer_sk#131, c_current_addr_sk#135]\n                  :        +- Project [c_customer_sk#131, c_current_addr_sk#135]\n                  :           +- Join Inner, (c_customer_sk#131 = customer_sk#318)\n                  :              :- LogicalQueryStage Project [customer_sk#318], ShuffleQueryStage 6\n                  :              +- LogicalQueryStage Project [c_customer_sk#131, c_current_addr_sk#135], ShuffleQueryStage 3\n                  +- LogicalQueryStage Project [ss_customer_sk#151, ss_ext_sales_price#163], ShuffleQueryStage 7\n"
      },
      "IM" : {
        "inputSizeInBytes" : 240027136,
        "inputRowCount" : 9866634
      },
      "PD" : {
        "4" : [ 355234, 352487, 351656, 355874, 357689, 368266, 344148, 359038, 368045, 353689, 361274, 347020, 371909, 356597, 370265, 348613, 355291, 368248, 354867, 343622, 366432, 353274, 366122, 362147, 361969, 348809, 349917, 345903, 362790, 373468, 358944, 344155, 364029, 350409, 366974, 368807, 340139, 341572, 364344, 342853, 359368, 358835, 346571, 369696, 354377, 361306, 362368, 358571, 364791, 350808, 373290, 352784, 357926, 348392, 361885, 362995, 350582, 347785, 349876, 359927, 339897, 361969, 354395, 358129, 358015, 369247, 355070, 356374, 350046, 362147, 376570, 366833, 346393, 359528, 364029, 367027, 356503, 356945, 357290, 345969, 350409, 359792, 366470, 348344, 351877, 355715, 349440, 348950, 357224, 363747, 345479, 354598, 363100, 361037, 355487, 374350, 359952, 355291, 363859, 351011, 354229, 365290, 359934, 339352, 360333, 358393, 358944, 362587, 345198, 351232, 353953, 357069, 357290, 356298, 370172, 353053, 341572, 357511, 347216, 346030, 355658, 363587, 356394, 356670, 354849, 369028, 364189, 345584, 359510, 366188, 355273, 356597, 364791, 366366, 359368, 345969, 372171, 354504, 359485, 354299, 340467, 338944, 352487, 359706, 361385, 368045, 364807, 351585, 364367, 355248, 354849, 352284, 356615, 352487, 351382, 363968, 361926, 354316, 361809, 346172, 345479, 352629, 369468, 352360, 359038, 355273, 356501, 359589, 356927, 357265, 349937, 365477, 378619, 357290, 361926, 351936, 360939, 362790, 361606, 359589, 357493, 360358, 346368, 351893, 369028, 351733, 363197, 363968, 357486, 352469, 348613, 369028, 338927, 345661, 351451, 352487, 360850, 357351, 363435, 346571 ],
        "3" : [ 1645, 1693, 1568, 1938, 1931, 1563, 1677, 1798, 1712, 2024, 1803, 1821, 1991, 1732, 1775, 1678, 1860, 1682, 1700, 2109, 1866, 1802, 1978, 1733, 1752, 1657, 1896, 1871, 1836, 2008, 1943, 1744, 1896, 1704, 1814, 1854, 1357, 1639, 1816, 1783, 1804, 1957, 1784, 1775, 1780, 1856, 2005, 1522, 1712, 1874, 1710, 1570, 1675, 1641, 1916, 1790, 1826, 1635, 1786, 1792, 1860, 2096, 1913, 1800, 1849, 1848, 2112, 1752, 1660, 1790, 1927, 1702, 2033, 1725, 1898, 1692, 1740, 1774, 1928, 1720, 2004, 1744, 1857, 1963, 2110, 1904, 1711, 1844, 1764, 1627, 1554, 1839, 1808, 1981, 1880, 1984, 1760, 1715, 2014, 2057, 1564, 1698, 1979, 1760, 1617, 1784, 1750, 1916, 1846, 1598, 1792, 1517, 1848, 1520, 1604, 2011, 1768, 1846, 2033, 1969, 1553, 1712, 1840, 1753, 1933, 1800, 1816, 1871, 1730, 1442, 1903, 1733, 1880, 1786, 1312, 1789, 1460, 1723, 1296, 1898, 2065, 1645, 1686, 1921, 2029, 2173, 2060, 1997, 1813, 1878, 1965, 1833, 1933, 1838, 1953, 1647, 1690, 1941, 1912, 1665, 1760, 1912, 1686, 1839, 1696, 2106, 1705, 1886, 1529, 2138, 1842, 1712, 1720, 1762, 1811, 1936, 1744, 1870, 1718, 1865, 1966, 1809, 2048, 1444, 1841, 1625, 1957, 1617, 1747, 2001, 1600, 1787, 1740, 1746, 1945, 2009, 1873, 1916, 1582, 1885 ],
        "0" : [ 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 112177, 101979, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 112177, 101979, 112177, 112177, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 112177, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 112177, 101979 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227116122,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 4685,
        "IOBytes" : {
          "Total" : 88733091,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 88732323,
            "SW" : 768
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : 2010165408,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [(d_month_seq + 1)#356], [(d_month_seq + 1)#356], HashAggregate(keys=[(d_month_seq + 1)#356], functions=[]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [(d_month_seq + 1)#356], [(d_month_seq + 1)#356], HashAggregate(keys=[(d_month_seq + 1)#356], functions=[])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 16,
        "inputRowCount" : 1
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 15,
        "FinishedTasksTotalTimeInMs" : 34676.0,
        "FinishedTasksDistributionInMs" : [ 1082.0, 1085.0, 1213.0, 3298.0, 6606.0 ]
      },
      "StartTimeInMs" : 1702227102832,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 17975,
        "IOBytes" : {
          "Total" : 243190130,
          "Details" : {
            "IR" : 65725425,
            "IW" : 0,
            "SR" : 88732382,
            "SW" : 88732323
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -1990501279,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [(d_month_seq + 3)#357], [(d_month_seq + 3)#357], HashAggregate(keys=[(d_month_seq + 3)#357], functions=[]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [(d_month_seq + 3)#357], [(d_month_seq + 3)#357], HashAggregate(keys=[(d_month_seq + 3)#357], functions=[])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 16,
        "inputRowCount" : 1
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 12,
        "FinishedTasksNum" : 12,
        "FinishedTasksTotalTimeInMs" : 12940.0,
        "FinishedTasksDistributionInMs" : [ 97.0, 1082.0, 1095.0, 1213.0, 1738.0 ]
      },
      "StartTimeInMs" : 1702227097054,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 23753,
        "IOBytes" : {
          "Total" : 250734687,
          "Details" : {
            "IR" : 73269864,
            "IW" : 0,
            "SR" : 88732441,
            "SW" : 88732382
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "45" : {
            "sign" : -1495890998,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 18450,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#365) AND isnotnull(d_moy#367)) AND ((d_year#365 = 1999) AND (d_moy#367 = 3))) "
          },
          "34" : {
            "sign" : 1706886479,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 32000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#131, c_current_addr_sk#135], ShuffleQueryStage 3 "
          },
          "12" : {
            "sign" : 1634902664,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 231382926,
            "rowCount" : 940581,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_address_sk#172) AND (isnotnull(ca_county#179) AND isnotnull(ca_state#180))) "
          },
          "51" : {
            "sign" : -1034105569,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 876588,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#328], BroadcastQueryStage 4 "
          },
          "8" : {
            "sign" : 943142304,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 40203200,
            "rowCount" : 2010160,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_current_addr_sk#135 = ca_address_sk#172) "
          },
          "19" : {
            "sign" : -338987739,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 65643734754000,
            "rowCount" : 3282186737700,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (item_sk#319 = i_item_sk#81) "
          },
          "23" : {
            "sign" : 1288241140,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2851128160,
            "rowCount" : 142556408,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_sold_date_sk#46 AS sold_date_sk#317, cs_bill_customer_sk#15 AS customer_sk#318, cs_item_sk#27 AS item_sk#319] "
          },
          "4" : {
            "sign" : -577032425,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 23812188,
            "rowCount" : 1984349,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_sk#131], [cast((MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#163)),17,2) / 50) as int) AS segment#326] "
          },
          "40" : {
            "sign" : -1811606857,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 876588,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#328] "
          },
          "15" : {
            "sign" : -784953982,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 25522816333216,
            "rowCount" : 1595176020826,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_sk#131, c_current_addr_sk#135], [c_customer_sk#131, c_current_addr_sk#135] "
          },
          "11" : {
            "sign" : -1202574003,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 48910212,
            "rowCount" : 940581,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_address_sk#172, ca_county#179, ca_state#180] "
          },
          "9" : {
            "sign" : -1286152052,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4537362744,
            "rowCount" : 378113562,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_address_sk#172] "
          },
          "44" : {
            "sign" : -1362384554,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 900,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [(d_month_seq#362 + 1) AS (d_month_seq + 1)#356] "
          },
          "33" : {
            "sign" : -977041583,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2448,
            "rowCount" : 204,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#81], BroadcastQueryStage 2 "
          },
          "22" : {
            "sign" : 411670351,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 4290440180,
            "rowCount" : 214522009,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "26" : {
            "sign" : 128757161,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 900,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#103] "
          },
          "50" : {
            "sign" : -541859252,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#387, d_date_id#388, d_date#389, d_month_seq#390, d_week_seq#391, d_quarter_seq#392, d_year#393, d_dow#394, d_moy#395, d_dom#396, d_qoy#397, d_fy_year#398, d_fy_quarter_seq#399, d_fy_week_seq#400, d_day_name#401, d_quarter_name#402, d_holiday#403, d_weekend#404, d_following_holiday#405, d_first_dom#406, d_last_dom#407, d_same_day_ly#408, d_same_day_lq#409, d_current_day#410, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "37" : {
            "sign" : -666427669,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6304057272,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#151, ss_ext_sales_price#163, ss_sold_date_sk#171] "
          },
          "13" : {
            "sign" : -1315552887,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#172, ca_address_id#173, ca_street_number#174, ca_street_name#175, ca_street_type#176, ca_suite_number#177, ca_city#178, ca_county#179, ca_state#180, ca_zip#181, ca_country#182, ca_gmt_offset#183, ca_location_type#184], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "46" : {
            "sign" : -2094062293,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#359, d_date_id#360, d_date#361, d_month_seq#362, d_week_seq#363, d_quarter_seq#364, d_year#365, d_dow#366, d_moy#367, d_dom#368, d_qoy#369, d_fy_year#370, d_fy_quarter_seq#371, d_fy_week_seq#372, d_day_name#373, d_quarter_name#374, d_holiday#375, d_weekend#376, d_following_holiday#377, d_first_dom#378, d_last_dom#379, d_same_day_ly#380, d_same_day_lq#381, d_current_day#382, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "24" : {
            "sign" : 185170765,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29651732864,
            "rowCount" : 142556408,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_item_sk#27) AND isnotnull(cs_sold_date_sk#46)) AND isnotnull(cs_bill_customer_sk#15)) AND dynamicpruning#419 [cs_sold_date_sk#46]) "
          },
          "35" : {
            "sign" : 1246212009,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 5310811700,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#151, ss_ext_sales_price#163] "
          },
          "16" : {
            "sign" : -680370333,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 105029975606400000000,
            "rowCount" : 6564373475400000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#131, c_current_addr_sk#135] "
          },
          "5" : {
            "sign" : 1681114329,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 5500879020,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#131, ss_ext_sales_price#163] "
          },
          "10" : {
            "sign" : 1346727110,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 34786447704,
            "rowCount" : 378113562,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ca_county#179 = s_county#208) AND (ca_state#180 = s_state#209)) "
          },
          "48" : {
            "sign" : 1316066587,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 900,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [(d_month_seq#390 + 3) AS (d_month_seq + 3)#357] "
          },
          "21" : {
            "sign" : -2097477336,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 386139616200,
            "rowCount" : 16089150675,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (sold_date_sk#317 = d_date_sk#103) "
          },
          "43" : {
            "sign" : -500062595,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 900,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(d_month_seq + 1)#356], [(d_month_seq + 1)#356] "
          },
          "32" : {
            "sign" : 1692007655,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 900,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#103], BroadcastQueryStage 1 "
          },
          "49" : {
            "sign" : 1450156779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 18450,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#393) AND isnotnull(d_moy#395)) AND ((d_year#393 = 1999) AND (d_moy#395 = 3))) "
          },
          "6" : {
            "sign" : -602272887,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 6601054824,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#131 = ss_customer_sk#151) "
          },
          "36" : {
            "sign" : -1075478028,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 7435136380,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#171 = d_date_sk#328) "
          },
          "1" : {
            "sign" : -793239706,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 47624376,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "39" : {
            "sign" : -971550717,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#149, ss_item_sk#150, ss_customer_sk#151, ss_cdemo_sk#152, ss_hdemo_sk#153, ss_addr_sk#154, ss_store_sk#155, ss_promo_sk#156, ss_ticket_number#157L, ss_quantity#158, ss_wholesale_cost#159, ss_list_price#160, ss_sales_price#161, ss_ext_discount_amt#162, ss_ext_sales_price#163, ss_ext_wholesale_cost#164, ss_ext_list_price#165, ss_ext_tax#166, ss_coupon_amt#167, ss_net_paid#168, ss_net_paid_inc_tax#169, ss_net_profit#170, ss_sold_date_sk#171], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "17" : {
            "sign" : -2034418965,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 131287469508000000000,
            "rowCount" : 6564373475400000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#131 = customer_sk#318) "
          },
          "25" : {
            "sign" : -914147946,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#13, cs_ship_date_sk#14, cs_bill_customer_sk#15, cs_bill_cdemo_sk#16, cs_bill_hdemo_sk#17, cs_bill_addr_sk#18, cs_ship_customer_sk#19, cs_ship_cdemo_sk#20, cs_ship_hdemo_sk#21, cs_ship_addr_sk#22, cs_call_center_sk#23, cs_catalog_page_sk#24, cs_ship_mode_sk#25, cs_warehouse_sk#26, cs_item_sk#27, cs_promo_sk#28, cs_order_number#29L, cs_quantity#30, cs_wholesale_cost#31, cs_list_price#32, cs_sales_price#33, cs_ext_discount_amt#34, cs_ext_sales_price#35, cs_ext_wholesale_cost#36, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "14" : {
            "sign" : 1333151659,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 33570816,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_county#208, s_state#209], BroadcastQueryStage 0 "
          },
          "47" : {
            "sign" : -1879834014,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 900,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(d_month_seq + 3)#357], [(d_month_seq + 3)#357] "
          },
          "31" : {
            "sign" : -432544473,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#47, ws_ship_date_sk#48, ws_item_sk#49, ws_bill_customer_sk#50, ws_bill_cdemo_sk#51, ws_bill_hdemo_sk#52, ws_bill_addr_sk#53, ws_ship_customer_sk#54, ws_ship_cdemo_sk#55, ws_ship_hdemo_sk#56, ws_ship_addr_sk#57, ws_web_page_sk#58, ws_web_site_sk#59, ws_ship_mode_sk#60, ws_warehouse_sk#61, ws_promo_sk#62, ws_order_number#63L, ws_quantity#64, ws_wholesale_cost#65, ws_list_price#66, ws_sales_price#67, ws_ext_discount_amt#68, ws_ext_sales_price#69, ws_ext_wholesale_cost#70, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "42" : {
            "sign" : 573641338,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#328, d_date_id#329, d_date#330, d_month_seq#331, d_week_seq#332, d_quarter_seq#333, d_year#334, d_dow#335, d_moy#336, d_dom#337, d_qoy#338, d_fy_year#339, d_fy_quarter_seq#340, d_fy_week_seq#341, d_day_name#342, d_quarter_name#343, d_holiday#344, d_weekend#345, d_following_holiday#346, d_first_dom#347, d_last_dom#348, d_same_day_ly#349, d_same_day_lq#350, d_current_day#351, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "0" : {
            "sign" : 1278928167,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 2400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -1614413795,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 257426410800,
            "rowCount" : 16089150675,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_sk#318, item_sk#319] "
          },
          "27" : {
            "sign" : -275590035,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 18450,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#111) AND isnotnull(d_year#109)) AND ((d_moy#111 = 3) AND (d_year#109 = 1999))) AND isnotnull(d_date_sk#103)) "
          },
          "2" : {
            "sign" : 1287733841,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 47624376,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [segment#326 ASC NULLS FIRST, num_customers#315L ASC NULLS FIRST], true "
          },
          "38" : {
            "sign" : -1660520969,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39925696056,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_customer_sk#151) AND isnotnull(ss_sold_date_sk#171)) AND dynamicpruning#420 [ss_sold_date_sk#171]) "
          },
          "18" : {
            "sign" : -1891025296,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 39386240852400,
            "rowCount" : 3282186737700,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_sk#318] "
          },
          "30" : {
            "sign" : -47790245,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14968845008,
            "rowCount" : 71965601,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(ws_item_sk#49) AND isnotnull(ws_sold_date_sk#80)) AND isnotnull(ws_bill_customer_sk#50)) AND dynamicpruning#419 [ws_sold_date_sk#80]) "
          },
          "7" : {
            "sign" : -1651641094,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24121920,
            "rowCount" : 2010160,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#131] "
          },
          "29" : {
            "sign" : -1424925611,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1439312020,
            "rowCount" : 71965601,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_sold_date_sk#80 AS sold_date_sk#320, ws_bill_customer_sk#50 AS customer_sk#321, ws_item_sk#49 AS item_sk#322] "
          },
          "41" : {
            "sign" : -956519042,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_month_seq#331) AND ((d_month_seq#331 >= scalar-subquery#324 []) AND (d_month_seq#331 <= scalar-subquery#325 []))) AND isnotnull(d_date_sk#328)) "
          },
          "3" : {
            "sign" : 1256696218,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 47624376,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [segment#326], [segment#326, count(1) AS num_customers#315L, (segment#326 * 50) AS segment_base#316] "
          },
          "28" : {
            "sign" : -144809072,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#103, d_date_id#104, d_date#105, d_month_seq#106, d_week_seq#107, d_quarter_seq#108, d_year#109, d_dow#110, d_moy#111, d_dom#112, d_qoy#113, d_fy_year#114, d_fy_quarter_seq#115, d_fy_week_seq#116, d_day_name#117, d_quarter_name#118, d_holiday#119, d_weekend#120, d_following_holiday#121, d_first_dom#122, d_last_dom#123, d_same_day_ly#124, d_same_day_lq#125, d_current_day#126, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 13,
          "fromName" : "LogicalRelation",
          "toId" : 12,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Filter",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "LogicalRelation",
          "toId" : 24,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalRelation",
          "toId" : 27,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Filter",
          "toId" : 26,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Project",
          "toId" : 24,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 24,
          "fromName" : "Filter",
          "toId" : 23,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Project",
          "toId" : 22,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "LogicalRelation",
          "toId" : 30,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Project",
          "toId" : 30,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 30,
          "fromName" : "Filter",
          "toId" : 29,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Project",
          "toId" : 22,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Union",
          "toId" : 21,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "LogicalQueryStage",
          "toId" : 21,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Join",
          "toId" : 20,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Project",
          "toId" : 19,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "LogicalQueryStage",
          "toId" : 19,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Join",
          "toId" : 18,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Project",
          "toId" : 17,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "LogicalQueryStage",
          "toId" : 17,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Join",
          "toId" : 16,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Aggregate",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "LogicalRelation",
          "toId" : 38,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 42,
          "fromName" : "LogicalRelation",
          "toId" : 41,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 46,
          "fromName" : "LogicalRelation",
          "toId" : 45,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 45,
          "fromName" : "Filter",
          "toId" : 44,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 44,
          "fromName" : "Project",
          "toId" : 43,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 43,
          "fromName" : "Aggregate",
          "toId" : 41,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 50,
          "fromName" : "LogicalRelation",
          "toId" : 49,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 49,
          "fromName" : "Filter",
          "toId" : 48,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 48,
          "fromName" : "Project",
          "toId" : 47,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 47,
          "fromName" : "Aggregate",
          "toId" : 41,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 41,
          "fromName" : "Filter",
          "toId" : 40,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "Project",
          "toId" : 38,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 38,
          "fromName" : "Filter",
          "toId" : 37,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Project",
          "toId" : 36,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 51,
          "fromName" : "LogicalQueryStage",
          "toId" : 36,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "Join",
          "toId" : 35,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Aggregate",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [segment#326 ASC NULLS FIRST, num_customers#315L ASC NULLS FIRST], true\n      +- Aggregate [segment#326], [segment#326, count(1) AS num_customers#315L, (segment#326 * 50) AS segment_base#316]\n         +- Aggregate [c_customer_sk#131], [cast((MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#163)),17,2) / 50) as int) AS segment#326]\n            +- Project [c_customer_sk#131, ss_ext_sales_price#163]\n               +- Join Inner, (c_customer_sk#131 = ss_customer_sk#151)\n                  :- Project [c_customer_sk#131]\n                  :  +- Join Inner, (c_current_addr_sk#135 = ca_address_sk#172)\n                  :     :- Project [ca_address_sk#172]\n                  :     :  +- Join Inner, ((ca_county#179 = s_county#208) AND (ca_state#180 = s_state#209))\n                  :     :     :- Project [ca_address_sk#172, ca_county#179, ca_state#180]\n                  :     :     :  +- Filter (isnotnull(ca_address_sk#172) AND (isnotnull(ca_county#179) AND isnotnull(ca_state#180)))\n                  :     :     :     +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#172,ca_address_id#173,ca_street_number#174,ca_street_name#175,ca_street_type#176,ca_suite_number#177,ca_city#178,ca_county#179,ca_state#180,ca_zip#181,ca_country#182,ca_gmt_offset#183,ca_location_type#184] parquet\n                  :     :     +- LogicalQueryStage Project [s_county#208, s_state#209], BroadcastQueryStage 0\n                  :     +- Aggregate [c_customer_sk#131, c_current_addr_sk#135], [c_customer_sk#131, c_current_addr_sk#135]\n                  :        +- Project [c_customer_sk#131, c_current_addr_sk#135]\n                  :           +- Join Inner, (c_customer_sk#131 = customer_sk#318)\n                  :              :- Project [customer_sk#318]\n                  :              :  +- Join Inner, (item_sk#319 = i_item_sk#81)\n                  :              :     :- Project [customer_sk#318, item_sk#319]\n                  :              :     :  +- Join Inner, (sold_date_sk#317 = d_date_sk#103)\n                  :              :     :     :- Union false, false\n                  :              :     :     :  :- Project [cs_sold_date_sk#46 AS sold_date_sk#317, cs_bill_customer_sk#15 AS customer_sk#318, cs_item_sk#27 AS item_sk#319]\n                  :              :     :     :  :  +- Filter (((isnotnull(cs_item_sk#27) AND isnotnull(cs_sold_date_sk#46)) AND isnotnull(cs_bill_customer_sk#15)) AND dynamicpruning#419 [cs_sold_date_sk#46])\n                  :              :     :     :  :     :  +- Project [d_date_sk#103]\n                  :              :     :     :  :     :     +- Filter (((isnotnull(d_moy#111) AND isnotnull(d_year#109)) AND ((d_moy#111 = 3) AND (d_year#109 = 1999))) AND isnotnull(d_date_sk#103))\n                  :              :     :     :  :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_date_id#104,d_date#105,d_month_seq#106,d_week_seq#107,d_quarter_seq#108,d_year#109,d_dow#110,d_moy#111,d_dom#112,d_qoy#113,d_fy_year#114,d_fy_quarter_seq#115,d_fy_week_seq#116,d_day_name#117,d_quarter_name#118,d_holiday#119,d_weekend#120,d_following_holiday#121,d_first_dom#122,d_last_dom#123,d_same_day_ly#124,d_same_day_lq#125,d_current_day#126,... 4 more fields] parquet\n                  :              :     :     :  :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#13,cs_ship_date_sk#14,cs_bill_customer_sk#15,cs_bill_cdemo_sk#16,cs_bill_hdemo_sk#17,cs_bill_addr_sk#18,cs_ship_customer_sk#19,cs_ship_cdemo_sk#20,cs_ship_hdemo_sk#21,cs_ship_addr_sk#22,cs_call_center_sk#23,cs_catalog_page_sk#24,cs_ship_mode_sk#25,cs_warehouse_sk#26,cs_item_sk#27,cs_promo_sk#28,cs_order_number#29L,cs_quantity#30,cs_wholesale_cost#31,cs_list_price#32,cs_sales_price#33,cs_ext_discount_amt#34,cs_ext_sales_price#35,cs_ext_wholesale_cost#36,... 10 more fields] parquet\n                  :              :     :     :  +- Project [ws_sold_date_sk#80 AS sold_date_sk#320, ws_bill_customer_sk#50 AS customer_sk#321, ws_item_sk#49 AS item_sk#322]\n                  :              :     :     :     +- Filter (((isnotnull(ws_item_sk#49) AND isnotnull(ws_sold_date_sk#80)) AND isnotnull(ws_bill_customer_sk#50)) AND dynamicpruning#419 [ws_sold_date_sk#80])\n                  :              :     :     :        :  +- Project [d_date_sk#103]\n                  :              :     :     :        :     +- Filter (((isnotnull(d_moy#111) AND isnotnull(d_year#109)) AND ((d_moy#111 = 3) AND (d_year#109 = 1999))) AND isnotnull(d_date_sk#103))\n                  :              :     :     :        :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_date_id#104,d_date#105,d_month_seq#106,d_week_seq#107,d_quarter_seq#108,d_year#109,d_dow#110,d_moy#111,d_dom#112,d_qoy#113,d_fy_year#114,d_fy_quarter_seq#115,d_fy_week_seq#116,d_day_name#117,d_quarter_name#118,d_holiday#119,d_weekend#120,d_following_holiday#121,d_first_dom#122,d_last_dom#123,d_same_day_ly#124,d_same_day_lq#125,d_current_day#126,... 4 more fields] parquet\n                  :              :     :     :        +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#47,ws_ship_date_sk#48,ws_item_sk#49,ws_bill_customer_sk#50,ws_bill_cdemo_sk#51,ws_bill_hdemo_sk#52,ws_bill_addr_sk#53,ws_ship_customer_sk#54,ws_ship_cdemo_sk#55,ws_ship_hdemo_sk#56,ws_ship_addr_sk#57,ws_web_page_sk#58,ws_web_site_sk#59,ws_ship_mode_sk#60,ws_warehouse_sk#61,ws_promo_sk#62,ws_order_number#63L,ws_quantity#64,ws_wholesale_cost#65,ws_list_price#66,ws_sales_price#67,ws_ext_discount_amt#68,ws_ext_sales_price#69,ws_ext_wholesale_cost#70,... 10 more fields] parquet\n                  :              :     :     +- LogicalQueryStage Project [d_date_sk#103], BroadcastQueryStage 1\n                  :              :     +- LogicalQueryStage Project [i_item_sk#81], BroadcastQueryStage 2\n                  :              +- LogicalQueryStage Project [c_customer_sk#131, c_current_addr_sk#135], ShuffleQueryStage 3\n                  +- Project [ss_customer_sk#151, ss_ext_sales_price#163]\n                     +- Join Inner, (ss_sold_date_sk#171 = d_date_sk#328)\n                        :- Project [ss_customer_sk#151, ss_ext_sales_price#163, ss_sold_date_sk#171]\n                        :  +- Filter ((isnotnull(ss_customer_sk#151) AND isnotnull(ss_sold_date_sk#171)) AND dynamicpruning#420 [ss_sold_date_sk#171])\n                        :     :  +- Project [d_date_sk#328]\n                        :     :     +- Filter ((isnotnull(d_month_seq#331) AND ((d_month_seq#331 >= scalar-subquery#324 []) AND (d_month_seq#331 <= scalar-subquery#325 []))) AND isnotnull(d_date_sk#328))\n                        :     :        :  :- Aggregate [(d_month_seq + 1)#356], [(d_month_seq + 1)#356]\n                        :     :        :  :  +- Project [(d_month_seq#362 + 1) AS (d_month_seq + 1)#356]\n                        :     :        :  :     +- Filter ((isnotnull(d_year#365) AND isnotnull(d_moy#367)) AND ((d_year#365 = 1999) AND (d_moy#367 = 3)))\n                        :     :        :  :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#359,d_date_id#360,d_date#361,d_month_seq#362,d_week_seq#363,d_quarter_seq#364,d_year#365,d_dow#366,d_moy#367,d_dom#368,d_qoy#369,d_fy_year#370,d_fy_quarter_seq#371,d_fy_week_seq#372,d_day_name#373,d_quarter_name#374,d_holiday#375,d_weekend#376,d_following_holiday#377,d_first_dom#378,d_last_dom#379,d_same_day_ly#380,d_same_day_lq#381,d_current_day#382,... 4 more fields] parquet\n                        :     :        :  +- Aggregate [(d_month_seq + 3)#357], [(d_month_seq + 3)#357]\n                        :     :        :     +- Project [(d_month_seq#390 + 3) AS (d_month_seq + 3)#357]\n                        :     :        :        +- Filter ((isnotnull(d_year#393) AND isnotnull(d_moy#395)) AND ((d_year#393 = 1999) AND (d_moy#395 = 3)))\n                        :     :        :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#387,d_date_id#388,d_date#389,d_month_seq#390,d_week_seq#391,d_quarter_seq#392,d_year#393,d_dow#394,d_moy#395,d_dom#396,d_qoy#397,d_fy_year#398,d_fy_quarter_seq#399,d_fy_week_seq#400,d_day_name#401,d_quarter_name#402,d_holiday#403,d_weekend#404,d_following_holiday#405,d_first_dom#406,d_last_dom#407,d_same_day_ly#408,d_same_day_lq#409,d_current_day#410,... 4 more fields] parquet\n                        :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#328,d_date_id#329,d_date#330,d_month_seq#331,d_week_seq#332,d_quarter_seq#333,d_year#334,d_dow#335,d_moy#336,d_dom#337,d_qoy#338,d_fy_year#339,d_fy_quarter_seq#340,d_fy_week_seq#341,d_day_name#342,d_quarter_name#343,d_holiday#344,d_weekend#345,d_following_holiday#346,d_first_dom#347,d_last_dom#348,d_same_day_ly#349,d_same_day_lq#350,d_current_day#351,... 4 more fields] parquet\n                        :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#149,ss_item_sk#150,ss_customer_sk#151,ss_cdemo_sk#152,ss_hdemo_sk#153,ss_addr_sk#154,ss_store_sk#155,ss_promo_sk#156,ss_ticket_number#157L,ss_quantity#158,ss_wholesale_cost#159,ss_list_price#160,ss_sales_price#161,ss_ext_discount_amt#162,ss_ext_sales_price#163,ss_ext_wholesale_cost#164,ss_ext_list_price#165,ss_ext_tax#166,ss_coupon_amt#167,ss_net_paid#168,ss_net_paid_inc_tax#169,ss_net_profit#170,ss_sold_date_sk#171] parquet\n                        +- LogicalQueryStage Project [d_date_sk#328], BroadcastQueryStage 4\n"
      },
      "IM" : {
        "inputSizeInBytes" : 86892725736,
        "inputRowCount" : 493375724
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 7,
        "FinishedTasksNum" : 16,
        "FinishedTasksTotalTimeInMs" : 21313.0,
        "FinishedTasksDistributionInMs" : [ 97.0, 1082.0, 1155.0, 1729.0, 3298.0 ]
      },
      "StartTimeInMs" : 1702227098637,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 22170,
        "IOBytes" : {
          "Total" : 250721467,
          "Details" : {
            "IR" : 73256703,
            "IW" : 0,
            "SR" : 88732382,
            "SW" : 88732382
          }
        }
      }
    },
    "7" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 518878046,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 131287469508000000000,
            "rowCount" : 6564373475400000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#131 = customer_sk#318) "
          },
          "8" : {
            "sign" : -2011357762,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3943785579808536320,
            "rowCount" : 197189278990426816,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_current_addr_sk#135 = ca_address_sk#172) "
          },
          "19" : {
            "sign" : -971550717,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#149, ss_item_sk#150, ss_customer_sk#151, ss_cdemo_sk#152, ss_hdemo_sk#153, ss_addr_sk#154, ss_store_sk#155, ss_promo_sk#156, ss_ticket_number#157L, ss_quantity#158, ss_wholesale_cost#159, ss_list_price#160, ss_sales_price#161, ss_ext_discount_amt#162, ss_ext_sales_price#163, ss_ext_wholesale_cost#164, ss_ext_list_price#165, ss_ext_tax#166, ss_coupon_amt#167, ss_net_paid#168, ss_net_paid_inc_tax#169, ss_net_profit#170, ss_sold_date_sk#171], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "23" : {
            "sign" : -500062595,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 900,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(d_month_seq + 1)#356], [(d_month_seq + 1)#356] "
          },
          "4" : {
            "sign" : 1907272275,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 23812188,
            "rowCount" : 1984349,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_sk#131], [cast((MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#163)),17,2) / 50) as int) AS segment#326] "
          },
          "15" : {
            "sign" : 1246212009,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 478057676460,
            "rowCount" : 23902883823,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#151, ss_ext_sales_price#163] "
          },
          "11" : {
            "sign" : -1294298512,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 105029975606400000000,
            "rowCount" : 6564373475400000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#131, c_current_addr_sk#135] "
          },
          "9" : {
            "sign" : 462205045,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6291456,
            "rowCount" : 123616,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#172], BroadcastQueryStage 5 "
          },
          "22" : {
            "sign" : 573641338,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#328, d_date_id#329, d_date#330, d_month_seq#331, d_week_seq#332, d_quarter_seq#333, d_year#334, d_dow#335, d_moy#336, d_dom#337, d_qoy#338, d_fy_year#339, d_fy_quarter_seq#340, d_fy_week_seq#341, d_day_name#342, d_quarter_name#343, d_holiday#344, d_weekend#345, d_following_holiday#346, d_first_dom#347, d_last_dom#348, d_same_day_ly#349, d_same_day_lq#350, d_current_day#351, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "26" : {
            "sign" : -2094062293,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#359, d_date_id#360, d_date#361, d_month_seq#362, d_week_seq#363, d_quarter_seq#364, d_year#365, d_dow#366, d_moy#367, d_dom#368, d_qoy#369, d_fy_year#370, d_fy_quarter_seq#371, d_fy_week_seq#372, d_day_name#373, d_quarter_name#374, d_holiday#375, d_weekend#376, d_following_holiday#377, d_first_dom#378, d_last_dom#379, d_same_day_ly#380, d_same_day_lq#381, d_current_day#382, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "13" : {
            "sign" : -1278555431,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 39386240852400,
            "rowCount" : 3282186737700,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [customer_sk#318], ShuffleQueryStage 6 "
          },
          "24" : {
            "sign" : -1362384554,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 900,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [(d_month_seq#362 + 1) AS (d_month_seq + 1)#356] "
          },
          "16" : {
            "sign" : -1075478028,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 669280747044,
            "rowCount" : 23902883823,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#171 = d_date_sk#328) "
          },
          "5" : {
            "sign" : -1211991429,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 5500879020,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#131, ss_ext_sales_price#163] "
          },
          "10" : {
            "sign" : -1681627929,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 25522816333216,
            "rowCount" : 1595176020826,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_sk#131, c_current_addr_sk#135], [c_customer_sk#131, c_current_addr_sk#135] "
          },
          "21" : {
            "sign" : -956519042,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_month_seq#331) AND ((d_month_seq#331 >= scalar-subquery#324 []) AND (d_month_seq#331 <= scalar-subquery#325 []))) AND isnotnull(d_date_sk#328)) "
          },
          "6" : {
            "sign" : -906006651,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 6601054824,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#131 = ss_customer_sk#151) "
          },
          "1" : {
            "sign" : 1492280654,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 47624376,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -666427669,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6304057272,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#151, ss_ext_sales_price#163, ss_sold_date_sk#171] "
          },
          "25" : {
            "sign" : -1495890998,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 18450,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#365) AND isnotnull(d_moy#367)) AND ((d_year#365 = 1999) AND (d_moy#367 = 3))) "
          },
          "14" : {
            "sign" : 1706886479,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 32000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#131, c_current_addr_sk#135], ShuffleQueryStage 3 "
          },
          "31" : {
            "sign" : -1034105569,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049304,
            "rowCount" : 91,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#328], BroadcastQueryStage 4 "
          },
          "0" : {
            "sign" : 2107450595,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 2400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -1811606857,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 876588,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#328] "
          },
          "27" : {
            "sign" : -1879834014,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 900,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(d_month_seq + 3)#357], [(d_month_seq + 3)#357] "
          },
          "2" : {
            "sign" : 573696973,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 47624376,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [segment#326 ASC NULLS FIRST, num_customers#315L ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : -1660520969,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39925696056,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_customer_sk#151) AND isnotnull(ss_sold_date_sk#171)) AND dynamicpruning#420 [ss_sold_date_sk#171]) "
          },
          "30" : {
            "sign" : -541859252,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#387, d_date_id#388, d_date#389, d_month_seq#390, d_week_seq#391, d_quarter_seq#392, d_year#393, d_dow#394, d_moy#395, d_dom#396, d_qoy#397, d_fy_year#398, d_fy_quarter_seq#399, d_fy_week_seq#400, d_day_name#401, d_quarter_name#402, d_holiday#403, d_weekend#404, d_following_holiday#405, d_first_dom#406, d_last_dom#407, d_same_day_ly#408, d_same_day_lq#409, d_current_day#410, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "7" : {
            "sign" : 1896762982,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2366271347885121792,
            "rowCount" : 197189278990426816,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#131] "
          },
          "29" : {
            "sign" : 1450156779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 18450,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#393) AND isnotnull(d_moy#395)) AND ((d_year#393 = 1999) AND (d_moy#395 = 3))) "
          },
          "3" : {
            "sign" : 317239706,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 47624376,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [segment#326], [segment#326, count(1) AS num_customers#315L, (segment#326 * 50) AS segment_base#316] "
          },
          "28" : {
            "sign" : 1316066587,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 900,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [(d_month_seq#390 + 3) AS (d_month_seq + 3)#357] "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Join",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Aggregate",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalRelation",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalRelation",
          "toId" : 21,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "LogicalRelation",
          "toId" : 25,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Filter",
          "toId" : 24,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Project",
          "toId" : 23,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Aggregate",
          "toId" : 21,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 30,
          "fromName" : "LogicalRelation",
          "toId" : 29,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Filter",
          "toId" : 28,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Project",
          "toId" : 27,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Aggregate",
          "toId" : 21,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 21,
          "fromName" : "Filter",
          "toId" : 20,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Project",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 18,
          "fromName" : "Filter",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Join",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Aggregate",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [segment#326 ASC NULLS FIRST, num_customers#315L ASC NULLS FIRST], true\n      +- Aggregate [segment#326], [segment#326, count(1) AS num_customers#315L, (segment#326 * 50) AS segment_base#316]\n         +- Aggregate [c_customer_sk#131], [cast((MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#163)),17,2) / 50) as int) AS segment#326]\n            +- Project [c_customer_sk#131, ss_ext_sales_price#163]\n               +- Join Inner, (c_customer_sk#131 = ss_customer_sk#151)\n                  :- Project [c_customer_sk#131]\n                  :  +- Join Inner, (c_current_addr_sk#135 = ca_address_sk#172)\n                  :     :- LogicalQueryStage Project [ca_address_sk#172], BroadcastQueryStage 5\n                  :     +- Aggregate [c_customer_sk#131, c_current_addr_sk#135], [c_customer_sk#131, c_current_addr_sk#135]\n                  :        +- Project [c_customer_sk#131, c_current_addr_sk#135]\n                  :           +- Join Inner, (c_customer_sk#131 = customer_sk#318)\n                  :              :- LogicalQueryStage Project [customer_sk#318], ShuffleQueryStage 6\n                  :              +- LogicalQueryStage Project [c_customer_sk#131, c_current_addr_sk#135], ShuffleQueryStage 3\n                  +- Project [ss_customer_sk#151, ss_ext_sales_price#163]\n                     +- Join Inner, (ss_sold_date_sk#171 = d_date_sk#328)\n                        :- Project [ss_customer_sk#151, ss_ext_sales_price#163, ss_sold_date_sk#171]\n                        :  +- Filter ((isnotnull(ss_customer_sk#151) AND isnotnull(ss_sold_date_sk#171)) AND dynamicpruning#420 [ss_sold_date_sk#171])\n                        :     :  +- Project [d_date_sk#328]\n                        :     :     +- Filter ((isnotnull(d_month_seq#331) AND ((d_month_seq#331 >= scalar-subquery#324 []) AND (d_month_seq#331 <= scalar-subquery#325 []))) AND isnotnull(d_date_sk#328))\n                        :     :        :  :- Aggregate [(d_month_seq + 1)#356], [(d_month_seq + 1)#356]\n                        :     :        :  :  +- Project [(d_month_seq#362 + 1) AS (d_month_seq + 1)#356]\n                        :     :        :  :     +- Filter ((isnotnull(d_year#365) AND isnotnull(d_moy#367)) AND ((d_year#365 = 1999) AND (d_moy#367 = 3)))\n                        :     :        :  :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#359,d_date_id#360,d_date#361,d_month_seq#362,d_week_seq#363,d_quarter_seq#364,d_year#365,d_dow#366,d_moy#367,d_dom#368,d_qoy#369,d_fy_year#370,d_fy_quarter_seq#371,d_fy_week_seq#372,d_day_name#373,d_quarter_name#374,d_holiday#375,d_weekend#376,d_following_holiday#377,d_first_dom#378,d_last_dom#379,d_same_day_ly#380,d_same_day_lq#381,d_current_day#382,... 4 more fields] parquet\n                        :     :        :  +- Aggregate [(d_month_seq + 3)#357], [(d_month_seq + 3)#357]\n                        :     :        :     +- Project [(d_month_seq#390 + 3) AS (d_month_seq + 3)#357]\n                        :     :        :        +- Filter ((isnotnull(d_year#393) AND isnotnull(d_moy#395)) AND ((d_year#393 = 1999) AND (d_moy#395 = 3)))\n                        :     :        :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#387,d_date_id#388,d_date#389,d_month_seq#390,d_week_seq#391,d_quarter_seq#392,d_year#393,d_dow#394,d_moy#395,d_dom#396,d_qoy#397,d_fy_year#398,d_fy_quarter_seq#399,d_fy_week_seq#400,d_day_name#401,d_quarter_name#402,d_holiday#403,d_weekend#404,d_following_holiday#405,d_first_dom#406,d_last_dom#407,d_same_day_ly#408,d_same_day_lq#409,d_current_day#410,... 4 more fields] parquet\n                        :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#328,d_date_id#329,d_date#330,d_month_seq#331,d_week_seq#332,d_quarter_seq#333,d_year#334,d_dow#335,d_moy#336,d_dom#337,d_qoy#338,d_fy_year#339,d_fy_quarter_seq#340,d_fy_week_seq#341,d_day_name#342,d_quarter_name#343,d_holiday#344,d_weekend#345,d_following_holiday#346,d_first_dom#347,d_last_dom#348,d_same_day_ly#349,d_same_day_lq#350,d_current_day#351,... 4 more fields] parquet\n                        :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#149,ss_item_sk#150,ss_customer_sk#151,ss_cdemo_sk#152,ss_hdemo_sk#153,ss_addr_sk#154,ss_store_sk#155,ss_promo_sk#156,ss_ticket_number#157L,ss_quantity#158,ss_wholesale_cost#159,ss_list_price#160,ss_sales_price#161,ss_ext_discount_amt#162,ss_ext_sales_price#163,ss_ext_wholesale_cost#164,ss_ext_list_price#165,ss_ext_tax#166,ss_coupon_amt#167,ss_net_paid#168,ss_net_paid_inc_tax#169,ss_net_profit#170,ss_sold_date_sk#171] parquet\n                        +- LogicalQueryStage Project [d_date_sk#328], BroadcastQueryStage 4\n"
      },
      "IM" : {
        "inputSizeInBytes" : 39428087086816,
        "inputRowCount" : 3282463906760
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 14,
        "FinishedTasksNum" : 32,
        "FinishedTasksTotalTimeInMs" : 45918.0,
        "FinishedTasksDistributionInMs" : [ 69.0, 106.0, 1082.0, 1738.0, 6606.0 ]
      },
      "StartTimeInMs" : 1702227106882,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 13925,
        "IOBytes" : {
          "Total" : 242869027,
          "Details" : {
            "IR" : 65404381,
            "IW" : 0,
            "SR" : 88732323,
            "SW" : 88732323
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "45" : {
            "sign" : -541859252,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#387, d_date_id#388, d_date#389, d_month_seq#390, d_week_seq#391, d_quarter_seq#392, d_year#393, d_dow#394, d_moy#395, d_dom#396, d_qoy#397, d_fy_year#398, d_fy_quarter_seq#399, d_fy_week_seq#400, d_day_name#401, d_quarter_name#402, d_holiday#403, d_weekend#404, d_following_holiday#405, d_first_dom#406, d_last_dom#407, d_same_day_ly#408, d_same_day_lq#409, d_current_day#410, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "34" : {
            "sign" : -971550717,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#149, ss_item_sk#150, ss_customer_sk#151, ss_cdemo_sk#152, ss_hdemo_sk#153, ss_addr_sk#154, ss_store_sk#155, ss_promo_sk#156, ss_ticket_number#157L, ss_quantity#158, ss_wholesale_cost#159, ss_list_price#160, ss_sales_price#161, ss_ext_discount_amt#162, ss_ext_sales_price#163, ss_ext_wholesale_cost#164, ss_ext_list_price#165, ss_ext_tax#166, ss_coupon_amt#167, ss_net_paid#168, ss_net_paid_inc_tax#169, ss_net_profit#170, ss_sold_date_sk#171], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "12" : {
            "sign" : -2034418965,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 792229779237000000000,
            "rowCount" : 39611488961850000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#131 = customer_sk#318) "
          },
          "8" : {
            "sign" : -1002564459,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 40203200,
            "rowCount" : 2010160,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_current_addr_sk#135 = ca_address_sk#172) "
          },
          "19" : {
            "sign" : 185170765,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29651732864,
            "rowCount" : 142556408,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_item_sk#27) AND isnotnull(cs_sold_date_sk#46)) AND isnotnull(cs_bill_customer_sk#15)) AND dynamicpruning#419 [cs_sold_date_sk#46]) "
          },
          "23" : {
            "sign" : -144809072,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#103, d_date_id#104, d_date#105, d_month_seq#106, d_week_seq#107, d_quarter_seq#108, d_year#109, d_dow#110, d_moy#111, d_dom#112, d_qoy#113, d_fy_year#114, d_fy_quarter_seq#115, d_fy_week_seq#116, d_day_name#117, d_quarter_name#118, d_holiday#119, d_weekend#120, d_following_holiday#121, d_first_dom#122, d_last_dom#123, d_same_day_ly#124, d_same_day_lq#125, d_current_day#126, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "4" : {
            "sign" : 1958021068,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 23812188,
            "rowCount" : 1984349,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_sk#131], [cast((MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#163)),17,2) / 50) as int) AS segment#326] "
          },
          "40" : {
            "sign" : -1495890998,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 18450,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#365) AND isnotnull(d_moy#367)) AND ((d_year#365 = 1999) AND (d_moy#367 = 3))) "
          },
          "15" : {
            "sign" : -1614413795,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 257426410800,
            "rowCount" : 16089150675,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_sk#318, item_sk#319] "
          },
          "11" : {
            "sign" : -680370333,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 633783823389600000000,
            "rowCount" : 39611488961850000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#131, c_current_addr_sk#135] "
          },
          "9" : {
            "sign" : 462205045,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2464620,
            "rowCount" : 205385,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#172], BroadcastQueryStage 5 "
          },
          "44" : {
            "sign" : 1450156779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 18450,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#393) AND isnotnull(d_moy#395)) AND ((d_year#393 = 1999) AND (d_moy#395 = 3))) "
          },
          "33" : {
            "sign" : -1660520969,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39925696056,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_customer_sk#151) AND isnotnull(ss_sold_date_sk#171)) AND dynamicpruning#420 [ss_sold_date_sk#171]) "
          },
          "22" : {
            "sign" : -275590035,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 18450,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#111) AND isnotnull(d_year#109)) AND ((d_moy#111 = 3) AND (d_year#109 = 1999))) AND isnotnull(d_date_sk#103)) "
          },
          "26" : {
            "sign" : -432544473,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#47, ws_ship_date_sk#48, ws_item_sk#49, ws_bill_customer_sk#50, ws_bill_cdemo_sk#51, ws_bill_hdemo_sk#52, ws_bill_addr_sk#53, ws_ship_customer_sk#54, ws_ship_cdemo_sk#55, ws_ship_hdemo_sk#56, ws_ship_addr_sk#57, ws_web_page_sk#58, ws_web_site_sk#59, ws_ship_mode_sk#60, ws_warehouse_sk#61, ws_promo_sk#62, ws_order_number#63L, ws_quantity#64, ws_wholesale_cost#65, ws_list_price#66, ws_sales_price#67, ws_ext_discount_amt#68, ws_ext_sales_price#69, ws_ext_wholesale_cost#70, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "37" : {
            "sign" : 573641338,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#328, d_date_id#329, d_date#330, d_month_seq#331, d_week_seq#332, d_quarter_seq#333, d_year#334, d_dow#335, d_moy#336, d_dom#337, d_qoy#338, d_fy_year#339, d_fy_quarter_seq#340, d_fy_week_seq#341, d_day_name#342, d_quarter_name#343, d_holiday#344, d_weekend#345, d_following_holiday#346, d_first_dom#347, d_last_dom#348, d_same_day_ly#349, d_same_day_lq#350, d_current_day#351, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "13" : {
            "sign" : -1891025296,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 237668933771100,
            "rowCount" : 19805744480925,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_sk#318] "
          },
          "46" : {
            "sign" : -1034105569,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 876588,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#328], BroadcastQueryStage 4 "
          },
          "24" : {
            "sign" : -1424925611,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1439312020,
            "rowCount" : 71965601,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_sold_date_sk#80 AS sold_date_sk#320, ws_bill_customer_sk#50 AS customer_sk#321, ws_item_sk#49 AS item_sk#322] "
          },
          "35" : {
            "sign" : -1811606857,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 876588,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#328] "
          },
          "16" : {
            "sign" : -2097477336,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 386139616200,
            "rowCount" : 16089150675,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (sold_date_sk#317 = d_date_sk#103) "
          },
          "5" : {
            "sign" : -741927052,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 5500879020,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#131, ss_ext_sales_price#163] "
          },
          "10" : {
            "sign" : -784953982,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 25522816333216,
            "rowCount" : 1595176020826,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_sk#131, c_current_addr_sk#135], [c_customer_sk#131, c_current_addr_sk#135] "
          },
          "21" : {
            "sign" : 128757161,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 900,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#103] "
          },
          "43" : {
            "sign" : 1316066587,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 900,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [(d_month_seq#390 + 3) AS (d_month_seq + 3)#357] "
          },
          "32" : {
            "sign" : -666427669,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6304057272,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#151, ss_ext_sales_price#163, ss_sold_date_sk#171] "
          },
          "6" : {
            "sign" : 730377690,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 6601054824,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#131 = ss_customer_sk#151) "
          },
          "36" : {
            "sign" : -956519042,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_month_seq#331) AND ((d_month_seq#331 >= scalar-subquery#324 []) AND (d_month_seq#331 <= scalar-subquery#325 []))) AND isnotnull(d_date_sk#328)) "
          },
          "1" : {
            "sign" : 1625565249,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 47624376,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "39" : {
            "sign" : -1362384554,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 900,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [(d_month_seq#362 + 1) AS (d_month_seq + 1)#356] "
          },
          "17" : {
            "sign" : 411670351,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 4290440180,
            "rowCount" : 214522009,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "25" : {
            "sign" : -47790245,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14968845008,
            "rowCount" : 71965601,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(ws_item_sk#49) AND isnotnull(ws_sold_date_sk#80)) AND isnotnull(ws_bill_customer_sk#50)) AND dynamicpruning#419 [ws_sold_date_sk#80]) "
          },
          "14" : {
            "sign" : -338987739,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 396114889618500,
            "rowCount" : 19805744480925,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (item_sk#319 = i_item_sk#81) "
          },
          "31" : {
            "sign" : -1075478028,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 7435136380,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#171 = d_date_sk#328) "
          },
          "42" : {
            "sign" : -1879834014,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 900,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(d_month_seq + 3)#357], [(d_month_seq + 3)#357] "
          },
          "0" : {
            "sign" : 2091545916,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 2400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -914147946,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#13, cs_ship_date_sk#14, cs_bill_customer_sk#15, cs_bill_cdemo_sk#16, cs_bill_hdemo_sk#17, cs_bill_addr_sk#18, cs_ship_customer_sk#19, cs_ship_cdemo_sk#20, cs_ship_hdemo_sk#21, cs_ship_addr_sk#22, cs_call_center_sk#23, cs_catalog_page_sk#24, cs_ship_mode_sk#25, cs_warehouse_sk#26, cs_item_sk#27, cs_promo_sk#28, cs_order_number#29L, cs_quantity#30, cs_wholesale_cost#31, cs_list_price#32, cs_sales_price#33, cs_ext_discount_amt#34, cs_ext_sales_price#35, cs_ext_wholesale_cost#36, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "27" : {
            "sign" : 1692007655,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 900,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#103], BroadcastQueryStage 1 "
          },
          "2" : {
            "sign" : -1482484078,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 47624376,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [segment#326 ASC NULLS FIRST, num_customers#315L ASC NULLS FIRST], true "
          },
          "38" : {
            "sign" : -500062595,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 900,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(d_month_seq + 1)#356], [(d_month_seq + 1)#356] "
          },
          "18" : {
            "sign" : 1288241140,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2851128160,
            "rowCount" : 142556408,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_sold_date_sk#46 AS sold_date_sk#317, cs_bill_customer_sk#15 AS customer_sk#318, cs_item_sk#27 AS item_sk#319] "
          },
          "30" : {
            "sign" : 1246212009,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 5310811700,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#151, ss_ext_sales_price#163] "
          },
          "7" : {
            "sign" : -1219892893,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24121920,
            "rowCount" : 2010160,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#131] "
          },
          "29" : {
            "sign" : 1706886479,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 32000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#131, c_current_addr_sk#135], ShuffleQueryStage 3 "
          },
          "41" : {
            "sign" : -2094062293,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#359, d_date_id#360, d_date#361, d_month_seq#362, d_week_seq#363, d_quarter_seq#364, d_year#365, d_dow#366, d_moy#367, d_dom#368, d_qoy#369, d_fy_year#370, d_fy_quarter_seq#371, d_fy_week_seq#372, d_day_name#373, d_quarter_name#374, d_holiday#375, d_weekend#376, d_following_holiday#377, d_first_dom#378, d_last_dom#379, d_same_day_ly#380, d_same_day_lq#381, d_current_day#382, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : -333136139,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 47624376,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [segment#326], [segment#326, count(1) AS num_customers#315L, (segment#326 * 50) AS segment_base#316] "
          },
          "28" : {
            "sign" : -977041583,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1114112,
            "rowCount" : 1231,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#81], BroadcastQueryStage 2 "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalRelation",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "LogicalRelation",
          "toId" : 22,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Filter",
          "toId" : 21,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Project",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 19,
          "fromName" : "Filter",
          "toId" : 18,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Project",
          "toId" : 17,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "LogicalRelation",
          "toId" : 25,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Project",
          "toId" : 25,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 25,
          "fromName" : "Filter",
          "toId" : 24,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Project",
          "toId" : 17,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Union",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "LogicalQueryStage",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Join",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalQueryStage",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Join",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Join",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Aggregate",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "LogicalRelation",
          "toId" : 33,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "LogicalRelation",
          "toId" : 36,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 41,
          "fromName" : "LogicalRelation",
          "toId" : 40,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "Filter",
          "toId" : 39,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "Project",
          "toId" : 38,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "Aggregate",
          "toId" : 36,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 45,
          "fromName" : "LogicalRelation",
          "toId" : 44,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 44,
          "fromName" : "Filter",
          "toId" : 43,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 43,
          "fromName" : "Project",
          "toId" : 42,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 42,
          "fromName" : "Aggregate",
          "toId" : 36,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 36,
          "fromName" : "Filter",
          "toId" : 35,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "Project",
          "toId" : 33,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 33,
          "fromName" : "Filter",
          "toId" : 32,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "Project",
          "toId" : 31,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 46,
          "fromName" : "LogicalQueryStage",
          "toId" : 31,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Join",
          "toId" : 30,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Aggregate",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [segment#326 ASC NULLS FIRST, num_customers#315L ASC NULLS FIRST], true\n      +- Aggregate [segment#326], [segment#326, count(1) AS num_customers#315L, (segment#326 * 50) AS segment_base#316]\n         +- Aggregate [c_customer_sk#131], [cast((MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#163)),17,2) / 50) as int) AS segment#326]\n            +- Project [c_customer_sk#131, ss_ext_sales_price#163]\n               +- Join Inner, (c_customer_sk#131 = ss_customer_sk#151)\n                  :- Project [c_customer_sk#131]\n                  :  +- Join Inner, (c_current_addr_sk#135 = ca_address_sk#172)\n                  :     :- LogicalQueryStage Project [ca_address_sk#172], BroadcastQueryStage 5\n                  :     +- Aggregate [c_customer_sk#131, c_current_addr_sk#135], [c_customer_sk#131, c_current_addr_sk#135]\n                  :        +- Project [c_customer_sk#131, c_current_addr_sk#135]\n                  :           +- Join Inner, (c_customer_sk#131 = customer_sk#318)\n                  :              :- Project [customer_sk#318]\n                  :              :  +- Join Inner, (item_sk#319 = i_item_sk#81)\n                  :              :     :- Project [customer_sk#318, item_sk#319]\n                  :              :     :  +- Join Inner, (sold_date_sk#317 = d_date_sk#103)\n                  :              :     :     :- Union false, false\n                  :              :     :     :  :- Project [cs_sold_date_sk#46 AS sold_date_sk#317, cs_bill_customer_sk#15 AS customer_sk#318, cs_item_sk#27 AS item_sk#319]\n                  :              :     :     :  :  +- Filter (((isnotnull(cs_item_sk#27) AND isnotnull(cs_sold_date_sk#46)) AND isnotnull(cs_bill_customer_sk#15)) AND dynamicpruning#419 [cs_sold_date_sk#46])\n                  :              :     :     :  :     :  +- Project [d_date_sk#103]\n                  :              :     :     :  :     :     +- Filter (((isnotnull(d_moy#111) AND isnotnull(d_year#109)) AND ((d_moy#111 = 3) AND (d_year#109 = 1999))) AND isnotnull(d_date_sk#103))\n                  :              :     :     :  :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_date_id#104,d_date#105,d_month_seq#106,d_week_seq#107,d_quarter_seq#108,d_year#109,d_dow#110,d_moy#111,d_dom#112,d_qoy#113,d_fy_year#114,d_fy_quarter_seq#115,d_fy_week_seq#116,d_day_name#117,d_quarter_name#118,d_holiday#119,d_weekend#120,d_following_holiday#121,d_first_dom#122,d_last_dom#123,d_same_day_ly#124,d_same_day_lq#125,d_current_day#126,... 4 more fields] parquet\n                  :              :     :     :  :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#13,cs_ship_date_sk#14,cs_bill_customer_sk#15,cs_bill_cdemo_sk#16,cs_bill_hdemo_sk#17,cs_bill_addr_sk#18,cs_ship_customer_sk#19,cs_ship_cdemo_sk#20,cs_ship_hdemo_sk#21,cs_ship_addr_sk#22,cs_call_center_sk#23,cs_catalog_page_sk#24,cs_ship_mode_sk#25,cs_warehouse_sk#26,cs_item_sk#27,cs_promo_sk#28,cs_order_number#29L,cs_quantity#30,cs_wholesale_cost#31,cs_list_price#32,cs_sales_price#33,cs_ext_discount_amt#34,cs_ext_sales_price#35,cs_ext_wholesale_cost#36,... 10 more fields] parquet\n                  :              :     :     :  +- Project [ws_sold_date_sk#80 AS sold_date_sk#320, ws_bill_customer_sk#50 AS customer_sk#321, ws_item_sk#49 AS item_sk#322]\n                  :              :     :     :     +- Filter (((isnotnull(ws_item_sk#49) AND isnotnull(ws_sold_date_sk#80)) AND isnotnull(ws_bill_customer_sk#50)) AND dynamicpruning#419 [ws_sold_date_sk#80])\n                  :              :     :     :        :  +- Project [d_date_sk#103]\n                  :              :     :     :        :     +- Filter (((isnotnull(d_moy#111) AND isnotnull(d_year#109)) AND ((d_moy#111 = 3) AND (d_year#109 = 1999))) AND isnotnull(d_date_sk#103))\n                  :              :     :     :        :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_date_id#104,d_date#105,d_month_seq#106,d_week_seq#107,d_quarter_seq#108,d_year#109,d_dow#110,d_moy#111,d_dom#112,d_qoy#113,d_fy_year#114,d_fy_quarter_seq#115,d_fy_week_seq#116,d_day_name#117,d_quarter_name#118,d_holiday#119,d_weekend#120,d_following_holiday#121,d_first_dom#122,d_last_dom#123,d_same_day_ly#124,d_same_day_lq#125,d_current_day#126,... 4 more fields] parquet\n                  :              :     :     :        +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#47,ws_ship_date_sk#48,ws_item_sk#49,ws_bill_customer_sk#50,ws_bill_cdemo_sk#51,ws_bill_hdemo_sk#52,ws_bill_addr_sk#53,ws_ship_customer_sk#54,ws_ship_cdemo_sk#55,ws_ship_hdemo_sk#56,ws_ship_addr_sk#57,ws_web_page_sk#58,ws_web_site_sk#59,ws_ship_mode_sk#60,ws_warehouse_sk#61,ws_promo_sk#62,ws_order_number#63L,ws_quantity#64,ws_wholesale_cost#65,ws_list_price#66,ws_sales_price#67,ws_ext_discount_amt#68,ws_ext_sales_price#69,ws_ext_wholesale_cost#70,... 10 more fields] parquet\n                  :              :     :     +- LogicalQueryStage Project [d_date_sk#103], BroadcastQueryStage 1\n                  :              :     +- LogicalQueryStage Project [i_item_sk#81], BroadcastQueryStage 2\n                  :              +- LogicalQueryStage Project [c_customer_sk#131, c_current_addr_sk#135], ShuffleQueryStage 3\n                  +- Project [ss_customer_sk#151, ss_ext_sales_price#163]\n                     +- Join Inner, (ss_sold_date_sk#171 = d_date_sk#328)\n                        :- Project [ss_customer_sk#151, ss_ext_sales_price#163, ss_sold_date_sk#171]\n                        :  +- Filter ((isnotnull(ss_customer_sk#151) AND isnotnull(ss_sold_date_sk#171)) AND dynamicpruning#420 [ss_sold_date_sk#171])\n                        :     :  +- Project [d_date_sk#328]\n                        :     :     +- Filter ((isnotnull(d_month_seq#331) AND ((d_month_seq#331 >= scalar-subquery#324 []) AND (d_month_seq#331 <= scalar-subquery#325 []))) AND isnotnull(d_date_sk#328))\n                        :     :        :  :- Aggregate [(d_month_seq + 1)#356], [(d_month_seq + 1)#356]\n                        :     :        :  :  +- Project [(d_month_seq#362 + 1) AS (d_month_seq + 1)#356]\n                        :     :        :  :     +- Filter ((isnotnull(d_year#365) AND isnotnull(d_moy#367)) AND ((d_year#365 = 1999) AND (d_moy#367 = 3)))\n                        :     :        :  :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#359,d_date_id#360,d_date#361,d_month_seq#362,d_week_seq#363,d_quarter_seq#364,d_year#365,d_dow#366,d_moy#367,d_dom#368,d_qoy#369,d_fy_year#370,d_fy_quarter_seq#371,d_fy_week_seq#372,d_day_name#373,d_quarter_name#374,d_holiday#375,d_weekend#376,d_following_holiday#377,d_first_dom#378,d_last_dom#379,d_same_day_ly#380,d_same_day_lq#381,d_current_day#382,... 4 more fields] parquet\n                        :     :        :  +- Aggregate [(d_month_seq + 3)#357], [(d_month_seq + 3)#357]\n                        :     :        :     +- Project [(d_month_seq#390 + 3) AS (d_month_seq + 3)#357]\n                        :     :        :        +- Filter ((isnotnull(d_year#393) AND isnotnull(d_moy#395)) AND ((d_year#393 = 1999) AND (d_moy#395 = 3)))\n                        :     :        :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#387,d_date_id#388,d_date#389,d_month_seq#390,d_week_seq#391,d_quarter_seq#392,d_year#393,d_dow#394,d_moy#395,d_dom#396,d_qoy#397,d_fy_year#398,d_fy_quarter_seq#399,d_fy_week_seq#400,d_day_name#401,d_quarter_name#402,d_holiday#403,d_weekend#404,d_following_holiday#405,d_first_dom#406,d_last_dom#407,d_same_day_ly#408,d_same_day_lq#409,d_current_day#410,... 4 more fields] parquet\n                        :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#328,d_date_id#329,d_date#330,d_month_seq#331,d_week_seq#332,d_quarter_seq#333,d_year#334,d_dow#335,d_moy#336,d_dom#337,d_qoy#338,d_fy_year#339,d_fy_quarter_seq#340,d_fy_week_seq#341,d_day_name#342,d_quarter_name#343,d_holiday#344,d_weekend#345,d_following_holiday#346,d_first_dom#347,d_last_dom#348,d_same_day_ly#349,d_same_day_lq#350,d_current_day#351,... 4 more fields] parquet\n                        :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#149,ss_item_sk#150,ss_customer_sk#151,ss_cdemo_sk#152,ss_hdemo_sk#153,ss_addr_sk#154,ss_store_sk#155,ss_promo_sk#156,ss_ticket_number#157L,ss_quantity#158,ss_wholesale_cost#159,ss_list_price#160,ss_sales_price#161,ss_ext_discount_amt#162,ss_ext_sales_price#163,ss_ext_wholesale_cost#164,ss_ext_list_price#165,ss_ext_tax#166,ss_coupon_amt#167,ss_net_paid#168,ss_net_paid_inc_tax#169,ss_net_profit#170,ss_sold_date_sk#171] parquet\n                        +- LogicalQueryStage Project [d_date_sk#328], BroadcastQueryStage 4\n"
      },
      "IM" : {
        "inputSizeInBytes" : 86616731204,
        "inputRowCount" : 492581734
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 8,
        "FinishedTasksNum" : 15,
        "FinishedTasksTotalTimeInMs" : 18589.0,
        "FinishedTasksDistributionInMs" : [ 80.0, 1082.0, 1095.0, 1729.0, 3298.0 ]
      },
      "StartTimeInMs" : 1702227098881,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 21926,
        "IOBytes" : {
          "Total" : 249566524,
          "Details" : {
            "IR" : 72101760,
            "IW" : 0,
            "SR" : 88732382,
            "SW" : 88732382
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "12" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1278555431,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 193504,
                "rowCount" : 12094
              },
              "compileTime" : {
                "sizeInBytes" : 39386240852400,
                "rowCount" : 3282186737700
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [customer_sk#318], ShuffleQueryStage 6 "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Project [customer_sk#318], ShuffleQueryStage 6\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1181368408,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 193504,
            "rowCount" : 12094,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [customer_sk#318] Arguments: 6 "
          }
        },
        "links" : [ ],
        "rawPlan" : "ShuffleQueryStage 6\n+- Exchange hashpartitioning(customer_sk#318, 200), ENSURE_REQUIREMENTS, [plan_id=1420]\n   +- *(9) Project [customer_sk#318]\n      +- *(9) BroadcastHashJoin [item_sk#319], [i_item_sk#81], Inner, BuildRight, false\n         :- *(9) Project [customer_sk#318, item_sk#319]\n         :  +- *(9) BroadcastHashJoin [sold_date_sk#317], [d_date_sk#103], Inner, BuildRight, false\n         :     :- Union\n         :     :  :- *(7) Project [cs_sold_date_sk#46 AS sold_date_sk#317, cs_bill_customer_sk#15 AS customer_sk#318, cs_item_sk#27 AS item_sk#319]\n         :     :  :  +- *(7) Filter (isnotnull(cs_item_sk#27) AND isnotnull(cs_bill_customer_sk#15))\n         :     :  :     +- *(7) ColumnarToRow\n         :     :  :        +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_bill_customer_sk#15,cs_item_sk#27,cs_sold_date_sk#46] Batched: true, DataFilters: [isnotnull(cs_item_sk#27), isnotnull(cs_bill_customer_sk#15)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#46), dynamicpruningexpression(cs_sold_date_sk#46 IN dynamicpruning#419)], PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_bill_customer_sk)], ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int>\n         :     :  :              +- SubqueryBroadcast dynamicpruning#419, 0, [d_date_sk#103], [id=#1342]\n         :     :  :                 +- AdaptiveSparkPlan isFinalPlan=true\n                                       +- == Final Plan ==\n                                          BroadcastQueryStage 1\n                                          +- ReusedExchange [d_date_sk#103], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=490]\n                                       +- == Initial Plan ==\n                                          BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1339]\n                                          +- Project [d_date_sk#103]\n                                             +- Filter ((((isnotnull(d_moy#111) AND isnotnull(d_year#109)) AND (d_moy#111 = 3)) AND (d_year#109 = 1999)) AND isnotnull(d_date_sk#103))\n                                                +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_year#109,d_moy#111] Batched: true, DataFilters: [isnotnull(d_moy#111), isnotnull(d_year#109), (d_moy#111 = 3), (d_year#109 = 1999), isnotnull(d_d..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,3), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n         :     :  +- *(8) Project [ws_sold_date_sk#80 AS sold_date_sk#320, ws_bill_customer_sk#50 AS customer_sk#321, ws_item_sk#49 AS item_sk#322]\n         :     :     +- *(8) Filter (isnotnull(ws_item_sk#49) AND isnotnull(ws_bill_customer_sk#50))\n         :     :        +- *(8) ColumnarToRow\n         :     :           +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_item_sk#49,ws_bill_customer_sk#50,ws_sold_date_sk#80] Batched: true, DataFilters: [isnotnull(ws_item_sk#49), isnotnull(ws_bill_customer_sk#50)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#80), dynamicpruningexpression(ws_sold_date_sk#80 IN dynamicpruning#419)], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_bill_customer_sk)], ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int>\n         :     :                 +- ReusedSubquery SubqueryBroadcast dynamicpruning#419, 0, [d_date_sk#103], [id=#1342]\n         :     +- BroadcastQueryStage 1\n         :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=490]\n         :           +- *(2) Project [d_date_sk#103]\n         :              +- *(2) Filter ((((isnotnull(d_moy#111) AND isnotnull(d_year#109)) AND (d_moy#111 = 3)) AND (d_year#109 = 1999)) AND isnotnull(d_date_sk#103))\n         :                 +- *(2) ColumnarToRow\n         :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_year#109,d_moy#111] Batched: true, DataFilters: [isnotnull(d_moy#111), isnotnull(d_year#109), (d_moy#111 = 3), (d_year#109 = 1999), isnotnull(d_d..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,3), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n         +- BroadcastQueryStage 2\n            +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=511]\n               +- *(3) Project [i_item_sk#81]\n                  +- *(3) Filter ((((isnotnull(i_category#93) AND isnotnull(i_class#91)) AND (i_category#93 = Jewelry)) AND (i_class#91 = consignment)) AND isnotnull(i_item_sk#81))\n                     +- *(3) ColumnarToRow\n                        +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#81,i_class#91,i_category#93] Batched: true, DataFilters: [isnotnull(i_category#93), isnotnull(i_class#91), (i_category#93 = Jewelry), (i_class#91 = consig..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_category), IsNotNull(i_class), EqualTo(i_category,Jewelry), EqualTo(i_class,consignm..., ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 193504,
        "inputRowCount" : 12094
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "3" : [ 1645, 1693, 1568, 1938, 1931, 1563, 1677, 1798, 1712, 2024, 1803, 1821, 1991, 1732, 1775, 1678, 1860, 1682, 1700, 2109, 1866, 1802, 1978, 1733, 1752, 1657, 1896, 1871, 1836, 2008, 1943, 1744, 1896, 1704, 1814, 1854, 1357, 1639, 1816, 1783, 1804, 1957, 1784, 1775, 1780, 1856, 2005, 1522, 1712, 1874, 1710, 1570, 1675, 1641, 1916, 1790, 1826, 1635, 1786, 1792, 1860, 2096, 1913, 1800, 1849, 1848, 2112, 1752, 1660, 1790, 1927, 1702, 2033, 1725, 1898, 1692, 1740, 1774, 1928, 1720, 2004, 1744, 1857, 1963, 2110, 1904, 1711, 1844, 1764, 1627, 1554, 1839, 1808, 1981, 1880, 1984, 1760, 1715, 2014, 2057, 1564, 1698, 1979, 1760, 1617, 1784, 1750, 1916, 1846, 1598, 1792, 1517, 1848, 1520, 1604, 2011, 1768, 1846, 2033, 1969, 1553, 1712, 1840, 1753, 1933, 1800, 1816, 1871, 1730, 1442, 1903, 1733, 1880, 1786, 1312, 1789, 1460, 1723, 1296, 1898, 2065, 1645, 1686, 1921, 2029, 2173, 2060, 1997, 1813, 1878, 1965, 1833, 1933, 1838, 1953, 1647, 1690, 1941, 1912, 1665, 1760, 1912, 1686, 1839, 1696, 2106, 1705, 1886, 1529, 2138, 1842, 1712, 1720, 1762, 1811, 1936, 1744, 1870, 1718, 1865, 1966, 1809, 2048, 1444, 1841, 1625, 1957, 1617, 1747, 2001, 1600, 1787, 1740, 1746, 1945, 2009, 1873, 1916, 1582, 1885 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 12,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 18 ],
      "Objectives" : {
        "DurationInMs" : 173,
        "TotalTasksDurationInMs" : 167,
        "IOBytes" : {
          "Total" : 346040,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 346040,
            "SW" : 0
          }
        }
      }
    },
    "8" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1692118338,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 32000000,
                "rowCount" : 2000000
              },
              "compileTime" : {
                "sizeInBytes" : 32000000,
                "rowCount" : 2000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#131, c_current_addr_sk#135] "
          },
          "1" : {
            "sign" : -373996026,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              },
              "compileTime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#131) AND isnotnull(c_current_addr_sk#135)) "
          },
          "2" : {
            "sign" : 1043707143,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              },
              "compileTime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#131, c_customer_id#132, c_current_cdemo_sk#133, c_current_hdemo_sk#134, c_current_addr_sk#135, c_first_shipto_date_sk#136, c_first_sales_date_sk#137, c_salutation#138, c_first_name#139, c_last_name#140, c_preferred_cust_flag#141, c_birth_day#142, c_birth_month#143, c_birth_year#144, c_birth_country#145, c_login#146, c_email_address#147, c_last_review_date#148], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [c_customer_sk#131, c_current_addr_sk#135]\n+- Filter (isnotnull(c_customer_sk#131) AND isnotnull(c_current_addr_sk#135))\n   +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#131,c_customer_id#132,c_current_cdemo_sk#133,c_current_hdemo_sk#134,c_current_addr_sk#135,c_first_shipto_date_sk#136,c_first_sales_date_sk#137,c_salutation#138,c_first_name#139,c_last_name#140,c_preferred_cust_flag#141,c_birth_day#142,c_birth_month#143,c_birth_year#144,c_birth_country#145,c_login#146,c_email_address#147,c_last_review_date#148] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 352647196,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 32000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [c_customer_sk#131, c_current_addr_sk#135] Condition : (isnotnull(c_customer_sk#131) AND isnotnull(c_current_addr_sk#135)) "
          },
          "1" : {
            "sign" : 1056993309,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 32000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer Output [2]: [c_customer_sk#131, c_current_addr_sk#135] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer] PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)] ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(c_customer_sk#131) AND isnotnull(c_current_addr_sk#135))\n+- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#131,c_current_addr_sk#135] Batched: true, DataFilters: [isnotnull(c_customer_sk#131), isnotnull(c_current_addr_sk#135)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)], ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 32000000,
        "inputRowCount" : 2000000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 20162,
        "TotalTasksDurationInMs" : 54814,
        "IOBytes" : {
          "Total" : 36405687,
          "Details" : {
            "IR" : 16147620,
            "IW" : 0,
            "SR" : 0,
            "SW" : 20258067
          }
        }
      }
    },
    "4" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 2010165408,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 16,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 900,
                "rowCount" : -1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [(d_month_seq + 1)#356], [(d_month_seq + 1)#356], HashAggregate(keys=[(d_month_seq + 1)#356], functions=[]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [(d_month_seq + 1)#356], [(d_month_seq + 1)#356], HashAggregate(keys=[(d_month_seq + 1)#356], functions=[])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 771562331,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [1]: [(d_month_seq + 1)#356] Keys [1]: [(d_month_seq + 1)#356] Functions: [] Aggregate Attributes: [] Results [1]: [(d_month_seq + 1)#356] "
          },
          "1" : {
            "sign" : -1880695144,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 900,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [(d_month_seq + 1)#356] Arguments: 0 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[(d_month_seq + 1)#356], functions=[], output=[(d_month_seq + 1)#356])\n+- ShuffleQueryStage 0\n   +- Exchange hashpartitioning((d_month_seq + 1)#356, 200), ENSURE_REQUIREMENTS, [plan_id=610]\n      +- *(1) HashAggregate(keys=[(d_month_seq + 1)#356], functions=[], output=[(d_month_seq + 1)#356])\n         +- *(1) Project [(d_month_seq#362 + 1) AS (d_month_seq + 1)#356]\n            +- *(1) Filter (((isnotnull(d_year#365) AND isnotnull(d_moy#367)) AND (d_year#365 = 1999)) AND (d_moy#367 = 3))\n               +- *(1) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#362,d_year#365,d_moy#367] Batched: true, DataFilters: [isnotnull(d_year#365), isnotnull(d_moy#367), (d_year#365 = 1999), (d_moy#367 = 3)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), EqualTo(d_moy,3)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 16,
        "inputRowCount" : 1
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "1" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 15,
        "FinishedTasksTotalTimeInMs" : 34676.0,
        "FinishedTasksDistributionInMs" : [ 1082.0, 1085.0, 1213.0, 3298.0, 6606.0 ]
      },
      "QueryStageOptimizationId" : 10,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 10 ],
      "Objectives" : {
        "DurationInMs" : 340,
        "TotalTasksDurationInMs" : 331,
        "IOBytes" : {
          "Total" : 59,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 59,
            "SW" : 0
          }
        }
      }
    },
    "11" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -971550717,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              },
              "compileTime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#149, ss_item_sk#150, ss_customer_sk#151, ss_cdemo_sk#152, ss_hdemo_sk#153, ss_addr_sk#154, ss_store_sk#155, ss_promo_sk#156, ss_ticket_number#157L, ss_quantity#158, ss_wholesale_cost#159, ss_list_price#160, ss_sales_price#161, ss_ext_discount_amt#162, ss_ext_sales_price#163, ss_ext_wholesale_cost#164, ss_ext_list_price#165, ss_ext_tax#166, ss_coupon_amt#167, ss_net_paid#168, ss_net_paid_inc_tax#169, ss_net_profit#170, ss_sold_date_sk#171], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : -1141799836,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7435136380,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 7435136380,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#171 = d_date_sk#328) "
          },
          "0" : {
            "sign" : -1739781203,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5310811700,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 5310811700,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#151, ss_ext_sales_price#163] "
          },
          "2" : {
            "sign" : -666427669,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6304057272,
                "rowCount" : 262669053
              },
              "compileTime" : {
                "sizeInBytes" : 6304057272,
                "rowCount" : 262669053
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#151, ss_ext_sales_price#163, ss_sold_date_sk#171] "
          },
          "3" : {
            "sign" : -1660520969,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 39925696056,
                "rowCount" : 262669053
              },
              "compileTime" : {
                "sizeInBytes" : 39925696056,
                "rowCount" : 262669053
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_customer_sk#151) AND isnotnull(ss_sold_date_sk#171)) AND dynamicpruning#420 [ss_sold_date_sk#171]) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_customer_sk#151, ss_ext_sales_price#163]\n+- Join Inner, (ss_sold_date_sk#171 = d_date_sk#328)\n   :- Project [ss_customer_sk#151, ss_ext_sales_price#163, ss_sold_date_sk#171]\n   :  +- Filter ((isnotnull(ss_customer_sk#151) AND isnotnull(ss_sold_date_sk#171)) AND dynamicpruning#420 [ss_sold_date_sk#171])\n   :     :  +- Project [d_date_sk#328]\n   :     :     +- Filter ((isnotnull(d_month_seq#331) AND ((d_month_seq#331 >= scalar-subquery#324 []) AND (d_month_seq#331 <= scalar-subquery#325 []))) AND isnotnull(d_date_sk#328))\n   :     :        :  :- Aggregate [(d_month_seq + 1)#356], [(d_month_seq + 1)#356]\n   :     :        :  :  +- Project [(d_month_seq#362 + 1) AS (d_month_seq + 1)#356]\n   :     :        :  :     +- Filter ((isnotnull(d_year#365) AND isnotnull(d_moy#367)) AND ((d_year#365 = 1999) AND (d_moy#367 = 3)))\n   :     :        :  :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#359,d_date_id#360,d_date#361,d_month_seq#362,d_week_seq#363,d_quarter_seq#364,d_year#365,d_dow#366,d_moy#367,d_dom#368,d_qoy#369,d_fy_year#370,d_fy_quarter_seq#371,d_fy_week_seq#372,d_day_name#373,d_quarter_name#374,d_holiday#375,d_weekend#376,d_following_holiday#377,d_first_dom#378,d_last_dom#379,d_same_day_ly#380,d_same_day_lq#381,d_current_day#382,... 4 more fields] parquet\n   :     :        :  +- Aggregate [(d_month_seq + 3)#357], [(d_month_seq + 3)#357]\n   :     :        :     +- Project [(d_month_seq#390 + 3) AS (d_month_seq + 3)#357]\n   :     :        :        +- Filter ((isnotnull(d_year#393) AND isnotnull(d_moy#395)) AND ((d_year#393 = 1999) AND (d_moy#395 = 3)))\n   :     :        :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#387,d_date_id#388,d_date#389,d_month_seq#390,d_week_seq#391,d_quarter_seq#392,d_year#393,d_dow#394,d_moy#395,d_dom#396,d_qoy#397,d_fy_year#398,d_fy_quarter_seq#399,d_fy_week_seq#400,d_day_name#401,d_quarter_name#402,d_holiday#403,d_weekend#404,d_following_holiday#405,d_first_dom#406,d_last_dom#407,d_same_day_ly#408,d_same_day_lq#409,d_current_day#410,... 4 more fields] parquet\n   :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#328,d_date_id#329,d_date#330,d_month_seq#331,d_week_seq#332,d_quarter_seq#333,d_year#334,d_dow#335,d_moy#336,d_dom#337,d_qoy#338,d_fy_year#339,d_fy_quarter_seq#340,d_fy_week_seq#341,d_day_name#342,d_quarter_name#343,d_holiday#344,d_weekend#345,d_following_holiday#346,d_first_dom#347,d_last_dom#348,d_same_day_ly#349,d_same_day_lq#350,d_current_day#351,... 4 more fields] parquet\n   :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#149,ss_item_sk#150,ss_customer_sk#151,ss_cdemo_sk#152,ss_hdemo_sk#153,ss_addr_sk#154,ss_store_sk#155,ss_promo_sk#156,ss_ticket_number#157L,ss_quantity#158,ss_wholesale_cost#159,ss_list_price#160,ss_sales_price#161,ss_ext_discount_amt#162,ss_ext_sales_price#163,ss_ext_wholesale_cost#164,ss_ext_list_price#165,ss_ext_tax#166,ss_coupon_amt#167,ss_net_paid#168,ss_net_paid_inc_tax#169,ss_net_profit#170,ss_sold_date_sk#171] parquet\n   +- Project [d_date_sk#328]\n      +- Filter ((isnotnull(d_month_seq#331) AND ((d_month_seq#331 >= scalar-subquery#324 []) AND (d_month_seq#331 <= scalar-subquery#325 []))) AND isnotnull(d_date_sk#328))\n         :  :- Aggregate [(d_month_seq + 1)#356], [(d_month_seq + 1)#356]\n         :  :  +- Project [(d_month_seq#362 + 1) AS (d_month_seq + 1)#356]\n         :  :     +- Filter ((isnotnull(d_year#365) AND isnotnull(d_moy#367)) AND ((d_year#365 = 1999) AND (d_moy#367 = 3)))\n         :  :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#359,d_date_id#360,d_date#361,d_month_seq#362,d_week_seq#363,d_quarter_seq#364,d_year#365,d_dow#366,d_moy#367,d_dom#368,d_qoy#369,d_fy_year#370,d_fy_quarter_seq#371,d_fy_week_seq#372,d_day_name#373,d_quarter_name#374,d_holiday#375,d_weekend#376,d_following_holiday#377,d_first_dom#378,d_last_dom#379,d_same_day_ly#380,d_same_day_lq#381,d_current_day#382,... 4 more fields] parquet\n         :  +- Aggregate [(d_month_seq + 3)#357], [(d_month_seq + 3)#357]\n         :     +- Project [(d_month_seq#390 + 3) AS (d_month_seq + 3)#357]\n         :        +- Filter ((isnotnull(d_year#393) AND isnotnull(d_moy#395)) AND ((d_year#393 = 1999) AND (d_moy#395 = 3)))\n         :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#387,d_date_id#388,d_date#389,d_month_seq#390,d_week_seq#391,d_quarter_seq#392,d_year#393,d_dow#394,d_moy#395,d_dom#396,d_qoy#397,d_fy_year#398,d_fy_quarter_seq#399,d_fy_week_seq#400,d_day_name#401,d_quarter_name#402,d_holiday#403,d_weekend#404,d_following_holiday#405,d_first_dom#406,d_last_dom#407,d_same_day_ly#408,d_same_day_lq#409,d_current_day#410,... 4 more fields] parquet\n         +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#328,d_date_id#329,d_date#330,d_month_seq#331,d_week_seq#332,d_quarter_seq#333,d_year#334,d_dow#335,d_moy#336,d_dom#337,d_qoy#338,d_fy_year#339,d_fy_quarter_seq#340,d_fy_week_seq#341,d_day_name#342,d_quarter_name#343,d_holiday#344,d_weekend#345,d_following_holiday#346,d_first_dom#347,d_last_dom#348,d_same_day_ly#349,d_same_day_lq#350,d_current_day#351,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 948118925,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1049304,
            "rowCount" : 91,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#328] Arguments: 4 "
          },
          "1" : {
            "sign" : -1030055993,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 7435136380,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_sold_date_sk#171] Right keys [1]: [d_date_sk#328] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 2054389876,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 5310811700,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [ss_customer_sk#151, ss_ext_sales_price#163] Input [4]: [ss_customer_sk#151, ss_ext_sales_price#163, ss_sold_date_sk#171, d_date_sk#328] "
          },
          "2" : {
            "sign" : 1160179956,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 6304057272,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [ss_customer_sk#151, ss_ext_sales_price#163, ss_sold_date_sk#171] Condition : isnotnull(ss_customer_sk#151) "
          },
          "3" : {
            "sign" : 738300195,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 6304057272,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_sales Output [3]: [ss_customer_sk#151, ss_ext_sales_price#163, ss_sold_date_sk#171] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales/ss_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ss_sold_date_sk#171), dynamicpruningexpression(ss_sold_date_sk#171 IN dynamicpruning#420)] PushedFilters: [IsNotNull(ss_customer_sk)] ReadSchema: struct<ss_customer_sk:int,ss_ext_sales_price:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_sales",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_customer_sk#151, ss_ext_sales_price#163]\n+- BroadcastHashJoin [ss_sold_date_sk#171], [d_date_sk#328], Inner, BuildRight, false\n   :- Filter isnotnull(ss_customer_sk#151)\n   :  +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_customer_sk#151,ss_ext_sales_price#163,ss_sold_date_sk#171] Batched: true, DataFilters: [isnotnull(ss_customer_sk#151)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#171), dynamicpruningexpression(ss_sold_date_sk#171 IN dynamicpruning#4..., PushedFilters: [IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_ext_sales_price:decimal(7,2)>\n   :        +- SubqueryBroadcast dynamicpruning#420, 0, [d_date_sk#328], [id=#1624]\n   :           +- AdaptiveSparkPlan isFinalPlan=false\n   :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1621]\n   :                 +- Project [d_date_sk#328]\n   :                    +- Filter (((isnotnull(d_month_seq#331) AND (d_month_seq#331 >= Subquery subquery#324, [id=#180])) AND (d_month_seq#331 <= Subquery subquery#325, [id=#193])) AND isnotnull(d_date_sk#328))\n   :                       :  :- Subquery subquery#324, [id=#180]\n   :                       :  :  +- AdaptiveSparkPlan isFinalPlan=false\n   :                       :  :     +- HashAggregate(keys=[(d_month_seq + 1)#356], functions=[], output=[(d_month_seq + 1)#356])\n   :                       :  :        +- Exchange hashpartitioning((d_month_seq + 1)#356, 200), ENSURE_REQUIREMENTS, [plan_id=178]\n   :                       :  :           +- HashAggregate(keys=[(d_month_seq + 1)#356], functions=[], output=[(d_month_seq + 1)#356])\n   :                       :  :              +- Project [(d_month_seq#362 + 1) AS (d_month_seq + 1)#356]\n   :                       :  :                 +- Filter (((isnotnull(d_year#365) AND isnotnull(d_moy#367)) AND (d_year#365 = 1999)) AND (d_moy#367 = 3))\n   :                       :  :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#362,d_year#365,d_moy#367] Batched: true, DataFilters: [isnotnull(d_year#365), isnotnull(d_moy#367), (d_year#365 = 1999), (d_moy#367 = 3)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), EqualTo(d_moy,3)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n   :                       :  +- Subquery subquery#325, [id=#193]\n   :                       :     +- AdaptiveSparkPlan isFinalPlan=false\n   :                       :        +- HashAggregate(keys=[(d_month_seq + 3)#357], functions=[], output=[(d_month_seq + 3)#357])\n   :                       :           +- Exchange hashpartitioning((d_month_seq + 3)#357, 200), ENSURE_REQUIREMENTS, [plan_id=191]\n   :                       :              +- HashAggregate(keys=[(d_month_seq + 3)#357], functions=[], output=[(d_month_seq + 3)#357])\n   :                       :                 +- Project [(d_month_seq#390 + 3) AS (d_month_seq + 3)#357]\n   :                       :                    +- Filter (((isnotnull(d_year#393) AND isnotnull(d_moy#395)) AND (d_year#393 = 1999)) AND (d_moy#395 = 3))\n   :                       :                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#390,d_year#393,d_moy#395] Batched: true, DataFilters: [isnotnull(d_year#393), isnotnull(d_moy#395), (d_year#393 = 1999), (d_moy#395 = 3)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), EqualTo(d_moy,3)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n   :                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#328,d_month_seq#331] Batched: true, DataFilters: [isnotnull(d_month_seq#331), isnotnull(d_date_sk#328)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_month_seq:int>\n   +- BroadcastQueryStage 4\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=558]\n         +- *(5) Project [d_date_sk#328]\n            +- *(5) Filter (((isnotnull(d_month_seq#331) AND (d_month_seq#331 >= Subquery subquery#324, [id=#210])) AND (d_month_seq#331 <= Subquery subquery#325, [id=#223])) AND isnotnull(d_date_sk#328))\n               :  :- Subquery subquery#324, [id=#210]\n               :  :  +- AdaptiveSparkPlan isFinalPlan=true\n                        +- == Final Plan ==\n                           *(2) HashAggregate(keys=[(d_month_seq + 1)#356], functions=[], output=[(d_month_seq + 1)#356])\n                           +- AQEShuffleRead coalesced\n                              +- ShuffleQueryStage 0\n                                 +- Exchange hashpartitioning((d_month_seq + 1)#356, 200), ENSURE_REQUIREMENTS, [plan_id=610]\n                                    +- *(1) HashAggregate(keys=[(d_month_seq + 1)#356], functions=[], output=[(d_month_seq + 1)#356])\n                                       +- *(1) Project [(d_month_seq#362 + 1) AS (d_month_seq + 1)#356]\n                                          +- *(1) Filter (((isnotnull(d_year#365) AND isnotnull(d_moy#367)) AND (d_year#365 = 1999)) AND (d_moy#367 = 3))\n                                             +- *(1) ColumnarToRow\n                                                +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#362,d_year#365,d_moy#367] Batched: true, DataFilters: [isnotnull(d_year#365), isnotnull(d_moy#367), (d_year#365 = 1999), (d_moy#367 = 3)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), EqualTo(d_moy,3)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n                        +- == Initial Plan ==\n                           HashAggregate(keys=[(d_month_seq + 1)#356], functions=[], output=[(d_month_seq + 1)#356])\n                           +- Exchange hashpartitioning((d_month_seq + 1)#356, 200), ENSURE_REQUIREMENTS, [plan_id=208]\n                              +- HashAggregate(keys=[(d_month_seq + 1)#356], functions=[], output=[(d_month_seq + 1)#356])\n                                 +- Project [(d_month_seq#362 + 1) AS (d_month_seq + 1)#356]\n                                    +- Filter (((isnotnull(d_year#365) AND isnotnull(d_moy#367)) AND (d_year#365 = 1999)) AND (d_moy#367 = 3))\n                                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#362,d_year#365,d_moy#367] Batched: true, DataFilters: [isnotnull(d_year#365), isnotnull(d_moy#367), (d_year#365 = 1999), (d_moy#367 = 3)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), EqualTo(d_moy,3)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n               :  +- Subquery subquery#325, [id=#223]\n               :     +- AdaptiveSparkPlan isFinalPlan=true\n                        +- == Final Plan ==\n                           *(2) HashAggregate(keys=[(d_month_seq + 3)#357], functions=[], output=[(d_month_seq + 3)#357])\n                           +- AQEShuffleRead coalesced\n                              +- ShuffleQueryStage 0\n                                 +- Exchange hashpartitioning((d_month_seq + 3)#357, 200), ENSURE_REQUIREMENTS, [plan_id=600]\n                                    +- *(1) HashAggregate(keys=[(d_month_seq + 3)#357], functions=[], output=[(d_month_seq + 3)#357])\n                                       +- *(1) Project [(d_month_seq#390 + 3) AS (d_month_seq + 3)#357]\n                                          +- *(1) Filter (((isnotnull(d_year#393) AND isnotnull(d_moy#395)) AND (d_year#393 = 1999)) AND (d_moy#395 = 3))\n                                             +- *(1) ColumnarToRow\n                                                +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#390,d_year#393,d_moy#395] Batched: true, DataFilters: [isnotnull(d_year#393), isnotnull(d_moy#395), (d_year#393 = 1999), (d_moy#395 = 3)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), EqualTo(d_moy,3)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n                        +- == Initial Plan ==\n                           HashAggregate(keys=[(d_month_seq + 3)#357], functions=[], output=[(d_month_seq + 3)#357])\n                           +- Exchange hashpartitioning((d_month_seq + 3)#357, 200), ENSURE_REQUIREMENTS, [plan_id=221]\n                              +- HashAggregate(keys=[(d_month_seq + 3)#357], functions=[], output=[(d_month_seq + 3)#357])\n                                 +- Project [(d_month_seq#390 + 3) AS (d_month_seq + 3)#357]\n                                    +- Filter (((isnotnull(d_year#393) AND isnotnull(d_moy#395)) AND (d_year#393 = 1999)) AND (d_moy#395 = 3))\n                                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#390,d_year#393,d_moy#395] Batched: true, DataFilters: [isnotnull(d_year#393), isnotnull(d_moy#395), (d_year#393 = 1999), (d_moy#395 = 3)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), EqualTo(d_moy,3)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n               +- *(5) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#328,d_month_seq#331] Batched: true, DataFilters: [isnotnull(d_month_seq#331), isnotnull(d_date_sk#328)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_month_seq:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 6305106576,
        "inputRowCount" : 262669144
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 14,
        "FinishedTasksNum" : 32,
        "FinishedTasksTotalTimeInMs" : 45918.0,
        "FinishedTasksDistributionInMs" : [ 69.0, 106.0, 1082.0, 1738.0, 6606.0 ]
      },
      "QueryStageOptimizationId" : 11,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 16 ],
      "Objectives" : {
        "DurationInMs" : 2285,
        "TotalTasksDurationInMs" : 4433,
        "IOBytes" : {
          "Total" : 106291915,
          "Details" : {
            "IR" : 38164467,
            "IW" : 0,
            "SR" : 0,
            "SW" : 68127448
          }
        }
      }
    },
    "9" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -1315552887,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 246000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 246000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#172, ca_address_id#173, ca_street_number#174, ca_street_name#175, ca_street_type#176, ca_suite_number#177, ca_city#178, ca_county#179, ca_state#180, ca_zip#181, ca_country#182, ca_gmt_offset#183, ca_location_type#184], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : -1189525871,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 18895420,
                "rowCount" : 205385
              },
              "compileTime" : {
                "sizeInBytes" : 18895420,
                "rowCount" : 205385
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ca_county#179 = s_county#208) AND (ca_state#180 = s_state#209)) "
          },
          "0" : {
            "sign" : -724614597,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2464620,
                "rowCount" : 205385
              },
              "compileTime" : {
                "sizeInBytes" : 2464620,
                "rowCount" : 205385
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_address_sk#172] "
          },
          "2" : {
            "sign" : -1202574003,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 48910212,
                "rowCount" : 940581
              },
              "compileTime" : {
                "sizeInBytes" : 48910212,
                "rowCount" : 940581
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_address_sk#172, ca_county#179, ca_state#180] "
          },
          "3" : {
            "sign" : 1634902664,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 231382926,
                "rowCount" : 940581
              },
              "compileTime" : {
                "sizeInBytes" : 231382926,
                "rowCount" : 940581
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_address_sk#172) AND (isnotnull(ca_county#179) AND isnotnull(ca_state#180))) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ca_address_sk#172]\n+- Join Inner, ((ca_county#179 = s_county#208) AND (ca_state#180 = s_state#209))\n   :- Project [ca_address_sk#172, ca_county#179, ca_state#180]\n   :  +- Filter (isnotnull(ca_address_sk#172) AND (isnotnull(ca_county#179) AND isnotnull(ca_state#180)))\n   :     +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#172,ca_address_id#173,ca_street_number#174,ca_street_name#175,ca_street_type#176,ca_suite_number#177,ca_city#178,ca_county#179,ca_state#180,ca_zip#181,ca_country#182,ca_gmt_offset#183,ca_location_type#184] parquet\n   +- Project [s_county#208, s_state#209]\n      +- Filter (isnotnull(s_county#208) AND isnotnull(s_state#209))\n         +- Relation spark_catalog.tpcds_100.store[s_store_sk#185,s_store_id#186,s_rec_start_date#187,s_rec_end_date#188,s_closed_date_sk#189,s_store_name#190,s_number_employees#191,s_floor_space#192,s_hours#193,s_manager#194,s_market_id#195,s_geography_class#196,s_market_desc#197,s_market_manager#198,s_division_id#199,s_division_name#200,s_company_id#201,s_company_name#202,s_street_number#203,s_street_name#204,s_street_type#205,s_suite_number#206,s_city#207,s_county#208,... 5 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -2106137202,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 33570816,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [s_county#208, s_state#209] Arguments: 0 "
          },
          "1" : {
            "sign" : 1397050316,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 18895420,
            "rowCount" : 205385,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [2]: [ca_county#179, ca_state#180] Right keys [2]: [s_county#208, s_state#209] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 1412132584,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 2464620,
            "rowCount" : 205385,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [ca_address_sk#172] Input [5]: [ca_address_sk#172, ca_county#179, ca_state#180, s_county#208, s_state#209] "
          },
          "2" : {
            "sign" : 616946662,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 48910212,
            "rowCount" : 940581,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [ca_address_sk#172, ca_county#179, ca_state#180] Condition : ((isnotnull(ca_address_sk#172) AND isnotnull(ca_county#179)) AND isnotnull(ca_state#180)) "
          },
          "3" : {
            "sign" : 204197595,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 48910212,
            "rowCount" : 940581,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer_address Output [3]: [ca_address_sk#172, ca_county#179, ca_state#180] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_address] PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_county), IsNotNull(ca_state)] ReadSchema: struct<ca_address_sk:int,ca_county:string,ca_state:string> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer_address",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ca_address_sk#172]\n+- BroadcastHashJoin [ca_county#179, ca_state#180], [s_county#208, s_state#209], Inner, BuildRight, false\n   :- Filter ((isnotnull(ca_address_sk#172) AND isnotnull(ca_county#179)) AND isnotnull(ca_state#180))\n   :  +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#172,ca_county#179,ca_state#180] Batched: true, DataFilters: [isnotnull(ca_address_sk#172), isnotnull(ca_county#179), isnotnull(ca_state#180)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_county), IsNotNull(ca_state)], ReadSchema: struct<ca_address_sk:int,ca_county:string,ca_state:string>\n   +- BroadcastQueryStage 0\n      +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, false], input[1, string, false]),false), [plan_id=470]\n         +- *(1) Filter (isnotnull(s_county#208) AND isnotnull(s_state#209))\n            +- *(1) ColumnarToRow\n               +- FileScan parquet spark_catalog.tpcds_100.store[s_county#208,s_state#209] Batched: true, DataFilters: [isnotnull(s_county#208), isnotnull(s_state#209)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_county), IsNotNull(s_state)], ReadSchema: struct<s_county:string,s_state:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 82481028,
        "inputRowCount" : 940983
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 7,
        "FinishedTasksNum" : 16,
        "FinishedTasksTotalTimeInMs" : 21313.0,
        "FinishedTasksDistributionInMs" : [ 97.0, 1082.0, 1155.0, 1729.0, 3298.0 ]
      },
      "QueryStageOptimizationId" : 8,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 11 ],
      "Objectives" : {
        "DurationInMs" : 794,
        "TotalTasksDurationInMs" : 1465,
        "IOBytes" : {
          "Total" : 6256895,
          "Details" : {
            "IR" : 6256895,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "13" : {
      "QSLogical" : {
        "operators" : {
          "8" : {
            "sign" : -1294298512,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 387008000000,
                "rowCount" : 24188000000
              },
              "compileTime" : {
                "sizeInBytes" : 387008000000,
                "rowCount" : 24188000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#131, c_current_addr_sk#135] "
          },
          "4" : {
            "sign" : 1896762982,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1460906282188800000,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 1460906282188800000,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#131] "
          },
          "11" : {
            "sign" : 1922548774,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 185542176,
                "rowCount" : 7730924
              },
              "compileTime" : {
                "sizeInBytes" : 5310811700,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#151, ss_ext_sales_price#163], ShuffleQueryStage 7 "
          },
          "9" : {
            "sign" : 518878046,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 483760000000,
                "rowCount" : 24188000000
              },
              "compileTime" : {
                "sizeInBytes" : 483760000000,
                "rowCount" : 24188000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#131 = customer_sk#318) "
          },
          "5" : {
            "sign" : -2011357762,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2434843803648000000,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 2434843803648000000,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_current_addr_sk#135 = ca_address_sk#172) "
          },
          "10" : {
            "sign" : 1706886479,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 48000000,
                "rowCount" : 2000000
              },
              "compileTime" : {
                "sizeInBytes" : 32000000,
                "rowCount" : 2000000
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#131, c_current_addr_sk#135], ShuffleQueryStage 3 "
          },
          "6" : {
            "sign" : 462205045,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6291456,
                "rowCount" : 123616
              },
              "compileTime" : {
                "sizeInBytes" : 2464620,
                "rowCount" : 205385
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#172], BroadcastQueryStage 5 "
          },
          "1" : {
            "sign" : -1472869376,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 135529865264689997414400000,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 135529865264689997414400000,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_sk#131], [cast((MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#163)),17,2) / 50) as int) AS segment#326] "
          },
          "0" : {
            "sign" : -181709417,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 271059730529379994828800000,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 271059730529379994828800000,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [segment#326], [segment#326, count(1) AS num_customers#315L, (segment#326 * 50) AS segment_base#316] "
          },
          "2" : {
            "sign" : 478006776,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 225883108774483329024000000,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 225883108774483329024000000,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#131, ss_ext_sales_price#163] "
          },
          "7" : {
            "sign" : -1681627929,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 387008000000,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 387008000000,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_customer_sk#131, c_current_addr_sk#135], [c_customer_sk#131, c_current_addr_sk#135] "
          },
          "3" : {
            "sign" : 1641370674,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 271059730529379994828800000,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 271059730529379994828800000,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#131 = ss_customer_sk#151) "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Aggregate",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [segment#326], [segment#326, count(1) AS num_customers#315L, (segment#326 * 50) AS segment_base#316]\n+- Aggregate [c_customer_sk#131], [cast((MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#163)),17,2) / 50) as int) AS segment#326]\n   +- Project [c_customer_sk#131, ss_ext_sales_price#163]\n      +- Join Inner, (c_customer_sk#131 = ss_customer_sk#151)\n         :- Project [c_customer_sk#131]\n         :  +- Join Inner, (c_current_addr_sk#135 = ca_address_sk#172)\n         :     :- LogicalQueryStage Project [ca_address_sk#172], BroadcastQueryStage 5\n         :     +- Aggregate [c_customer_sk#131, c_current_addr_sk#135], [c_customer_sk#131, c_current_addr_sk#135]\n         :        +- Project [c_customer_sk#131, c_current_addr_sk#135]\n         :           +- Join Inner, (c_customer_sk#131 = customer_sk#318)\n         :              :- LogicalQueryStage Project [customer_sk#318], ShuffleQueryStage 6\n         :              +- LogicalQueryStage Project [c_customer_sk#131, c_current_addr_sk#135], ShuffleQueryStage 3\n         +- LogicalQueryStage Project [ss_customer_sk#151, ss_ext_sales_price#163], ShuffleQueryStage 7\n"
      },
      "QSPhysical" : {
        "operators" : {
          "12" : {
            "sign" : 1110057444,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 483760000000,
            "rowCount" : 24188000000,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [customer_sk#318] Right keys [1]: [c_customer_sk#131] Join type: Inner Join condition: None "
          },
          "8" : {
            "sign" : -1303173898,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 6291456,
            "rowCount" : 123616,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [ca_address_sk#172] Arguments: 5 "
          },
          "4" : {
            "sign" : 610318771,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 271059730529379994828800000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [c_customer_sk#131] Right keys [1]: [ss_customer_sk#151] Join type: Inner Join condition: None "
          },
          "15" : {
            "sign" : -275604141,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [ss_customer_sk#151, ss_ext_sales_price#163] Arguments: [ss_customer_sk#151 ASC NULLS FIRST], false, 0 "
          },
          "11" : {
            "sign" : 498055318,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 387008000000,
            "rowCount" : 24188000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [c_customer_sk#131, c_current_addr_sk#135] Input [3]: [customer_sk#318, c_customer_sk#131, c_current_addr_sk#135] "
          },
          "9" : {
            "sign" : -1387228902,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 387008000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [2]: [c_customer_sk#131, c_current_addr_sk#135] Keys [2]: [c_customer_sk#131, c_current_addr_sk#135] Functions: [] Aggregate Attributes: [] Results [2]: [c_customer_sk#131, c_current_addr_sk#135] "
          },
          "13" : {
            "sign" : -463311033,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1572864,
            "rowCount" : 12094,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [customer_sk#318] Arguments: 8 "
          },
          "16" : {
            "sign" : 281479957,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 185542176,
            "rowCount" : 7730924,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [ss_customer_sk#151, ss_ext_sales_price#163] Arguments: 7 "
          },
          "5" : {
            "sign" : -297331886,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [1]: [c_customer_sk#131] Arguments: [c_customer_sk#131 ASC NULLS FIRST], false, 0 "
          },
          "10" : {
            "sign" : 122176205,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 387008000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [2]: [c_customer_sk#131, c_current_addr_sk#135] Keys [2]: [c_customer_sk#131, c_current_addr_sk#135] Functions: [] Aggregate Attributes: [] Results [2]: [c_customer_sk#131, c_current_addr_sk#135] "
          },
          "6" : {
            "sign" : -675610119,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1460906282188800000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [c_customer_sk#131] Input [3]: [ca_address_sk#172, c_customer_sk#131, c_current_addr_sk#135] "
          },
          "1" : {
            "sign" : -207241337,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 135529865264689997414400000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [2]: [c_customer_sk#131, sum#424L] Keys [1]: [c_customer_sk#131] Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#163))] Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#163))#415L] Results [1]: [cast((MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#163))#415L,17,2) / 50) as int) AS segment#326] "
          },
          "14" : {
            "sign" : 1506083390,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 48000000,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [c_customer_sk#131, c_current_addr_sk#135] Arguments: 3 "
          },
          "0" : {
            "sign" : -1241791463,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 271059730529379994828800000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [1]: [segment#326] Keys [1]: [segment#326] Functions [1]: [partial_count(1)] Aggregate Attributes [1]: [count#421L] Results [2]: [segment#326, count#422L] "
          },
          "2" : {
            "sign" : -232852297,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 135529865264689997414400000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [2]: [c_customer_sk#131, ss_ext_sales_price#163] Keys [1]: [c_customer_sk#131] Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#163))] Aggregate Attributes [1]: [sum#423L] Results [2]: [c_customer_sk#131, sum#424L] "
          },
          "7" : {
            "sign" : -1971731213,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 2434843803648000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ca_address_sk#172] Right keys [1]: [c_current_addr_sk#135] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : -436969971,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 225883108774483329024000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [c_customer_sk#131, ss_ext_sales_price#163] Input [3]: [c_customer_sk#131, ss_customer_sk#151, ss_ext_sales_price#163] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "BroadcastQueryStage",
          "toId" : 7,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "BroadcastQueryStage",
          "toId" : 12,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "ShuffleQueryStage",
          "toId" : 12,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "BroadcastHashJoin",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "HashAggregate",
          "toId" : 9,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "HashAggregate",
          "toId" : 7,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "BroadcastHashJoin",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Sort",
          "toId" : 4,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "ShuffleQueryStage",
          "toId" : 15,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Sort",
          "toId" : 4,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "SortMergeJoin",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "HashAggregate",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[segment#326], functions=[partial_count(1)], output=[segment#326, count#422L])\n+- HashAggregate(keys=[c_customer_sk#131], functions=[sum(UnscaledValue(ss_ext_sales_price#163))], output=[segment#326])\n   +- HashAggregate(keys=[c_customer_sk#131], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#163))], output=[c_customer_sk#131, sum#424L])\n      +- Project [c_customer_sk#131, ss_ext_sales_price#163]\n         +- SortMergeJoin [c_customer_sk#131], [ss_customer_sk#151], Inner\n            :- Sort [c_customer_sk#131 ASC NULLS FIRST], false, 0\n            :  +- Project [c_customer_sk#131]\n            :     +- BroadcastHashJoin [ca_address_sk#172], [c_current_addr_sk#135], Inner, BuildLeft, false\n            :        :- BroadcastQueryStage 5\n            :        :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=871]\n            :        :     +- *(6) Project [ca_address_sk#172]\n            :        :        +- *(6) BroadcastHashJoin [ca_county#179, ca_state#180], [s_county#208, s_state#209], Inner, BuildRight, false\n            :        :           :- *(6) Filter ((isnotnull(ca_address_sk#172) AND isnotnull(ca_county#179)) AND isnotnull(ca_state#180))\n            :        :           :  +- *(6) ColumnarToRow\n            :        :           :     +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#172,ca_county#179,ca_state#180] Batched: true, DataFilters: [isnotnull(ca_address_sk#172), isnotnull(ca_county#179), isnotnull(ca_state#180)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_county), IsNotNull(ca_state)], ReadSchema: struct<ca_address_sk:int,ca_county:string,ca_state:string>\n            :        :           +- BroadcastQueryStage 0\n            :        :              +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, false], input[1, string, false]),false), [plan_id=470]\n            :        :                 +- *(1) Filter (isnotnull(s_county#208) AND isnotnull(s_state#209))\n            :        :                    +- *(1) ColumnarToRow\n            :        :                       +- FileScan parquet spark_catalog.tpcds_100.store[s_county#208,s_state#209] Batched: true, DataFilters: [isnotnull(s_county#208), isnotnull(s_state#209)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_county), IsNotNull(s_state)], ReadSchema: struct<s_county:string,s_state:string>\n            :        +- HashAggregate(keys=[c_customer_sk#131, c_current_addr_sk#135], functions=[], output=[c_customer_sk#131, c_current_addr_sk#135])\n            :           +- HashAggregate(keys=[c_customer_sk#131, c_current_addr_sk#135], functions=[], output=[c_customer_sk#131, c_current_addr_sk#135])\n            :              +- Project [c_customer_sk#131, c_current_addr_sk#135]\n            :                 +- BroadcastHashJoin [customer_sk#318], [c_customer_sk#131], Inner, BuildLeft, false\n            :                    :- BroadcastQueryStage 8\n            :                    :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1938]\n            :                    :     +- AQEShuffleRead local\n            :                    :        +- ShuffleQueryStage 6\n            :                    :           +- Exchange hashpartitioning(customer_sk#318, 200), ENSURE_REQUIREMENTS, [plan_id=1420]\n            :                    :              +- *(9) Project [customer_sk#318]\n            :                    :                 +- *(9) BroadcastHashJoin [item_sk#319], [i_item_sk#81], Inner, BuildRight, false\n            :                    :                    :- *(9) Project [customer_sk#318, item_sk#319]\n            :                    :                    :  +- *(9) BroadcastHashJoin [sold_date_sk#317], [d_date_sk#103], Inner, BuildRight, false\n            :                    :                    :     :- Union\n            :                    :                    :     :  :- *(7) Project [cs_sold_date_sk#46 AS sold_date_sk#317, cs_bill_customer_sk#15 AS customer_sk#318, cs_item_sk#27 AS item_sk#319]\n            :                    :                    :     :  :  +- *(7) Filter (isnotnull(cs_item_sk#27) AND isnotnull(cs_bill_customer_sk#15))\n            :                    :                    :     :  :     +- *(7) ColumnarToRow\n            :                    :                    :     :  :        +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_bill_customer_sk#15,cs_item_sk#27,cs_sold_date_sk#46] Batched: true, DataFilters: [isnotnull(cs_item_sk#27), isnotnull(cs_bill_customer_sk#15)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#46), dynamicpruningexpression(cs_sold_date_sk#46 IN dynamicpruning#419)], PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_bill_customer_sk)], ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int>\n            :                    :                    :     :  :              +- SubqueryBroadcast dynamicpruning#419, 0, [d_date_sk#103], [id=#1342]\n            :                    :                    :     :  :                 +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                    +- == Final Plan ==\n                                                                                       BroadcastQueryStage 1\n                                                                                       +- ReusedExchange [d_date_sk#103], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=490]\n                                                                                    +- == Initial Plan ==\n                                                                                       BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1339]\n                                                                                       +- Project [d_date_sk#103]\n                                                                                          +- Filter ((((isnotnull(d_moy#111) AND isnotnull(d_year#109)) AND (d_moy#111 = 3)) AND (d_year#109 = 1999)) AND isnotnull(d_date_sk#103))\n                                                                                             +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_year#109,d_moy#111] Batched: true, DataFilters: [isnotnull(d_moy#111), isnotnull(d_year#109), (d_moy#111 = 3), (d_year#109 = 1999), isnotnull(d_d..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,3), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n            :                    :                    :     :  +- *(8) Project [ws_sold_date_sk#80 AS sold_date_sk#320, ws_bill_customer_sk#50 AS customer_sk#321, ws_item_sk#49 AS item_sk#322]\n            :                    :                    :     :     +- *(8) Filter (isnotnull(ws_item_sk#49) AND isnotnull(ws_bill_customer_sk#50))\n            :                    :                    :     :        +- *(8) ColumnarToRow\n            :                    :                    :     :           +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_item_sk#49,ws_bill_customer_sk#50,ws_sold_date_sk#80] Batched: true, DataFilters: [isnotnull(ws_item_sk#49), isnotnull(ws_bill_customer_sk#50)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#80), dynamicpruningexpression(ws_sold_date_sk#80 IN dynamicpruning#419)], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_bill_customer_sk)], ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int>\n            :                    :                    :     :                 +- ReusedSubquery SubqueryBroadcast dynamicpruning#419, 0, [d_date_sk#103], [id=#1342]\n            :                    :                    :     +- BroadcastQueryStage 1\n            :                    :                    :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=490]\n            :                    :                    :           +- *(2) Project [d_date_sk#103]\n            :                    :                    :              +- *(2) Filter ((((isnotnull(d_moy#111) AND isnotnull(d_year#109)) AND (d_moy#111 = 3)) AND (d_year#109 = 1999)) AND isnotnull(d_date_sk#103))\n            :                    :                    :                 +- *(2) ColumnarToRow\n            :                    :                    :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_year#109,d_moy#111] Batched: true, DataFilters: [isnotnull(d_moy#111), isnotnull(d_year#109), (d_moy#111 = 3), (d_year#109 = 1999), isnotnull(d_d..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,3), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n            :                    :                    +- BroadcastQueryStage 2\n            :                    :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=511]\n            :                    :                          +- *(3) Project [i_item_sk#81]\n            :                    :                             +- *(3) Filter ((((isnotnull(i_category#93) AND isnotnull(i_class#91)) AND (i_category#93 = Jewelry)) AND (i_class#91 = consignment)) AND isnotnull(i_item_sk#81))\n            :                    :                                +- *(3) ColumnarToRow\n            :                    :                                   +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#81,i_class#91,i_category#93] Batched: true, DataFilters: [isnotnull(i_category#93), isnotnull(i_class#91), (i_category#93 = Jewelry), (i_class#91 = consig..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_category), IsNotNull(i_class), EqualTo(i_category,Jewelry), EqualTo(i_class,consignm..., ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>\n            :                    +- ShuffleQueryStage 3\n            :                       +- Exchange hashpartitioning(c_customer_sk#131, 200), ENSURE_REQUIREMENTS, [plan_id=532]\n            :                          +- *(4) Filter (isnotnull(c_customer_sk#131) AND isnotnull(c_current_addr_sk#135))\n            :                             +- *(4) ColumnarToRow\n            :                                +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#131,c_current_addr_sk#135] Batched: true, DataFilters: [isnotnull(c_customer_sk#131), isnotnull(c_current_addr_sk#135)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)], ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>\n            +- Sort [ss_customer_sk#151 ASC NULLS FIRST], false, 0\n               +- ShuffleQueryStage 7\n                  +- Exchange hashpartitioning(ss_customer_sk#151, 200), ENSURE_REQUIREMENTS, [plan_id=1650]\n                     +- *(10) Project [ss_customer_sk#151, ss_ext_sales_price#163]\n                        +- *(10) BroadcastHashJoin [ss_sold_date_sk#171], [d_date_sk#328], Inner, BuildRight, false\n                           :- *(10) Filter isnotnull(ss_customer_sk#151)\n                           :  +- *(10) ColumnarToRow\n                           :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_customer_sk#151,ss_ext_sales_price#163,ss_sold_date_sk#171] Batched: true, DataFilters: [isnotnull(ss_customer_sk#151)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#171), dynamicpruningexpression(ss_sold_date_sk#171 IN dynamicpruning#4..., PushedFilters: [IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_ext_sales_price:decimal(7,2)>\n                           :           +- SubqueryBroadcast dynamicpruning#420, 0, [d_date_sk#328], [id=#1624]\n                           :              +- AdaptiveSparkPlan isFinalPlan=true\n                                             +- == Final Plan ==\n                                                BroadcastQueryStage 1\n                                                +- ReusedExchange [d_date_sk#328], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=558]\n                                             +- == Initial Plan ==\n                                                BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1621]\n                                                +- Project [d_date_sk#328]\n                                                   +- Filter (((isnotnull(d_month_seq#331) AND (d_month_seq#331 >= Subquery subquery#324, [id=#180])) AND (d_month_seq#331 <= Subquery subquery#325, [id=#193])) AND isnotnull(d_date_sk#328))\n                                                      :  :- Subquery subquery#324, [id=#180]\n                                                      :  :  +- AdaptiveSparkPlan isFinalPlan=false\n                                                      :  :     +- HashAggregate(keys=[(d_month_seq + 1)#356], functions=[], output=[(d_month_seq + 1)#356])\n                                                      :  :        +- Exchange hashpartitioning((d_month_seq + 1)#356, 200), ENSURE_REQUIREMENTS, [plan_id=178]\n                                                      :  :           +- HashAggregate(keys=[(d_month_seq + 1)#356], functions=[], output=[(d_month_seq + 1)#356])\n                                                      :  :              +- Project [(d_month_seq#362 + 1) AS (d_month_seq + 1)#356]\n                                                      :  :                 +- Filter (((isnotnull(d_year#365) AND isnotnull(d_moy#367)) AND (d_year#365 = 1999)) AND (d_moy#367 = 3))\n                                                      :  :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#362,d_year#365,d_moy#367] Batched: true, DataFilters: [isnotnull(d_year#365), isnotnull(d_moy#367), (d_year#365 = 1999), (d_moy#367 = 3)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), EqualTo(d_moy,3)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n                                                      :  +- Subquery subquery#325, [id=#193]\n                                                      :     +- AdaptiveSparkPlan isFinalPlan=false\n                                                      :        +- HashAggregate(keys=[(d_month_seq + 3)#357], functions=[], output=[(d_month_seq + 3)#357])\n                                                      :           +- Exchange hashpartitioning((d_month_seq + 3)#357, 200), ENSURE_REQUIREMENTS, [plan_id=191]\n                                                      :              +- HashAggregate(keys=[(d_month_seq + 3)#357], functions=[], output=[(d_month_seq + 3)#357])\n                                                      :                 +- Project [(d_month_seq#390 + 3) AS (d_month_seq + 3)#357]\n                                                      :                    +- Filter (((isnotnull(d_year#393) AND isnotnull(d_moy#395)) AND (d_year#393 = 1999)) AND (d_moy#395 = 3))\n                                                      :                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#390,d_year#393,d_moy#395] Batched: true, DataFilters: [isnotnull(d_year#393), isnotnull(d_moy#395), (d_year#393 = 1999), (d_moy#395 = 3)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), EqualTo(d_moy,3)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n                                                      +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#328,d_month_seq#331] Batched: true, DataFilters: [isnotnull(d_month_seq#331), isnotnull(d_date_sk#328)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_month_seq:int>\n                           +- BroadcastQueryStage 4\n                              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=558]\n                                 +- *(5) Project [d_date_sk#328]\n                                    +- *(5) Filter (((isnotnull(d_month_seq#331) AND (d_month_seq#331 >= Subquery subquery#324, [id=#210])) AND (d_month_seq#331 <= Subquery subquery#325, [id=#223])) AND isnotnull(d_date_sk#328))\n                                       :  :- Subquery subquery#324, [id=#210]\n                                       :  :  +- AdaptiveSparkPlan isFinalPlan=true\n                                                +- == Final Plan ==\n                                                   *(2) HashAggregate(keys=[(d_month_seq + 1)#356], functions=[], output=[(d_month_seq + 1)#356])\n                                                   +- AQEShuffleRead coalesced\n                                                      +- ShuffleQueryStage 0\n                                                         +- Exchange hashpartitioning((d_month_seq + 1)#356, 200), ENSURE_REQUIREMENTS, [plan_id=610]\n                                                            +- *(1) HashAggregate(keys=[(d_month_seq + 1)#356], functions=[], output=[(d_month_seq + 1)#356])\n                                                               +- *(1) Project [(d_month_seq#362 + 1) AS (d_month_seq + 1)#356]\n                                                                  +- *(1) Filter (((isnotnull(d_year#365) AND isnotnull(d_moy#367)) AND (d_year#365 = 1999)) AND (d_moy#367 = 3))\n                                                                     +- *(1) ColumnarToRow\n                                                                        +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#362,d_year#365,d_moy#367] Batched: true, DataFilters: [isnotnull(d_year#365), isnotnull(d_moy#367), (d_year#365 = 1999), (d_moy#367 = 3)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), EqualTo(d_moy,3)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n                                                +- == Initial Plan ==\n                                                   HashAggregate(keys=[(d_month_seq + 1)#356], functions=[], output=[(d_month_seq + 1)#356])\n                                                   +- Exchange hashpartitioning((d_month_seq + 1)#356, 200), ENSURE_REQUIREMENTS, [plan_id=208]\n                                                      +- HashAggregate(keys=[(d_month_seq + 1)#356], functions=[], output=[(d_month_seq + 1)#356])\n                                                         +- Project [(d_month_seq#362 + 1) AS (d_month_seq + 1)#356]\n                                                            +- Filter (((isnotnull(d_year#365) AND isnotnull(d_moy#367)) AND (d_year#365 = 1999)) AND (d_moy#367 = 3))\n                                                               +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#362,d_year#365,d_moy#367] Batched: true, DataFilters: [isnotnull(d_year#365), isnotnull(d_moy#367), (d_year#365 = 1999), (d_moy#367 = 3)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), EqualTo(d_moy,3)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n                                       :  +- Subquery subquery#325, [id=#223]\n                                       :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                +- == Final Plan ==\n                                                   *(2) HashAggregate(keys=[(d_month_seq + 3)#357], functions=[], output=[(d_month_seq + 3)#357])\n                                                   +- AQEShuffleRead coalesced\n                                                      +- ShuffleQueryStage 0\n                                                         +- Exchange hashpartitioning((d_month_seq + 3)#357, 200), ENSURE_REQUIREMENTS, [plan_id=600]\n                                                            +- *(1) HashAggregate(keys=[(d_month_seq + 3)#357], functions=[], output=[(d_month_seq + 3)#357])\n                                                               +- *(1) Project [(d_month_seq#390 + 3) AS (d_month_seq + 3)#357]\n                                                                  +- *(1) Filter (((isnotnull(d_year#393) AND isnotnull(d_moy#395)) AND (d_year#393 = 1999)) AND (d_moy#395 = 3))\n                                                                     +- *(1) ColumnarToRow\n                                                                        +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#390,d_year#393,d_moy#395] Batched: true, DataFilters: [isnotnull(d_year#393), isnotnull(d_moy#395), (d_year#393 = 1999), (d_moy#395 = 3)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), EqualTo(d_moy,3)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n                                                +- == Initial Plan ==\n                                                   HashAggregate(keys=[(d_month_seq + 3)#357], functions=[], output=[(d_month_seq + 3)#357])\n                                                   +- Exchange hashpartitioning((d_month_seq + 3)#357, 200), ENSURE_REQUIREMENTS, [plan_id=221]\n                                                      +- HashAggregate(keys=[(d_month_seq + 3)#357], functions=[], output=[(d_month_seq + 3)#357])\n                                                         +- Project [(d_month_seq#390 + 3) AS (d_month_seq + 3)#357]\n                                                            +- Filter (((isnotnull(d_year#393) AND isnotnull(d_moy#395)) AND (d_year#393 = 1999)) AND (d_moy#395 = 3))\n                                                               +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#390,d_year#393,d_moy#395] Batched: true, DataFilters: [isnotnull(d_year#393), isnotnull(d_moy#395), (d_year#393 = 1999), (d_moy#395 = 3)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), EqualTo(d_moy,3)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n                                       +- *(5) ColumnarToRow\n                                          +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#328,d_month_seq#331] Batched: true, DataFilters: [isnotnull(d_month_seq#331), isnotnull(d_date_sk#328)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_month_seq:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 241406496,
        "inputRowCount" : 9866634
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "4" : [ 355234, 352487, 351656, 355874, 357689, 368266, 344148, 359038, 368045, 353689, 361274, 347020, 371909, 356597, 370265, 348613, 355291, 368248, 354867, 343622, 366432, 353274, 366122, 362147, 361969, 348809, 349917, 345903, 362790, 373468, 358944, 344155, 364029, 350409, 366974, 368807, 340139, 341572, 364344, 342853, 359368, 358835, 346571, 369696, 354377, 361306, 362368, 358571, 364791, 350808, 373290, 352784, 357926, 348392, 361885, 362995, 350582, 347785, 349876, 359927, 339897, 361969, 354395, 358129, 358015, 369247, 355070, 356374, 350046, 362147, 376570, 366833, 346393, 359528, 364029, 367027, 356503, 356945, 357290, 345969, 350409, 359792, 366470, 348344, 351877, 355715, 349440, 348950, 357224, 363747, 345479, 354598, 363100, 361037, 355487, 374350, 359952, 355291, 363859, 351011, 354229, 365290, 359934, 339352, 360333, 358393, 358944, 362587, 345198, 351232, 353953, 357069, 357290, 356298, 370172, 353053, 341572, 357511, 347216, 346030, 355658, 363587, 356394, 356670, 354849, 369028, 364189, 345584, 359510, 366188, 355273, 356597, 364791, 366366, 359368, 345969, 372171, 354504, 359485, 354299, 340467, 338944, 352487, 359706, 361385, 368045, 364807, 351585, 364367, 355248, 354849, 352284, 356615, 352487, 351382, 363968, 361926, 354316, 361809, 346172, 345479, 352629, 369468, 352360, 359038, 355273, 356501, 359589, 356927, 357265, 349937, 365477, 378619, 357290, 361926, 351936, 360939, 362790, 361606, 359589, 357493, 360358, 346368, 351893, 369028, 351733, 363197, 363968, 357486, 352469, 348613, 369028, 338927, 345661, 351451, 352487, 360850, 357351, 363435, 346571 ],
        "0" : [ 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 112177, 101979, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 112177, 101979, 112177, 112177, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 112177, 112177, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 112177, 101979 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 13,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 21 ],
      "Objectives" : {
        "DurationInMs" : 3563,
        "TotalTasksDurationInMs" : 5260,
        "IOBytes" : {
          "Total" : 88386283,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 88385515,
            "SW" : 768
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1879834014,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 900,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 900,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(d_month_seq + 3)#357], [(d_month_seq + 3)#357] "
          },
          "1" : {
            "sign" : 1316066587,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 900,
                "rowCount" : 75
              },
              "compileTime" : {
                "sizeInBytes" : 900,
                "rowCount" : 75
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [(d_month_seq#390 + 3) AS (d_month_seq + 3)#357] "
          },
          "2" : {
            "sign" : 1450156779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 18450,
                "rowCount" : 75
              },
              "compileTime" : {
                "sizeInBytes" : 18450,
                "rowCount" : 75
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#393) AND isnotnull(d_moy#395)) AND ((d_year#393 = 1999) AND (d_moy#395 = 3))) "
          },
          "3" : {
            "sign" : -541859252,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#387, d_date_id#388, d_date#389, d_month_seq#390, d_week_seq#391, d_quarter_seq#392, d_year#393, d_dow#394, d_moy#395, d_dom#396, d_qoy#397, d_fy_year#398, d_fy_quarter_seq#399, d_fy_week_seq#400, d_day_name#401, d_quarter_name#402, d_holiday#403, d_weekend#404, d_following_holiday#405, d_first_dom#406, d_last_dom#407, d_same_day_ly#408, d_same_day_lq#409, d_current_day#410, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "LogicalRelation",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [(d_month_seq + 3)#357], [(d_month_seq + 3)#357]\n+- Project [(d_month_seq#390 + 3) AS (d_month_seq + 3)#357]\n   +- Filter ((isnotnull(d_year#393) AND isnotnull(d_moy#395)) AND ((d_year#393 = 1999) AND (d_moy#395 = 3)))\n      +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#387,d_date_id#388,d_date#389,d_month_seq#390,d_week_seq#391,d_quarter_seq#392,d_year#393,d_dow#394,d_moy#395,d_dom#396,d_qoy#397,d_fy_year#398,d_fy_quarter_seq#399,d_fy_week_seq#400,d_day_name#401,d_quarter_name#402,d_holiday#403,d_weekend#404,d_following_holiday#405,d_first_dom#406,d_last_dom#407,d_same_day_ly#408,d_same_day_lq#409,d_current_day#410,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1284789051,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 900,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [1]: [(d_month_seq + 3)#357] Keys [1]: [(d_month_seq + 3)#357] Functions: [] Aggregate Attributes: [] Results [1]: [(d_month_seq + 3)#357] "
          },
          "1" : {
            "sign" : 1425944156,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 900,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [(d_month_seq#390 + 3) AS (d_month_seq + 3)#357] Input [3]: [d_month_seq#390, d_year#393, d_moy#395] "
          },
          "2" : {
            "sign" : 1328421664,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 900,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [d_month_seq#390, d_year#393, d_moy#395] Condition : (((isnotnull(d_year#393) AND isnotnull(d_moy#395)) AND (d_year#393 = 1999)) AND (d_moy#395 = 3)) "
          },
          "3" : {
            "sign" : -2004131417,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 900,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [3]: [d_month_seq#390, d_year#393, d_moy#395] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), EqualTo(d_moy,3)] ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[(d_month_seq + 3)#357], functions=[], output=[(d_month_seq + 3)#357])\n+- Project [(d_month_seq#390 + 3) AS (d_month_seq + 3)#357]\n   +- Filter (((isnotnull(d_year#393) AND isnotnull(d_moy#395)) AND (d_year#393 = 1999)) AND (d_moy#395 = 3))\n      +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#390,d_year#393,d_moy#395] Batched: true, DataFilters: [isnotnull(d_year#393), isnotnull(d_moy#395), (d_year#393 = 1999), (d_moy#395 = 3)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), EqualTo(d_moy,3)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 900,
        "inputRowCount" : 75
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 8 ],
      "Objectives" : {
        "DurationInMs" : 7561,
        "TotalTasksDurationInMs" : 6366,
        "IOBytes" : {
          "Total" : 25549,
          "Details" : {
            "IR" : 25490,
            "IW" : 0,
            "SR" : 0,
            "SW" : 59
          }
        }
      }
    },
    "10" : {
      "QSLogical" : {
        "operators" : {
          "8" : {
            "sign" : -1424925611,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1439312020,
                "rowCount" : 71965601
              },
              "compileTime" : {
                "sizeInBytes" : 1439312020,
                "rowCount" : 71965601
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_sold_date_sk#80 AS sold_date_sk#320, ws_bill_customer_sk#50 AS customer_sk#321, ws_item_sk#49 AS item_sk#322] "
          },
          "4" : {
            "sign" : 411670351,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4290440180,
                "rowCount" : 214522009
              },
              "compileTime" : {
                "sizeInBytes" : 4290440180,
                "rowCount" : 214522009
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "9" : {
            "sign" : -47790245,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14968845008,
                "rowCount" : 71965601
              },
              "compileTime" : {
                "sizeInBytes" : 14968845008,
                "rowCount" : 71965601
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(ws_item_sk#49) AND isnotnull(ws_sold_date_sk#80)) AND isnotnull(ws_bill_customer_sk#50)) AND dynamicpruning#419 [ws_sold_date_sk#80]) "
          },
          "5" : {
            "sign" : 1288241140,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2851128160,
                "rowCount" : 142556408
              },
              "compileTime" : {
                "sizeInBytes" : 2851128160,
                "rowCount" : 142556408
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_sold_date_sk#46 AS sold_date_sk#317, cs_bill_customer_sk#15 AS customer_sk#318, cs_item_sk#27 AS item_sk#319] "
          },
          "10" : {
            "sign" : -432544473,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              },
              "compileTime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#47, ws_ship_date_sk#48, ws_item_sk#49, ws_bill_customer_sk#50, ws_bill_cdemo_sk#51, ws_bill_hdemo_sk#52, ws_bill_addr_sk#53, ws_ship_customer_sk#54, ws_ship_cdemo_sk#55, ws_ship_hdemo_sk#56, ws_ship_addr_sk#57, ws_web_page_sk#58, ws_web_site_sk#59, ws_ship_mode_sk#60, ws_warehouse_sk#61, ws_promo_sk#62, ws_order_number#63L, ws_quantity#64, ws_wholesale_cost#65, ws_list_price#66, ws_sales_price#67, ws_ext_discount_amt#68, ws_ext_sales_price#69, ws_ext_wholesale_cost#70, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "6" : {
            "sign" : 185170765,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29651732864,
                "rowCount" : 142556408
              },
              "compileTime" : {
                "sizeInBytes" : 29651732864,
                "rowCount" : 142556408
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_item_sk#27) AND isnotnull(cs_sold_date_sk#46)) AND isnotnull(cs_bill_customer_sk#15)) AND dynamicpruning#419 [cs_sold_date_sk#46]) "
          },
          "1" : {
            "sign" : -199856991,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 65643734754000,
                "rowCount" : 3282186737700
              },
              "compileTime" : {
                "sizeInBytes" : 65643734754000,
                "rowCount" : 3282186737700
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (item_sk#319 = i_item_sk#81) "
          },
          "0" : {
            "sign" : -94384986,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 39386240852400,
                "rowCount" : 3282186737700
              },
              "compileTime" : {
                "sizeInBytes" : 39386240852400,
                "rowCount" : 3282186737700
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_sk#318] "
          },
          "2" : {
            "sign" : 260146291,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 257426410800,
                "rowCount" : 16089150675
              },
              "compileTime" : {
                "sizeInBytes" : 257426410800,
                "rowCount" : 16089150675
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [customer_sk#318, item_sk#319] "
          },
          "7" : {
            "sign" : -914147946,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              },
              "compileTime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#13, cs_ship_date_sk#14, cs_bill_customer_sk#15, cs_bill_cdemo_sk#16, cs_bill_hdemo_sk#17, cs_bill_addr_sk#18, cs_ship_customer_sk#19, cs_ship_cdemo_sk#20, cs_ship_hdemo_sk#21, cs_ship_addr_sk#22, cs_call_center_sk#23, cs_catalog_page_sk#24, cs_ship_mode_sk#25, cs_warehouse_sk#26, cs_item_sk#27, cs_promo_sk#28, cs_order_number#29L, cs_quantity#30, cs_wholesale_cost#31, cs_list_price#32, cs_sales_price#33, cs_ext_discount_amt#34, cs_ext_sales_price#35, cs_ext_wholesale_cost#36, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : -2144684766,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 386139616200,
                "rowCount" : 16089150675
              },
              "compileTime" : {
                "sizeInBytes" : 386139616200,
                "rowCount" : 16089150675
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (sold_date_sk#317 = d_date_sk#103) "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalRelation",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalRelation",
          "toId" : 9,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Union",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [customer_sk#318]\n+- Join Inner, (item_sk#319 = i_item_sk#81)\n   :- Project [customer_sk#318, item_sk#319]\n   :  +- Join Inner, (sold_date_sk#317 = d_date_sk#103)\n   :     :- Union false, false\n   :     :  :- Project [cs_sold_date_sk#46 AS sold_date_sk#317, cs_bill_customer_sk#15 AS customer_sk#318, cs_item_sk#27 AS item_sk#319]\n   :     :  :  +- Filter (((isnotnull(cs_item_sk#27) AND isnotnull(cs_sold_date_sk#46)) AND isnotnull(cs_bill_customer_sk#15)) AND dynamicpruning#419 [cs_sold_date_sk#46])\n   :     :  :     :  +- Project [d_date_sk#103]\n   :     :  :     :     +- Filter (((isnotnull(d_moy#111) AND isnotnull(d_year#109)) AND ((d_moy#111 = 3) AND (d_year#109 = 1999))) AND isnotnull(d_date_sk#103))\n   :     :  :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_date_id#104,d_date#105,d_month_seq#106,d_week_seq#107,d_quarter_seq#108,d_year#109,d_dow#110,d_moy#111,d_dom#112,d_qoy#113,d_fy_year#114,d_fy_quarter_seq#115,d_fy_week_seq#116,d_day_name#117,d_quarter_name#118,d_holiday#119,d_weekend#120,d_following_holiday#121,d_first_dom#122,d_last_dom#123,d_same_day_ly#124,d_same_day_lq#125,d_current_day#126,... 4 more fields] parquet\n   :     :  :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#13,cs_ship_date_sk#14,cs_bill_customer_sk#15,cs_bill_cdemo_sk#16,cs_bill_hdemo_sk#17,cs_bill_addr_sk#18,cs_ship_customer_sk#19,cs_ship_cdemo_sk#20,cs_ship_hdemo_sk#21,cs_ship_addr_sk#22,cs_call_center_sk#23,cs_catalog_page_sk#24,cs_ship_mode_sk#25,cs_warehouse_sk#26,cs_item_sk#27,cs_promo_sk#28,cs_order_number#29L,cs_quantity#30,cs_wholesale_cost#31,cs_list_price#32,cs_sales_price#33,cs_ext_discount_amt#34,cs_ext_sales_price#35,cs_ext_wholesale_cost#36,... 10 more fields] parquet\n   :     :  +- Project [ws_sold_date_sk#80 AS sold_date_sk#320, ws_bill_customer_sk#50 AS customer_sk#321, ws_item_sk#49 AS item_sk#322]\n   :     :     +- Filter (((isnotnull(ws_item_sk#49) AND isnotnull(ws_sold_date_sk#80)) AND isnotnull(ws_bill_customer_sk#50)) AND dynamicpruning#419 [ws_sold_date_sk#80])\n   :     :        :  +- Project [d_date_sk#103]\n   :     :        :     +- Filter (((isnotnull(d_moy#111) AND isnotnull(d_year#109)) AND ((d_moy#111 = 3) AND (d_year#109 = 1999))) AND isnotnull(d_date_sk#103))\n   :     :        :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_date_id#104,d_date#105,d_month_seq#106,d_week_seq#107,d_quarter_seq#108,d_year#109,d_dow#110,d_moy#111,d_dom#112,d_qoy#113,d_fy_year#114,d_fy_quarter_seq#115,d_fy_week_seq#116,d_day_name#117,d_quarter_name#118,d_holiday#119,d_weekend#120,d_following_holiday#121,d_first_dom#122,d_last_dom#123,d_same_day_ly#124,d_same_day_lq#125,d_current_day#126,... 4 more fields] parquet\n   :     :        +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#47,ws_ship_date_sk#48,ws_item_sk#49,ws_bill_customer_sk#50,ws_bill_cdemo_sk#51,ws_bill_hdemo_sk#52,ws_bill_addr_sk#53,ws_ship_customer_sk#54,ws_ship_cdemo_sk#55,ws_ship_hdemo_sk#56,ws_ship_addr_sk#57,ws_web_page_sk#58,ws_web_site_sk#59,ws_ship_mode_sk#60,ws_warehouse_sk#61,ws_promo_sk#62,ws_order_number#63L,ws_quantity#64,ws_wholesale_cost#65,ws_list_price#66,ws_sales_price#67,ws_ext_discount_amt#68,ws_ext_sales_price#69,ws_ext_wholesale_cost#70,... 10 more fields] parquet\n   :     +- Project [d_date_sk#103]\n   :        +- Filter (((isnotnull(d_moy#111) AND isnotnull(d_year#109)) AND ((d_moy#111 = 3) AND (d_year#109 = 1999))) AND isnotnull(d_date_sk#103))\n   :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_date_id#104,d_date#105,d_month_seq#106,d_week_seq#107,d_quarter_seq#108,d_year#109,d_dow#110,d_moy#111,d_dom#112,d_qoy#113,d_fy_year#114,d_fy_quarter_seq#115,d_fy_week_seq#116,d_day_name#117,d_quarter_name#118,d_holiday#119,d_weekend#120,d_following_holiday#121,d_first_dom#122,d_last_dom#123,d_same_day_ly#124,d_same_day_lq#125,d_current_day#126,... 4 more fields] parquet\n   +- Project [i_item_sk#81]\n      +- Filter (((isnotnull(i_category#93) AND isnotnull(i_class#91)) AND ((i_category#93 = Jewelry) AND (i_class#91 = consignment))) AND isnotnull(i_item_sk#81))\n         +- Relation spark_catalog.tpcds_100.item[i_item_sk#81,i_item_id#82,i_rec_start_date#83,i_rec_end_date#84,i_item_desc#85,i_current_price#86,i_wholesale_cost#87,i_brand_id#88,i_brand#89,i_class_id#90,i_class#91,i_category_id#92,i_category#93,i_manufact_id#94,i_manufact#95,i_size#96,i_formulation#97,i_color#98,i_units#99,i_container#100,i_manager_id#101,i_product_name#102] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "12" : {
            "sign" : 1927253262,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1114112,
            "rowCount" : 1231,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [i_item_sk#81] Arguments: 2 "
          },
          "8" : {
            "sign" : 1673407924,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1439312020,
            "rowCount" : 71965601,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [ws_sold_date_sk#80 AS sold_date_sk#320, ws_bill_customer_sk#50 AS customer_sk#321, ws_item_sk#49 AS item_sk#322] Input [3]: [ws_item_sk#49, ws_bill_customer_sk#50, ws_sold_date_sk#80] "
          },
          "4" : {
            "sign" : 393198997,
            "className" : "org.apache.spark.sql.execution.UnionExec",
            "sizeInBytes" : 4290440180,
            "rowCount" : 214522009,
            "isRuntime" : false,
            "predicate" : " (unknown) Union "
          },
          "11" : {
            "sign" : 954026108,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#103] Arguments: 1 "
          },
          "9" : {
            "sign" : 1377608204,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 1439312020,
            "rowCount" : 71965601,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [ws_item_sk#49, ws_bill_customer_sk#50, ws_sold_date_sk#80] Condition : (isnotnull(ws_item_sk#49) AND isnotnull(ws_bill_customer_sk#50)) "
          },
          "5" : {
            "sign" : 1514204219,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 2851128160,
            "rowCount" : 142556408,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [cs_sold_date_sk#46 AS sold_date_sk#317, cs_bill_customer_sk#15 AS customer_sk#318, cs_item_sk#27 AS item_sk#319] Input [3]: [cs_bill_customer_sk#15, cs_item_sk#27, cs_sold_date_sk#46] "
          },
          "10" : {
            "sign" : 1168658163,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 1439312020,
            "rowCount" : 71965601,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_sales Output [3]: [ws_item_sk#49, ws_bill_customer_sk#50, ws_sold_date_sk#80] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales/ws_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ws_sold_date_sk#80), dynamicpruningexpression(ws_sold_date_sk#80 IN dynamicpruning#419)] PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_bill_customer_sk)] ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int> "
          },
          "6" : {
            "sign" : 1127282010,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 2851128160,
            "rowCount" : 142556408,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [cs_bill_customer_sk#15, cs_item_sk#27, cs_sold_date_sk#46] Condition : (isnotnull(cs_item_sk#27) AND isnotnull(cs_bill_customer_sk#15)) "
          },
          "1" : {
            "sign" : -237495503,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 65643734754000,
            "rowCount" : 3282186737700,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [item_sk#319] Right keys [1]: [i_item_sk#81] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : -573900700,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 39386240852400,
            "rowCount" : 3282186737700,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [customer_sk#318] Input [3]: [customer_sk#318, item_sk#319, i_item_sk#81] "
          },
          "2" : {
            "sign" : 678800978,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 257426410800,
            "rowCount" : 16089150675,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [customer_sk#318, item_sk#319] Input [4]: [sold_date_sk#317, customer_sk#318, item_sk#319, d_date_sk#103] "
          },
          "7" : {
            "sign" : -197892302,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 2851128160,
            "rowCount" : 142556408,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.catalog_sales Output [3]: [cs_bill_customer_sk#15, cs_item_sk#27, cs_sold_date_sk#46] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_sales/cs_sold_date_sk=2450815, ... 1835 entries] PartitionFilters: [isnotnull(cs_sold_date_sk#46), dynamicpruningexpression(cs_sold_date_sk#46 IN dynamicpruning#419)] PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_bill_customer_sk)] ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int> "
          },
          "3" : {
            "sign" : -1460853087,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 386139616200,
            "rowCount" : 16089150675,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [sold_date_sk#317] Right keys [1]: [d_date_sk#103] Join type: Inner Join condition: None "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.catalog_sales",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_sales",
          "toId" : 9,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Union",
          "toId" : 3,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "BroadcastQueryStage",
          "toId" : 3,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "BroadcastHashJoin",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [customer_sk#318]\n+- BroadcastHashJoin [item_sk#319], [i_item_sk#81], Inner, BuildRight, false\n   :- Project [customer_sk#318, item_sk#319]\n   :  +- BroadcastHashJoin [sold_date_sk#317], [d_date_sk#103], Inner, BuildRight, false\n   :     :- Union\n   :     :  :- Project [cs_sold_date_sk#46 AS sold_date_sk#317, cs_bill_customer_sk#15 AS customer_sk#318, cs_item_sk#27 AS item_sk#319]\n   :     :  :  +- Filter (isnotnull(cs_item_sk#27) AND isnotnull(cs_bill_customer_sk#15))\n   :     :  :     +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_bill_customer_sk#15,cs_item_sk#27,cs_sold_date_sk#46] Batched: true, DataFilters: [isnotnull(cs_item_sk#27), isnotnull(cs_bill_customer_sk#15)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#46), dynamicpruningexpression(cs_sold_date_sk#46 IN dynamicpruning#419)], PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_bill_customer_sk)], ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int>\n   :     :  :           +- SubqueryBroadcast dynamicpruning#419, 0, [d_date_sk#103], [id=#1342]\n   :     :  :              +- AdaptiveSparkPlan isFinalPlan=false\n   :     :  :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1339]\n   :     :  :                    +- Project [d_date_sk#103]\n   :     :  :                       +- Filter ((((isnotnull(d_moy#111) AND isnotnull(d_year#109)) AND (d_moy#111 = 3)) AND (d_year#109 = 1999)) AND isnotnull(d_date_sk#103))\n   :     :  :                          +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_year#109,d_moy#111] Batched: true, DataFilters: [isnotnull(d_moy#111), isnotnull(d_year#109), (d_moy#111 = 3), (d_year#109 = 1999), isnotnull(d_d..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,3), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n   :     :  +- Project [ws_sold_date_sk#80 AS sold_date_sk#320, ws_bill_customer_sk#50 AS customer_sk#321, ws_item_sk#49 AS item_sk#322]\n   :     :     +- Filter (isnotnull(ws_item_sk#49) AND isnotnull(ws_bill_customer_sk#50))\n   :     :        +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_item_sk#49,ws_bill_customer_sk#50,ws_sold_date_sk#80] Batched: true, DataFilters: [isnotnull(ws_item_sk#49), isnotnull(ws_bill_customer_sk#50)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#80), dynamicpruningexpression(ws_sold_date_sk#80 IN dynamicpruning#419)], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_bill_customer_sk)], ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int>\n   :     :              +- ReusedSubquery SubqueryBroadcast dynamicpruning#419, 0, [d_date_sk#103], [id=#1342]\n   :     +- BroadcastQueryStage 1\n   :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=490]\n   :           +- *(2) Project [d_date_sk#103]\n   :              +- *(2) Filter ((((isnotnull(d_moy#111) AND isnotnull(d_year#109)) AND (d_moy#111 = 3)) AND (d_year#109 = 1999)) AND isnotnull(d_date_sk#103))\n   :                 +- *(2) ColumnarToRow\n   :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_year#109,d_moy#111] Batched: true, DataFilters: [isnotnull(d_moy#111), isnotnull(d_year#109), (d_moy#111 = 3), (d_year#109 = 1999), isnotnull(d_d..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,3), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n   +- BroadcastQueryStage 2\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=511]\n         +- *(3) Project [i_item_sk#81]\n            +- *(3) Filter ((((isnotnull(i_category#93) AND isnotnull(i_class#91)) AND (i_category#93 = Jewelry)) AND (i_class#91 = consignment)) AND isnotnull(i_item_sk#81))\n               +- *(3) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#81,i_class#91,i_category#93] Batched: true, DataFilters: [isnotnull(i_category#93), isnotnull(i_class#91), (i_category#93 = Jewelry), (i_class#91 = consig..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_category), IsNotNull(i_class), EqualTo(i_category,Jewelry), EqualTo(i_class,consignm..., ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 4292603116,
        "inputRowCount" : 214523271
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 3,
        "FinishedTasksNum" : 14,
        "FinishedTasksTotalTimeInMs" : 28070.0,
        "FinishedTasksDistributionInMs" : [ 1082.0, 1085.0, 1213.0, 2553.0, 5135.0 ]
      },
      "QueryStageOptimizationId" : 9,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 12 ],
      "Objectives" : {
        "DurationInMs" : 15215,
        "TotalTasksDurationInMs" : 182584,
        "IOBytes" : {
          "Total" : 11438334,
          "Details" : {
            "IR" : 11092294,
            "IW" : 0,
            "SR" : 0,
            "SW" : 346040
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1990501279,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 16,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 900,
                "rowCount" : -1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [(d_month_seq + 3)#357], [(d_month_seq + 3)#357], HashAggregate(keys=[(d_month_seq + 3)#357], functions=[]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [(d_month_seq + 3)#357], [(d_month_seq + 3)#357], HashAggregate(keys=[(d_month_seq + 3)#357], functions=[])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -273845966,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [1]: [(d_month_seq + 3)#357] Keys [1]: [(d_month_seq + 3)#357] Functions: [] Aggregate Attributes: [] Results [1]: [(d_month_seq + 3)#357] "
          },
          "1" : {
            "sign" : -439388619,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 900,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [(d_month_seq + 3)#357] Arguments: 0 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[(d_month_seq + 3)#357], functions=[], output=[(d_month_seq + 3)#357])\n+- ShuffleQueryStage 0\n   +- Exchange hashpartitioning((d_month_seq + 3)#357, 200), ENSURE_REQUIREMENTS, [plan_id=600]\n      +- *(1) HashAggregate(keys=[(d_month_seq + 3)#357], functions=[], output=[(d_month_seq + 3)#357])\n         +- *(1) Project [(d_month_seq#390 + 3) AS (d_month_seq + 3)#357]\n            +- *(1) Filter (((isnotnull(d_year#393) AND isnotnull(d_moy#395)) AND (d_year#393 = 1999)) AND (d_moy#395 = 3))\n               +- *(1) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#390,d_year#393,d_moy#395] Batched: true, DataFilters: [isnotnull(d_year#393), isnotnull(d_moy#395), (d_year#393 = 1999), (d_moy#395 = 3)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), EqualTo(d_moy,3)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 16,
        "inputRowCount" : 1
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "2" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 12,
        "FinishedTasksNum" : 12,
        "FinishedTasksTotalTimeInMs" : 12940.0,
        "FinishedTasksDistributionInMs" : [ 97.0, 1082.0, 1095.0, 1213.0, 1738.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 14 ],
      "Objectives" : {
        "DurationInMs" : 3880,
        "TotalTasksDurationInMs" : 232,
        "IOBytes" : {
          "Total" : 59,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 59,
            "SW" : 0
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 128757161,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 900,
                "rowCount" : 75
              },
              "compileTime" : {
                "sizeInBytes" : 900,
                "rowCount" : 75
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#103] "
          },
          "1" : {
            "sign" : -275590035,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 18450,
                "rowCount" : 75
              },
              "compileTime" : {
                "sizeInBytes" : 18450,
                "rowCount" : 75
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#111) AND isnotnull(d_year#109)) AND ((d_moy#111 = 3) AND (d_year#109 = 1999))) AND isnotnull(d_date_sk#103)) "
          },
          "2" : {
            "sign" : -144809072,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#103, d_date_id#104, d_date#105, d_month_seq#106, d_week_seq#107, d_quarter_seq#108, d_year#109, d_dow#110, d_moy#111, d_dom#112, d_qoy#113, d_fy_year#114, d_fy_quarter_seq#115, d_fy_week_seq#116, d_day_name#117, d_quarter_name#118, d_holiday#119, d_weekend#120, d_following_holiday#121, d_first_dom#122, d_last_dom#123, d_same_day_ly#124, d_same_day_lq#125, d_current_day#126, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#103]\n+- Filter (((isnotnull(d_moy#111) AND isnotnull(d_year#109)) AND ((d_moy#111 = 3) AND (d_year#109 = 1999))) AND isnotnull(d_date_sk#103))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_date_id#104,d_date#105,d_month_seq#106,d_week_seq#107,d_quarter_seq#108,d_year#109,d_dow#110,d_moy#111,d_dom#112,d_qoy#113,d_fy_year#114,d_fy_quarter_seq#115,d_fy_week_seq#116,d_day_name#117,d_quarter_name#118,d_holiday#119,d_weekend#120,d_following_holiday#121,d_first_dom#122,d_last_dom#123,d_same_day_ly#124,d_same_day_lq#125,d_current_day#126,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1737101232,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 900,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [d_date_sk#103] Input [3]: [d_date_sk#103, d_year#109, d_moy#111] "
          },
          "1" : {
            "sign" : -1736652804,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 900,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [d_date_sk#103, d_year#109, d_moy#111] Condition : ((((isnotnull(d_moy#111) AND isnotnull(d_year#109)) AND (d_moy#111 = 3)) AND (d_year#109 = 1999)) AND isnotnull(d_date_sk#103)) "
          },
          "2" : {
            "sign" : -1821468799,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 900,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [3]: [d_date_sk#103, d_year#109, d_moy#111] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,3), EqualTo(d_year,1999), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#103]\n+- Filter ((((isnotnull(d_moy#111) AND isnotnull(d_year#109)) AND (d_moy#111 = 3)) AND (d_year#109 = 1999)) AND isnotnull(d_date_sk#103))\n   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_year#109,d_moy#111] Batched: true, DataFilters: [isnotnull(d_moy#111), isnotnull(d_year#109), (d_moy#111 = 3), (d_year#109 = 1999), isnotnull(d_d..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,3), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 900,
        "inputRowCount" : 75
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 6 ],
      "Objectives" : {
        "DurationInMs" : 5388,
        "TotalTasksDurationInMs" : 4296,
        "IOBytes" : {
          "Total" : 93950,
          "Details" : {
            "IR" : 93950,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "14" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1495793296,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2400,
                "rowCount" : 100
              },
              "compileTime" : {
                "sizeInBytes" : 2400,
                "rowCount" : 100
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "1" : {
            "sign" : 837745483,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 271059730529379994828800000,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 271059730529379994828800000,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 916827258,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 271059730529379994828800000,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 271059730529379994828800000,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [segment#326 ASC NULLS FIRST, num_customers#315L ASC NULLS FIRST], true "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [segment#326 ASC NULLS FIRST, num_customers#315L ASC NULLS FIRST], true\n      +- Aggregate [segment#326], [segment#326, count(1) AS num_customers#315L, (segment#326 * 50) AS segment_base#316]\n         +- Aggregate [c_customer_sk#131], [cast((MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#163)),17,2) / 50) as int) AS segment#326]\n            +- Project [c_customer_sk#131, ss_ext_sales_price#163]\n               +- Join Inner, (c_customer_sk#131 = ss_customer_sk#151)\n                  :- Project [c_customer_sk#131]\n                  :  +- Join Inner, (c_current_addr_sk#135 = ca_address_sk#172)\n                  :     :- LogicalQueryStage Project [ca_address_sk#172], BroadcastQueryStage 5\n                  :     +- Aggregate [c_customer_sk#131, c_current_addr_sk#135], [c_customer_sk#131, c_current_addr_sk#135]\n                  :        +- Project [c_customer_sk#131, c_current_addr_sk#135]\n                  :           +- Join Inner, (c_customer_sk#131 = customer_sk#318)\n                  :              :- LogicalQueryStage Project [customer_sk#318], ShuffleQueryStage 6\n                  :              +- LogicalQueryStage Project [c_customer_sk#131, c_current_addr_sk#135], ShuffleQueryStage 3\n                  +- LogicalQueryStage Project [ss_customer_sk#151, ss_ext_sales_price#163], ShuffleQueryStage 7\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -287555741,
            "className" : "org.apache.spark.sql.execution.TakeOrderedAndProjectExec",
            "sizeInBytes" : 2400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) TakeOrderedAndProject Input [3]: [segment#326, num_customers#315L, segment_base#316] Arguments: 100, [segment#326 ASC NULLS FIRST, num_customers#315L ASC NULLS FIRST], [segment#326, num_customers#315L, segment_base#316] "
          },
          "1" : {
            "sign" : 155089345,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 288,
            "rowCount" : 12,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [2]: [segment#326, count#422L] Keys [1]: [segment#326] Functions [1]: [count(1)] Aggregate Attributes [1]: [count(1)#327L] Results [3]: [segment#326, count(1)#327L AS num_customers#315L, (segment#326 * 50) AS segment_base#316] "
          },
          "2" : {
            "sign" : 1417416733,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 271059730529379994828800000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [segment#326, count#422L] Arguments: 9 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "ShuffleQueryStage",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "TakeOrderedAndProject",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "TakeOrderedAndProject(limit=100, orderBy=[segment#326 ASC NULLS FIRST,num_customers#315L ASC NULLS FIRST], output=[segment#326,num_customers#315L,segment_base#316])\n+- HashAggregate(keys=[segment#326], functions=[count(1)], output=[segment#326, num_customers#315L, segment_base#316])\n   +- ShuffleQueryStage 9\n      +- Exchange hashpartitioning(segment#326, 200), ENSURE_REQUIREMENTS, [plan_id=2088]\n         +- *(13) HashAggregate(keys=[segment#326], functions=[partial_count(1)], output=[segment#326, count#422L])\n            +- *(13) HashAggregate(keys=[c_customer_sk#131], functions=[sum(UnscaledValue(ss_ext_sales_price#163))], output=[segment#326])\n               +- *(13) HashAggregate(keys=[c_customer_sk#131], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#163))], output=[c_customer_sk#131, sum#424L])\n                  +- *(13) Project [c_customer_sk#131, ss_ext_sales_price#163]\n                     +- *(13) SortMergeJoin [c_customer_sk#131], [ss_customer_sk#151], Inner\n                        :- *(11) Sort [c_customer_sk#131 ASC NULLS FIRST], false, 0\n                        :  +- *(11) Project [c_customer_sk#131]\n                        :     +- *(11) BroadcastHashJoin [ca_address_sk#172], [c_current_addr_sk#135], Inner, BuildLeft, false\n                        :        :- BroadcastQueryStage 5\n                        :        :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=871]\n                        :        :     +- *(6) Project [ca_address_sk#172]\n                        :        :        +- *(6) BroadcastHashJoin [ca_county#179, ca_state#180], [s_county#208, s_state#209], Inner, BuildRight, false\n                        :        :           :- *(6) Filter ((isnotnull(ca_address_sk#172) AND isnotnull(ca_county#179)) AND isnotnull(ca_state#180))\n                        :        :           :  +- *(6) ColumnarToRow\n                        :        :           :     +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#172,ca_county#179,ca_state#180] Batched: true, DataFilters: [isnotnull(ca_address_sk#172), isnotnull(ca_county#179), isnotnull(ca_state#180)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_county), IsNotNull(ca_state)], ReadSchema: struct<ca_address_sk:int,ca_county:string,ca_state:string>\n                        :        :           +- BroadcastQueryStage 0\n                        :        :              +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, false], input[1, string, false]),false), [plan_id=470]\n                        :        :                 +- *(1) Filter (isnotnull(s_county#208) AND isnotnull(s_state#209))\n                        :        :                    +- *(1) ColumnarToRow\n                        :        :                       +- FileScan parquet spark_catalog.tpcds_100.store[s_county#208,s_state#209] Batched: true, DataFilters: [isnotnull(s_county#208), isnotnull(s_state#209)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_county), IsNotNull(s_state)], ReadSchema: struct<s_county:string,s_state:string>\n                        :        +- *(11) HashAggregate(keys=[c_customer_sk#131, c_current_addr_sk#135], functions=[], output=[c_customer_sk#131, c_current_addr_sk#135])\n                        :           +- *(11) HashAggregate(keys=[c_customer_sk#131, c_current_addr_sk#135], functions=[], output=[c_customer_sk#131, c_current_addr_sk#135])\n                        :              +- *(11) Project [c_customer_sk#131, c_current_addr_sk#135]\n                        :                 +- *(11) BroadcastHashJoin [customer_sk#318], [c_customer_sk#131], Inner, BuildLeft, false\n                        :                    :- BroadcastQueryStage 8\n                        :                    :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1938]\n                        :                    :     +- AQEShuffleRead local\n                        :                    :        +- ShuffleQueryStage 6\n                        :                    :           +- Exchange hashpartitioning(customer_sk#318, 200), ENSURE_REQUIREMENTS, [plan_id=1420]\n                        :                    :              +- *(9) Project [customer_sk#318]\n                        :                    :                 +- *(9) BroadcastHashJoin [item_sk#319], [i_item_sk#81], Inner, BuildRight, false\n                        :                    :                    :- *(9) Project [customer_sk#318, item_sk#319]\n                        :                    :                    :  +- *(9) BroadcastHashJoin [sold_date_sk#317], [d_date_sk#103], Inner, BuildRight, false\n                        :                    :                    :     :- Union\n                        :                    :                    :     :  :- *(7) Project [cs_sold_date_sk#46 AS sold_date_sk#317, cs_bill_customer_sk#15 AS customer_sk#318, cs_item_sk#27 AS item_sk#319]\n                        :                    :                    :     :  :  +- *(7) Filter (isnotnull(cs_item_sk#27) AND isnotnull(cs_bill_customer_sk#15))\n                        :                    :                    :     :  :     +- *(7) ColumnarToRow\n                        :                    :                    :     :  :        +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_bill_customer_sk#15,cs_item_sk#27,cs_sold_date_sk#46] Batched: true, DataFilters: [isnotnull(cs_item_sk#27), isnotnull(cs_bill_customer_sk#15)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#46), dynamicpruningexpression(cs_sold_date_sk#46 IN dynamicpruning#419)], PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_bill_customer_sk)], ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int>\n                        :                    :                    :     :  :              +- SubqueryBroadcast dynamicpruning#419, 0, [d_date_sk#103], [id=#1342]\n                        :                    :                    :     :  :                 +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                                +- == Final Plan ==\n                                                                                                   BroadcastQueryStage 1\n                                                                                                   +- ReusedExchange [d_date_sk#103], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=490]\n                                                                                                +- == Initial Plan ==\n                                                                                                   BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1339]\n                                                                                                   +- Project [d_date_sk#103]\n                                                                                                      +- Filter ((((isnotnull(d_moy#111) AND isnotnull(d_year#109)) AND (d_moy#111 = 3)) AND (d_year#109 = 1999)) AND isnotnull(d_date_sk#103))\n                                                                                                         +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_year#109,d_moy#111] Batched: true, DataFilters: [isnotnull(d_moy#111), isnotnull(d_year#109), (d_moy#111 = 3), (d_year#109 = 1999), isnotnull(d_d..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,3), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n                        :                    :                    :     :  +- *(8) Project [ws_sold_date_sk#80 AS sold_date_sk#320, ws_bill_customer_sk#50 AS customer_sk#321, ws_item_sk#49 AS item_sk#322]\n                        :                    :                    :     :     +- *(8) Filter (isnotnull(ws_item_sk#49) AND isnotnull(ws_bill_customer_sk#50))\n                        :                    :                    :     :        +- *(8) ColumnarToRow\n                        :                    :                    :     :           +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_item_sk#49,ws_bill_customer_sk#50,ws_sold_date_sk#80] Batched: true, DataFilters: [isnotnull(ws_item_sk#49), isnotnull(ws_bill_customer_sk#50)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#80), dynamicpruningexpression(ws_sold_date_sk#80 IN dynamicpruning#419)], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_bill_customer_sk)], ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int>\n                        :                    :                    :     :                 +- ReusedSubquery SubqueryBroadcast dynamicpruning#419, 0, [d_date_sk#103], [id=#1342]\n                        :                    :                    :     +- BroadcastQueryStage 1\n                        :                    :                    :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=490]\n                        :                    :                    :           +- *(2) Project [d_date_sk#103]\n                        :                    :                    :              +- *(2) Filter ((((isnotnull(d_moy#111) AND isnotnull(d_year#109)) AND (d_moy#111 = 3)) AND (d_year#109 = 1999)) AND isnotnull(d_date_sk#103))\n                        :                    :                    :                 +- *(2) ColumnarToRow\n                        :                    :                    :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_year#109,d_moy#111] Batched: true, DataFilters: [isnotnull(d_moy#111), isnotnull(d_year#109), (d_moy#111 = 3), (d_year#109 = 1999), isnotnull(d_d..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,3), EqualTo(d_year,1999), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n                        :                    :                    +- BroadcastQueryStage 2\n                        :                    :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=511]\n                        :                    :                          +- *(3) Project [i_item_sk#81]\n                        :                    :                             +- *(3) Filter ((((isnotnull(i_category#93) AND isnotnull(i_class#91)) AND (i_category#93 = Jewelry)) AND (i_class#91 = consignment)) AND isnotnull(i_item_sk#81))\n                        :                    :                                +- *(3) ColumnarToRow\n                        :                    :                                   +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#81,i_class#91,i_category#93] Batched: true, DataFilters: [isnotnull(i_category#93), isnotnull(i_class#91), (i_category#93 = Jewelry), (i_class#91 = consig..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_category), IsNotNull(i_class), EqualTo(i_category,Jewelry), EqualTo(i_class,consignm..., ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>\n                        :                    +- AQEShuffleRead coalesced\n                        :                       +- ShuffleQueryStage 3\n                        :                          +- Exchange hashpartitioning(c_customer_sk#131, 200), ENSURE_REQUIREMENTS, [plan_id=532]\n                        :                             +- *(4) Filter (isnotnull(c_customer_sk#131) AND isnotnull(c_current_addr_sk#135))\n                        :                                +- *(4) ColumnarToRow\n                        :                                   +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#131,c_current_addr_sk#135] Batched: true, DataFilters: [isnotnull(c_customer_sk#131), isnotnull(c_current_addr_sk#135)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)], ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>\n                        +- *(12) Sort [ss_customer_sk#151 ASC NULLS FIRST], false, 0\n                           +- AQEShuffleRead coalesced\n                              +- ShuffleQueryStage 7\n                                 +- Exchange hashpartitioning(ss_customer_sk#151, 200), ENSURE_REQUIREMENTS, [plan_id=1650]\n                                    +- *(10) Project [ss_customer_sk#151, ss_ext_sales_price#163]\n                                       +- *(10) BroadcastHashJoin [ss_sold_date_sk#171], [d_date_sk#328], Inner, BuildRight, false\n                                          :- *(10) Filter isnotnull(ss_customer_sk#151)\n                                          :  +- *(10) ColumnarToRow\n                                          :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_customer_sk#151,ss_ext_sales_price#163,ss_sold_date_sk#171] Batched: true, DataFilters: [isnotnull(ss_customer_sk#151)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#171), dynamicpruningexpression(ss_sold_date_sk#171 IN dynamicpruning#4..., PushedFilters: [IsNotNull(ss_customer_sk)], ReadSchema: struct<ss_customer_sk:int,ss_ext_sales_price:decimal(7,2)>\n                                          :           +- SubqueryBroadcast dynamicpruning#420, 0, [d_date_sk#328], [id=#1624]\n                                          :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                            +- == Final Plan ==\n                                                               BroadcastQueryStage 1\n                                                               +- ReusedExchange [d_date_sk#328], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=558]\n                                                            +- == Initial Plan ==\n                                                               BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1621]\n                                                               +- Project [d_date_sk#328]\n                                                                  +- Filter (((isnotnull(d_month_seq#331) AND (d_month_seq#331 >= Subquery subquery#324, [id=#180])) AND (d_month_seq#331 <= Subquery subquery#325, [id=#193])) AND isnotnull(d_date_sk#328))\n                                                                     :  :- Subquery subquery#324, [id=#180]\n                                                                     :  :  +- AdaptiveSparkPlan isFinalPlan=false\n                                                                     :  :     +- HashAggregate(keys=[(d_month_seq + 1)#356], functions=[], output=[(d_month_seq + 1)#356])\n                                                                     :  :        +- Exchange hashpartitioning((d_month_seq + 1)#356, 200), ENSURE_REQUIREMENTS, [plan_id=178]\n                                                                     :  :           +- HashAggregate(keys=[(d_month_seq + 1)#356], functions=[], output=[(d_month_seq + 1)#356])\n                                                                     :  :              +- Project [(d_month_seq#362 + 1) AS (d_month_seq + 1)#356]\n                                                                     :  :                 +- Filter (((isnotnull(d_year#365) AND isnotnull(d_moy#367)) AND (d_year#365 = 1999)) AND (d_moy#367 = 3))\n                                                                     :  :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#362,d_year#365,d_moy#367] Batched: true, DataFilters: [isnotnull(d_year#365), isnotnull(d_moy#367), (d_year#365 = 1999), (d_moy#367 = 3)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), EqualTo(d_moy,3)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n                                                                     :  +- Subquery subquery#325, [id=#193]\n                                                                     :     +- AdaptiveSparkPlan isFinalPlan=false\n                                                                     :        +- HashAggregate(keys=[(d_month_seq + 3)#357], functions=[], output=[(d_month_seq + 3)#357])\n                                                                     :           +- Exchange hashpartitioning((d_month_seq + 3)#357, 200), ENSURE_REQUIREMENTS, [plan_id=191]\n                                                                     :              +- HashAggregate(keys=[(d_month_seq + 3)#357], functions=[], output=[(d_month_seq + 3)#357])\n                                                                     :                 +- Project [(d_month_seq#390 + 3) AS (d_month_seq + 3)#357]\n                                                                     :                    +- Filter (((isnotnull(d_year#393) AND isnotnull(d_moy#395)) AND (d_year#393 = 1999)) AND (d_moy#395 = 3))\n                                                                     :                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#390,d_year#393,d_moy#395] Batched: true, DataFilters: [isnotnull(d_year#393), isnotnull(d_moy#395), (d_year#393 = 1999), (d_moy#395 = 3)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), EqualTo(d_moy,3)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n                                                                     +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#328,d_month_seq#331] Batched: true, DataFilters: [isnotnull(d_month_seq#331), isnotnull(d_date_sk#328)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_month_seq:int>\n                                          +- BroadcastQueryStage 4\n                                             +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=558]\n                                                +- *(5) Project [d_date_sk#328]\n                                                   +- *(5) Filter (((isnotnull(d_month_seq#331) AND (d_month_seq#331 >= Subquery subquery#324, [id=#210])) AND (d_month_seq#331 <= Subquery subquery#325, [id=#223])) AND isnotnull(d_date_sk#328))\n                                                      :  :- Subquery subquery#324, [id=#210]\n                                                      :  :  +- AdaptiveSparkPlan isFinalPlan=true\n                                                               +- == Final Plan ==\n                                                                  *(2) HashAggregate(keys=[(d_month_seq + 1)#356], functions=[], output=[(d_month_seq + 1)#356])\n                                                                  +- AQEShuffleRead coalesced\n                                                                     +- ShuffleQueryStage 0\n                                                                        +- Exchange hashpartitioning((d_month_seq + 1)#356, 200), ENSURE_REQUIREMENTS, [plan_id=610]\n                                                                           +- *(1) HashAggregate(keys=[(d_month_seq + 1)#356], functions=[], output=[(d_month_seq + 1)#356])\n                                                                              +- *(1) Project [(d_month_seq#362 + 1) AS (d_month_seq + 1)#356]\n                                                                                 +- *(1) Filter (((isnotnull(d_year#365) AND isnotnull(d_moy#367)) AND (d_year#365 = 1999)) AND (d_moy#367 = 3))\n                                                                                    +- *(1) ColumnarToRow\n                                                                                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#362,d_year#365,d_moy#367] Batched: true, DataFilters: [isnotnull(d_year#365), isnotnull(d_moy#367), (d_year#365 = 1999), (d_moy#367 = 3)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), EqualTo(d_moy,3)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n                                                               +- == Initial Plan ==\n                                                                  HashAggregate(keys=[(d_month_seq + 1)#356], functions=[], output=[(d_month_seq + 1)#356])\n                                                                  +- Exchange hashpartitioning((d_month_seq + 1)#356, 200), ENSURE_REQUIREMENTS, [plan_id=208]\n                                                                     +- HashAggregate(keys=[(d_month_seq + 1)#356], functions=[], output=[(d_month_seq + 1)#356])\n                                                                        +- Project [(d_month_seq#362 + 1) AS (d_month_seq + 1)#356]\n                                                                           +- Filter (((isnotnull(d_year#365) AND isnotnull(d_moy#367)) AND (d_year#365 = 1999)) AND (d_moy#367 = 3))\n                                                                              +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#362,d_year#365,d_moy#367] Batched: true, DataFilters: [isnotnull(d_year#365), isnotnull(d_moy#367), (d_year#365 = 1999), (d_moy#367 = 3)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), EqualTo(d_moy,3)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n                                                      :  +- Subquery subquery#325, [id=#223]\n                                                      :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                               +- == Final Plan ==\n                                                                  *(2) HashAggregate(keys=[(d_month_seq + 3)#357], functions=[], output=[(d_month_seq + 3)#357])\n                                                                  +- AQEShuffleRead coalesced\n                                                                     +- ShuffleQueryStage 0\n                                                                        +- Exchange hashpartitioning((d_month_seq + 3)#357, 200), ENSURE_REQUIREMENTS, [plan_id=600]\n                                                                           +- *(1) HashAggregate(keys=[(d_month_seq + 3)#357], functions=[], output=[(d_month_seq + 3)#357])\n                                                                              +- *(1) Project [(d_month_seq#390 + 3) AS (d_month_seq + 3)#357]\n                                                                                 +- *(1) Filter (((isnotnull(d_year#393) AND isnotnull(d_moy#395)) AND (d_year#393 = 1999)) AND (d_moy#395 = 3))\n                                                                                    +- *(1) ColumnarToRow\n                                                                                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#390,d_year#393,d_moy#395] Batched: true, DataFilters: [isnotnull(d_year#393), isnotnull(d_moy#395), (d_year#393 = 1999), (d_moy#395 = 3)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), EqualTo(d_moy,3)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n                                                               +- == Initial Plan ==\n                                                                  HashAggregate(keys=[(d_month_seq + 3)#357], functions=[], output=[(d_month_seq + 3)#357])\n                                                                  +- Exchange hashpartitioning((d_month_seq + 3)#357, 200), ENSURE_REQUIREMENTS, [plan_id=221]\n                                                                     +- HashAggregate(keys=[(d_month_seq + 3)#357], functions=[], output=[(d_month_seq + 3)#357])\n                                                                        +- Project [(d_month_seq#390 + 3) AS (d_month_seq + 3)#357]\n                                                                           +- Filter (((isnotnull(d_year#393) AND isnotnull(d_moy#395)) AND (d_year#393 = 1999)) AND (d_moy#395 = 3))\n                                                                              +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#390,d_year#393,d_moy#395] Batched: true, DataFilters: [isnotnull(d_year#393), isnotnull(d_moy#395), (d_year#393 = 1999), (d_moy#395 = 3)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), EqualTo(d_moy,3)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n                                                      +- *(5) ColumnarToRow\n                                                         +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#328,d_month_seq#331] Batched: true, DataFilters: [isnotnull(d_month_seq#331), isnotnull(d_date_sk#328)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_month_seq:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 288,
        "inputRowCount" : 12
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "5" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 14,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 25 ],
      "Objectives" : {
        "DurationInMs" : 456,
        "TotalTasksDurationInMs" : 447,
        "IOBytes" : {
          "Total" : 768,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 768,
            "SW" : 0
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1990640188,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 19698,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 19698,
                "rowCount" : 402
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_county#208, s_state#209] "
          },
          "1" : {
            "sign" : -1045486471,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(s_county#208) AND isnotnull(s_state#209)) "
          },
          "2" : {
            "sign" : -1453409683,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#185, s_store_id#186, s_rec_start_date#187, s_rec_end_date#188, s_closed_date_sk#189, s_store_name#190, s_number_employees#191, s_floor_space#192, s_hours#193, s_manager#194, s_market_id#195, s_geography_class#196, s_market_desc#197, s_market_manager#198, s_division_id#199, s_division_name#200, s_company_id#201, s_company_name#202, s_street_number#203, s_street_name#204, s_street_type#205, s_suite_number#206, s_city#207, s_county#208, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [s_county#208, s_state#209]\n+- Filter (isnotnull(s_county#208) AND isnotnull(s_state#209))\n   +- Relation spark_catalog.tpcds_100.store[s_store_sk#185,s_store_id#186,s_rec_start_date#187,s_rec_end_date#188,s_closed_date_sk#189,s_store_name#190,s_number_employees#191,s_floor_space#192,s_hours#193,s_manager#194,s_market_id#195,s_geography_class#196,s_market_desc#197,s_market_manager#198,s_division_id#199,s_division_name#200,s_company_id#201,s_company_name#202,s_street_number#203,s_street_name#204,s_street_type#205,s_suite_number#206,s_city#207,s_county#208,... 5 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1576915603,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 19698,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [s_county#208, s_state#209] Condition : (isnotnull(s_county#208) AND isnotnull(s_state#209)) "
          },
          "1" : {
            "sign" : -1782821857,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 19698,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store Output [2]: [s_county#208, s_state#209] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store] PushedFilters: [IsNotNull(s_county), IsNotNull(s_state)] ReadSchema: struct<s_county:string,s_state:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(s_county#208) AND isnotnull(s_state#209))\n+- FileScan parquet spark_catalog.tpcds_100.store[s_county#208,s_state#209] Batched: true, DataFilters: [isnotnull(s_county#208), isnotnull(s_state#209)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_county), IsNotNull(s_state)], ReadSchema: struct<s_county:string,s_state:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 19698,
        "inputRowCount" : 402
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 5 ],
      "Objectives" : {
        "DurationInMs" : 3278,
        "TotalTasksDurationInMs" : 2102,
        "IOBytes" : {
          "Total" : 13161,
          "Details" : {
            "IR" : 13161,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -492370393,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2448,
                "rowCount" : 204
              },
              "compileTime" : {
                "sizeInBytes" : 2448,
                "rowCount" : 204
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#81] "
          },
          "1" : {
            "sign" : 1848238258,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86904,
                "rowCount" : 204
              },
              "compileTime" : {
                "sizeInBytes" : 86904,
                "rowCount" : 204
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(i_category#93) AND isnotnull(i_class#91)) AND ((i_category#93 = Jewelry) AND (i_class#91 = consignment))) AND isnotnull(i_item_sk#81)) "
          },
          "2" : {
            "sign" : -357337018,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#81, i_item_id#82, i_rec_start_date#83, i_rec_end_date#84, i_item_desc#85, i_current_price#86, i_wholesale_cost#87, i_brand_id#88, i_brand#89, i_class_id#90, i_class#91, i_category_id#92, i_category#93, i_manufact_id#94, i_manufact#95, i_size#96, i_formulation#97, i_color#98, i_units#99, i_container#100, i_manager_id#101, i_product_name#102], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#81]\n+- Filter (((isnotnull(i_category#93) AND isnotnull(i_class#91)) AND ((i_category#93 = Jewelry) AND (i_class#91 = consignment))) AND isnotnull(i_item_sk#81))\n   +- Relation spark_catalog.tpcds_100.item[i_item_sk#81,i_item_id#82,i_rec_start_date#83,i_rec_end_date#84,i_item_desc#85,i_current_price#86,i_wholesale_cost#87,i_brand_id#88,i_brand#89,i_class_id#90,i_class#91,i_category_id#92,i_category#93,i_manufact_id#94,i_manufact#95,i_size#96,i_formulation#97,i_color#98,i_units#99,i_container#100,i_manager_id#101,i_product_name#102] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1993695812,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 2448,
            "rowCount" : 204,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [i_item_sk#81] Input [3]: [i_item_sk#81, i_class#91, i_category#93] "
          },
          "1" : {
            "sign" : -1205360131,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 2448,
            "rowCount" : 204,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [i_item_sk#81, i_class#91, i_category#93] Condition : ((((isnotnull(i_category#93) AND isnotnull(i_class#91)) AND (i_category#93 = Jewelry)) AND (i_class#91 = consignment)) AND isnotnull(i_item_sk#81)) "
          },
          "2" : {
            "sign" : 317785047,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 2448,
            "rowCount" : 204,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.item Output [3]: [i_item_sk#81, i_class#91, i_category#93] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item] PushedFilters: [IsNotNull(i_category), IsNotNull(i_class), EqualTo(i_category,Jewelry), EqualTo(i_class,consignment), IsNotNull(i_item_sk)] ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.item",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#81]\n+- Filter ((((isnotnull(i_category#93) AND isnotnull(i_class#91)) AND (i_category#93 = Jewelry)) AND (i_class#91 = consignment)) AND isnotnull(i_item_sk#81))\n   +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#81,i_class#91,i_category#93] Batched: true, DataFilters: [isnotnull(i_category#93), isnotnull(i_class#91), (i_category#93 = Jewelry), (i_class#91 = consig..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_category), IsNotNull(i_class), EqualTo(i_category,Jewelry), EqualTo(i_class,consignm..., ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2448,
        "inputRowCount" : 204
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 4 ],
      "Objectives" : {
        "DurationInMs" : 3559,
        "TotalTasksDurationInMs" : 5531,
        "IOBytes" : {
          "Total" : 1154943,
          "Details" : {
            "IR" : 1154943,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1811606857,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 876588,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 876588,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#328] "
          },
          "1" : {
            "sign" : -956519042,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_month_seq#331) AND ((d_month_seq#331 >= scalar-subquery#324 []) AND (d_month_seq#331 <= scalar-subquery#325 []))) AND isnotnull(d_date_sk#328)) "
          },
          "2" : {
            "sign" : 573641338,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#328, d_date_id#329, d_date#330, d_month_seq#331, d_week_seq#332, d_quarter_seq#333, d_year#334, d_dow#335, d_moy#336, d_dom#337, d_qoy#338, d_fy_year#339, d_fy_quarter_seq#340, d_fy_week_seq#341, d_day_name#342, d_quarter_name#343, d_holiday#344, d_weekend#345, d_following_holiday#346, d_first_dom#347, d_last_dom#348, d_same_day_ly#349, d_same_day_lq#350, d_current_day#351, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#328]\n+- Filter ((isnotnull(d_month_seq#331) AND ((d_month_seq#331 >= scalar-subquery#324 []) AND (d_month_seq#331 <= scalar-subquery#325 []))) AND isnotnull(d_date_sk#328))\n   :  :- Aggregate [(d_month_seq + 1)#356], [(d_month_seq + 1)#356]\n   :  :  +- Project [(d_month_seq#362 + 1) AS (d_month_seq + 1)#356]\n   :  :     +- Filter ((isnotnull(d_year#365) AND isnotnull(d_moy#367)) AND ((d_year#365 = 1999) AND (d_moy#367 = 3)))\n   :  :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#359,d_date_id#360,d_date#361,d_month_seq#362,d_week_seq#363,d_quarter_seq#364,d_year#365,d_dow#366,d_moy#367,d_dom#368,d_qoy#369,d_fy_year#370,d_fy_quarter_seq#371,d_fy_week_seq#372,d_day_name#373,d_quarter_name#374,d_holiday#375,d_weekend#376,d_following_holiday#377,d_first_dom#378,d_last_dom#379,d_same_day_ly#380,d_same_day_lq#381,d_current_day#382,... 4 more fields] parquet\n   :  +- Aggregate [(d_month_seq + 3)#357], [(d_month_seq + 3)#357]\n   :     +- Project [(d_month_seq#390 + 3) AS (d_month_seq + 3)#357]\n   :        +- Filter ((isnotnull(d_year#393) AND isnotnull(d_moy#395)) AND ((d_year#393 = 1999) AND (d_moy#395 = 3)))\n   :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#387,d_date_id#388,d_date#389,d_month_seq#390,d_week_seq#391,d_quarter_seq#392,d_year#393,d_dow#394,d_moy#395,d_dom#396,d_qoy#397,d_fy_year#398,d_fy_quarter_seq#399,d_fy_week_seq#400,d_day_name#401,d_quarter_name#402,d_holiday#403,d_weekend#404,d_following_holiday#405,d_first_dom#406,d_last_dom#407,d_same_day_ly#408,d_same_day_lq#409,d_current_day#410,... 4 more fields] parquet\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#328,d_date_id#329,d_date#330,d_month_seq#331,d_week_seq#332,d_quarter_seq#333,d_year#334,d_dow#335,d_moy#336,d_dom#337,d_qoy#338,d_fy_year#339,d_fy_quarter_seq#340,d_fy_week_seq#341,d_day_name#342,d_quarter_name#343,d_holiday#344,d_weekend#345,d_following_holiday#346,d_first_dom#347,d_last_dom#348,d_same_day_ly#349,d_same_day_lq#350,d_current_day#351,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1780448281,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 876588,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [d_date_sk#328] Input [2]: [d_date_sk#328, d_month_seq#331] "
          },
          "1" : {
            "sign" : 2121108906,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 876588,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [d_date_sk#328, d_month_seq#331] Condition : (((isnotnull(d_month_seq#331) AND (d_month_seq#331 >= Subquery subquery#324, [id=#210])) AND (d_month_seq#331 <= Subquery subquery#325, [id=#223])) AND isnotnull(d_date_sk#328)) "
          },
          "2" : {
            "sign" : 1715650221,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 876588,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [2]: [d_date_sk#328, d_month_seq#331] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_month_seq:int> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#328]\n+- Filter (((isnotnull(d_month_seq#331) AND (d_month_seq#331 >= Subquery subquery#324, [id=#210])) AND (d_month_seq#331 <= Subquery subquery#325, [id=#223])) AND isnotnull(d_date_sk#328))\n   :  :- Subquery subquery#324, [id=#210]\n   :  :  +- AdaptiveSparkPlan isFinalPlan=false\n   :  :     +- HashAggregate(keys=[(d_month_seq + 1)#356], functions=[], output=[(d_month_seq + 1)#356])\n   :  :        +- Exchange hashpartitioning((d_month_seq + 1)#356, 200), ENSURE_REQUIREMENTS, [plan_id=208]\n   :  :           +- HashAggregate(keys=[(d_month_seq + 1)#356], functions=[], output=[(d_month_seq + 1)#356])\n   :  :              +- Project [(d_month_seq#362 + 1) AS (d_month_seq + 1)#356]\n   :  :                 +- Filter (((isnotnull(d_year#365) AND isnotnull(d_moy#367)) AND (d_year#365 = 1999)) AND (d_moy#367 = 3))\n   :  :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#362,d_year#365,d_moy#367] Batched: true, DataFilters: [isnotnull(d_year#365), isnotnull(d_moy#367), (d_year#365 = 1999), (d_moy#367 = 3)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), EqualTo(d_moy,3)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n   :  +- Subquery subquery#325, [id=#223]\n   :     +- AdaptiveSparkPlan isFinalPlan=false\n   :        +- HashAggregate(keys=[(d_month_seq + 3)#357], functions=[], output=[(d_month_seq + 3)#357])\n   :           +- Exchange hashpartitioning((d_month_seq + 3)#357, 200), ENSURE_REQUIREMENTS, [plan_id=221]\n   :              +- HashAggregate(keys=[(d_month_seq + 3)#357], functions=[], output=[(d_month_seq + 3)#357])\n   :                 +- Project [(d_month_seq#390 + 3) AS (d_month_seq + 3)#357]\n   :                    +- Filter (((isnotnull(d_year#393) AND isnotnull(d_moy#395)) AND (d_year#393 = 1999)) AND (d_moy#395 = 3))\n   :                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#390,d_year#393,d_moy#395] Batched: true, DataFilters: [isnotnull(d_year#393), isnotnull(d_moy#395), (d_year#393 = 1999), (d_moy#395 = 3)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), EqualTo(d_moy,3)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#328,d_month_seq#331] Batched: true, DataFilters: [isnotnull(d_month_seq#331), isnotnull(d_date_sk#328)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_month_seq:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 876588,
        "inputRowCount" : 73049
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 15 ],
      "Objectives" : {
        "DurationInMs" : 75,
        "TotalTasksDurationInMs" : 71,
        "IOBytes" : {
          "Total" : 321044,
          "Details" : {
            "IR" : 321044,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -500062595,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 900,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 900,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(d_month_seq + 1)#356], [(d_month_seq + 1)#356] "
          },
          "1" : {
            "sign" : -1362384554,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 900,
                "rowCount" : 75
              },
              "compileTime" : {
                "sizeInBytes" : 900,
                "rowCount" : 75
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [(d_month_seq#362 + 1) AS (d_month_seq + 1)#356] "
          },
          "2" : {
            "sign" : -1495890998,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 18450,
                "rowCount" : 75
              },
              "compileTime" : {
                "sizeInBytes" : 18450,
                "rowCount" : 75
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#365) AND isnotnull(d_moy#367)) AND ((d_year#365 = 1999) AND (d_moy#367 = 3))) "
          },
          "3" : {
            "sign" : -2094062293,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#359, d_date_id#360, d_date#361, d_month_seq#362, d_week_seq#363, d_quarter_seq#364, d_year#365, d_dow#366, d_moy#367, d_dom#368, d_qoy#369, d_fy_year#370, d_fy_quarter_seq#371, d_fy_week_seq#372, d_day_name#373, d_quarter_name#374, d_holiday#375, d_weekend#376, d_following_holiday#377, d_first_dom#378, d_last_dom#379, d_same_day_ly#380, d_same_day_lq#381, d_current_day#382, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "LogicalRelation",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [(d_month_seq + 1)#356], [(d_month_seq + 1)#356]\n+- Project [(d_month_seq#362 + 1) AS (d_month_seq + 1)#356]\n   +- Filter ((isnotnull(d_year#365) AND isnotnull(d_moy#367)) AND ((d_year#365 = 1999) AND (d_moy#367 = 3)))\n      +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#359,d_date_id#360,d_date#361,d_month_seq#362,d_week_seq#363,d_quarter_seq#364,d_year#365,d_dow#366,d_moy#367,d_dom#368,d_qoy#369,d_fy_year#370,d_fy_quarter_seq#371,d_fy_week_seq#372,d_day_name#373,d_quarter_name#374,d_holiday#375,d_weekend#376,d_following_holiday#377,d_first_dom#378,d_last_dom#379,d_same_day_ly#380,d_same_day_lq#381,d_current_day#382,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -733900098,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 900,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [1]: [(d_month_seq + 1)#356] Keys [1]: [(d_month_seq + 1)#356] Functions: [] Aggregate Attributes: [] Results [1]: [(d_month_seq + 1)#356] "
          },
          "1" : {
            "sign" : 380138111,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 900,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [(d_month_seq#362 + 1) AS (d_month_seq + 1)#356] Input [3]: [d_month_seq#362, d_year#365, d_moy#367] "
          },
          "2" : {
            "sign" : 367766267,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 900,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [d_month_seq#362, d_year#365, d_moy#367] Condition : (((isnotnull(d_year#365) AND isnotnull(d_moy#367)) AND (d_year#365 = 1999)) AND (d_moy#367 = 3)) "
          },
          "3" : {
            "sign" : -1288965352,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 900,
            "rowCount" : 75,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [3]: [d_month_seq#362, d_year#365, d_moy#367] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), EqualTo(d_moy,3)] ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[(d_month_seq + 1)#356], functions=[], output=[(d_month_seq + 1)#356])\n+- Project [(d_month_seq#362 + 1) AS (d_month_seq + 1)#356]\n   +- Filter (((isnotnull(d_year#365) AND isnotnull(d_moy#367)) AND (d_year#365 = 1999)) AND (d_moy#367 = 3))\n      +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#362,d_year#365,d_moy#367] Batched: true, DataFilters: [isnotnull(d_year#365), isnotnull(d_moy#367), (d_year#365 = 1999), (d_moy#367 = 3)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1999), EqualTo(d_moy,3)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 900,
        "inputRowCount" : 75
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 7 ],
      "Objectives" : {
        "DurationInMs" : 1778,
        "TotalTasksDurationInMs" : 578,
        "IOBytes" : {
          "Total" : 25549,
          "Details" : {
            "IR" : 25490,
            "IW" : 0,
            "SR" : 0,
            "SW" : 59
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702227094650,
  "SQLEndTimeInMs" : 1702227120807,
  "Objectives" : {
    "DurationInMs" : 26157,
    "IOBytes" : {
      "Total" : 250760236,
      "Details" : {
        "IR" : 73295354,
        "IW" : 0,
        "SR" : 88732441,
        "SW" : 88732441
      }
    }
  }
}
