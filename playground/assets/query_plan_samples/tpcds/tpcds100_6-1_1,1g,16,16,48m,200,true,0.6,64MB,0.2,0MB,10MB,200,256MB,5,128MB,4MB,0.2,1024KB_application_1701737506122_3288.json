{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "34" : {
          "sign" : 1993750296,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 246000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(ca_address_sk#5) "
        },
        "12" : {
          "sign" : -979056590,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 39925696056,
          "rowCount" : 262669053,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(ss_customer_sk#38) AND isnotnull(ss_sold_date_sk#58)) AND isnotnull(ss_item_sk#37)) AND dynamicpruning#168 [ss_sold_date_sk#58]) "
        },
        "8" : {
          "sign" : -750933019,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 5745158420,
          "rowCount" : 287257921,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#37 = i_item_sk#87) "
        },
        "19" : {
          "sign" : -1324676492,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 11808,
          "rowCount" : 48,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#122) AND isnotnull(d_moy#124)) AND ((d_year#122 = 2000) AND (d_moy#124 = 2))) "
        },
        "23" : {
          "sign" : -1403291440,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 7714646,
          "rowCount" : 203017,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#87, i_current_price#92, i_category#99] "
        },
        "4" : {
          "sign" : 873518591,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 1650,
          "rowCount" : 55,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [ca_state#13], [ca_state#13 AS state#0, count(1) AS cnt#1L] "
        },
        "15" : {
          "sign" : -1381614471,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_month_seq#62) AND (d_month_seq#62 = scalar-subquery#2 [])) AND isnotnull(d_date_sk#59)) "
        },
        "11" : {
          "sign" : 1407896910,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 5253381060,
          "rowCount" : 262669053,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#37, ss_customer_sk#38, ss_sold_date_sk#58] "
        },
        "9" : {
          "sign" : 1400763059,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 4248649360,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#37, ss_customer_sk#38] "
        },
        "33" : {
          "sign" : 637017624,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 26000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ca_address_sk#5, ca_state#13] "
        },
        "22" : {
          "sign" : -1123822252,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 12993088,
          "rowCount" : 203017,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((cast(i_current_price#92 as decimal(14,7)) > (1.2 * avg(i_current_price)#112)) AND (i_category#156 = i_category#99)) "
        },
        "26" : {
          "sign" : 1246987558,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 340,
          "rowCount" : 10,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(avg(i_current_price)#112) "
        },
        "37" : {
          "sign" : -1415894964,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 500000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(c_current_addr_sk#22) AND isnotnull(c_customer_sk#18)) "
        },
        "13" : {
          "sign" : 1420124520,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 41806893656,
          "rowCount" : 275045353,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#36, ss_item_sk#37, ss_customer_sk#38, ss_cdemo_sk#39, ss_hdemo_sk#40, ss_addr_sk#41, ss_store_sk#42, ss_promo_sk#43, ss_ticket_number#44L, ss_quantity#45, ss_wholesale_cost#46, ss_list_price#47, ss_sales_price#48, ss_ext_discount_amt#49, ss_ext_sales_price#50, ss_ext_wholesale_cost#51, ss_ext_list_price#52, ss_ext_tax#53, ss_coupon_amt#54, ss_net_paid#55, ss_net_paid_inc_tax#56, ss_net_profit#57, ss_sold_date_sk#58], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "24" : {
          "sign" : -1248107947,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 86485242,
          "rowCount" : 203017,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(i_current_price#92) AND isnotnull(i_category#99)) AND isnotnull(i_item_sk#87)) "
        },
        "35" : {
          "sign" : 899459505,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 246000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#5, ca_address_id#6, ca_street_number#7, ca_street_name#8, ca_street_type#9, ca_suite_number#10, ca_city#11, ca_county#12, ca_state#13, ca_zip#14, ca_country#15, ca_gmt_offset#16, ca_location_type#17], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "16" : {
          "sign" : -732351171,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#59, d_date_id#60, d_date#61, d_month_seq#62, d_week_seq#63, d_quarter_seq#64, d_year#65, d_dow#66, d_moy#67, d_dom#68, d_qoy#69, d_fy_year#70, d_fy_quarter_seq#71, d_fy_week_seq#72, d_day_name#73, d_quarter_name#74, d_holiday#75, d_weekend#76, d_following_holiday#77, d_first_dom#78, d_last_dom#79, d_same_day_ly#80, d_same_day_lq#81, d_current_day#82, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "5" : {
          "sign" : 130572402,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 6050966922,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ca_state#13] "
        },
        "10" : {
          "sign" : -631951302,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 6372974040,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#58 = d_date_sk#59) "
        },
        "21" : {
          "sign" : -1894679039,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2436204,
          "rowCount" : 203017,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#87] "
        },
        "32" : {
          "sign" : -997142341,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 68345440,
          "rowCount" : 2010160,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ca_address_sk#5 = c_current_addr_sk#22) "
        },
        "6" : {
          "sign" : 1364776116,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 8251318530,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#18 = ss_customer_sk#38) "
        },
        "36" : {
          "sign" : 1975185675,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 32000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_customer_sk#18, c_current_addr_sk#22] "
        },
        "1" : {
          "sign" : 598780592,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
          "sizeInBytes" : 1650,
          "rowCount" : 55,
          "isRuntime" : false,
          "predicate" : " (unknown) LocalLimit Arguments: 100 "
        },
        "17" : {
          "sign" : 1450723649,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 24,
          "rowCount" : 2,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [d_month_seq#119], [d_month_seq#119] "
        },
        "25" : {
          "sign" : 1492995156,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#87, i_item_id#88, i_rec_start_date#89, i_rec_end_date#90, i_item_desc#91, i_current_price#92, i_wholesale_cost#93, i_brand_id#94, i_brand#95, i_class_id#96, i_class#97, i_category_id#98, i_category#99, i_manufact_id#100, i_manufact#101, i_size#102, i_formulation#103, i_color#104, i_units#105, i_container#106, i_manager_id#107, i_product_name#108], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "14" : {
          "sign" : 66030431,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 876588,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#59] "
        },
        "31" : {
          "sign" : 81199702,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 52264160,
          "rowCount" : 2010160,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ca_state#13, c_customer_sk#18] "
        },
        "0" : {
          "sign" : 1646113953,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
          "sizeInBytes" : 1980,
          "rowCount" : 55,
          "isRuntime" : false,
          "predicate" : " (unknown) GlobalLimit Arguments: 100 "
        },
        "20" : {
          "sign" : 1990712298,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#116, d_date_id#117, d_date#118, d_month_seq#119, d_week_seq#120, d_quarter_seq#121, d_year#122, d_dow#123, d_moy#124, d_dom#125, d_qoy#126, d_fy_year#127, d_fy_quarter_seq#128, d_fy_week_seq#129, d_day_name#130, d_quarter_name#131, d_holiday#132, d_weekend#133, d_following_holiday#134, d_first_dom#135, d_last_dom#136, d_same_day_ly#137, d_same_day_lq#138, d_current_day#139, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "27" : {
          "sign" : 562440660,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 340,
          "rowCount" : 10,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [i_category#156], [cast((avg(UnscaledValue(i_current_price#149)) / 100.0) as decimal(11,6)) AS avg(i_current_price)#112, i_category#156] "
        },
        "2" : {
          "sign" : -386245749,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 1650,
          "rowCount" : 55,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [cnt#1L ASC NULLS FIRST], true "
        },
        "38" : {
          "sign" : 845903676,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 500000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#18, c_customer_id#19, c_current_cdemo_sk#20, c_current_hdemo_sk#21, c_current_addr_sk#22, c_first_shipto_date_sk#23, c_first_sales_date_sk#24, c_salutation#25, c_first_name#26, c_last_name#27, c_preferred_cust_flag#28, c_birth_day#29, c_birth_month#30, c_birth_year#31, c_birth_country#32, c_login#33, c_email_address#34, c_last_review_date#35], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "18" : {
          "sign" : 830530054,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 576,
          "rowCount" : 48,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_month_seq#119] "
        },
        "30" : {
          "sign" : 1578288587,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#144, i_item_id#145, i_rec_start_date#146, i_rec_end_date#147, i_item_desc#148, i_current_price#149, i_wholesale_cost#150, i_brand_id#151, i_brand#152, i_class_id#153, i_class#154, i_category_id#155, i_category#156, i_manufact_id#157, i_manufact#158, i_size#159, i_formulation#160, i_color#161, i_units#162, i_container#163, i_manager_id#164, i_product_name#165], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "7" : {
          "sign" : -279454128,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3447095052,
          "rowCount" : 287257921,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_customer_sk#38] "
        },
        "29" : {
          "sign" : 1954627249,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 86697816,
          "rowCount" : 203516,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(i_category#156) "
        },
        "3" : {
          "sign" : -2117685097,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 1650,
          "rowCount" : 55,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (cnt#1L >= 10) "
        },
        "28" : {
          "sign" : -69453769,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 6919544,
          "rowCount" : 203516,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_current_price#149, i_category#156] "
        }
      },
      "links" : [ {
        "fromId" : 13,
        "fromName" : "LogicalRelation",
        "toId" : 12,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "LogicalRelation",
        "toId" : 15,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "LogicalRelation",
        "toId" : 19,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "Filter",
        "toId" : 18,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "Project",
        "toId" : 17,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Aggregate",
        "toId" : 15,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 15,
        "fromName" : "Filter",
        "toId" : 14,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Project",
        "toId" : 12,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 12,
        "fromName" : "Filter",
        "toId" : 11,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "Project",
        "toId" : 10,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Project",
        "toId" : 10,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Join",
        "toId" : 9,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Project",
        "toId" : 8,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "LogicalRelation",
        "toId" : 24,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "Filter",
        "toId" : 23,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "Project",
        "toId" : 22,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 30,
        "fromName" : "LogicalRelation",
        "toId" : 29,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 29,
        "fromName" : "Filter",
        "toId" : 28,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "Project",
        "toId" : 27,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "Aggregate",
        "toId" : 26,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "Filter",
        "toId" : 22,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "Join",
        "toId" : 21,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Project",
        "toId" : 8,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Join",
        "toId" : 7,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Project",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 35,
        "fromName" : "LogicalRelation",
        "toId" : 34,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 34,
        "fromName" : "Filter",
        "toId" : 33,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 33,
        "fromName" : "Project",
        "toId" : 32,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 38,
        "fromName" : "LogicalRelation",
        "toId" : 37,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 37,
        "fromName" : "Filter",
        "toId" : 36,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 36,
        "fromName" : "Project",
        "toId" : 32,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 32,
        "fromName" : "Join",
        "toId" : 31,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 31,
        "fromName" : "Project",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Join",
        "toId" : 5,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Project",
        "toId" : 4,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Aggregate",
        "toId" : 3,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Filter",
        "toId" : 2,
        "toName" : "Sort",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Sort",
        "toId" : 1,
        "toName" : "LocalLimit",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "LocalLimit",
        "toId" : 0,
        "toName" : "GlobalLimit",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [cnt#1L ASC NULLS FIRST], true\n      +- Filter (cnt#1L >= 10)\n         +- Aggregate [ca_state#13], [ca_state#13 AS state#0, count(1) AS cnt#1L]\n            +- Project [ca_state#13]\n               +- Join Inner, (c_customer_sk#18 = ss_customer_sk#38)\n                  :- Project [ss_customer_sk#38]\n                  :  +- Join Inner, (ss_item_sk#37 = i_item_sk#87)\n                  :     :- Project [ss_item_sk#37, ss_customer_sk#38]\n                  :     :  +- Join Inner, (ss_sold_date_sk#58 = d_date_sk#59)\n                  :     :     :- Project [ss_item_sk#37, ss_customer_sk#38, ss_sold_date_sk#58]\n                  :     :     :  +- Filter (((isnotnull(ss_customer_sk#38) AND isnotnull(ss_sold_date_sk#58)) AND isnotnull(ss_item_sk#37)) AND dynamicpruning#168 [ss_sold_date_sk#58])\n                  :     :     :     :  +- Project [d_date_sk#59]\n                  :     :     :     :     +- Filter ((isnotnull(d_month_seq#62) AND (d_month_seq#62 = scalar-subquery#2 [])) AND isnotnull(d_date_sk#59))\n                  :     :     :     :        :  +- Aggregate [d_month_seq#119], [d_month_seq#119]\n                  :     :     :     :        :     +- Project [d_month_seq#119]\n                  :     :     :     :        :        +- Filter ((isnotnull(d_year#122) AND isnotnull(d_moy#124)) AND ((d_year#122 = 2000) AND (d_moy#124 = 2)))\n                  :     :     :     :        :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#116,d_date_id#117,d_date#118,d_month_seq#119,d_week_seq#120,d_quarter_seq#121,d_year#122,d_dow#123,d_moy#124,d_dom#125,d_qoy#126,d_fy_year#127,d_fy_quarter_seq#128,d_fy_week_seq#129,d_day_name#130,d_quarter_name#131,d_holiday#132,d_weekend#133,d_following_holiday#134,d_first_dom#135,d_last_dom#136,d_same_day_ly#137,d_same_day_lq#138,d_current_day#139,... 4 more fields] parquet\n                  :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#59,d_date_id#60,d_date#61,d_month_seq#62,d_week_seq#63,d_quarter_seq#64,d_year#65,d_dow#66,d_moy#67,d_dom#68,d_qoy#69,d_fy_year#70,d_fy_quarter_seq#71,d_fy_week_seq#72,d_day_name#73,d_quarter_name#74,d_holiday#75,d_weekend#76,d_following_holiday#77,d_first_dom#78,d_last_dom#79,d_same_day_ly#80,d_same_day_lq#81,d_current_day#82,... 4 more fields] parquet\n                  :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#36,ss_item_sk#37,ss_customer_sk#38,ss_cdemo_sk#39,ss_hdemo_sk#40,ss_addr_sk#41,ss_store_sk#42,ss_promo_sk#43,ss_ticket_number#44L,ss_quantity#45,ss_wholesale_cost#46,ss_list_price#47,ss_sales_price#48,ss_ext_discount_amt#49,ss_ext_sales_price#50,ss_ext_wholesale_cost#51,ss_ext_list_price#52,ss_ext_tax#53,ss_coupon_amt#54,ss_net_paid#55,ss_net_paid_inc_tax#56,ss_net_profit#57,ss_sold_date_sk#58] parquet\n                  :     :     +- Project [d_date_sk#59]\n                  :     :        +- Filter ((isnotnull(d_month_seq#62) AND (d_month_seq#62 = scalar-subquery#2 [])) AND isnotnull(d_date_sk#59))\n                  :     :           :  +- Aggregate [d_month_seq#119], [d_month_seq#119]\n                  :     :           :     +- Project [d_month_seq#119]\n                  :     :           :        +- Filter ((isnotnull(d_year#122) AND isnotnull(d_moy#124)) AND ((d_year#122 = 2000) AND (d_moy#124 = 2)))\n                  :     :           :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#116,d_date_id#117,d_date#118,d_month_seq#119,d_week_seq#120,d_quarter_seq#121,d_year#122,d_dow#123,d_moy#124,d_dom#125,d_qoy#126,d_fy_year#127,d_fy_quarter_seq#128,d_fy_week_seq#129,d_day_name#130,d_quarter_name#131,d_holiday#132,d_weekend#133,d_following_holiday#134,d_first_dom#135,d_last_dom#136,d_same_day_ly#137,d_same_day_lq#138,d_current_day#139,... 4 more fields] parquet\n                  :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#59,d_date_id#60,d_date#61,d_month_seq#62,d_week_seq#63,d_quarter_seq#64,d_year#65,d_dow#66,d_moy#67,d_dom#68,d_qoy#69,d_fy_year#70,d_fy_quarter_seq#71,d_fy_week_seq#72,d_day_name#73,d_quarter_name#74,d_holiday#75,d_weekend#76,d_following_holiday#77,d_first_dom#78,d_last_dom#79,d_same_day_ly#80,d_same_day_lq#81,d_current_day#82,... 4 more fields] parquet\n                  :     +- Project [i_item_sk#87]\n                  :        +- Join Inner, ((cast(i_current_price#92 as decimal(14,7)) > (1.2 * avg(i_current_price)#112)) AND (i_category#156 = i_category#99))\n                  :           :- Project [i_item_sk#87, i_current_price#92, i_category#99]\n                  :           :  +- Filter ((isnotnull(i_current_price#92) AND isnotnull(i_category#99)) AND isnotnull(i_item_sk#87))\n                  :           :     +- Relation spark_catalog.tpcds_100.item[i_item_sk#87,i_item_id#88,i_rec_start_date#89,i_rec_end_date#90,i_item_desc#91,i_current_price#92,i_wholesale_cost#93,i_brand_id#94,i_brand#95,i_class_id#96,i_class#97,i_category_id#98,i_category#99,i_manufact_id#100,i_manufact#101,i_size#102,i_formulation#103,i_color#104,i_units#105,i_container#106,i_manager_id#107,i_product_name#108] parquet\n                  :           +- Filter isnotnull(avg(i_current_price)#112)\n                  :              +- Aggregate [i_category#156], [cast((avg(UnscaledValue(i_current_price#149)) / 100.0) as decimal(11,6)) AS avg(i_current_price)#112, i_category#156]\n                  :                 +- Project [i_current_price#149, i_category#156]\n                  :                    +- Filter isnotnull(i_category#156)\n                  :                       +- Relation spark_catalog.tpcds_100.item[i_item_sk#144,i_item_id#145,i_rec_start_date#146,i_rec_end_date#147,i_item_desc#148,i_current_price#149,i_wholesale_cost#150,i_brand_id#151,i_brand#152,i_class_id#153,i_class#154,i_category_id#155,i_category#156,i_manufact_id#157,i_manufact#158,i_size#159,i_formulation#160,i_color#161,i_units#162,i_container#163,i_manager_id#164,i_product_name#165] parquet\n                  +- Project [ca_state#13, c_customer_sk#18]\n                     +- Join Inner, (ca_address_sk#5 = c_current_addr_sk#22)\n                        :- Project [ca_address_sk#5, ca_state#13]\n                        :  +- Filter isnotnull(ca_address_sk#5)\n                        :     +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#5,ca_address_id#6,ca_street_number#7,ca_street_name#8,ca_street_type#9,ca_suite_number#10,ca_city#11,ca_county#12,ca_state#13,ca_zip#14,ca_country#15,ca_gmt_offset#16,ca_location_type#17] parquet\n                        +- Project [c_customer_sk#18, c_current_addr_sk#22]\n                           +- Filter (isnotnull(c_current_addr_sk#22) AND isnotnull(c_customer_sk#18))\n                              +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#18,c_customer_id#19,c_current_cdemo_sk#20,c_current_hdemo_sk#21,c_current_addr_sk#22,c_first_shipto_date_sk#23,c_first_sales_date_sk#24,c_salutation#25,c_first_name#26,c_last_name#27,c_preferred_cust_flag#28,c_birth_day#29,c_birth_month#30,c_birth_year#31,c_birth_country#32,c_login#33,c_email_address#34,c_last_review_date#35] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 42744671710,
      "inputRowCount" : 278526402
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "8" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : -1584334,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 63513880,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_state#13, c_customer_sk#18], ShuffleQueryStage 7 "
          },
          "4" : {
            "sign" : -15322843,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 20682570312000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ca_state#13], [ca_state#13 AS state#169, count(1) AS cnt#170L] "
          },
          "5" : {
            "sign" : -709831645,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 16086443576000000,
            "rowCount" : 574515842000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#13] "
          },
          "6" : {
            "sign" : -2074563633,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 20682570312000000,
            "rowCount" : 574515842000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#18 = ss_customer_sk#38) "
          },
          "1" : {
            "sign" : 1265265442,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 20682570312000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -1898017561,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 3600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -515620463,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 20682570312000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [cnt#170L ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -215503813,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3447095052,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#38], ShuffleQueryStage 6 "
          },
          "3" : {
            "sign" : -722905790,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 20682570312000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (cnt#170L >= 10) "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Aggregate",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [cnt#170L ASC NULLS FIRST], true\n      +- Filter (cnt#170L >= 10)\n         +- Aggregate [ca_state#13], [ca_state#13 AS state#169, count(1) AS cnt#170L]\n            +- Project [ca_state#13]\n               +- Join Inner, (c_customer_sk#18 = ss_customer_sk#38)\n                  :- LogicalQueryStage Project [ss_customer_sk#38], ShuffleQueryStage 6\n                  +- LogicalQueryStage Project [ca_state#13, c_customer_sk#18], ShuffleQueryStage 7\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3510608932,
        "inputRowCount" : 289257921
      },
      "PD" : {
        "5" : [ 101979, 101979, 92709, 101979, 92709, 101979, 92709, 92709, 101979, 101979, 101979, 92709, 101979, 101979, 92709, 101979, 101979, 101979, 92709, 101979, 92709, 101979, 101979, 101979, 101979, 101979, 92709, 101979, 101979, 92709, 92709, 101979, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 101979, 101979, 101979, 101979, 101979, 101979, 92709, 101979, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 101979, 101979, 92709, 101979, 101979, 101979, 92709, 92709, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 101979, 101979, 92709, 101979, 101979, 92709, 92709, 101979, 92709, 92709, 101979, 101979, 92709, 92709, 101979, 101979, 101979, 92709, 92709, 101979, 92709, 101979, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 101979, 101979, 101979, 92709, 92709, 92709, 101979, 101979, 92709, 101979, 92709, 92709, 92709, 101979, 101979, 101979, 101979, 101979, 101979, 92709, 101979, 101979, 101979, 101979, 101979, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 101979, 101979, 92709, 101979, 101979, 101979, 101979, 101979, 92709, 101979, 92709, 101979, 92709, 92709, 101979, 101979, 92709, 101979, 101979, 101979, 101979, 92709, 101979, 101979, 101979, 92709, 92709, 101979, 101979, 101979, 92709, 101979, 92709 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 4,
        "FinishedTasksNum" : 11,
        "FinishedTasksTotalTimeInMs" : 47519.0,
        "FinishedTasksDistributionInMs" : [ 2012.0, 2174.0, 3560.0, 5249.0, 7619.0 ]
      },
      "StartTimeInMs" : 1702226515466,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 2696,
        "IOBytes" : {
          "Total" : 33375824,
          "Details" : {
            "IR" : 12256782,
            "IW" : 0,
            "SR" : 19850369,
            "SW" : 1268673
          }
        }
      }
    },
    "4" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -734843360,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39925696056,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(ss_customer_sk#38) AND isnotnull(ss_sold_date_sk#58)) AND isnotnull(ss_item_sk#37)) AND dynamicpruning#228 [ss_sold_date_sk#58]) "
          },
          "8" : {
            "sign" : 4496377,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 5745158420,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#37 = i_item_sk#87) "
          },
          "19" : {
            "sign" : 1621582120,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 11808,
            "rowCount" : 48,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#182) AND isnotnull(d_moy#184)) AND ((d_year#182 = 2000) AND (d_moy#184 = 2))) "
          },
          "23" : {
            "sign" : -1695376863,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 133991220,
            "rowCount" : 2030170,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((cast(i_current_price#92 as decimal(14,7)) > (1.2 * avg(i_current_price)#175)) AND (i_category#216 = i_category#99)) "
          },
          "4" : {
            "sign" : -1602970303,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 1650,
            "rowCount" : 55,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ca_state#13], [ca_state#13 AS state#169, count(1) AS cnt#170L] "
          },
          "15" : {
            "sign" : -2068509562,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_month_seq#62) AND (d_month_seq#62 = scalar-subquery#171 [])) AND isnotnull(d_date_sk#59)) "
          },
          "11" : {
            "sign" : -1373441924,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 5253381060,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#37, ss_customer_sk#38, ss_sold_date_sk#58] "
          },
          "9" : {
            "sign" : 1833462538,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4248649360,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#37, ss_customer_sk#38] "
          },
          "22" : {
            "sign" : 1222941404,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24362040,
            "rowCount" : 2030170,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#87] "
          },
          "26" : {
            "sign" : 1492995156,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#87, i_item_id#88, i_rec_start_date#89, i_rec_end_date#90, i_item_desc#91, i_current_price#92, i_wholesale_cost#93, i_brand_id#94, i_brand#95, i_class_id#96, i_class#97, i_category_id#98, i_category#99, i_manufact_id#100, i_manufact#101, i_size#102, i_formulation#103, i_color#104, i_units#105, i_container#106, i_manager_id#107, i_product_name#108], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "13" : {
            "sign" : 1420124520,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#36, ss_item_sk#37, ss_customer_sk#38, ss_cdemo_sk#39, ss_hdemo_sk#40, ss_addr_sk#41, ss_store_sk#42, ss_promo_sk#43, ss_ticket_number#44L, ss_quantity#45, ss_wholesale_cost#46, ss_list_price#47, ss_sales_price#48, ss_ext_discount_amt#49, ss_ext_sales_price#50, ss_ext_wholesale_cost#51, ss_ext_list_price#52, ss_ext_tax#53, ss_coupon_amt#54, ss_net_paid#55, ss_net_paid_inc_tax#56, ss_net_profit#57, ss_sold_date_sk#58], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "24" : {
            "sign" : -1403291440,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 7714646,
            "rowCount" : 203017,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#87, i_current_price#92, i_category#99] "
          },
          "16" : {
            "sign" : -732351171,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#59, d_date_id#60, d_date#61, d_month_seq#62, d_week_seq#63, d_quarter_seq#64, d_year#65, d_dow#66, d_moy#67, d_dom#68, d_qoy#69, d_fy_year#70, d_fy_quarter_seq#71, d_fy_week_seq#72, d_day_name#73, d_quarter_name#74, d_holiday#75, d_weekend#76, d_following_holiday#77, d_first_dom#78, d_last_dom#79, d_same_day_ly#80, d_same_day_lq#81, d_current_day#82, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "5" : {
            "sign" : 1580508071,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 12639348524000000000000,
            "rowCount" : 574515842000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#13] "
          },
          "10" : {
            "sign" : 1448706707,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 6372974040,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#58 = d_date_sk#59) "
          },
          "21" : {
            "sign" : 1490977864,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 876588,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#59], BroadcastQueryStage 0 "
          },
          "6" : {
            "sign" : 1248402007,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 17235475260000000000000,
            "rowCount" : 574515842000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#18 = ss_customer_sk#38) "
          },
          "1" : {
            "sign" : -310236634,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 1650,
            "rowCount" : 55,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : 2069768763,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24,
            "rowCount" : 2,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [d_month_seq#179], [d_month_seq#179] "
          },
          "25" : {
            "sign" : -1248107947,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 86485242,
            "rowCount" : 203017,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(i_current_price#92) AND isnotnull(i_category#99)) AND isnotnull(i_item_sk#87)) "
          },
          "14" : {
            "sign" : -1405440590,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 876588,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#59] "
          },
          "31" : {
            "sign" : 1387910694,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 48000000,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#18, c_current_addr_sk#22], ShuffleQueryStage 3 "
          },
          "0" : {
            "sign" : 1032240063,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 1980,
            "rowCount" : 55,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 955274910,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#176, d_date_id#177, d_date#178, d_month_seq#179, d_week_seq#180, d_quarter_seq#181, d_year#182, d_dow#183, d_moy#184, d_dom#185, d_qoy#186, d_fy_year#187, d_fy_quarter_seq#188, d_fy_week_seq#189, d_day_name#190, d_quarter_name#191, d_holiday#192, d_weekend#193, d_following_holiday#194, d_first_dom#195, d_last_dom#196, d_same_day_ly#197, d_same_day_lq#198, d_current_day#199, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "27" : {
            "sign" : 1346208255,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 33555456,
            "rowCount" : 10,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Filter isnotnull(avg(i_current_price)#175), BroadcastQueryStage 4 "
          },
          "2" : {
            "sign" : -222864043,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1650,
            "rowCount" : 55,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [cnt#170L ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : -399673920,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 576,
            "rowCount" : 48,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_month_seq#179] "
          },
          "30" : {
            "sign" : 2110248060,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 26000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#5, ca_state#13], ShuffleQueryStage 2 "
          },
          "7" : {
            "sign" : 429979648,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3447095052,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#38] "
          },
          "29" : {
            "sign" : -1642030180,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 68000000000000,
            "rowCount" : 2000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ca_address_sk#5 = c_current_addr_sk#22) "
          },
          "3" : {
            "sign" : 195789958,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 1650,
            "rowCount" : 55,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (cnt#170L >= 10) "
          },
          "28" : {
            "sign" : -1206465633,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 52000000000000,
            "rowCount" : 2000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#13, c_customer_sk#18] "
          }
        },
        "links" : [ {
          "fromId" : 13,
          "fromName" : "LogicalRelation",
          "toId" : 12,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalRelation",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalRelation",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Filter",
          "toId" : 18,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Project",
          "toId" : 17,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Aggregate",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 12,
          "fromName" : "Filter",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "LogicalRelation",
          "toId" : 25,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Filter",
          "toId" : 24,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Project",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "LogicalQueryStage",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Join",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "LogicalQueryStage",
          "toId" : 29,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "LogicalQueryStage",
          "toId" : 29,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Join",
          "toId" : 28,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Aggregate",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [cnt#170L ASC NULLS FIRST], true\n      +- Filter (cnt#170L >= 10)\n         +- Aggregate [ca_state#13], [ca_state#13 AS state#169, count(1) AS cnt#170L]\n            +- Project [ca_state#13]\n               +- Join Inner, (c_customer_sk#18 = ss_customer_sk#38)\n                  :- Project [ss_customer_sk#38]\n                  :  +- Join Inner, (ss_item_sk#37 = i_item_sk#87)\n                  :     :- Project [ss_item_sk#37, ss_customer_sk#38]\n                  :     :  +- Join Inner, (ss_sold_date_sk#58 = d_date_sk#59)\n                  :     :     :- Project [ss_item_sk#37, ss_customer_sk#38, ss_sold_date_sk#58]\n                  :     :     :  +- Filter (((isnotnull(ss_customer_sk#38) AND isnotnull(ss_sold_date_sk#58)) AND isnotnull(ss_item_sk#37)) AND dynamicpruning#228 [ss_sold_date_sk#58])\n                  :     :     :     :  +- Project [d_date_sk#59]\n                  :     :     :     :     +- Filter ((isnotnull(d_month_seq#62) AND (d_month_seq#62 = scalar-subquery#171 [])) AND isnotnull(d_date_sk#59))\n                  :     :     :     :        :  +- Aggregate [d_month_seq#179], [d_month_seq#179]\n                  :     :     :     :        :     +- Project [d_month_seq#179]\n                  :     :     :     :        :        +- Filter ((isnotnull(d_year#182) AND isnotnull(d_moy#184)) AND ((d_year#182 = 2000) AND (d_moy#184 = 2)))\n                  :     :     :     :        :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#176,d_date_id#177,d_date#178,d_month_seq#179,d_week_seq#180,d_quarter_seq#181,d_year#182,d_dow#183,d_moy#184,d_dom#185,d_qoy#186,d_fy_year#187,d_fy_quarter_seq#188,d_fy_week_seq#189,d_day_name#190,d_quarter_name#191,d_holiday#192,d_weekend#193,d_following_holiday#194,d_first_dom#195,d_last_dom#196,d_same_day_ly#197,d_same_day_lq#198,d_current_day#199,... 4 more fields] parquet\n                  :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#59,d_date_id#60,d_date#61,d_month_seq#62,d_week_seq#63,d_quarter_seq#64,d_year#65,d_dow#66,d_moy#67,d_dom#68,d_qoy#69,d_fy_year#70,d_fy_quarter_seq#71,d_fy_week_seq#72,d_day_name#73,d_quarter_name#74,d_holiday#75,d_weekend#76,d_following_holiday#77,d_first_dom#78,d_last_dom#79,d_same_day_ly#80,d_same_day_lq#81,d_current_day#82,... 4 more fields] parquet\n                  :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#36,ss_item_sk#37,ss_customer_sk#38,ss_cdemo_sk#39,ss_hdemo_sk#40,ss_addr_sk#41,ss_store_sk#42,ss_promo_sk#43,ss_ticket_number#44L,ss_quantity#45,ss_wholesale_cost#46,ss_list_price#47,ss_sales_price#48,ss_ext_discount_amt#49,ss_ext_sales_price#50,ss_ext_wholesale_cost#51,ss_ext_list_price#52,ss_ext_tax#53,ss_coupon_amt#54,ss_net_paid#55,ss_net_paid_inc_tax#56,ss_net_profit#57,ss_sold_date_sk#58] parquet\n                  :     :     +- LogicalQueryStage Project [d_date_sk#59], BroadcastQueryStage 0\n                  :     +- Project [i_item_sk#87]\n                  :        +- Join Inner, ((cast(i_current_price#92 as decimal(14,7)) > (1.2 * avg(i_current_price)#175)) AND (i_category#216 = i_category#99))\n                  :           :- Project [i_item_sk#87, i_current_price#92, i_category#99]\n                  :           :  +- Filter ((isnotnull(i_current_price#92) AND isnotnull(i_category#99)) AND isnotnull(i_item_sk#87))\n                  :           :     +- Relation spark_catalog.tpcds_100.item[i_item_sk#87,i_item_id#88,i_rec_start_date#89,i_rec_end_date#90,i_item_desc#91,i_current_price#92,i_wholesale_cost#93,i_brand_id#94,i_brand#95,i_class_id#96,i_class#97,i_category_id#98,i_category#99,i_manufact_id#100,i_manufact#101,i_size#102,i_formulation#103,i_color#104,i_units#105,i_container#106,i_manager_id#107,i_product_name#108] parquet\n                  :           +- LogicalQueryStage Filter isnotnull(avg(i_current_price)#175), BroadcastQueryStage 4\n                  +- Project [ca_state#13, c_customer_sk#18]\n                     +- Join Inner, (ca_address_sk#5 = c_current_addr_sk#22)\n                        :- LogicalQueryStage Project [ca_address_sk#5, ca_state#13], ShuffleQueryStage 2\n                        +- LogicalQueryStage Project [c_customer_sk#18, c_current_addr_sk#22], ShuffleQueryStage 3\n"
      },
      "IM" : {
        "inputSizeInBytes" : 42002229700,
        "inputRowCount" : 278322412
      },
      "PD" : {
        "3" : [ 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 112177, 112177, 101979, 101979, 112177, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 112177, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 2,
        "FinishedTasksNum" : 4,
        "FinishedTasksTotalTimeInMs" : 5988.0,
        "FinishedTasksDistributionInMs" : [ 1315.0, 1390.0, 1508.0, 1775.0, 1775.0 ]
      },
      "StartTimeInMs" : 1702226500801,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 17361,
        "IOBytes" : {
          "Total" : 96482314,
          "Details" : {
            "IR" : 18757119,
            "IW" : 0,
            "SR" : 48856773,
            "SW" : 28868422
          }
        }
      }
    },
    "11" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : 1053098934,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1656,
            "rowCount" : 52,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ca_state#13], [ca_state#13 AS state#169, count(1) AS cnt#170L], HashAggregate(keys=[ca_state#13], functions=[count(1)]) "
          },
          "1" : {
            "sign" : 405017301,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 1872,
            "rowCount" : 52,
            "isRuntime" : true,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 1737190708,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 1872,
            "rowCount" : 52,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1242180406,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1872,
            "rowCount" : 52,
            "isRuntime" : true,
            "predicate" : " (unknown) Sort Arguments: [cnt#170L ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : -790358347,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 1872,
            "rowCount" : 52,
            "isRuntime" : true,
            "predicate" : " (unknown) Filter Arguments: (cnt#170L >= 10) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [cnt#170L ASC NULLS FIRST], true\n      +- Filter (cnt#170L >= 10)\n         +- LogicalQueryStage Aggregate [ca_state#13], [ca_state#13 AS state#169, count(1) AS cnt#170L], HashAggregate(keys=[ca_state#13], functions=[count(1)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1656,
        "inputRowCount" : 52
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226517964,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 198,
        "IOBytes" : {
          "Total" : 3347,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 3347,
            "SW" : 0
          }
        }
      }
    },
    "9" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : -1584334,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 63513880,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_state#13, c_customer_sk#18], ShuffleQueryStage 7 "
          },
          "4" : {
            "sign" : -15322843,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 17469576000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ca_state#13], [ca_state#13 AS state#169, count(1) AS cnt#170L] "
          },
          "5" : {
            "sign" : -709831645,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 13587448000000,
            "rowCount" : 485266000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#13] "
          },
          "6" : {
            "sign" : -2074563633,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 17469576000000,
            "rowCount" : 485266000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#18 = ss_customer_sk#38) "
          },
          "1" : {
            "sign" : 1265265442,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 17469576000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -1898017561,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 3600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -515620463,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 17469576000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [cnt#170L ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -215503813,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3882128,
            "rowCount" : 242633,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#38], ShuffleQueryStage 6 "
          },
          "3" : {
            "sign" : -722905790,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 17469576000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (cnt#170L >= 10) "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Aggregate",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [cnt#170L ASC NULLS FIRST], true\n      +- Filter (cnt#170L >= 10)\n         +- Aggregate [ca_state#13], [ca_state#13 AS state#169, count(1) AS cnt#170L]\n            +- Project [ca_state#13]\n               +- Join Inner, (c_customer_sk#18 = ss_customer_sk#38)\n                  :- LogicalQueryStage Project [ss_customer_sk#38], ShuffleQueryStage 6\n                  +- LogicalQueryStage Project [ca_state#13, c_customer_sk#18], ShuffleQueryStage 7\n"
      },
      "IM" : {
        "inputSizeInBytes" : 67396008,
        "inputRowCount" : 2242633
      },
      "PD" : {
        "5" : [ 101979, 101979, 92709, 101979, 92709, 101979, 92709, 92709, 101979, 101979, 101979, 92709, 101979, 101979, 92709, 101979, 101979, 101979, 92709, 101979, 92709, 101979, 101979, 101979, 101979, 101979, 92709, 101979, 101979, 92709, 92709, 101979, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 101979, 101979, 101979, 101979, 101979, 101979, 92709, 101979, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 101979, 101979, 92709, 101979, 101979, 101979, 92709, 92709, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 101979, 101979, 92709, 101979, 101979, 92709, 92709, 101979, 92709, 92709, 101979, 101979, 92709, 92709, 101979, 101979, 101979, 92709, 92709, 101979, 92709, 101979, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 101979, 101979, 101979, 92709, 92709, 92709, 101979, 101979, 92709, 101979, 92709, 92709, 92709, 101979, 101979, 101979, 101979, 101979, 101979, 92709, 101979, 101979, 101979, 101979, 101979, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 101979, 101979, 92709, 101979, 101979, 101979, 101979, 101979, 92709, 101979, 92709, 101979, 92709, 92709, 101979, 101979, 92709, 101979, 101979, 101979, 101979, 92709, 101979, 101979, 101979, 92709, 92709, 101979, 101979, 101979, 92709, 101979, 92709 ],
        "4" : [ 6375, 6861, 6863, 6570, 6374, 6446, 6623, 6228, 6711, 6540, 6905, 6629, 6571, 6651, 6568, 7097, 6466, 6992, 6596, 6261, 6844, 6771, 6453, 6594, 6494, 6751, 6451, 6751, 6326, 6390, 6345, 6715, 6662, 6430, 7244, 6558, 6507, 6464, 6242, 6629, 6545, 6693, 6967, 6334, 6574, 6738, 6848, 6435, 6578, 6665, 6626, 6276, 6562, 6620, 6401, 6559, 6779, 6692, 6286, 6393, 6764, 6584, 6533, 6638, 6596, 6886, 6841, 6950, 6611, 6688, 6527, 6276, 6469, 6630, 6966, 7244, 6807, 6651, 6513, 6821, 6759, 6716, 6795, 6477, 6061, 6952, 6684, 6560, 6354, 6597, 6491, 6918, 6754, 6990, 6848, 6363, 6769, 6321, 6698, 6591, 6484, 6491, 6949, 6191, 7173, 6259, 6235, 6788, 6409, 6560, 6536, 6820, 6827, 6648, 6655, 6577, 6507, 6741, 6608, 6740, 6476, 6471, 6634, 6100, 6560, 6352, 6546, 6501, 6984, 6914, 6520, 7006, 6222, 7020, 6857, 6653, 6842, 6407, 6788, 6407, 6285, 6656, 6753, 6680, 6703, 6566, 6506, 6598, 6692, 6248, 7087, 6530, 6563, 6891, 6826, 6620, 6647, 6478, 6897, 6482, 6421, 6409, 7611, 6675, 6634, 6608, 6701, 6769, 6941, 6393, 6619, 6426, 6986, 6738, 6946, 6411, 6439, 6490, 6620, 6718, 6477, 6888, 6778, 6168, 6756, 6387, 6638, 6228, 6375, 6728, 6716, 6952, 6266, 6495, 6677, 6979, 6437, 7161, 6564, 6360 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226516437,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 1725,
        "IOBytes" : {
          "Total" : 19853716,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 19850369,
            "SW" : 3347
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -734843360,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39925696056,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(ss_customer_sk#38) AND isnotnull(ss_sold_date_sk#58)) AND isnotnull(ss_item_sk#37)) AND dynamicpruning#228 [ss_sold_date_sk#58]) "
          },
          "8" : {
            "sign" : 1750318323,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 5745158420,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#37 = i_item_sk#87) "
          },
          "19" : {
            "sign" : 1621582120,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 11808,
            "rowCount" : 48,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#182) AND isnotnull(d_moy#184)) AND ((d_year#182 = 2000) AND (d_moy#184 = 2))) "
          },
          "23" : {
            "sign" : -1206465633,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 52000000000000,
            "rowCount" : 2000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#13, c_customer_sk#18] "
          },
          "4" : {
            "sign" : 1148490657,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 1650,
            "rowCount" : 55,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ca_state#13], [ca_state#13 AS state#169, count(1) AS cnt#170L] "
          },
          "15" : {
            "sign" : -2068509562,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_month_seq#62) AND (d_month_seq#62 = scalar-subquery#171 [])) AND isnotnull(d_date_sk#59)) "
          },
          "11" : {
            "sign" : -1373441924,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 5253381060,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#37, ss_customer_sk#38, ss_sold_date_sk#58] "
          },
          "9" : {
            "sign" : 1833462538,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 121878440592,
            "rowCount" : 7617402537,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#37, ss_customer_sk#38] "
          },
          "22" : {
            "sign" : -790922648,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2436204,
            "rowCount" : 203017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#87], BroadcastQueryStage 5 "
          },
          "26" : {
            "sign" : 1387910694,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 48000000,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#18, c_current_addr_sk#22], ShuffleQueryStage 3 "
          },
          "13" : {
            "sign" : 1420124520,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#36, ss_item_sk#37, ss_customer_sk#38, ss_cdemo_sk#39, ss_hdemo_sk#40, ss_addr_sk#41, ss_store_sk#42, ss_promo_sk#43, ss_ticket_number#44L, ss_quantity#45, ss_wholesale_cost#46, ss_list_price#47, ss_sales_price#48, ss_ext_discount_amt#49, ss_ext_sales_price#50, ss_ext_wholesale_cost#51, ss_ext_list_price#52, ss_ext_tax#53, ss_coupon_amt#54, ss_net_paid#55, ss_net_paid_inc_tax#56, ss_net_profit#57, ss_sold_date_sk#58], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "24" : {
            "sign" : -1642030180,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 68000000000000,
            "rowCount" : 2000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ca_address_sk#5 = c_current_addr_sk#22) "
          },
          "16" : {
            "sign" : -732351171,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#59, d_date_id#60, d_date#61, d_month_seq#62, d_week_seq#63, d_quarter_seq#64, d_year#65, d_dow#66, d_moy#67, d_dom#68, d_qoy#69, d_fy_year#70, d_fy_quarter_seq#71, d_fy_week_seq#72, d_day_name#73, d_quarter_name#74, d_holiday#75, d_weekend#76, d_following_holiday#77, d_first_dom#78, d_last_dom#79, d_same_day_ly#80, d_same_day_lq#81, d_current_day#82, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "5" : {
            "sign" : 2023545905,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 12639348524000000000000,
            "rowCount" : 574515842000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#13] "
          },
          "10" : {
            "sign" : 1448706707,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 182817660888,
            "rowCount" : 7617402537,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#58 = d_date_sk#59) "
          },
          "21" : {
            "sign" : 1490977864,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048808,
            "rowCount" : 29,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#59], BroadcastQueryStage 0 "
          },
          "6" : {
            "sign" : -890220809,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 17235475260000000000000,
            "rowCount" : 574515842000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#18 = ss_customer_sk#38) "
          },
          "1" : {
            "sign" : 641442514,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 1650,
            "rowCount" : 55,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : 2069768763,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24,
            "rowCount" : 2,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [d_month_seq#179], [d_month_seq#179] "
          },
          "25" : {
            "sign" : 2110248060,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 26000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#5, ca_state#13], ShuffleQueryStage 2 "
          },
          "14" : {
            "sign" : -1405440590,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 876588,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#59] "
          },
          "0" : {
            "sign" : -802957409,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 1980,
            "rowCount" : 55,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 955274910,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#176, d_date_id#177, d_date#178, d_month_seq#179, d_week_seq#180, d_quarter_seq#181, d_year#182, d_dow#183, d_moy#184, d_dom#185, d_qoy#186, d_fy_year#187, d_fy_quarter_seq#188, d_fy_week_seq#189, d_day_name#190, d_quarter_name#191, d_holiday#192, d_weekend#193, d_following_holiday#194, d_first_dom#195, d_last_dom#196, d_same_day_ly#197, d_same_day_lq#198, d_current_day#199, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "2" : {
            "sign" : -2031830027,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1650,
            "rowCount" : 55,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [cnt#170L ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : -399673920,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 576,
            "rowCount" : 48,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_month_seq#179] "
          },
          "7" : {
            "sign" : 2141961220,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3447095052,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#38] "
          },
          "3" : {
            "sign" : -140664206,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 1650,
            "rowCount" : 55,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (cnt#170L >= 10) "
          }
        },
        "links" : [ {
          "fromId" : 13,
          "fromName" : "LogicalRelation",
          "toId" : 12,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalRelation",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalRelation",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Filter",
          "toId" : 18,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Project",
          "toId" : 17,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Aggregate",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 12,
          "fromName" : "Filter",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "LogicalQueryStage",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "LogicalQueryStage",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Join",
          "toId" : 23,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Aggregate",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [cnt#170L ASC NULLS FIRST], true\n      +- Filter (cnt#170L >= 10)\n         +- Aggregate [ca_state#13], [ca_state#13 AS state#169, count(1) AS cnt#170L]\n            +- Project [ca_state#13]\n               +- Join Inner, (c_customer_sk#18 = ss_customer_sk#38)\n                  :- Project [ss_customer_sk#38]\n                  :  +- Join Inner, (ss_item_sk#37 = i_item_sk#87)\n                  :     :- Project [ss_item_sk#37, ss_customer_sk#38]\n                  :     :  +- Join Inner, (ss_sold_date_sk#58 = d_date_sk#59)\n                  :     :     :- Project [ss_item_sk#37, ss_customer_sk#38, ss_sold_date_sk#58]\n                  :     :     :  +- Filter (((isnotnull(ss_customer_sk#38) AND isnotnull(ss_sold_date_sk#58)) AND isnotnull(ss_item_sk#37)) AND dynamicpruning#228 [ss_sold_date_sk#58])\n                  :     :     :     :  +- Project [d_date_sk#59]\n                  :     :     :     :     +- Filter ((isnotnull(d_month_seq#62) AND (d_month_seq#62 = scalar-subquery#171 [])) AND isnotnull(d_date_sk#59))\n                  :     :     :     :        :  +- Aggregate [d_month_seq#179], [d_month_seq#179]\n                  :     :     :     :        :     +- Project [d_month_seq#179]\n                  :     :     :     :        :        +- Filter ((isnotnull(d_year#182) AND isnotnull(d_moy#184)) AND ((d_year#182 = 2000) AND (d_moy#184 = 2)))\n                  :     :     :     :        :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#176,d_date_id#177,d_date#178,d_month_seq#179,d_week_seq#180,d_quarter_seq#181,d_year#182,d_dow#183,d_moy#184,d_dom#185,d_qoy#186,d_fy_year#187,d_fy_quarter_seq#188,d_fy_week_seq#189,d_day_name#190,d_quarter_name#191,d_holiday#192,d_weekend#193,d_following_holiday#194,d_first_dom#195,d_last_dom#196,d_same_day_ly#197,d_same_day_lq#198,d_current_day#199,... 4 more fields] parquet\n                  :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#59,d_date_id#60,d_date#61,d_month_seq#62,d_week_seq#63,d_quarter_seq#64,d_year#65,d_dow#66,d_moy#67,d_dom#68,d_qoy#69,d_fy_year#70,d_fy_quarter_seq#71,d_fy_week_seq#72,d_day_name#73,d_quarter_name#74,d_holiday#75,d_weekend#76,d_following_holiday#77,d_first_dom#78,d_last_dom#79,d_same_day_ly#80,d_same_day_lq#81,d_current_day#82,... 4 more fields] parquet\n                  :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#36,ss_item_sk#37,ss_customer_sk#38,ss_cdemo_sk#39,ss_hdemo_sk#40,ss_addr_sk#41,ss_store_sk#42,ss_promo_sk#43,ss_ticket_number#44L,ss_quantity#45,ss_wholesale_cost#46,ss_list_price#47,ss_sales_price#48,ss_ext_discount_amt#49,ss_ext_sales_price#50,ss_ext_wholesale_cost#51,ss_ext_list_price#52,ss_ext_tax#53,ss_coupon_amt#54,ss_net_paid#55,ss_net_paid_inc_tax#56,ss_net_profit#57,ss_sold_date_sk#58] parquet\n                  :     :     +- LogicalQueryStage Project [d_date_sk#59], BroadcastQueryStage 0\n                  :     +- LogicalQueryStage Project [i_item_sk#87], BroadcastQueryStage 5\n                  +- Project [ca_state#13, c_customer_sk#18]\n                     +- Join Inner, (ca_address_sk#5 = c_current_addr_sk#22)\n                        :- LogicalQueryStage Project [ca_address_sk#5, ca_state#13], ShuffleQueryStage 2\n                        +- LogicalQueryStage Project [c_customer_sk#18, c_current_addr_sk#22], ShuffleQueryStage 3\n"
      },
      "IM" : {
        "inputSizeInBytes" : 41884378668,
        "inputRowCount" : 278248399
      },
      "PD" : {
        "3" : [ 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 112177, 112177, 101979, 101979, 112177, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 112177, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 2,
        "FinishedTasksNum" : 8,
        "FinishedTasksTotalTimeInMs" : 6928.0,
        "FinishedTasksDistributionInMs" : [ 151.0, 283.0, 1315.0, 1508.0, 1775.0 ]
      },
      "StartTimeInMs" : 1702226504444,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 13718,
        "IOBytes" : {
          "Total" : 96161270,
          "Details" : {
            "IR" : 18436075,
            "IW" : 0,
            "SR" : 48856773,
            "SW" : 28868422
          }
        }
      }
    },
    "10" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : -1584334,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 63513880,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_state#13, c_customer_sk#18], ShuffleQueryStage 7 "
          },
          "4" : {
            "sign" : 853440445,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 17469576000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ca_state#13], [ca_state#13 AS state#169, count(1) AS cnt#170L] "
          },
          "5" : {
            "sign" : 370248523,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 13587448000000,
            "rowCount" : 485266000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#13] "
          },
          "6" : {
            "sign" : -984934445,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 17469576000000,
            "rowCount" : 485266000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#18 = ss_customer_sk#38) "
          },
          "1" : {
            "sign" : 25069100,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 17469576000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -1686669509,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 3600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -1805066927,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 17469576000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [cnt#170L ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 1917363455,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 16777216,
            "rowCount" : 242633,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Project [ss_customer_sk#38], ShuffleQueryStage 6, BroadcastQueryStage 8 "
          },
          "3" : {
            "sign" : 1639636108,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 17469576000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (cnt#170L >= 10) "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Aggregate",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [cnt#170L ASC NULLS FIRST], true\n      +- Filter (cnt#170L >= 10)\n         +- Aggregate [ca_state#13], [ca_state#13 AS state#169, count(1) AS cnt#170L]\n            +- Project [ca_state#13]\n               +- Join Inner, (c_customer_sk#18 = ss_customer_sk#38)\n                  :- LogicalQueryStage LogicalQueryStage Project [ss_customer_sk#38], ShuffleQueryStage 6, BroadcastQueryStage 8\n                  +- LogicalQueryStage Project [ca_state#13, c_customer_sk#18], ShuffleQueryStage 7\n"
      },
      "IM" : {
        "inputSizeInBytes" : 80291096,
        "inputRowCount" : 2242633
      },
      "PD" : {
        "5" : [ 101979, 101979, 92709, 101979, 92709, 101979, 92709, 92709, 101979, 101979, 101979, 92709, 101979, 101979, 92709, 101979, 101979, 101979, 92709, 101979, 92709, 101979, 101979, 101979, 101979, 101979, 92709, 101979, 101979, 92709, 92709, 101979, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 101979, 101979, 101979, 101979, 101979, 101979, 92709, 101979, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 101979, 101979, 92709, 101979, 101979, 101979, 92709, 92709, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 101979, 101979, 92709, 101979, 101979, 92709, 92709, 101979, 92709, 92709, 101979, 101979, 92709, 92709, 101979, 101979, 101979, 92709, 92709, 101979, 92709, 101979, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 101979, 101979, 101979, 92709, 92709, 92709, 101979, 101979, 92709, 101979, 92709, 92709, 92709, 101979, 101979, 101979, 101979, 101979, 101979, 92709, 101979, 101979, 101979, 101979, 101979, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 101979, 101979, 92709, 101979, 101979, 101979, 101979, 101979, 92709, 101979, 92709, 101979, 92709, 92709, 101979, 101979, 92709, 101979, 101979, 101979, 101979, 92709, 101979, 101979, 101979, 92709, 92709, 101979, 101979, 101979, 92709, 101979, 92709 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226516872,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 1290,
        "IOBytes" : {
          "Total" : 18588390,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 18585043,
            "SW" : 3347
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -734843360,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39925696056,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(ss_customer_sk#38) AND isnotnull(ss_sold_date_sk#58)) AND isnotnull(ss_item_sk#37)) AND dynamicpruning#228 [ss_sold_date_sk#58]) "
          },
          "8" : {
            "sign" : 1750318323,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3059758251062160,
            "rowCount" : 152987912553108,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#37 = i_item_sk#87) "
          },
          "19" : {
            "sign" : 1621582120,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 11808,
            "rowCount" : 48,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#182) AND isnotnull(d_moy#184)) AND ((d_year#182 = 2000) AND (d_moy#184 = 2))) "
          },
          "23" : {
            "sign" : -1206465633,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 52000000000000,
            "rowCount" : 2000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#13, c_customer_sk#18] "
          },
          "4" : {
            "sign" : 1148490657,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 1650,
            "rowCount" : 55,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ca_state#13], [ca_state#13 AS state#169, count(1) AS cnt#170L] "
          },
          "15" : {
            "sign" : -2068509562,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_month_seq#62) AND (d_month_seq#62 = scalar-subquery#171 [])) AND isnotnull(d_date_sk#59)) "
          },
          "11" : {
            "sign" : -1373441924,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 5253381060,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#37, ss_customer_sk#38, ss_sold_date_sk#58] "
          },
          "9" : {
            "sign" : 1833462538,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 121878440592,
            "rowCount" : 7617402537,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#37, ss_customer_sk#38] "
          },
          "22" : {
            "sign" : -790922648,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2097152,
            "rowCount" : 20084,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#87], BroadcastQueryStage 5 "
          },
          "26" : {
            "sign" : 1387910694,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 48000000,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#18, c_current_addr_sk#22], ShuffleQueryStage 3 "
          },
          "13" : {
            "sign" : 1420124520,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#36, ss_item_sk#37, ss_customer_sk#38, ss_cdemo_sk#39, ss_hdemo_sk#40, ss_addr_sk#41, ss_store_sk#42, ss_promo_sk#43, ss_ticket_number#44L, ss_quantity#45, ss_wholesale_cost#46, ss_list_price#47, ss_sales_price#48, ss_ext_discount_amt#49, ss_ext_sales_price#50, ss_ext_wholesale_cost#51, ss_ext_list_price#52, ss_ext_tax#53, ss_coupon_amt#54, ss_net_paid#55, ss_net_paid_inc_tax#56, ss_net_profit#57, ss_sold_date_sk#58], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "24" : {
            "sign" : -1642030180,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 68000000000000,
            "rowCount" : 2000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ca_address_sk#5 = c_current_addr_sk#22) "
          },
          "16" : {
            "sign" : -732351171,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#59, d_date_id#60, d_date#61, d_month_seq#62, d_week_seq#63, d_quarter_seq#64, d_year#65, d_dow#66, d_moy#67, d_dom#68, d_qoy#69, d_fy_year#70, d_fy_quarter_seq#71, d_fy_week_seq#72, d_day_name#73, d_quarter_name#74, d_holiday#75, d_weekend#76, d_following_holiday#77, d_first_dom#78, d_last_dom#79, d_same_day_ly#80, d_same_day_lq#81, d_current_day#82, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "5" : {
            "sign" : 2023545905,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6731468152336752000000000000,
            "rowCount" : 305975825106216000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#13] "
          },
          "10" : {
            "sign" : 1448706707,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 182817660888,
            "rowCount" : 7617402537,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#58 = d_date_sk#59) "
          },
          "21" : {
            "sign" : 1490977864,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048808,
            "rowCount" : 29,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#59], BroadcastQueryStage 0 "
          },
          "6" : {
            "sign" : -890220809,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 9179274753186480000000000000,
            "rowCount" : 305975825106216000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#18 = ss_customer_sk#38) "
          },
          "1" : {
            "sign" : 641442514,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 1650,
            "rowCount" : 55,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : 2069768763,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24,
            "rowCount" : 2,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [d_month_seq#179], [d_month_seq#179] "
          },
          "25" : {
            "sign" : 2110248060,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 26000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#5, ca_state#13], ShuffleQueryStage 2 "
          },
          "14" : {
            "sign" : -1405440590,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 876588,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#59] "
          },
          "0" : {
            "sign" : -802957409,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 1980,
            "rowCount" : 55,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 955274910,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#176, d_date_id#177, d_date#178, d_month_seq#179, d_week_seq#180, d_quarter_seq#181, d_year#182, d_dow#183, d_moy#184, d_dom#185, d_qoy#186, d_fy_year#187, d_fy_quarter_seq#188, d_fy_week_seq#189, d_day_name#190, d_quarter_name#191, d_holiday#192, d_weekend#193, d_following_holiday#194, d_first_dom#195, d_last_dom#196, d_same_day_ly#197, d_same_day_lq#198, d_current_day#199, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "2" : {
            "sign" : -2031830027,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1650,
            "rowCount" : 55,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [cnt#170L ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : -399673920,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 576,
            "rowCount" : 48,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_month_seq#179] "
          },
          "7" : {
            "sign" : 2141961220,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1835854950637296,
            "rowCount" : 152987912553108,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#38] "
          },
          "3" : {
            "sign" : -140664206,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 1650,
            "rowCount" : 55,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (cnt#170L >= 10) "
          }
        },
        "links" : [ {
          "fromId" : 13,
          "fromName" : "LogicalRelation",
          "toId" : 12,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalRelation",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalRelation",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Filter",
          "toId" : 18,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Project",
          "toId" : 17,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Aggregate",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 12,
          "fromName" : "Filter",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "LogicalQueryStage",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "LogicalQueryStage",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Join",
          "toId" : 23,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Aggregate",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [cnt#170L ASC NULLS FIRST], true\n      +- Filter (cnt#170L >= 10)\n         +- Aggregate [ca_state#13], [ca_state#13 AS state#169, count(1) AS cnt#170L]\n            +- Project [ca_state#13]\n               +- Join Inner, (c_customer_sk#18 = ss_customer_sk#38)\n                  :- Project [ss_customer_sk#38]\n                  :  +- Join Inner, (ss_item_sk#37 = i_item_sk#87)\n                  :     :- Project [ss_item_sk#37, ss_customer_sk#38]\n                  :     :  +- Join Inner, (ss_sold_date_sk#58 = d_date_sk#59)\n                  :     :     :- Project [ss_item_sk#37, ss_customer_sk#38, ss_sold_date_sk#58]\n                  :     :     :  +- Filter (((isnotnull(ss_customer_sk#38) AND isnotnull(ss_sold_date_sk#58)) AND isnotnull(ss_item_sk#37)) AND dynamicpruning#228 [ss_sold_date_sk#58])\n                  :     :     :     :  +- Project [d_date_sk#59]\n                  :     :     :     :     +- Filter ((isnotnull(d_month_seq#62) AND (d_month_seq#62 = scalar-subquery#171 [])) AND isnotnull(d_date_sk#59))\n                  :     :     :     :        :  +- Aggregate [d_month_seq#179], [d_month_seq#179]\n                  :     :     :     :        :     +- Project [d_month_seq#179]\n                  :     :     :     :        :        +- Filter ((isnotnull(d_year#182) AND isnotnull(d_moy#184)) AND ((d_year#182 = 2000) AND (d_moy#184 = 2)))\n                  :     :     :     :        :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#176,d_date_id#177,d_date#178,d_month_seq#179,d_week_seq#180,d_quarter_seq#181,d_year#182,d_dow#183,d_moy#184,d_dom#185,d_qoy#186,d_fy_year#187,d_fy_quarter_seq#188,d_fy_week_seq#189,d_day_name#190,d_quarter_name#191,d_holiday#192,d_weekend#193,d_following_holiday#194,d_first_dom#195,d_last_dom#196,d_same_day_ly#197,d_same_day_lq#198,d_current_day#199,... 4 more fields] parquet\n                  :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#59,d_date_id#60,d_date#61,d_month_seq#62,d_week_seq#63,d_quarter_seq#64,d_year#65,d_dow#66,d_moy#67,d_dom#68,d_qoy#69,d_fy_year#70,d_fy_quarter_seq#71,d_fy_week_seq#72,d_day_name#73,d_quarter_name#74,d_holiday#75,d_weekend#76,d_following_holiday#77,d_first_dom#78,d_last_dom#79,d_same_day_ly#80,d_same_day_lq#81,d_current_day#82,... 4 more fields] parquet\n                  :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#36,ss_item_sk#37,ss_customer_sk#38,ss_cdemo_sk#39,ss_hdemo_sk#40,ss_addr_sk#41,ss_store_sk#42,ss_promo_sk#43,ss_ticket_number#44L,ss_quantity#45,ss_wholesale_cost#46,ss_list_price#47,ss_sales_price#48,ss_ext_discount_amt#49,ss_ext_sales_price#50,ss_ext_wholesale_cost#51,ss_ext_list_price#52,ss_ext_tax#53,ss_coupon_amt#54,ss_net_paid#55,ss_net_paid_inc_tax#56,ss_net_profit#57,ss_sold_date_sk#58] parquet\n                  :     :     +- LogicalQueryStage Project [d_date_sk#59], BroadcastQueryStage 0\n                  :     +- LogicalQueryStage Project [i_item_sk#87], BroadcastQueryStage 5\n                  +- Project [ca_state#13, c_customer_sk#18]\n                     +- Join Inner, (ca_address_sk#5 = c_current_addr_sk#22)\n                        :- LogicalQueryStage Project [ca_address_sk#5, ca_state#13], ShuffleQueryStage 2\n                        +- LogicalQueryStage Project [c_customer_sk#18, c_current_addr_sk#22], ShuffleQueryStage 3\n"
      },
      "IM" : {
        "inputSizeInBytes" : 41884039616,
        "inputRowCount" : 278065466
      },
      "PD" : {
        "3" : [ 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 112177, 112177, 101979, 101979, 112177, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 112177, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 4,
        "FinishedTasksTotalTimeInMs" : 5988.0,
        "FinishedTasksDistributionInMs" : [ 1315.0, 1390.0, 1508.0, 1775.0, 1775.0 ]
      },
      "StartTimeInMs" : 1702226504969,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 13193,
        "IOBytes" : {
          "Total" : 94814148,
          "Details" : {
            "IR" : 17088953,
            "IW" : 0,
            "SR" : 48856773,
            "SW" : 28868422
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -419471892,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [d_month_seq#179], [d_month_seq#179], HashAggregate(keys=[d_month_seq#179], functions=[]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [d_month_seq#179], [d_month_seq#179], HashAggregate(keys=[d_month_seq#179], functions=[])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 16,
        "inputRowCount" : 1
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 4,
        "FinishedTasksNum" : 22,
        "FinishedTasksTotalTimeInMs" : 19263.0,
        "FinishedTasksDistributionInMs" : [ 34.0, 77.0, 1315.0, 1508.0, 1922.0 ]
      },
      "StartTimeInMs" : 1702226499971,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 18191,
        "IOBytes" : {
          "Total" : 133150097,
          "Details" : {
            "IR" : 35434934,
            "IW" : 0,
            "SR" : 48857611,
            "SW" : 48857552
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -734843360,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39925696056,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(ss_customer_sk#38) AND isnotnull(ss_sold_date_sk#58)) AND isnotnull(ss_item_sk#37)) AND dynamicpruning#228 [ss_sold_date_sk#58]) "
          },
          "8" : {
            "sign" : -860168029,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 5745158420,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#37 = i_item_sk#87) "
          },
          "19" : {
            "sign" : 1621582120,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 11808,
            "rowCount" : 48,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#182) AND isnotnull(d_moy#184)) AND ((d_year#182 = 2000) AND (d_moy#184 = 2))) "
          },
          "23" : {
            "sign" : 700428091,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 12993088,
            "rowCount" : 203017,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((cast(i_current_price#92 as decimal(14,7)) > (1.2 * avg(i_current_price)#175)) AND (i_category#216 = i_category#99)) "
          },
          "4" : {
            "sign" : 542911427,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 1650,
            "rowCount" : 55,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ca_state#13], [ca_state#13 AS state#169, count(1) AS cnt#170L] "
          },
          "15" : {
            "sign" : -2068509562,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_month_seq#62) AND (d_month_seq#62 = scalar-subquery#171 [])) AND isnotnull(d_date_sk#59)) "
          },
          "11" : {
            "sign" : -1373441924,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 5253381060,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#37, ss_customer_sk#38, ss_sold_date_sk#58] "
          },
          "9" : {
            "sign" : 1833462538,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4248649360,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#37, ss_customer_sk#38] "
          },
          "22" : {
            "sign" : -228866884,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2436204,
            "rowCount" : 203017,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#87] "
          },
          "26" : {
            "sign" : 1492995156,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#87, i_item_id#88, i_rec_start_date#89, i_rec_end_date#90, i_item_desc#91, i_current_price#92, i_wholesale_cost#93, i_brand_id#94, i_brand#95, i_class_id#96, i_class#97, i_category_id#98, i_category#99, i_manufact_id#100, i_manufact#101, i_size#102, i_formulation#103, i_color#104, i_units#105, i_container#106, i_manager_id#107, i_product_name#108], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "13" : {
            "sign" : 1420124520,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#36, ss_item_sk#37, ss_customer_sk#38, ss_cdemo_sk#39, ss_hdemo_sk#40, ss_addr_sk#41, ss_store_sk#42, ss_promo_sk#43, ss_ticket_number#44L, ss_quantity#45, ss_wholesale_cost#46, ss_list_price#47, ss_sales_price#48, ss_ext_discount_amt#49, ss_ext_sales_price#50, ss_ext_wholesale_cost#51, ss_ext_list_price#52, ss_ext_tax#53, ss_coupon_amt#54, ss_net_paid#55, ss_net_paid_inc_tax#56, ss_net_profit#57, ss_sold_date_sk#58], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "24" : {
            "sign" : -1403291440,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 7714646,
            "rowCount" : 203017,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#87, i_current_price#92, i_category#99] "
          },
          "16" : {
            "sign" : -732351171,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#59, d_date_id#60, d_date#61, d_month_seq#62, d_week_seq#63, d_quarter_seq#64, d_year#65, d_dow#66, d_moy#67, d_dom#68, d_qoy#69, d_fy_year#70, d_fy_quarter_seq#71, d_fy_week_seq#72, d_day_name#73, d_quarter_name#74, d_holiday#75, d_weekend#76, d_following_holiday#77, d_first_dom#78, d_last_dom#79, d_same_day_ly#80, d_same_day_lq#81, d_current_day#82, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "5" : {
            "sign" : 2018274093,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 12639348524000000000000,
            "rowCount" : 574515842000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#13] "
          },
          "10" : {
            "sign" : 1448706707,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 6372974040,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#58 = d_date_sk#59) "
          },
          "21" : {
            "sign" : 1490977864,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 876588,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#59], BroadcastQueryStage 0 "
          },
          "32" : {
            "sign" : 1387910694,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 48000000,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#18, c_current_addr_sk#22], ShuffleQueryStage 3 "
          },
          "6" : {
            "sign" : -1916881683,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 17235475260000000000000,
            "rowCount" : 574515842000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#18 = ss_customer_sk#38) "
          },
          "1" : {
            "sign" : -393383252,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 1650,
            "rowCount" : 55,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : 2069768763,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24,
            "rowCount" : 2,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [d_month_seq#179], [d_month_seq#179] "
          },
          "25" : {
            "sign" : -1248107947,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 86485242,
            "rowCount" : 203017,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(i_current_price#92) AND isnotnull(i_category#99)) AND isnotnull(i_item_sk#87)) "
          },
          "14" : {
            "sign" : -1405440590,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 876588,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#59] "
          },
          "31" : {
            "sign" : 2110248060,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 26000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#5, ca_state#13], ShuffleQueryStage 2 "
          },
          "0" : {
            "sign" : 761645957,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 1980,
            "rowCount" : 55,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 955274910,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#176, d_date_id#177, d_date#178, d_month_seq#179, d_week_seq#180, d_quarter_seq#181, d_year#182, d_dow#183, d_moy#184, d_dom#185, d_qoy#186, d_fy_year#187, d_fy_quarter_seq#188, d_fy_week_seq#189, d_day_name#190, d_quarter_name#191, d_holiday#192, d_weekend#193, d_following_holiday#194, d_first_dom#195, d_last_dom#196, d_same_day_ly#197, d_same_day_lq#198, d_current_day#199, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "27" : {
            "sign" : -1247268705,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 340,
            "rowCount" : 10,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(avg(i_current_price)#175) "
          },
          "2" : {
            "sign" : -740373841,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1650,
            "rowCount" : 55,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [cnt#170L ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : -399673920,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 576,
            "rowCount" : 48,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_month_seq#179] "
          },
          "30" : {
            "sign" : -1642030180,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 68000000000000,
            "rowCount" : 2000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ca_address_sk#5 = c_current_addr_sk#22) "
          },
          "7" : {
            "sign" : 1470686304,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3447095052,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#38] "
          },
          "29" : {
            "sign" : -1206465633,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 52000000000000,
            "rowCount" : 2000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#13, c_customer_sk#18] "
          },
          "3" : {
            "sign" : 1230604108,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 1650,
            "rowCount" : 55,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (cnt#170L >= 10) "
          },
          "28" : {
            "sign" : 2007049024,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 340,
            "rowCount" : 10,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [i_category#216], [cast((avg(UnscaledValue(i_current_price#209)) / 100.0) as decimal(11,6)) AS avg(i_current_price)#175, i_category#216], HashAggregate(keys=[i_category#216], functions=[avg(UnscaledValue(i_current_price#209))]) "
          }
        },
        "links" : [ {
          "fromId" : 13,
          "fromName" : "LogicalRelation",
          "toId" : 12,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalRelation",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalRelation",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Filter",
          "toId" : 18,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Project",
          "toId" : 17,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Aggregate",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 12,
          "fromName" : "Filter",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "LogicalRelation",
          "toId" : 25,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Filter",
          "toId" : 24,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Project",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalQueryStage",
          "toId" : 27,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Filter",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Join",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "LogicalQueryStage",
          "toId" : 30,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "LogicalQueryStage",
          "toId" : 30,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Join",
          "toId" : 29,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Aggregate",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [cnt#170L ASC NULLS FIRST], true\n      +- Filter (cnt#170L >= 10)\n         +- Aggregate [ca_state#13], [ca_state#13 AS state#169, count(1) AS cnt#170L]\n            +- Project [ca_state#13]\n               +- Join Inner, (c_customer_sk#18 = ss_customer_sk#38)\n                  :- Project [ss_customer_sk#38]\n                  :  +- Join Inner, (ss_item_sk#37 = i_item_sk#87)\n                  :     :- Project [ss_item_sk#37, ss_customer_sk#38]\n                  :     :  +- Join Inner, (ss_sold_date_sk#58 = d_date_sk#59)\n                  :     :     :- Project [ss_item_sk#37, ss_customer_sk#38, ss_sold_date_sk#58]\n                  :     :     :  +- Filter (((isnotnull(ss_customer_sk#38) AND isnotnull(ss_sold_date_sk#58)) AND isnotnull(ss_item_sk#37)) AND dynamicpruning#228 [ss_sold_date_sk#58])\n                  :     :     :     :  +- Project [d_date_sk#59]\n                  :     :     :     :     +- Filter ((isnotnull(d_month_seq#62) AND (d_month_seq#62 = scalar-subquery#171 [])) AND isnotnull(d_date_sk#59))\n                  :     :     :     :        :  +- Aggregate [d_month_seq#179], [d_month_seq#179]\n                  :     :     :     :        :     +- Project [d_month_seq#179]\n                  :     :     :     :        :        +- Filter ((isnotnull(d_year#182) AND isnotnull(d_moy#184)) AND ((d_year#182 = 2000) AND (d_moy#184 = 2)))\n                  :     :     :     :        :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#176,d_date_id#177,d_date#178,d_month_seq#179,d_week_seq#180,d_quarter_seq#181,d_year#182,d_dow#183,d_moy#184,d_dom#185,d_qoy#186,d_fy_year#187,d_fy_quarter_seq#188,d_fy_week_seq#189,d_day_name#190,d_quarter_name#191,d_holiday#192,d_weekend#193,d_following_holiday#194,d_first_dom#195,d_last_dom#196,d_same_day_ly#197,d_same_day_lq#198,d_current_day#199,... 4 more fields] parquet\n                  :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#59,d_date_id#60,d_date#61,d_month_seq#62,d_week_seq#63,d_quarter_seq#64,d_year#65,d_dow#66,d_moy#67,d_dom#68,d_qoy#69,d_fy_year#70,d_fy_quarter_seq#71,d_fy_week_seq#72,d_day_name#73,d_quarter_name#74,d_holiday#75,d_weekend#76,d_following_holiday#77,d_first_dom#78,d_last_dom#79,d_same_day_ly#80,d_same_day_lq#81,d_current_day#82,... 4 more fields] parquet\n                  :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#36,ss_item_sk#37,ss_customer_sk#38,ss_cdemo_sk#39,ss_hdemo_sk#40,ss_addr_sk#41,ss_store_sk#42,ss_promo_sk#43,ss_ticket_number#44L,ss_quantity#45,ss_wholesale_cost#46,ss_list_price#47,ss_sales_price#48,ss_ext_discount_amt#49,ss_ext_sales_price#50,ss_ext_wholesale_cost#51,ss_ext_list_price#52,ss_ext_tax#53,ss_coupon_amt#54,ss_net_paid#55,ss_net_paid_inc_tax#56,ss_net_profit#57,ss_sold_date_sk#58] parquet\n                  :     :     +- LogicalQueryStage Project [d_date_sk#59], BroadcastQueryStage 0\n                  :     +- Project [i_item_sk#87]\n                  :        +- Join Inner, ((cast(i_current_price#92 as decimal(14,7)) > (1.2 * avg(i_current_price)#175)) AND (i_category#216 = i_category#99))\n                  :           :- Project [i_item_sk#87, i_current_price#92, i_category#99]\n                  :           :  +- Filter ((isnotnull(i_current_price#92) AND isnotnull(i_category#99)) AND isnotnull(i_item_sk#87))\n                  :           :     +- Relation spark_catalog.tpcds_100.item[i_item_sk#87,i_item_id#88,i_rec_start_date#89,i_rec_end_date#90,i_item_desc#91,i_current_price#92,i_wholesale_cost#93,i_brand_id#94,i_brand#95,i_class_id#96,i_class#97,i_category_id#98,i_category#99,i_manufact_id#100,i_manufact#101,i_size#102,i_formulation#103,i_color#104,i_units#105,i_container#106,i_manager_id#107,i_product_name#108] parquet\n                  :           +- Filter isnotnull(avg(i_current_price)#175)\n                  :              +- LogicalQueryStage Aggregate [i_category#216], [cast((avg(UnscaledValue(i_current_price#209)) / 100.0) as decimal(11,6)) AS avg(i_current_price)#175, i_category#216], HashAggregate(keys=[i_category#216], functions=[avg(UnscaledValue(i_current_price#209))])\n                  +- Project [ca_state#13, c_customer_sk#18]\n                     +- Join Inner, (ca_address_sk#5 = c_current_addr_sk#22)\n                        :- LogicalQueryStage Project [ca_address_sk#5, ca_state#13], ShuffleQueryStage 2\n                        +- LogicalQueryStage Project [c_customer_sk#18, c_current_addr_sk#22], ShuffleQueryStage 3\n"
      },
      "IM" : {
        "inputSizeInBytes" : 41968674584,
        "inputRowCount" : 278322412
      },
      "PD" : {
        "3" : [ 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 112177, 112177, 101979, 101979, 112177, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 112177, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 2,
        "FinishedTasksNum" : 8,
        "FinishedTasksTotalTimeInMs" : 13310.0,
        "FinishedTasksDistributionInMs" : [ 1315.0, 1508.0, 1726.0, 1922.0, 2156.0 ]
      },
      "StartTimeInMs" : 1702226500436,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 17726,
        "IOBytes" : {
          "Total" : 97014067,
          "Details" : {
            "IR" : 19287314,
            "IW" : 0,
            "SR" : 48857552,
            "SW" : 28869201
          }
        }
      }
    },
    "7" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : -1206465633,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 64000000000000,
            "rowCount" : 2000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#13, c_customer_sk#18] "
          },
          "4" : {
            "sign" : -1170768254,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 20682570312000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ca_state#13], [ca_state#13 AS state#169, count(1) AS cnt#170L] "
          },
          "11" : {
            "sign" : 1387910694,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 48000000,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#18, c_current_addr_sk#22], ShuffleQueryStage 3 "
          },
          "9" : {
            "sign" : -1642030180,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 80000000000000,
            "rowCount" : 2000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ca_address_sk#5 = c_current_addr_sk#22) "
          },
          "5" : {
            "sign" : 868606542,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 16086443576000000000000,
            "rowCount" : 574515842000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#13] "
          },
          "10" : {
            "sign" : 2110248060,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 31757008,
            "rowCount" : 1000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#5, ca_state#13], ShuffleQueryStage 2 "
          },
          "6" : {
            "sign" : -894543636,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 20682570312000000000000,
            "rowCount" : 574515842000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#18 = ss_customer_sk#38) "
          },
          "1" : {
            "sign" : -1171689809,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 20682570312000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 1993770052,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 3600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -849651666,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 20682570312000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [cnt#170L ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -215503813,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3447095052,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#38], ShuffleQueryStage 6 "
          },
          "3" : {
            "sign" : -2123303537,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 20682570312000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (cnt#170L >= 10) "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Aggregate",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [cnt#170L ASC NULLS FIRST], true\n      +- Filter (cnt#170L >= 10)\n         +- Aggregate [ca_state#13], [ca_state#13 AS state#169, count(1) AS cnt#170L]\n            +- Project [ca_state#13]\n               +- Join Inner, (c_customer_sk#18 = ss_customer_sk#38)\n                  :- LogicalQueryStage Project [ss_customer_sk#38], ShuffleQueryStage 6\n                  +- Project [ca_state#13, c_customer_sk#18]\n                     +- Join Inner, (ca_address_sk#5 = c_current_addr_sk#22)\n                        :- LogicalQueryStage Project [ca_address_sk#5, ca_state#13], ShuffleQueryStage 2\n                        +- LogicalQueryStage Project [c_customer_sk#18, c_current_addr_sk#22], ShuffleQueryStage 3\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3526852060,
        "inputRowCount" : 290257921
      },
      "PD" : {

        "3" : [ 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 112177, 112177, 101979, 101979, 112177, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 112177, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 6,
        "FinishedTasksNum" : 9,
        "FinishedTasksTotalTimeInMs" : 32314.0,
        "FinishedTasksDistributionInMs" : [ 2012.0, 2174.0, 3501.0, 5136.0, 5249.0 ]
      },
      "StartTimeInMs" : 1702226512535,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 5627,
        "IOBytes" : {
          "Total" : 80963924,
          "Details" : {
            "IR" : 12256782,
            "IW" : 0,
            "SR" : 48856773,
            "SW" : 19850369
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -734843360,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39925696056,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(ss_customer_sk#38) AND isnotnull(ss_sold_date_sk#58)) AND isnotnull(ss_item_sk#37)) AND dynamicpruning#228 [ss_sold_date_sk#58]) "
          },
          "8" : {
            "sign" : -860168029,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 5745158420,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#37 = i_item_sk#87) "
          },
          "19" : {
            "sign" : 1621582120,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 11808,
            "rowCount" : 48,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#182) AND isnotnull(d_moy#184)) AND ((d_year#182 = 2000) AND (d_moy#184 = 2))) "
          },
          "23" : {
            "sign" : 700428091,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 133991220,
            "rowCount" : 2030170,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((cast(i_current_price#92 as decimal(14,7)) > (1.2 * avg(i_current_price)#175)) AND (i_category#216 = i_category#99)) "
          },
          "4" : {
            "sign" : 542911427,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 1650,
            "rowCount" : 55,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ca_state#13], [ca_state#13 AS state#169, count(1) AS cnt#170L] "
          },
          "15" : {
            "sign" : -2068509562,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_month_seq#62) AND (d_month_seq#62 = scalar-subquery#171 [])) AND isnotnull(d_date_sk#59)) "
          },
          "11" : {
            "sign" : -1373441924,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 5253381060,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#37, ss_customer_sk#38, ss_sold_date_sk#58] "
          },
          "9" : {
            "sign" : 1833462538,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4248649360,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#37, ss_customer_sk#38] "
          },
          "22" : {
            "sign" : -228866884,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24362040,
            "rowCount" : 2030170,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#87] "
          },
          "26" : {
            "sign" : 1492995156,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#87, i_item_id#88, i_rec_start_date#89, i_rec_end_date#90, i_item_desc#91, i_current_price#92, i_wholesale_cost#93, i_brand_id#94, i_brand#95, i_class_id#96, i_class#97, i_category_id#98, i_category#99, i_manufact_id#100, i_manufact#101, i_size#102, i_formulation#103, i_color#104, i_units#105, i_container#106, i_manager_id#107, i_product_name#108], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "13" : {
            "sign" : 1420124520,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#36, ss_item_sk#37, ss_customer_sk#38, ss_cdemo_sk#39, ss_hdemo_sk#40, ss_addr_sk#41, ss_store_sk#42, ss_promo_sk#43, ss_ticket_number#44L, ss_quantity#45, ss_wholesale_cost#46, ss_list_price#47, ss_sales_price#48, ss_ext_discount_amt#49, ss_ext_sales_price#50, ss_ext_wholesale_cost#51, ss_ext_list_price#52, ss_ext_tax#53, ss_coupon_amt#54, ss_net_paid#55, ss_net_paid_inc_tax#56, ss_net_profit#57, ss_sold_date_sk#58], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "24" : {
            "sign" : -1403291440,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 7714646,
            "rowCount" : 203017,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#87, i_current_price#92, i_category#99] "
          },
          "16" : {
            "sign" : -732351171,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#59, d_date_id#60, d_date#61, d_month_seq#62, d_week_seq#63, d_quarter_seq#64, d_year#65, d_dow#66, d_moy#67, d_dom#68, d_qoy#69, d_fy_year#70, d_fy_quarter_seq#71, d_fy_week_seq#72, d_day_name#73, d_quarter_name#74, d_holiday#75, d_weekend#76, d_following_holiday#77, d_first_dom#78, d_last_dom#79, d_same_day_ly#80, d_same_day_lq#81, d_current_day#82, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "5" : {
            "sign" : 2018274093,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 12639348524000000000000,
            "rowCount" : 574515842000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#13] "
          },
          "10" : {
            "sign" : 1448706707,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 6372974040,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#58 = d_date_sk#59) "
          },
          "21" : {
            "sign" : 1490977864,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 876588,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#59], BroadcastQueryStage 0 "
          },
          "32" : {
            "sign" : 1387910694,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 48000000,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#18, c_current_addr_sk#22], ShuffleQueryStage 3 "
          },
          "6" : {
            "sign" : -1916881683,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 17235475260000000000000,
            "rowCount" : 574515842000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#18 = ss_customer_sk#38) "
          },
          "1" : {
            "sign" : -393383252,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 1650,
            "rowCount" : 55,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : 2069768763,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24,
            "rowCount" : 2,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [d_month_seq#179], [d_month_seq#179] "
          },
          "25" : {
            "sign" : -1248107947,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 86485242,
            "rowCount" : 203017,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(i_current_price#92) AND isnotnull(i_category#99)) AND isnotnull(i_item_sk#87)) "
          },
          "14" : {
            "sign" : -1405440590,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 876588,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#59] "
          },
          "31" : {
            "sign" : 2110248060,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 26000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_address_sk#5, ca_state#13], ShuffleQueryStage 2 "
          },
          "0" : {
            "sign" : 761645957,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 1980,
            "rowCount" : 55,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 955274910,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#176, d_date_id#177, d_date#178, d_month_seq#179, d_week_seq#180, d_quarter_seq#181, d_year#182, d_dow#183, d_moy#184, d_dom#185, d_qoy#186, d_fy_year#187, d_fy_quarter_seq#188, d_fy_week_seq#189, d_day_name#190, d_quarter_name#191, d_holiday#192, d_weekend#193, d_following_holiday#194, d_first_dom#195, d_last_dom#196, d_same_day_ly#197, d_same_day_lq#198, d_current_day#199, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "27" : {
            "sign" : -1247268705,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 360,
            "rowCount" : 10,
            "isRuntime" : true,
            "predicate" : " (unknown) Filter Arguments: isnotnull(avg(i_current_price)#175) "
          },
          "2" : {
            "sign" : -740373841,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1650,
            "rowCount" : 55,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [cnt#170L ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : -399673920,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 576,
            "rowCount" : 48,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_month_seq#179] "
          },
          "30" : {
            "sign" : -1642030180,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 68000000000000,
            "rowCount" : 2000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ca_address_sk#5 = c_current_addr_sk#22) "
          },
          "7" : {
            "sign" : 1470686304,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3447095052,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#38] "
          },
          "29" : {
            "sign" : -1206465633,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 52000000000000,
            "rowCount" : 2000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#13, c_customer_sk#18] "
          },
          "3" : {
            "sign" : 1230604108,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 1650,
            "rowCount" : 55,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (cnt#170L >= 10) "
          },
          "28" : {
            "sign" : 2007049024,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 408,
            "rowCount" : 10,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [i_category#216], [cast((avg(UnscaledValue(i_current_price#209)) / 100.0) as decimal(11,6)) AS avg(i_current_price)#175, i_category#216], HashAggregate(keys=[i_category#216], functions=[avg(UnscaledValue(i_current_price#209))]) "
          }
        },
        "links" : [ {
          "fromId" : 13,
          "fromName" : "LogicalRelation",
          "toId" : 12,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalRelation",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalRelation",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Filter",
          "toId" : 18,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Project",
          "toId" : 17,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Aggregate",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 12,
          "fromName" : "Filter",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "LogicalRelation",
          "toId" : 25,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Filter",
          "toId" : 24,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Project",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalQueryStage",
          "toId" : 27,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Filter",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Join",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "LogicalQueryStage",
          "toId" : 30,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "LogicalQueryStage",
          "toId" : 30,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Join",
          "toId" : 29,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Aggregate",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [cnt#170L ASC NULLS FIRST], true\n      +- Filter (cnt#170L >= 10)\n         +- Aggregate [ca_state#13], [ca_state#13 AS state#169, count(1) AS cnt#170L]\n            +- Project [ca_state#13]\n               +- Join Inner, (c_customer_sk#18 = ss_customer_sk#38)\n                  :- Project [ss_customer_sk#38]\n                  :  +- Join Inner, (ss_item_sk#37 = i_item_sk#87)\n                  :     :- Project [ss_item_sk#37, ss_customer_sk#38]\n                  :     :  +- Join Inner, (ss_sold_date_sk#58 = d_date_sk#59)\n                  :     :     :- Project [ss_item_sk#37, ss_customer_sk#38, ss_sold_date_sk#58]\n                  :     :     :  +- Filter (((isnotnull(ss_customer_sk#38) AND isnotnull(ss_sold_date_sk#58)) AND isnotnull(ss_item_sk#37)) AND dynamicpruning#228 [ss_sold_date_sk#58])\n                  :     :     :     :  +- Project [d_date_sk#59]\n                  :     :     :     :     +- Filter ((isnotnull(d_month_seq#62) AND (d_month_seq#62 = scalar-subquery#171 [])) AND isnotnull(d_date_sk#59))\n                  :     :     :     :        :  +- Aggregate [d_month_seq#179], [d_month_seq#179]\n                  :     :     :     :        :     +- Project [d_month_seq#179]\n                  :     :     :     :        :        +- Filter ((isnotnull(d_year#182) AND isnotnull(d_moy#184)) AND ((d_year#182 = 2000) AND (d_moy#184 = 2)))\n                  :     :     :     :        :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#176,d_date_id#177,d_date#178,d_month_seq#179,d_week_seq#180,d_quarter_seq#181,d_year#182,d_dow#183,d_moy#184,d_dom#185,d_qoy#186,d_fy_year#187,d_fy_quarter_seq#188,d_fy_week_seq#189,d_day_name#190,d_quarter_name#191,d_holiday#192,d_weekend#193,d_following_holiday#194,d_first_dom#195,d_last_dom#196,d_same_day_ly#197,d_same_day_lq#198,d_current_day#199,... 4 more fields] parquet\n                  :     :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#59,d_date_id#60,d_date#61,d_month_seq#62,d_week_seq#63,d_quarter_seq#64,d_year#65,d_dow#66,d_moy#67,d_dom#68,d_qoy#69,d_fy_year#70,d_fy_quarter_seq#71,d_fy_week_seq#72,d_day_name#73,d_quarter_name#74,d_holiday#75,d_weekend#76,d_following_holiday#77,d_first_dom#78,d_last_dom#79,d_same_day_ly#80,d_same_day_lq#81,d_current_day#82,... 4 more fields] parquet\n                  :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#36,ss_item_sk#37,ss_customer_sk#38,ss_cdemo_sk#39,ss_hdemo_sk#40,ss_addr_sk#41,ss_store_sk#42,ss_promo_sk#43,ss_ticket_number#44L,ss_quantity#45,ss_wholesale_cost#46,ss_list_price#47,ss_sales_price#48,ss_ext_discount_amt#49,ss_ext_sales_price#50,ss_ext_wholesale_cost#51,ss_ext_list_price#52,ss_ext_tax#53,ss_coupon_amt#54,ss_net_paid#55,ss_net_paid_inc_tax#56,ss_net_profit#57,ss_sold_date_sk#58] parquet\n                  :     :     +- LogicalQueryStage Project [d_date_sk#59], BroadcastQueryStage 0\n                  :     +- Project [i_item_sk#87]\n                  :        +- Join Inner, ((cast(i_current_price#92 as decimal(14,7)) > (1.2 * avg(i_current_price)#175)) AND (i_category#216 = i_category#99))\n                  :           :- Project [i_item_sk#87, i_current_price#92, i_category#99]\n                  :           :  +- Filter ((isnotnull(i_current_price#92) AND isnotnull(i_category#99)) AND isnotnull(i_item_sk#87))\n                  :           :     +- Relation spark_catalog.tpcds_100.item[i_item_sk#87,i_item_id#88,i_rec_start_date#89,i_rec_end_date#90,i_item_desc#91,i_current_price#92,i_wholesale_cost#93,i_brand_id#94,i_brand#95,i_class_id#96,i_class#97,i_category_id#98,i_category#99,i_manufact_id#100,i_manufact#101,i_size#102,i_formulation#103,i_color#104,i_units#105,i_container#106,i_manager_id#107,i_product_name#108] parquet\n                  :           +- Filter isnotnull(avg(i_current_price)#175)\n                  :              +- LogicalQueryStage Aggregate [i_category#216], [cast((avg(UnscaledValue(i_current_price#209)) / 100.0) as decimal(11,6)) AS avg(i_current_price)#175, i_category#216], HashAggregate(keys=[i_category#216], functions=[avg(UnscaledValue(i_current_price#209))])\n                  +- Project [ca_state#13, c_customer_sk#18]\n                     +- Join Inner, (ca_address_sk#5 = c_current_addr_sk#22)\n                        :- LogicalQueryStage Project [ca_address_sk#5, ca_state#13], ShuffleQueryStage 2\n                        +- LogicalQueryStage Project [c_customer_sk#18, c_current_addr_sk#22], ShuffleQueryStage 3\n"
      },
      "IM" : {
        "inputSizeInBytes" : 41968674652,
        "inputRowCount" : 278322412
      },
      "PD" : {
        "3" : [ 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 112177, 112177, 101979, 101979, 112177, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 112177, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 2,
        "FinishedTasksNum" : 4,
        "FinishedTasksTotalTimeInMs" : 5988.0,
        "FinishedTasksDistributionInMs" : [ 1315.0, 1390.0, 1508.0, 1775.0, 1775.0 ]
      },
      "StartTimeInMs" : 1702226500530,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 17632,
        "IOBytes" : {
          "Total" : 96483093,
          "Details" : {
            "IR" : 18757119,
            "IW" : 0,
            "SR" : 48857552,
            "SW" : 28868422
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "12" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1898017561,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3600,
                "rowCount" : 100
              },
              "compileTime" : {
                "sizeInBytes" : 3600,
                "rowCount" : 100
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "1" : {
            "sign" : 1265265442,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17469576000000,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 17469576000000,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -515620463,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17469576000000,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 17469576000000,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [cnt#170L ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : -722905790,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17469576000000,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 17469576000000,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (cnt#170L >= 10) "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [cnt#170L ASC NULLS FIRST], true\n      +- Filter (cnt#170L >= 10)\n         +- Aggregate [ca_state#13], [ca_state#13 AS state#169, count(1) AS cnt#170L]\n            +- Project [ca_state#13]\n               +- Join Inner, (c_customer_sk#18 = ss_customer_sk#38)\n                  :- LogicalQueryStage Project [ss_customer_sk#38], ShuffleQueryStage 6\n                  +- LogicalQueryStage Project [ca_state#13, c_customer_sk#18], ShuffleQueryStage 7\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1714823965,
            "className" : "org.apache.spark.sql.execution.TakeOrderedAndProjectExec",
            "sizeInBytes" : 3600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) TakeOrderedAndProject Input [2]: [state#169, cnt#170L] Arguments: 100, [cnt#170L ASC NULLS FIRST], [state#169, cnt#170L] "
          },
          "1" : {
            "sign" : 1518705458,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 17469576000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [state#169, cnt#170L] Condition : (cnt#170L >= 10) "
          },
          "2" : {
            "sign" : -23311707,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 1656,
            "rowCount" : 52,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [2]: [ca_state#13, count#230L] Keys [1]: [ca_state#13] Functions [1]: [count(1)] Aggregate Attributes [1]: [count(1)#173L] Results [2]: [ca_state#13 AS state#169, count(1)#173L AS cnt#170L] "
          },
          "3" : {
            "sign" : -41660004,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 17469576000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [ca_state#13, count#230L] Arguments: 9 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "HashAggregate",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "TakeOrderedAndProject",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "TakeOrderedAndProject(limit=100, orderBy=[cnt#170L ASC NULLS FIRST], output=[state#169,cnt#170L])\n+- Filter (cnt#170L >= 10)\n   +- HashAggregate(keys=[ca_state#13], functions=[count(1)], output=[state#169, cnt#170L])\n      +- ShuffleQueryStage 9\n         +- Exchange hashpartitioning(ca_state#13, 200), ENSURE_REQUIREMENTS, [plan_id=1436]\n            +- *(11) HashAggregate(keys=[ca_state#13], functions=[partial_count(1)], output=[ca_state#13, count#230L])\n               +- *(11) Project [ca_state#13]\n                  +- *(11) BroadcastHashJoin [ss_customer_sk#38], [c_customer_sk#18], Inner, BuildLeft, false\n                     :- BroadcastQueryStage 8\n                     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1379]\n                     :     +- AQEShuffleRead local\n                     :        +- ShuffleQueryStage 6\n                     :           +- Exchange hashpartitioning(ss_customer_sk#38, 200), ENSURE_REQUIREMENTS, [plan_id=1142]\n                     :              +- *(7) Project [ss_customer_sk#38]\n                     :                 +- *(7) BroadcastHashJoin [ss_item_sk#37], [i_item_sk#87], Inner, BuildRight, false\n                     :                    :- *(7) Project [ss_item_sk#37, ss_customer_sk#38]\n                     :                    :  +- *(7) BroadcastHashJoin [ss_sold_date_sk#58], [d_date_sk#59], Inner, BuildRight, false\n                     :                    :     :- *(7) Filter (isnotnull(ss_customer_sk#38) AND isnotnull(ss_item_sk#37))\n                     :                    :     :  +- *(7) ColumnarToRow\n                     :                    :     :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#37,ss_customer_sk#38,ss_sold_date_sk#58] Batched: true, DataFilters: [isnotnull(ss_customer_sk#38), isnotnull(ss_item_sk#37)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#58), dynamicpruningexpression(ss_sold_date_sk#58 IN dynamicpruning#228)], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk)], ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int>\n                     :                    :     :           +- SubqueryBroadcast dynamicpruning#228, 0, [d_date_sk#59], [id=#1105]\n                     :                    :     :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                                  +- == Final Plan ==\n                                                                     BroadcastQueryStage 1\n                                                                     +- ReusedExchange [d_date_sk#59], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=323]\n                                                                  +- == Initial Plan ==\n                                                                     BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1102]\n                                                                     +- Project [d_date_sk#59]\n                                                                        +- Filter ((isnotnull(d_month_seq#62) AND (d_month_seq#62 = Subquery subquery#171, [id=#131])) AND isnotnull(d_date_sk#59))\n                                                                           :  +- Subquery subquery#171, [id=#131]\n                                                                           :     +- AdaptiveSparkPlan isFinalPlan=false\n                                                                           :        +- HashAggregate(keys=[d_month_seq#179], functions=[], output=[d_month_seq#179])\n                                                                           :           +- Exchange hashpartitioning(d_month_seq#179, 200), ENSURE_REQUIREMENTS, [plan_id=129]\n                                                                           :              +- HashAggregate(keys=[d_month_seq#179], functions=[], output=[d_month_seq#179])\n                                                                           :                 +- Project [d_month_seq#179]\n                                                                           :                    +- Filter (((isnotnull(d_year#182) AND isnotnull(d_moy#184)) AND (d_year#182 = 2000)) AND (d_moy#184 = 2))\n                                                                           :                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#179,d_year#182,d_moy#184] Batched: true, DataFilters: [isnotnull(d_year#182), isnotnull(d_moy#184), (d_year#182 = 2000), (d_moy#184 = 2)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n                                                                           +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#59,d_month_seq#62] Batched: true, DataFilters: [isnotnull(d_month_seq#62), isnotnull(d_date_sk#59)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_month_seq:int>\n                     :                    :     +- BroadcastQueryStage 0\n                     :                    :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=323]\n                     :                    :           +- *(1) Project [d_date_sk#59]\n                     :                    :              +- *(1) Filter ((isnotnull(d_month_seq#62) AND (d_month_seq#62 = Subquery subquery#171, [id=#148])) AND isnotnull(d_date_sk#59))\n                     :                    :                 :  +- Subquery subquery#171, [id=#148]\n                     :                    :                 :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                                     +- == Final Plan ==\n                                                                        *(2) HashAggregate(keys=[d_month_seq#179], functions=[], output=[d_month_seq#179])\n                                                                        +- AQEShuffleRead coalesced\n                                                                           +- ShuffleQueryStage 0\n                                                                              +- Exchange hashpartitioning(d_month_seq#179, 200), ENSURE_REQUIREMENTS, [plan_id=423]\n                                                                                 +- *(1) HashAggregate(keys=[d_month_seq#179], functions=[], output=[d_month_seq#179])\n                                                                                    +- *(1) Project [d_month_seq#179]\n                                                                                       +- *(1) Filter (((isnotnull(d_year#182) AND isnotnull(d_moy#184)) AND (d_year#182 = 2000)) AND (d_moy#184 = 2))\n                                                                                          +- *(1) ColumnarToRow\n                                                                                             +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#179,d_year#182,d_moy#184] Batched: true, DataFilters: [isnotnull(d_year#182), isnotnull(d_moy#184), (d_year#182 = 2000), (d_moy#184 = 2)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n                                                                     +- == Initial Plan ==\n                                                                        HashAggregate(keys=[d_month_seq#179], functions=[], output=[d_month_seq#179])\n                                                                        +- Exchange hashpartitioning(d_month_seq#179, 200), ENSURE_REQUIREMENTS, [plan_id=146]\n                                                                           +- HashAggregate(keys=[d_month_seq#179], functions=[], output=[d_month_seq#179])\n                                                                              +- Project [d_month_seq#179]\n                                                                                 +- Filter (((isnotnull(d_year#182) AND isnotnull(d_moy#184)) AND (d_year#182 = 2000)) AND (d_moy#184 = 2))\n                                                                                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#179,d_year#182,d_moy#184] Batched: true, DataFilters: [isnotnull(d_year#182), isnotnull(d_moy#184), (d_year#182 = 2000), (d_moy#184 = 2)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n                     :                    :                 +- *(1) ColumnarToRow\n                     :                    :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#59,d_month_seq#62] Batched: true, DataFilters: [isnotnull(d_month_seq#62), isnotnull(d_date_sk#59)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_month_seq:int>\n                     :                    +- BroadcastQueryStage 5\n                     :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=886]\n                     :                          +- *(6) Project [i_item_sk#87]\n                     :                             +- *(6) BroadcastHashJoin [i_category#99], [i_category#216], Inner, BuildRight, (cast(i_current_price#92 as decimal(14,7)) > (1.2 * avg(i_current_price)#175)), false\n                     :                                :- *(6) Filter ((isnotnull(i_current_price#92) AND isnotnull(i_category#99)) AND isnotnull(i_item_sk#87))\n                     :                                :  +- *(6) ColumnarToRow\n                     :                                :     +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#87,i_current_price#92,i_category#99] Batched: true, DataFilters: [isnotnull(i_current_price#92), isnotnull(i_category#99), isnotnull(i_item_sk#87)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_current_price), IsNotNull(i_category), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_category:string>\n                     :                                +- BroadcastQueryStage 4\n                     :                                   +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, string, true]),false), [plan_id=721]\n                     :                                      +- *(5) Filter isnotnull(avg(i_current_price)#175)\n                     :                                         +- *(5) HashAggregate(keys=[i_category#216], functions=[avg(UnscaledValue(i_current_price#209))], output=[avg(i_current_price)#175, i_category#216])\n                     :                                            +- AQEShuffleRead coalesced\n                     :                                               +- ShuffleQueryStage 1\n                     :                                                  +- Exchange hashpartitioning(i_category#216, 200), ENSURE_REQUIREMENTS, [plan_id=344]\n                     :                                                     +- *(2) HashAggregate(keys=[i_category#216], functions=[partial_avg(UnscaledValue(i_current_price#209))], output=[i_category#216, sum#233, count#234L])\n                     :                                                        +- *(2) Filter isnotnull(i_category#216)\n                     :                                                           +- *(2) ColumnarToRow\n                     :                                                              +- FileScan parquet spark_catalog.tpcds_100.item[i_current_price#209,i_category#216] Batched: true, DataFilters: [isnotnull(i_category#216)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_category)], ReadSchema: struct<i_current_price:decimal(7,2),i_category:string>\n                     +- AQEShuffleRead local\n                        +- ShuffleQueryStage 7\n                           +- Exchange hashpartitioning(c_customer_sk#18, 200), ENSURE_REQUIREMENTS, [plan_id=1271]\n                              +- *(10) Project [ca_state#13, c_customer_sk#18]\n                                 +- *(10) SortMergeJoin [ca_address_sk#5], [c_current_addr_sk#22], Inner\n                                    :- *(8) Sort [ca_address_sk#5 ASC NULLS FIRST], false, 0\n                                    :  +- AQEShuffleRead coalesced\n                                    :     +- ShuffleQueryStage 2\n                                    :        +- Exchange hashpartitioning(ca_address_sk#5, 200), ENSURE_REQUIREMENTS, [plan_id=372]\n                                    :           +- *(3) Filter isnotnull(ca_address_sk#5)\n                                    :              +- *(3) ColumnarToRow\n                                    :                 +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#5,ca_state#13] Batched: true, DataFilters: [isnotnull(ca_address_sk#5)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n                                    +- *(9) Sort [c_current_addr_sk#22 ASC NULLS FIRST], false, 0\n                                       +- AQEShuffleRead coalesced\n                                          +- ShuffleQueryStage 3\n                                             +- Exchange hashpartitioning(c_current_addr_sk#22, 200), ENSURE_REQUIREMENTS, [plan_id=389]\n                                                +- *(4) Filter (isnotnull(c_current_addr_sk#22) AND isnotnull(c_customer_sk#18))\n                                                   +- *(4) ColumnarToRow\n                                                      +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#18,c_current_addr_sk#22] Batched: true, DataFilters: [isnotnull(c_current_addr_sk#22), isnotnull(c_customer_sk#18)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1656,
        "inputRowCount" : 52
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "6" : [ 0, 0, 0, 0, 88, 0, 0, 0, 0, 72, 80, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, 72, 0, 88, 0, 72, 0, 0, 80, 72, 0, 0, 0, 72, 72, 0, 0, 0, 0, 72, 88, 72, 0, 0, 72, 72, 0, 0, 72, 72, 0, 0, 72, 0, 72, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 80, 72, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 72, 0, 88, 0, 0, 0, 0, 72, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 72, 0, 72, 0, 0, 0, 0, 0, 88, 0, 0, 0, 72, 0, 0, 0, 72, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 72 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 12,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 25 ],
      "Objectives" : {
        "DurationInMs" : 81,
        "TotalTasksDurationInMs" : 72,
        "IOBytes" : {
          "Total" : 3347,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 3347,
            "SW" : 0
          }
        }
      }
    },
    "8" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -1373441924,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5253381060,
                "rowCount" : 262669053
              },
              "compileTime" : {
                "sizeInBytes" : 5253381060,
                "rowCount" : 262669053
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#37, ss_customer_sk#38, ss_sold_date_sk#58] "
          },
          "5" : {
            "sign" : -734843360,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 39925696056,
                "rowCount" : 262669053
              },
              "compileTime" : {
                "sizeInBytes" : 39925696056,
                "rowCount" : 262669053
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(ss_customer_sk#38) AND isnotnull(ss_sold_date_sk#58)) AND isnotnull(ss_item_sk#37)) AND dynamicpruning#228 [ss_sold_date_sk#58]) "
          },
          "6" : {
            "sign" : 1420124520,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              },
              "compileTime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#36, ss_item_sk#37, ss_customer_sk#38, ss_cdemo_sk#39, ss_hdemo_sk#40, ss_addr_sk#41, ss_store_sk#42, ss_promo_sk#43, ss_ticket_number#44L, ss_quantity#45, ss_wholesale_cost#46, ss_list_price#47, ss_sales_price#48, ss_ext_discount_amt#49, ss_ext_sales_price#50, ss_ext_wholesale_cost#51, ss_ext_list_price#52, ss_ext_tax#53, ss_coupon_amt#54, ss_net_paid#55, ss_net_paid_inc_tax#56, ss_net_profit#57, ss_sold_date_sk#58], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : 2342256,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5745158420,
                "rowCount" : 287257921
              },
              "compileTime" : {
                "sizeInBytes" : 5745158420,
                "rowCount" : 287257921
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#37 = i_item_sk#87) "
          },
          "0" : {
            "sign" : 711077387,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3447095052,
                "rowCount" : 287257921
              },
              "compileTime" : {
                "sizeInBytes" : 3447095052,
                "rowCount" : 287257921
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_customer_sk#38] "
          },
          "2" : {
            "sign" : -1491001996,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4248649360,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 4248649360,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#37, ss_customer_sk#38] "
          },
          "3" : {
            "sign" : -1046792999,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6372974040,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 6372974040,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_sold_date_sk#58 = d_date_sk#59) "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalRelation",
          "toId" : 5,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Filter",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_customer_sk#38]\n+- Join Inner, (ss_item_sk#37 = i_item_sk#87)\n   :- Project [ss_item_sk#37, ss_customer_sk#38]\n   :  +- Join Inner, (ss_sold_date_sk#58 = d_date_sk#59)\n   :     :- Project [ss_item_sk#37, ss_customer_sk#38, ss_sold_date_sk#58]\n   :     :  +- Filter (((isnotnull(ss_customer_sk#38) AND isnotnull(ss_sold_date_sk#58)) AND isnotnull(ss_item_sk#37)) AND dynamicpruning#228 [ss_sold_date_sk#58])\n   :     :     :  +- Project [d_date_sk#59]\n   :     :     :     +- Filter ((isnotnull(d_month_seq#62) AND (d_month_seq#62 = scalar-subquery#171 [])) AND isnotnull(d_date_sk#59))\n   :     :     :        :  +- Aggregate [d_month_seq#179], [d_month_seq#179]\n   :     :     :        :     +- Project [d_month_seq#179]\n   :     :     :        :        +- Filter ((isnotnull(d_year#182) AND isnotnull(d_moy#184)) AND ((d_year#182 = 2000) AND (d_moy#184 = 2)))\n   :     :     :        :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#176,d_date_id#177,d_date#178,d_month_seq#179,d_week_seq#180,d_quarter_seq#181,d_year#182,d_dow#183,d_moy#184,d_dom#185,d_qoy#186,d_fy_year#187,d_fy_quarter_seq#188,d_fy_week_seq#189,d_day_name#190,d_quarter_name#191,d_holiday#192,d_weekend#193,d_following_holiday#194,d_first_dom#195,d_last_dom#196,d_same_day_ly#197,d_same_day_lq#198,d_current_day#199,... 4 more fields] parquet\n   :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#59,d_date_id#60,d_date#61,d_month_seq#62,d_week_seq#63,d_quarter_seq#64,d_year#65,d_dow#66,d_moy#67,d_dom#68,d_qoy#69,d_fy_year#70,d_fy_quarter_seq#71,d_fy_week_seq#72,d_day_name#73,d_quarter_name#74,d_holiday#75,d_weekend#76,d_following_holiday#77,d_first_dom#78,d_last_dom#79,d_same_day_ly#80,d_same_day_lq#81,d_current_day#82,... 4 more fields] parquet\n   :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#36,ss_item_sk#37,ss_customer_sk#38,ss_cdemo_sk#39,ss_hdemo_sk#40,ss_addr_sk#41,ss_store_sk#42,ss_promo_sk#43,ss_ticket_number#44L,ss_quantity#45,ss_wholesale_cost#46,ss_list_price#47,ss_sales_price#48,ss_ext_discount_amt#49,ss_ext_sales_price#50,ss_ext_wholesale_cost#51,ss_ext_list_price#52,ss_ext_tax#53,ss_coupon_amt#54,ss_net_paid#55,ss_net_paid_inc_tax#56,ss_net_profit#57,ss_sold_date_sk#58] parquet\n   :     +- Project [d_date_sk#59]\n   :        +- Filter ((isnotnull(d_month_seq#62) AND (d_month_seq#62 = scalar-subquery#171 [])) AND isnotnull(d_date_sk#59))\n   :           :  +- Aggregate [d_month_seq#179], [d_month_seq#179]\n   :           :     +- Project [d_month_seq#179]\n   :           :        +- Filter ((isnotnull(d_year#182) AND isnotnull(d_moy#184)) AND ((d_year#182 = 2000) AND (d_moy#184 = 2)))\n   :           :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#176,d_date_id#177,d_date#178,d_month_seq#179,d_week_seq#180,d_quarter_seq#181,d_year#182,d_dow#183,d_moy#184,d_dom#185,d_qoy#186,d_fy_year#187,d_fy_quarter_seq#188,d_fy_week_seq#189,d_day_name#190,d_quarter_name#191,d_holiday#192,d_weekend#193,d_following_holiday#194,d_first_dom#195,d_last_dom#196,d_same_day_ly#197,d_same_day_lq#198,d_current_day#199,... 4 more fields] parquet\n   :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#59,d_date_id#60,d_date#61,d_month_seq#62,d_week_seq#63,d_quarter_seq#64,d_year#65,d_dow#66,d_moy#67,d_dom#68,d_qoy#69,d_fy_year#70,d_fy_quarter_seq#71,d_fy_week_seq#72,d_day_name#73,d_quarter_name#74,d_holiday#75,d_weekend#76,d_following_holiday#77,d_first_dom#78,d_last_dom#79,d_same_day_ly#80,d_same_day_lq#81,d_current_day#82,... 4 more fields] parquet\n   +- Project [i_item_sk#87]\n      +- Join Inner, ((cast(i_current_price#92 as decimal(14,7)) > (1.2 * avg(i_current_price)#175)) AND (i_category#216 = i_category#99))\n         :- Project [i_item_sk#87, i_current_price#92, i_category#99]\n         :  +- Filter ((isnotnull(i_current_price#92) AND isnotnull(i_category#99)) AND isnotnull(i_item_sk#87))\n         :     +- Relation spark_catalog.tpcds_100.item[i_item_sk#87,i_item_id#88,i_rec_start_date#89,i_rec_end_date#90,i_item_desc#91,i_current_price#92,i_wholesale_cost#93,i_brand_id#94,i_brand#95,i_class_id#96,i_class#97,i_category_id#98,i_category#99,i_manufact_id#100,i_manufact#101,i_size#102,i_formulation#103,i_color#104,i_units#105,i_container#106,i_manager_id#107,i_product_name#108] parquet\n         +- Filter isnotnull(avg(i_current_price)#175)\n            +- Aggregate [i_category#216], [cast((avg(UnscaledValue(i_current_price#209)) / 100.0) as decimal(11,6)) AS avg(i_current_price)#175, i_category#216]\n               +- Project [i_current_price#209, i_category#216]\n                  +- Filter isnotnull(i_category#216)\n                     +- Relation spark_catalog.tpcds_100.item[i_item_sk#204,i_item_id#205,i_rec_start_date#206,i_rec_end_date#207,i_item_desc#208,i_current_price#209,i_wholesale_cost#210,i_brand_id#211,i_brand#212,i_class_id#213,i_class#214,i_category_id#215,i_category#216,i_manufact_id#217,i_manufact#218,i_size#219,i_formulation#220,i_color#221,i_units#222,i_container#223,i_manager_id#224,i_product_name#225] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 640896603,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 5253381060,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [ss_item_sk#37, ss_customer_sk#38, ss_sold_date_sk#58] Condition : (isnotnull(ss_customer_sk#38) AND isnotnull(ss_item_sk#37)) "
          },
          "5" : {
            "sign" : 1847977489,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 5253381060,
            "rowCount" : 262669053,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_sales Output [3]: [ss_item_sk#37, ss_customer_sk#38, ss_sold_date_sk#58] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales/ss_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ss_sold_date_sk#58), dynamicpruningexpression(ss_sold_date_sk#58 IN dynamicpruning#228)] PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk)] ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int> "
          },
          "6" : {
            "sign" : 795896736,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048808,
            "rowCount" : 29,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#59] Arguments: 0 "
          },
          "1" : {
            "sign" : 260772179,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 5745158420,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_item_sk#37] Right keys [1]: [i_item_sk#87] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 1000009762,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 3447095052,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [ss_customer_sk#38] Input [3]: [ss_item_sk#37, ss_customer_sk#38, i_item_sk#87] "
          },
          "2" : {
            "sign" : 311590007,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 4248649360,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [ss_item_sk#37, ss_customer_sk#38] Input [4]: [ss_item_sk#37, ss_customer_sk#38, ss_sold_date_sk#58, d_date_sk#59] "
          },
          "7" : {
            "sign" : -430826055,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 2097152,
            "rowCount" : 20084,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [i_item_sk#87] Arguments: 5 "
          },
          "3" : {
            "sign" : -1433292994,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 6372974040,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_sold_date_sk#58] Right keys [1]: [d_date_sk#59] Join type: Inner Join condition: None "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_sales",
          "toId" : 4,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Filter",
          "toId" : 3,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "BroadcastQueryStage",
          "toId" : 3,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "BroadcastHashJoin",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_customer_sk#38]\n+- BroadcastHashJoin [ss_item_sk#37], [i_item_sk#87], Inner, BuildRight, false\n   :- Project [ss_item_sk#37, ss_customer_sk#38]\n   :  +- BroadcastHashJoin [ss_sold_date_sk#58], [d_date_sk#59], Inner, BuildRight, false\n   :     :- Filter (isnotnull(ss_customer_sk#38) AND isnotnull(ss_item_sk#37))\n   :     :  +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#37,ss_customer_sk#38,ss_sold_date_sk#58] Batched: true, DataFilters: [isnotnull(ss_customer_sk#38), isnotnull(ss_item_sk#37)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#58), dynamicpruningexpression(ss_sold_date_sk#58 IN dynamicpruning#228)], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk)], ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int>\n   :     :        +- SubqueryBroadcast dynamicpruning#228, 0, [d_date_sk#59], [id=#1105]\n   :     :           +- AdaptiveSparkPlan isFinalPlan=false\n   :     :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1102]\n   :     :                 +- Project [d_date_sk#59]\n   :     :                    +- Filter ((isnotnull(d_month_seq#62) AND (d_month_seq#62 = Subquery subquery#171, [id=#131])) AND isnotnull(d_date_sk#59))\n   :     :                       :  +- Subquery subquery#171, [id=#131]\n   :     :                       :     +- AdaptiveSparkPlan isFinalPlan=false\n   :     :                       :        +- HashAggregate(keys=[d_month_seq#179], functions=[], output=[d_month_seq#179])\n   :     :                       :           +- Exchange hashpartitioning(d_month_seq#179, 200), ENSURE_REQUIREMENTS, [plan_id=129]\n   :     :                       :              +- HashAggregate(keys=[d_month_seq#179], functions=[], output=[d_month_seq#179])\n   :     :                       :                 +- Project [d_month_seq#179]\n   :     :                       :                    +- Filter (((isnotnull(d_year#182) AND isnotnull(d_moy#184)) AND (d_year#182 = 2000)) AND (d_moy#184 = 2))\n   :     :                       :                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#179,d_year#182,d_moy#184] Batched: true, DataFilters: [isnotnull(d_year#182), isnotnull(d_moy#184), (d_year#182 = 2000), (d_moy#184 = 2)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n   :     :                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#59,d_month_seq#62] Batched: true, DataFilters: [isnotnull(d_month_seq#62), isnotnull(d_date_sk#59)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_month_seq:int>\n   :     +- BroadcastQueryStage 0\n   :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=323]\n   :           +- *(1) Project [d_date_sk#59]\n   :              +- *(1) Filter ((isnotnull(d_month_seq#62) AND (d_month_seq#62 = Subquery subquery#171, [id=#148])) AND isnotnull(d_date_sk#59))\n   :                 :  +- Subquery subquery#171, [id=#148]\n   :                 :     +- AdaptiveSparkPlan isFinalPlan=true\n                              +- == Final Plan ==\n                                 *(2) HashAggregate(keys=[d_month_seq#179], functions=[], output=[d_month_seq#179])\n                                 +- AQEShuffleRead coalesced\n                                    +- ShuffleQueryStage 0\n                                       +- Exchange hashpartitioning(d_month_seq#179, 200), ENSURE_REQUIREMENTS, [plan_id=423]\n                                          +- *(1) HashAggregate(keys=[d_month_seq#179], functions=[], output=[d_month_seq#179])\n                                             +- *(1) Project [d_month_seq#179]\n                                                +- *(1) Filter (((isnotnull(d_year#182) AND isnotnull(d_moy#184)) AND (d_year#182 = 2000)) AND (d_moy#184 = 2))\n                                                   +- *(1) ColumnarToRow\n                                                      +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#179,d_year#182,d_moy#184] Batched: true, DataFilters: [isnotnull(d_year#182), isnotnull(d_moy#184), (d_year#182 = 2000), (d_moy#184 = 2)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n                              +- == Initial Plan ==\n                                 HashAggregate(keys=[d_month_seq#179], functions=[], output=[d_month_seq#179])\n                                 +- Exchange hashpartitioning(d_month_seq#179, 200), ENSURE_REQUIREMENTS, [plan_id=146]\n                                    +- HashAggregate(keys=[d_month_seq#179], functions=[], output=[d_month_seq#179])\n                                       +- Project [d_month_seq#179]\n                                          +- Filter (((isnotnull(d_year#182) AND isnotnull(d_moy#184)) AND (d_year#182 = 2000)) AND (d_moy#184 = 2))\n                                             +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#179,d_year#182,d_moy#184] Batched: true, DataFilters: [isnotnull(d_year#182), isnotnull(d_moy#184), (d_year#182 = 2000), (d_moy#184 = 2)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n   :                 +- *(1) ColumnarToRow\n   :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#59,d_month_seq#62] Batched: true, DataFilters: [isnotnull(d_month_seq#62), isnotnull(d_date_sk#59)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_month_seq:int>\n   +- BroadcastQueryStage 5\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=886]\n         +- *(6) Project [i_item_sk#87]\n            +- *(6) BroadcastHashJoin [i_category#99], [i_category#216], Inner, BuildRight, (cast(i_current_price#92 as decimal(14,7)) > (1.2 * avg(i_current_price)#175)), false\n               :- *(6) Filter ((isnotnull(i_current_price#92) AND isnotnull(i_category#99)) AND isnotnull(i_item_sk#87))\n               :  +- *(6) ColumnarToRow\n               :     +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#87,i_current_price#92,i_category#99] Batched: true, DataFilters: [isnotnull(i_current_price#92), isnotnull(i_category#99), isnotnull(i_item_sk#87)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_current_price), IsNotNull(i_category), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_category:string>\n               +- BroadcastQueryStage 4\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, string, true]),false), [plan_id=721]\n                     +- *(5) Filter isnotnull(avg(i_current_price)#175)\n                        +- *(5) HashAggregate(keys=[i_category#216], functions=[avg(UnscaledValue(i_current_price#209))], output=[avg(i_current_price)#175, i_category#216])\n                           +- AQEShuffleRead coalesced\n                              +- ShuffleQueryStage 1\n                                 +- Exchange hashpartitioning(i_category#216, 200), ENSURE_REQUIREMENTS, [plan_id=344]\n                                    +- *(2) HashAggregate(keys=[i_category#216], functions=[partial_avg(UnscaledValue(i_current_price#209))], output=[i_category#216, sum#233, count#234L])\n                                       +- *(2) Filter isnotnull(i_category#216)\n                                          +- *(2) ColumnarToRow\n                                             +- FileScan parquet spark_catalog.tpcds_100.item[i_current_price#209,i_category#216] Batched: true, DataFilters: [isnotnull(i_category#216)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_category)], ReadSchema: struct<i_current_price:decimal(7,2),i_category:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 5256527020,
        "inputRowCount" : 262689166
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 4,
        "FinishedTasksTotalTimeInMs" : 5988.0,
        "FinishedTasksDistributionInMs" : [ 1315.0, 1390.0, 1508.0, 1775.0, 1775.0 ]
      },
      "QueryStageOptimizationId" : 8,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 11 ],
      "Objectives" : {
        "DurationInMs" : 11349,
        "TotalTasksDurationInMs" : 92790,
        "IOBytes" : {
          "Total" : 13522108,
          "Details" : {
            "IR" : 12256782,
            "IW" : 0,
            "SR" : 0,
            "SW" : 1265326
          }
        }
      }
    },
    "4" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 637017624,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 26000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 26000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_address_sk#5, ca_state#13] "
          },
          "1" : {
            "sign" : 1993750296,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 246000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 246000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(ca_address_sk#5) "
          },
          "2" : {
            "sign" : 899459505,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 246000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 246000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#5, ca_address_id#6, ca_street_number#7, ca_street_name#8, ca_street_type#9, ca_suite_number#10, ca_city#11, ca_county#12, ca_state#13, ca_zip#14, ca_country#15, ca_gmt_offset#16, ca_location_type#17], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ca_address_sk#5, ca_state#13]\n+- Filter isnotnull(ca_address_sk#5)\n   +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#5,ca_address_id#6,ca_street_number#7,ca_street_name#8,ca_street_type#9,ca_suite_number#10,ca_city#11,ca_county#12,ca_state#13,ca_zip#14,ca_country#15,ca_gmt_offset#16,ca_location_type#17] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -2063542732,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 26000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [ca_address_sk#5, ca_state#13] Condition : isnotnull(ca_address_sk#5) "
          },
          "1" : {
            "sign" : -261117125,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 26000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer_address Output [2]: [ca_address_sk#5, ca_state#13] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_address] PushedFilters: [IsNotNull(ca_address_sk)] ReadSchema: struct<ca_address_sk:int,ca_state:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer_address",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull(ca_address_sk#5)\n+- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#5,ca_state#13] Batched: true, DataFilters: [isnotnull(ca_address_sk#5)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 26000000,
        "inputRowCount" : 1000000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 14533,
        "TotalTasksDurationInMs" : 20505,
        "IOBytes" : {
          "Total" : 13850224,
          "Details" : {
            "IR" : 4832171,
            "IW" : 0,
            "SR" : 0,
            "SW" : 9018053
          }
        }
      }
    },
    "11" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -15322843,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17469576000000,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 17469576000000,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ca_state#13], [ca_state#13 AS state#169, count(1) AS cnt#170L] "
          },
          "1" : {
            "sign" : -709831645,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 13587448000000,
                "rowCount" : 485266000000
              },
              "compileTime" : {
                "sizeInBytes" : 13587448000000,
                "rowCount" : 485266000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#13] "
          },
          "2" : {
            "sign" : -2074563633,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17469576000000,
                "rowCount" : 485266000000
              },
              "compileTime" : {
                "sizeInBytes" : 17469576000000,
                "rowCount" : 485266000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_customer_sk#18 = ss_customer_sk#38) "
          },
          "3" : {
            "sign" : -1584334,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 63513880,
                "rowCount" : 2000000
              },
              "compileTime" : {
                "sizeInBytes" : 52264160,
                "rowCount" : 2010160
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_state#13, c_customer_sk#18], ShuffleQueryStage 7 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [ca_state#13], [ca_state#13 AS state#169, count(1) AS cnt#170L]\n+- Project [ca_state#13]\n   +- Join Inner, (c_customer_sk#18 = ss_customer_sk#38)\n      :- LogicalQueryStage Project [ss_customer_sk#38], ShuffleQueryStage 6\n      +- LogicalQueryStage Project [ca_state#13, c_customer_sk#18], ShuffleQueryStage 7\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 1499991353,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 63513880,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [ca_state#13, c_customer_sk#18] Arguments: 7 "
          },
          "1" : {
            "sign" : 1197909611,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 13587448000000,
            "rowCount" : 485266000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [ca_state#13] Input [3]: [ss_customer_sk#38, ca_state#13, c_customer_sk#18] "
          },
          "0" : {
            "sign" : 1900438350,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 17469576000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [1]: [ca_state#13] Keys [1]: [ca_state#13] Functions [1]: [partial_count(1)] Aggregate Attributes [1]: [count#229L] Results [2]: [ca_state#13, count#230L] "
          },
          "2" : {
            "sign" : -693950329,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 17469576000000,
            "rowCount" : 485266000000,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_customer_sk#38] Right keys [1]: [c_customer_sk#18] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : -541988001,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 16777216,
            "rowCount" : 242633,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [ss_customer_sk#38] Arguments: 8 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[ca_state#13], functions=[partial_count(1)], output=[ca_state#13, count#230L])\n+- Project [ca_state#13]\n   +- BroadcastHashJoin [ss_customer_sk#38], [c_customer_sk#18], Inner, BuildLeft, false\n      :- BroadcastQueryStage 8\n      :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1379]\n      :     +- AQEShuffleRead local\n      :        +- ShuffleQueryStage 6\n      :           +- Exchange hashpartitioning(ss_customer_sk#38, 200), ENSURE_REQUIREMENTS, [plan_id=1142]\n      :              +- *(7) Project [ss_customer_sk#38]\n      :                 +- *(7) BroadcastHashJoin [ss_item_sk#37], [i_item_sk#87], Inner, BuildRight, false\n      :                    :- *(7) Project [ss_item_sk#37, ss_customer_sk#38]\n      :                    :  +- *(7) BroadcastHashJoin [ss_sold_date_sk#58], [d_date_sk#59], Inner, BuildRight, false\n      :                    :     :- *(7) Filter (isnotnull(ss_customer_sk#38) AND isnotnull(ss_item_sk#37))\n      :                    :     :  +- *(7) ColumnarToRow\n      :                    :     :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#37,ss_customer_sk#38,ss_sold_date_sk#58] Batched: true, DataFilters: [isnotnull(ss_customer_sk#38), isnotnull(ss_item_sk#37)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#58), dynamicpruningexpression(ss_sold_date_sk#58 IN dynamicpruning#228)], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk)], ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int>\n      :                    :     :           +- SubqueryBroadcast dynamicpruning#228, 0, [d_date_sk#59], [id=#1105]\n      :                    :     :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                   +- == Final Plan ==\n                                                      BroadcastQueryStage 1\n                                                      +- ReusedExchange [d_date_sk#59], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=323]\n                                                   +- == Initial Plan ==\n                                                      BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1102]\n                                                      +- Project [d_date_sk#59]\n                                                         +- Filter ((isnotnull(d_month_seq#62) AND (d_month_seq#62 = Subquery subquery#171, [id=#131])) AND isnotnull(d_date_sk#59))\n                                                            :  +- Subquery subquery#171, [id=#131]\n                                                            :     +- AdaptiveSparkPlan isFinalPlan=false\n                                                            :        +- HashAggregate(keys=[d_month_seq#179], functions=[], output=[d_month_seq#179])\n                                                            :           +- Exchange hashpartitioning(d_month_seq#179, 200), ENSURE_REQUIREMENTS, [plan_id=129]\n                                                            :              +- HashAggregate(keys=[d_month_seq#179], functions=[], output=[d_month_seq#179])\n                                                            :                 +- Project [d_month_seq#179]\n                                                            :                    +- Filter (((isnotnull(d_year#182) AND isnotnull(d_moy#184)) AND (d_year#182 = 2000)) AND (d_moy#184 = 2))\n                                                            :                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#179,d_year#182,d_moy#184] Batched: true, DataFilters: [isnotnull(d_year#182), isnotnull(d_moy#184), (d_year#182 = 2000), (d_moy#184 = 2)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n                                                            +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#59,d_month_seq#62] Batched: true, DataFilters: [isnotnull(d_month_seq#62), isnotnull(d_date_sk#59)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_month_seq:int>\n      :                    :     +- BroadcastQueryStage 0\n      :                    :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=323]\n      :                    :           +- *(1) Project [d_date_sk#59]\n      :                    :              +- *(1) Filter ((isnotnull(d_month_seq#62) AND (d_month_seq#62 = Subquery subquery#171, [id=#148])) AND isnotnull(d_date_sk#59))\n      :                    :                 :  +- Subquery subquery#171, [id=#148]\n      :                    :                 :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                      +- == Final Plan ==\n                                                         *(2) HashAggregate(keys=[d_month_seq#179], functions=[], output=[d_month_seq#179])\n                                                         +- AQEShuffleRead coalesced\n                                                            +- ShuffleQueryStage 0\n                                                               +- Exchange hashpartitioning(d_month_seq#179, 200), ENSURE_REQUIREMENTS, [plan_id=423]\n                                                                  +- *(1) HashAggregate(keys=[d_month_seq#179], functions=[], output=[d_month_seq#179])\n                                                                     +- *(1) Project [d_month_seq#179]\n                                                                        +- *(1) Filter (((isnotnull(d_year#182) AND isnotnull(d_moy#184)) AND (d_year#182 = 2000)) AND (d_moy#184 = 2))\n                                                                           +- *(1) ColumnarToRow\n                                                                              +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#179,d_year#182,d_moy#184] Batched: true, DataFilters: [isnotnull(d_year#182), isnotnull(d_moy#184), (d_year#182 = 2000), (d_moy#184 = 2)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n                                                      +- == Initial Plan ==\n                                                         HashAggregate(keys=[d_month_seq#179], functions=[], output=[d_month_seq#179])\n                                                         +- Exchange hashpartitioning(d_month_seq#179, 200), ENSURE_REQUIREMENTS, [plan_id=146]\n                                                            +- HashAggregate(keys=[d_month_seq#179], functions=[], output=[d_month_seq#179])\n                                                               +- Project [d_month_seq#179]\n                                                                  +- Filter (((isnotnull(d_year#182) AND isnotnull(d_moy#184)) AND (d_year#182 = 2000)) AND (d_moy#184 = 2))\n                                                                     +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#179,d_year#182,d_moy#184] Batched: true, DataFilters: [isnotnull(d_year#182), isnotnull(d_moy#184), (d_year#182 = 2000), (d_moy#184 = 2)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n      :                    :                 +- *(1) ColumnarToRow\n      :                    :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#59,d_month_seq#62] Batched: true, DataFilters: [isnotnull(d_month_seq#62), isnotnull(d_date_sk#59)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_month_seq:int>\n      :                    +- BroadcastQueryStage 5\n      :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=886]\n      :                          +- *(6) Project [i_item_sk#87]\n      :                             +- *(6) BroadcastHashJoin [i_category#99], [i_category#216], Inner, BuildRight, (cast(i_current_price#92 as decimal(14,7)) > (1.2 * avg(i_current_price)#175)), false\n      :                                :- *(6) Filter ((isnotnull(i_current_price#92) AND isnotnull(i_category#99)) AND isnotnull(i_item_sk#87))\n      :                                :  +- *(6) ColumnarToRow\n      :                                :     +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#87,i_current_price#92,i_category#99] Batched: true, DataFilters: [isnotnull(i_current_price#92), isnotnull(i_category#99), isnotnull(i_item_sk#87)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_current_price), IsNotNull(i_category), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_category:string>\n      :                                +- BroadcastQueryStage 4\n      :                                   +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, string, true]),false), [plan_id=721]\n      :                                      +- *(5) Filter isnotnull(avg(i_current_price)#175)\n      :                                         +- *(5) HashAggregate(keys=[i_category#216], functions=[avg(UnscaledValue(i_current_price#209))], output=[avg(i_current_price)#175, i_category#216])\n      :                                            +- AQEShuffleRead coalesced\n      :                                               +- ShuffleQueryStage 1\n      :                                                  +- Exchange hashpartitioning(i_category#216, 200), ENSURE_REQUIREMENTS, [plan_id=344]\n      :                                                     +- *(2) HashAggregate(keys=[i_category#216], functions=[partial_avg(UnscaledValue(i_current_price#209))], output=[i_category#216, sum#233, count#234L])\n      :                                                        +- *(2) Filter isnotnull(i_category#216)\n      :                                                           +- *(2) ColumnarToRow\n      :                                                              +- FileScan parquet spark_catalog.tpcds_100.item[i_current_price#209,i_category#216] Batched: true, DataFilters: [isnotnull(i_category#216)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_category)], ReadSchema: struct<i_current_price:decimal(7,2),i_category:string>\n      +- ShuffleQueryStage 7\n         +- Exchange hashpartitioning(c_customer_sk#18, 200), ENSURE_REQUIREMENTS, [plan_id=1271]\n            +- *(10) Project [ca_state#13, c_customer_sk#18]\n               +- *(10) SortMergeJoin [ca_address_sk#5], [c_current_addr_sk#22], Inner\n                  :- *(8) Sort [ca_address_sk#5 ASC NULLS FIRST], false, 0\n                  :  +- AQEShuffleRead coalesced\n                  :     +- ShuffleQueryStage 2\n                  :        +- Exchange hashpartitioning(ca_address_sk#5, 200), ENSURE_REQUIREMENTS, [plan_id=372]\n                  :           +- *(3) Filter isnotnull(ca_address_sk#5)\n                  :              +- *(3) ColumnarToRow\n                  :                 +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#5,ca_state#13] Batched: true, DataFilters: [isnotnull(ca_address_sk#5)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n                  +- *(9) Sort [c_current_addr_sk#22 ASC NULLS FIRST], false, 0\n                     +- AQEShuffleRead coalesced\n                        +- ShuffleQueryStage 3\n                           +- Exchange hashpartitioning(c_current_addr_sk#22, 200), ENSURE_REQUIREMENTS, [plan_id=389]\n                              +- *(4) Filter (isnotnull(c_current_addr_sk#22) AND isnotnull(c_customer_sk#18))\n                                 +- *(4) ColumnarToRow\n                                    +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#18,c_current_addr_sk#22] Batched: true, DataFilters: [isnotnull(c_current_addr_sk#22), isnotnull(c_customer_sk#18)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 80291096,
        "inputRowCount" : 2242633
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "5" : [ 101979, 101979, 92709, 101979, 92709, 101979, 92709, 92709, 101979, 101979, 101979, 92709, 101979, 101979, 92709, 101979, 101979, 101979, 92709, 101979, 92709, 101979, 101979, 101979, 101979, 101979, 92709, 101979, 101979, 92709, 92709, 101979, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 92709, 92709, 101979, 101979, 92709, 101979, 101979, 101979, 101979, 101979, 101979, 92709, 101979, 101979, 101979, 92709, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 101979, 101979, 92709, 101979, 101979, 101979, 92709, 92709, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 92709, 101979, 101979, 92709, 101979, 101979, 92709, 92709, 101979, 92709, 92709, 101979, 101979, 92709, 92709, 101979, 101979, 101979, 92709, 92709, 101979, 92709, 101979, 92709, 101979, 92709, 92709, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 92709, 101979, 101979, 101979, 92709, 92709, 92709, 101979, 101979, 92709, 101979, 92709, 92709, 92709, 101979, 101979, 101979, 101979, 101979, 101979, 92709, 101979, 101979, 101979, 101979, 101979, 101979, 92709, 101979, 101979, 92709, 92709, 92709, 101979, 92709, 101979, 101979, 92709, 101979, 101979, 92709, 101979, 101979, 101979, 101979, 101979, 92709, 101979, 92709, 101979, 92709, 92709, 101979, 101979, 92709, 101979, 101979, 101979, 101979, 92709, 101979, 101979, 101979, 92709, 92709, 101979, 101979, 101979, 92709, 101979, 92709 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 11,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 20 ],
      "Objectives" : {
        "DurationInMs" : 998,
        "TotalTasksDurationInMs" : 990,
        "IOBytes" : {
          "Total" : 18585043,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 18581696,
            "SW" : 3347
          }
        }
      }
    },
    "9" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 81199702,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 52264160,
                "rowCount" : 2010160
              },
              "compileTime" : {
                "sizeInBytes" : 52264160,
                "rowCount" : 2010160
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#13, c_customer_sk#18] "
          },
          "1" : {
            "sign" : -997142341,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 68345440,
                "rowCount" : 2010160
              },
              "compileTime" : {
                "sizeInBytes" : 68345440,
                "rowCount" : 2010160
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ca_address_sk#5 = c_current_addr_sk#22) "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ca_state#13, c_customer_sk#18]\n+- Join Inner, (ca_address_sk#5 = c_current_addr_sk#22)\n   :- Project [ca_address_sk#5, ca_state#13]\n   :  +- Filter isnotnull(ca_address_sk#5)\n   :     +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#5,ca_address_id#6,ca_street_number#7,ca_street_name#8,ca_street_type#9,ca_suite_number#10,ca_city#11,ca_county#12,ca_state#13,ca_zip#14,ca_country#15,ca_gmt_offset#16,ca_location_type#17] parquet\n   +- Project [c_customer_sk#18, c_current_addr_sk#22]\n      +- Filter (isnotnull(c_current_addr_sk#22) AND isnotnull(c_customer_sk#18))\n         +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#18,c_customer_id#19,c_current_cdemo_sk#20,c_current_hdemo_sk#21,c_current_addr_sk#22,c_first_shipto_date_sk#23,c_first_sales_date_sk#24,c_salutation#25,c_first_name#26,c_last_name#27,c_preferred_cust_flag#28,c_birth_day#29,c_birth_month#30,c_birth_year#31,c_birth_country#32,c_login#33,c_email_address#34,c_last_review_date#35] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 184113748,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [c_customer_sk#18, c_current_addr_sk#22] Arguments: [c_current_addr_sk#22 ASC NULLS FIRST], false, 0 "
          },
          "5" : {
            "sign" : -1042695591,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 48000000,
            "rowCount" : 2000000,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [c_customer_sk#18, c_current_addr_sk#22] Arguments: 3 "
          },
          "1" : {
            "sign" : -996549226,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 68345440,
            "rowCount" : 2010160,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [ca_address_sk#5] Right keys [1]: [c_current_addr_sk#22] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 1345682463,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 52264160,
            "rowCount" : 2010160,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [ca_state#13, c_customer_sk#18] Input [4]: [ca_address_sk#5, ca_state#13, c_customer_sk#18, c_current_addr_sk#22] "
          },
          "2" : {
            "sign" : 1362724500,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [ca_address_sk#5, ca_state#13] Arguments: [ca_address_sk#5 ASC NULLS FIRST], false, 0 "
          },
          "3" : {
            "sign" : 1128208374,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 31757008,
            "rowCount" : 1000000,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [ca_address_sk#5, ca_state#13] Arguments: 2 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "SortMergeJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ca_state#13, c_customer_sk#18]\n+- SortMergeJoin [ca_address_sk#5], [c_current_addr_sk#22], Inner\n   :- Sort [ca_address_sk#5 ASC NULLS FIRST], false, 0\n   :  +- ShuffleQueryStage 2\n   :     +- Exchange hashpartitioning(ca_address_sk#5, 200), ENSURE_REQUIREMENTS, [plan_id=372]\n   :        +- *(3) Filter isnotnull(ca_address_sk#5)\n   :           +- *(3) ColumnarToRow\n   :              +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_address_sk#5,ca_state#13] Batched: true, DataFilters: [isnotnull(ca_address_sk#5)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_address_sk)], ReadSchema: struct<ca_address_sk:int,ca_state:string>\n   +- Sort [c_current_addr_sk#22 ASC NULLS FIRST], false, 0\n      +- ShuffleQueryStage 3\n         +- Exchange hashpartitioning(c_current_addr_sk#22, 200), ENSURE_REQUIREMENTS, [plan_id=389]\n            +- *(4) Filter (isnotnull(c_current_addr_sk#22) AND isnotnull(c_customer_sk#18))\n               +- *(4) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#18,c_current_addr_sk#22] Batched: true, DataFilters: [isnotnull(c_current_addr_sk#22), isnotnull(c_customer_sk#18)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 79757008,
        "inputRowCount" : 3000000
      },
      "InitialPartitionNum" : 200,
      "PD" : {

        "3" : [ 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 112177, 112177, 101979, 101979, 112177, 112177, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177, 101979, 101979, 112177, 101979, 112177, 112177, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 101979, 112177 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 6,
        "FinishedTasksNum" : 9,
        "FinishedTasksTotalTimeInMs" : 32314.0,
        "FinishedTasksDistributionInMs" : [ 2012.0, 2174.0, 3501.0, 5136.0, 5249.0 ]
      },
      "QueryStageOptimizationId" : 9,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 14 ],
      "Objectives" : {
        "DurationInMs" : 2831,
        "TotalTasksDurationInMs" : 2822,
        "IOBytes" : {
          "Total" : 47588100,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 29006404,
            "SW" : 18581696
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1975185675,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 32000000,
                "rowCount" : 2000000
              },
              "compileTime" : {
                "sizeInBytes" : 32000000,
                "rowCount" : 2000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#18, c_current_addr_sk#22] "
          },
          "1" : {
            "sign" : -1415894964,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              },
              "compileTime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_current_addr_sk#22) AND isnotnull(c_customer_sk#18)) "
          },
          "2" : {
            "sign" : 845903676,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              },
              "compileTime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#18, c_customer_id#19, c_current_cdemo_sk#20, c_current_hdemo_sk#21, c_current_addr_sk#22, c_first_shipto_date_sk#23, c_first_sales_date_sk#24, c_salutation#25, c_first_name#26, c_last_name#27, c_preferred_cust_flag#28, c_birth_day#29, c_birth_month#30, c_birth_year#31, c_birth_country#32, c_login#33, c_email_address#34, c_last_review_date#35], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [c_customer_sk#18, c_current_addr_sk#22]\n+- Filter (isnotnull(c_current_addr_sk#22) AND isnotnull(c_customer_sk#18))\n   +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#18,c_customer_id#19,c_current_cdemo_sk#20,c_current_hdemo_sk#21,c_current_addr_sk#22,c_first_shipto_date_sk#23,c_first_sales_date_sk#24,c_salutation#25,c_first_name#26,c_last_name#27,c_preferred_cust_flag#28,c_birth_day#29,c_birth_month#30,c_birth_year#31,c_birth_country#32,c_login#33,c_email_address#34,c_last_review_date#35] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1102762053,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 32000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [c_customer_sk#18, c_current_addr_sk#22] Condition : (isnotnull(c_current_addr_sk#22) AND isnotnull(c_customer_sk#18)) "
          },
          "1" : {
            "sign" : 908110645,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 32000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer Output [2]: [c_customer_sk#18, c_current_addr_sk#22] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer] PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_customer_sk)] ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(c_current_addr_sk#22) AND isnotnull(c_customer_sk#18))\n+- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#18,c_current_addr_sk#22] Batched: true, DataFilters: [isnotnull(c_current_addr_sk#22), isnotnull(c_customer_sk#18)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_customer_sk)], ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 32000000,
        "inputRowCount" : 2000000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 4 ],
      "Objectives" : {
        "DurationInMs" : 2309,
        "TotalTasksDurationInMs" : 9131,
        "IOBytes" : {
          "Total" : 36135971,
          "Details" : {
            "IR" : 16147620,
            "IW" : 0,
            "SR" : 0,
            "SW" : 19988351
          }
        }
      }
    },
    "10" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -215503813,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3882128,
                "rowCount" : 242633
              },
              "compileTime" : {
                "sizeInBytes" : 3447095052,
                "rowCount" : 287257921
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_customer_sk#38], ShuffleQueryStage 6 "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Project [ss_customer_sk#38], ShuffleQueryStage 6\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 934684565,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 3882128,
            "rowCount" : 242633,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [ss_customer_sk#38] Arguments: 6 "
          }
        },
        "links" : [ ],
        "rawPlan" : "ShuffleQueryStage 6\n+- Exchange hashpartitioning(ss_customer_sk#38, 200), ENSURE_REQUIREMENTS, [plan_id=1142]\n   +- *(7) Project [ss_customer_sk#38]\n      +- *(7) BroadcastHashJoin [ss_item_sk#37], [i_item_sk#87], Inner, BuildRight, false\n         :- *(7) Project [ss_item_sk#37, ss_customer_sk#38]\n         :  +- *(7) BroadcastHashJoin [ss_sold_date_sk#58], [d_date_sk#59], Inner, BuildRight, false\n         :     :- *(7) Filter (isnotnull(ss_customer_sk#38) AND isnotnull(ss_item_sk#37))\n         :     :  +- *(7) ColumnarToRow\n         :     :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#37,ss_customer_sk#38,ss_sold_date_sk#58] Batched: true, DataFilters: [isnotnull(ss_customer_sk#38), isnotnull(ss_item_sk#37)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#58), dynamicpruningexpression(ss_sold_date_sk#58 IN dynamicpruning#228)], PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk)], ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int>\n         :     :           +- SubqueryBroadcast dynamicpruning#228, 0, [d_date_sk#59], [id=#1105]\n         :     :              +- AdaptiveSparkPlan isFinalPlan=true\n                                 +- == Final Plan ==\n                                    BroadcastQueryStage 1\n                                    +- ReusedExchange [d_date_sk#59], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=323]\n                                 +- == Initial Plan ==\n                                    BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1102]\n                                    +- Project [d_date_sk#59]\n                                       +- Filter ((isnotnull(d_month_seq#62) AND (d_month_seq#62 = Subquery subquery#171, [id=#131])) AND isnotnull(d_date_sk#59))\n                                          :  +- Subquery subquery#171, [id=#131]\n                                          :     +- AdaptiveSparkPlan isFinalPlan=false\n                                          :        +- HashAggregate(keys=[d_month_seq#179], functions=[], output=[d_month_seq#179])\n                                          :           +- Exchange hashpartitioning(d_month_seq#179, 200), ENSURE_REQUIREMENTS, [plan_id=129]\n                                          :              +- HashAggregate(keys=[d_month_seq#179], functions=[], output=[d_month_seq#179])\n                                          :                 +- Project [d_month_seq#179]\n                                          :                    +- Filter (((isnotnull(d_year#182) AND isnotnull(d_moy#184)) AND (d_year#182 = 2000)) AND (d_moy#184 = 2))\n                                          :                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#179,d_year#182,d_moy#184] Batched: true, DataFilters: [isnotnull(d_year#182), isnotnull(d_moy#184), (d_year#182 = 2000), (d_moy#184 = 2)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n                                          +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#59,d_month_seq#62] Batched: true, DataFilters: [isnotnull(d_month_seq#62), isnotnull(d_date_sk#59)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_month_seq:int>\n         :     +- BroadcastQueryStage 0\n         :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=323]\n         :           +- *(1) Project [d_date_sk#59]\n         :              +- *(1) Filter ((isnotnull(d_month_seq#62) AND (d_month_seq#62 = Subquery subquery#171, [id=#148])) AND isnotnull(d_date_sk#59))\n         :                 :  +- Subquery subquery#171, [id=#148]\n         :                 :     +- AdaptiveSparkPlan isFinalPlan=true\n                                    +- == Final Plan ==\n                                       *(2) HashAggregate(keys=[d_month_seq#179], functions=[], output=[d_month_seq#179])\n                                       +- AQEShuffleRead coalesced\n                                          +- ShuffleQueryStage 0\n                                             +- Exchange hashpartitioning(d_month_seq#179, 200), ENSURE_REQUIREMENTS, [plan_id=423]\n                                                +- *(1) HashAggregate(keys=[d_month_seq#179], functions=[], output=[d_month_seq#179])\n                                                   +- *(1) Project [d_month_seq#179]\n                                                      +- *(1) Filter (((isnotnull(d_year#182) AND isnotnull(d_moy#184)) AND (d_year#182 = 2000)) AND (d_moy#184 = 2))\n                                                         +- *(1) ColumnarToRow\n                                                            +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#179,d_year#182,d_moy#184] Batched: true, DataFilters: [isnotnull(d_year#182), isnotnull(d_moy#184), (d_year#182 = 2000), (d_moy#184 = 2)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n                                    +- == Initial Plan ==\n                                       HashAggregate(keys=[d_month_seq#179], functions=[], output=[d_month_seq#179])\n                                       +- Exchange hashpartitioning(d_month_seq#179, 200), ENSURE_REQUIREMENTS, [plan_id=146]\n                                          +- HashAggregate(keys=[d_month_seq#179], functions=[], output=[d_month_seq#179])\n                                             +- Project [d_month_seq#179]\n                                                +- Filter (((isnotnull(d_year#182) AND isnotnull(d_moy#184)) AND (d_year#182 = 2000)) AND (d_moy#184 = 2))\n                                                   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#179,d_year#182,d_moy#184] Batched: true, DataFilters: [isnotnull(d_year#182), isnotnull(d_moy#184), (d_year#182 = 2000), (d_moy#184 = 2)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n         :                 +- *(1) ColumnarToRow\n         :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#59,d_month_seq#62] Batched: true, DataFilters: [isnotnull(d_month_seq#62), isnotnull(d_date_sk#59)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_month_seq:int>\n         +- BroadcastQueryStage 5\n            +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=886]\n               +- *(6) Project [i_item_sk#87]\n                  +- *(6) BroadcastHashJoin [i_category#99], [i_category#216], Inner, BuildRight, (cast(i_current_price#92 as decimal(14,7)) > (1.2 * avg(i_current_price)#175)), false\n                     :- *(6) Filter ((isnotnull(i_current_price#92) AND isnotnull(i_category#99)) AND isnotnull(i_item_sk#87))\n                     :  +- *(6) ColumnarToRow\n                     :     +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#87,i_current_price#92,i_category#99] Batched: true, DataFilters: [isnotnull(i_current_price#92), isnotnull(i_category#99), isnotnull(i_item_sk#87)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_current_price), IsNotNull(i_category), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_category:string>\n                     +- BroadcastQueryStage 4\n                        +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, string, true]),false), [plan_id=721]\n                           +- *(5) Filter isnotnull(avg(i_current_price)#175)\n                              +- *(5) HashAggregate(keys=[i_category#216], functions=[avg(UnscaledValue(i_current_price#209))], output=[avg(i_current_price)#175, i_category#216])\n                                 +- AQEShuffleRead coalesced\n                                    +- ShuffleQueryStage 1\n                                       +- Exchange hashpartitioning(i_category#216, 200), ENSURE_REQUIREMENTS, [plan_id=344]\n                                          +- *(2) HashAggregate(keys=[i_category#216], functions=[partial_avg(UnscaledValue(i_current_price#209))], output=[i_category#216, sum#233, count#234L])\n                                             +- *(2) Filter isnotnull(i_category#216)\n                                                +- *(2) ColumnarToRow\n                                                   +- FileScan parquet spark_catalog.tpcds_100.item[i_current_price#209,i_category#216] Batched: true, DataFilters: [isnotnull(i_category#216)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_category)], ReadSchema: struct<i_current_price:decimal(7,2),i_category:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3882128,
        "inputRowCount" : 242633
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "4" : [ 6375, 6861, 6863, 6570, 6374, 6446, 6623, 6228, 6711, 6540, 6905, 6629, 6571, 6651, 6568, 7097, 6466, 6992, 6596, 6261, 6844, 6771, 6453, 6594, 6494, 6751, 6451, 6751, 6326, 6390, 6345, 6715, 6662, 6430, 7244, 6558, 6507, 6464, 6242, 6629, 6545, 6693, 6967, 6334, 6574, 6738, 6848, 6435, 6578, 6665, 6626, 6276, 6562, 6620, 6401, 6559, 6779, 6692, 6286, 6393, 6764, 6584, 6533, 6638, 6596, 6886, 6841, 6950, 6611, 6688, 6527, 6276, 6469, 6630, 6966, 7244, 6807, 6651, 6513, 6821, 6759, 6716, 6795, 6477, 6061, 6952, 6684, 6560, 6354, 6597, 6491, 6918, 6754, 6990, 6848, 6363, 6769, 6321, 6698, 6591, 6484, 6491, 6949, 6191, 7173, 6259, 6235, 6788, 6409, 6560, 6536, 6820, 6827, 6648, 6655, 6577, 6507, 6741, 6608, 6740, 6476, 6471, 6634, 6100, 6560, 6352, 6546, 6501, 6984, 6914, 6520, 7006, 6222, 7020, 6857, 6653, 6842, 6407, 6788, 6407, 6285, 6656, 6753, 6680, 6703, 6566, 6506, 6598, 6692, 6248, 7087, 6530, 6563, 6891, 6826, 6620, 6647, 6478, 6897, 6482, 6421, 6409, 7611, 6675, 6634, 6608, 6701, 6769, 6941, 6393, 6619, 6426, 6986, 6738, 6946, 6411, 6439, 6490, 6620, 6718, 6477, 6888, 6778, 6168, 6756, 6387, 6638, 6228, 6375, 6728, 6716, 6952, 6266, 6495, 6677, 6979, 6437, 7161, 6564, 6360 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 10,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 16 ],
      "Objectives" : {
        "DurationInMs" : 283,
        "TotalTasksDurationInMs" : 279,
        "IOBytes" : {
          "Total" : 1265326,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1265326,
            "SW" : 0
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -868190720,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 340,
                "rowCount" : 10
              },
              "compileTime" : {
                "sizeInBytes" : 340,
                "rowCount" : 10
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(avg(i_current_price)#175) "
          }
        },
        "links" : [ ],
        "rawPlan" : "Filter isnotnull(avg(i_current_price)#175)\n+- Aggregate [i_category#216], [cast((avg(UnscaledValue(i_current_price#209)) / 100.0) as decimal(11,6)) AS avg(i_current_price)#175, i_category#216]\n   +- Project [i_current_price#209, i_category#216]\n      +- Filter isnotnull(i_category#216)\n         +- Relation spark_catalog.tpcds_100.item[i_item_sk#204,i_item_id#205,i_rec_start_date#206,i_rec_end_date#207,i_item_desc#208,i_current_price#209,i_wholesale_cost#210,i_brand_id#211,i_brand#212,i_class_id#213,i_class#214,i_category_id#215,i_category#216,i_manufact_id#217,i_manufact#218,i_size#219,i_formulation#220,i_color#221,i_units#222,i_container#223,i_manager_id#224,i_product_name#225] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -633328685,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 340,
            "rowCount" : 10,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [avg(i_current_price)#175, i_category#216] Condition : isnotnull(avg(i_current_price)#175) "
          },
          "1" : {
            "sign" : 1419963772,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 408,
            "rowCount" : 10,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [3]: [i_category#216, sum#233, count#234L] Keys [1]: [i_category#216] Functions [1]: [avg(UnscaledValue(i_current_price#209))] Aggregate Attributes [1]: [avg(UnscaledValue(i_current_price#209))#174] Results [2]: [cast((avg(UnscaledValue(i_current_price#209))#174 / 100.0) as decimal(11,6)) AS avg(i_current_price)#175, i_category#216] "
          },
          "2" : {
            "sign" : -1508656492,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 340,
            "rowCount" : 10,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [i_category#216, sum#233, count#234L] Arguments: 1 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "ShuffleQueryStage",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull(avg(i_current_price)#175)\n+- HashAggregate(keys=[i_category#216], functions=[avg(UnscaledValue(i_current_price#209))], output=[avg(i_current_price)#175, i_category#216])\n   +- ShuffleQueryStage 1\n      +- Exchange hashpartitioning(i_category#216, 200), ENSURE_REQUIREMENTS, [plan_id=344]\n         +- *(2) HashAggregate(keys=[i_category#216], functions=[partial_avg(UnscaledValue(i_current_price#209))], output=[i_category#216, sum#233, count#234L])\n            +- *(2) Filter isnotnull(i_category#216)\n               +- *(2) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.item[i_current_price#209,i_category#216] Batched: true, DataFilters: [isnotnull(i_category#216)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_category)], ReadSchema: struct<i_current_price:decimal(7,2),i_category:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 408,
        "inputRowCount" : 10
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "0" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 2,
        "FinishedTasksNum" : 4,
        "FinishedTasksTotalTimeInMs" : 5988.0,
        "FinishedTasksDistributionInMs" : [ 1315.0, 1390.0, 1508.0, 1775.0, 1775.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 9 ],
      "Objectives" : {
        "DurationInMs" : 122,
        "TotalTasksDurationInMs" : 116,
        "IOBytes" : {
          "Total" : 779,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 779,
            "SW" : 0
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -419471892,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 16,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 24,
                "rowCount" : 2
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [d_month_seq#179], [d_month_seq#179], HashAggregate(keys=[d_month_seq#179], functions=[]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [d_month_seq#179], [d_month_seq#179], HashAggregate(keys=[d_month_seq#179], functions=[])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -480949434,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [1]: [d_month_seq#179] Keys [1]: [d_month_seq#179] Functions: [] Aggregate Attributes: [] Results [1]: [d_month_seq#179] "
          },
          "1" : {
            "sign" : -1766221083,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 24,
            "rowCount" : 2,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [d_month_seq#179] Arguments: 0 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[d_month_seq#179], functions=[], output=[d_month_seq#179])\n+- ShuffleQueryStage 0\n   +- Exchange hashpartitioning(d_month_seq#179, 200), ENSURE_REQUIREMENTS, [plan_id=423]\n      +- *(1) HashAggregate(keys=[d_month_seq#179], functions=[], output=[d_month_seq#179])\n         +- *(1) Project [d_month_seq#179]\n            +- *(1) Filter (((isnotnull(d_year#182) AND isnotnull(d_moy#184)) AND (d_year#182 = 2000)) AND (d_moy#184 = 2))\n               +- *(1) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#179,d_year#182,d_moy#184] Batched: true, DataFilters: [isnotnull(d_year#182), isnotnull(d_moy#184), (d_year#182 = 2000), (d_moy#184 = 2)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 16,
        "inputRowCount" : 1
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "1" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 4,
        "FinishedTasksNum" : 22,
        "FinishedTasksTotalTimeInMs" : 19263.0,
        "FinishedTasksDistributionInMs" : [ 34.0, 77.0, 1315.0, 1508.0, 1922.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 6 ],
      "Objectives" : {
        "DurationInMs" : 336,
        "TotalTasksDurationInMs" : 325,
        "IOBytes" : {
          "Total" : 59,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 59,
            "SW" : 0
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 2069768763,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 24,
                "rowCount" : 2
              },
              "compileTime" : {
                "sizeInBytes" : 24,
                "rowCount" : 2
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [d_month_seq#179], [d_month_seq#179] "
          },
          "1" : {
            "sign" : -399673920,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 576,
                "rowCount" : 48
              },
              "compileTime" : {
                "sizeInBytes" : 576,
                "rowCount" : 48
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_month_seq#179] "
          },
          "2" : {
            "sign" : 1621582120,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11808,
                "rowCount" : 48
              },
              "compileTime" : {
                "sizeInBytes" : 11808,
                "rowCount" : 48
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_year#182) AND isnotnull(d_moy#184)) AND ((d_year#182 = 2000) AND (d_moy#184 = 2))) "
          },
          "3" : {
            "sign" : 955274910,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#176, d_date_id#177, d_date#178, d_month_seq#179, d_week_seq#180, d_quarter_seq#181, d_year#182, d_dow#183, d_moy#184, d_dom#185, d_qoy#186, d_fy_year#187, d_fy_quarter_seq#188, d_fy_week_seq#189, d_day_name#190, d_quarter_name#191, d_holiday#192, d_weekend#193, d_following_holiday#194, d_first_dom#195, d_last_dom#196, d_same_day_ly#197, d_same_day_lq#198, d_current_day#199, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "LogicalRelation",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [d_month_seq#179], [d_month_seq#179]\n+- Project [d_month_seq#179]\n   +- Filter ((isnotnull(d_year#182) AND isnotnull(d_moy#184)) AND ((d_year#182 = 2000) AND (d_moy#184 = 2)))\n      +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#176,d_date_id#177,d_date#178,d_month_seq#179,d_week_seq#180,d_quarter_seq#181,d_year#182,d_dow#183,d_moy#184,d_dom#185,d_qoy#186,d_fy_year#187,d_fy_quarter_seq#188,d_fy_week_seq#189,d_day_name#190,d_quarter_name#191,d_holiday#192,d_weekend#193,d_following_holiday#194,d_first_dom#195,d_last_dom#196,d_same_day_ly#197,d_same_day_lq#198,d_current_day#199,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 53185501,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 24,
            "rowCount" : 2,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [1]: [d_month_seq#179] Keys [1]: [d_month_seq#179] Functions: [] Aggregate Attributes: [] Results [1]: [d_month_seq#179] "
          },
          "1" : {
            "sign" : -1839185934,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 576,
            "rowCount" : 48,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [d_month_seq#179] Input [3]: [d_month_seq#179, d_year#182, d_moy#184] "
          },
          "2" : {
            "sign" : -241231678,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 576,
            "rowCount" : 48,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [d_month_seq#179, d_year#182, d_moy#184] Condition : (((isnotnull(d_year#182) AND isnotnull(d_moy#184)) AND (d_year#182 = 2000)) AND (d_moy#184 = 2)) "
          },
          "3" : {
            "sign" : 1080599748,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 576,
            "rowCount" : 48,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [3]: [d_month_seq#179, d_year#182, d_moy#184] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2)] ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[d_month_seq#179], functions=[], output=[d_month_seq#179])\n+- Project [d_month_seq#179]\n   +- Filter (((isnotnull(d_year#182) AND isnotnull(d_moy#184)) AND (d_year#182 = 2000)) AND (d_moy#184 = 2))\n      +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#179,d_year#182,d_moy#184] Batched: true, DataFilters: [isnotnull(d_year#182), isnotnull(d_moy#184), (d_year#182 = 2000), (d_moy#184 = 2)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 576,
        "inputRowCount" : 48
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 2 ],
      "Objectives" : {
        "DurationInMs" : 2063,
        "TotalTasksDurationInMs" : 2011,
        "IOBytes" : {
          "Total" : 25549,
          "Details" : {
            "IR" : 25490,
            "IW" : 0,
            "SR" : 0,
            "SW" : 59
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1405440590,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 876588,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 876588,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#59] "
          },
          "1" : {
            "sign" : -2068509562,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_month_seq#62) AND (d_month_seq#62 = scalar-subquery#171 [])) AND isnotnull(d_date_sk#59)) "
          },
          "2" : {
            "sign" : -732351171,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#59, d_date_id#60, d_date#61, d_month_seq#62, d_week_seq#63, d_quarter_seq#64, d_year#65, d_dow#66, d_moy#67, d_dom#68, d_qoy#69, d_fy_year#70, d_fy_quarter_seq#71, d_fy_week_seq#72, d_day_name#73, d_quarter_name#74, d_holiday#75, d_weekend#76, d_following_holiday#77, d_first_dom#78, d_last_dom#79, d_same_day_ly#80, d_same_day_lq#81, d_current_day#82, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#59]\n+- Filter ((isnotnull(d_month_seq#62) AND (d_month_seq#62 = scalar-subquery#171 [])) AND isnotnull(d_date_sk#59))\n   :  +- Aggregate [d_month_seq#179], [d_month_seq#179]\n   :     +- Project [d_month_seq#179]\n   :        +- Filter ((isnotnull(d_year#182) AND isnotnull(d_moy#184)) AND ((d_year#182 = 2000) AND (d_moy#184 = 2)))\n   :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#176,d_date_id#177,d_date#178,d_month_seq#179,d_week_seq#180,d_quarter_seq#181,d_year#182,d_dow#183,d_moy#184,d_dom#185,d_qoy#186,d_fy_year#187,d_fy_quarter_seq#188,d_fy_week_seq#189,d_day_name#190,d_quarter_name#191,d_holiday#192,d_weekend#193,d_following_holiday#194,d_first_dom#195,d_last_dom#196,d_same_day_ly#197,d_same_day_lq#198,d_current_day#199,... 4 more fields] parquet\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#59,d_date_id#60,d_date#61,d_month_seq#62,d_week_seq#63,d_quarter_seq#64,d_year#65,d_dow#66,d_moy#67,d_dom#68,d_qoy#69,d_fy_year#70,d_fy_quarter_seq#71,d_fy_week_seq#72,d_day_name#73,d_quarter_name#74,d_holiday#75,d_weekend#76,d_following_holiday#77,d_first_dom#78,d_last_dom#79,d_same_day_ly#80,d_same_day_lq#81,d_current_day#82,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 222696532,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 876588,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [d_date_sk#59] Input [2]: [d_date_sk#59, d_month_seq#62] "
          },
          "1" : {
            "sign" : 1879718090,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 876588,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [d_date_sk#59, d_month_seq#62] Condition : ((isnotnull(d_month_seq#62) AND (d_month_seq#62 = Subquery subquery#171, [id=#148])) AND isnotnull(d_date_sk#59)) "
          },
          "2" : {
            "sign" : 589579161,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 876588,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [2]: [d_date_sk#59, d_month_seq#62] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_month_seq:int> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#59]\n+- Filter ((isnotnull(d_month_seq#62) AND (d_month_seq#62 = Subquery subquery#171, [id=#148])) AND isnotnull(d_date_sk#59))\n   :  +- Subquery subquery#171, [id=#148]\n   :     +- AdaptiveSparkPlan isFinalPlan=false\n   :        +- HashAggregate(keys=[d_month_seq#179], functions=[], output=[d_month_seq#179])\n   :           +- Exchange hashpartitioning(d_month_seq#179, 200), ENSURE_REQUIREMENTS, [plan_id=146]\n   :              +- HashAggregate(keys=[d_month_seq#179], functions=[], output=[d_month_seq#179])\n   :                 +- Project [d_month_seq#179]\n   :                    +- Filter (((isnotnull(d_year#182) AND isnotnull(d_moy#184)) AND (d_year#182 = 2000)) AND (d_moy#184 = 2))\n   :                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_month_seq#179,d_year#182,d_moy#184] Batched: true, DataFilters: [isnotnull(d_year#182), isnotnull(d_moy#184), (d_year#182 = 2000), (d_moy#184 = 2)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2)], ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>\n   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#59,d_month_seq#62] Batched: true, DataFilters: [isnotnull(d_month_seq#62), isnotnull(d_date_sk#59)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_month_seq:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 876588,
        "inputRowCount" : 73049
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 7 ],
      "Objectives" : {
        "DurationInMs" : 3952,
        "TotalTasksDurationInMs" : 3948,
        "IOBytes" : {
          "Total" : 321044,
          "Details" : {
            "IR" : 321044,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 1492995156,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#87, i_item_id#88, i_rec_start_date#89, i_rec_end_date#90, i_item_desc#91, i_current_price#92, i_wholesale_cost#93, i_brand_id#94, i_brand#95, i_class_id#96, i_class#97, i_category_id#98, i_category#99, i_manufact_id#100, i_manufact#101, i_size#102, i_formulation#103, i_color#104, i_units#105, i_container#106, i_manager_id#107, i_product_name#108], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : -722155298,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 12993088,
                "rowCount" : 203017
              },
              "compileTime" : {
                "sizeInBytes" : 12993088,
                "rowCount" : 203017
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((cast(i_current_price#92 as decimal(14,7)) > (1.2 * avg(i_current_price)#175)) AND (i_category#216 = i_category#99)) "
          },
          "0" : {
            "sign" : 1162291549,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2436204,
                "rowCount" : 203017
              },
              "compileTime" : {
                "sizeInBytes" : 2436204,
                "rowCount" : 203017
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#87] "
          },
          "2" : {
            "sign" : -1403291440,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7714646,
                "rowCount" : 203017
              },
              "compileTime" : {
                "sizeInBytes" : 7714646,
                "rowCount" : 203017
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#87, i_current_price#92, i_category#99] "
          },
          "3" : {
            "sign" : -1248107947,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86485242,
                "rowCount" : 203017
              },
              "compileTime" : {
                "sizeInBytes" : 86485242,
                "rowCount" : 203017
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(i_current_price#92) AND isnotnull(i_category#99)) AND isnotnull(i_item_sk#87)) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#87]\n+- Join Inner, ((cast(i_current_price#92 as decimal(14,7)) > (1.2 * avg(i_current_price)#175)) AND (i_category#216 = i_category#99))\n   :- Project [i_item_sk#87, i_current_price#92, i_category#99]\n   :  +- Filter ((isnotnull(i_current_price#92) AND isnotnull(i_category#99)) AND isnotnull(i_item_sk#87))\n   :     +- Relation spark_catalog.tpcds_100.item[i_item_sk#87,i_item_id#88,i_rec_start_date#89,i_rec_end_date#90,i_item_desc#91,i_current_price#92,i_wholesale_cost#93,i_brand_id#94,i_brand#95,i_class_id#96,i_class#97,i_category_id#98,i_category#99,i_manufact_id#100,i_manufact#101,i_size#102,i_formulation#103,i_color#104,i_units#105,i_container#106,i_manager_id#107,i_product_name#108] parquet\n   +- Filter isnotnull(avg(i_current_price)#175)\n      +- Aggregate [i_category#216], [cast((avg(UnscaledValue(i_current_price#209)) / 100.0) as decimal(11,6)) AS avg(i_current_price)#175, i_category#216]\n         +- Project [i_current_price#209, i_category#216]\n            +- Filter isnotnull(i_category#216)\n               +- Relation spark_catalog.tpcds_100.item[i_item_sk#204,i_item_id#205,i_rec_start_date#206,i_rec_end_date#207,i_item_desc#208,i_current_price#209,i_wholesale_cost#210,i_brand_id#211,i_brand#212,i_class_id#213,i_class#214,i_category_id#215,i_category#216,i_manufact_id#217,i_manufact#218,i_size#219,i_formulation#220,i_color#221,i_units#222,i_container#223,i_manager_id#224,i_product_name#225] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 838494529,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 33555456,
            "rowCount" : 10,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [avg(i_current_price)#175, i_category#216] Arguments: 4 "
          },
          "1" : {
            "sign" : 672572730,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 12993088,
            "rowCount" : 203017,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [i_category#99] Right keys [1]: [i_category#216] Join type: Inner Join condition: (cast(i_current_price#92 as decimal(14,7)) > (1.2 * avg(i_current_price)#175)) "
          },
          "0" : {
            "sign" : 227479993,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 2436204,
            "rowCount" : 203017,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [i_item_sk#87] Input [5]: [i_item_sk#87, i_current_price#92, i_category#99, avg(i_current_price)#175, i_category#216] "
          },
          "2" : {
            "sign" : 461316181,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 7714646,
            "rowCount" : 203017,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [i_item_sk#87, i_current_price#92, i_category#99] Condition : ((isnotnull(i_current_price#92) AND isnotnull(i_category#99)) AND isnotnull(i_item_sk#87)) "
          },
          "3" : {
            "sign" : 1889774420,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 7714646,
            "rowCount" : 203017,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.item Output [3]: [i_item_sk#87, i_current_price#92, i_category#99] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item] PushedFilters: [IsNotNull(i_current_price), IsNotNull(i_category), IsNotNull(i_item_sk)] ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_category:string> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.item",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#87]\n+- BroadcastHashJoin [i_category#99], [i_category#216], Inner, BuildRight, (cast(i_current_price#92 as decimal(14,7)) > (1.2 * avg(i_current_price)#175)), false\n   :- Filter ((isnotnull(i_current_price#92) AND isnotnull(i_category#99)) AND isnotnull(i_item_sk#87))\n   :  +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#87,i_current_price#92,i_category#99] Batched: true, DataFilters: [isnotnull(i_current_price#92), isnotnull(i_category#99), isnotnull(i_item_sk#87)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_current_price), IsNotNull(i_category), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_category:string>\n   +- BroadcastQueryStage 4\n      +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, string, true]),false), [plan_id=721]\n         +- *(5) Filter isnotnull(avg(i_current_price)#175)\n            +- *(5) HashAggregate(keys=[i_category#216], functions=[avg(UnscaledValue(i_current_price#209))], output=[avg(i_current_price)#175, i_category#216])\n               +- AQEShuffleRead coalesced\n                  +- ShuffleQueryStage 1\n                     +- Exchange hashpartitioning(i_category#216, 200), ENSURE_REQUIREMENTS, [plan_id=344]\n                        +- *(2) HashAggregate(keys=[i_category#216], functions=[partial_avg(UnscaledValue(i_current_price#209))], output=[i_category#216, sum#233, count#234L])\n                           +- *(2) Filter isnotnull(i_category#216)\n                              +- *(2) ColumnarToRow\n                                 +- FileScan parquet spark_catalog.tpcds_100.item[i_current_price#209,i_category#216] Batched: true, DataFilters: [isnotnull(i_category#216)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_category)], ReadSchema: struct<i_current_price:decimal(7,2),i_category:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 41270102,
        "inputRowCount" : 203027
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 2,
        "FinishedTasksNum" : 4,
        "FinishedTasksTotalTimeInMs" : 5988.0,
        "FinishedTasksDistributionInMs" : [ 1315.0, 1390.0, 1508.0, 1775.0, 1775.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 10 ],
      "Objectives" : {
        "DurationInMs" : 4031,
        "TotalTasksDurationInMs" : 4966,
        "IOBytes" : {
          "Total" : 1347122,
          "Details" : {
            "IR" : 1347122,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -873340103,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 340,
                "rowCount" : 10
              },
              "compileTime" : {
                "sizeInBytes" : 340,
                "rowCount" : 10
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_category#216], [cast((avg(UnscaledValue(i_current_price#209)) / 100.0) as decimal(11,6)) AS avg(i_current_price)#175, i_category#216] "
          },
          "1" : {
            "sign" : -249995504,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6919544,
                "rowCount" : 203516
              },
              "compileTime" : {
                "sizeInBytes" : 6919544,
                "rowCount" : 203516
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_current_price#209, i_category#216] "
          },
          "2" : {
            "sign" : -599261954,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86697816,
                "rowCount" : 203516
              },
              "compileTime" : {
                "sizeInBytes" : 86697816,
                "rowCount" : 203516
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(i_category#216) "
          },
          "3" : {
            "sign" : 836229139,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#204, i_item_id#205, i_rec_start_date#206, i_rec_end_date#207, i_item_desc#208, i_current_price#209, i_wholesale_cost#210, i_brand_id#211, i_brand#212, i_class_id#213, i_class#214, i_category_id#215, i_category#216, i_manufact_id#217, i_manufact#218, i_size#219, i_formulation#220, i_color#221, i_units#222, i_container#223, i_manager_id#224, i_product_name#225], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "LogicalRelation",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [i_category#216], [cast((avg(UnscaledValue(i_current_price#209)) / 100.0) as decimal(11,6)) AS avg(i_current_price)#175, i_category#216]\n+- Project [i_current_price#209, i_category#216]\n   +- Filter isnotnull(i_category#216)\n      +- Relation spark_catalog.tpcds_100.item[i_item_sk#204,i_item_id#205,i_rec_start_date#206,i_rec_end_date#207,i_item_desc#208,i_current_price#209,i_wholesale_cost#210,i_brand_id#211,i_brand#212,i_class_id#213,i_class#214,i_category_id#215,i_category#216,i_manufact_id#217,i_manufact#218,i_size#219,i_formulation#220,i_color#221,i_units#222,i_container#223,i_manager_id#224,i_product_name#225] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1190545619,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 340,
            "rowCount" : 10,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [2]: [i_current_price#209, i_category#216] Keys [1]: [i_category#216] Functions [1]: [partial_avg(UnscaledValue(i_current_price#209))] Aggregate Attributes [2]: [sum#231, count#232L] Results [3]: [i_category#216, sum#233, count#234L] "
          },
          "1" : {
            "sign" : -1452937890,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 6919544,
            "rowCount" : 203516,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [i_current_price#209, i_category#216] Condition : isnotnull(i_category#216) "
          },
          "2" : {
            "sign" : 1426796521,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 6919544,
            "rowCount" : 203516,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.item Output [2]: [i_current_price#209, i_category#216] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item] PushedFilters: [IsNotNull(i_category)] ReadSchema: struct<i_current_price:decimal(7,2),i_category:string> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.item",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[i_category#216], functions=[partial_avg(UnscaledValue(i_current_price#209))], output=[i_category#216, sum#233, count#234L])\n+- Filter isnotnull(i_category#216)\n   +- FileScan parquet spark_catalog.tpcds_100.item[i_current_price#209,i_category#216] Batched: true, DataFilters: [isnotnull(i_category#216)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_category)], ReadSchema: struct<i_current_price:decimal(7,2),i_category:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 6919544,
        "inputRowCount" : 203516
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 1 ],
      "Objectives" : {
        "DurationInMs" : 2656,
        "TotalTasksDurationInMs" : 9920,
        "IOBytes" : {
          "Total" : 530974,
          "Details" : {
            "IR" : 530195,
            "IW" : 0,
            "SR" : 0,
            "SW" : 779
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702226496883,
  "SQLEndTimeInMs" : 1702226518162,
  "Objectives" : {
    "DurationInMs" : 21279,
    "IOBytes" : {
      "Total" : 133175646,
      "Details" : {
        "IR" : 35460424,
        "IW" : 0,
        "SR" : 48857611,
        "SW" : 48857611
      }
    }
  }
}
