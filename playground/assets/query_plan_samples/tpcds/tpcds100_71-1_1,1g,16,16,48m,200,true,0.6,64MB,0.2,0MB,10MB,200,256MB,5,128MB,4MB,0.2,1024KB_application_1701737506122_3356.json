{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "34" : {
          "sign" : -1959304097,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 960020,
          "rowCount" : 48001,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [t_time_sk#156, t_hour#159, t_minute#160] "
        },
        "12" : {
          "sign" : -778664521,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2015032152,
          "rowCount" : 71965434,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_sold_time_sk#37, ws_item_sk#39, ws_ext_sales_price#59, ws_sold_date_sk#70] "
        },
        "8" : {
          "sign" : -966080617,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#15, i_item_id#16, i_rec_start_date#17, i_rec_end_date#18, i_item_desc#19, i_current_price#20, i_wholesale_cost#21, i_brand_id#22, i_brand#23, i_class_id#24, i_class#25, i_category_id#26, i_category#27, i_manufact_id#28, i_manufact#29, i_size#30, i_formulation#31, i_color#32, i_units#33, i_container#34, i_manager_id#35, i_product_name#36], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "19" : {
          "sign" : 1957193442,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 4432520384,
          "rowCount" : 138516262,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#166 = cs_sold_date_sk#132) "
        },
        "23" : {
          "sign" : 721831459,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 600,
          "rowCount" : 50,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#166] "
        },
        "4" : {
          "sign" : -398281440,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 100568807783692,
          "rowCount" : 1897524675164,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_brand_id#22, i_brand#23, ext_price#0, time_sk#3] "
        },
        "15" : {
          "sign" : 1496036543,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 600,
          "rowCount" : 50,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#71] "
        },
        "11" : {
          "sign" : 109345863,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 2223859360,
          "rowCount" : 69495605,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#71 = ws_sold_date_sk#70) "
        },
        "9" : {
          "sign" : 1155025220,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
          "sizeInBytes" : 11365258848,
          "rowCount" : 473552452,
          "isRuntime" : false,
          "predicate" : " (unknown) Union Arguments: false, false "
        },
        "33" : {
          "sign" : 2142208940,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#194, d_date_id#195, d_date#196, d_month_seq#197, d_week_seq#198, d_quarter_seq#199, d_year#200, d_dow#201, d_moy#202, d_dom#203, d_qoy#204, d_fy_year#205, d_fy_quarter_seq#206, d_fy_week_seq#207, d_day_name#208, d_quarter_name#209, d_holiday#210, d_weekend#211, d_following_holiday#212, d_first_dom#213, d_last_dom#214, d_same_day_ly#215, d_same_day_lq#216, d_current_day#217, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "22" : {
          "sign" : -1465437660,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 29800787536,
          "rowCount" : 143273017,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#99, cs_ship_date_sk#100, cs_bill_customer_sk#101, cs_bill_cdemo_sk#102, cs_bill_hdemo_sk#103, cs_bill_addr_sk#104, cs_ship_customer_sk#105, cs_ship_cdemo_sk#106, cs_ship_hdemo_sk#107, cs_ship_addr_sk#108, cs_call_center_sk#109, cs_catalog_page_sk#110, cs_ship_mode_sk#111, cs_warehouse_sk#112, cs_item_sk#113, cs_promo_sk#114, cs_order_number#115L, cs_quantity#116, cs_wholesale_cost#117, cs_list_price#118, cs_sales_price#119, cs_ext_discount_amt#120, cs_ext_sales_price#121, cs_ext_wholesale_cost#122, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "26" : {
          "sign" : 114450469,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 6372974040,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_ext_sales_price#147 AS ext_price#8, ss_item_sk#134 AS sold_item_sk#10, ss_sold_time_sk#133 AS time_sk#11] "
        },
        "13" : {
          "sign" : -2026606718,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 14968810272,
          "rowCount" : 71965434,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(ws_sold_date_sk#70) AND isnotnull(ws_item_sk#39)) AND isnotnull(ws_sold_time_sk#37)) AND dynamicpruning#236 [ws_sold_date_sk#70]) "
        },
        "24" : {
          "sign" : -1242757086,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 12300,
          "rowCount" : 50,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#174) AND isnotnull(d_year#172)) AND ((d_moy#174 = 12) AND (d_year#172 = 2000))) AND isnotnull(d_date_sk#166)) "
        },
        "35" : {
          "sign" : 106160322,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 6048126,
          "rowCount" : 48001,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((t_meal_time#165 = breakfast) OR (t_meal_time#165 = dinner)) AND isnotnull(t_time_sk#156)) "
        },
        "16" : {
          "sign" : -2024467685,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 12300,
          "rowCount" : 50,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#79) AND isnotnull(d_year#77)) AND ((d_moy#79 = 12) AND (d_year#77 = 2000))) AND isnotnull(d_date_sk#71)) "
        },
        "5" : {
          "sign" : -602187982,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 115749005185004,
          "rowCount" : 1897524675164,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (sold_item_sk#2 = i_item_sk#15) "
        },
        "10" : {
          "sign" : 218865065,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1667894520,
          "rowCount" : 69495605,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_ext_sales_price#59 AS ext_price#0, ws_item_sk#39 AS sold_item_sk#2, ws_sold_time_sk#37 AS time_sk#3] "
        },
        "21" : {
          "sign" : -691982151,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 29651731824,
          "rowCount" : 142556403,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_sold_date_sk#132) AND isnotnull(cs_item_sk#113)) AND isnotnull(cs_sold_time_sk#99)) AND dynamicpruning#237 [cs_sold_date_sk#132]) "
        },
        "32" : {
          "sign" : -1254708735,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 12300,
          "rowCount" : 50,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#202) AND isnotnull(d_year#200)) AND ((d_moy#202 = 12) AND (d_year#200 = 2000))) AND isnotnull(d_date_sk#194)) "
        },
        "6" : {
          "sign" : 1532875022,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 180315,
          "rowCount" : 4007,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#15, i_brand_id#22, i_brand#23] "
        },
        "36" : {
          "sign" : -565811022,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 10886400,
          "rowCount" : 86400,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [t_time_sk#156, t_time_id#157, t_time#158, t_hour#159, t_minute#160, t_second#161, t_am_pm#162, t_shift#163, t_sub_shift#164, t_meal_time#165], `spark_catalog`.`tpcds_100`.`time_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "1" : {
          "sign" : 123776352,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 7325640,
          "rowCount" : 128520,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [i_brand#23, i_brand_id#22, t_hour#159, t_minute#160], [i_brand_id#22 AS brand_id#12, i_brand#23 AS brand#13, t_hour#159, t_minute#160, MakeDecimal(sum(UnscaledValue(ext_price#0)),17,2) AS ext_price#14] "
        },
        "17" : {
          "sign" : -668436058,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#71, d_date_id#72, d_date#73, d_month_seq#74, d_week_seq#75, d_quarter_seq#76, d_year#77, d_dow#78, d_moy#79, d_dom#80, d_qoy#81, d_fy_year#82, d_fy_quarter_seq#83, d_fy_week_seq#84, d_day_name#85, d_quarter_name#86, d_holiday#87, d_weekend#88, d_following_holiday#89, d_first_dom#90, d_last_dom#91, d_same_day_ly#92, d_same_day_lq#93, d_current_day#94, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "25" : {
          "sign" : 1127847808,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#166, d_date_id#167, d_date#168, d_month_seq#169, d_week_seq#170, d_quarter_seq#171, d_year#172, d_dow#173, d_moy#174, d_dom#175, d_qoy#176, d_fy_year#177, d_fy_quarter_seq#178, d_fy_week_seq#179, d_day_name#180, d_quarter_name#181, d_holiday#182, d_weekend#183, d_following_holiday#184, d_first_dom#185, d_last_dom#186, d_same_day_ly#187, d_same_day_lq#188, d_current_day#189, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "14" : {
          "sign" : -699645913,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 14972593792,
          "rowCount" : 71983624,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#37, ws_ship_date_sk#38, ws_item_sk#39, ws_bill_customer_sk#40, ws_bill_cdemo_sk#41, ws_bill_hdemo_sk#42, ws_bill_addr_sk#43, ws_ship_customer_sk#44, ws_ship_cdemo_sk#45, ws_ship_hdemo_sk#46, ws_ship_addr_sk#47, ws_web_page_sk#48, ws_web_site_sk#49, ws_ship_mode_sk#50, ws_warehouse_sk#51, ws_promo_sk#52, ws_order_number#53L, ws_quantity#54, ws_wholesale_cost#55, ws_list_price#56, ws_sales_price#57, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "31" : {
          "sign" : -1577766527,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 600,
          "rowCount" : 50,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#194] "
        },
        "0" : {
          "sign" : 515460724,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 7325640,
          "rowCount" : 128520,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [ext_price#14 DESC NULLS LAST, brand_id#12 ASC NULLS FIRST], true "
        },
        "20" : {
          "sign" : 193681626,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3991579284,
          "rowCount" : 142556403,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_sold_time_sk#99, cs_item_sk#113, cs_ext_sales_price#121, cs_sold_date_sk#132] "
        },
        "27" : {
          "sign" : -1278664132,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 8497298720,
          "rowCount" : 265540585,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#194 = ss_sold_date_sk#155) "
        },
        "2" : {
          "sign" : 258124444,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 5191735670155188348,
          "rowCount" : 91083081932547164,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_brand_id#22, i_brand#23, ext_price#0, t_hour#159, t_minute#160] "
        },
        "18" : {
          "sign" : -853586445,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3324390288,
          "rowCount" : 138516262,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_ext_sales_price#121 AS ext_price#4, cs_item_sk#113 AS sold_item_sk#6, cs_sold_time_sk#99 AS time_sk#7] "
        },
        "30" : {
          "sign" : -1782334540,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 41806893656,
          "rowCount" : 275045353,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#133, ss_item_sk#134, ss_customer_sk#135, ss_cdemo_sk#136, ss_hdemo_sk#137, ss_addr_sk#138, ss_store_sk#139, ss_promo_sk#140, ss_ticket_number#141L, ss_quantity#142, ss_wholesale_cost#143, ss_list_price#144, ss_sales_price#145, ss_ext_discount_amt#146, ss_ext_sales_price#147, ss_ext_wholesale_cost#148, ss_ext_list_price#149, ss_ext_tax#150, ss_coupon_amt#151, ss_net_paid#152, ss_net_paid_inc_tax#153, ss_net_profit#154, ss_sold_date_sk#155], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "7" : {
          "sign" : -1015691821,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 1706982,
          "rowCount" : 4007,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(i_manager_id#35) AND (i_manager_id#35 = 1)) AND isnotnull(i_item_sk#15)) "
        },
        "29" : {
          "sign" : 1458655838,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 39925727368,
          "rowCount" : 262669259,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(ss_sold_date_sk#155) AND isnotnull(ss_item_sk#134)) AND isnotnull(ss_sold_time_sk#133)) AND dynamicpruning#238 [ss_sold_date_sk#155]) "
        },
        "3" : {
          "sign" : -1511268556,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 5920400325615565660,
          "rowCount" : 91083081932547164,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (time_sk#3 = t_time_sk#156) "
        },
        "28" : {
          "sign" : -1279808338,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 7354739252,
          "rowCount" : 262669259,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_sold_time_sk#133, ss_item_sk#134, ss_ext_sales_price#147, ss_sold_date_sk#155] "
        }
      },
      "links" : [ {
        "fromId" : 8,
        "fromName" : "LogicalRelation",
        "toId" : 7,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Filter",
        "toId" : 6,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Project",
        "toId" : 5,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "LogicalRelation",
        "toId" : 13,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "LogicalRelation",
        "toId" : 16,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "Filter",
        "toId" : 15,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "Project",
        "toId" : 13,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 13,
        "fromName" : "Filter",
        "toId" : 12,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 12,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "Join",
        "toId" : 10,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Union",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "LogicalRelation",
        "toId" : 21,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "LogicalRelation",
        "toId" : 24,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "Filter",
        "toId" : 23,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "Project",
        "toId" : 21,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 21,
        "fromName" : "Filter",
        "toId" : 20,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "Project",
        "toId" : 19,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "Project",
        "toId" : 19,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "Join",
        "toId" : 18,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Union",
        "linkType" : "Operator"
      }, {
        "fromId" : 30,
        "fromName" : "LogicalRelation",
        "toId" : 29,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 33,
        "fromName" : "LogicalRelation",
        "toId" : 32,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 32,
        "fromName" : "Filter",
        "toId" : 31,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 31,
        "fromName" : "Project",
        "toId" : 29,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 29,
        "fromName" : "Filter",
        "toId" : 28,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "Project",
        "toId" : 27,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 31,
        "fromName" : "Project",
        "toId" : 27,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "Join",
        "toId" : 26,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Union",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Union",
        "toId" : 5,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Join",
        "toId" : 4,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Project",
        "toId" : 3,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 36,
        "fromName" : "LogicalRelation",
        "toId" : 35,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 35,
        "fromName" : "Filter",
        "toId" : 34,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 34,
        "fromName" : "Project",
        "toId" : 3,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Join",
        "toId" : 2,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Project",
        "toId" : 1,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "Aggregate",
        "toId" : 0,
        "toName" : "Sort",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "Sort [ext_price#14 DESC NULLS LAST, brand_id#12 ASC NULLS FIRST], true\n+- Aggregate [i_brand#23, i_brand_id#22, t_hour#159, t_minute#160], [i_brand_id#22 AS brand_id#12, i_brand#23 AS brand#13, t_hour#159, t_minute#160, MakeDecimal(sum(UnscaledValue(ext_price#0)),17,2) AS ext_price#14]\n   +- Project [i_brand_id#22, i_brand#23, ext_price#0, t_hour#159, t_minute#160]\n      +- Join Inner, (time_sk#3 = t_time_sk#156)\n         :- Project [i_brand_id#22, i_brand#23, ext_price#0, time_sk#3]\n         :  +- Join Inner, (sold_item_sk#2 = i_item_sk#15)\n         :     :- Project [i_item_sk#15, i_brand_id#22, i_brand#23]\n         :     :  +- Filter ((isnotnull(i_manager_id#35) AND (i_manager_id#35 = 1)) AND isnotnull(i_item_sk#15))\n         :     :     +- Relation spark_catalog.tpcds_100.item[i_item_sk#15,i_item_id#16,i_rec_start_date#17,i_rec_end_date#18,i_item_desc#19,i_current_price#20,i_wholesale_cost#21,i_brand_id#22,i_brand#23,i_class_id#24,i_class#25,i_category_id#26,i_category#27,i_manufact_id#28,i_manufact#29,i_size#30,i_formulation#31,i_color#32,i_units#33,i_container#34,i_manager_id#35,i_product_name#36] parquet\n         :     +- Union false, false\n         :        :- Project [ws_ext_sales_price#59 AS ext_price#0, ws_item_sk#39 AS sold_item_sk#2, ws_sold_time_sk#37 AS time_sk#3]\n         :        :  +- Join Inner, (d_date_sk#71 = ws_sold_date_sk#70)\n         :        :     :- Project [ws_sold_time_sk#37, ws_item_sk#39, ws_ext_sales_price#59, ws_sold_date_sk#70]\n         :        :     :  +- Filter (((isnotnull(ws_sold_date_sk#70) AND isnotnull(ws_item_sk#39)) AND isnotnull(ws_sold_time_sk#37)) AND dynamicpruning#236 [ws_sold_date_sk#70])\n         :        :     :     :  +- Project [d_date_sk#71]\n         :        :     :     :     +- Filter (((isnotnull(d_moy#79) AND isnotnull(d_year#77)) AND ((d_moy#79 = 12) AND (d_year#77 = 2000))) AND isnotnull(d_date_sk#71))\n         :        :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#71,d_date_id#72,d_date#73,d_month_seq#74,d_week_seq#75,d_quarter_seq#76,d_year#77,d_dow#78,d_moy#79,d_dom#80,d_qoy#81,d_fy_year#82,d_fy_quarter_seq#83,d_fy_week_seq#84,d_day_name#85,d_quarter_name#86,d_holiday#87,d_weekend#88,d_following_holiday#89,d_first_dom#90,d_last_dom#91,d_same_day_ly#92,d_same_day_lq#93,d_current_day#94,... 4 more fields] parquet\n         :        :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#37,ws_ship_date_sk#38,ws_item_sk#39,ws_bill_customer_sk#40,ws_bill_cdemo_sk#41,ws_bill_hdemo_sk#42,ws_bill_addr_sk#43,ws_ship_customer_sk#44,ws_ship_cdemo_sk#45,ws_ship_hdemo_sk#46,ws_ship_addr_sk#47,ws_web_page_sk#48,ws_web_site_sk#49,ws_ship_mode_sk#50,ws_warehouse_sk#51,ws_promo_sk#52,ws_order_number#53L,ws_quantity#54,ws_wholesale_cost#55,ws_list_price#56,ws_sales_price#57,ws_ext_discount_amt#58,ws_ext_sales_price#59,ws_ext_wholesale_cost#60,... 10 more fields] parquet\n         :        :     +- Project [d_date_sk#71]\n         :        :        +- Filter (((isnotnull(d_moy#79) AND isnotnull(d_year#77)) AND ((d_moy#79 = 12) AND (d_year#77 = 2000))) AND isnotnull(d_date_sk#71))\n         :        :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#71,d_date_id#72,d_date#73,d_month_seq#74,d_week_seq#75,d_quarter_seq#76,d_year#77,d_dow#78,d_moy#79,d_dom#80,d_qoy#81,d_fy_year#82,d_fy_quarter_seq#83,d_fy_week_seq#84,d_day_name#85,d_quarter_name#86,d_holiday#87,d_weekend#88,d_following_holiday#89,d_first_dom#90,d_last_dom#91,d_same_day_ly#92,d_same_day_lq#93,d_current_day#94,... 4 more fields] parquet\n         :        :- Project [cs_ext_sales_price#121 AS ext_price#4, cs_item_sk#113 AS sold_item_sk#6, cs_sold_time_sk#99 AS time_sk#7]\n         :        :  +- Join Inner, (d_date_sk#166 = cs_sold_date_sk#132)\n         :        :     :- Project [cs_sold_time_sk#99, cs_item_sk#113, cs_ext_sales_price#121, cs_sold_date_sk#132]\n         :        :     :  +- Filter (((isnotnull(cs_sold_date_sk#132) AND isnotnull(cs_item_sk#113)) AND isnotnull(cs_sold_time_sk#99)) AND dynamicpruning#237 [cs_sold_date_sk#132])\n         :        :     :     :  +- Project [d_date_sk#166]\n         :        :     :     :     +- Filter (((isnotnull(d_moy#174) AND isnotnull(d_year#172)) AND ((d_moy#174 = 12) AND (d_year#172 = 2000))) AND isnotnull(d_date_sk#166))\n         :        :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#166,d_date_id#167,d_date#168,d_month_seq#169,d_week_seq#170,d_quarter_seq#171,d_year#172,d_dow#173,d_moy#174,d_dom#175,d_qoy#176,d_fy_year#177,d_fy_quarter_seq#178,d_fy_week_seq#179,d_day_name#180,d_quarter_name#181,d_holiday#182,d_weekend#183,d_following_holiday#184,d_first_dom#185,d_last_dom#186,d_same_day_ly#187,d_same_day_lq#188,d_current_day#189,... 4 more fields] parquet\n         :        :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#99,cs_ship_date_sk#100,cs_bill_customer_sk#101,cs_bill_cdemo_sk#102,cs_bill_hdemo_sk#103,cs_bill_addr_sk#104,cs_ship_customer_sk#105,cs_ship_cdemo_sk#106,cs_ship_hdemo_sk#107,cs_ship_addr_sk#108,cs_call_center_sk#109,cs_catalog_page_sk#110,cs_ship_mode_sk#111,cs_warehouse_sk#112,cs_item_sk#113,cs_promo_sk#114,cs_order_number#115L,cs_quantity#116,cs_wholesale_cost#117,cs_list_price#118,cs_sales_price#119,cs_ext_discount_amt#120,cs_ext_sales_price#121,cs_ext_wholesale_cost#122,... 10 more fields] parquet\n         :        :     +- Project [d_date_sk#166]\n         :        :        +- Filter (((isnotnull(d_moy#174) AND isnotnull(d_year#172)) AND ((d_moy#174 = 12) AND (d_year#172 = 2000))) AND isnotnull(d_date_sk#166))\n         :        :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#166,d_date_id#167,d_date#168,d_month_seq#169,d_week_seq#170,d_quarter_seq#171,d_year#172,d_dow#173,d_moy#174,d_dom#175,d_qoy#176,d_fy_year#177,d_fy_quarter_seq#178,d_fy_week_seq#179,d_day_name#180,d_quarter_name#181,d_holiday#182,d_weekend#183,d_following_holiday#184,d_first_dom#185,d_last_dom#186,d_same_day_ly#187,d_same_day_lq#188,d_current_day#189,... 4 more fields] parquet\n         :        +- Project [ss_ext_sales_price#147 AS ext_price#8, ss_item_sk#134 AS sold_item_sk#10, ss_sold_time_sk#133 AS time_sk#11]\n         :           +- Join Inner, (d_date_sk#194 = ss_sold_date_sk#155)\n         :              :- Project [ss_sold_time_sk#133, ss_item_sk#134, ss_ext_sales_price#147, ss_sold_date_sk#155]\n         :              :  +- Filter (((isnotnull(ss_sold_date_sk#155) AND isnotnull(ss_item_sk#134)) AND isnotnull(ss_sold_time_sk#133)) AND dynamicpruning#238 [ss_sold_date_sk#155])\n         :              :     :  +- Project [d_date_sk#194]\n         :              :     :     +- Filter (((isnotnull(d_moy#202) AND isnotnull(d_year#200)) AND ((d_moy#202 = 12) AND (d_year#200 = 2000))) AND isnotnull(d_date_sk#194))\n         :              :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#194,d_date_id#195,d_date#196,d_month_seq#197,d_week_seq#198,d_quarter_seq#199,d_year#200,d_dow#201,d_moy#202,d_dom#203,d_qoy#204,d_fy_year#205,d_fy_quarter_seq#206,d_fy_week_seq#207,d_day_name#208,d_quarter_name#209,d_holiday#210,d_weekend#211,d_following_holiday#212,d_first_dom#213,d_last_dom#214,d_same_day_ly#215,d_same_day_lq#216,d_current_day#217,... 4 more fields] parquet\n         :              :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#133,ss_item_sk#134,ss_customer_sk#135,ss_cdemo_sk#136,ss_hdemo_sk#137,ss_addr_sk#138,ss_store_sk#139,ss_promo_sk#140,ss_ticket_number#141L,ss_quantity#142,ss_wholesale_cost#143,ss_list_price#144,ss_sales_price#145,ss_ext_discount_amt#146,ss_ext_sales_price#147,ss_ext_wholesale_cost#148,ss_ext_list_price#149,ss_ext_tax#150,ss_coupon_amt#151,ss_net_paid#152,ss_net_paid_inc_tax#153,ss_net_profit#154,ss_sold_date_sk#155] parquet\n         :              +- Project [d_date_sk#194]\n         :                 +- Filter (((isnotnull(d_moy#202) AND isnotnull(d_year#200)) AND ((d_moy#202 = 12) AND (d_year#200 = 2000))) AND isnotnull(d_date_sk#194))\n         :                    +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#194,d_date_id#195,d_date#196,d_month_seq#197,d_week_seq#198,d_quarter_seq#199,d_year#200,d_dow#201,d_moy#202,d_dom#203,d_qoy#204,d_fy_year#205,d_fy_quarter_seq#206,d_fy_week_seq#207,d_day_name#208,d_quarter_name#209,d_holiday#210,d_weekend#211,d_following_holiday#212,d_first_dom#213,d_last_dom#214,d_same_day_ly#215,d_same_day_lq#216,d_current_day#217,... 4 more fields] parquet\n         +- Project [t_time_sk#156, t_hour#159, t_minute#160]\n            +- Filter (((t_meal_time#165 = breakfast) OR (t_meal_time#165 = dinner)) AND isnotnull(t_time_sk#156))\n               +- Relation spark_catalog.tpcds_100.time_dim[t_time_sk#156,t_time_id#157,t_time#158,t_hour#159,t_minute#160,t_second#161,t_am_pm#162,t_shift#163,t_sub_shift#164,t_meal_time#165] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 86731975546,
      "inputRowCount" : 490811541
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "4" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -703629625,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 7579544,
            "rowCount" : 111689,
            "isRuntime" : true,
            "predicate" : " (unknown) Sort Arguments: [ext_price#253 DESC NULLS LAST, brand_id#251 ASC NULLS FIRST], true "
          },
          "1" : {
            "sign" : -996273653,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 7579544,
            "rowCount" : 111689,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [i_brand#23, i_brand_id#22, t_hour#159, t_minute#160], [i_brand_id#22 AS brand_id#251, i_brand#23 AS brand#252, t_hour#159, t_minute#160, MakeDecimal(sum(UnscaledValue(ext_price#239)),17,2) AS ext_price#253], HashAggregate(keys=[i_brand#23, i_brand_id#22, t_hour#159, t_minute#160], functions=[sum(UnscaledValue(ext_price#239))]) "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "LogicalQueryStage",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [ext_price#253 DESC NULLS LAST, brand_id#251 ASC NULLS FIRST], true\n+- LogicalQueryStage Aggregate [i_brand#23, i_brand_id#22, t_hour#159, t_minute#160], [i_brand_id#22 AS brand_id#251, i_brand#23 AS brand#252, t_hour#159, t_minute#160, MakeDecimal(sum(UnscaledValue(ext_price#239)),17,2) AS ext_price#253], HashAggregate(keys=[i_brand#23, i_brand_id#22, t_hour#159, t_minute#160], functions=[sum(UnscaledValue(ext_price#239))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 7579544,
        "inputRowCount" : 111689
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227310355,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 10624,
        "IOBytes" : {
          "Total" : 14178858,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 12082254,
            "SW" : 2096604
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : 227528675,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 4903416,
            "rowCount" : 72530,
            "isRuntime" : true,
            "predicate" : " (unknown) Sort Arguments: [ext_price#253 DESC NULLS LAST, brand_id#251 ASC NULLS FIRST], true "
          },
          "1" : {
            "sign" : 975047199,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 4903416,
            "rowCount" : 72530,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [i_brand#23, i_brand_id#22, t_hour#159, t_minute#160], [i_brand_id#22 AS brand_id#251, i_brand#23 AS brand#252, t_hour#159, t_minute#160, MakeDecimal(sum(UnscaledValue(ext_price#239)),17,2) AS ext_price#253], ShuffleQueryStage 8 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "LogicalQueryStage",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [ext_price#253 DESC NULLS LAST, brand_id#251 ASC NULLS FIRST], true\n+- LogicalQueryStage Aggregate [i_brand#23, i_brand_id#22, t_hour#159, t_minute#160], [i_brand_id#22 AS brand_id#251, i_brand#23 AS brand#252, t_hour#159, t_minute#160, MakeDecimal(sum(UnscaledValue(ext_price#239)),17,2) AS ext_price#253], ShuffleQueryStage 8\n"
      },
      "IM" : {
        "inputSizeInBytes" : 4903416,
        "inputRowCount" : 72530
      },
      "PD" : {
        "1" : [ 9412, 9412, 10353, 10353, 10353, 10353, 10353, 10353, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 11388, 10353, 11388, 11388, 11388, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 11388, 11388, 11388, 10353, 11388, 11388, 11388, 11388, 11388, 10353, 11388, 11388, 11388, 11388, 11388, 11388, 10353, 11388, 10353, 11388, 10353, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 10353, 10353, 11388, 11388, 11388, 11388, 11388, 10353, 10353, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 10353, 10353, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 10353, 11388, 11388, 11388, 10353, 11388, 10353, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 10353, 11388, 11388, 11388, 11388, 10353, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 10353, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 10353, 11388, 11388, 11388, 11388, 10353, 11388, 11388, 11388, 11388, 11388, 10353, 11388, 10353, 11388, 10353, 10353, 10353, 10353, 11388, 11388, 11388, 11388, 11388, 11388, 10353, 11388, 11388, 11388, 11388, 11388, 11388, 10353, 11388, 11388, 10353, 11388, 10353, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 10353, 10353, 11388, 10353, 11388, 10353, 11388, 10353, 11388, 11388, 10353, 10353, 9412 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227320586,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 393,
        "IOBytes" : {
          "Total" : 2096604,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 2096604,
            "SW" : 0
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : 509228971,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#282], BroadcastQueryStage 5 "
          },
          "12" : {
            "sign" : -699645913,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#37, ws_ship_date_sk#38, ws_item_sk#39, ws_bill_customer_sk#40, ws_bill_cdemo_sk#41, ws_bill_hdemo_sk#42, ws_bill_addr_sk#43, ws_ship_customer_sk#44, ws_ship_cdemo_sk#45, ws_ship_hdemo_sk#46, ws_ship_addr_sk#47, ws_web_page_sk#48, ws_web_site_sk#49, ws_ship_mode_sk#50, ws_warehouse_sk#51, ws_promo_sk#52, ws_order_number#53L, ws_quantity#54, ws_wholesale_cost#55, ws_list_price#56, ws_sales_price#57, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "8" : {
            "sign" : -700794220,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1667894520,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ext_sales_price#59 AS ext_price#239, ws_item_sk#39 AS sold_item_sk#241, ws_sold_time_sk#37 AS time_sk#242] "
          },
          "19" : {
            "sign" : -596969237,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3991579284,
            "rowCount" : 142556403,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_sold_time_sk#99, cs_item_sk#113, cs_ext_sales_price#121, cs_sold_date_sk#132] "
          },
          "23" : {
            "sign" : -1640516212,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12300,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#262) AND isnotnull(d_year#260)) AND ((d_moy#262 = 12) AND (d_year#260 = 2000))) AND isnotnull(d_date_sk#254)) "
          },
          "4" : {
            "sign" : -1150488563,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 100568807783692,
            "rowCount" : 1897524675164,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_brand_id#22, i_brand#23, ext_price#239, time_sk#242] "
          },
          "15" : {
            "sign" : -668436058,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#71, d_date_id#72, d_date#73, d_month_seq#74, d_week_seq#75, d_quarter_seq#76, d_year#77, d_dow#78, d_moy#79, d_dom#80, d_qoy#81, d_fy_year#82, d_fy_quarter_seq#83, d_fy_week_seq#84, d_day_name#85, d_quarter_name#86, d_holiday#87, d_weekend#88, d_following_holiday#89, d_first_dom#90, d_last_dom#91, d_same_day_ly#92, d_same_day_lq#93, d_current_day#94, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "11" : {
            "sign" : -1035164921,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14968810272,
            "rowCount" : 71965434,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(ws_sold_date_sk#70) AND isnotnull(ws_item_sk#39)) AND isnotnull(ws_sold_time_sk#37)) AND dynamicpruning#318 [ws_sold_date_sk#70]) "
          },
          "9" : {
            "sign" : -1485172402,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2223859360,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#71 = ws_sold_date_sk#70) "
          },
          "33" : {
            "sign" : -1081318410,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#282, d_date_id#283, d_date#284, d_month_seq#285, d_week_seq#286, d_quarter_seq#287, d_year#288, d_dow#289, d_moy#290, d_dom#291, d_qoy#292, d_fy_year#293, d_fy_quarter_seq#294, d_fy_week_seq#295, d_day_name#296, d_quarter_name#297, d_holiday#298, d_weekend#299, d_following_holiday#300, d_first_dom#301, d_last_dom#302, d_same_day_ly#303, d_same_day_lq#304, d_current_day#305, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "22" : {
            "sign" : 754672557,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#254] "
          },
          "26" : {
            "sign" : 212752419,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6372974040,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_ext_sales_price#147 AS ext_price#247, ss_item_sk#134 AS sold_item_sk#249, ss_sold_time_sk#133 AS time_sk#250] "
          },
          "13" : {
            "sign" : 1496036543,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#71] "
          },
          "24" : {
            "sign" : -1030755638,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#254, d_date_id#255, d_date#256, d_month_seq#257, d_week_seq#258, d_quarter_seq#259, d_year#260, d_dow#261, d_moy#262, d_dom#263, d_qoy#264, d_fy_year#265, d_fy_quarter_seq#266, d_fy_week_seq#267, d_day_name#268, d_quarter_name#269, d_holiday#270, d_weekend#271, d_following_holiday#272, d_first_dom#273, d_last_dom#274, d_same_day_ly#275, d_same_day_lq#276, d_current_day#277, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "35" : {
            "sign" : 183655171,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1451776,
            "rowCount" : 25200,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [t_time_sk#156, t_hour#159, t_minute#160], BroadcastQueryStage 6 "
          },
          "16" : {
            "sign" : -1128919823,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#71], BroadcastQueryStage 1 "
          },
          "5" : {
            "sign" : 1522059904,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 115749005185004,
            "rowCount" : 1897524675164,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (sold_item_sk#241 = i_item_sk#15) "
          },
          "10" : {
            "sign" : 755800508,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2015032152,
            "rowCount" : 71965434,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_sold_time_sk#37, ws_item_sk#39, ws_ext_sales_price#59, ws_sold_date_sk#70] "
          },
          "21" : {
            "sign" : -1465437660,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#99, cs_ship_date_sk#100, cs_bill_customer_sk#101, cs_bill_cdemo_sk#102, cs_bill_hdemo_sk#103, cs_bill_addr_sk#104, cs_ship_customer_sk#105, cs_ship_cdemo_sk#106, cs_ship_hdemo_sk#107, cs_ship_addr_sk#108, cs_call_center_sk#109, cs_catalog_page_sk#110, cs_ship_mode_sk#111, cs_warehouse_sk#112, cs_item_sk#113, cs_promo_sk#114, cs_order_number#115L, cs_quantity#116, cs_wholesale_cost#117, cs_list_price#118, cs_sales_price#119, cs_ext_discount_amt#120, cs_ext_sales_price#121, cs_ext_wholesale_cost#122, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "32" : {
            "sign" : -1754456043,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12300,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#290) AND isnotnull(d_year#288)) AND ((d_moy#290 = 12) AND (d_year#288 = 2000))) AND isnotnull(d_date_sk#282)) "
          },
          "6" : {
            "sign" : 1478145555,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 180315,
            "rowCount" : 4007,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#15, i_brand_id#22, i_brand#23], BroadcastQueryStage 0 "
          },
          "1" : {
            "sign" : -1040607127,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 2725604443405569600,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_brand#23, i_brand_id#22, t_hour#159, t_minute#160], [i_brand_id#22 AS brand_id#251, i_brand#23 AS brand#252, t_hour#159, t_minute#160, MakeDecimal(sum(UnscaledValue(ext_price#239)),17,2) AS ext_price#253] "
          },
          "17" : {
            "sign" : -1908193340,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3324390288,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ext_sales_price#121 AS ext_price#243, cs_item_sk#113 AS sold_item_sk#245, cs_sold_time_sk#99 AS time_sk#246] "
          },
          "25" : {
            "sign" : 1981393768,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#254], BroadcastQueryStage 3 "
          },
          "14" : {
            "sign" : -2024467685,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12300,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#79) AND isnotnull(d_year#77)) AND ((d_moy#79 = 12) AND (d_year#77 = 2000))) AND isnotnull(d_date_sk#71)) "
          },
          "31" : {
            "sign" : -1878325215,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#282] "
          },
          "0" : {
            "sign" : 1023095625,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 2725604443405569600,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [ext_price#253 DESC NULLS LAST, brand_id#251 ASC NULLS FIRST], true "
          },
          "20" : {
            "sign" : -1862810146,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29651731824,
            "rowCount" : 142556403,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_sold_date_sk#132) AND isnotnull(cs_item_sk#113)) AND isnotnull(cs_sold_time_sk#99)) AND dynamicpruning#319 [cs_sold_date_sk#132]) "
          },
          "27" : {
            "sign" : -79154834,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 8497298720,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#282 = ss_sold_date_sk#155) "
          },
          "2" : {
            "sign" : 1133724078,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2725604443405569600,
            "rowCount" : 47817621814132800,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_brand_id#22, i_brand#23, ext_price#239, t_hour#159, t_minute#160] "
          },
          "18" : {
            "sign" : -599133984,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4432520384,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#254 = cs_sold_date_sk#132) "
          },
          "30" : {
            "sign" : -1782334540,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#133, ss_item_sk#134, ss_customer_sk#135, ss_cdemo_sk#136, ss_hdemo_sk#137, ss_addr_sk#138, ss_store_sk#139, ss_promo_sk#140, ss_ticket_number#141L, ss_quantity#142, ss_wholesale_cost#143, ss_list_price#144, ss_sales_price#145, ss_ext_discount_amt#146, ss_ext_sales_price#147, ss_ext_wholesale_cost#148, ss_ext_list_price#149, ss_ext_tax#150, ss_coupon_amt#151, ss_net_paid#152, ss_net_paid_inc_tax#153, ss_net_profit#154, ss_sold_date_sk#155], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "7" : {
            "sign" : 623144832,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 11365258848,
            "rowCount" : 473552452,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "29" : {
            "sign" : -1464326184,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39925727368,
            "rowCount" : 262669259,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(ss_sold_date_sk#155) AND isnotnull(ss_item_sk#134)) AND isnotnull(ss_sold_time_sk#133)) AND dynamicpruning#320 [ss_sold_date_sk#155]) "
          },
          "3" : {
            "sign" : -203692148,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3108145417918632000,
            "rowCount" : 47817621814132800,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (time_sk#242 = t_time_sk#156) "
          },
          "28" : {
            "sign" : 570485948,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 7354739252,
            "rowCount" : 262669259,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sold_time_sk#133, ss_item_sk#134, ss_ext_sales_price#147, ss_sold_date_sk#155] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalRelation",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalRelation",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalRelation",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalRelation",
          "toId" : 23,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Filter",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 20,
          "fromName" : "Filter",
          "toId" : 19,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Project",
          "toId" : 18,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "LogicalQueryStage",
          "toId" : 18,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Join",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "LogicalRelation",
          "toId" : 29,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "LogicalRelation",
          "toId" : 32,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "Filter",
          "toId" : 31,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Project",
          "toId" : 29,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 29,
          "fromName" : "Filter",
          "toId" : 28,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Project",
          "toId" : 27,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "LogicalQueryStage",
          "toId" : 27,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Join",
          "toId" : 26,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Union",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [ext_price#253 DESC NULLS LAST, brand_id#251 ASC NULLS FIRST], true\n+- Aggregate [i_brand#23, i_brand_id#22, t_hour#159, t_minute#160], [i_brand_id#22 AS brand_id#251, i_brand#23 AS brand#252, t_hour#159, t_minute#160, MakeDecimal(sum(UnscaledValue(ext_price#239)),17,2) AS ext_price#253]\n   +- Project [i_brand_id#22, i_brand#23, ext_price#239, t_hour#159, t_minute#160]\n      +- Join Inner, (time_sk#242 = t_time_sk#156)\n         :- Project [i_brand_id#22, i_brand#23, ext_price#239, time_sk#242]\n         :  +- Join Inner, (sold_item_sk#241 = i_item_sk#15)\n         :     :- LogicalQueryStage Project [i_item_sk#15, i_brand_id#22, i_brand#23], BroadcastQueryStage 0\n         :     +- Union false, false\n         :        :- Project [ws_ext_sales_price#59 AS ext_price#239, ws_item_sk#39 AS sold_item_sk#241, ws_sold_time_sk#37 AS time_sk#242]\n         :        :  +- Join Inner, (d_date_sk#71 = ws_sold_date_sk#70)\n         :        :     :- Project [ws_sold_time_sk#37, ws_item_sk#39, ws_ext_sales_price#59, ws_sold_date_sk#70]\n         :        :     :  +- Filter (((isnotnull(ws_sold_date_sk#70) AND isnotnull(ws_item_sk#39)) AND isnotnull(ws_sold_time_sk#37)) AND dynamicpruning#318 [ws_sold_date_sk#70])\n         :        :     :     :  +- Project [d_date_sk#71]\n         :        :     :     :     +- Filter (((isnotnull(d_moy#79) AND isnotnull(d_year#77)) AND ((d_moy#79 = 12) AND (d_year#77 = 2000))) AND isnotnull(d_date_sk#71))\n         :        :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#71,d_date_id#72,d_date#73,d_month_seq#74,d_week_seq#75,d_quarter_seq#76,d_year#77,d_dow#78,d_moy#79,d_dom#80,d_qoy#81,d_fy_year#82,d_fy_quarter_seq#83,d_fy_week_seq#84,d_day_name#85,d_quarter_name#86,d_holiday#87,d_weekend#88,d_following_holiday#89,d_first_dom#90,d_last_dom#91,d_same_day_ly#92,d_same_day_lq#93,d_current_day#94,... 4 more fields] parquet\n         :        :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#37,ws_ship_date_sk#38,ws_item_sk#39,ws_bill_customer_sk#40,ws_bill_cdemo_sk#41,ws_bill_hdemo_sk#42,ws_bill_addr_sk#43,ws_ship_customer_sk#44,ws_ship_cdemo_sk#45,ws_ship_hdemo_sk#46,ws_ship_addr_sk#47,ws_web_page_sk#48,ws_web_site_sk#49,ws_ship_mode_sk#50,ws_warehouse_sk#51,ws_promo_sk#52,ws_order_number#53L,ws_quantity#54,ws_wholesale_cost#55,ws_list_price#56,ws_sales_price#57,ws_ext_discount_amt#58,ws_ext_sales_price#59,ws_ext_wholesale_cost#60,... 10 more fields] parquet\n         :        :     +- LogicalQueryStage Project [d_date_sk#71], BroadcastQueryStage 1\n         :        :- Project [cs_ext_sales_price#121 AS ext_price#243, cs_item_sk#113 AS sold_item_sk#245, cs_sold_time_sk#99 AS time_sk#246]\n         :        :  +- Join Inner, (d_date_sk#254 = cs_sold_date_sk#132)\n         :        :     :- Project [cs_sold_time_sk#99, cs_item_sk#113, cs_ext_sales_price#121, cs_sold_date_sk#132]\n         :        :     :  +- Filter (((isnotnull(cs_sold_date_sk#132) AND isnotnull(cs_item_sk#113)) AND isnotnull(cs_sold_time_sk#99)) AND dynamicpruning#319 [cs_sold_date_sk#132])\n         :        :     :     :  +- Project [d_date_sk#254]\n         :        :     :     :     +- Filter (((isnotnull(d_moy#262) AND isnotnull(d_year#260)) AND ((d_moy#262 = 12) AND (d_year#260 = 2000))) AND isnotnull(d_date_sk#254))\n         :        :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#254,d_date_id#255,d_date#256,d_month_seq#257,d_week_seq#258,d_quarter_seq#259,d_year#260,d_dow#261,d_moy#262,d_dom#263,d_qoy#264,d_fy_year#265,d_fy_quarter_seq#266,d_fy_week_seq#267,d_day_name#268,d_quarter_name#269,d_holiday#270,d_weekend#271,d_following_holiday#272,d_first_dom#273,d_last_dom#274,d_same_day_ly#275,d_same_day_lq#276,d_current_day#277,... 4 more fields] parquet\n         :        :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#99,cs_ship_date_sk#100,cs_bill_customer_sk#101,cs_bill_cdemo_sk#102,cs_bill_hdemo_sk#103,cs_bill_addr_sk#104,cs_ship_customer_sk#105,cs_ship_cdemo_sk#106,cs_ship_hdemo_sk#107,cs_ship_addr_sk#108,cs_call_center_sk#109,cs_catalog_page_sk#110,cs_ship_mode_sk#111,cs_warehouse_sk#112,cs_item_sk#113,cs_promo_sk#114,cs_order_number#115L,cs_quantity#116,cs_wholesale_cost#117,cs_list_price#118,cs_sales_price#119,cs_ext_discount_amt#120,cs_ext_sales_price#121,cs_ext_wholesale_cost#122,... 10 more fields] parquet\n         :        :     +- LogicalQueryStage Project [d_date_sk#254], BroadcastQueryStage 3\n         :        +- Project [ss_ext_sales_price#147 AS ext_price#247, ss_item_sk#134 AS sold_item_sk#249, ss_sold_time_sk#133 AS time_sk#250]\n         :           +- Join Inner, (d_date_sk#282 = ss_sold_date_sk#155)\n         :              :- Project [ss_sold_time_sk#133, ss_item_sk#134, ss_ext_sales_price#147, ss_sold_date_sk#155]\n         :              :  +- Filter (((isnotnull(ss_sold_date_sk#155) AND isnotnull(ss_item_sk#134)) AND isnotnull(ss_sold_time_sk#133)) AND dynamicpruning#320 [ss_sold_date_sk#155])\n         :              :     :  +- Project [d_date_sk#282]\n         :              :     :     +- Filter (((isnotnull(d_moy#290) AND isnotnull(d_year#288)) AND ((d_moy#290 = 12) AND (d_year#288 = 2000))) AND isnotnull(d_date_sk#282))\n         :              :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#282,d_date_id#283,d_date#284,d_month_seq#285,d_week_seq#286,d_quarter_seq#287,d_year#288,d_dow#289,d_moy#290,d_dom#291,d_qoy#292,d_fy_year#293,d_fy_quarter_seq#294,d_fy_week_seq#295,d_day_name#296,d_quarter_name#297,d_holiday#298,d_weekend#299,d_following_holiday#300,d_first_dom#301,d_last_dom#302,d_same_day_ly#303,d_same_day_lq#304,d_current_day#305,... 4 more fields] parquet\n         :              :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#133,ss_item_sk#134,ss_customer_sk#135,ss_cdemo_sk#136,ss_hdemo_sk#137,ss_addr_sk#138,ss_store_sk#139,ss_promo_sk#140,ss_ticket_number#141L,ss_quantity#142,ss_wholesale_cost#143,ss_list_price#144,ss_sales_price#145,ss_ext_discount_amt#146,ss_ext_sales_price#147,ss_ext_wholesale_cost#148,ss_ext_list_price#149,ss_ext_tax#150,ss_coupon_amt#151,ss_net_paid#152,ss_net_paid_inc_tax#153,ss_net_profit#154,ss_sold_date_sk#155] parquet\n         :              +- LogicalQueryStage Project [d_date_sk#282], BroadcastQueryStage 5\n         +- LogicalQueryStage Project [t_time_sk#156, t_hour#159, t_minute#160], BroadcastQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 86581908875,
        "inputRowCount" : 490331351
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 4,
        "FinishedTasksTotalTimeInMs" : 4902.0,
        "FinishedTasksDistributionInMs" : [ 1160.0, 1171.0, 1171.0, 1400.0, 1400.0 ]
      },
      "StartTimeInMs" : 1702227289581,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 31398,
        "IOBytes" : {
          "Total" : 167708033,
          "Details" : {
            "IR" : 148536350,
            "IW" : 0,
            "SR" : 12082254,
            "SW" : 7089429
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : 509228971,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#282], BroadcastQueryStage 5 "
          },
          "12" : {
            "sign" : -699645913,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#37, ws_ship_date_sk#38, ws_item_sk#39, ws_bill_customer_sk#40, ws_bill_cdemo_sk#41, ws_bill_hdemo_sk#42, ws_bill_addr_sk#43, ws_ship_customer_sk#44, ws_ship_cdemo_sk#45, ws_ship_hdemo_sk#46, ws_ship_addr_sk#47, ws_web_page_sk#48, ws_web_site_sk#49, ws_ship_mode_sk#50, ws_warehouse_sk#51, ws_promo_sk#52, ws_order_number#53L, ws_quantity#54, ws_wholesale_cost#55, ws_list_price#56, ws_sales_price#57, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "8" : {
            "sign" : -700794220,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 53542282896,
            "rowCount" : 2230928454,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ext_sales_price#59 AS ext_price#239, ws_item_sk#39 AS sold_item_sk#241, ws_sold_time_sk#37 AS time_sk#242] "
          },
          "19" : {
            "sign" : -596969237,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3991579284,
            "rowCount" : 142556403,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_sold_time_sk#99, cs_item_sk#113, cs_ext_sales_price#121, cs_sold_date_sk#132] "
          },
          "23" : {
            "sign" : -1640516212,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12300,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#262) AND isnotnull(d_year#260)) AND ((d_moy#262 = 12) AND (d_year#260 = 2000))) AND isnotnull(d_date_sk#254)) "
          },
          "4" : {
            "sign" : -1150488563,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3141588057707096,
            "rowCount" : 59275246371832,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_brand_id#22, i_brand#23, ext_price#239, time_sk#242] "
          },
          "15" : {
            "sign" : -668436058,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#71, d_date_id#72, d_date#73, d_month_seq#74, d_week_seq#75, d_quarter_seq#76, d_year#77, d_dow#78, d_moy#79, d_dom#80, d_qoy#81, d_fy_year#82, d_fy_quarter_seq#83, d_fy_week_seq#84, d_day_name#85, d_quarter_name#86, d_holiday#87, d_weekend#88, d_following_holiday#89, d_first_dom#90, d_last_dom#91, d_same_day_ly#92, d_same_day_lq#93, d_current_day#94, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "11" : {
            "sign" : -1035164921,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14968810272,
            "rowCount" : 71965434,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(ws_sold_date_sk#70) AND isnotnull(ws_item_sk#39)) AND isnotnull(ws_sold_time_sk#37)) AND dynamicpruning#318 [ws_sold_date_sk#70]) "
          },
          "9" : {
            "sign" : -1485172402,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 71389710528,
            "rowCount" : 2230928454,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#71 = ws_sold_date_sk#70) "
          },
          "33" : {
            "sign" : -1081318410,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#282, d_date_id#283, d_date#284, d_month_seq#285, d_week_seq#286, d_quarter_seq#287, d_year#288, d_dow#289, d_moy#290, d_dom#291, d_qoy#292, d_fy_year#293, d_fy_quarter_seq#294, d_fy_week_seq#295, d_day_name#296, d_quarter_name#297, d_holiday#298, d_weekend#299, d_following_holiday#300, d_first_dom#301, d_last_dom#302, d_same_day_ly#303, d_same_day_lq#304, d_current_day#305, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "22" : {
            "sign" : 754672557,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#254] "
          },
          "26" : {
            "sign" : 212752419,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 195425928696,
            "rowCount" : 8142747029,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_ext_sales_price#147 AS ext_price#247, ss_item_sk#134 AS sold_item_sk#249, ss_sold_time_sk#133 AS time_sk#250] "
          },
          "13" : {
            "sign" : 1496036543,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#71] "
          },
          "24" : {
            "sign" : -1030755638,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#254, d_date_id#255, d_date#256, d_month_seq#257, d_week_seq#258, d_quarter_seq#259, d_year#260, d_dow#261, d_moy#262, d_dom#263, d_qoy#264, d_fy_year#265, d_fy_quarter_seq#266, d_fy_week_seq#267, d_day_name#268, d_quarter_name#269, d_holiday#270, d_weekend#271, d_following_holiday#272, d_first_dom#273, d_last_dom#274, d_same_day_ly#275, d_same_day_lq#276, d_current_day#277, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "35" : {
            "sign" : 183655171,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1451776,
            "rowCount" : 25200,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [t_time_sk#156, t_hour#159, t_minute#160], BroadcastQueryStage 6 "
          },
          "16" : {
            "sign" : -1128919823,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#71], BroadcastQueryStage 1 "
          },
          "5" : {
            "sign" : 1522059904,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3615790028681752,
            "rowCount" : 59275246371832,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (sold_item_sk#241 = i_item_sk#15) "
          },
          "10" : {
            "sign" : 755800508,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2015032152,
            "rowCount" : 71965434,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_sold_time_sk#37, ws_item_sk#39, ws_ext_sales_price#59, ws_sold_date_sk#70] "
          },
          "21" : {
            "sign" : -1465437660,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#99, cs_ship_date_sk#100, cs_bill_customer_sk#101, cs_bill_cdemo_sk#102, cs_bill_hdemo_sk#103, cs_bill_addr_sk#104, cs_ship_customer_sk#105, cs_ship_cdemo_sk#106, cs_ship_hdemo_sk#107, cs_ship_addr_sk#108, cs_call_center_sk#109, cs_catalog_page_sk#110, cs_ship_mode_sk#111, cs_warehouse_sk#112, cs_item_sk#113, cs_promo_sk#114, cs_order_number#115L, cs_quantity#116, cs_wholesale_cost#117, cs_list_price#118, cs_sales_price#119, cs_ext_discount_amt#120, cs_ext_sales_price#121, cs_ext_wholesale_cost#122, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "32" : {
            "sign" : -1754456043,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12300,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#290) AND isnotnull(d_year#288)) AND ((d_moy#290 = 12) AND (d_year#288 = 2000))) AND isnotnull(d_date_sk#282)) "
          },
          "6" : {
            "sign" : 1478145555,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 180315,
            "rowCount" : 4007,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#15, i_brand_id#22, i_brand#23], BroadcastQueryStage 0 "
          },
          "1" : {
            "sign" : -1040607127,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 85142963888499484800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_brand#23, i_brand_id#22, t_hour#159, t_minute#160], [i_brand_id#22 AS brand_id#251, i_brand#23 AS brand#252, t_hour#159, t_minute#160, MakeDecimal(sum(UnscaledValue(ext_price#239)),17,2) AS ext_price#253] "
          },
          "17" : {
            "sign" : -1908193340,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 106061963832,
            "rowCount" : 4419248493,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ext_sales_price#121 AS ext_price#243, cs_item_sk#113 AS sold_item_sk#245, cs_sold_time_sk#99 AS time_sk#246] "
          },
          "25" : {
            "sign" : 1981393768,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#254], BroadcastQueryStage 3 "
          },
          "14" : {
            "sign" : -2024467685,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12300,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#79) AND isnotnull(d_year#77)) AND ((d_moy#79 = 12) AND (d_year#77 = 2000))) AND isnotnull(d_date_sk#71)) "
          },
          "31" : {
            "sign" : -1878325215,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#282] "
          },
          "0" : {
            "sign" : 1023095625,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 85142963888499484800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [ext_price#253 DESC NULLS LAST, brand_id#251 ASC NULLS FIRST], true "
          },
          "20" : {
            "sign" : -1862810146,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29651731824,
            "rowCount" : 142556403,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_sold_date_sk#132) AND isnotnull(cs_item_sk#113)) AND isnotnull(cs_sold_time_sk#99)) AND dynamicpruning#319 [cs_sold_date_sk#132]) "
          },
          "27" : {
            "sign" : -79154834,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 260567904928,
            "rowCount" : 8142747029,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#282 = ss_sold_date_sk#155) "
          },
          "2" : {
            "sign" : 1133724078,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 85142963888499484800,
            "rowCount" : 1493736208570166400,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_brand_id#22, i_brand#23, ext_price#239, t_hour#159, t_minute#160] "
          },
          "18" : {
            "sign" : -599133984,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 141415951776,
            "rowCount" : 4419248493,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#254 = cs_sold_date_sk#132) "
          },
          "30" : {
            "sign" : -1782334540,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#133, ss_item_sk#134, ss_customer_sk#135, ss_cdemo_sk#136, ss_hdemo_sk#137, ss_addr_sk#138, ss_store_sk#139, ss_promo_sk#140, ss_ticket_number#141L, ss_quantity#142, ss_wholesale_cost#143, ss_list_price#144, ss_sales_price#145, ss_ext_discount_amt#146, ss_ext_sales_price#147, ss_ext_wholesale_cost#148, ss_ext_list_price#149, ss_ext_tax#150, ss_coupon_amt#151, ss_net_paid#152, ss_net_paid_inc_tax#153, ss_net_profit#154, ss_sold_date_sk#155], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "7" : {
            "sign" : 623144832,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 355030175424,
            "rowCount" : 14792923976,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "29" : {
            "sign" : -1464326184,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39925727368,
            "rowCount" : 262669259,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(ss_sold_date_sk#155) AND isnotnull(ss_item_sk#134)) AND isnotnull(ss_sold_time_sk#133)) AND dynamicpruning#320 [ss_sold_date_sk#155]) "
          },
          "3" : {
            "sign" : -203692148,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 97092853557060816000,
            "rowCount" : 1493736208570166400,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (time_sk#242 = t_time_sk#156) "
          },
          "28" : {
            "sign" : 570485948,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 7354739252,
            "rowCount" : 262669259,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sold_time_sk#133, ss_item_sk#134, ss_ext_sales_price#147, ss_sold_date_sk#155] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalRelation",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalRelation",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalRelation",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalRelation",
          "toId" : 23,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Filter",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 20,
          "fromName" : "Filter",
          "toId" : 19,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Project",
          "toId" : 18,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "LogicalQueryStage",
          "toId" : 18,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Join",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "LogicalRelation",
          "toId" : 29,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "LogicalRelation",
          "toId" : 32,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "Filter",
          "toId" : 31,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Project",
          "toId" : 29,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 29,
          "fromName" : "Filter",
          "toId" : 28,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Project",
          "toId" : 27,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "LogicalQueryStage",
          "toId" : 27,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Join",
          "toId" : 26,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Union",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [ext_price#253 DESC NULLS LAST, brand_id#251 ASC NULLS FIRST], true\n+- Aggregate [i_brand#23, i_brand_id#22, t_hour#159, t_minute#160], [i_brand_id#22 AS brand_id#251, i_brand#23 AS brand#252, t_hour#159, t_minute#160, MakeDecimal(sum(UnscaledValue(ext_price#239)),17,2) AS ext_price#253]\n   +- Project [i_brand_id#22, i_brand#23, ext_price#239, t_hour#159, t_minute#160]\n      +- Join Inner, (time_sk#242 = t_time_sk#156)\n         :- Project [i_brand_id#22, i_brand#23, ext_price#239, time_sk#242]\n         :  +- Join Inner, (sold_item_sk#241 = i_item_sk#15)\n         :     :- LogicalQueryStage Project [i_item_sk#15, i_brand_id#22, i_brand#23], BroadcastQueryStage 0\n         :     +- Union false, false\n         :        :- Project [ws_ext_sales_price#59 AS ext_price#239, ws_item_sk#39 AS sold_item_sk#241, ws_sold_time_sk#37 AS time_sk#242]\n         :        :  +- Join Inner, (d_date_sk#71 = ws_sold_date_sk#70)\n         :        :     :- Project [ws_sold_time_sk#37, ws_item_sk#39, ws_ext_sales_price#59, ws_sold_date_sk#70]\n         :        :     :  +- Filter (((isnotnull(ws_sold_date_sk#70) AND isnotnull(ws_item_sk#39)) AND isnotnull(ws_sold_time_sk#37)) AND dynamicpruning#318 [ws_sold_date_sk#70])\n         :        :     :     :  +- Project [d_date_sk#71]\n         :        :     :     :     +- Filter (((isnotnull(d_moy#79) AND isnotnull(d_year#77)) AND ((d_moy#79 = 12) AND (d_year#77 = 2000))) AND isnotnull(d_date_sk#71))\n         :        :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#71,d_date_id#72,d_date#73,d_month_seq#74,d_week_seq#75,d_quarter_seq#76,d_year#77,d_dow#78,d_moy#79,d_dom#80,d_qoy#81,d_fy_year#82,d_fy_quarter_seq#83,d_fy_week_seq#84,d_day_name#85,d_quarter_name#86,d_holiday#87,d_weekend#88,d_following_holiday#89,d_first_dom#90,d_last_dom#91,d_same_day_ly#92,d_same_day_lq#93,d_current_day#94,... 4 more fields] parquet\n         :        :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#37,ws_ship_date_sk#38,ws_item_sk#39,ws_bill_customer_sk#40,ws_bill_cdemo_sk#41,ws_bill_hdemo_sk#42,ws_bill_addr_sk#43,ws_ship_customer_sk#44,ws_ship_cdemo_sk#45,ws_ship_hdemo_sk#46,ws_ship_addr_sk#47,ws_web_page_sk#48,ws_web_site_sk#49,ws_ship_mode_sk#50,ws_warehouse_sk#51,ws_promo_sk#52,ws_order_number#53L,ws_quantity#54,ws_wholesale_cost#55,ws_list_price#56,ws_sales_price#57,ws_ext_discount_amt#58,ws_ext_sales_price#59,ws_ext_wholesale_cost#60,... 10 more fields] parquet\n         :        :     +- LogicalQueryStage Project [d_date_sk#71], BroadcastQueryStage 1\n         :        :- Project [cs_ext_sales_price#121 AS ext_price#243, cs_item_sk#113 AS sold_item_sk#245, cs_sold_time_sk#99 AS time_sk#246]\n         :        :  +- Join Inner, (d_date_sk#254 = cs_sold_date_sk#132)\n         :        :     :- Project [cs_sold_time_sk#99, cs_item_sk#113, cs_ext_sales_price#121, cs_sold_date_sk#132]\n         :        :     :  +- Filter (((isnotnull(cs_sold_date_sk#132) AND isnotnull(cs_item_sk#113)) AND isnotnull(cs_sold_time_sk#99)) AND dynamicpruning#319 [cs_sold_date_sk#132])\n         :        :     :     :  +- Project [d_date_sk#254]\n         :        :     :     :     +- Filter (((isnotnull(d_moy#262) AND isnotnull(d_year#260)) AND ((d_moy#262 = 12) AND (d_year#260 = 2000))) AND isnotnull(d_date_sk#254))\n         :        :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#254,d_date_id#255,d_date#256,d_month_seq#257,d_week_seq#258,d_quarter_seq#259,d_year#260,d_dow#261,d_moy#262,d_dom#263,d_qoy#264,d_fy_year#265,d_fy_quarter_seq#266,d_fy_week_seq#267,d_day_name#268,d_quarter_name#269,d_holiday#270,d_weekend#271,d_following_holiday#272,d_first_dom#273,d_last_dom#274,d_same_day_ly#275,d_same_day_lq#276,d_current_day#277,... 4 more fields] parquet\n         :        :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#99,cs_ship_date_sk#100,cs_bill_customer_sk#101,cs_bill_cdemo_sk#102,cs_bill_hdemo_sk#103,cs_bill_addr_sk#104,cs_ship_customer_sk#105,cs_ship_cdemo_sk#106,cs_ship_hdemo_sk#107,cs_ship_addr_sk#108,cs_call_center_sk#109,cs_catalog_page_sk#110,cs_ship_mode_sk#111,cs_warehouse_sk#112,cs_item_sk#113,cs_promo_sk#114,cs_order_number#115L,cs_quantity#116,cs_wholesale_cost#117,cs_list_price#118,cs_sales_price#119,cs_ext_discount_amt#120,cs_ext_sales_price#121,cs_ext_wholesale_cost#122,... 10 more fields] parquet\n         :        :     +- LogicalQueryStage Project [d_date_sk#254], BroadcastQueryStage 3\n         :        +- Project [ss_ext_sales_price#147 AS ext_price#247, ss_item_sk#134 AS sold_item_sk#249, ss_sold_time_sk#133 AS time_sk#250]\n         :           +- Join Inner, (d_date_sk#282 = ss_sold_date_sk#155)\n         :              :- Project [ss_sold_time_sk#133, ss_item_sk#134, ss_ext_sales_price#147, ss_sold_date_sk#155]\n         :              :  +- Filter (((isnotnull(ss_sold_date_sk#155) AND isnotnull(ss_item_sk#134)) AND isnotnull(ss_sold_time_sk#133)) AND dynamicpruning#320 [ss_sold_date_sk#155])\n         :              :     :  +- Project [d_date_sk#282]\n         :              :     :     +- Filter (((isnotnull(d_moy#290) AND isnotnull(d_year#288)) AND ((d_moy#290 = 12) AND (d_year#288 = 2000))) AND isnotnull(d_date_sk#282))\n         :              :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#282,d_date_id#283,d_date#284,d_month_seq#285,d_week_seq#286,d_quarter_seq#287,d_year#288,d_dow#289,d_moy#290,d_dom#291,d_qoy#292,d_fy_year#293,d_fy_quarter_seq#294,d_fy_week_seq#295,d_day_name#296,d_quarter_name#297,d_holiday#298,d_weekend#299,d_following_holiday#300,d_first_dom#301,d_last_dom#302,d_same_day_ly#303,d_same_day_lq#304,d_current_day#305,... 4 more fields] parquet\n         :              :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#133,ss_item_sk#134,ss_customer_sk#135,ss_cdemo_sk#136,ss_hdemo_sk#137,ss_addr_sk#138,ss_store_sk#139,ss_promo_sk#140,ss_ticket_number#141L,ss_quantity#142,ss_wholesale_cost#143,ss_list_price#144,ss_sales_price#145,ss_ext_discount_amt#146,ss_ext_sales_price#147,ss_ext_wholesale_cost#148,ss_ext_list_price#149,ss_ext_tax#150,ss_coupon_amt#151,ss_net_paid#152,ss_net_paid_inc_tax#153,ss_net_profit#154,ss_sold_date_sk#155] parquet\n         :              +- LogicalQueryStage Project [d_date_sk#282], BroadcastQueryStage 5\n         +- LogicalQueryStage Project [t_time_sk#156, t_hour#159, t_minute#160], BroadcastQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 86585053547,
        "inputRowCount" : 490331294
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 4,
        "FinishedTasksTotalTimeInMs" : 4902.0,
        "FinishedTasksDistributionInMs" : [ 1160.0, 1171.0, 1171.0, 1400.0, 1400.0 ]
      },
      "StartTimeInMs" : 1702227289633,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 31346,
        "IOBytes" : {
          "Total" : 167708033,
          "Details" : {
            "IR" : 148536350,
            "IW" : 0,
            "SR" : 12082254,
            "SW" : 7089429
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : 509228971,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#282], BroadcastQueryStage 5 "
          },
          "12" : {
            "sign" : -699645913,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#37, ws_ship_date_sk#38, ws_item_sk#39, ws_bill_customer_sk#40, ws_bill_cdemo_sk#41, ws_bill_hdemo_sk#42, ws_bill_addr_sk#43, ws_ship_customer_sk#44, ws_ship_cdemo_sk#45, ws_ship_hdemo_sk#46, ws_ship_addr_sk#47, ws_web_page_sk#48, ws_web_site_sk#49, ws_ship_mode_sk#50, ws_warehouse_sk#51, ws_promo_sk#52, ws_order_number#53L, ws_quantity#54, ws_wholesale_cost#55, ws_list_price#56, ws_sales_price#57, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "8" : {
            "sign" : -700794220,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 53542282896,
            "rowCount" : 2230928454,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ext_sales_price#59 AS ext_price#239, ws_item_sk#39 AS sold_item_sk#241, ws_sold_time_sk#37 AS time_sk#242] "
          },
          "19" : {
            "sign" : -596969237,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3991579284,
            "rowCount" : 142556403,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_sold_time_sk#99, cs_item_sk#113, cs_ext_sales_price#121, cs_sold_date_sk#132] "
          },
          "23" : {
            "sign" : -1640516212,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12300,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#262) AND isnotnull(d_year#260)) AND ((d_moy#262 = 12) AND (d_year#260 = 2000))) AND isnotnull(d_date_sk#254)) "
          },
          "4" : {
            "sign" : -1150488563,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2438228901420224,
            "rowCount" : 55414293214096,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_brand_id#22, i_brand#23, ext_price#239, time_sk#242] "
          },
          "15" : {
            "sign" : -668436058,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#71, d_date_id#72, d_date#73, d_month_seq#74, d_week_seq#75, d_quarter_seq#76, d_year#77, d_dow#78, d_moy#79, d_dom#80, d_qoy#81, d_fy_year#82, d_fy_quarter_seq#83, d_fy_week_seq#84, d_day_name#85, d_quarter_name#86, d_holiday#87, d_weekend#88, d_following_holiday#89, d_first_dom#90, d_last_dom#91, d_same_day_ly#92, d_same_day_lq#93, d_current_day#94, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "11" : {
            "sign" : -1035164921,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14968810272,
            "rowCount" : 71965434,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(ws_sold_date_sk#70) AND isnotnull(ws_item_sk#39)) AND isnotnull(ws_sold_time_sk#37)) AND dynamicpruning#318 [ws_sold_date_sk#70]) "
          },
          "9" : {
            "sign" : -1485172402,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 71389710528,
            "rowCount" : 2230928454,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#71 = ws_sold_date_sk#70) "
          },
          "33" : {
            "sign" : -1081318410,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#282, d_date_id#283, d_date#284, d_month_seq#285, d_week_seq#286, d_quarter_seq#287, d_year#288, d_dow#289, d_moy#290, d_dom#291, d_qoy#292, d_fy_year#293, d_fy_quarter_seq#294, d_fy_week_seq#295, d_day_name#296, d_quarter_name#297, d_holiday#298, d_weekend#299, d_following_holiday#300, d_first_dom#301, d_last_dom#302, d_same_day_ly#303, d_same_day_lq#304, d_current_day#305, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "22" : {
            "sign" : 754672557,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#254] "
          },
          "26" : {
            "sign" : 212752419,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 195425928696,
            "rowCount" : 8142747029,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_ext_sales_price#147 AS ext_price#247, ss_item_sk#134 AS sold_item_sk#249, ss_sold_time_sk#133 AS time_sk#250] "
          },
          "13" : {
            "sign" : 1496036543,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#71] "
          },
          "24" : {
            "sign" : -1030755638,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#254, d_date_id#255, d_date#256, d_month_seq#257, d_week_seq#258, d_quarter_seq#259, d_year#260, d_dow#261, d_moy#262, d_dom#263, d_qoy#264, d_fy_year#265, d_fy_quarter_seq#266, d_fy_week_seq#267, d_day_name#268, d_quarter_name#269, d_holiday#270, d_weekend#271, d_following_holiday#272, d_first_dom#273, d_last_dom#274, d_same_day_ly#275, d_same_day_lq#276, d_current_day#277, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "35" : {
            "sign" : 183655171,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1451776,
            "rowCount" : 25200,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [t_time_sk#156, t_hour#159, t_minute#160], BroadcastQueryStage 6 "
          },
          "16" : {
            "sign" : -1128919823,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#71], BroadcastQueryStage 1 "
          },
          "5" : {
            "sign" : 1522059904,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2881543247132992,
            "rowCount" : 55414293214096,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (sold_item_sk#241 = i_item_sk#15) "
          },
          "10" : {
            "sign" : 755800508,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2015032152,
            "rowCount" : 71965434,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_sold_time_sk#37, ws_item_sk#39, ws_ext_sales_price#59, ws_sold_date_sk#70] "
          },
          "21" : {
            "sign" : -1465437660,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#99, cs_ship_date_sk#100, cs_bill_customer_sk#101, cs_bill_cdemo_sk#102, cs_bill_hdemo_sk#103, cs_bill_addr_sk#104, cs_ship_customer_sk#105, cs_ship_cdemo_sk#106, cs_ship_hdemo_sk#107, cs_ship_addr_sk#108, cs_call_center_sk#109, cs_catalog_page_sk#110, cs_ship_mode_sk#111, cs_warehouse_sk#112, cs_item_sk#113, cs_promo_sk#114, cs_order_number#115L, cs_quantity#116, cs_wholesale_cost#117, cs_list_price#118, cs_sales_price#119, cs_ext_discount_amt#120, cs_ext_sales_price#121, cs_ext_wholesale_cost#122, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "32" : {
            "sign" : -1754456043,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12300,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#290) AND isnotnull(d_year#288)) AND ((d_moy#290 = 12) AND (d_year#288 = 2000))) AND isnotnull(d_date_sk#282)) "
          },
          "6" : {
            "sign" : 1478145555,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1179648,
            "rowCount" : 3746,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#15, i_brand_id#22, i_brand#23], BroadcastQueryStage 0 "
          },
          "1" : {
            "sign" : -1040607127,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 67029129071770521600,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_brand#23, i_brand_id#22, t_hour#159, t_minute#160], [i_brand_id#22 AS brand_id#251, i_brand#23 AS brand#252, t_hour#159, t_minute#160, MakeDecimal(sum(UnscaledValue(ext_price#239)),17,2) AS ext_price#253] "
          },
          "17" : {
            "sign" : -1908193340,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 106061963832,
            "rowCount" : 4419248493,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ext_sales_price#121 AS ext_price#243, cs_item_sk#113 AS sold_item_sk#245, cs_sold_time_sk#99 AS time_sk#246] "
          },
          "25" : {
            "sign" : 1981393768,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#254], BroadcastQueryStage 3 "
          },
          "14" : {
            "sign" : -2024467685,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 12300,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#79) AND isnotnull(d_year#77)) AND ((d_moy#79 = 12) AND (d_year#77 = 2000))) AND isnotnull(d_date_sk#71)) "
          },
          "31" : {
            "sign" : -1878325215,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#282] "
          },
          "0" : {
            "sign" : 1023095625,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 67029129071770521600,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [ext_price#253 DESC NULLS LAST, brand_id#251 ASC NULLS FIRST], true "
          },
          "20" : {
            "sign" : -1862810146,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29651731824,
            "rowCount" : 142556403,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_sold_date_sk#132) AND isnotnull(cs_item_sk#113)) AND isnotnull(cs_sold_time_sk#99)) AND dynamicpruning#319 [cs_sold_date_sk#132]) "
          },
          "27" : {
            "sign" : -79154834,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 260567904928,
            "rowCount" : 8142747029,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#282 = ss_sold_date_sk#155) "
          },
          "2" : {
            "sign" : 1133724078,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 67029129071770521600,
            "rowCount" : 1396440188995219200,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_brand_id#22, i_brand#23, ext_price#239, t_hour#159, t_minute#160] "
          },
          "18" : {
            "sign" : -599133984,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 141415951776,
            "rowCount" : 4419248493,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#254 = cs_sold_date_sk#132) "
          },
          "30" : {
            "sign" : -1782334540,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#133, ss_item_sk#134, ss_customer_sk#135, ss_cdemo_sk#136, ss_hdemo_sk#137, ss_addr_sk#138, ss_store_sk#139, ss_promo_sk#140, ss_ticket_number#141L, ss_quantity#142, ss_wholesale_cost#143, ss_list_price#144, ss_sales_price#145, ss_ext_discount_amt#146, ss_ext_sales_price#147, ss_ext_wholesale_cost#148, ss_ext_list_price#149, ss_ext_tax#150, ss_coupon_amt#151, ss_net_paid#152, ss_net_paid_inc_tax#153, ss_net_profit#154, ss_sold_date_sk#155], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "7" : {
            "sign" : 623144832,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 355030175424,
            "rowCount" : 14792923976,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "29" : {
            "sign" : -1464326184,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39925727368,
            "rowCount" : 262669259,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(ss_sold_date_sk#155) AND isnotnull(ss_item_sk#134)) AND isnotnull(ss_sold_time_sk#133)) AND dynamicpruning#320 [ss_sold_date_sk#155]) "
          },
          "3" : {
            "sign" : -203692148,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 78200650583732275200,
            "rowCount" : 1396440188995219200,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (time_sk#242 = t_time_sk#156) "
          },
          "28" : {
            "sign" : 570485948,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 7354739252,
            "rowCount" : 262669259,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sold_time_sk#133, ss_item_sk#134, ss_ext_sales_price#147, ss_sold_date_sk#155] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalRelation",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalRelation",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalRelation",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalRelation",
          "toId" : 23,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Filter",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 20,
          "fromName" : "Filter",
          "toId" : 19,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Project",
          "toId" : 18,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "LogicalQueryStage",
          "toId" : 18,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Join",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "LogicalRelation",
          "toId" : 29,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "LogicalRelation",
          "toId" : 32,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "Filter",
          "toId" : 31,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Project",
          "toId" : 29,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 29,
          "fromName" : "Filter",
          "toId" : 28,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Project",
          "toId" : 27,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "LogicalQueryStage",
          "toId" : 27,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Join",
          "toId" : 26,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Union",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [ext_price#253 DESC NULLS LAST, brand_id#251 ASC NULLS FIRST], true\n+- Aggregate [i_brand#23, i_brand_id#22, t_hour#159, t_minute#160], [i_brand_id#22 AS brand_id#251, i_brand#23 AS brand#252, t_hour#159, t_minute#160, MakeDecimal(sum(UnscaledValue(ext_price#239)),17,2) AS ext_price#253]\n   +- Project [i_brand_id#22, i_brand#23, ext_price#239, t_hour#159, t_minute#160]\n      +- Join Inner, (time_sk#242 = t_time_sk#156)\n         :- Project [i_brand_id#22, i_brand#23, ext_price#239, time_sk#242]\n         :  +- Join Inner, (sold_item_sk#241 = i_item_sk#15)\n         :     :- LogicalQueryStage Project [i_item_sk#15, i_brand_id#22, i_brand#23], BroadcastQueryStage 0\n         :     +- Union false, false\n         :        :- Project [ws_ext_sales_price#59 AS ext_price#239, ws_item_sk#39 AS sold_item_sk#241, ws_sold_time_sk#37 AS time_sk#242]\n         :        :  +- Join Inner, (d_date_sk#71 = ws_sold_date_sk#70)\n         :        :     :- Project [ws_sold_time_sk#37, ws_item_sk#39, ws_ext_sales_price#59, ws_sold_date_sk#70]\n         :        :     :  +- Filter (((isnotnull(ws_sold_date_sk#70) AND isnotnull(ws_item_sk#39)) AND isnotnull(ws_sold_time_sk#37)) AND dynamicpruning#318 [ws_sold_date_sk#70])\n         :        :     :     :  +- Project [d_date_sk#71]\n         :        :     :     :     +- Filter (((isnotnull(d_moy#79) AND isnotnull(d_year#77)) AND ((d_moy#79 = 12) AND (d_year#77 = 2000))) AND isnotnull(d_date_sk#71))\n         :        :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#71,d_date_id#72,d_date#73,d_month_seq#74,d_week_seq#75,d_quarter_seq#76,d_year#77,d_dow#78,d_moy#79,d_dom#80,d_qoy#81,d_fy_year#82,d_fy_quarter_seq#83,d_fy_week_seq#84,d_day_name#85,d_quarter_name#86,d_holiday#87,d_weekend#88,d_following_holiday#89,d_first_dom#90,d_last_dom#91,d_same_day_ly#92,d_same_day_lq#93,d_current_day#94,... 4 more fields] parquet\n         :        :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#37,ws_ship_date_sk#38,ws_item_sk#39,ws_bill_customer_sk#40,ws_bill_cdemo_sk#41,ws_bill_hdemo_sk#42,ws_bill_addr_sk#43,ws_ship_customer_sk#44,ws_ship_cdemo_sk#45,ws_ship_hdemo_sk#46,ws_ship_addr_sk#47,ws_web_page_sk#48,ws_web_site_sk#49,ws_ship_mode_sk#50,ws_warehouse_sk#51,ws_promo_sk#52,ws_order_number#53L,ws_quantity#54,ws_wholesale_cost#55,ws_list_price#56,ws_sales_price#57,ws_ext_discount_amt#58,ws_ext_sales_price#59,ws_ext_wholesale_cost#60,... 10 more fields] parquet\n         :        :     +- LogicalQueryStage Project [d_date_sk#71], BroadcastQueryStage 1\n         :        :- Project [cs_ext_sales_price#121 AS ext_price#243, cs_item_sk#113 AS sold_item_sk#245, cs_sold_time_sk#99 AS time_sk#246]\n         :        :  +- Join Inner, (d_date_sk#254 = cs_sold_date_sk#132)\n         :        :     :- Project [cs_sold_time_sk#99, cs_item_sk#113, cs_ext_sales_price#121, cs_sold_date_sk#132]\n         :        :     :  +- Filter (((isnotnull(cs_sold_date_sk#132) AND isnotnull(cs_item_sk#113)) AND isnotnull(cs_sold_time_sk#99)) AND dynamicpruning#319 [cs_sold_date_sk#132])\n         :        :     :     :  +- Project [d_date_sk#254]\n         :        :     :     :     +- Filter (((isnotnull(d_moy#262) AND isnotnull(d_year#260)) AND ((d_moy#262 = 12) AND (d_year#260 = 2000))) AND isnotnull(d_date_sk#254))\n         :        :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#254,d_date_id#255,d_date#256,d_month_seq#257,d_week_seq#258,d_quarter_seq#259,d_year#260,d_dow#261,d_moy#262,d_dom#263,d_qoy#264,d_fy_year#265,d_fy_quarter_seq#266,d_fy_week_seq#267,d_day_name#268,d_quarter_name#269,d_holiday#270,d_weekend#271,d_following_holiday#272,d_first_dom#273,d_last_dom#274,d_same_day_ly#275,d_same_day_lq#276,d_current_day#277,... 4 more fields] parquet\n         :        :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#99,cs_ship_date_sk#100,cs_bill_customer_sk#101,cs_bill_cdemo_sk#102,cs_bill_hdemo_sk#103,cs_bill_addr_sk#104,cs_ship_customer_sk#105,cs_ship_cdemo_sk#106,cs_ship_hdemo_sk#107,cs_ship_addr_sk#108,cs_call_center_sk#109,cs_catalog_page_sk#110,cs_ship_mode_sk#111,cs_warehouse_sk#112,cs_item_sk#113,cs_promo_sk#114,cs_order_number#115L,cs_quantity#116,cs_wholesale_cost#117,cs_list_price#118,cs_sales_price#119,cs_ext_discount_amt#120,cs_ext_sales_price#121,cs_ext_wholesale_cost#122,... 10 more fields] parquet\n         :        :     +- LogicalQueryStage Project [d_date_sk#254], BroadcastQueryStage 3\n         :        +- Project [ss_ext_sales_price#147 AS ext_price#247, ss_item_sk#134 AS sold_item_sk#249, ss_sold_time_sk#133 AS time_sk#250]\n         :           +- Join Inner, (d_date_sk#282 = ss_sold_date_sk#155)\n         :              :- Project [ss_sold_time_sk#133, ss_item_sk#134, ss_ext_sales_price#147, ss_sold_date_sk#155]\n         :              :  +- Filter (((isnotnull(ss_sold_date_sk#155) AND isnotnull(ss_item_sk#134)) AND isnotnull(ss_sold_time_sk#133)) AND dynamicpruning#320 [ss_sold_date_sk#155])\n         :              :     :  +- Project [d_date_sk#282]\n         :              :     :     +- Filter (((isnotnull(d_moy#290) AND isnotnull(d_year#288)) AND ((d_moy#290 = 12) AND (d_year#288 = 2000))) AND isnotnull(d_date_sk#282))\n         :              :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#282,d_date_id#283,d_date#284,d_month_seq#285,d_week_seq#286,d_quarter_seq#287,d_year#288,d_dow#289,d_moy#290,d_dom#291,d_qoy#292,d_fy_year#293,d_fy_quarter_seq#294,d_fy_week_seq#295,d_day_name#296,d_quarter_name#297,d_holiday#298,d_weekend#299,d_following_holiday#300,d_first_dom#301,d_last_dom#302,d_same_day_ly#303,d_same_day_lq#304,d_current_day#305,... 4 more fields] parquet\n         :              :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#133,ss_item_sk#134,ss_customer_sk#135,ss_cdemo_sk#136,ss_hdemo_sk#137,ss_addr_sk#138,ss_store_sk#139,ss_promo_sk#140,ss_ticket_number#141L,ss_quantity#142,ss_wholesale_cost#143,ss_list_price#144,ss_sales_price#145,ss_ext_discount_amt#146,ss_ext_sales_price#147,ss_ext_wholesale_cost#148,ss_ext_list_price#149,ss_ext_tax#150,ss_coupon_amt#151,ss_net_paid#152,ss_net_paid_inc_tax#153,ss_net_profit#154,ss_sold_date_sk#155] parquet\n         :              +- LogicalQueryStage Project [d_date_sk#282], BroadcastQueryStage 5\n         +- LogicalQueryStage Project [t_time_sk#156, t_hour#159, t_minute#160], BroadcastQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 86586052880,
        "inputRowCount" : 490331033
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702227290713,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 30266,
        "IOBytes" : {
          "Total" : 166135929,
          "Details" : {
            "IR" : 146964246,
            "IW" : 0,
            "SR" : 12082254,
            "SW" : 7089429
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "4" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -996273653,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7579544,
                "rowCount" : 111689
              },
              "compileTime" : {
                "sizeInBytes" : 7325640,
                "rowCount" : 128520
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [i_brand#23, i_brand_id#22, t_hour#159, t_minute#160], [i_brand_id#22 AS brand_id#251, i_brand#23 AS brand#252, t_hour#159, t_minute#160, MakeDecimal(sum(UnscaledValue(ext_price#239)),17,2) AS ext_price#253], HashAggregate(keys=[i_brand#23, i_brand_id#22, t_hour#159, t_minute#160], functions=[sum(UnscaledValue(ext_price#239))]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [i_brand#23, i_brand_id#22, t_hour#159, t_minute#160], [i_brand_id#22 AS brand_id#251, i_brand#23 AS brand#252, t_hour#159, t_minute#160, MakeDecimal(sum(UnscaledValue(ext_price#239)),17,2) AS ext_price#253], HashAggregate(keys=[i_brand#23, i_brand_id#22, t_hour#159, t_minute#160], functions=[sum(UnscaledValue(ext_price#239))])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -710705261,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 7579544,
            "rowCount" : 111689,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [5]: [i_brand#23, i_brand_id#22, t_hour#159, t_minute#160, sum#322L] Keys [4]: [i_brand#23, i_brand_id#22, t_hour#159, t_minute#160] Functions [1]: [sum(UnscaledValue(ext_price#239))] Aggregate Attributes [1]: [sum(UnscaledValue(ext_price#239))#310L] Results [5]: [i_brand_id#22 AS brand_id#251, i_brand#23 AS brand#252, t_hour#159, t_minute#160, MakeDecimal(sum(UnscaledValue(ext_price#239))#310L,17,2) AS ext_price#253] "
          },
          "1" : {
            "sign" : 1482876857,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 7325640,
            "rowCount" : 128520,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [5]: [i_brand#23, i_brand_id#22, t_hour#159, t_minute#160, sum#322L] Arguments: 7 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[i_brand#23, i_brand_id#22, t_hour#159, t_minute#160], functions=[sum(UnscaledValue(ext_price#239))], output=[brand_id#251, brand#252, t_hour#159, t_minute#160, ext_price#253])\n+- ShuffleQueryStage 7\n   +- Exchange hashpartitioning(i_brand#23, i_brand_id#22, t_hour#159, t_minute#160, 200), ENSURE_REQUIREMENTS, [plan_id=885]\n      +- *(9) HashAggregate(keys=[i_brand#23, i_brand_id#22, t_hour#159, t_minute#160], functions=[partial_sum(UnscaledValue(ext_price#239))], output=[i_brand#23, i_brand_id#22, t_hour#159, t_minute#160, sum#322L])\n         +- *(9) Project [i_brand_id#22, i_brand#23, ext_price#239, t_hour#159, t_minute#160]\n            +- *(9) BroadcastHashJoin [time_sk#242], [t_time_sk#156], Inner, BuildRight, false\n               :- *(9) Project [i_brand_id#22, i_brand#23, ext_price#239, time_sk#242]\n               :  +- *(9) BroadcastHashJoin [i_item_sk#15], [sold_item_sk#241], Inner, BuildLeft, false\n               :     :- BroadcastQueryStage 0\n               :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=297]\n               :     :     +- *(1) Project [i_item_sk#15, i_brand_id#22, i_brand#23]\n               :     :        +- *(1) Filter ((isnotnull(i_manager_id#35) AND (i_manager_id#35 = 1)) AND isnotnull(i_item_sk#15))\n               :     :           +- *(1) ColumnarToRow\n               :     :              +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#15,i_brand_id#22,i_brand#23,i_manager_id#35] Batched: true, DataFilters: [isnotnull(i_manager_id#35), (i_manager_id#35 = 1), isnotnull(i_item_sk#15)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,1), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_brand:string,i_manager_id:int>\n               :     +- Union\n               :        :- *(6) Project [ws_ext_sales_price#59 AS ext_price#239, ws_item_sk#39 AS sold_item_sk#241, ws_sold_time_sk#37 AS time_sk#242]\n               :        :  +- *(6) BroadcastHashJoin [ws_sold_date_sk#70], [d_date_sk#71], Inner, BuildRight, false\n               :        :     :- *(6) Filter (isnotnull(ws_item_sk#39) AND isnotnull(ws_sold_time_sk#37))\n               :        :     :  +- *(6) ColumnarToRow\n               :        :     :     +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#37,ws_item_sk#39,ws_ext_sales_price#59,ws_sold_date_sk#70] Batched: true, DataFilters: [isnotnull(ws_item_sk#39), isnotnull(ws_sold_time_sk#37)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#70), dynamicpruningexpression(ws_sold_date_sk#70 IN dynamicpruning#318)], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_time_sk)], ReadSchema: struct<ws_sold_time_sk:int,ws_item_sk:int,ws_ext_sales_price:decimal(7,2)>\n               :        :     :           +- SubqueryBroadcast dynamicpruning#318, 0, [d_date_sk#71], [id=#756]\n               :        :     :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                +- == Final Plan ==\n                                                   BroadcastQueryStage 1\n                                                   +- ReusedExchange [d_date_sk#71], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=316]\n                                                +- == Initial Plan ==\n                                                   BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=753]\n                                                   +- Project [d_date_sk#71]\n                                                      +- Filter ((((isnotnull(d_moy#79) AND isnotnull(d_year#77)) AND (d_moy#79 = 12)) AND (d_year#77 = 2000)) AND isnotnull(d_date_sk#71))\n                                                         +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#71,d_year#77,d_moy#79] Batched: true, DataFilters: [isnotnull(d_moy#79), isnotnull(d_year#77), (d_moy#79 = 12), (d_year#77 = 2000), isnotnull(d_date..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,12), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n               :        :     +- BroadcastQueryStage 1\n               :        :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=316]\n               :        :           +- *(2) Project [d_date_sk#71]\n               :        :              +- *(2) Filter ((((isnotnull(d_moy#79) AND isnotnull(d_year#77)) AND (d_moy#79 = 12)) AND (d_year#77 = 2000)) AND isnotnull(d_date_sk#71))\n               :        :                 +- *(2) ColumnarToRow\n               :        :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#71,d_year#77,d_moy#79] Batched: true, DataFilters: [isnotnull(d_moy#79), isnotnull(d_year#77), (d_moy#79 = 12), (d_year#77 = 2000), isnotnull(d_date..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,12), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n               :        :- *(7) Project [cs_ext_sales_price#121 AS ext_price#243, cs_item_sk#113 AS sold_item_sk#245, cs_sold_time_sk#99 AS time_sk#246]\n               :        :  +- *(7) BroadcastHashJoin [cs_sold_date_sk#132], [d_date_sk#254], Inner, BuildRight, false\n               :        :     :- *(7) Filter (isnotnull(cs_item_sk#113) AND isnotnull(cs_sold_time_sk#99))\n               :        :     :  +- *(7) ColumnarToRow\n               :        :     :     +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#99,cs_item_sk#113,cs_ext_sales_price#121,cs_sold_date_sk#132] Batched: true, DataFilters: [isnotnull(cs_item_sk#113), isnotnull(cs_sold_time_sk#99)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#132), dynamicpruningexpression(cs_sold_date_sk#132 IN dynamicpruning#3..., PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_time_sk)], ReadSchema: struct<cs_sold_time_sk:int,cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>\n               :        :     :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#318, 0, [d_date_sk#71], [id=#756]\n               :        :     +- BroadcastQueryStage 3\n               :        :        +- ReusedExchange [d_date_sk#254], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=316]\n               :        +- *(8) Project [ss_ext_sales_price#147 AS ext_price#247, ss_item_sk#134 AS sold_item_sk#249, ss_sold_time_sk#133 AS time_sk#250]\n               :           +- *(8) BroadcastHashJoin [ss_sold_date_sk#155], [d_date_sk#282], Inner, BuildRight, false\n               :              :- *(8) Filter (isnotnull(ss_item_sk#134) AND isnotnull(ss_sold_time_sk#133))\n               :              :  +- *(8) ColumnarToRow\n               :              :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#133,ss_item_sk#134,ss_ext_sales_price#147,ss_sold_date_sk#155] Batched: true, DataFilters: [isnotnull(ss_item_sk#134), isnotnull(ss_sold_time_sk#133)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#155), dynamicpruningexpression(ss_sold_date_sk#155 IN dynamicpruning#3..., PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_time_sk)], ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>\n               :              :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#318, 0, [d_date_sk#71], [id=#756]\n               :              +- BroadcastQueryStage 5\n               :                 +- ReusedExchange [d_date_sk#282], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=316]\n               +- BroadcastQueryStage 6\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=386]\n                     +- *(5) Project [t_time_sk#156, t_hour#159, t_minute#160]\n                        +- *(5) Filter (((t_meal_time#165 = breakfast) OR (t_meal_time#165 = dinner)) AND isnotnull(t_time_sk#156))\n                           +- *(5) ColumnarToRow\n                              +- FileScan parquet spark_catalog.tpcds_100.time_dim[t_time_sk#156,t_hour#159,t_minute#160,t_meal_time#165] Batched: true, DataFilters: [((t_meal_time#165 = breakfast) OR (t_meal_time#165 = dinner)), isnotnull(t_time_sk#156)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/time_dim], PartitionFilters: [], PushedFilters: [Or(EqualTo(t_meal_time,breakfast),EqualTo(t_meal_time,dinner)), IsNotNull(t_time_sk)], ReadSchema: struct<t_time_sk:int,t_hour:int,t_minute:int,t_meal_time:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 7579544,
        "inputRowCount" : 111689
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "0" : [ 26382, 28628, 23843, 28842, 24934, 27008, 25373, 24870, 26401, 29564, 27378, 26016, 23472, 24934, 27647, 24194, 26059, 25223, 25321, 27563, 25672, 25145, 26485, 27104, 25012, 27564, 26327, 26010, 26357, 28571, 24751, 28455, 27323, 27232, 26850, 26026, 25662, 25269, 24446, 24799, 26014, 25516, 26630, 26482, 27040, 27515, 25265, 25572, 25204, 24402, 24437, 25562, 27772, 26018, 25151, 26126, 27003, 26392, 26026, 25152, 26496, 26607, 26235, 26177, 25784, 27674, 27469, 27277, 24984, 27512, 27989, 27196, 28906, 28247, 24732, 24835, 25895, 28697, 26836, 23500, 26596, 25281, 25939, 26840, 26954, 27811, 28311, 24731, 24439, 24045, 27468, 26942, 26751, 25221, 23875, 25266, 25505, 25641, 28287, 26669, 26424, 25969, 26778, 25308, 28027, 27263, 25933, 27395, 26231, 25337, 26846, 24009, 27544, 25142, 27351, 22756, 22998, 25062, 25066, 28869, 25194, 25115, 25670, 25610, 25637, 25323, 24150, 26159, 26090, 24227, 28052, 26090, 28128, 25387, 23457, 26459, 26989, 27010, 24883, 25895, 25794, 28492, 25474, 24949, 28287, 24968, 26208, 26569, 26405, 25386, 24024, 26019, 26639, 24244, 26006, 24418, 27941, 26031, 28968, 25150, 28100, 27663, 26913, 26084, 27170, 26617, 25875, 25828, 24981, 23731, 27714, 24788, 27320, 24995, 26407, 26160, 27605, 25815, 26179, 26303, 26718, 24838, 26474, 28132, 26123, 26372, 25748, 24719, 24734, 24929, 25741, 27163, 26980, 24061, 24957, 26553, 27778, 29070, 25689, 27085 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 8, 10 ],
      "Objectives" : {
        "DurationInMs" : 10070,
        "TotalTasksDurationInMs" : 9889,
        "IOBytes" : {
          "Total" : 12082254,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 9985650,
            "SW" : 2096604
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1764127099,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7325640,
                "rowCount" : 128520
              },
              "compileTime" : {
                "sizeInBytes" : 7325640,
                "rowCount" : 128520
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [ext_price#253 DESC NULLS LAST, brand_id#251 ASC NULLS FIRST], true "
          }
        },
        "links" : [ ],
        "rawPlan" : "Sort [ext_price#253 DESC NULLS LAST, brand_id#251 ASC NULLS FIRST], true\n+- Aggregate [i_brand#23, i_brand_id#22, t_hour#159, t_minute#160], [i_brand_id#22 AS brand_id#251, i_brand#23 AS brand#252, t_hour#159, t_minute#160, MakeDecimal(sum(UnscaledValue(ext_price#239)),17,2) AS ext_price#253]\n   +- Project [i_brand_id#22, i_brand#23, ext_price#239, t_hour#159, t_minute#160]\n      +- Join Inner, (time_sk#242 = t_time_sk#156)\n         :- Project [i_brand_id#22, i_brand#23, ext_price#239, time_sk#242]\n         :  +- Join Inner, (sold_item_sk#241 = i_item_sk#15)\n         :     :- Project [i_item_sk#15, i_brand_id#22, i_brand#23]\n         :     :  +- Filter ((isnotnull(i_manager_id#35) AND (i_manager_id#35 = 1)) AND isnotnull(i_item_sk#15))\n         :     :     +- Relation spark_catalog.tpcds_100.item[i_item_sk#15,i_item_id#16,i_rec_start_date#17,i_rec_end_date#18,i_item_desc#19,i_current_price#20,i_wholesale_cost#21,i_brand_id#22,i_brand#23,i_class_id#24,i_class#25,i_category_id#26,i_category#27,i_manufact_id#28,i_manufact#29,i_size#30,i_formulation#31,i_color#32,i_units#33,i_container#34,i_manager_id#35,i_product_name#36] parquet\n         :     +- Union false, false\n         :        :- Project [ws_ext_sales_price#59 AS ext_price#239, ws_item_sk#39 AS sold_item_sk#241, ws_sold_time_sk#37 AS time_sk#242]\n         :        :  +- Join Inner, (d_date_sk#71 = ws_sold_date_sk#70)\n         :        :     :- Project [ws_sold_time_sk#37, ws_item_sk#39, ws_ext_sales_price#59, ws_sold_date_sk#70]\n         :        :     :  +- Filter (((isnotnull(ws_sold_date_sk#70) AND isnotnull(ws_item_sk#39)) AND isnotnull(ws_sold_time_sk#37)) AND dynamicpruning#318 [ws_sold_date_sk#70])\n         :        :     :     :  +- Project [d_date_sk#71]\n         :        :     :     :     +- Filter (((isnotnull(d_moy#79) AND isnotnull(d_year#77)) AND ((d_moy#79 = 12) AND (d_year#77 = 2000))) AND isnotnull(d_date_sk#71))\n         :        :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#71,d_date_id#72,d_date#73,d_month_seq#74,d_week_seq#75,d_quarter_seq#76,d_year#77,d_dow#78,d_moy#79,d_dom#80,d_qoy#81,d_fy_year#82,d_fy_quarter_seq#83,d_fy_week_seq#84,d_day_name#85,d_quarter_name#86,d_holiday#87,d_weekend#88,d_following_holiday#89,d_first_dom#90,d_last_dom#91,d_same_day_ly#92,d_same_day_lq#93,d_current_day#94,... 4 more fields] parquet\n         :        :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#37,ws_ship_date_sk#38,ws_item_sk#39,ws_bill_customer_sk#40,ws_bill_cdemo_sk#41,ws_bill_hdemo_sk#42,ws_bill_addr_sk#43,ws_ship_customer_sk#44,ws_ship_cdemo_sk#45,ws_ship_hdemo_sk#46,ws_ship_addr_sk#47,ws_web_page_sk#48,ws_web_site_sk#49,ws_ship_mode_sk#50,ws_warehouse_sk#51,ws_promo_sk#52,ws_order_number#53L,ws_quantity#54,ws_wholesale_cost#55,ws_list_price#56,ws_sales_price#57,ws_ext_discount_amt#58,ws_ext_sales_price#59,ws_ext_wholesale_cost#60,... 10 more fields] parquet\n         :        :     +- Project [d_date_sk#71]\n         :        :        +- Filter (((isnotnull(d_moy#79) AND isnotnull(d_year#77)) AND ((d_moy#79 = 12) AND (d_year#77 = 2000))) AND isnotnull(d_date_sk#71))\n         :        :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#71,d_date_id#72,d_date#73,d_month_seq#74,d_week_seq#75,d_quarter_seq#76,d_year#77,d_dow#78,d_moy#79,d_dom#80,d_qoy#81,d_fy_year#82,d_fy_quarter_seq#83,d_fy_week_seq#84,d_day_name#85,d_quarter_name#86,d_holiday#87,d_weekend#88,d_following_holiday#89,d_first_dom#90,d_last_dom#91,d_same_day_ly#92,d_same_day_lq#93,d_current_day#94,... 4 more fields] parquet\n         :        :- Project [cs_ext_sales_price#121 AS ext_price#243, cs_item_sk#113 AS sold_item_sk#245, cs_sold_time_sk#99 AS time_sk#246]\n         :        :  +- Join Inner, (d_date_sk#254 = cs_sold_date_sk#132)\n         :        :     :- Project [cs_sold_time_sk#99, cs_item_sk#113, cs_ext_sales_price#121, cs_sold_date_sk#132]\n         :        :     :  +- Filter (((isnotnull(cs_sold_date_sk#132) AND isnotnull(cs_item_sk#113)) AND isnotnull(cs_sold_time_sk#99)) AND dynamicpruning#319 [cs_sold_date_sk#132])\n         :        :     :     :  +- Project [d_date_sk#254]\n         :        :     :     :     +- Filter (((isnotnull(d_moy#262) AND isnotnull(d_year#260)) AND ((d_moy#262 = 12) AND (d_year#260 = 2000))) AND isnotnull(d_date_sk#254))\n         :        :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#254,d_date_id#255,d_date#256,d_month_seq#257,d_week_seq#258,d_quarter_seq#259,d_year#260,d_dow#261,d_moy#262,d_dom#263,d_qoy#264,d_fy_year#265,d_fy_quarter_seq#266,d_fy_week_seq#267,d_day_name#268,d_quarter_name#269,d_holiday#270,d_weekend#271,d_following_holiday#272,d_first_dom#273,d_last_dom#274,d_same_day_ly#275,d_same_day_lq#276,d_current_day#277,... 4 more fields] parquet\n         :        :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#99,cs_ship_date_sk#100,cs_bill_customer_sk#101,cs_bill_cdemo_sk#102,cs_bill_hdemo_sk#103,cs_bill_addr_sk#104,cs_ship_customer_sk#105,cs_ship_cdemo_sk#106,cs_ship_hdemo_sk#107,cs_ship_addr_sk#108,cs_call_center_sk#109,cs_catalog_page_sk#110,cs_ship_mode_sk#111,cs_warehouse_sk#112,cs_item_sk#113,cs_promo_sk#114,cs_order_number#115L,cs_quantity#116,cs_wholesale_cost#117,cs_list_price#118,cs_sales_price#119,cs_ext_discount_amt#120,cs_ext_sales_price#121,cs_ext_wholesale_cost#122,... 10 more fields] parquet\n         :        :     +- Project [d_date_sk#254]\n         :        :        +- Filter (((isnotnull(d_moy#262) AND isnotnull(d_year#260)) AND ((d_moy#262 = 12) AND (d_year#260 = 2000))) AND isnotnull(d_date_sk#254))\n         :        :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#254,d_date_id#255,d_date#256,d_month_seq#257,d_week_seq#258,d_quarter_seq#259,d_year#260,d_dow#261,d_moy#262,d_dom#263,d_qoy#264,d_fy_year#265,d_fy_quarter_seq#266,d_fy_week_seq#267,d_day_name#268,d_quarter_name#269,d_holiday#270,d_weekend#271,d_following_holiday#272,d_first_dom#273,d_last_dom#274,d_same_day_ly#275,d_same_day_lq#276,d_current_day#277,... 4 more fields] parquet\n         :        +- Project [ss_ext_sales_price#147 AS ext_price#247, ss_item_sk#134 AS sold_item_sk#249, ss_sold_time_sk#133 AS time_sk#250]\n         :           +- Join Inner, (d_date_sk#282 = ss_sold_date_sk#155)\n         :              :- Project [ss_sold_time_sk#133, ss_item_sk#134, ss_ext_sales_price#147, ss_sold_date_sk#155]\n         :              :  +- Filter (((isnotnull(ss_sold_date_sk#155) AND isnotnull(ss_item_sk#134)) AND isnotnull(ss_sold_time_sk#133)) AND dynamicpruning#320 [ss_sold_date_sk#155])\n         :              :     :  +- Project [d_date_sk#282]\n         :              :     :     +- Filter (((isnotnull(d_moy#290) AND isnotnull(d_year#288)) AND ((d_moy#290 = 12) AND (d_year#288 = 2000))) AND isnotnull(d_date_sk#282))\n         :              :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#282,d_date_id#283,d_date#284,d_month_seq#285,d_week_seq#286,d_quarter_seq#287,d_year#288,d_dow#289,d_moy#290,d_dom#291,d_qoy#292,d_fy_year#293,d_fy_quarter_seq#294,d_fy_week_seq#295,d_day_name#296,d_quarter_name#297,d_holiday#298,d_weekend#299,d_following_holiday#300,d_first_dom#301,d_last_dom#302,d_same_day_ly#303,d_same_day_lq#304,d_current_day#305,... 4 more fields] parquet\n         :              :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#133,ss_item_sk#134,ss_customer_sk#135,ss_cdemo_sk#136,ss_hdemo_sk#137,ss_addr_sk#138,ss_store_sk#139,ss_promo_sk#140,ss_ticket_number#141L,ss_quantity#142,ss_wholesale_cost#143,ss_list_price#144,ss_sales_price#145,ss_ext_discount_amt#146,ss_ext_sales_price#147,ss_ext_wholesale_cost#148,ss_ext_list_price#149,ss_ext_tax#150,ss_coupon_amt#151,ss_net_paid#152,ss_net_paid_inc_tax#153,ss_net_profit#154,ss_sold_date_sk#155] parquet\n         :              +- Project [d_date_sk#282]\n         :                 +- Filter (((isnotnull(d_moy#290) AND isnotnull(d_year#288)) AND ((d_moy#290 = 12) AND (d_year#288 = 2000))) AND isnotnull(d_date_sk#282))\n         :                    +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#282,d_date_id#283,d_date#284,d_month_seq#285,d_week_seq#286,d_quarter_seq#287,d_year#288,d_dow#289,d_moy#290,d_dom#291,d_qoy#292,d_fy_year#293,d_fy_quarter_seq#294,d_fy_week_seq#295,d_day_name#296,d_quarter_name#297,d_holiday#298,d_weekend#299,d_following_holiday#300,d_first_dom#301,d_last_dom#302,d_same_day_ly#303,d_same_day_lq#304,d_current_day#305,... 4 more fields] parquet\n         +- Project [t_time_sk#156, t_hour#159, t_minute#160]\n            +- Filter (((t_meal_time#165 = breakfast) OR (t_meal_time#165 = dinner)) AND isnotnull(t_time_sk#156))\n               +- Relation spark_catalog.tpcds_100.time_dim[t_time_sk#156,t_time_id#157,t_time#158,t_hour#159,t_minute#160,t_second#161,t_am_pm#162,t_shift#163,t_sub_shift#164,t_meal_time#165] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 362533435,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : 7325640,
            "rowCount" : 128520,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [5]: [brand_id#251, brand#252, t_hour#159, t_minute#160, ext_price#253] Arguments: [ext_price#253 DESC NULLS LAST, brand_id#251 ASC NULLS FIRST], true, 0 "
          },
          "1" : {
            "sign" : -1215449801,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 4903416,
            "rowCount" : 72530,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [5]: [brand_id#251, brand#252, t_hour#159, t_minute#160, ext_price#253] Arguments: 8 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [ext_price#253 DESC NULLS LAST, brand_id#251 ASC NULLS FIRST], true, 0\n+- ShuffleQueryStage 8\n   +- Exchange rangepartitioning(ext_price#253 DESC NULLS LAST, brand_id#251 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [plan_id=974]\n      +- *(10) HashAggregate(keys=[i_brand#23, i_brand_id#22, t_hour#159, t_minute#160], functions=[sum(UnscaledValue(ext_price#239))], output=[brand_id#251, brand#252, t_hour#159, t_minute#160, ext_price#253])\n         +- AQEShuffleRead coalesced\n            +- ShuffleQueryStage 7\n               +- Exchange hashpartitioning(i_brand#23, i_brand_id#22, t_hour#159, t_minute#160, 200), ENSURE_REQUIREMENTS, [plan_id=885]\n                  +- *(9) HashAggregate(keys=[i_brand#23, i_brand_id#22, t_hour#159, t_minute#160], functions=[partial_sum(UnscaledValue(ext_price#239))], output=[i_brand#23, i_brand_id#22, t_hour#159, t_minute#160, sum#322L])\n                     +- *(9) Project [i_brand_id#22, i_brand#23, ext_price#239, t_hour#159, t_minute#160]\n                        +- *(9) BroadcastHashJoin [time_sk#242], [t_time_sk#156], Inner, BuildRight, false\n                           :- *(9) Project [i_brand_id#22, i_brand#23, ext_price#239, time_sk#242]\n                           :  +- *(9) BroadcastHashJoin [i_item_sk#15], [sold_item_sk#241], Inner, BuildLeft, false\n                           :     :- BroadcastQueryStage 0\n                           :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=297]\n                           :     :     +- *(1) Project [i_item_sk#15, i_brand_id#22, i_brand#23]\n                           :     :        +- *(1) Filter ((isnotnull(i_manager_id#35) AND (i_manager_id#35 = 1)) AND isnotnull(i_item_sk#15))\n                           :     :           +- *(1) ColumnarToRow\n                           :     :              +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#15,i_brand_id#22,i_brand#23,i_manager_id#35] Batched: true, DataFilters: [isnotnull(i_manager_id#35), (i_manager_id#35 = 1), isnotnull(i_item_sk#15)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,1), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_brand:string,i_manager_id:int>\n                           :     +- Union\n                           :        :- *(6) Project [ws_ext_sales_price#59 AS ext_price#239, ws_item_sk#39 AS sold_item_sk#241, ws_sold_time_sk#37 AS time_sk#242]\n                           :        :  +- *(6) BroadcastHashJoin [ws_sold_date_sk#70], [d_date_sk#71], Inner, BuildRight, false\n                           :        :     :- *(6) Filter (isnotnull(ws_item_sk#39) AND isnotnull(ws_sold_time_sk#37))\n                           :        :     :  +- *(6) ColumnarToRow\n                           :        :     :     +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#37,ws_item_sk#39,ws_ext_sales_price#59,ws_sold_date_sk#70] Batched: true, DataFilters: [isnotnull(ws_item_sk#39), isnotnull(ws_sold_time_sk#37)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#70), dynamicpruningexpression(ws_sold_date_sk#70 IN dynamicpruning#318)], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_time_sk)], ReadSchema: struct<ws_sold_time_sk:int,ws_item_sk:int,ws_ext_sales_price:decimal(7,2)>\n                           :        :     :           +- SubqueryBroadcast dynamicpruning#318, 0, [d_date_sk#71], [id=#756]\n                           :        :     :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                            +- == Final Plan ==\n                                                               BroadcastQueryStage 1\n                                                               +- ReusedExchange [d_date_sk#71], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=316]\n                                                            +- == Initial Plan ==\n                                                               BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=753]\n                                                               +- Project [d_date_sk#71]\n                                                                  +- Filter ((((isnotnull(d_moy#79) AND isnotnull(d_year#77)) AND (d_moy#79 = 12)) AND (d_year#77 = 2000)) AND isnotnull(d_date_sk#71))\n                                                                     +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#71,d_year#77,d_moy#79] Batched: true, DataFilters: [isnotnull(d_moy#79), isnotnull(d_year#77), (d_moy#79 = 12), (d_year#77 = 2000), isnotnull(d_date..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,12), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n                           :        :     +- BroadcastQueryStage 1\n                           :        :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=316]\n                           :        :           +- *(2) Project [d_date_sk#71]\n                           :        :              +- *(2) Filter ((((isnotnull(d_moy#79) AND isnotnull(d_year#77)) AND (d_moy#79 = 12)) AND (d_year#77 = 2000)) AND isnotnull(d_date_sk#71))\n                           :        :                 +- *(2) ColumnarToRow\n                           :        :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#71,d_year#77,d_moy#79] Batched: true, DataFilters: [isnotnull(d_moy#79), isnotnull(d_year#77), (d_moy#79 = 12), (d_year#77 = 2000), isnotnull(d_date..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,12), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n                           :        :- *(7) Project [cs_ext_sales_price#121 AS ext_price#243, cs_item_sk#113 AS sold_item_sk#245, cs_sold_time_sk#99 AS time_sk#246]\n                           :        :  +- *(7) BroadcastHashJoin [cs_sold_date_sk#132], [d_date_sk#254], Inner, BuildRight, false\n                           :        :     :- *(7) Filter (isnotnull(cs_item_sk#113) AND isnotnull(cs_sold_time_sk#99))\n                           :        :     :  +- *(7) ColumnarToRow\n                           :        :     :     +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#99,cs_item_sk#113,cs_ext_sales_price#121,cs_sold_date_sk#132] Batched: true, DataFilters: [isnotnull(cs_item_sk#113), isnotnull(cs_sold_time_sk#99)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#132), dynamicpruningexpression(cs_sold_date_sk#132 IN dynamicpruning#3..., PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_time_sk)], ReadSchema: struct<cs_sold_time_sk:int,cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>\n                           :        :     :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#318, 0, [d_date_sk#71], [id=#756]\n                           :        :     +- BroadcastQueryStage 3\n                           :        :        +- ReusedExchange [d_date_sk#254], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=316]\n                           :        +- *(8) Project [ss_ext_sales_price#147 AS ext_price#247, ss_item_sk#134 AS sold_item_sk#249, ss_sold_time_sk#133 AS time_sk#250]\n                           :           +- *(8) BroadcastHashJoin [ss_sold_date_sk#155], [d_date_sk#282], Inner, BuildRight, false\n                           :              :- *(8) Filter (isnotnull(ss_item_sk#134) AND isnotnull(ss_sold_time_sk#133))\n                           :              :  +- *(8) ColumnarToRow\n                           :              :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#133,ss_item_sk#134,ss_ext_sales_price#147,ss_sold_date_sk#155] Batched: true, DataFilters: [isnotnull(ss_item_sk#134), isnotnull(ss_sold_time_sk#133)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#155), dynamicpruningexpression(ss_sold_date_sk#155 IN dynamicpruning#3..., PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_time_sk)], ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>\n                           :              :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#318, 0, [d_date_sk#71], [id=#756]\n                           :              +- BroadcastQueryStage 5\n                           :                 +- ReusedExchange [d_date_sk#282], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=316]\n                           +- BroadcastQueryStage 6\n                              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=386]\n                                 +- *(5) Project [t_time_sk#156, t_hour#159, t_minute#160]\n                                    +- *(5) Filter (((t_meal_time#165 = breakfast) OR (t_meal_time#165 = dinner)) AND isnotnull(t_time_sk#156))\n                                       +- *(5) ColumnarToRow\n                                          +- FileScan parquet spark_catalog.tpcds_100.time_dim[t_time_sk#156,t_hour#159,t_minute#160,t_meal_time#165] Batched: true, DataFilters: [((t_meal_time#165 = breakfast) OR (t_meal_time#165 = dinner)), isnotnull(t_time_sk#156)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/time_dim], PartitionFilters: [], PushedFilters: [Or(EqualTo(t_meal_time,breakfast),EqualTo(t_meal_time,dinner)), IsNotNull(t_time_sk)], ReadSchema: struct<t_time_sk:int,t_hour:int,t_minute:int,t_meal_time:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 4903416,
        "inputRowCount" : 72530
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "1" : [ 9412, 9412, 10353, 10353, 10353, 10353, 10353, 10353, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 11388, 10353, 11388, 11388, 11388, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 11388, 11388, 11388, 10353, 11388, 11388, 11388, 11388, 11388, 10353, 11388, 11388, 11388, 11388, 11388, 11388, 10353, 11388, 10353, 11388, 10353, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 10353, 10353, 11388, 11388, 11388, 11388, 11388, 10353, 10353, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 10353, 10353, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 10353, 11388, 11388, 11388, 10353, 11388, 10353, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 10353, 11388, 11388, 11388, 11388, 10353, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 10353, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 10353, 11388, 11388, 11388, 11388, 10353, 11388, 11388, 11388, 11388, 11388, 10353, 11388, 10353, 11388, 10353, 10353, 10353, 10353, 11388, 11388, 11388, 11388, 11388, 11388, 10353, 11388, 11388, 11388, 11388, 11388, 11388, 10353, 11388, 11388, 10353, 11388, 10353, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 11388, 10353, 10353, 11388, 10353, 11388, 10353, 11388, 10353, 11388, 11388, 10353, 10353, 9412 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 13 ],
      "Objectives" : {
        "DurationInMs" : 254,
        "TotalTasksDurationInMs" : 243,
        "IOBytes" : {
          "Total" : 2096604,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 2096604,
            "SW" : 0
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1496036543,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 600,
                "rowCount" : 50
              },
              "compileTime" : {
                "sizeInBytes" : 600,
                "rowCount" : 50
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#71] "
          },
          "1" : {
            "sign" : -2024467685,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 12300,
                "rowCount" : 50
              },
              "compileTime" : {
                "sizeInBytes" : 12300,
                "rowCount" : 50
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(d_moy#79) AND isnotnull(d_year#77)) AND ((d_moy#79 = 12) AND (d_year#77 = 2000))) AND isnotnull(d_date_sk#71)) "
          },
          "2" : {
            "sign" : -668436058,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#71, d_date_id#72, d_date#73, d_month_seq#74, d_week_seq#75, d_quarter_seq#76, d_year#77, d_dow#78, d_moy#79, d_dom#80, d_qoy#81, d_fy_year#82, d_fy_quarter_seq#83, d_fy_week_seq#84, d_day_name#85, d_quarter_name#86, d_holiday#87, d_weekend#88, d_following_holiday#89, d_first_dom#90, d_last_dom#91, d_same_day_ly#92, d_same_day_lq#93, d_current_day#94, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#71]\n+- Filter (((isnotnull(d_moy#79) AND isnotnull(d_year#77)) AND ((d_moy#79 = 12) AND (d_year#77 = 2000))) AND isnotnull(d_date_sk#71))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#71,d_date_id#72,d_date#73,d_month_seq#74,d_week_seq#75,d_quarter_seq#76,d_year#77,d_dow#78,d_moy#79,d_dom#80,d_qoy#81,d_fy_year#82,d_fy_quarter_seq#83,d_fy_week_seq#84,d_day_name#85,d_quarter_name#86,d_holiday#87,d_weekend#88,d_following_holiday#89,d_first_dom#90,d_last_dom#91,d_same_day_ly#92,d_same_day_lq#93,d_current_day#94,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1203484449,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [d_date_sk#71] Input [3]: [d_date_sk#71, d_year#77, d_moy#79] "
          },
          "1" : {
            "sign" : -819074571,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [d_date_sk#71, d_year#77, d_moy#79] Condition : ((((isnotnull(d_moy#79) AND isnotnull(d_year#77)) AND (d_moy#79 = 12)) AND (d_year#77 = 2000)) AND isnotnull(d_date_sk#71)) "
          },
          "2" : {
            "sign" : -1491407630,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 600,
            "rowCount" : 50,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [3]: [d_date_sk#71, d_year#77, d_moy#79] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,12), EqualTo(d_year,2000), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#71]\n+- Filter ((((isnotnull(d_moy#79) AND isnotnull(d_year#77)) AND (d_moy#79 = 12)) AND (d_year#77 = 2000)) AND isnotnull(d_date_sk#71))\n   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#71,d_year#77,d_moy#79] Batched: true, DataFilters: [isnotnull(d_moy#79), isnotnull(d_year#77), (d_moy#79 = 12), (d_year#77 = 2000), isnotnull(d_date..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,12), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 600,
        "inputRowCount" : 50
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 5 ],
      "Objectives" : {
        "DurationInMs" : 1526,
        "TotalTasksDurationInMs" : 1519,
        "IOBytes" : {
          "Total" : 93950,
          "Details" : {
            "IR" : 93950,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1532875022,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 180315,
                "rowCount" : 4007
              },
              "compileTime" : {
                "sizeInBytes" : 180315,
                "rowCount" : 4007
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#15, i_brand_id#22, i_brand#23] "
          },
          "1" : {
            "sign" : -1015691821,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1706982,
                "rowCount" : 4007
              },
              "compileTime" : {
                "sizeInBytes" : 1706982,
                "rowCount" : 4007
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(i_manager_id#35) AND (i_manager_id#35 = 1)) AND isnotnull(i_item_sk#15)) "
          },
          "2" : {
            "sign" : -966080617,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#15, i_item_id#16, i_rec_start_date#17, i_rec_end_date#18, i_item_desc#19, i_current_price#20, i_wholesale_cost#21, i_brand_id#22, i_brand#23, i_class_id#24, i_class#25, i_category_id#26, i_category#27, i_manufact_id#28, i_manufact#29, i_size#30, i_formulation#31, i_color#32, i_units#33, i_container#34, i_manager_id#35, i_product_name#36], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#15, i_brand_id#22, i_brand#23]\n+- Filter ((isnotnull(i_manager_id#35) AND (i_manager_id#35 = 1)) AND isnotnull(i_item_sk#15))\n   +- Relation spark_catalog.tpcds_100.item[i_item_sk#15,i_item_id#16,i_rec_start_date#17,i_rec_end_date#18,i_item_desc#19,i_current_price#20,i_wholesale_cost#21,i_brand_id#22,i_brand#23,i_class_id#24,i_class#25,i_category_id#26,i_category#27,i_manufact_id#28,i_manufact#29,i_size#30,i_formulation#31,i_color#32,i_units#33,i_container#34,i_manager_id#35,i_product_name#36] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -901437010,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 180315,
            "rowCount" : 4007,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [i_item_sk#15, i_brand_id#22, i_brand#23] Input [4]: [i_item_sk#15, i_brand_id#22, i_brand#23, i_manager_id#35] "
          },
          "1" : {
            "sign" : -2042099917,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 180315,
            "rowCount" : 4007,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [i_item_sk#15, i_brand_id#22, i_brand#23, i_manager_id#35] Condition : ((isnotnull(i_manager_id#35) AND (i_manager_id#35 = 1)) AND isnotnull(i_item_sk#15)) "
          },
          "2" : {
            "sign" : -478060553,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 180315,
            "rowCount" : 4007,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.item Output [4]: [i_item_sk#15, i_brand_id#22, i_brand#23, i_manager_id#35] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item] PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,1), IsNotNull(i_item_sk)] ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_brand:string,i_manager_id:int> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.item",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#15, i_brand_id#22, i_brand#23]\n+- Filter ((isnotnull(i_manager_id#35) AND (i_manager_id#35 = 1)) AND isnotnull(i_item_sk#15))\n   +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#15,i_brand_id#22,i_brand#23,i_manager_id#35] Batched: true, DataFilters: [isnotnull(i_manager_id#35), (i_manager_id#35 = 1), isnotnull(i_item_sk#15)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,1), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_brand:string,i_manager_id:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 180315,
        "inputRowCount" : 4007
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 4 ],
      "Objectives" : {
        "DurationInMs" : 2672,
        "TotalTasksDurationInMs" : 7567,
        "IOBytes" : {
          "Total" : 1572104,
          "Details" : {
            "IR" : 1572104,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1959304097,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 960020,
                "rowCount" : 48001
              },
              "compileTime" : {
                "sizeInBytes" : 960020,
                "rowCount" : 48001
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [t_time_sk#156, t_hour#159, t_minute#160] "
          },
          "1" : {
            "sign" : 106160322,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6048126,
                "rowCount" : 48001
              },
              "compileTime" : {
                "sizeInBytes" : 6048126,
                "rowCount" : 48001
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((t_meal_time#165 = breakfast) OR (t_meal_time#165 = dinner)) AND isnotnull(t_time_sk#156)) "
          },
          "2" : {
            "sign" : -565811022,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 10886400,
                "rowCount" : 86400
              },
              "compileTime" : {
                "sizeInBytes" : 10886400,
                "rowCount" : 86400
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [t_time_sk#156, t_time_id#157, t_time#158, t_hour#159, t_minute#160, t_second#161, t_am_pm#162, t_shift#163, t_sub_shift#164, t_meal_time#165], `spark_catalog`.`tpcds_100`.`time_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [t_time_sk#156, t_hour#159, t_minute#160]\n+- Filter (((t_meal_time#165 = breakfast) OR (t_meal_time#165 = dinner)) AND isnotnull(t_time_sk#156))\n   +- Relation spark_catalog.tpcds_100.time_dim[t_time_sk#156,t_time_id#157,t_time#158,t_hour#159,t_minute#160,t_second#161,t_am_pm#162,t_shift#163,t_sub_shift#164,t_meal_time#165] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -225325701,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 960020,
            "rowCount" : 48001,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [t_time_sk#156, t_hour#159, t_minute#160] Input [4]: [t_time_sk#156, t_hour#159, t_minute#160, t_meal_time#165] "
          },
          "1" : {
            "sign" : -16775304,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 960020,
            "rowCount" : 48001,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [t_time_sk#156, t_hour#159, t_minute#160, t_meal_time#165] Condition : (((t_meal_time#165 = breakfast) OR (t_meal_time#165 = dinner)) AND isnotnull(t_time_sk#156)) "
          },
          "2" : {
            "sign" : -1336304248,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 960020,
            "rowCount" : 48001,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.time_dim Output [4]: [t_time_sk#156, t_hour#159, t_minute#160, t_meal_time#165] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/time_dim] PushedFilters: [Or(EqualTo(t_meal_time,breakfast),EqualTo(t_meal_time,dinner)), IsNotNull(t_time_sk)] ReadSchema: struct<t_time_sk:int,t_hour:int,t_minute:int,t_meal_time:string> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.time_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [t_time_sk#156, t_hour#159, t_minute#160]\n+- Filter (((t_meal_time#165 = breakfast) OR (t_meal_time#165 = dinner)) AND isnotnull(t_time_sk#156))\n   +- FileScan parquet spark_catalog.tpcds_100.time_dim[t_time_sk#156,t_hour#159,t_minute#160,t_meal_time#165] Batched: true, DataFilters: [((t_meal_time#165 = breakfast) OR (t_meal_time#165 = dinner)), isnotnull(t_time_sk#156)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/time_dim], PartitionFilters: [], PushedFilters: [Or(EqualTo(t_meal_time,breakfast),EqualTo(t_meal_time,dinner)), IsNotNull(t_time_sk)], ReadSchema: struct<t_time_sk:int,t_hour:int,t_minute:int,t_meal_time:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 960020,
        "inputRowCount" : 48001
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 1483,
        "TotalTasksDurationInMs" : 1470,
        "IOBytes" : {
          "Total" : 179635,
          "Details" : {
            "IR" : 179635,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "12" : {
            "sign" : -490360719,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4432520384,
                "rowCount" : 138516262
              },
              "compileTime" : {
                "sizeInBytes" : 4432520384,
                "rowCount" : 138516262
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#254 = cs_sold_date_sk#132) "
          },
          "8" : {
            "sign" : 755800508,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2015032152,
                "rowCount" : 71965434
              },
              "compileTime" : {
                "sizeInBytes" : 2015032152,
                "rowCount" : 71965434
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_sold_time_sk#37, ws_item_sk#39, ws_ext_sales_price#59, ws_sold_date_sk#70] "
          },
          "19" : {
            "sign" : -1464326184,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 39925727368,
                "rowCount" : 262669259
              },
              "compileTime" : {
                "sizeInBytes" : 39925727368,
                "rowCount" : 262669259
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(ss_sold_date_sk#155) AND isnotnull(ss_item_sk#134)) AND isnotnull(ss_sold_time_sk#133)) AND dynamicpruning#320 [ss_sold_date_sk#155]) "
          },
          "4" : {
            "sign" : 65208396,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 115749005185004,
                "rowCount" : 1897524675164
              },
              "compileTime" : {
                "sizeInBytes" : 115749005185004,
                "rowCount" : 1897524675164
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (sold_item_sk#241 = i_item_sk#15) "
          },
          "15" : {
            "sign" : -1465437660,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              },
              "compileTime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#99, cs_ship_date_sk#100, cs_bill_customer_sk#101, cs_bill_cdemo_sk#102, cs_bill_hdemo_sk#103, cs_bill_addr_sk#104, cs_ship_customer_sk#105, cs_ship_cdemo_sk#106, cs_ship_hdemo_sk#107, cs_ship_addr_sk#108, cs_call_center_sk#109, cs_catalog_page_sk#110, cs_ship_mode_sk#111, cs_warehouse_sk#112, cs_item_sk#113, cs_promo_sk#114, cs_order_number#115L, cs_quantity#116, cs_wholesale_cost#117, cs_list_price#118, cs_sales_price#119, cs_ext_discount_amt#120, cs_ext_sales_price#121, cs_ext_wholesale_cost#122, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "11" : {
            "sign" : -1189505527,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3324390288,
                "rowCount" : 138516262
              },
              "compileTime" : {
                "sizeInBytes" : 3324390288,
                "rowCount" : 138516262
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_ext_sales_price#121 AS ext_price#243, cs_item_sk#113 AS sold_item_sk#245, cs_sold_time_sk#99 AS time_sk#246] "
          },
          "9" : {
            "sign" : -1035164921,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14968810272,
                "rowCount" : 71965434
              },
              "compileTime" : {
                "sizeInBytes" : 14968810272,
                "rowCount" : 71965434
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(ws_sold_date_sk#70) AND isnotnull(ws_item_sk#39)) AND isnotnull(ws_sold_time_sk#37)) AND dynamicpruning#318 [ws_sold_date_sk#70]) "
          },
          "13" : {
            "sign" : -596969237,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3991579284,
                "rowCount" : 142556403
              },
              "compileTime" : {
                "sizeInBytes" : 3991579284,
                "rowCount" : 142556403
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_sold_time_sk#99, cs_item_sk#113, cs_ext_sales_price#121, cs_sold_date_sk#132] "
          },
          "16" : {
            "sign" : -2054753575,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6372974040,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 6372974040,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_ext_sales_price#147 AS ext_price#247, ss_item_sk#134 AS sold_item_sk#249, ss_sold_time_sk#133 AS time_sk#250] "
          },
          "5" : {
            "sign" : -1423047131,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11365258848,
                "rowCount" : 473552452
              },
              "compileTime" : {
                "sizeInBytes" : 11365258848,
                "rowCount" : 473552452
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "10" : {
            "sign" : -699645913,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              },
              "compileTime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#37, ws_ship_date_sk#38, ws_item_sk#39, ws_bill_customer_sk#40, ws_bill_cdemo_sk#41, ws_bill_hdemo_sk#42, ws_bill_addr_sk#43, ws_ship_customer_sk#44, ws_ship_cdemo_sk#45, ws_ship_hdemo_sk#46, ws_ship_addr_sk#47, ws_web_page_sk#48, ws_web_site_sk#49, ws_ship_mode_sk#50, ws_warehouse_sk#51, ws_promo_sk#52, ws_order_number#53L, ws_quantity#54, ws_wholesale_cost#55, ws_list_price#56, ws_sales_price#57, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "6" : {
            "sign" : -1423917700,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1667894520,
                "rowCount" : 69495605
              },
              "compileTime" : {
                "sizeInBytes" : 1667894520,
                "rowCount" : 69495605
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_ext_sales_price#59 AS ext_price#239, ws_item_sk#39 AS sold_item_sk#241, ws_sold_time_sk#37 AS time_sk#242] "
          },
          "1" : {
            "sign" : -2108168138,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5191735670155188348,
                "rowCount" : 91083081932547164
              },
              "compileTime" : {
                "sizeInBytes" : 5191735670155188348,
                "rowCount" : 91083081932547164
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_brand_id#22, i_brand#23, ext_price#239, t_hour#159, t_minute#160] "
          },
          "17" : {
            "sign" : -385364406,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 8497298720,
                "rowCount" : 265540585
              },
              "compileTime" : {
                "sizeInBytes" : 8497298720,
                "rowCount" : 265540585
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#282 = ss_sold_date_sk#155) "
          },
          "14" : {
            "sign" : -1862810146,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29651731824,
                "rowCount" : 142556403
              },
              "compileTime" : {
                "sizeInBytes" : 29651731824,
                "rowCount" : 142556403
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(cs_sold_date_sk#132) AND isnotnull(cs_item_sk#113)) AND isnotnull(cs_sold_time_sk#99)) AND dynamicpruning#319 [cs_sold_date_sk#132]) "
          },
          "0" : {
            "sign" : -1041930027,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7325640,
                "rowCount" : 128520
              },
              "compileTime" : {
                "sizeInBytes" : 7325640,
                "rowCount" : 128520
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [i_brand#23, i_brand_id#22, t_hour#159, t_minute#160], [i_brand_id#22 AS brand_id#251, i_brand#23 AS brand#252, t_hour#159, t_minute#160, MakeDecimal(sum(UnscaledValue(ext_price#239)),17,2) AS ext_price#253] "
          },
          "20" : {
            "sign" : -1782334540,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              },
              "compileTime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#133, ss_item_sk#134, ss_customer_sk#135, ss_cdemo_sk#136, ss_hdemo_sk#137, ss_addr_sk#138, ss_store_sk#139, ss_promo_sk#140, ss_ticket_number#141L, ss_quantity#142, ss_wholesale_cost#143, ss_list_price#144, ss_sales_price#145, ss_ext_discount_amt#146, ss_ext_sales_price#147, ss_ext_wholesale_cost#148, ss_ext_list_price#149, ss_ext_tax#150, ss_coupon_amt#151, ss_net_paid#152, ss_net_paid_inc_tax#153, ss_net_profit#154, ss_sold_date_sk#155], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "2" : {
            "sign" : 1678570578,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5920400325615565660,
                "rowCount" : 91083081932547164
              },
              "compileTime" : {
                "sizeInBytes" : 5920400325615565660,
                "rowCount" : 91083081932547164
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (time_sk#242 = t_time_sk#156) "
          },
          "18" : {
            "sign" : 570485948,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7354739252,
                "rowCount" : 262669259
              },
              "compileTime" : {
                "sizeInBytes" : 7354739252,
                "rowCount" : 262669259
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sold_time_sk#133, ss_item_sk#134, ss_ext_sales_price#147, ss_sold_date_sk#155] "
          },
          "7" : {
            "sign" : 1400634956,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2223859360,
                "rowCount" : 69495605
              },
              "compileTime" : {
                "sizeInBytes" : 2223859360,
                "rowCount" : 69495605
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (d_date_sk#71 = ws_sold_date_sk#70) "
          },
          "3" : {
            "sign" : -1984826449,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 100568807783692,
                "rowCount" : 1897524675164
              },
              "compileTime" : {
                "sizeInBytes" : 100568807783692,
                "rowCount" : 1897524675164
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_brand_id#22, i_brand#23, ext_price#239, time_sk#242] "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "LogicalRelation",
          "toId" : 9,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalRelation",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Join",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalRelation",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Filter",
          "toId" : 18,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Project",
          "toId" : 17,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Join",
          "toId" : 16,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Union",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [i_brand#23, i_brand_id#22, t_hour#159, t_minute#160], [i_brand_id#22 AS brand_id#251, i_brand#23 AS brand#252, t_hour#159, t_minute#160, MakeDecimal(sum(UnscaledValue(ext_price#239)),17,2) AS ext_price#253]\n+- Project [i_brand_id#22, i_brand#23, ext_price#239, t_hour#159, t_minute#160]\n   +- Join Inner, (time_sk#242 = t_time_sk#156)\n      :- Project [i_brand_id#22, i_brand#23, ext_price#239, time_sk#242]\n      :  +- Join Inner, (sold_item_sk#241 = i_item_sk#15)\n      :     :- Project [i_item_sk#15, i_brand_id#22, i_brand#23]\n      :     :  +- Filter ((isnotnull(i_manager_id#35) AND (i_manager_id#35 = 1)) AND isnotnull(i_item_sk#15))\n      :     :     +- Relation spark_catalog.tpcds_100.item[i_item_sk#15,i_item_id#16,i_rec_start_date#17,i_rec_end_date#18,i_item_desc#19,i_current_price#20,i_wholesale_cost#21,i_brand_id#22,i_brand#23,i_class_id#24,i_class#25,i_category_id#26,i_category#27,i_manufact_id#28,i_manufact#29,i_size#30,i_formulation#31,i_color#32,i_units#33,i_container#34,i_manager_id#35,i_product_name#36] parquet\n      :     +- Union false, false\n      :        :- Project [ws_ext_sales_price#59 AS ext_price#239, ws_item_sk#39 AS sold_item_sk#241, ws_sold_time_sk#37 AS time_sk#242]\n      :        :  +- Join Inner, (d_date_sk#71 = ws_sold_date_sk#70)\n      :        :     :- Project [ws_sold_time_sk#37, ws_item_sk#39, ws_ext_sales_price#59, ws_sold_date_sk#70]\n      :        :     :  +- Filter (((isnotnull(ws_sold_date_sk#70) AND isnotnull(ws_item_sk#39)) AND isnotnull(ws_sold_time_sk#37)) AND dynamicpruning#318 [ws_sold_date_sk#70])\n      :        :     :     :  +- Project [d_date_sk#71]\n      :        :     :     :     +- Filter (((isnotnull(d_moy#79) AND isnotnull(d_year#77)) AND ((d_moy#79 = 12) AND (d_year#77 = 2000))) AND isnotnull(d_date_sk#71))\n      :        :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#71,d_date_id#72,d_date#73,d_month_seq#74,d_week_seq#75,d_quarter_seq#76,d_year#77,d_dow#78,d_moy#79,d_dom#80,d_qoy#81,d_fy_year#82,d_fy_quarter_seq#83,d_fy_week_seq#84,d_day_name#85,d_quarter_name#86,d_holiday#87,d_weekend#88,d_following_holiday#89,d_first_dom#90,d_last_dom#91,d_same_day_ly#92,d_same_day_lq#93,d_current_day#94,... 4 more fields] parquet\n      :        :     :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#37,ws_ship_date_sk#38,ws_item_sk#39,ws_bill_customer_sk#40,ws_bill_cdemo_sk#41,ws_bill_hdemo_sk#42,ws_bill_addr_sk#43,ws_ship_customer_sk#44,ws_ship_cdemo_sk#45,ws_ship_hdemo_sk#46,ws_ship_addr_sk#47,ws_web_page_sk#48,ws_web_site_sk#49,ws_ship_mode_sk#50,ws_warehouse_sk#51,ws_promo_sk#52,ws_order_number#53L,ws_quantity#54,ws_wholesale_cost#55,ws_list_price#56,ws_sales_price#57,ws_ext_discount_amt#58,ws_ext_sales_price#59,ws_ext_wholesale_cost#60,... 10 more fields] parquet\n      :        :     +- Project [d_date_sk#71]\n      :        :        +- Filter (((isnotnull(d_moy#79) AND isnotnull(d_year#77)) AND ((d_moy#79 = 12) AND (d_year#77 = 2000))) AND isnotnull(d_date_sk#71))\n      :        :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#71,d_date_id#72,d_date#73,d_month_seq#74,d_week_seq#75,d_quarter_seq#76,d_year#77,d_dow#78,d_moy#79,d_dom#80,d_qoy#81,d_fy_year#82,d_fy_quarter_seq#83,d_fy_week_seq#84,d_day_name#85,d_quarter_name#86,d_holiday#87,d_weekend#88,d_following_holiday#89,d_first_dom#90,d_last_dom#91,d_same_day_ly#92,d_same_day_lq#93,d_current_day#94,... 4 more fields] parquet\n      :        :- Project [cs_ext_sales_price#121 AS ext_price#243, cs_item_sk#113 AS sold_item_sk#245, cs_sold_time_sk#99 AS time_sk#246]\n      :        :  +- Join Inner, (d_date_sk#254 = cs_sold_date_sk#132)\n      :        :     :- Project [cs_sold_time_sk#99, cs_item_sk#113, cs_ext_sales_price#121, cs_sold_date_sk#132]\n      :        :     :  +- Filter (((isnotnull(cs_sold_date_sk#132) AND isnotnull(cs_item_sk#113)) AND isnotnull(cs_sold_time_sk#99)) AND dynamicpruning#319 [cs_sold_date_sk#132])\n      :        :     :     :  +- Project [d_date_sk#254]\n      :        :     :     :     +- Filter (((isnotnull(d_moy#262) AND isnotnull(d_year#260)) AND ((d_moy#262 = 12) AND (d_year#260 = 2000))) AND isnotnull(d_date_sk#254))\n      :        :     :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#254,d_date_id#255,d_date#256,d_month_seq#257,d_week_seq#258,d_quarter_seq#259,d_year#260,d_dow#261,d_moy#262,d_dom#263,d_qoy#264,d_fy_year#265,d_fy_quarter_seq#266,d_fy_week_seq#267,d_day_name#268,d_quarter_name#269,d_holiday#270,d_weekend#271,d_following_holiday#272,d_first_dom#273,d_last_dom#274,d_same_day_ly#275,d_same_day_lq#276,d_current_day#277,... 4 more fields] parquet\n      :        :     :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#99,cs_ship_date_sk#100,cs_bill_customer_sk#101,cs_bill_cdemo_sk#102,cs_bill_hdemo_sk#103,cs_bill_addr_sk#104,cs_ship_customer_sk#105,cs_ship_cdemo_sk#106,cs_ship_hdemo_sk#107,cs_ship_addr_sk#108,cs_call_center_sk#109,cs_catalog_page_sk#110,cs_ship_mode_sk#111,cs_warehouse_sk#112,cs_item_sk#113,cs_promo_sk#114,cs_order_number#115L,cs_quantity#116,cs_wholesale_cost#117,cs_list_price#118,cs_sales_price#119,cs_ext_discount_amt#120,cs_ext_sales_price#121,cs_ext_wholesale_cost#122,... 10 more fields] parquet\n      :        :     +- Project [d_date_sk#254]\n      :        :        +- Filter (((isnotnull(d_moy#262) AND isnotnull(d_year#260)) AND ((d_moy#262 = 12) AND (d_year#260 = 2000))) AND isnotnull(d_date_sk#254))\n      :        :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#254,d_date_id#255,d_date#256,d_month_seq#257,d_week_seq#258,d_quarter_seq#259,d_year#260,d_dow#261,d_moy#262,d_dom#263,d_qoy#264,d_fy_year#265,d_fy_quarter_seq#266,d_fy_week_seq#267,d_day_name#268,d_quarter_name#269,d_holiday#270,d_weekend#271,d_following_holiday#272,d_first_dom#273,d_last_dom#274,d_same_day_ly#275,d_same_day_lq#276,d_current_day#277,... 4 more fields] parquet\n      :        +- Project [ss_ext_sales_price#147 AS ext_price#247, ss_item_sk#134 AS sold_item_sk#249, ss_sold_time_sk#133 AS time_sk#250]\n      :           +- Join Inner, (d_date_sk#282 = ss_sold_date_sk#155)\n      :              :- Project [ss_sold_time_sk#133, ss_item_sk#134, ss_ext_sales_price#147, ss_sold_date_sk#155]\n      :              :  +- Filter (((isnotnull(ss_sold_date_sk#155) AND isnotnull(ss_item_sk#134)) AND isnotnull(ss_sold_time_sk#133)) AND dynamicpruning#320 [ss_sold_date_sk#155])\n      :              :     :  +- Project [d_date_sk#282]\n      :              :     :     +- Filter (((isnotnull(d_moy#290) AND isnotnull(d_year#288)) AND ((d_moy#290 = 12) AND (d_year#288 = 2000))) AND isnotnull(d_date_sk#282))\n      :              :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#282,d_date_id#283,d_date#284,d_month_seq#285,d_week_seq#286,d_quarter_seq#287,d_year#288,d_dow#289,d_moy#290,d_dom#291,d_qoy#292,d_fy_year#293,d_fy_quarter_seq#294,d_fy_week_seq#295,d_day_name#296,d_quarter_name#297,d_holiday#298,d_weekend#299,d_following_holiday#300,d_first_dom#301,d_last_dom#302,d_same_day_ly#303,d_same_day_lq#304,d_current_day#305,... 4 more fields] parquet\n      :              :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#133,ss_item_sk#134,ss_customer_sk#135,ss_cdemo_sk#136,ss_hdemo_sk#137,ss_addr_sk#138,ss_store_sk#139,ss_promo_sk#140,ss_ticket_number#141L,ss_quantity#142,ss_wholesale_cost#143,ss_list_price#144,ss_sales_price#145,ss_ext_discount_amt#146,ss_ext_sales_price#147,ss_ext_wholesale_cost#148,ss_ext_list_price#149,ss_ext_tax#150,ss_coupon_amt#151,ss_net_paid#152,ss_net_paid_inc_tax#153,ss_net_profit#154,ss_sold_date_sk#155] parquet\n      :              +- Project [d_date_sk#282]\n      :                 +- Filter (((isnotnull(d_moy#290) AND isnotnull(d_year#288)) AND ((d_moy#290 = 12) AND (d_year#288 = 2000))) AND isnotnull(d_date_sk#282))\n      :                    +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#282,d_date_id#283,d_date#284,d_month_seq#285,d_week_seq#286,d_quarter_seq#287,d_year#288,d_dow#289,d_moy#290,d_dom#291,d_qoy#292,d_fy_year#293,d_fy_quarter_seq#294,d_fy_week_seq#295,d_day_name#296,d_quarter_name#297,d_holiday#298,d_weekend#299,d_following_holiday#300,d_first_dom#301,d_last_dom#302,d_same_day_ly#303,d_same_day_lq#304,d_current_day#305,... 4 more fields] parquet\n      +- Project [t_time_sk#156, t_hour#159, t_minute#160]\n         +- Filter (((t_meal_time#165 = breakfast) OR (t_meal_time#165 = dinner)) AND isnotnull(t_time_sk#156))\n            +- Relation spark_catalog.tpcds_100.time_dim[t_time_sk#156,t_time_id#157,t_time#158,t_hour#159,t_minute#160,t_second#161,t_am_pm#162,t_shift#163,t_sub_shift#164,t_meal_time#165] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "12" : {
            "sign" : -320642018,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 3324390288,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [cs_ext_sales_price#121 AS ext_price#243, cs_item_sk#113 AS sold_item_sk#245, cs_sold_time_sk#99 AS time_sk#246] Input [5]: [cs_sold_time_sk#99, cs_item_sk#113, cs_ext_sales_price#121, cs_sold_date_sk#132, d_date_sk#254] "
          },
          "8" : {
            "sign" : 1018843345,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 2223859360,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ws_sold_date_sk#70] Right keys [1]: [d_date_sk#71] Join type: Inner Join condition: None "
          },
          "19" : {
            "sign" : -664471317,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 7354739252,
            "rowCount" : 262669259,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [ss_sold_time_sk#133, ss_item_sk#134, ss_ext_sales_price#147, ss_sold_date_sk#155] Condition : (isnotnull(ss_item_sk#134) AND isnotnull(ss_sold_time_sk#133)) "
          },
          "4" : {
            "sign" : -534747656,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 115749005185004,
            "rowCount" : 1897524675164,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [i_item_sk#15] Right keys [1]: [sold_item_sk#241] Join type: Inner Join condition: None "
          },
          "15" : {
            "sign" : 336129042,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 3991579284,
            "rowCount" : 142556403,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.catalog_sales Output [4]: [cs_sold_time_sk#99, cs_item_sk#113, cs_ext_sales_price#121, cs_sold_date_sk#132] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_sales/cs_sold_date_sk=2450815, ... 1835 entries] PartitionFilters: [isnotnull(cs_sold_date_sk#132), dynamicpruningexpression(cs_sold_date_sk#132 IN dynamicpruning#318)] PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_time_sk)] ReadSchema: struct<cs_sold_time_sk:int,cs_item_sk:int,cs_ext_sales_price:decimal(7,2)> "
          },
          "11" : {
            "sign" : -330854546,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#71] Arguments: 1 "
          },
          "9" : {
            "sign" : -484804190,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 2015032152,
            "rowCount" : 71965434,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [ws_sold_time_sk#37, ws_item_sk#39, ws_ext_sales_price#59, ws_sold_date_sk#70] Condition : (isnotnull(ws_item_sk#39) AND isnotnull(ws_sold_time_sk#37)) "
          },
          "22" : {
            "sign" : -1778646401,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1451776,
            "rowCount" : 25200,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [3]: [t_time_sk#156, t_hour#159, t_minute#160] Arguments: 6 "
          },
          "13" : {
            "sign" : 1397399068,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 4432520384,
            "rowCount" : 138516262,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [cs_sold_date_sk#132] Right keys [1]: [d_date_sk#254] Join type: Inner Join condition: None "
          },
          "16" : {
            "sign" : -128422927,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#254] Arguments: 3 "
          },
          "5" : {
            "sign" : -1546205989,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1179648,
            "rowCount" : 3746,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [3]: [i_item_sk#15, i_brand_id#22, i_brand#23] Arguments: 0 "
          },
          "10" : {
            "sign" : -1026196309,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 2015032152,
            "rowCount" : 71965434,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_sales Output [4]: [ws_sold_time_sk#37, ws_item_sk#39, ws_ext_sales_price#59, ws_sold_date_sk#70] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales/ws_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ws_sold_date_sk#70), dynamicpruningexpression(ws_sold_date_sk#70 IN dynamicpruning#318)] PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_time_sk)] ReadSchema: struct<ws_sold_time_sk:int,ws_item_sk:int,ws_ext_sales_price:decimal(7,2)> "
          },
          "21" : {
            "sign" : 546731128,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048824,
            "rowCount" : 31,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#282] Arguments: 5 "
          },
          "6" : {
            "sign" : -709708893,
            "className" : "org.apache.spark.sql.execution.UnionExec",
            "sizeInBytes" : 11365258848,
            "rowCount" : 473552452,
            "isRuntime" : false,
            "predicate" : " (unknown) Union "
          },
          "1" : {
            "sign" : 388310220,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 5191735670155188348,
            "rowCount" : 91083081932547164,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [i_brand_id#22, i_brand#23, ext_price#239, t_hour#159, t_minute#160] Input [7]: [i_brand_id#22, i_brand#23, ext_price#239, time_sk#242, t_time_sk#156, t_hour#159, t_minute#160] "
          },
          "17" : {
            "sign" : 1579971193,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 6372974040,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [ss_ext_sales_price#147 AS ext_price#247, ss_item_sk#134 AS sold_item_sk#249, ss_sold_time_sk#133 AS time_sk#250] Input [5]: [ss_sold_time_sk#133, ss_item_sk#134, ss_ext_sales_price#147, ss_sold_date_sk#155, d_date_sk#282] "
          },
          "14" : {
            "sign" : -3243924,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 3991579284,
            "rowCount" : 142556403,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [cs_sold_time_sk#99, cs_item_sk#113, cs_ext_sales_price#121, cs_sold_date_sk#132] Condition : (isnotnull(cs_item_sk#113) AND isnotnull(cs_sold_time_sk#99)) "
          },
          "0" : {
            "sign" : -482922385,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 7325640,
            "rowCount" : 128520,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [5]: [i_brand_id#22, i_brand#23, ext_price#239, t_hour#159, t_minute#160] Keys [4]: [i_brand#23, i_brand_id#22, t_hour#159, t_minute#160] Functions [1]: [partial_sum(UnscaledValue(ext_price#239))] Aggregate Attributes [1]: [sum#321L] Results [5]: [i_brand#23, i_brand_id#22, t_hour#159, t_minute#160, sum#322L] "
          },
          "20" : {
            "sign" : 335001489,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 7354739252,
            "rowCount" : 262669259,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_sales Output [4]: [ss_sold_time_sk#133, ss_item_sk#134, ss_ext_sales_price#147, ss_sold_date_sk#155] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales/ss_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ss_sold_date_sk#155), dynamicpruningexpression(ss_sold_date_sk#155 IN dynamicpruning#318)] PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_time_sk)] ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_ext_sales_price:decimal(7,2)> "
          },
          "2" : {
            "sign" : 286445350,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 5920400325615565660,
            "rowCount" : 91083081932547164,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [time_sk#242] Right keys [1]: [t_time_sk#156] Join type: Inner Join condition: None "
          },
          "18" : {
            "sign" : 2054482838,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 8497298720,
            "rowCount" : 265540585,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_sold_date_sk#155] Right keys [1]: [d_date_sk#282] Join type: Inner Join condition: None "
          },
          "7" : {
            "sign" : 690007545,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1667894520,
            "rowCount" : 69495605,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [ws_ext_sales_price#59 AS ext_price#239, ws_item_sk#39 AS sold_item_sk#241, ws_sold_time_sk#37 AS time_sk#242] Input [5]: [ws_sold_time_sk#37, ws_item_sk#39, ws_ext_sales_price#59, ws_sold_date_sk#70, d_date_sk#71] "
          },
          "3" : {
            "sign" : -1592806643,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 100568807783692,
            "rowCount" : 1897524675164,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [i_brand_id#22, i_brand#23, ext_price#239, time_sk#242] Input [6]: [i_item_sk#15, i_brand_id#22, i_brand#23, ext_price#239, sold_item_sk#241, time_sk#242] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "BroadcastQueryStage",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_sales",
          "toId" : 9,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "BroadcastQueryStage",
          "toId" : 8,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "BroadcastHashJoin",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.catalog_sales",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "BroadcastQueryStage",
          "toId" : 13,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "BroadcastHashJoin",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_sales",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Filter",
          "toId" : 18,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "BroadcastQueryStage",
          "toId" : 18,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "BroadcastHashJoin",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Union",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastHashJoin",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[i_brand#23, i_brand_id#22, t_hour#159, t_minute#160], functions=[partial_sum(UnscaledValue(ext_price#239))], output=[i_brand#23, i_brand_id#22, t_hour#159, t_minute#160, sum#322L])\n+- Project [i_brand_id#22, i_brand#23, ext_price#239, t_hour#159, t_minute#160]\n   +- BroadcastHashJoin [time_sk#242], [t_time_sk#156], Inner, BuildRight, false\n      :- Project [i_brand_id#22, i_brand#23, ext_price#239, time_sk#242]\n      :  +- BroadcastHashJoin [i_item_sk#15], [sold_item_sk#241], Inner, BuildLeft, false\n      :     :- BroadcastQueryStage 0\n      :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=297]\n      :     :     +- *(1) Project [i_item_sk#15, i_brand_id#22, i_brand#23]\n      :     :        +- *(1) Filter ((isnotnull(i_manager_id#35) AND (i_manager_id#35 = 1)) AND isnotnull(i_item_sk#15))\n      :     :           +- *(1) ColumnarToRow\n      :     :              +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#15,i_brand_id#22,i_brand#23,i_manager_id#35] Batched: true, DataFilters: [isnotnull(i_manager_id#35), (i_manager_id#35 = 1), isnotnull(i_item_sk#15)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,1), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_brand:string,i_manager_id:int>\n      :     +- Union\n      :        :- Project [ws_ext_sales_price#59 AS ext_price#239, ws_item_sk#39 AS sold_item_sk#241, ws_sold_time_sk#37 AS time_sk#242]\n      :        :  +- BroadcastHashJoin [ws_sold_date_sk#70], [d_date_sk#71], Inner, BuildRight, false\n      :        :     :- Filter (isnotnull(ws_item_sk#39) AND isnotnull(ws_sold_time_sk#37))\n      :        :     :  +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#37,ws_item_sk#39,ws_ext_sales_price#59,ws_sold_date_sk#70] Batched: true, DataFilters: [isnotnull(ws_item_sk#39), isnotnull(ws_sold_time_sk#37)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#70), dynamicpruningexpression(ws_sold_date_sk#70 IN dynamicpruning#318)], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_time_sk)], ReadSchema: struct<ws_sold_time_sk:int,ws_item_sk:int,ws_ext_sales_price:decimal(7,2)>\n      :        :     :        +- SubqueryBroadcast dynamicpruning#318, 0, [d_date_sk#71], [id=#756]\n      :        :     :           +- AdaptiveSparkPlan isFinalPlan=false\n      :        :     :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=753]\n      :        :     :                 +- Project [d_date_sk#71]\n      :        :     :                    +- Filter ((((isnotnull(d_moy#79) AND isnotnull(d_year#77)) AND (d_moy#79 = 12)) AND (d_year#77 = 2000)) AND isnotnull(d_date_sk#71))\n      :        :     :                       +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#71,d_year#77,d_moy#79] Batched: true, DataFilters: [isnotnull(d_moy#79), isnotnull(d_year#77), (d_moy#79 = 12), (d_year#77 = 2000), isnotnull(d_date..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,12), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n      :        :     +- BroadcastQueryStage 1\n      :        :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=316]\n      :        :           +- *(2) Project [d_date_sk#71]\n      :        :              +- *(2) Filter ((((isnotnull(d_moy#79) AND isnotnull(d_year#77)) AND (d_moy#79 = 12)) AND (d_year#77 = 2000)) AND isnotnull(d_date_sk#71))\n      :        :                 +- *(2) ColumnarToRow\n      :        :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#71,d_year#77,d_moy#79] Batched: true, DataFilters: [isnotnull(d_moy#79), isnotnull(d_year#77), (d_moy#79 = 12), (d_year#77 = 2000), isnotnull(d_date..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,12), EqualTo(d_year,2000), IsNotNull(d_date_sk)], ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>\n      :        :- Project [cs_ext_sales_price#121 AS ext_price#243, cs_item_sk#113 AS sold_item_sk#245, cs_sold_time_sk#99 AS time_sk#246]\n      :        :  +- BroadcastHashJoin [cs_sold_date_sk#132], [d_date_sk#254], Inner, BuildRight, false\n      :        :     :- Filter (isnotnull(cs_item_sk#113) AND isnotnull(cs_sold_time_sk#99))\n      :        :     :  +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#99,cs_item_sk#113,cs_ext_sales_price#121,cs_sold_date_sk#132] Batched: true, DataFilters: [isnotnull(cs_item_sk#113), isnotnull(cs_sold_time_sk#99)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#132), dynamicpruningexpression(cs_sold_date_sk#132 IN dynamicpruning#3..., PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_time_sk)], ReadSchema: struct<cs_sold_time_sk:int,cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>\n      :        :     :        +- ReusedSubquery SubqueryBroadcast dynamicpruning#318, 0, [d_date_sk#71], [id=#756]\n      :        :     +- BroadcastQueryStage 3\n      :        :        +- ReusedExchange [d_date_sk#254], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=316]\n      :        +- Project [ss_ext_sales_price#147 AS ext_price#247, ss_item_sk#134 AS sold_item_sk#249, ss_sold_time_sk#133 AS time_sk#250]\n      :           +- BroadcastHashJoin [ss_sold_date_sk#155], [d_date_sk#282], Inner, BuildRight, false\n      :              :- Filter (isnotnull(ss_item_sk#134) AND isnotnull(ss_sold_time_sk#133))\n      :              :  +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#133,ss_item_sk#134,ss_ext_sales_price#147,ss_sold_date_sk#155] Batched: true, DataFilters: [isnotnull(ss_item_sk#134), isnotnull(ss_sold_time_sk#133)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#155), dynamicpruningexpression(ss_sold_date_sk#155 IN dynamicpruning#3..., PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_time_sk)], ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>\n      :              :        +- ReusedSubquery SubqueryBroadcast dynamicpruning#318, 0, [d_date_sk#71], [id=#756]\n      :              +- BroadcastQueryStage 5\n      :                 +- ReusedExchange [d_date_sk#282], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=316]\n      +- BroadcastQueryStage 6\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=386]\n            +- *(5) Project [t_time_sk#156, t_hour#159, t_minute#160]\n               +- *(5) Filter (((t_meal_time#165 = breakfast) OR (t_meal_time#165 = dinner)) AND isnotnull(t_time_sk#156))\n                  +- *(5) ColumnarToRow\n                     +- FileScan parquet spark_catalog.tpcds_100.time_dim[t_time_sk#156,t_hour#159,t_minute#160,t_meal_time#165] Batched: true, DataFilters: [((t_meal_time#165 = breakfast) OR (t_meal_time#165 = dinner)), isnotnull(t_time_sk#156)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/time_dim], PartitionFilters: [], PushedFilters: [Or(EqualTo(t_meal_time,breakfast),EqualTo(t_meal_time,dinner)), IsNotNull(t_time_sk)], ReadSchema: struct<t_time_sk:int,t_hour:int,t_minute:int,t_meal_time:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 13367128584,
        "inputRowCount" : 477220135
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 6 ],
      "Objectives" : {
        "DurationInMs" : 18985,
        "TotalTasksDurationInMs" : 133777,
        "IOBytes" : {
          "Total" : 151957071,
          "Details" : {
            "IR" : 146964246,
            "IW" : 0,
            "SR" : 0,
            "SW" : 4992825
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702227287309,
  "SQLEndTimeInMs" : 1702227320979,
  "Objectives" : {
    "DurationInMs" : 33670,
    "IOBytes" : {
      "Total" : 167981618,
      "Details" : {
        "IR" : 148809935,
        "IW" : 0,
        "SR" : 12082254,
        "SW" : 7089429
      }
    }
  }
}
