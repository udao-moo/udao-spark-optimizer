{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "45" : {
          "sign" : -887133149,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 44237719834,
          "rowCount" : 287257921,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
        },
        "34" : {
          "sign" : 1153698931,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 60193664,
          "rowCount" : 940526,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ca_state#123, ca_zip#124, ca_country#125] "
        },
        "12" : {
          "sign" : -1292600709,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 26954307198,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#5 = c_customer_sk#97) "
        },
        "51" : {
          "sign" : -459341749,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 15504000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
        },
        "8" : {
          "sign" : -144193639,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 118459872995,
          "rowCount" : 577853039,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#46) "
        },
        "19" : {
          "sign" : -816531149,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 985338,
          "rowCount" : 2313,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(i_color#92) AND (i_color#92 = chiffon)) AND isnotnull(i_item_sk#75)) "
        },
        "23" : {
          "sign" : -84657601,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 588,
          "rowCount" : 49,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
        },
        "4" : {
          "sign" : 274358153,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 10168082233949,
          "rowCount" : 42191212589,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
        },
        "40" : {
          "sign" : -542846938,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 10168082233949,
          "rowCount" : 42191212589,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
        },
        "15" : {
          "sign" : -628374504,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 43776970976,
          "rowCount" : 288006388,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "11" : {
          "sign" : 1024783902,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 24753955590,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] "
        },
        "9" : {
          "sign" : -55711024,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 44237719834,
          "rowCount" : 287257921,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
        },
        "44" : {
          "sign" : -2033886360,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 118459872995,
          "rowCount" : 577853039,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#46) "
        },
        "33" : {
          "sign" : 58525475,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3686606208,
          "rowCount" : 28801611,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "22" : {
          "sign" : 812756911,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 588,
          "rowCount" : 49,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
        },
        "26" : {
          "sign" : -702144975,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 135108960,
          "rowCount" : 1930128,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] "
        },
        "50" : {
          "sign" : -1935493134,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 39926600456,
          "rowCount" : 262675003,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#145 [], xxhash64(ss_store_sk#9, 42))) "
        },
        "37" : {
          "sign" : 1750964353,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 24,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [(0.05 * avg(netpaid#2)) AS (0.05 * avg(netpaid))#137] "
        },
        "13" : {
          "sign" : -1460550315,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 9456300108,
          "rowCount" : 262675003,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] "
        },
        "46" : {
          "sign" : 1568625866,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 45386751518,
          "rowCount" : 287257921,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#4 = i_item_sk#75) "
        },
        "24" : {
          "sign" : -1176082101,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 23471,
          "rowCount" : 49,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71)) "
        },
        "35" : {
          "sign" : -1835352789,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 231369396,
          "rowCount" : 940526,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_country#125) AND isnotnull(ca_zip#124)) "
        },
        "16" : {
          "sign" : 1727686380,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 108,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0) AS bloomFilter#147] "
        },
        "5" : {
          "sign" : 259797596,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 64283634425,
          "rowCount" : 347479105,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
        },
        "10" : {
          "sign" : 737671503,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 45386751518,
          "rowCount" : 287257921,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#4 = i_item_sk#75) "
        },
        "48" : {
          "sign" : 798351448,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 26954307198,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#5 = c_customer_sk#97) "
        },
        "21" : {
          "sign" : -598031766,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 108,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#150] "
        },
        "43" : {
          "sign" : -777956203,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 113837048683,
          "rowCount" : 577853039,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
        },
        "32" : {
          "sign" : 2011675015,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3686606208,
          "rowCount" : 28801611,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27)) "
        },
        "49" : {
          "sign" : 556950544,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 9456300108,
          "rowCount" : 262675003,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] "
        },
        "6" : {
          "sign" : 1383077131,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 72623132945,
          "rowCount" : 347479105,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
        },
        "36" : {
          "sign" : 527040145,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 246000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#115, ca_address_id#116, ca_street_number#117, ca_street_name#118, ca_street_type#119, ca_suite_number#120, ca_city#121, ca_county#122, ca_state#123, ca_zip#124, ca_country#125, ca_gmt_offset#126, ca_location_type#127], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "1" : {
          "sign" : 2028551617,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 1402543296,
          "rowCount" : 18214848,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#2) AS paid#0] "
        },
        "39" : {
          "sign" : 1136020672,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 6792785226829,
          "rowCount" : 42191212589,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
        },
        "17" : {
          "sign" : -502682117,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 27756,
          "rowCount" : 2313,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#75] "
        },
        "25" : {
          "sign" : 2043403682,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 192558,
          "rowCount" : 402,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "14" : {
          "sign" : 940070075,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 39926600456,
          "rowCount" : 262675003,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND (might_contain(scalar-subquery#148 [], xxhash64(ss_item_sk#4, 42)) AND might_contain(scalar-subquery#151 [], xxhash64(ss_store_sk#9, 42)))) "
        },
        "47" : {
          "sign" : -1092230439,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 24753955590,
          "rowCount" : 275043951,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] "
        },
        "31" : {
          "sign" : -1899214940,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 576032220,
          "rowCount" : 28801611,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_ticket_number#34L] "
        },
        "42" : {
          "sign" : -1904400784,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 72623132945,
          "rowCount" : 347479105,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
        },
        "0" : {
          "sign" : -336434269,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 1402543296,
          "rowCount" : 18214848,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(paid#0) AND (cast(paid#0 as decimal(33,8)) > cast(scalar-subquery#1 [] as decimal(33,8)))) "
        },
        "20" : {
          "sign" : 228187507,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#75, i_item_id#76, i_rec_start_date#77, i_rec_end_date#78, i_item_desc#79, i_current_price#80, i_wholesale_cost#81, i_brand_id#82, i_brand#83, i_class_id#84, i_class#85, i_category_id#86, i_category#87, i_manufact_id#88, i_manufact#89, i_size#90, i_formulation#91, i_color#92, i_units#93, i_container#94, i_manager_id#95, i_product_name#96], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "27" : {
          "sign" : -14387779,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 482532000,
          "rowCount" : 1930128,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111)) "
        },
        "2" : {
          "sign" : 1298184989,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 2911193668641,
          "rowCount" : 42191212589,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#2] "
        },
        "38" : {
          "sign" : -796224557,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 675059401424,
          "rowCount" : 42191212589,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#2] "
        },
        "18" : {
          "sign" : -373253587,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 27756,
          "rowCount" : 2313,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#75] "
        },
        "30" : {
          "sign" : 352920416,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2891,
          "rowCount" : 49,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] "
        },
        "7" : {
          "sign" : 1300343968,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 113837048683,
          "rowCount" : 577853039,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
        },
        "29" : {
          "sign" : 98177037,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 175788,
          "rowCount" : 2313,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
        },
        "41" : {
          "sign" : 1474050341,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 64283634425,
          "rowCount" : 347479105,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
        },
        "3" : {
          "sign" : 923982599,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 6792785226829,
          "rowCount" : 42191212589,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
        },
        "52" : {
          "sign" : 2095138697,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(i_item_sk#75) "
        },
        "28" : {
          "sign" : 2021572997,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 500000000,
          "rowCount" : 2000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#97, c_customer_id#98, c_current_cdemo_sk#99, c_current_hdemo_sk#100, c_current_addr_sk#101, c_first_shipto_date_sk#102, c_first_sales_date_sk#103, c_salutation#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_day#108, c_birth_month#109, c_birth_year#110, c_birth_country#111, c_login#112, c_email_address#113, c_last_review_date#114], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        }
      },
      "links" : [ {
        "fromId" : 15,
        "fromName" : "LogicalRelation",
        "toId" : 14,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "LogicalRelation",
        "toId" : 19,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "Filter",
        "toId" : 18,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "Project",
        "toId" : 17,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Project",
        "toId" : 16,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "Aggregate",
        "toId" : 14,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 25,
        "fromName" : "LogicalRelation",
        "toId" : 24,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "Filter",
        "toId" : 23,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "Project",
        "toId" : 22,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "Project",
        "toId" : 21,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Aggregate",
        "toId" : 14,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 14,
        "fromName" : "Filter",
        "toId" : 13,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Project",
        "toId" : 12,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "LogicalRelation",
        "toId" : 27,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "Filter",
        "toId" : 26,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "Project",
        "toId" : 12,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 12,
        "fromName" : "Join",
        "toId" : 11,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "Project",
        "toId" : 10,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "Filter",
        "toId" : 29,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 29,
        "fromName" : "Project",
        "toId" : 10,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Join",
        "toId" : 9,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Project",
        "toId" : 8,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "Filter",
        "toId" : 30,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 30,
        "fromName" : "Project",
        "toId" : 8,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Join",
        "toId" : 7,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Project",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 33,
        "fromName" : "LogicalRelation",
        "toId" : 32,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 32,
        "fromName" : "Filter",
        "toId" : 31,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 31,
        "fromName" : "Project",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Join",
        "toId" : 5,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Project",
        "toId" : 4,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 36,
        "fromName" : "LogicalRelation",
        "toId" : 35,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 35,
        "fromName" : "Filter",
        "toId" : 34,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 34,
        "fromName" : "Project",
        "toId" : 4,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Join",
        "toId" : 3,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Project",
        "toId" : 2,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Aggregate",
        "toId" : 1,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "Aggregate",
        "toId" : 0,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "LogicalRelation",
        "toId" : 50,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Aggregate",
        "toId" : 50,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 50,
        "fromName" : "Filter",
        "toId" : 49,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 49,
        "fromName" : "Project",
        "toId" : 48,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "Project",
        "toId" : 48,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 48,
        "fromName" : "Join",
        "toId" : 47,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 47,
        "fromName" : "Project",
        "toId" : 46,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "LogicalRelation",
        "toId" : 52,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 52,
        "fromName" : "Filter",
        "toId" : 51,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 51,
        "fromName" : "Project",
        "toId" : 46,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 46,
        "fromName" : "Join",
        "toId" : 45,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 45,
        "fromName" : "Project",
        "toId" : 44,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 30,
        "fromName" : "Project",
        "toId" : 44,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 44,
        "fromName" : "Join",
        "toId" : 43,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 43,
        "fromName" : "Project",
        "toId" : 42,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 31,
        "fromName" : "Project",
        "toId" : 42,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 42,
        "fromName" : "Join",
        "toId" : 41,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 41,
        "fromName" : "Project",
        "toId" : 40,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 34,
        "fromName" : "Project",
        "toId" : 40,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 40,
        "fromName" : "Join",
        "toId" : 39,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 39,
        "fromName" : "Project",
        "toId" : 38,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 38,
        "fromName" : "Aggregate",
        "toId" : 37,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 37,
        "fromName" : "Aggregate",
        "toId" : 0,
        "toName" : "Filter",
        "linkType" : "Subquery"
      } ],
      "rawPlan" : "Filter (isnotnull(paid#0) AND (cast(paid#0 as decimal(33,8)) > cast(scalar-subquery#1 [] as decimal(33,8))))\n:  +- Aggregate [(0.05 * avg(netpaid#2)) AS (0.05 * avg(netpaid))#137]\n:     +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#2]\n:        +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n:           +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n:              :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n:              :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n:              :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n:              :     :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n:              :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n:              :     :     :     :     :  +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#145 [], xxhash64(ss_store_sk#9, 42)))\n:              :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#150]\n:              :     :     :     :     :     :     +- Project [s_store_sk#46]\n:              :     :     :     :     :     :        +- Project [s_store_sk#46]\n:              :     :     :     :     :     :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :     :     :     :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n:              :     :     :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n:              :     :     :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n:              :     :     :     +- Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :        +- Filter isnotnull(i_item_sk#75)\n:              :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n:              :     :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n:              :     :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     +- Project [sr_item_sk#27, sr_ticket_number#34L]\n:              :        +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n:              :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n:              +- Project [ca_state#123, ca_zip#124, ca_country#125]\n:                 +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n:                    +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n+- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#2) AS paid#0]\n   +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#2]\n      +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n         +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n            :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n            :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n            :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n            :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n            :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n            :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n            :     :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n            :     :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n            :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n            :     :     :     :     :  +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND (might_contain(scalar-subquery#148 [], xxhash64(ss_item_sk#4, 42)) AND might_contain(scalar-subquery#151 [], xxhash64(ss_store_sk#9, 42))))\n            :     :     :     :     :     :  :- Aggregate [bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0) AS bloomFilter#147]\n            :     :     :     :     :     :  :  +- Project [i_item_sk#75]\n            :     :     :     :     :     :  :     +- Project [i_item_sk#75]\n            :     :     :     :     :     :  :        +- Filter ((isnotnull(i_color#92) AND (i_color#92 = chiffon)) AND isnotnull(i_item_sk#75))\n            :     :     :     :     :     :  :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n            :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#150]\n            :     :     :     :     :     :     +- Project [s_store_sk#46]\n            :     :     :     :     :     :        +- Project [s_store_sk#46]\n            :     :     :     :     :     :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n            :     :     :     :     :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n            :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n            :     :     :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n            :     :     :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n            :     :     :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n            :     :     :     +- Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n            :     :     :        +- Filter ((isnotnull(i_color#92) AND (i_color#92 = chiffon)) AND isnotnull(i_item_sk#75))\n            :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n            :     :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n            :     :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n            :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n            :     +- Project [sr_item_sk#27, sr_ticket_number#34L]\n            :        +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n            :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n            +- Project [ca_state#123, ca_zip#124, ca_country#125]\n               +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n                  +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 48296673742,
      "inputRowCount" : 320012401
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "12" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : 527040145,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#115, ca_address_id#116, ca_street_number#117, ca_street_name#118, ca_street_type#119, ca_suite_number#120, ca_city#121, ca_county#122, ca_state#123, ca_zip#124, ca_country#125, ca_gmt_offset#126, ca_location_type#127], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "12" : {
            "sign" : 1031245998,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24753955590,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "8" : {
            "sign" : 419855978,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 113837048683,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "19" : {
            "sign" : -84657601,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "23" : {
            "sign" : -14387779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 482532000,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111)) "
          },
          "4" : {
            "sign" : -859819627,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6792785226829,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "15" : {
            "sign" : 1011872821,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39926600456,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42))) "
          },
          "11" : {
            "sign" : 1746504807,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 45386751518,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#4 = i_item_sk#75) "
          },
          "9" : {
            "sign" : -1141989269,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 118459872995,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#46) "
          },
          "33" : {
            "sign" : -1835352789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 231369396,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_country#125) AND isnotnull(ca_zip#124)) "
          },
          "22" : {
            "sign" : -702144975,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 135108960,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "26" : {
            "sign" : 2095138697,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(i_item_sk#75) "
          },
          "13" : {
            "sign" : 102638235,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 26954307198,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#5 = c_customer_sk#97) "
          },
          "24" : {
            "sign" : 2021572997,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 500000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#97, c_customer_id#98, c_current_cdemo_sk#99, c_current_hdemo_sk#100, c_current_addr_sk#101, c_first_shipto_date_sk#102, c_first_sales_date_sk#103, c_salutation#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_day#108, c_birth_month#109, c_birth_year#110, c_birth_country#111, c_login#112, c_email_address#113, c_last_review_date#114], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "16" : {
            "sign" : -628374504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 43776970976,
            "rowCount" : 288006388,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "5" : {
            "sign" : 474468585,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 10168082233949,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          },
          "10" : {
            "sign" : 455826232,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 44237719834,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "21" : {
            "sign" : 2043403682,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 192558,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "32" : {
            "sign" : 1153698931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#123, ca_zip#124, ca_country#125] "
          },
          "6" : {
            "sign" : 210705200,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 64283634425,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "1" : {
            "sign" : 1247355946,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3512,
            "rowCount" : 40,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157], HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51], functions=[sum(netpaid#159)]) "
          },
          "17" : {
            "sign" : 1921382062,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176] "
          },
          "25" : {
            "sign" : -459341749,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 15504000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "14" : {
            "sign" : 1867243163,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9456300108,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] "
          },
          "31" : {
            "sign" : 58525475,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "0" : {
            "sign" : -1795378141,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3360,
            "rowCount" : 40,
            "isRuntime" : true,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8)))) "
          },
          "20" : {
            "sign" : -1176082101,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 23471,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71)) "
          },
          "27" : {
            "sign" : 228187507,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#75, i_item_id#76, i_rec_start_date#77, i_rec_end_date#78, i_item_desc#79, i_current_price#80, i_wholesale_cost#81, i_brand_id#82, i_brand#83, i_class_id#84, i_class#85, i_category_id#86, i_category#87, i_manufact_id#88, i_manufact#89, i_size#90, i_formulation#91, i_color#92, i_units#93, i_container#94, i_manager_id#95, i_product_name#96], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "2" : {
            "sign" : 1726153103,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163] "
          },
          "18" : {
            "sign" : 812756911,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "30" : {
            "sign" : 2011675015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27)) "
          },
          "7" : {
            "sign" : 815965107,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 72623132945,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "29" : {
            "sign" : -1899214940,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_ticket_number#34L] "
          },
          "3" : {
            "sign" : -842263021,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 675059401424,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "28" : {
            "sign" : 352920416,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2891,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "LogicalQueryStage",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalRelation",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalRelation",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Filter",
          "toId" : 19,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Project",
          "toId" : 18,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Project",
          "toId" : 17,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Aggregate",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalRelation",
          "toId" : 23,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Filter",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "LogicalRelation",
          "toId" : 26,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Filter",
          "toId" : 25,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Filter",
          "toId" : 28,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "LogicalRelation",
          "toId" : 30,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Filter",
          "toId" : 29,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "LogicalRelation",
          "toId" : 33,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "Filter",
          "toId" : 32,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Subquery"
        } ],
        "rawPlan" : "Filter (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8))))\n:  +- Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163]\n:     +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n:        +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n:           +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n:              :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n:              :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n:              :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n:              :     :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n:              :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n:              :     :     :     :     :  +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42)))\n:              :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n:              :     :     :     :     :     :     +- Project [s_store_sk#46]\n:              :     :     :     :     :     :        +- Project [s_store_sk#46]\n:              :     :     :     :     :     :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :     :     :     :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n:              :     :     :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n:              :     :     :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n:              :     :     :     +- Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :        +- Filter isnotnull(i_item_sk#75)\n:              :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n:              :     :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n:              :     :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     +- Project [sr_item_sk#27, sr_ticket_number#34L]\n:              :        +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n:              :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n:              +- Project [ca_state#123, ca_zip#124, ca_country#125]\n:                 +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n:                    +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n+- LogicalQueryStage Aggregate [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157], HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51], functions=[sum(netpaid#159)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3512,
        "inputRowCount" : 40
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226788248,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 35320,
        "IOBytes" : {
          "Total" : 16660343915,
          "Details" : {
            "IR" : 2357123983,
            "IW" : 0,
            "SR" : 7365949355,
            "SW" : 6937270577
          }
        }
      }
    },
    "8" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : 2095138697,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(i_item_sk#75) "
          },
          "12" : {
            "sign" : -859819627,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6792785226829,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "8" : {
            "sign" : -114833265,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 691238664,
            "rowCount" : 28801611,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sr_item_sk#27, sr_ticket_number#34L], ShuffleQueryStage 4 "
          },
          "19" : {
            "sign" : 1746504807,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 45386751518,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#4 = i_item_sk#75) "
          },
          "23" : {
            "sign" : 1011872821,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39926600456,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42))) "
          },
          "4" : {
            "sign" : -247128176,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 696706232596416075456,
            "rowCount" : 2599650121628418192,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          },
          "40" : {
            "sign" : 1153698931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#123, ca_zip#124, ca_country#125] "
          },
          "15" : {
            "sign" : 815965107,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 72623132945,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "11" : {
            "sign" : -842263021,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 675059401424,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "9" : {
            "sign" : 775636263,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 61040568,
            "rowCount" : 954704,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_state#123, ca_zip#124, ca_country#125], ShuffleQueryStage 5 "
          },
          "33" : {
            "sign" : -459341749,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 15504000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "22" : {
            "sign" : 1867243163,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9456300108,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] "
          },
          "26" : {
            "sign" : 812756911,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "37" : {
            "sign" : -1899214940,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_ticket_number#34L] "
          },
          "13" : {
            "sign" : 474468585,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 10168082233949,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          },
          "24" : {
            "sign" : -628374504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 43776970976,
            "rowCount" : 288006388,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "35" : {
            "sign" : 228187507,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#75, i_item_id#76, i_rec_start_date#77, i_rec_end_date#78, i_item_desc#79, i_current_price#80, i_wholesale_cost#81, i_brand_id#82, i_brand#83, i_class_id#84, i_class#85, i_category_id#86, i_category#87, i_manufact_id#88, i_manufact#89, i_size#90, i_formulation#91, i_color#92, i_units#93, i_container#94, i_manager_id#95, i_product_name#96], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "16" : {
            "sign" : 419855978,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 113837048683,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "5" : {
            "sign" : -1275396181,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 566382067424784,
            "rowCount" : 2722990708773,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "10" : {
            "sign" : 1726153103,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163] "
          },
          "21" : {
            "sign" : 102638235,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 26954307198,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#5 = c_customer_sk#97) "
          },
          "32" : {
            "sign" : 2021572997,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 500000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#97, c_customer_id#98, c_current_cdemo_sk#99, c_current_hdemo_sk#100, c_current_addr_sk#101, c_first_shipto_date_sk#102, c_first_sales_date_sk#103, c_salutation#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_day#108, c_birth_month#109, c_birth_year#110, c_birth_country#111, c_login#112, c_email_address#113, c_last_review_date#114], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "6" : {
            "sign" : 24110032,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 631733844435336,
            "rowCount" : 2722990708773,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "36" : {
            "sign" : 352920416,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2891,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] "
          },
          "1" : {
            "sign" : -2106682157,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 218370610216787128128,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157] "
          },
          "39" : {
            "sign" : 58525475,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "17" : {
            "sign" : -1141989269,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 118459872995,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#46) "
          },
          "25" : {
            "sign" : 1921382062,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176] "
          },
          "14" : {
            "sign" : 210705200,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 64283634425,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "31" : {
            "sign" : -14387779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 482532000,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111)) "
          },
          "42" : {
            "sign" : 527040145,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#115, ca_address_id#116, ca_street_number#117, ca_street_name#118, ca_street_type#119, ca_suite_number#120, ca_city#121, ca_county#122, ca_state#123, ca_zip#124, ca_country#125, ca_gmt_offset#126, ca_location_type#127], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "0" : {
            "sign" : 496533692,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 218370610216787128128,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8)))) "
          },
          "20" : {
            "sign" : 1031245998,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24753955590,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "27" : {
            "sign" : -84657601,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "2" : {
            "sign" : -747371513,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 197573409243759782592,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "38" : {
            "sign" : 2011675015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27)) "
          },
          "18" : {
            "sign" : 455826232,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 44237719834,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "30" : {
            "sign" : -702144975,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 135108960,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "7" : {
            "sign" : 1374117770,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 18581912,
            "rowCount" : 94543,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 7 "
          },
          "29" : {
            "sign" : 2043403682,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 192558,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "41" : {
            "sign" : -1835352789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 231369396,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_country#125) AND isnotnull(ca_zip#124)) "
          },
          "3" : {
            "sign" : -630007888,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 488734222866142620096,
            "rowCount" : 2599650121628418192,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "28" : {
            "sign" : -1176082101,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 23471,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71)) "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Aggregate",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalRelation",
          "toId" : 23,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalRelation",
          "toId" : 28,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Filter",
          "toId" : 27,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Project",
          "toId" : 26,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Project",
          "toId" : 25,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Aggregate",
          "toId" : 23,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 23,
          "fromName" : "Filter",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 21,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "LogicalRelation",
          "toId" : 31,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Filter",
          "toId" : 30,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Project",
          "toId" : 21,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Join",
          "toId" : 20,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Project",
          "toId" : 19,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "LogicalRelation",
          "toId" : 34,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "Filter",
          "toId" : 33,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "Project",
          "toId" : 19,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Join",
          "toId" : 18,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Project",
          "toId" : 17,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Filter",
          "toId" : 36,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "Project",
          "toId" : 17,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Join",
          "toId" : 16,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "LogicalRelation",
          "toId" : 38,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "Filter",
          "toId" : 37,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 42,
          "fromName" : "LogicalRelation",
          "toId" : 41,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 41,
          "fromName" : "Filter",
          "toId" : 40,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Aggregate",
          "toId" : 10,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Subquery"
        } ],
        "rawPlan" : "Filter (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8))))\n:  +- Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163]\n:     +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n:        +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n:           +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n:              :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n:              :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n:              :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n:              :     :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n:              :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n:              :     :     :     :     :  +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42)))\n:              :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n:              :     :     :     :     :     :     +- Project [s_store_sk#46]\n:              :     :     :     :     :     :        +- Project [s_store_sk#46]\n:              :     :     :     :     :     :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :     :     :     :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n:              :     :     :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n:              :     :     :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n:              :     :     :     +- Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :        +- Filter isnotnull(i_item_sk#75)\n:              :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n:              :     :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n:              :     :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     +- Project [sr_item_sk#27, sr_ticket_number#34L]\n:              :        +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n:              :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n:              +- Project [ca_state#123, ca_zip#124, ca_country#125]\n:                 +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n:                    +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n+- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157]\n   +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n      +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n         +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n            :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n            :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n            :     :- LogicalQueryStage Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 7\n            :     +- LogicalQueryStage Project [sr_item_sk#27, sr_ticket_number#34L], ShuffleQueryStage 4\n            +- LogicalQueryStage Project [ca_state#123, ca_zip#124, ca_country#125], ShuffleQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 770861144,
        "inputRowCount" : 29850858
      },
      "PD" : {
        "5" : [ 10353, 13780, 29539, 20176, 18341, 22193, 24413, 43249, 57565, 57565, 18341, 20176, 47574, 35743, 43249, 35743, 13780, 43249, 20176, 47574, 32493, 22193, 29539, 26854, 8556, 18341, 32493, 29539, 47574, 4390, 7778, 22193, 12527, 10353, 20176, 29539, 26854, 43249, 39317, 22193, 29539, 24413, 15158, 13780, 24413, 18341, 35743, 32493, 32493, 35743, 57565, 43249, 13780, 29539, 39317, 24413, 12527, 47574, 43249, 26854, 22193, 32493, 26854, 13780, 22193, 47574, 39317, 16674, 26854, 29539, 13780, 13780, 22193, 12527, 18341, 39317, 6428, 18341, 39317, 26854, 52331, 39317, 32493, 32493, 32493, 9412, 29539, 26854, 11388, 18341, 10353, 12527, 11388, 43249, 52331, 18341, 15158, 13780, 13780, 32493, 35743, 43249, 32493, 16674, 15158, 20176, 18341, 22193, 29539, 3628, 29539, 24413, 16674, 22193, 16674, 39317, 22193, 57565, 29539, 32493, 13780, 32493, 43249, 20176, 22193, 24413, 4830, 13780, 22193, 26854, 15158, 24413, 22193, 32493, 35743, 47574, 29539, 29539, 24413, 9412, 18341, 29539, 43249, 11388, 18341, 32493, 47574, 22193, 47574, 24413, 26854, 47574, 18341, 11388, 43249, 15158, 29539, 39317, 24413, 16674, 52331, 20176, 10353, 29539, 22193, 12527, 18341, 10353, 47574, 15158, 8556, 47574, 47574, 35743, 9412, 29539, 32493, 13780, 16674, 35743, 47574, 22193, 63321, 24413, 24413, 24413, 26854, 52331, 26854, 35743, 47574, 16674, 29539, 22193, 39317, 29539, 24413, 18341, 35743, 22193 ],
        "4" : [ 1849964, 1850299, 1850358, 1828178, 1831060, 1824389, 1830718, 1842096, 1821121, 1834564, 1826760, 1837485, 1834037, 1863690, 1834545, 1831490, 1833619, 1845225, 1852827, 1832435, 1833492, 1844280, 1834139, 1845389, 1823976, 1828654, 1838733, 1833991, 1836305, 1844661, 1833924, 1845608, 1829244, 1840258, 1840080, 1833519, 1831033, 1825910, 1828701, 1833146, 1825723, 1829867, 1850291, 1836296, 1834189, 1832532, 1836096, 1828702, 1822331, 1836086, 1836603, 1846376, 1841103, 1842299, 1838503, 1837943, 1827601, 1836511, 1842266, 1833890, 1833656, 1837981, 1830944, 1847736, 1846568, 1838698, 1826914, 1834211, 1840349, 1831696, 1842126, 1832055, 1846371, 1832261, 1824675, 1831276, 1847990, 1829238, 1826547, 1834235, 1848247, 1842449, 1826302, 1850820, 1829120, 1832394, 1838881, 1824017, 1841697, 1828751, 1837932, 1841286, 1819490, 1834471, 1834123, 1840507, 1833671, 1846962, 1830238, 1847174, 1847382, 1831330, 1834565, 1823998, 1822885, 1827910, 1837354, 1846442, 1837273, 1840872, 1832856, 1824718, 1846350, 1849427, 1835742, 1837108, 1834981, 1826638, 1824546, 1851557, 1849691, 1827136, 1832401, 1853163, 1827561, 1817816, 1839470, 1835444, 1826730, 1843801, 1840640, 1831522, 1836781, 1841159, 1838616, 1831369, 1834276, 1830520, 1840323, 1846935, 1849354, 1846896, 1828782, 1834591, 1834808, 1836994, 1832831, 1835276, 1833918, 1843148, 1838411, 1832496, 1821068, 1840055, 1826489, 1825662, 1838319, 1841064, 1835652, 1842056, 1853796, 1824006, 1835888, 1847150, 1831745, 1844599, 1827961, 1842865, 1830256, 1846443, 1838984, 1834224, 1829329, 1846810, 1829207, 1838887, 1829365, 1834906, 1840150, 1836248, 1846923, 1828523, 1846992, 1830402, 1846910, 1827421, 1834102, 1833531, 1839872, 1840015, 1845898, 1837808, 1843181, 1829087, 1839423, 1836629, 1832089, 1834549, 1827101, 1845794 ],
        "6" : [ 47574, 52331, 52331, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 52331, 52331, 52331, 47574, 47574, 47574, 47574, 52331, 47574, 47574, 47574, 52331, 47574, 52331, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 52331, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 52331, 52331, 52331, 47574, 47574, 52331, 52331, 43249, 47574, 52331, 47574, 52331, 47574, 47574, 47574, 47574, 47574, 52331, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 52331, 47574, 47574, 47574, 47574, 47574, 47574, 52331, 52331, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 57565, 47574, 47574, 47574, 47574, 47574, 52331, 52331, 52331, 47574, 52331, 47574, 43249, 52331, 47574, 47574, 47574, 47574, 47574, 43249, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 43249, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 52331, 52331, 47574, 47574, 52331, 52331, 43249, 47574, 47574, 47574, 52331, 47574, 47574, 47574, 47574, 47574, 43249, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 43249, 52331, 52331, 52331, 52331, 52331, 47574, 43249, 47574, 52331, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 43249, 47574, 52331, 43249, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 43249, 47574, 52331, 57565, 47574, 52331, 47574, 47574, 47574, 52331, 52331, 52331, 52331, 52331, 47574, 47574, 47574, 52331, 52331, 47574, 43249, 47574, 47574, 52331, 47574 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226781104,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 42464,
        "IOBytes" : {
          "Total" : 17027276897,
          "Details" : {
            "IR" : 2357123983,
            "IW" : 0,
            "SR" : 7731740894,
            "SW" : 6938412020
          }
        }
      }
    },
    "19" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : 473987292,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 40,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163], HashAggregate(keys=[], functions=[avg(netpaid#159)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163], HashAggregate(keys=[], functions=[avg(netpaid#159)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 40,
        "inputRowCount" : 1
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226823251,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 317,
        "IOBytes" : {
          "Total" : 4535,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 4535,
            "SW" : 0
          }
        }
      }
    },
    "4" : {
      "LQP" : {
        "operators" : {
          "45" : {
            "sign" : 352920416,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2891,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] "
          },
          "34" : {
            "sign" : 1921382062,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176] "
          },
          "12" : {
            "sign" : -1741284868,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 18904831708800,
            "rowCount" : 189048317088,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#5 = c_customer_sk#97) "
          },
          "51" : {
            "sign" : 527040145,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#115, ca_address_id#116, ca_street_number#117, ca_street_name#118, ca_street_type#119, ca_suite_number#120, ca_city#121, ca_county#122, ca_state#123, ca_zip#124, ca_country#125, ca_gmt_offset#126, ca_location_type#127], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "8" : {
            "sign" : 1915756015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 950119788214138752,
            "rowCount" : 4167192053570784,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#46) "
          },
          "19" : {
            "sign" : 1726153103,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163] "
          },
          "23" : {
            "sign" : 210705200,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 64283634425,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "4" : {
            "sign" : 931999392,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 29801287641862177961212210484736,
            "rowCount" : 112883665310084007428834130624,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          },
          "40" : {
            "sign" : -14387779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 482532000,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111)) "
          },
          "15" : {
            "sign" : 204445740,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1064960,
            "rowCount" : 469,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95], BroadcastQueryStage 2 "
          },
          "11" : {
            "sign" : -306043799,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 17392445172096,
            "rowCount" : 189048317088,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "9" : {
            "sign" : 880242762,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 14540840357140608,
            "rowCount" : 88663660714272,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "44" : {
            "sign" : 228187507,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#75, i_item_id#76, i_rec_start_date#77, i_rec_end_date#78, i_item_desc#79, i_current_price#80, i_wholesale_cost#81, i_brand_id#82, i_brand#83, i_class_id#84, i_class#85, i_category_id#86, i_category#87, i_manufact_id#88, i_manufact#89, i_size#90, i_formulation#91, i_color#92, i_units#93, i_container#94, i_manager_id#95, i_product_name#96], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "33" : {
            "sign" : -628374504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 43776970976,
            "rowCount" : 288006388,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "22" : {
            "sign" : 474468585,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 10168082233949,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          },
          "26" : {
            "sign" : -1141989269,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 118459872995,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#46) "
          },
          "50" : {
            "sign" : -1835352789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 231369396,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_country#125) AND isnotnull(ca_zip#124)) "
          },
          "37" : {
            "sign" : -1176082101,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 23471,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71)) "
          },
          "13" : {
            "sign" : 2012214440,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 4701408,
            "rowCount" : 97946,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15], ShuffleQueryStage 0 "
          },
          "46" : {
            "sign" : -1899214940,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_ticket_number#34L] "
          },
          "24" : {
            "sign" : 815965107,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 72623132945,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "35" : {
            "sign" : 812756911,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "16" : {
            "sign" : -2059652252,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051704,
            "rowCount" : 47,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71], BroadcastQueryStage 3 "
          },
          "5" : {
            "sign" : 2105513021,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24964543653761271400468992,
            "rowCount" : 120021844489236881733024,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "10" : {
            "sign" : 294442031,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 14895494999997696,
            "rowCount" : 88663660714272,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#4 = i_item_sk#75) "
          },
          "48" : {
            "sign" : 58525475,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "21" : {
            "sign" : -859819627,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6792785226829,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "43" : {
            "sign" : 2095138697,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(i_item_sk#75) "
          },
          "32" : {
            "sign" : 1011872821,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39926600456,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42))) "
          },
          "49" : {
            "sign" : 1153698931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#123, ca_zip#124, ca_country#125] "
          },
          "6" : {
            "sign" : 1294965600,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 27845067921502956562061568,
            "rowCount" : 120021844489236881733024,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "36" : {
            "sign" : -84657601,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "1" : {
            "sign" : 1174838359,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 9179603591811512263680937175424,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157] "
          },
          "39" : {
            "sign" : -702144975,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 135108960,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "17" : {
            "sign" : -114833265,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sr_item_sk#27, sr_ticket_number#34L], ShuffleQueryStage 4 "
          },
          "25" : {
            "sign" : 419855978,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 113837048683,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "14" : {
            "sign" : 1038420939,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 131450376,
            "rowCount" : 1930128,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111], ShuffleQueryStage 1 "
          },
          "47" : {
            "sign" : 2011675015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27)) "
          },
          "31" : {
            "sign" : 1867243163,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9456300108,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] "
          },
          "42" : {
            "sign" : -459341749,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 15504000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "0" : {
            "sign" : -503733772,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 9179603591811512263680937175424,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8)))) "
          },
          "20" : {
            "sign" : -842263021,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 675059401424,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "27" : {
            "sign" : 455826232,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 44237719834,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "2" : {
            "sign" : -457678263,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 8305355630686606333806562206336,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "38" : {
            "sign" : 2043403682,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 192558,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "18" : {
            "sign" : 775636263,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_state#123, ca_zip#124, ca_country#125], ShuffleQueryStage 5 "
          },
          "30" : {
            "sign" : 102638235,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 26954307198,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#5 = c_customer_sk#97) "
          },
          "7" : {
            "sign" : -1752375254,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 916782251785572480,
            "rowCount" : 4167192053570784,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "29" : {
            "sign" : 1031245998,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24753955590,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "41" : {
            "sign" : 2021572997,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 500000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#97, c_customer_id#98, c_current_cdemo_sk#99, c_current_hdemo_sk#100, c_current_addr_sk#101, c_first_shipto_date_sk#102, c_first_sales_date_sk#103, c_salutation#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_day#108, c_birth_month#109, c_birth_year#110, c_birth_country#111, c_login#112, c_email_address#113, c_last_review_date#114], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : 1644094708,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 20544827086435289352047811773568,
            "rowCount" : 112883665310084007428834130624,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "28" : {
            "sign" : 1746504807,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 45386751518,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#4 = i_item_sk#75) "
          }
        },
        "links" : [ {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Join",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Aggregate",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "LogicalRelation",
          "toId" : 32,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "LogicalRelation",
          "toId" : 37,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Filter",
          "toId" : 36,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "Project",
          "toId" : 35,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "Project",
          "toId" : 34,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "Aggregate",
          "toId" : 32,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 32,
          "fromName" : "Filter",
          "toId" : 31,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Project",
          "toId" : 30,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 41,
          "fromName" : "LogicalRelation",
          "toId" : 40,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "Filter",
          "toId" : 39,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "Project",
          "toId" : 30,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Join",
          "toId" : 29,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Project",
          "toId" : 28,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 44,
          "fromName" : "LogicalRelation",
          "toId" : 43,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 43,
          "fromName" : "Filter",
          "toId" : 42,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 42,
          "fromName" : "Project",
          "toId" : 28,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Join",
          "toId" : 27,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Project",
          "toId" : 26,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Filter",
          "toId" : 45,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 45,
          "fromName" : "Project",
          "toId" : 26,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Join",
          "toId" : 25,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Project",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 48,
          "fromName" : "LogicalRelation",
          "toId" : 47,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 47,
          "fromName" : "Filter",
          "toId" : 46,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 46,
          "fromName" : "Project",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Join",
          "toId" : 23,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Project",
          "toId" : 22,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 51,
          "fromName" : "LogicalRelation",
          "toId" : 50,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 50,
          "fromName" : "Filter",
          "toId" : 49,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 49,
          "fromName" : "Project",
          "toId" : 22,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Join",
          "toId" : 21,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Project",
          "toId" : 20,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Aggregate",
          "toId" : 19,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Subquery"
        } ],
        "rawPlan" : "Filter (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8))))\n:  +- Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163]\n:     +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n:        +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n:           +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n:              :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n:              :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n:              :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n:              :     :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n:              :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n:              :     :     :     :     :  +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42)))\n:              :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n:              :     :     :     :     :     :     +- Project [s_store_sk#46]\n:              :     :     :     :     :     :        +- Project [s_store_sk#46]\n:              :     :     :     :     :     :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :     :     :     :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n:              :     :     :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n:              :     :     :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n:              :     :     :     +- Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :        +- Filter isnotnull(i_item_sk#75)\n:              :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n:              :     :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n:              :     :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     +- Project [sr_item_sk#27, sr_ticket_number#34L]\n:              :        +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n:              :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n:              +- Project [ca_state#123, ca_zip#124, ca_country#125]\n:                 +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n:                    +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n+- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157]\n   +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n      +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n         +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n            :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n            :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n            :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n            :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n            :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n            :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n            :     :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n            :     :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n            :     :     :     :     :- LogicalQueryStage Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15], ShuffleQueryStage 0\n            :     :     :     :     +- LogicalQueryStage Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111], ShuffleQueryStage 1\n            :     :     :     +- LogicalQueryStage Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95], BroadcastQueryStage 2\n            :     :     +- LogicalQueryStage Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71], BroadcastQueryStage 3\n            :     +- LogicalQueryStage Project [sr_item_sk#27, sr_ticket_number#34L], ShuffleQueryStage 4\n            +- LogicalQueryStage Project [ca_state#123, ca_zip#124, ca_country#125], ShuffleQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 774494332,
        "inputRowCount" : 31770727
      },
      "PD" : {
        "2" : [ 24239, 24517, 24791, 24022, 26181, 25961, 24217, 26356, 25111, 23476, 24604, 26286, 25734, 25274, 23897, 25013, 23774, 26138, 25762, 23900, 25919, 25497, 24293, 24576, 25287, 24879, 24945, 26329, 26983, 25682, 24307, 24820, 26419, 25508, 24969, 23571, 24645, 25763, 24702, 27110, 24893, 26470, 24752, 25436, 24531, 25673, 23651, 23712, 25635, 24018, 24207, 24962, 25092, 25285, 26447, 24543, 24752, 23833, 24029, 26727, 26336, 24367, 24513, 25970, 24848, 26589, 26389, 26001, 25857, 23503, 25556, 25479, 25338, 25317, 26053, 27243, 26065, 24609, 26203, 24181, 23554, 26302, 24906, 23822, 23234, 24012, 25032, 28118, 25912, 26382, 24201, 26387, 26554, 25687, 26158, 26836, 25436, 26837, 27537, 23402, 24219, 25789, 23884, 24169, 25769, 25414, 24927, 25866, 26047, 26284, 24485, 25146, 26762, 24725, 24815, 25400, 24773, 25288, 25486, 24343, 25849, 23293, 25333, 26085, 23689, 23714, 25320, 25135, 24732, 24986, 24941, 23852, 26109, 27175, 25042, 25617, 25759, 25221, 24215, 25254, 25471, 25268, 25200, 25814, 25626, 25841, 26281, 26825, 24897, 25162, 27001, 24570, 25743, 25588, 27301, 24470, 24751, 26322, 25074, 23256, 24630, 25234, 24152, 25458, 24675, 25412, 25226, 26387, 25361, 24258, 27023, 25414, 23994, 25105, 24904, 23889, 24308, 25391, 25428, 25783, 24800, 25575, 23818, 24966, 26550, 26970, 26549, 24286, 24146, 23737, 25466, 25343, 25155, 25814, 25484, 24698, 23961, 24943, 24735, 25264 ],

      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 5,
        "FinishedTasksTotalTimeInMs" : 78295.0,
        "FinishedTasksDistributionInMs" : [ 11675.0, 15771.0, 16603.0, 16771.0, 17475.0 ]
      },
      "StartTimeInMs" : 1702226775990,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 47578,
        "IOBytes" : {
          "Total" : 17746763634,
          "Details" : {
            "IR" : 2633858993,
            "IW" : 0,
            "SR" : 7809838072,
            "SW" : 7303066569
          }
        }
      }
    },
    "15" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 352920416,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2891,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] "
          },
          "8" : {
            "sign" : -1383771894,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1337115476928000,
            "rowCount" : 8153143152000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "19" : {
            "sign" : -1835352789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 231369396,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_country#125) AND isnotnull(ca_zip#124)) "
          },
          "4" : {
            "sign" : -1240131958,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2243740047328586766960000,
            "rowCount" : 11506359217069675728000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "15" : {
            "sign" : -1899214940,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_ticket_number#34L] "
          },
          "11" : {
            "sign" : 931765203,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 16488824,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95], ShuffleQueryStage 3 "
          },
          "9" : {
            "sign" : 2139616955,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1369728049536000,
            "rowCount" : 8153143152000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#4 = i_item_sk#75) "
          },
          "13" : {
            "sign" : -1176082101,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 23471,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71)) "
          },
          "16" : {
            "sign" : 2011675015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27)) "
          },
          "5" : {
            "sign" : -362936165,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2519892668538258984432000,
            "rowCount" : 11506359217069675728000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "10" : {
            "sign" : 1250952950,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3681052128,
            "rowCount" : 39966388,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111], ShuffleQueryStage 10 "
          },
          "6" : {
            "sign" : -1413015880,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 82697330990736000,
            "rowCount" : 399504014448000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "1" : {
            "sign" : 712794221,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 20451342480642438918706204,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "17" : {
            "sign" : 58525475,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "14" : {
            "sign" : 2043403682,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 192558,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "0" : {
            "sign" : 100809541,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163] "
          },
          "20" : {
            "sign" : 527040145,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#115, ca_address_id#116, ca_street_number#117, ca_street_name#118, ca_street_type#119, ca_suite_number#120, ca_city#121, ca_county#122, ca_state#123, ca_zip#124, ca_country#125, ca_gmt_offset#126, ca_location_type#127], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "2" : {
            "sign" : -521780353,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 240303274147548657294797908,
            "rowCount" : 1397112058997375914504639,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "18" : {
            "sign" : 1153698931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#123, ca_zip#124, ca_country#125] "
          },
          "7" : {
            "sign" : 10051179,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 85893363106320000,
            "rowCount" : 399504014448000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#46) "
          },
          "3" : {
            "sign" : 325183575,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 350675126808341354540664389,
            "rowCount" : 1397112058997375914504639,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalRelation",
          "toId" : 13,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Filter",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalRelation",
          "toId" : 16,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Filter",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalRelation",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Filter",
          "toId" : 18,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163]\n+- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n   +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n      +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n         :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n         :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n         :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n         :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n         :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n         :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n         :     :     :     :- LogicalQueryStage Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111], ShuffleQueryStage 10\n         :     :     :     +- LogicalQueryStage Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95], ShuffleQueryStage 3\n         :     :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n         :     :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n         :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n         :     +- Project [sr_item_sk#27, sr_ticket_number#34L]\n         :        +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n         :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n         +- Project [ca_state#123, ca_zip#124, ca_country#125]\n            +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n               +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n"
      },
      "IM" : {
        "inputSizeInBytes" : 7630339718,
        "inputRowCount" : 69972401
      },
      "PD" : {
        "11" : [ 39317, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 39317, 39317, 39317, 35743, 39317, 35743, 35743, 39317, 39317, 39317, 35743, 39317, 39317, 35743, 35743, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 35743, 39317, 39317, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 35743, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 39317, 35743, 35743, 35743, 39317, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 39317, 35743, 35743, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 35743, 39317, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 39317, 35743, 35743, 39317, 39317, 35743, 39317, 35743, 35743, 35743, 35743, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 35743, 39317, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 39317, 39317 ],
        "12" : [ 10647805, 10564791, 10730819, 10730819, 10730819, 10647805, 10730819, 9755295, 9755295, 10730819, 10730819, 10730819, 10730819, 10481777, 10730819, 10481777, 10730819, 10730819, 11164690, 10730819, 10730819, 10730819, 10647805, 10232735, 11073374, 10730819, 10730819, 10730819, 10481777, 10730819, 10730819, 10730819, 10982058, 10730819, 10730819, 10730819, 10730819, 10564791, 10315749, 10730819, 10647805, 10647805, 10647805, 10730819, 10730819, 10730819, 10730819, 10647805, 9755295, 10149721, 11712586, 10730819, 10730819, 10730819, 10647805, 10799426, 11073374, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 9755295, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 10066707, 10730819, 10730819, 10730819, 10730819, 9755295, 10730819, 10730819, 10730819, 10730819, 10481777, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 9755295, 10730819, 10730819, 10564791, 10647805, 10982058, 10315749, 10730819, 10730819, 10647805, 10730819, 10730819, 10730819, 10730819, 11529954, 9755295, 10730819, 10730819, 10730819, 9755295, 10730819, 10647805, 10730819, 10730819, 10564791, 9900679, 10730819, 10647805, 10730819, 11529954, 10730819, 10730819, 10730819, 10730819, 10481777, 10730819, 10647805, 10730819, 10730819, 10647805, 10730819, 10647805, 10730819, 10564791, 10730819, 10730819, 10730819, 10730819, 10315749, 10730819, 10730819, 10647805, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 9755295, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 9755295, 10564791, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 10398763, 10730819, 10730819, 10730819, 10982058, 10730819, 10730819, 10730819, 10730819, 9755295, 9755295, 10730819, 10730819, 10730819, 10149721, 10730819, 10481777, 11073374, 10799426, 10730819, 10730819, 10730819, 10481777, 10730819, 10481777, 10730819, 9755295, 10730819, 9983693, 10730819, 10066707, 10799426, 10822135 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226801420,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 22148,
        "IOBytes" : {
          "Total" : 10881132629,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 6633924987,
            "SW" : 4247207642
          }
        }
      }
    },
    "11" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : -1835352789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 231369396,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_country#125) AND isnotnull(ca_zip#124)) "
          },
          "12" : {
            "sign" : 1746504807,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 45386751518,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#4 = i_item_sk#75) "
          },
          "8" : {
            "sign" : 815965107,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 72623132945,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "19" : {
            "sign" : 812756911,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "23" : {
            "sign" : -702144975,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 135108960,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "4" : {
            "sign" : -842263021,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 675059401424,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "15" : {
            "sign" : 1867243163,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9456300108,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] "
          },
          "11" : {
            "sign" : 455826232,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 44237719834,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "9" : {
            "sign" : 419855978,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 113837048683,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "33" : {
            "sign" : 1153698931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#123, ca_zip#124, ca_country#125] "
          },
          "22" : {
            "sign" : 2043403682,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 192558,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "26" : {
            "sign" : -459341749,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 15504000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "13" : {
            "sign" : 1031245998,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24753955590,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "24" : {
            "sign" : -14387779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 482532000,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111)) "
          },
          "35" : {
            "sign" : 527040145,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#115, ca_address_id#116, ca_street_number#117, ca_street_name#118, ca_street_type#119, ca_suite_number#120, ca_city#121, ca_county#122, ca_state#123, ca_zip#124, ca_country#125, ca_gmt_offset#126, ca_location_type#127], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "16" : {
            "sign" : 1011872821,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39926600456,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42))) "
          },
          "5" : {
            "sign" : -859819627,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6792785226829,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "10" : {
            "sign" : -1141989269,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 118459872995,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#46) "
          },
          "21" : {
            "sign" : -1176082101,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 23471,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71)) "
          },
          "32" : {
            "sign" : 58525475,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "6" : {
            "sign" : 474468585,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 10168082233949,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          },
          "1" : {
            "sign" : 931261541,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 37490,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157] "
          },
          "17" : {
            "sign" : -628374504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 43776970976,
            "rowCount" : 288006388,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "25" : {
            "sign" : 2021572997,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 500000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#97, c_customer_id#98, c_current_cdemo_sk#99, c_current_hdemo_sk#100, c_current_addr_sk#101, c_first_shipto_date_sk#102, c_first_sales_date_sk#103, c_salutation#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_day#108, c_birth_month#109, c_birth_year#110, c_birth_country#111, c_login#112, c_email_address#113, c_last_review_date#114], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "14" : {
            "sign" : 102638235,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 26954307198,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#5 = c_customer_sk#97) "
          },
          "31" : {
            "sign" : 2011675015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27)) "
          },
          "0" : {
            "sign" : 174773478,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 37490,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8)))) "
          },
          "20" : {
            "sign" : -84657601,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "27" : {
            "sign" : 2095138697,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(i_item_sk#75) "
          },
          "2" : {
            "sign" : 2060614971,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 33920,
            "rowCount" : 214,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159], HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], functions=[sum(UnscaledValue(ss_sales_price#15))]) "
          },
          "18" : {
            "sign" : 1921382062,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176] "
          },
          "30" : {
            "sign" : -1899214940,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_ticket_number#34L] "
          },
          "7" : {
            "sign" : 210705200,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 64283634425,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "29" : {
            "sign" : 352920416,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2891,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] "
          },
          "3" : {
            "sign" : 1726153103,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163] "
          },
          "28" : {
            "sign" : 228187507,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#75, i_item_id#76, i_rec_start_date#77, i_rec_end_date#78, i_item_desc#79, i_current_price#80, i_wholesale_cost#81, i_brand_id#82, i_brand#83, i_class_id#84, i_class#85, i_category_id#86, i_category#87, i_manufact_id#88, i_manufact#89, i_size#90, i_formulation#91, i_color#92, i_units#93, i_container#94, i_manager_id#95, i_product_name#96], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalQueryStage",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalRelation",
          "toId" : 16,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalRelation",
          "toId" : 21,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Filter",
          "toId" : 20,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Project",
          "toId" : 19,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Project",
          "toId" : 18,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Aggregate",
          "toId" : 16,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 16,
          "fromName" : "Filter",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "LogicalRelation",
          "toId" : 24,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Filter",
          "toId" : 23,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Join",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "LogicalRelation",
          "toId" : 27,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Filter",
          "toId" : 26,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Join",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Filter",
          "toId" : 29,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "LogicalRelation",
          "toId" : 31,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Filter",
          "toId" : 30,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "LogicalRelation",
          "toId" : 34,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "Filter",
          "toId" : 33,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Aggregate",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Subquery"
        } ],
        "rawPlan" : "Filter (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8))))\n:  +- Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163]\n:     +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n:        +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n:           +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n:              :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n:              :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n:              :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n:              :     :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n:              :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n:              :     :     :     :     :  +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42)))\n:              :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n:              :     :     :     :     :     :     +- Project [s_store_sk#46]\n:              :     :     :     :     :     :        +- Project [s_store_sk#46]\n:              :     :     :     :     :     :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :     :     :     :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n:              :     :     :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n:              :     :     :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n:              :     :     :     +- Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :        +- Filter isnotnull(i_item_sk#75)\n:              :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n:              :     :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n:              :     :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     +- Project [sr_item_sk#27, sr_ticket_number#34L]\n:              :        +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n:              :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n:              +- Project [ca_state#123, ca_zip#124, ca_country#125]\n:                 +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n:                    +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n+- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157]\n   +- LogicalQueryStage Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159], HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], functions=[sum(UnscaledValue(ss_sales_price#15))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 33920,
        "inputRowCount" : 214
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226787719,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 35849,
        "IOBytes" : {
          "Total" : 16660379107,
          "Details" : {
            "IR" : 2357123983,
            "IW" : 0,
            "SR" : 7365980094,
            "SW" : 6937275030
          }
        }
      }
    },
    "9" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : -1899214940,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_ticket_number#34L] "
          },
          "12" : {
            "sign" : 815965107,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 72623132945,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "8" : {
            "sign" : -842263021,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 675059401424,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "19" : {
            "sign" : 1867243163,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9456300108,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] "
          },
          "23" : {
            "sign" : 812756911,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "4" : {
            "sign" : 367696420,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2422232981824,
            "rowCount" : 9038182768,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          },
          "15" : {
            "sign" : 455826232,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 44237719834,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "11" : {
            "sign" : 210705200,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 64283634425,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "9" : {
            "sign" : -859819627,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6792785226829,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "33" : {
            "sign" : 352920416,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2891,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] "
          },
          "22" : {
            "sign" : 1921382062,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176] "
          },
          "26" : {
            "sign" : 2043403682,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 192558,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "37" : {
            "sign" : 1153698931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#123, ca_zip#124, ca_country#125] "
          },
          "13" : {
            "sign" : 419855978,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 113837048683,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "24" : {
            "sign" : -84657601,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "35" : {
            "sign" : 2011675015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27)) "
          },
          "16" : {
            "sign" : 1746504807,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 45386751518,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#4 = i_item_sk#75) "
          },
          "5" : {
            "sign" : -396646579,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1708504,
            "rowCount" : 9467,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 8 "
          },
          "10" : {
            "sign" : 474468585,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 10168082233949,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          },
          "21" : {
            "sign" : -628374504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 43776970976,
            "rowCount" : 288006388,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "32" : {
            "sign" : 228187507,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#75, i_item_id#76, i_rec_start_date#77, i_rec_end_date#78, i_item_desc#79, i_current_price#80, i_wholesale_cost#81, i_brand_id#82, i_brand#83, i_class_id#84, i_class#85, i_category_id#86, i_category#87, i_manufact_id#88, i_manufact#89, i_size#90, i_formulation#91, i_color#92, i_units#93, i_container#94, i_manager_id#95, i_product_name#96], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "6" : {
            "sign" : 775636263,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 61040568,
            "rowCount" : 954704,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_state#123, ca_zip#124, ca_country#125], ShuffleQueryStage 5 "
          },
          "36" : {
            "sign" : 58525475,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : -660546749,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 759207352512,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157] "
          },
          "39" : {
            "sign" : 527040145,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#115, ca_address_id#116, ca_street_number#117, ca_street_name#118, ca_street_type#119, ca_suite_number#120, ca_city#121, ca_county#122, ca_state#123, ca_zip#124, ca_country#125, ca_gmt_offset#126, ca_location_type#127], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "17" : {
            "sign" : 1031245998,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24753955590,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "25" : {
            "sign" : -1176082101,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 23471,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71)) "
          },
          "14" : {
            "sign" : -1141989269,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 118459872995,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#46) "
          },
          "31" : {
            "sign" : 2095138697,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(i_item_sk#75) "
          },
          "0" : {
            "sign" : -800836232,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 759207352512,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8)))) "
          },
          "20" : {
            "sign" : 1011872821,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39926600456,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42))) "
          },
          "27" : {
            "sign" : -702144975,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 135108960,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "2" : {
            "sign" : 442592461,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 686901890368,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "38" : {
            "sign" : -1835352789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 231369396,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_country#125) AND isnotnull(ca_zip#124)) "
          },
          "18" : {
            "sign" : 102638235,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 26954307198,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#5 = c_customer_sk#97) "
          },
          "30" : {
            "sign" : -459341749,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 15504000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "7" : {
            "sign" : 1726153103,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163] "
          },
          "29" : {
            "sign" : 2021572997,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 500000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#97, c_customer_id#98, c_current_cdemo_sk#99, c_current_hdemo_sk#100, c_current_addr_sk#101, c_first_shipto_date_sk#102, c_first_sales_date_sk#103, c_salutation#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_day#108, c_birth_month#109, c_birth_year#110, c_birth_country#111, c_login#112, c_email_address#113, c_last_review_date#114], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : -1371236512,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1699178360384,
            "rowCount" : 9038182768,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "28" : {
            "sign" : -14387779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 482532000,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111)) "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Aggregate",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalRelation",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "LogicalRelation",
          "toId" : 25,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Filter",
          "toId" : 24,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Project",
          "toId" : 23,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Project",
          "toId" : 22,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Aggregate",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 20,
          "fromName" : "Filter",
          "toId" : 19,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Project",
          "toId" : 18,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalRelation",
          "toId" : 28,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Filter",
          "toId" : 27,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Project",
          "toId" : 18,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Join",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "LogicalRelation",
          "toId" : 31,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Filter",
          "toId" : 30,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Project",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Join",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Filter",
          "toId" : 33,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Join",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "LogicalRelation",
          "toId" : 35,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "Filter",
          "toId" : 34,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Join",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "LogicalRelation",
          "toId" : 38,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "Filter",
          "toId" : 37,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Aggregate",
          "toId" : 7,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Subquery"
        } ],
        "rawPlan" : "Filter (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8))))\n:  +- Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163]\n:     +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n:        +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n:           +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n:              :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n:              :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n:              :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n:              :     :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n:              :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n:              :     :     :     :     :  +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42)))\n:              :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n:              :     :     :     :     :     :     +- Project [s_store_sk#46]\n:              :     :     :     :     :     :        +- Project [s_store_sk#46]\n:              :     :     :     :     :     :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :     :     :     :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n:              :     :     :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n:              :     :     :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n:              :     :     :     +- Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :        +- Filter isnotnull(i_item_sk#75)\n:              :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n:              :     :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n:              :     :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     +- Project [sr_item_sk#27, sr_ticket_number#34L]\n:              :        +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n:              :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n:              +- Project [ca_state#123, ca_zip#124, ca_country#125]\n:                 +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n:                    +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n+- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157]\n   +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n      +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n         +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n            :- LogicalQueryStage Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 8\n            +- LogicalQueryStage Project [ca_state#123, ca_zip#124, ca_country#125], ShuffleQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 62749072,
        "inputRowCount" : 964171
      },
      "PD" : {
        "5" : [ 10353, 13780, 29539, 20176, 18341, 22193, 24413, 43249, 57565, 57565, 18341, 20176, 47574, 35743, 43249, 35743, 13780, 43249, 20176, 47574, 32493, 22193, 29539, 26854, 8556, 18341, 32493, 29539, 47574, 4390, 7778, 22193, 12527, 10353, 20176, 29539, 26854, 43249, 39317, 22193, 29539, 24413, 15158, 13780, 24413, 18341, 35743, 32493, 32493, 35743, 57565, 43249, 13780, 29539, 39317, 24413, 12527, 47574, 43249, 26854, 22193, 32493, 26854, 13780, 22193, 47574, 39317, 16674, 26854, 29539, 13780, 13780, 22193, 12527, 18341, 39317, 6428, 18341, 39317, 26854, 52331, 39317, 32493, 32493, 32493, 9412, 29539, 26854, 11388, 18341, 10353, 12527, 11388, 43249, 52331, 18341, 15158, 13780, 13780, 32493, 35743, 43249, 32493, 16674, 15158, 20176, 18341, 22193, 29539, 3628, 29539, 24413, 16674, 22193, 16674, 39317, 22193, 57565, 29539, 32493, 13780, 32493, 43249, 20176, 22193, 24413, 4830, 13780, 22193, 26854, 15158, 24413, 22193, 32493, 35743, 47574, 29539, 29539, 24413, 9412, 18341, 29539, 43249, 11388, 18341, 32493, 47574, 22193, 47574, 24413, 26854, 47574, 18341, 11388, 43249, 15158, 29539, 39317, 24413, 16674, 52331, 20176, 10353, 29539, 22193, 12527, 18341, 10353, 47574, 15158, 8556, 47574, 47574, 35743, 9412, 29539, 32493, 13780, 16674, 35743, 47574, 22193, 63321, 24413, 24413, 24413, 26854, 52331, 26854, 35743, 47574, 16674, 29539, 22193, 39317, 29539, 24413, 18341, 35743, 22193 ],
        "7" : [ 4679, 6396, 8269, 5209, 4500, 7167, 6069, 5683, 4135, 5062, 5756, 5986, 4391, 4837, 4340, 6237, 6020, 6241, 6142, 8714, 5484, 3817, 5912, 5384, 5074, 4184, 5656, 6317, 6476, 6476, 5959, 5582, 5918, 5206, 6323, 9602, 4443, 6056, 6882, 4929, 4684, 4893, 5957, 5576, 4857, 5428, 4790, 7390, 7896, 7277, 5939, 6357, 5889, 4957, 4999, 6191, 3564, 7111, 5608, 5972, 7059, 5975, 5823, 5595, 5962, 5226, 5648, 4553, 6704, 4749, 6988, 5510, 3833, 5560, 4662, 6739, 4670, 5357, 6662, 5095, 5045, 6855, 5734, 8235, 6638, 6943, 4498, 4415, 5775, 4991, 7511, 5166, 6438, 4390, 6052, 5073, 5871, 7471, 9347, 7498, 8551, 6167, 5536, 4818, 5938, 6004, 6493, 6423, 5161, 5612, 6614, 3992, 5601, 6664, 5855, 3844, 6154, 5247, 6085, 7790, 5782, 4385, 5085, 5637, 4132, 4807, 4817, 7624, 5733, 6101, 6599, 6018, 5915, 6544, 5501, 4825, 5125, 5938, 5462, 4305, 6144, 3863, 5358, 7657, 6970, 5471, 7681, 6313, 6827, 3983, 6987, 5418, 5488, 5065, 4436, 6768, 6677, 5497, 7927, 6478, 5733, 7175, 7642, 5760, 7332, 7185, 6225, 4571, 6158, 6292, 6081, 5944, 3918, 5379, 5048, 3815, 7524, 4166, 4754, 7148, 3883, 5167, 7309, 4368, 5762, 4805, 6583, 6269, 5445, 6907, 5490, 9187, 3637, 3872, 4993, 4358, 4729, 4886, 5979, 5197 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226786534,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 37034,
        "IOBytes" : {
          "Total" : 16666704372,
          "Details" : {
            "IR" : 2357123983,
            "IW" : 0,
            "SR" : 7372274620,
            "SW" : 6937305769
          }
        }
      }
    },
    "13" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 2012214440,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 9456300108,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15], ShuffleQueryStage 0 "
          },
          "8" : {
            "sign" : -1766452275,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9089652492648000,
            "rowCount" : 56108966004000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "19" : {
            "sign" : 2043403682,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 192558,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "23" : {
            "sign" : 1153698931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#123, ca_zip#124, ca_country#125] "
          },
          "4" : {
            "sign" : 220470235,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 67063467265,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "15" : {
            "sign" : 2021572997,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 500000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#97, c_customer_id#98, c_current_cdemo_sk#99, c_current_hdemo_sk#100, c_current_addr_sk#101, c_first_shipto_date_sk#102, c_first_sales_date_sk#103, c_salutation#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_day#108, c_birth_month#109, c_birth_year#110, c_birth_country#111, c_login#112, c_email_address#113, c_last_review_date#114], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "11" : {
            "sign" : -1528766840,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 26954307198,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#5 = c_customer_sk#97) "
          },
          "9" : {
            "sign" : 571135260,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 9314088356664000,
            "rowCount" : 56108966004000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#4 = i_item_sk#75) "
          },
          "22" : {
            "sign" : 58525475,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "13" : {
            "sign" : -702144975,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 135108960,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "24" : {
            "sign" : -1835352789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 231369396,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_country#125) AND isnotnull(ca_zip#124)) "
          },
          "16" : {
            "sign" : 931765203,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 16488824,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95], ShuffleQueryStage 3 "
          },
          "5" : {
            "sign" : 1226299666,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 75402965785,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "10" : {
            "sign" : -2015256493,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24753955590,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "21" : {
            "sign" : 2011675015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27)) "
          },
          "6" : {
            "sign" : -1598441247,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 118459872995,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "1" : {
            "sign" : -266743732,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 606835312982,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "17" : {
            "sign" : 352920416,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2891,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] "
          },
          "25" : {
            "sign" : 527040145,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#115, ca_address_id#116, ca_street_number#117, ca_street_name#118, ca_street_type#119, ca_suite_number#120, ca_city#121, ca_county#122, ca_state#123, ca_zip#124, ca_country#125, ca_gmt_offset#126, ca_location_type#127], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "14" : {
            "sign" : -14387779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 482532000,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111)) "
          },
          "0" : {
            "sign" : -1254080006,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163] "
          },
          "20" : {
            "sign" : -1899214940,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_ticket_number#34L] "
          },
          "2" : {
            "sign" : -8007308,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 7130314927541,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "18" : {
            "sign" : -1176082101,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 23471,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71)) "
          },
          "7" : {
            "sign" : -841706896,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 123082697307,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#46) "
          },
          "3" : {
            "sign" : 862171490,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 10505611934661,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalRelation",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalRelation",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Filter",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalRelation",
          "toId" : 21,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Filter",
          "toId" : 20,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "LogicalRelation",
          "toId" : 24,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Filter",
          "toId" : 23,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163]\n+- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n   +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n      +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n         :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n         :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n         :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n         :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n         :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n         :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n         :     :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n         :     :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n         :     :     :     :     :- LogicalQueryStage Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15], ShuffleQueryStage 0\n         :     :     :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n         :     :     :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n         :     :     :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n         :     :     :     +- LogicalQueryStage Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95], ShuffleQueryStage 3\n         :     :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n         :     :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n         :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n         :     +- Project [sr_item_sk#27, sr_ticket_number#34L]\n         :        +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n         :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n         +- Project [ca_state#123, ca_zip#124, ca_country#125]\n            +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n               +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n"
      },
      "IM" : {
        "inputSizeInBytes" : 13905587698,
        "inputRowCount" : 294681016
      },
      "PD" : {
        "11" : [ 39317, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 39317, 39317, 39317, 35743, 39317, 35743, 35743, 39317, 39317, 39317, 35743, 39317, 39317, 35743, 35743, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 35743, 39317, 39317, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 35743, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 39317, 35743, 35743, 35743, 39317, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 39317, 35743, 35743, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 35743, 39317, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 39317, 35743, 35743, 39317, 39317, 35743, 39317, 35743, 35743, 35743, 35743, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 35743, 39317, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 39317, 39317 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 8,
        "FinishedTasksNum" : 153,
        "FinishedTasksTotalTimeInMs" : 95879.0,
        "FinishedTasksDistributionInMs" : [ 238.0, 537.0, 581.0, 652.0, 1332.0 ]
      },
      "StartTimeInMs" : 1702226794969,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 28599,
        "IOBytes" : {
          "Total" : 16651313238,
          "Details" : {
            "IR" : 2355309235,
            "IW" : 0,
            "SR" : 7365949355,
            "SW" : 6930054648
          }
        }
      }
    },
    "16" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 527040145,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#115, ca_address_id#116, ca_street_number#117, ca_street_name#118, ca_street_type#119, ca_suite_number#120, ca_city#121, ca_county#122, ca_state#123, ca_zip#124, ca_country#125, ca_gmt_offset#126, ca_location_type#127], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "8" : {
            "sign" : 2011675015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27)) "
          },
          "4" : {
            "sign" : 366495343,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 239428042932222144,
            "rowCount" : 1151096360251068,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "11" : {
            "sign" : -1835352789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 231369396,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_country#125) AND isnotnull(ca_zip#124)) "
          },
          "9" : {
            "sign" : 58525475,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "5" : {
            "sign" : 1444641876,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 267054355578247776,
            "rowCount" : 1151096360251068,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "10" : {
            "sign" : 1153698931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#123, ca_zip#124, ca_country#125] "
          },
          "6" : {
            "sign" : -352026637,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 7870557840,
            "rowCount" : 39966388,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 11 "
          },
          "1" : {
            "sign" : -1048586098,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 16769341452639342015470,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "0" : {
            "sign" : -344778688,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163] "
          },
          "2" : {
            "sign" : 393209914,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 197039762068512268681776,
            "rowCount" : 1082636055321495981768,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "7" : {
            "sign" : -1899214940,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_ticket_number#34L] "
          },
          "3" : {
            "sign" : -1688353096,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 285815918604874939186752,
            "rowCount" : 1082636055321495981768,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalRelation",
          "toId" : 8,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalRelation",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163]\n+- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n   +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n      +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n         :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n         :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n         :     :- LogicalQueryStage Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 11\n         :     +- Project [sr_item_sk#27, sr_ticket_number#34L]\n         :        +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n         :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n         +- Project [ca_state#123, ca_zip#124, ca_country#125]\n            +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n               +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n"
      },
      "IM" : {
        "inputSizeInBytes" : 11803164048,
        "inputRowCount" : 69767999
      },
      "PD" : {
        "13" : [ 20687303, 20687303, 20630603, 20687303, 20630603, 20687303, 20687303, 20517203, 20517203, 20687303, 20573903, 20630603, 20573903, 20630603, 20687303, 20630603, 20724130, 20630603, 20630603, 20630603, 20687303, 20630603, 20554030, 20610730, 20744003, 20517203, 20630603, 20667430, 20687303, 20744003, 20573903, 20460503, 20744003, 20610730, 20687303, 20687303, 20630603, 20687303, 20630603, 20630603, 20630603, 20687303, 20630603, 20687303, 20744003, 20687303, 20687303, 20744003, 20687303, 20610730, 20497330, 20687303, 20744003, 20744003, 20687303, 20573903, 20630603, 20744003, 20800703, 20780830, 20687303, 20687303, 20573903, 20573903, 20687303, 20744003, 20744003, 20630603, 20744003, 20630603, 20630603, 20687303, 20687303, 20744003, 20630603, 20573903, 20630603, 20573903, 20744003, 20687303, 20687303, 20630603, 20744003, 20687303, 20610730, 20744003, 20610730, 20630603, 20630603, 20517203, 20687303, 20497330, 20517203, 20687303, 20630603, 20573903, 20630603, 20610730, 20744003, 20573903, 20630603, 20630603, 20687303, 20630603, 20744003, 20687303, 20630603, 20630603, 20630603, 20687303, 20667430, 20744003, 20687303, 20630603, 20744003, 20517203, 20687303, 20630603, 20744003, 20630603, 20630603, 20687303, 20744003, 20687303, 20630603, 20667430, 20744003, 20630603, 20687303, 20573903, 20800703, 20744003, 20630603, 20687303, 20687303, 20630603, 20517203, 20630603, 20744003, 20667430, 20573903, 20497330, 20630603, 20687303, 20667430, 20630603, 20630603, 20630603, 20630603, 20687303, 20440630, 20687303, 20667430, 20687303, 20687303, 20573903, 20744003, 20780830, 20667430, 20630603, 20744003, 20630603, 20573903, 20687303, 20687303, 20667430, 20687303, 20610730, 20630603, 20800703, 20630603, 20724130, 20573903, 20573903, 20744003, 20667430, 20667430, 20687303, 20630603, 20573903, 20724130, 20800703, 20573903, 20744003, 20630603, 20687303, 20744003, 20744003, 20744003, 20573903, 20724130, 20687303, 20687303, 20573903, 20744003, 20610730, 20630603, 20610730, 20610730, 20630603 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226809274,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 14294,
        "IOBytes" : {
          "Total" : 4970821010,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 4602618475,
            "SW" : 368202535
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "45" : {
            "sign" : 352920416,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2891,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] "
          },
          "34" : {
            "sign" : 1921382062,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176] "
          },
          "12" : {
            "sign" : -775517188,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 18904831708800,
            "rowCount" : 189048317088,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#5 = c_customer_sk#97) "
          },
          "51" : {
            "sign" : 527040145,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#115, ca_address_id#116, ca_street_number#117, ca_street_name#118, ca_street_type#119, ca_suite_number#120, ca_city#121, ca_county#122, ca_state#123, ca_zip#124, ca_country#125, ca_gmt_offset#126, ca_location_type#127], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "8" : {
            "sign" : 1351395533,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 950119788214138752,
            "rowCount" : 4167192053570784,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#46) "
          },
          "19" : {
            "sign" : 1726153103,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163] "
          },
          "23" : {
            "sign" : 210705200,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 64283634425,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "4" : {
            "sign" : 655809400,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 29801287641862177961212210484736,
            "rowCount" : 112883665310084007428834130624,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          },
          "40" : {
            "sign" : -14387779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 482532000,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111)) "
          },
          "15" : {
            "sign" : 204445740,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1064960,
            "rowCount" : 469,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95], BroadcastQueryStage 2 "
          },
          "11" : {
            "sign" : -1351773661,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 17392445172096,
            "rowCount" : 189048317088,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "9" : {
            "sign" : -1300402006,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 14540840357140608,
            "rowCount" : 88663660714272,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "44" : {
            "sign" : 228187507,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#75, i_item_id#76, i_rec_start_date#77, i_rec_end_date#78, i_item_desc#79, i_current_price#80, i_wholesale_cost#81, i_brand_id#82, i_brand#83, i_class_id#84, i_class#85, i_category_id#86, i_category#87, i_manufact_id#88, i_manufact#89, i_size#90, i_formulation#91, i_color#92, i_units#93, i_container#94, i_manager_id#95, i_product_name#96], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "33" : {
            "sign" : -628374504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 43776970976,
            "rowCount" : 288006388,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "22" : {
            "sign" : 474468585,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 10168082233949,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          },
          "26" : {
            "sign" : -1141989269,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 118459872995,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#46) "
          },
          "50" : {
            "sign" : -1835352789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 231369396,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_country#125) AND isnotnull(ca_zip#124)) "
          },
          "37" : {
            "sign" : -1176082101,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 23471,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71)) "
          },
          "13" : {
            "sign" : 1336235154,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 12582912,
            "rowCount" : 97946,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15], ShuffleQueryStage 0, BroadcastQueryStage 6 "
          },
          "46" : {
            "sign" : -1899214940,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_ticket_number#34L] "
          },
          "24" : {
            "sign" : 815965107,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 72623132945,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "35" : {
            "sign" : 812756911,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "16" : {
            "sign" : -2059652252,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051704,
            "rowCount" : 47,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71], BroadcastQueryStage 3 "
          },
          "5" : {
            "sign" : 342786793,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24964543653761271400468992,
            "rowCount" : 120021844489236881733024,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "10" : {
            "sign" : 887158873,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 14895494999997696,
            "rowCount" : 88663660714272,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#4 = i_item_sk#75) "
          },
          "48" : {
            "sign" : 58525475,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "21" : {
            "sign" : -859819627,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6792785226829,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "43" : {
            "sign" : 2095138697,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(i_item_sk#75) "
          },
          "32" : {
            "sign" : 1011872821,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39926600456,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42))) "
          },
          "49" : {
            "sign" : 1153698931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#123, ca_zip#124, ca_country#125] "
          },
          "6" : {
            "sign" : -1547111694,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 27845067921502956562061568,
            "rowCount" : 120021844489236881733024,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "36" : {
            "sign" : -84657601,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "1" : {
            "sign" : -669604567,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 9179603591811512263680937175424,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157] "
          },
          "39" : {
            "sign" : -702144975,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 135108960,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "17" : {
            "sign" : -114833265,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sr_item_sk#27, sr_ticket_number#34L], ShuffleQueryStage 4 "
          },
          "25" : {
            "sign" : 419855978,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 113837048683,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "14" : {
            "sign" : 1038420939,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 131450376,
            "rowCount" : 1930128,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111], ShuffleQueryStage 1 "
          },
          "47" : {
            "sign" : 2011675015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27)) "
          },
          "31" : {
            "sign" : 1867243163,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9456300108,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] "
          },
          "42" : {
            "sign" : -459341749,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 15504000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "0" : {
            "sign" : -1506279260,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 9179603591811512263680937175424,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8)))) "
          },
          "20" : {
            "sign" : -842263021,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 675059401424,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "27" : {
            "sign" : 455826232,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 44237719834,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "2" : {
            "sign" : -17916177,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 8305355630686606333806562206336,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "38" : {
            "sign" : 2043403682,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 192558,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "18" : {
            "sign" : 775636263,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_state#123, ca_zip#124, ca_country#125], ShuffleQueryStage 5 "
          },
          "30" : {
            "sign" : 102638235,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 26954307198,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#5 = c_customer_sk#97) "
          },
          "7" : {
            "sign" : 1892855414,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 916782251785572480,
            "rowCount" : 4167192053570784,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "29" : {
            "sign" : 1031245998,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24753955590,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "41" : {
            "sign" : 2021572997,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 500000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#97, c_customer_id#98, c_current_cdemo_sk#99, c_current_hdemo_sk#100, c_current_addr_sk#101, c_first_shipto_date_sk#102, c_first_sales_date_sk#103, c_salutation#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_day#108, c_birth_month#109, c_birth_year#110, c_birth_country#111, c_login#112, c_email_address#113, c_last_review_date#114], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : 938853932,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 20544827086435289352047811773568,
            "rowCount" : 112883665310084007428834130624,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "28" : {
            "sign" : 1746504807,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 45386751518,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#4 = i_item_sk#75) "
          }
        },
        "links" : [ {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Join",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Aggregate",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "LogicalRelation",
          "toId" : 32,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "LogicalRelation",
          "toId" : 37,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Filter",
          "toId" : 36,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "Project",
          "toId" : 35,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "Project",
          "toId" : 34,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "Aggregate",
          "toId" : 32,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 32,
          "fromName" : "Filter",
          "toId" : 31,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Project",
          "toId" : 30,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 41,
          "fromName" : "LogicalRelation",
          "toId" : 40,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "Filter",
          "toId" : 39,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "Project",
          "toId" : 30,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Join",
          "toId" : 29,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Project",
          "toId" : 28,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 44,
          "fromName" : "LogicalRelation",
          "toId" : 43,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 43,
          "fromName" : "Filter",
          "toId" : 42,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 42,
          "fromName" : "Project",
          "toId" : 28,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Join",
          "toId" : 27,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Project",
          "toId" : 26,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Filter",
          "toId" : 45,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 45,
          "fromName" : "Project",
          "toId" : 26,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Join",
          "toId" : 25,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Project",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 48,
          "fromName" : "LogicalRelation",
          "toId" : 47,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 47,
          "fromName" : "Filter",
          "toId" : 46,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 46,
          "fromName" : "Project",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Join",
          "toId" : 23,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Project",
          "toId" : 22,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 51,
          "fromName" : "LogicalRelation",
          "toId" : 50,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 50,
          "fromName" : "Filter",
          "toId" : 49,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 49,
          "fromName" : "Project",
          "toId" : 22,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Join",
          "toId" : 21,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Project",
          "toId" : 20,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Aggregate",
          "toId" : 19,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Subquery"
        } ],
        "rawPlan" : "Filter (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8))))\n:  +- Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163]\n:     +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n:        +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n:           +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n:              :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n:              :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n:              :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n:              :     :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n:              :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n:              :     :     :     :     :  +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42)))\n:              :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n:              :     :     :     :     :     :     +- Project [s_store_sk#46]\n:              :     :     :     :     :     :        +- Project [s_store_sk#46]\n:              :     :     :     :     :     :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :     :     :     :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n:              :     :     :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n:              :     :     :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n:              :     :     :     +- Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :        +- Filter isnotnull(i_item_sk#75)\n:              :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n:              :     :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n:              :     :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     +- Project [sr_item_sk#27, sr_ticket_number#34L]\n:              :        +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n:              :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n:              +- Project [ca_state#123, ca_zip#124, ca_country#125]\n:                 +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n:                    +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n+- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157]\n   +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n      +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n         +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n            :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n            :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n            :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n            :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n            :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n            :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n            :     :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n            :     :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n            :     :     :     :     :- LogicalQueryStage LogicalQueryStage Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15], ShuffleQueryStage 0, BroadcastQueryStage 6\n            :     :     :     :     +- LogicalQueryStage Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111], ShuffleQueryStage 1\n            :     :     :     +- LogicalQueryStage Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95], BroadcastQueryStage 2\n            :     :     +- LogicalQueryStage Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71], BroadcastQueryStage 3\n            :     +- LogicalQueryStage Project [sr_item_sk#27, sr_ticket_number#34L], ShuffleQueryStage 4\n            +- LogicalQueryStage Project [ca_state#123, ca_zip#124, ca_country#125], ShuffleQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 782375836,
        "inputRowCount" : 31770727
      },
      "PD" : {
        "3" : [ 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268, 387268 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 3,
        "FinishedTasksNum" : 78,
        "FinishedTasksTotalTimeInMs" : 247369.0,
        "FinishedTasksDistributionInMs" : [ 14.0, 478.0, 739.0, 1249.0, 19180.0 ]
      },
      "StartTimeInMs" : 1702226779852,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 43716,
        "IOBytes" : {
          "Total" : 17741934401,
          "Details" : {
            "IR" : 2633858993,
            "IW" : 0,
            "SR" : 7805008839,
            "SW" : 7303066569
          }
        }
      }
    },
    "10" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : -1899214940,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_ticket_number#34L] "
          },
          "12" : {
            "sign" : 815965107,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 72623132945,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "8" : {
            "sign" : -842263021,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 675059401424,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "19" : {
            "sign" : 1867243163,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9456300108,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] "
          },
          "23" : {
            "sign" : 812756911,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "4" : {
            "sign" : 1092242383,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2422232981824,
            "rowCount" : 9038182768,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          },
          "15" : {
            "sign" : 455826232,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 44237719834,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "11" : {
            "sign" : 210705200,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 64283634425,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "9" : {
            "sign" : -859819627,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6792785226829,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "33" : {
            "sign" : 352920416,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2891,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] "
          },
          "22" : {
            "sign" : 1921382062,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176] "
          },
          "26" : {
            "sign" : 2043403682,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 192558,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "37" : {
            "sign" : 1153698931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#123, ca_zip#124, ca_country#125] "
          },
          "13" : {
            "sign" : 419855978,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 113837048683,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "24" : {
            "sign" : -84657601,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "35" : {
            "sign" : 2011675015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27)) "
          },
          "16" : {
            "sign" : 1746504807,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 45386751518,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#4 = i_item_sk#75) "
          },
          "5" : {
            "sign" : 1991790826,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 33816576,
            "rowCount" : 9467,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 8, BroadcastQueryStage 9 "
          },
          "10" : {
            "sign" : 474468585,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 10168082233949,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          },
          "21" : {
            "sign" : -628374504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 43776970976,
            "rowCount" : 288006388,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "32" : {
            "sign" : 228187507,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#75, i_item_id#76, i_rec_start_date#77, i_rec_end_date#78, i_item_desc#79, i_current_price#80, i_wholesale_cost#81, i_brand_id#82, i_brand#83, i_class_id#84, i_class#85, i_category_id#86, i_category#87, i_manufact_id#88, i_manufact#89, i_size#90, i_formulation#91, i_color#92, i_units#93, i_container#94, i_manager_id#95, i_product_name#96], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "6" : {
            "sign" : 775636263,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 61040568,
            "rowCount" : 954704,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_state#123, ca_zip#124, ca_country#125], ShuffleQueryStage 5 "
          },
          "36" : {
            "sign" : 58525475,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : -263042082,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 759207352512,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157] "
          },
          "39" : {
            "sign" : 527040145,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#115, ca_address_id#116, ca_street_number#117, ca_street_name#118, ca_street_type#119, ca_suite_number#120, ca_city#121, ca_county#122, ca_state#123, ca_zip#124, ca_country#125, ca_gmt_offset#126, ca_location_type#127], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "17" : {
            "sign" : 1031245998,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24753955590,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "25" : {
            "sign" : -1176082101,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 23471,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71)) "
          },
          "14" : {
            "sign" : -1141989269,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 118459872995,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#46) "
          },
          "31" : {
            "sign" : 2095138697,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(i_item_sk#75) "
          },
          "0" : {
            "sign" : -109057669,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 759207352512,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8)))) "
          },
          "20" : {
            "sign" : 1011872821,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39926600456,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42))) "
          },
          "27" : {
            "sign" : -702144975,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 135108960,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "2" : {
            "sign" : 1779103878,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 686901890368,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "38" : {
            "sign" : -1835352789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 231369396,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_country#125) AND isnotnull(ca_zip#124)) "
          },
          "18" : {
            "sign" : 102638235,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 26954307198,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#5 = c_customer_sk#97) "
          },
          "30" : {
            "sign" : -459341749,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 15504000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "7" : {
            "sign" : 1726153103,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163] "
          },
          "29" : {
            "sign" : 2021572997,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 500000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#97, c_customer_id#98, c_current_cdemo_sk#99, c_current_hdemo_sk#100, c_current_addr_sk#101, c_first_shipto_date_sk#102, c_first_sales_date_sk#103, c_salutation#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_day#108, c_birth_month#109, c_birth_year#110, c_birth_country#111, c_login#112, c_email_address#113, c_last_review_date#114], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : 387598753,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1699178360384,
            "rowCount" : 9038182768,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "28" : {
            "sign" : -14387779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 482532000,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111)) "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Aggregate",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalRelation",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "LogicalRelation",
          "toId" : 25,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Filter",
          "toId" : 24,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Project",
          "toId" : 23,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Project",
          "toId" : 22,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Aggregate",
          "toId" : 20,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 20,
          "fromName" : "Filter",
          "toId" : 19,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Project",
          "toId" : 18,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalRelation",
          "toId" : 28,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Filter",
          "toId" : 27,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Project",
          "toId" : 18,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Join",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "LogicalRelation",
          "toId" : 31,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Filter",
          "toId" : 30,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Project",
          "toId" : 16,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Join",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Filter",
          "toId" : 33,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Join",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "LogicalRelation",
          "toId" : 35,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "Filter",
          "toId" : 34,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "Project",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Join",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "LogicalRelation",
          "toId" : 38,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "Filter",
          "toId" : 37,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Aggregate",
          "toId" : 7,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Subquery"
        } ],
        "rawPlan" : "Filter (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8))))\n:  +- Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163]\n:     +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n:        +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n:           +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n:              :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n:              :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n:              :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n:              :     :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n:              :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n:              :     :     :     :     :  +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42)))\n:              :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n:              :     :     :     :     :     :     +- Project [s_store_sk#46]\n:              :     :     :     :     :     :        +- Project [s_store_sk#46]\n:              :     :     :     :     :     :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :     :     :     :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n:              :     :     :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n:              :     :     :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n:              :     :     :     +- Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :        +- Filter isnotnull(i_item_sk#75)\n:              :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n:              :     :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n:              :     :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     +- Project [sr_item_sk#27, sr_ticket_number#34L]\n:              :        +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n:              :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n:              +- Project [ca_state#123, ca_zip#124, ca_country#125]\n:                 +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n:                    +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n+- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157]\n   +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n      +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n         +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n            :- LogicalQueryStage LogicalQueryStage Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 8, BroadcastQueryStage 9\n            +- LogicalQueryStage Project [ca_state#123, ca_zip#124, ca_country#125], ShuffleQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 94857144,
        "inputRowCount" : 964171
      },
      "PD" : {
        "5" : [ 10353, 13780, 29539, 20176, 18341, 22193, 24413, 43249, 57565, 57565, 18341, 20176, 47574, 35743, 43249, 35743, 13780, 43249, 20176, 47574, 32493, 22193, 29539, 26854, 8556, 18341, 32493, 29539, 47574, 4390, 7778, 22193, 12527, 10353, 20176, 29539, 26854, 43249, 39317, 22193, 29539, 24413, 15158, 13780, 24413, 18341, 35743, 32493, 32493, 35743, 57565, 43249, 13780, 29539, 39317, 24413, 12527, 47574, 43249, 26854, 22193, 32493, 26854, 13780, 22193, 47574, 39317, 16674, 26854, 29539, 13780, 13780, 22193, 12527, 18341, 39317, 6428, 18341, 39317, 26854, 52331, 39317, 32493, 32493, 32493, 9412, 29539, 26854, 11388, 18341, 10353, 12527, 11388, 43249, 52331, 18341, 15158, 13780, 13780, 32493, 35743, 43249, 32493, 16674, 15158, 20176, 18341, 22193, 29539, 3628, 29539, 24413, 16674, 22193, 16674, 39317, 22193, 57565, 29539, 32493, 13780, 32493, 43249, 20176, 22193, 24413, 4830, 13780, 22193, 26854, 15158, 24413, 22193, 32493, 35743, 47574, 29539, 29539, 24413, 9412, 18341, 29539, 43249, 11388, 18341, 32493, 47574, 22193, 47574, 24413, 26854, 47574, 18341, 11388, 43249, 15158, 29539, 39317, 24413, 16674, 52331, 20176, 10353, 29539, 22193, 12527, 18341, 10353, 47574, 15158, 8556, 47574, 47574, 35743, 9412, 29539, 32493, 13780, 16674, 35743, 47574, 22193, 63321, 24413, 24413, 24413, 26854, 52331, 26854, 35743, 47574, 16674, 29539, 22193, 39317, 29539, 24413, 18341, 35743, 22193 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226786721,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 36847,
        "IOBytes" : {
          "Total" : 16665598121,
          "Details" : {
            "IR" : 2357123983,
            "IW" : 0,
            "SR" : 7371168369,
            "SW" : 6937305769
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : 2095138697,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(i_item_sk#75) "
          },
          "12" : {
            "sign" : -859819627,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6792785226829,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "8" : {
            "sign" : -114833265,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sr_item_sk#27, sr_ticket_number#34L], ShuffleQueryStage 4 "
          },
          "19" : {
            "sign" : 1746504807,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 45386751518,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#4 = i_item_sk#75) "
          },
          "23" : {
            "sign" : 1011872821,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39926600456,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42))) "
          },
          "4" : {
            "sign" : -247128176,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 30708869785695645327396045232128,
            "rowCount" : 114585335021252407938044944896,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          },
          "40" : {
            "sign" : 1153698931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#123, ca_zip#124, ca_country#125] "
          },
          "15" : {
            "sign" : 815965107,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 72623132945,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "11" : {
            "sign" : -842263021,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 675059401424,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "9" : {
            "sign" : 775636263,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 61040568,
            "rowCount" : 954704,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_state#123, ca_zip#124, ca_country#125], ShuffleQueryStage 5 "
          },
          "33" : {
            "sign" : -459341749,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 15504000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "22" : {
            "sign" : 1867243163,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9456300108,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] "
          },
          "26" : {
            "sign" : 812756911,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "37" : {
            "sign" : -1899214940,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_ticket_number#34L] "
          },
          "13" : {
            "sign" : 474468585,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 10168082233949,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          },
          "24" : {
            "sign" : -628374504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 43776970976,
            "rowCount" : 288006388,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "35" : {
            "sign" : 228187507,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#75, i_item_id#76, i_rec_start_date#77, i_rec_end_date#78, i_item_desc#79, i_current_price#80, i_wholesale_cost#81, i_brand_id#82, i_brand#83, i_class_id#84, i_class#85, i_category_id#86, i_category#87, i_manufact_id#88, i_manufact#89, i_size#90, i_formulation#91, i_color#92, i_units#93, i_container#94, i_manager_id#95, i_product_name#96], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "16" : {
            "sign" : 419855978,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 113837048683,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "5" : {
            "sign" : -1275396181,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24964543653761271400468992,
            "rowCount" : 120021844489236881733024,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "10" : {
            "sign" : 1726153103,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163] "
          },
          "21" : {
            "sign" : 102638235,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 26954307198,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#5 = c_customer_sk#97) "
          },
          "32" : {
            "sign" : 2021572997,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 500000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#97, c_customer_id#98, c_current_cdemo_sk#99, c_current_hdemo_sk#100, c_current_addr_sk#101, c_first_shipto_date_sk#102, c_first_sales_date_sk#103, c_salutation#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_day#108, c_birth_month#109, c_birth_year#110, c_birth_country#111, c_login#112, c_email_address#113, c_last_review_date#114], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "6" : {
            "sign" : 24110032,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 27845067921502956562061568,
            "rowCount" : 120021844489236881733024,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "36" : {
            "sign" : 352920416,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2891,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] "
          },
          "1" : {
            "sign" : -2106682157,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 9625168141785202266795775371264,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157] "
          },
          "39" : {
            "sign" : 58525475,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "17" : {
            "sign" : -1141989269,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 118459872995,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#46) "
          },
          "25" : {
            "sign" : 1921382062,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176] "
          },
          "14" : {
            "sign" : 210705200,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 64283634425,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "31" : {
            "sign" : -14387779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 482532000,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111)) "
          },
          "42" : {
            "sign" : 527040145,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#115, ca_address_id#116, ca_street_number#117, ca_street_name#118, ca_street_type#119, ca_suite_number#120, ca_city#121, ca_county#122, ca_state#123, ca_zip#124, ca_country#125, ca_gmt_offset#126, ca_location_type#127], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "0" : {
            "sign" : 496533692,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 9625168141785202266795775371264,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8)))) "
          },
          "20" : {
            "sign" : 1031245998,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24753955590,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "27" : {
            "sign" : -84657601,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "2" : {
            "sign" : -747371513,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 8708485461615183003291415812096,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "38" : {
            "sign" : 2011675015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27)) "
          },
          "18" : {
            "sign" : 455826232,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 44237719834,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "30" : {
            "sign" : -702144975,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 135108960,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "7" : {
            "sign" : 1374117770,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 916782251785572480,
            "rowCount" : 4167192053570784,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 7 "
          },
          "29" : {
            "sign" : 2043403682,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 192558,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "41" : {
            "sign" : -1835352789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 231369396,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_country#125) AND isnotnull(ca_zip#124)) "
          },
          "3" : {
            "sign" : -630007888,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 21542042983995452692352449640448,
            "rowCount" : 114585335021252407938044944896,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "28" : {
            "sign" : -1176082101,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 23471,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71)) "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Aggregate",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalRelation",
          "toId" : 23,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalRelation",
          "toId" : 28,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Filter",
          "toId" : 27,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Project",
          "toId" : 26,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Project",
          "toId" : 25,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Aggregate",
          "toId" : 23,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 23,
          "fromName" : "Filter",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 21,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "LogicalRelation",
          "toId" : 31,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Filter",
          "toId" : 30,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Project",
          "toId" : 21,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Join",
          "toId" : 20,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Project",
          "toId" : 19,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "LogicalRelation",
          "toId" : 34,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "Filter",
          "toId" : 33,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "Project",
          "toId" : 19,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Join",
          "toId" : 18,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Project",
          "toId" : 17,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Filter",
          "toId" : 36,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "Project",
          "toId" : 17,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Join",
          "toId" : 16,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "LogicalRelation",
          "toId" : 38,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "Filter",
          "toId" : 37,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 42,
          "fromName" : "LogicalRelation",
          "toId" : 41,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 41,
          "fromName" : "Filter",
          "toId" : 40,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Aggregate",
          "toId" : 10,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Subquery"
        } ],
        "rawPlan" : "Filter (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8))))\n:  +- Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163]\n:     +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n:        +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n:           +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n:              :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n:              :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n:              :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n:              :     :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n:              :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n:              :     :     :     :     :  +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42)))\n:              :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n:              :     :     :     :     :     :     +- Project [s_store_sk#46]\n:              :     :     :     :     :     :        +- Project [s_store_sk#46]\n:              :     :     :     :     :     :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :     :     :     :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n:              :     :     :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n:              :     :     :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n:              :     :     :     +- Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :        +- Filter isnotnull(i_item_sk#75)\n:              :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n:              :     :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n:              :     :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     +- Project [sr_item_sk#27, sr_ticket_number#34L]\n:              :        +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n:              :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n:              +- Project [ca_state#123, ca_zip#124, ca_country#125]\n:                 +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n:                    +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n+- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157]\n   +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n      +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n         +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n            :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n            :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n            :     :- LogicalQueryStage Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 7\n            :     +- LogicalQueryStage Project [sr_item_sk#27, sr_ticket_number#34L], ShuffleQueryStage 4\n            +- LogicalQueryStage Project [ca_state#123, ca_zip#124, ca_country#125], ShuffleQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 916782252422645268,
        "inputRowCount" : 4167192083327099
      },
      "PD" : {
        "5" : [ 10353, 13780, 29539, 20176, 18341, 22193, 24413, 43249, 57565, 57565, 18341, 20176, 47574, 35743, 43249, 35743, 13780, 43249, 20176, 47574, 32493, 22193, 29539, 26854, 8556, 18341, 32493, 29539, 47574, 4390, 7778, 22193, 12527, 10353, 20176, 29539, 26854, 43249, 39317, 22193, 29539, 24413, 15158, 13780, 24413, 18341, 35743, 32493, 32493, 35743, 57565, 43249, 13780, 29539, 39317, 24413, 12527, 47574, 43249, 26854, 22193, 32493, 26854, 13780, 22193, 47574, 39317, 16674, 26854, 29539, 13780, 13780, 22193, 12527, 18341, 39317, 6428, 18341, 39317, 26854, 52331, 39317, 32493, 32493, 32493, 9412, 29539, 26854, 11388, 18341, 10353, 12527, 11388, 43249, 52331, 18341, 15158, 13780, 13780, 32493, 35743, 43249, 32493, 16674, 15158, 20176, 18341, 22193, 29539, 3628, 29539, 24413, 16674, 22193, 16674, 39317, 22193, 57565, 29539, 32493, 13780, 32493, 43249, 20176, 22193, 24413, 4830, 13780, 22193, 26854, 15158, 24413, 22193, 32493, 35743, 47574, 29539, 29539, 24413, 9412, 18341, 29539, 43249, 11388, 18341, 32493, 47574, 22193, 47574, 24413, 26854, 47574, 18341, 11388, 43249, 15158, 29539, 39317, 24413, 16674, 52331, 20176, 10353, 29539, 22193, 12527, 18341, 10353, 47574, 15158, 8556, 47574, 47574, 35743, 9412, 29539, 32493, 13780, 16674, 35743, 47574, 22193, 63321, 24413, 24413, 24413, 26854, 52331, 26854, 35743, 47574, 16674, 29539, 22193, 39317, 29539, 24413, 18341, 35743, 22193 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 4,
        "FinishedTasksNum" : 74,
        "FinishedTasksTotalTimeInMs" : 247113.0,
        "FinishedTasksDistributionInMs" : [ 349.0, 496.0, 757.0, 1326.0, 19180.0 ]
      },
      "StartTimeInMs" : 1702226780160,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 43408,
        "IOBytes" : {
          "Total" : 17734166565,
          "Details" : {
            "IR" : 2631279432,
            "IW" : 0,
            "SR" : 7805008839,
            "SW" : 7297878294
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : 1058420140,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 224,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 224,
        "inputRowCount" : 1
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 3,
        "FinishedTasksNum" : 7,
        "FinishedTasksTotalTimeInMs" : 24856.0,
        "FinishedTasksDistributionInMs" : [ 3272.0, 3273.0, 3546.0, 3815.0, 3922.0 ]
      },
      "StartTimeInMs" : 1702226734332,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 89236,
        "IOBytes" : {
          "Total" : 20199919025,
          "Details" : {
            "IR" : 5008903497,
            "IW" : 0,
            "SR" : 7809845059,
            "SW" : 7381170469
          }
        }
      }
    },
    "17" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : 588852462,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 723016576,
            "rowCount" : 3996138,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 12 "
          },
          "5" : {
            "sign" : 1153698931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#123, ca_zip#124, ca_country#125] "
          },
          "6" : {
            "sign" : -1835352789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 231369396,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_country#125) AND isnotnull(ca_zip#124)) "
          },
          "1" : {
            "sign" : -691288019,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 58216327431746,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "0" : {
            "sign" : -1646557637,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163] "
          },
          "2" : {
            "sign" : 1038141493,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 684041847323016,
            "rowCount" : 3758471688588,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "7" : {
            "sign" : 527040145,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#115, ca_address_id#116, ca_street_number#117, ca_street_name#118, ca_street_type#119, ca_suite_number#120, ca_city#121, ca_county#122, ca_state#123, ca_zip#124, ca_country#125, ca_gmt_offset#126, ca_location_type#127], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : 1142814275,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 992236525787232,
            "rowCount" : 3758471688588,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "LogicalRelation",
          "toId" : 6,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Filter",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163]\n+- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n   +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n      +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n         :- LogicalQueryStage Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 12\n         +- Project [ca_state#123, ca_zip#124, ca_country#125]\n            +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n               +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n"
      },
      "IM" : {
        "inputSizeInBytes" : 969016576,
        "inputRowCount" : 4996138
      },
      "PD" : {
        "14" : [ 1496624, 1864989, 2515031, 1475076, 1394795, 1815402, 1939828, 1505396, 1584600, 1924318, 1863350, 1855176, 1524503, 1730570, 1676949, 2014382, 2051207, 1908255, 2178129, 2523261, 2458819, 1455671, 1591911, 1704482, 1909562, 1468149, 2062344, 1877831, 2088571, 1997406, 2022276, 1840139, 1956203, 1695724, 2006167, 2422839, 1269967, 2001713, 2344774, 1234431, 1877694, 1247841, 1770737, 1698400, 1627167, 1638860, 1667362, 2306574, 2265576, 2378588, 1497816, 2333047, 1641687, 1585230, 1758197, 2241302, 1423973, 2193039, 1557001, 2290872, 2247535, 1759446, 1919279, 2039826, 2204983, 1809187, 2152051, 1638827, 2117475, 1733145, 1930941, 1996921, 1004727, 1790796, 1434747, 2346403, 1505759, 1923985, 2421066, 2007033, 1732703, 2310572, 1805043, 2706148, 1828223, 2160767, 1509205, 1866283, 2064017, 1487454, 2188855, 1616844, 2362164, 1794384, 1983353, 1346938, 2217309, 2212207, 2600604, 2305099, 2095770, 1710045, 1291818, 1313618, 1772923, 2096654, 2049743, 2138443, 1612975, 2038672, 2426349, 1419000, 2009071, 1999045, 1840461, 1229753, 2016421, 1775639, 1608007, 2655130, 1963953, 2046578, 1457574, 1618222, 1507111, 1824934, 1583962, 2227729, 2233455, 2306150, 2200319, 1995199, 1397402, 2096685, 1628448, 1457235, 1672729, 2177043, 2018437, 1579455, 2255054, 1556165, 1433998, 2788431, 2629500, 1981360, 2151133, 2228994, 1998631, 1786031, 2138072, 1757442, 1690762, 1659907, 1657813, 2119492, 1745940, 2147671, 2979447, 2374073, 2014200, 2069206, 2549053, 1655538, 2203145, 2224130, 2318879, 1217874, 2405955, 2130207, 1820259, 1920813, 1357210, 2144473, 1785822, 1477720, 2071126, 1757865, 1739254, 2306335, 1137909, 1408227, 2273808, 1441841, 2215674, 1432594, 2175688, 1576330, 1558748, 2369045, 1802667, 2425465, 1431553, 1243364, 1821597, 1795827, 1733981, 1747993, 1447692, 1743736 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226815743,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 7825,
        "IOBytes" : {
          "Total" : 380888115,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 373395263,
            "SW" : 7492852
          }
        }
      }
    },
    "14" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 2012214440,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1987810560,
            "rowCount" : 41412720,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15], ShuffleQueryStage 0 "
          },
          "8" : {
            "sign" : -1766452275,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2641587792949831680000,
            "rowCount" : 16306097487344640000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "19" : {
            "sign" : 2043403682,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 192558,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "23" : {
            "sign" : 1153698931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#123, ca_zip#124, ca_country#125] "
          },
          "4" : {
            "sign" : 220470235,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4441403228505869727041633280000,
            "rowCount" : 23012451961170309466536960000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "15" : {
            "sign" : 2021572997,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 500000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#97, c_customer_id#98, c_current_cdemo_sk#99, c_current_hdemo_sk#100, c_current_addr_sk#101, c_first_shipto_date_sk#102, c_first_sales_date_sk#103, c_salutation#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_day#108, c_birth_month#109, c_birth_year#110, c_birth_country#111, c_login#112, c_email_address#113, c_last_review_date#114], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "11" : {
            "sign" : -1528766840,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 7833321341959680,
            "rowCount" : 79931850428160,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#5 = c_customer_sk#97) "
          },
          "9" : {
            "sign" : 571135260,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2706812182899210240000,
            "rowCount" : 16306097487344640000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#4 = i_item_sk#75) "
          },
          "22" : {
            "sign" : 58525475,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "13" : {
            "sign" : -702144975,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 135108960,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "24" : {
            "sign" : -1835352789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 231369396,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_country#125) AND isnotnull(ca_zip#124)) "
          },
          "16" : {
            "sign" : 931765203,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 16488824,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95], ShuffleQueryStage 3 "
          },
          "5" : {
            "sign" : 1226299666,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4993702075573957154238520320000,
            "rowCount" : 23012451961170309466536960000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "10" : {
            "sign" : -2015256493,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 7193866538534400,
            "rowCount" : 79931850428160,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "21" : {
            "sign" : 2011675015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27)) "
          },
          "6" : {
            "sign" : -1598441247,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 163794749260376908800000,
            "rowCount" : 798998776879887360000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "1" : {
            "sign" : -266743732,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 40188800670832458595994965715985,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "17" : {
            "sign" : 352920416,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2891,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] "
          },
          "25" : {
            "sign" : 527040145,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#115, ca_address_id#116, ca_street_number#117, ca_street_name#118, ca_street_type#119, ca_suite_number#120, ca_city#121, ca_county#122, ca_state#123, ca_zip#124, ca_country#125, ca_gmt_offset#126, ca_location_type#127], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "14" : {
            "sign" : -14387779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 482532000,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111)) "
          },
          "0" : {
            "sign" : -1254080006,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163] "
          },
          "20" : {
            "sign" : -1899214940,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_ticket_number#34L] "
          },
          "2" : {
            "sign" : -8007308,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 472218407882281388502940847162835,
            "rowCount" : 2794191762617049636112076018715,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "18" : {
            "sign" : -1176082101,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 23471,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71)) "
          },
          "7" : {
            "sign" : -841706896,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 170186739475416007680000,
            "rowCount" : 798998776879887360000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#46) "
          },
          "3" : {
            "sign" : 862171490,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 695753748891645359391906928660035,
            "rowCount" : 2794191762617049636112076018715,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalRelation",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalRelation",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Filter",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalRelation",
          "toId" : 21,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Filter",
          "toId" : 20,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "LogicalRelation",
          "toId" : 24,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Filter",
          "toId" : 23,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163]\n+- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n   +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n      +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n         :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n         :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n         :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n         :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n         :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n         :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n         :     :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n         :     :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n         :     :     :     :     :- LogicalQueryStage Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15], ShuffleQueryStage 0\n         :     :     :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n         :     :     :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n         :     :     :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n         :     :     :     +- LogicalQueryStage Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95], ShuffleQueryStage 3\n         :     :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n         :     :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n         :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n         :     +- Project [sr_item_sk#27, sr_ticket_number#34L]\n         :        +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n         :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n         +- Project [ca_state#123, ca_zip#124, ca_country#125]\n            +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n               +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n"
      },
      "IM" : {
        "inputSizeInBytes" : 6437098150,
        "inputRowCount" : 73418733
      },
      "PD" : {
        "11" : [ 39317, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 39317, 39317, 39317, 35743, 39317, 35743, 35743, 39317, 39317, 39317, 35743, 39317, 39317, 35743, 35743, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 35743, 39317, 39317, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 35743, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 39317, 35743, 35743, 35743, 39317, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 39317, 35743, 35743, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 35743, 39317, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 39317, 35743, 35743, 39317, 39317, 35743, 39317, 35743, 35743, 35743, 35743, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 35743, 39317, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 39317, 39317 ],
        "10" : [ 3456889, 3501116, 3465177, 3439010, 3489774, 3483863, 3442190, 3443503, 3468893, 3439834, 3515814, 3440166, 3486374, 3482964, 3462151, 3437108, 3496964, 3537820, 3423865, 3434563, 3465259, 3426613, 3444692, 3504289, 3467479, 3466853, 3447280, 3570218, 3490334, 3490656, 3364398, 3417421, 3486556, 3381638, 3454982, 3492140, 3430915, 3421772, 3379506, 3434476, 3454406, 3481699, 3364237, 3464753, 3501022, 3391394, 3483867, 3459423, 3466211, 3485033, 3494282, 3461458, 3433389, 3506115, 3441713, 3424067, 3415286, 3409957, 3399897, 3447070, 3428523, 3529544, 3382316, 3458973, 3419408, 3511940, 3486271, 3418551, 3466270, 3441860, 3479647, 3416018, 3434302, 3465953, 3474326, 3454065, 3549426, 3452021, 3504284, 3421802, 3456246, 3502104, 3511056, 3351346, 3488716, 3411110, 3413858, 3463974, 3437456, 3556578, 3424696, 3453442, 3476419, 3417496, 3501142, 3519598, 3460159, 3448815, 3477689, 3398281, 3385440, 3509742, 3452458, 3370516, 3417510, 3466891, 3467086, 3550868, 3350976, 3420885, 3403189, 3437624, 3480506, 3443891, 3412606, 3436316, 3386571, 3422536, 3391636, 3374540, 3440121, 3449789, 3542064, 3425370, 3486688, 3522638, 3468153, 3466679, 3451975, 3404524, 3490157, 3483735, 3430636, 3435016, 3411561, 3436842, 3477828, 3470235, 3440381, 3444934, 3456156, 3346930, 3512840, 3512271, 3483956, 3502116, 3543469, 3423808, 3457163, 3424780, 3487396, 3473496, 3475556, 3499559, 3536884, 3516551, 3480296, 3494165, 3500325, 3398889, 3396814, 3410997, 3492915, 3398936, 3464573, 3511624, 3429185, 3500523, 3495514, 3418198, 3485610, 3558975, 3476671, 3482907, 3490102, 3397552, 3431913, 3408249, 3457648, 3431969, 3430781, 3456194, 3405252, 3417463, 3522869, 3477174, 3529055, 3512422, 3434744, 3452329, 3443578, 3450966, 3455298, 3377601, 3462517, 3483835, 3395394, 3442125, 3450768, 3414852 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226795940,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 27628,
        "IOBytes" : {
          "Total" : 13637247580,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 7365949355,
            "SW" : 6271298225
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -907905969,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 33160,
            "rowCount" : 5,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0) AS bloomFilter#173], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0) AS bloomFilter#173], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 33160,
        "inputRowCount" : 5
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226736004,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 87564,
        "IOBytes" : {
          "Total" : 20197047384,
          "Details" : {
            "IR" : 5006038578,
            "IW" : 0,
            "SR" : 7809845059,
            "SW" : 7381163747
          }
        }
      }
    },
    "18" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : 1973574536,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163] "
          },
          "1" : {
            "sign" : -346753796,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 16119024,
            "rowCount" : 100798,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159], HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], functions=[sum(UnscaledValue(ss_sales_price#15))]) "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "LogicalQueryStage",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163]\n+- LogicalQueryStage Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159], HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], functions=[sum(UnscaledValue(ss_sales_price#15))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 16119024,
        "inputRowCount" : 100798
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226822136,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 1432,
        "IOBytes" : {
          "Total" : 7497387,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 7497305,
            "SW" : 82
          }
        }
      }
    },
    "7" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : 2095138697,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(i_item_sk#75) "
          },
          "12" : {
            "sign" : -859819627,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6792785226829,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "8" : {
            "sign" : -114833265,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sr_item_sk#27, sr_ticket_number#34L], ShuffleQueryStage 4 "
          },
          "19" : {
            "sign" : 1746504807,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 45386751518,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#4 = i_item_sk#75) "
          },
          "23" : {
            "sign" : 1011872821,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39926600456,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42))) "
          },
          "4" : {
            "sign" : -247128176,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 696706232596416075456,
            "rowCount" : 2599650121628418192,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          },
          "40" : {
            "sign" : 1153698931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#123, ca_zip#124, ca_country#125] "
          },
          "15" : {
            "sign" : 815965107,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 72623132945,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "11" : {
            "sign" : -842263021,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 675059401424,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "9" : {
            "sign" : 775636263,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 61040568,
            "rowCount" : 954704,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_state#123, ca_zip#124, ca_country#125], ShuffleQueryStage 5 "
          },
          "33" : {
            "sign" : -459341749,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 15504000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "22" : {
            "sign" : 1867243163,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9456300108,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] "
          },
          "26" : {
            "sign" : 812756911,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "37" : {
            "sign" : -1899214940,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_ticket_number#34L] "
          },
          "13" : {
            "sign" : 474468585,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 10168082233949,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          },
          "24" : {
            "sign" : -628374504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 43776970976,
            "rowCount" : 288006388,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "35" : {
            "sign" : 228187507,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#75, i_item_id#76, i_rec_start_date#77, i_rec_end_date#78, i_item_desc#79, i_current_price#80, i_wholesale_cost#81, i_brand_id#82, i_brand#83, i_class_id#84, i_class#85, i_category_id#86, i_category#87, i_manufact_id#88, i_manufact#89, i_size#90, i_formulation#91, i_color#92, i_units#93, i_container#94, i_manager_id#95, i_product_name#96], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "16" : {
            "sign" : 419855978,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 113837048683,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "5" : {
            "sign" : -1275396181,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 566382067424784,
            "rowCount" : 2722990708773,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "10" : {
            "sign" : 1726153103,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163] "
          },
          "21" : {
            "sign" : 102638235,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 26954307198,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#5 = c_customer_sk#97) "
          },
          "32" : {
            "sign" : 2021572997,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 500000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#97, c_customer_id#98, c_current_cdemo_sk#99, c_current_hdemo_sk#100, c_current_addr_sk#101, c_first_shipto_date_sk#102, c_first_sales_date_sk#103, c_salutation#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_day#108, c_birth_month#109, c_birth_year#110, c_birth_country#111, c_login#112, c_email_address#113, c_last_review_date#114], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "6" : {
            "sign" : 24110032,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 631733844435336,
            "rowCount" : 2722990708773,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "36" : {
            "sign" : 352920416,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2891,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] "
          },
          "1" : {
            "sign" : -2106682157,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 218370610216787128128,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157] "
          },
          "39" : {
            "sign" : 58525475,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "17" : {
            "sign" : -1141989269,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 118459872995,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#46) "
          },
          "25" : {
            "sign" : 1921382062,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176] "
          },
          "14" : {
            "sign" : 210705200,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 64283634425,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "31" : {
            "sign" : -14387779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 482532000,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111)) "
          },
          "42" : {
            "sign" : 527040145,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#115, ca_address_id#116, ca_street_number#117, ca_street_name#118, ca_street_type#119, ca_suite_number#120, ca_city#121, ca_county#122, ca_state#123, ca_zip#124, ca_country#125, ca_gmt_offset#126, ca_location_type#127], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "0" : {
            "sign" : 496533692,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 218370610216787128128,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8)))) "
          },
          "20" : {
            "sign" : 1031245998,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24753955590,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "27" : {
            "sign" : -84657601,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "2" : {
            "sign" : -747371513,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 197573409243759782592,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "38" : {
            "sign" : 2011675015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27)) "
          },
          "18" : {
            "sign" : 455826232,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 44237719834,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "30" : {
            "sign" : -702144975,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 135108960,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "7" : {
            "sign" : 1374117770,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 18581912,
            "rowCount" : 94543,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 7 "
          },
          "29" : {
            "sign" : 2043403682,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 192558,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "41" : {
            "sign" : -1835352789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 231369396,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_country#125) AND isnotnull(ca_zip#124)) "
          },
          "3" : {
            "sign" : -630007888,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 488734222866142620096,
            "rowCount" : 2599650121628418192,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "28" : {
            "sign" : -1176082101,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 23471,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71)) "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Aggregate",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalRelation",
          "toId" : 23,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalRelation",
          "toId" : 28,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Filter",
          "toId" : 27,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Project",
          "toId" : 26,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Project",
          "toId" : 25,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Aggregate",
          "toId" : 23,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 23,
          "fromName" : "Filter",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 21,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "LogicalRelation",
          "toId" : 31,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Filter",
          "toId" : 30,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Project",
          "toId" : 21,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Join",
          "toId" : 20,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Project",
          "toId" : 19,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "LogicalRelation",
          "toId" : 34,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "Filter",
          "toId" : 33,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "Project",
          "toId" : 19,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Join",
          "toId" : 18,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Project",
          "toId" : 17,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Filter",
          "toId" : 36,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "Project",
          "toId" : 17,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Join",
          "toId" : 16,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "LogicalRelation",
          "toId" : 38,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "Filter",
          "toId" : 37,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 42,
          "fromName" : "LogicalRelation",
          "toId" : 41,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 41,
          "fromName" : "Filter",
          "toId" : 40,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Aggregate",
          "toId" : 10,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Subquery"
        } ],
        "rawPlan" : "Filter (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8))))\n:  +- Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163]\n:     +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n:        +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n:           +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n:              :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n:              :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n:              :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n:              :     :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n:              :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n:              :     :     :     :     :  +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42)))\n:              :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n:              :     :     :     :     :     :     +- Project [s_store_sk#46]\n:              :     :     :     :     :     :        +- Project [s_store_sk#46]\n:              :     :     :     :     :     :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :     :     :     :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n:              :     :     :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n:              :     :     :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n:              :     :     :     +- Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :        +- Filter isnotnull(i_item_sk#75)\n:              :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n:              :     :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n:              :     :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     +- Project [sr_item_sk#27, sr_ticket_number#34L]\n:              :        +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n:              :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n:              +- Project [ca_state#123, ca_zip#124, ca_country#125]\n:                 +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n:                    +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n+- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157]\n   +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n      +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n         +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n            :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n            :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n            :     :- LogicalQueryStage Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 7\n            :     +- LogicalQueryStage Project [sr_item_sk#27, sr_ticket_number#34L], ShuffleQueryStage 4\n            +- LogicalQueryStage Project [ca_state#123, ca_zip#124, ca_country#125], ShuffleQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 655654700,
        "inputRowCount" : 29850858
      },
      "PD" : {
        "5" : [ 10353, 13780, 29539, 20176, 18341, 22193, 24413, 43249, 57565, 57565, 18341, 20176, 47574, 35743, 43249, 35743, 13780, 43249, 20176, 47574, 32493, 22193, 29539, 26854, 8556, 18341, 32493, 29539, 47574, 4390, 7778, 22193, 12527, 10353, 20176, 29539, 26854, 43249, 39317, 22193, 29539, 24413, 15158, 13780, 24413, 18341, 35743, 32493, 32493, 35743, 57565, 43249, 13780, 29539, 39317, 24413, 12527, 47574, 43249, 26854, 22193, 32493, 26854, 13780, 22193, 47574, 39317, 16674, 26854, 29539, 13780, 13780, 22193, 12527, 18341, 39317, 6428, 18341, 39317, 26854, 52331, 39317, 32493, 32493, 32493, 9412, 29539, 26854, 11388, 18341, 10353, 12527, 11388, 43249, 52331, 18341, 15158, 13780, 13780, 32493, 35743, 43249, 32493, 16674, 15158, 20176, 18341, 22193, 29539, 3628, 29539, 24413, 16674, 22193, 16674, 39317, 22193, 57565, 29539, 32493, 13780, 32493, 43249, 20176, 22193, 24413, 4830, 13780, 22193, 26854, 15158, 24413, 22193, 32493, 35743, 47574, 29539, 29539, 24413, 9412, 18341, 29539, 43249, 11388, 18341, 32493, 47574, 22193, 47574, 24413, 26854, 47574, 18341, 11388, 43249, 15158, 29539, 39317, 24413, 16674, 52331, 20176, 10353, 29539, 22193, 12527, 18341, 10353, 47574, 15158, 8556, 47574, 47574, 35743, 9412, 29539, 32493, 13780, 16674, 35743, 47574, 22193, 63321, 24413, 24413, 24413, 26854, 52331, 26854, 35743, 47574, 16674, 29539, 22193, 39317, 29539, 24413, 18341, 35743, 22193 ],
        "6" : [ 47574, 52331, 52331, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 52331, 52331, 52331, 47574, 47574, 47574, 47574, 52331, 47574, 47574, 47574, 52331, 47574, 52331, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 52331, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 52331, 52331, 52331, 47574, 47574, 52331, 52331, 43249, 47574, 52331, 47574, 52331, 47574, 47574, 47574, 47574, 47574, 52331, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 52331, 47574, 47574, 47574, 47574, 47574, 47574, 52331, 52331, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 57565, 47574, 47574, 47574, 47574, 47574, 52331, 52331, 52331, 47574, 52331, 47574, 43249, 52331, 47574, 47574, 47574, 47574, 47574, 43249, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 43249, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 52331, 52331, 47574, 47574, 52331, 52331, 43249, 47574, 47574, 47574, 52331, 47574, 47574, 47574, 47574, 47574, 43249, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 43249, 52331, 52331, 52331, 52331, 52331, 47574, 43249, 47574, 52331, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 43249, 47574, 52331, 43249, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 43249, 47574, 52331, 57565, 47574, 52331, 47574, 47574, 47574, 52331, 52331, 52331, 52331, 52331, 47574, 47574, 47574, 52331, 52331, 47574, 43249, 47574, 47574, 52331, 47574 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 2,
        "FinishedTasksNum" : 74,
        "FinishedTasksTotalTimeInMs" : 247113.0,
        "FinishedTasksDistributionInMs" : [ 349.0, 496.0, 757.0, 1326.0, 19180.0 ]
      },
      "StartTimeInMs" : 1702226780953,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 42615,
        "IOBytes" : {
          "Total" : 17651650451,
          "Details" : {
            "IR" : 2631279432,
            "IW" : 0,
            "SR" : 7731740894,
            "SW" : 7288630125
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "45" : {
            "sign" : 352920416,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2891,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] "
          },
          "34" : {
            "sign" : 1921382062,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176] "
          },
          "12" : {
            "sign" : -1741284868,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 50699637819038400,
            "rowCount" : 506996378190384,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#5 = c_customer_sk#97) "
          },
          "51" : {
            "sign" : 527040145,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 246000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#115, ca_address_id#116, ca_street_number#117, ca_street_name#118, ca_street_type#119, ca_suite_number#120, ca_city#121, ca_county#122, ca_state#123, ca_zip#124, ca_country#125, ca_gmt_offset#126, ca_location_type#127], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "8" : {
            "sign" : 1915756015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2548064425494744668736,
            "rowCount" : 11175721164450634512,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#46) "
          },
          "19" : {
            "sign" : 1726153103,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163] "
          },
          "23" : {
            "sign" : 210705200,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 64283634425,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "4" : {
            "sign" : 931999392,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 86278667035236720,
            "rowCount" : 326813132709230,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          },
          "40" : {
            "sign" : -14387779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 482532000,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111)) "
          },
          "15" : {
            "sign" : 204445740,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1064960,
            "rowCount" : 469,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95], BroadcastQueryStage 2 "
          },
          "11" : {
            "sign" : -306043799,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 46643666793515328,
            "rowCount" : 506996378190384,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "9" : {
            "sign" : 880242762,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 38996133424891575744,
            "rowCount" : 237781301371290096,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "44" : {
            "sign" : 228187507,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#75, i_item_id#76, i_rec_start_date#77, i_rec_end_date#78, i_item_desc#79, i_current_price#80, i_wholesale_cost#81, i_brand_id#82, i_brand#83, i_class_id#84, i_class#85, i_category_id#86, i_category#87, i_manufact_id#88, i_manufact#89, i_size#90, i_formulation#91, i_color#92, i_units#93, i_container#94, i_manager_id#95, i_product_name#96], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "33" : {
            "sign" : -628374504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 43776970976,
            "rowCount" : 288006388,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "22" : {
            "sign" : 474468585,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 10168082233949,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          },
          "26" : {
            "sign" : -1141989269,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 118459872995,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#46) "
          },
          "50" : {
            "sign" : -1835352789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 231369396,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_country#125) AND isnotnull(ca_zip#124)) "
          },
          "37" : {
            "sign" : -1176082101,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 23471,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71)) "
          },
          "13" : {
            "sign" : 2012214440,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 9456300108,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15], ShuffleQueryStage 0 "
          },
          "46" : {
            "sign" : -1899214940,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_ticket_number#34L] "
          },
          "24" : {
            "sign" : 815965107,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 72623132945,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "35" : {
            "sign" : 812756911,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "16" : {
            "sign" : -2059652252,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051704,
            "rowCount" : 47,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71], BroadcastQueryStage 3 "
          },
          "5" : {
            "sign" : 2105513021,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 72275653840,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "10" : {
            "sign" : 294442031,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 39947258630376736128,
            "rowCount" : 237781301371290096,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#4 = i_item_sk#75) "
          },
          "48" : {
            "sign" : 58525475,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "21" : {
            "sign" : -859819627,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6792785226829,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "43" : {
            "sign" : 2095138697,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 86904000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(i_item_sk#75) "
          },
          "32" : {
            "sign" : 1011872821,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39926600456,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42))) "
          },
          "49" : {
            "sign" : 1153698931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#123, ca_zip#124, ca_country#125] "
          },
          "6" : {
            "sign" : 1294965600,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 80615152360,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "36" : {
            "sign" : -84657601,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "1" : {
            "sign" : 1174838359,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 26576165813078234,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157] "
          },
          "39" : {
            "sign" : -702144975,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 135108960,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "17" : {
            "sign" : -114833265,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sr_item_sk#27, sr_ticket_number#34L], ShuffleQueryStage 4 "
          },
          "25" : {
            "sign" : 419855978,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 113837048683,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "14" : {
            "sign" : 1038420939,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 131450376,
            "rowCount" : 1930128,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111], ShuffleQueryStage 1 "
          },
          "47" : {
            "sign" : 2011675015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3686606208,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27)) "
          },
          "31" : {
            "sign" : 1867243163,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9456300108,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] "
          },
          "42" : {
            "sign" : -459341749,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 15504000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "0" : {
            "sign" : -503733772,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 26576165813078234,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8)))) "
          },
          "20" : {
            "sign" : -842263021,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 675059401424,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "27" : {
            "sign" : 455826232,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 44237719834,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "2" : {
            "sign" : -457678263,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 24045102402308879,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "38" : {
            "sign" : 2043403682,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 192558,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "18" : {
            "sign" : 775636263,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_state#123, ca_zip#124, ca_country#125], ShuffleQueryStage 5 "
          },
          "30" : {
            "sign" : 102638235,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 26954307198,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#5 = c_customer_sk#97) "
          },
          "7" : {
            "sign" : -1752375254,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2458658656179139592640,
            "rowCount" : 11175721164450634512,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "29" : {
            "sign" : 1031245998,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24753955590,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "41" : {
            "sign" : 2021572997,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 500000000,
            "rowCount" : 2000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#97, c_customer_id#98, c_current_cdemo_sk#99, c_current_hdemo_sk#100, c_current_addr_sk#101, c_first_shipto_date_sk#102, c_first_sales_date_sk#103, c_salutation#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_day#108, c_birth_month#109, c_birth_year#110, c_birth_country#111, c_login#112, c_email_address#113, c_last_review_date#114], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : 1644094708,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 59479990153079860,
            "rowCount" : 326813132709230,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "28" : {
            "sign" : 1746504807,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 45386751518,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#4 = i_item_sk#75) "
          }
        },
        "links" : [ {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Join",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Aggregate",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "LogicalRelation",
          "toId" : 32,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "LogicalRelation",
          "toId" : 37,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Filter",
          "toId" : 36,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "Project",
          "toId" : 35,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "Project",
          "toId" : 34,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "Aggregate",
          "toId" : 32,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 32,
          "fromName" : "Filter",
          "toId" : 31,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Project",
          "toId" : 30,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 41,
          "fromName" : "LogicalRelation",
          "toId" : 40,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "Filter",
          "toId" : 39,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "Project",
          "toId" : 30,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Join",
          "toId" : 29,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Project",
          "toId" : 28,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 44,
          "fromName" : "LogicalRelation",
          "toId" : 43,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 43,
          "fromName" : "Filter",
          "toId" : 42,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 42,
          "fromName" : "Project",
          "toId" : 28,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Join",
          "toId" : 27,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Project",
          "toId" : 26,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "Filter",
          "toId" : 45,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 45,
          "fromName" : "Project",
          "toId" : 26,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Join",
          "toId" : 25,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Project",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 48,
          "fromName" : "LogicalRelation",
          "toId" : 47,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 47,
          "fromName" : "Filter",
          "toId" : 46,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 46,
          "fromName" : "Project",
          "toId" : 24,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Join",
          "toId" : 23,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Project",
          "toId" : 22,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 51,
          "fromName" : "LogicalRelation",
          "toId" : 50,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 50,
          "fromName" : "Filter",
          "toId" : 49,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 49,
          "fromName" : "Project",
          "toId" : 22,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Join",
          "toId" : 21,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Project",
          "toId" : 20,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Aggregate",
          "toId" : 19,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Subquery"
        } ],
        "rawPlan" : "Filter (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8))))\n:  +- Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163]\n:     +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n:        +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n:           +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n:              :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n:              :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n:              :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n:              :     :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n:              :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n:              :     :     :     :     :  +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42)))\n:              :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n:              :     :     :     :     :     :     +- Project [s_store_sk#46]\n:              :     :     :     :     :     :        +- Project [s_store_sk#46]\n:              :     :     :     :     :     :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :     :     :     :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n:              :     :     :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n:              :     :     :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n:              :     :     :     +- Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :        +- Filter isnotnull(i_item_sk#75)\n:              :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n:              :     :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n:              :     :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     +- Project [sr_item_sk#27, sr_ticket_number#34L]\n:              :        +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n:              :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n:              +- Project [ca_state#123, ca_zip#124, ca_country#125]\n:                 +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n:                    +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n+- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157]\n   +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n      +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n         +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n            :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n            :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n            :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n            :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n            :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n            :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n            :     :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n            :     :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n            :     :     :     :     :- LogicalQueryStage Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15], ShuffleQueryStage 0\n            :     :     :     :     +- LogicalQueryStage Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111], ShuffleQueryStage 1\n            :     :     :     +- LogicalQueryStage Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95], BroadcastQueryStage 2\n            :     :     +- LogicalQueryStage Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71], BroadcastQueryStage 3\n            :     +- LogicalQueryStage Project [sr_item_sk#27, sr_ticket_number#34L], ShuffleQueryStage 4\n            +- LogicalQueryStage Project [ca_state#123, ca_zip#124, ca_country#125], ShuffleQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 10226093032,
        "inputRowCount" : 294347784
      },
      "PD" : {

      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 155,
        "FinishedTasksTotalTimeInMs" : 177120.0,
        "FinishedTasksDistributionInMs" : [ 226.0, 496.0, 623.0, 909.0, 6014.0 ]
      },
      "StartTimeInMs" : 1702226758463,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 65105,
        "IOBytes" : {
          "Total" : 20106902102,
          "Details" : {
            "IR" : 4989168228,
            "IW" : 0,
            "SR" : 7809838072,
            "SW" : 7307895802
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "12" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 2105513021,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 24964543653761271400468992,
                "rowCount" : 120021844489236881733024
              },
              "compileTime" : {
                "sizeInBytes" : 24964543653761271400468992,
                "rowCount" : 120021844489236881733024
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "1" : {
            "sign" : 1294965600,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 27845067921502956562061568,
                "rowCount" : 120021844489236881733024
              },
              "compileTime" : {
                "sizeInBytes" : 27845067921502956562061568,
                "rowCount" : 120021844489236881733024
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          },
          "2" : {
            "sign" : -114833265,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 691238664,
                "rowCount" : 28801611
              },
              "compileTime" : {
                "sizeInBytes" : 576032220,
                "rowCount" : 28801611
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [sr_item_sk#27, sr_ticket_number#34L], ShuffleQueryStage 4 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalQueryStage",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n+- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n   :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n   :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n   :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n   :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n   :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n   :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n   :     :     :     :- LogicalQueryStage Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15], ShuffleQueryStage 0\n   :     :     :     +- LogicalQueryStage Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111], ShuffleQueryStage 1\n   :     :     +- LogicalQueryStage Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95], BroadcastQueryStage 2\n   :     +- LogicalQueryStage Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71], BroadcastQueryStage 3\n   +- LogicalQueryStage Project [sr_item_sk#27, sr_ticket_number#34L], ShuffleQueryStage 4\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 1992159467,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [sr_item_sk#27, sr_ticket_number#34L] Arguments: [sr_ticket_number#34L ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST], false, 0 "
          },
          "5" : {
            "sign" : 454028682,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 691238664,
            "rowCount" : 28801611,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [sr_item_sk#27, sr_ticket_number#34L] Arguments: 4 "
          },
          "1" : {
            "sign" : 556272168,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 27845067921502956562061568,
            "rowCount" : 120021844489236881733024,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [2]: [ss_ticket_number#11L, ss_item_sk#4] Right keys [2]: [sr_ticket_number#34L, sr_item_sk#27] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 592734839,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 24964543653761271400468992,
            "rowCount" : 120021844489236881733024,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [12]: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] Input [16]: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71, sr_item_sk#27, sr_ticket_number#34L] "
          },
          "2" : {
            "sign" : -2119340620,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [14]: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] Arguments: [ss_ticket_number#11L ASC NULLS FIRST, ss_item_sk#4 ASC NULLS FIRST], false, 0 "
          },
          "3" : {
            "sign" : 1247676499,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 18581912,
            "rowCount" : 94543,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [14]: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] Arguments: 7 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "SortMergeJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n+- SortMergeJoin [ss_ticket_number#11L, ss_item_sk#4], [sr_ticket_number#34L, sr_item_sk#27], Inner\n   :- Sort [ss_ticket_number#11L ASC NULLS FIRST, ss_item_sk#4 ASC NULLS FIRST], false, 0\n   :  +- ShuffleQueryStage 7\n   :     +- Exchange hashpartitioning(ss_ticket_number#11L, ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=1081]\n   :        +- *(7) Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n   :           +- *(7) BroadcastHashJoin [ss_store_sk#9], [s_store_sk#46], Inner, BuildRight, false\n   :              :- *(7) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n   :              :  +- *(7) BroadcastHashJoin [ss_item_sk#4], [i_item_sk#75], Inner, BuildRight, false\n   :              :     :- *(7) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n   :              :     :  +- *(7) BroadcastHashJoin [ss_customer_sk#5], [c_customer_sk#97], Inner, BuildLeft, false\n   :              :     :     :- BroadcastQueryStage 6\n   :              :     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [plan_id=915]\n   :              :     :     :     +- AQEShuffleRead local\n   :              :     :     :        +- ShuffleQueryStage 0\n   :              :     :     :           +- Exchange hashpartitioning(ss_customer_sk#5, 200), ENSURE_REQUIREMENTS, [plan_id=474]\n   :              :     :     :              +- *(1) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n   :              :     :     :                 +- *(1) Filter (((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(Subquery subquery#174, [id=#277], xxhash64(ss_item_sk#4, 42))) AND might_contain(Subquery subquery#177, [id=#290], xxhash64(ss_store_sk#9, 42)))\n   :              :     :     :                    :  :- Subquery subquery#174, [id=#277]\n   :              :     :     :                    :  :  +- AdaptiveSparkPlan isFinalPlan=true\n                                                            +- == Final Plan ==\n                                                               ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[bloomFilter#173])\n                                                               +- ShuffleQueryStage 0\n                                                                  +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=620]\n                                                                     +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[buf#194])\n                                                                        +- *(1) Project [i_item_sk#75]\n                                                                           +- *(1) Filter ((isnotnull(i_color#92) AND (i_color#92 = chiffon)) AND isnotnull(i_item_sk#75))\n                                                                              +- *(1) ColumnarToRow\n                                                                                 +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_color#92] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = chiffon), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,chiffon), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_color:string>\n                                                            +- == Initial Plan ==\n                                                               ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[bloomFilter#173])\n                                                               +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=275]\n                                                                  +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[buf#194])\n                                                                     +- Project [i_item_sk#75]\n                                                                        +- Filter ((isnotnull(i_color#92) AND (i_color#92 = chiffon)) AND isnotnull(i_item_sk#75))\n                                                                           +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_color#92] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = chiffon), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,chiffon), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_color:string>\n   :              :     :     :                    :  +- Subquery subquery#177, [id=#290]\n   :              :     :     :                    :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                            +- == Final Plan ==\n                                                               ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[bloomFilter#176])\n                                                               +- ShuffleQueryStage 0\n                                                                  +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=621]\n                                                                     +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[buf#193])\n                                                                        +- *(1) Project [s_store_sk#46]\n                                                                           +- *(1) Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n                                                                              +- *(1) ColumnarToRow\n                                                                                 +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_market_id#56,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string>\n                                                            +- == Initial Plan ==\n                                                               ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[bloomFilter#176])\n                                                               +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=288]\n                                                                  +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[buf#193])\n                                                                     +- Project [s_store_sk#46]\n                                                                        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n                                                                           +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_market_id#56,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string>\n   :              :     :     :                    +- *(1) ColumnarToRow\n   :              :     :     :                       +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_sales_price#15,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_ticket_number#11L), isnotnull(ss_item_sk#4), isnotnull(ss_store_sk#9), isnotnull(ss..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_sales_price:d...\n   :              :     :     +- AQEShuffleRead local\n   :              :     :        +- ShuffleQueryStage 1\n   :              :     :           +- Exchange hashpartitioning(c_customer_sk#97, 200), ENSURE_REQUIREMENTS, [plan_id=493]\n   :              :     :              +- *(2) Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n   :              :     :                 +- *(2) ColumnarToRow\n   :              :     :                    +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#97,c_first_name#105,c_last_name#106,c_birth_country#111] Batched: true, DataFilters: [isnotnull(c_customer_sk#97), isnotnull(c_birth_country#111)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_birth_country)], ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>\n   :              :     +- BroadcastQueryStage 2\n   :              :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=512]\n   :              :           +- *(3) Filter ((isnotnull(i_color#92) AND (i_color#92 = chiffon)) AND isnotnull(i_item_sk#75))\n   :              :              +- *(3) ColumnarToRow\n   :              :                 +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_current_price#80,i_size#90,i_color#92,i_units#93,i_manager_id#95] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = chiffon), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,chiffon), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_m...\n   :              +- BroadcastQueryStage 3\n   :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=531]\n   :                    +- *(4) Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n   :                       +- *(4) Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n   :                          +- *(4) ColumnarToRow\n   :                             +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_store_name#51,s_market_id#56,s_state#70,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>\n   +- Sort [sr_ticket_number#34L ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST], false, 0\n      +- ShuffleQueryStage 4\n         +- Exchange hashpartitioning(sr_ticket_number#34L, sr_item_sk#27, 200), ENSURE_REQUIREMENTS, [plan_id=554]\n            +- *(5) Project [sr_item_sk#27, sr_ticket_number#34L]\n               +- *(5) Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n                  +- *(5) ColumnarToRow\n                     +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#27,sr_ticket_number#34L,sr_returned_date_sk#45] Batched: true, DataFilters: [isnotnull(sr_ticket_number#34L), isnotnull(sr_item_sk#27)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_retu..., PartitionFilters: [], PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)], ReadSchema: struct<sr_item_sk:int,sr_ticket_number:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 709820576,
        "inputRowCount" : 28896154
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "4" : [ 1849964, 1850299, 1850358, 1828178, 1831060, 1824389, 1830718, 1842096, 1821121, 1834564, 1826760, 1837485, 1834037, 1863690, 1834545, 1831490, 1833619, 1845225, 1852827, 1832435, 1833492, 1844280, 1834139, 1845389, 1823976, 1828654, 1838733, 1833991, 1836305, 1844661, 1833924, 1845608, 1829244, 1840258, 1840080, 1833519, 1831033, 1825910, 1828701, 1833146, 1825723, 1829867, 1850291, 1836296, 1834189, 1832532, 1836096, 1828702, 1822331, 1836086, 1836603, 1846376, 1841103, 1842299, 1838503, 1837943, 1827601, 1836511, 1842266, 1833890, 1833656, 1837981, 1830944, 1847736, 1846568, 1838698, 1826914, 1834211, 1840349, 1831696, 1842126, 1832055, 1846371, 1832261, 1824675, 1831276, 1847990, 1829238, 1826547, 1834235, 1848247, 1842449, 1826302, 1850820, 1829120, 1832394, 1838881, 1824017, 1841697, 1828751, 1837932, 1841286, 1819490, 1834471, 1834123, 1840507, 1833671, 1846962, 1830238, 1847174, 1847382, 1831330, 1834565, 1823998, 1822885, 1827910, 1837354, 1846442, 1837273, 1840872, 1832856, 1824718, 1846350, 1849427, 1835742, 1837108, 1834981, 1826638, 1824546, 1851557, 1849691, 1827136, 1832401, 1853163, 1827561, 1817816, 1839470, 1835444, 1826730, 1843801, 1840640, 1831522, 1836781, 1841159, 1838616, 1831369, 1834276, 1830520, 1840323, 1846935, 1849354, 1846896, 1828782, 1834591, 1834808, 1836994, 1832831, 1835276, 1833918, 1843148, 1838411, 1832496, 1821068, 1840055, 1826489, 1825662, 1838319, 1841064, 1835652, 1842056, 1853796, 1824006, 1835888, 1847150, 1831745, 1844599, 1827961, 1842865, 1830256, 1846443, 1838984, 1834224, 1829329, 1846810, 1829207, 1838887, 1829365, 1834906, 1840150, 1836248, 1846923, 1828523, 1846992, 1830402, 1846910, 1827421, 1834102, 1833531, 1839872, 1840015, 1845898, 1837808, 1843181, 1829087, 1839423, 1836629, 1832089, 1834549, 1827101, 1845794 ],
        "6" : [ 47574, 52331, 52331, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 52331, 52331, 52331, 47574, 47574, 47574, 47574, 52331, 47574, 47574, 47574, 52331, 47574, 52331, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 52331, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 52331, 52331, 52331, 47574, 47574, 52331, 52331, 43249, 47574, 52331, 47574, 52331, 47574, 47574, 47574, 47574, 47574, 52331, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 52331, 47574, 47574, 47574, 47574, 47574, 47574, 52331, 52331, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 57565, 47574, 47574, 47574, 47574, 47574, 52331, 52331, 52331, 47574, 52331, 47574, 43249, 52331, 47574, 47574, 47574, 47574, 47574, 43249, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 43249, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 52331, 52331, 47574, 47574, 52331, 52331, 43249, 47574, 47574, 47574, 52331, 47574, 47574, 47574, 47574, 47574, 43249, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 43249, 52331, 52331, 52331, 52331, 52331, 47574, 43249, 47574, 52331, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 43249, 47574, 52331, 43249, 47574, 47574, 47574, 47574, 47574, 47574, 47574, 43249, 47574, 52331, 57565, 47574, 52331, 47574, 47574, 47574, 52331, 52331, 52331, 52331, 52331, 47574, 47574, 47574, 52331, 52331, 47574, 43249, 47574, 47574, 52331, 47574 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 12,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 21 ],
      "Objectives" : {
        "DurationInMs" : 5238,
        "TotalTasksDurationInMs" : 28845,
        "IOBytes" : {
          "Total" : 360572525,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 359466274,
            "SW" : 1106251
          }
        }
      }
    },
    "8" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1899214940,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 576032220,
                "rowCount" : 28801611
              },
              "compileTime" : {
                "sizeInBytes" : 576032220,
                "rowCount" : 28801611
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_item_sk#27, sr_ticket_number#34L] "
          },
          "1" : {
            "sign" : 2011675015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3686606208,
                "rowCount" : 28801611
              },
              "compileTime" : {
                "sizeInBytes" : 3686606208,
                "rowCount" : 28801611
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27)) "
          },
          "2" : {
            "sign" : 58525475,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3686606208,
                "rowCount" : 28801611
              },
              "compileTime" : {
                "sizeInBytes" : 3686606208,
                "rowCount" : 28801611
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#26, sr_item_sk#27, sr_customer_sk#28, sr_cdemo_sk#29, sr_hdemo_sk#30, sr_addr_sk#31, sr_store_sk#32, sr_reason_sk#33, sr_ticket_number#34L, sr_return_quantity#35, sr_return_amt#36, sr_return_tax#37, sr_return_amt_inc_tax#38, sr_fee#39, sr_return_ship_cost#40, sr_refunded_cash#41, sr_reversed_charge#42, sr_store_credit#43, sr_net_loss#44, sr_returned_date_sk#45], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [sr_item_sk#27, sr_ticket_number#34L]\n+- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n   +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -446545008,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [sr_item_sk#27, sr_ticket_number#34L] Input [3]: [sr_item_sk#27, sr_ticket_number#34L, sr_returned_date_sk#45] "
          },
          "1" : {
            "sign" : -348316301,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [sr_item_sk#27, sr_ticket_number#34L, sr_returned_date_sk#45] Condition : (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27)) "
          },
          "2" : {
            "sign" : 1184336655,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_returns Output [3]: [sr_item_sk#27, sr_ticket_number#34L, sr_returned_date_sk#45] Batched: true Location: CatalogFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_returns] PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)] ReadSchema: struct<sr_item_sk:int,sr_ticket_number:bigint> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_returns",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [sr_item_sk#27, sr_ticket_number#34L]\n+- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n   +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#27,sr_ticket_number#34L,sr_returned_date_sk#45] Batched: true, DataFilters: [isnotnull(sr_ticket_number#34L), isnotnull(sr_item_sk#27)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_retu..., PartitionFilters: [], PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)], ReadSchema: struct<sr_item_sk:int,sr_ticket_number:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 576032220,
        "inputRowCount" : 28801611
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 12 ],
      "Objectives" : {
        "DurationInMs" : 22773,
        "TotalTasksDurationInMs" : 265127,
        "IOBytes" : {
          "Total" : 624373554,
          "Details" : {
            "IR" : 274155449,
            "IW" : 0,
            "SR" : 0,
            "SW" : 350218105
          }
        }
      }
    },
    "19" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 419855978,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 113837048683,
                "rowCount" : 577853039
              },
              "compileTime" : {
                "sizeInBytes" : 113837048683,
                "rowCount" : 577853039
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "1" : {
            "sign" : -1141989269,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 118459872995,
                "rowCount" : 577853039
              },
              "compileTime" : {
                "sizeInBytes" : 118459872995,
                "rowCount" : 577853039
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#46) "
          },
          "2" : {
            "sign" : 455826232,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 44237719834,
                "rowCount" : 287257921
              },
              "compileTime" : {
                "sizeInBytes" : 44237719834,
                "rowCount" : 287257921
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "3" : {
            "sign" : 1746504807,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 45386751518,
                "rowCount" : 287257921
              },
              "compileTime" : {
                "sizeInBytes" : 45386751518,
                "rowCount" : 287257921
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#4 = i_item_sk#75) "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n+- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n   :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n   :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n   :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n   :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n   :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n   :     :     :  +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42)))\n   :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n   :     :     :     :     +- Project [s_store_sk#46]\n   :     :     :     :        +- Project [s_store_sk#46]\n   :     :     :     :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n   :     :     :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n   :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n   :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n   :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n   :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n   :     +- Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n   :        +- Filter isnotnull(i_item_sk#75)\n   :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n   +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n      +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n         +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : 1110880916,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 2891,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastQueryStage Output [4]: [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] Arguments: 5 "
          },
          "4" : {
            "sign" : -1791048823,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [7]: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] Arguments: [ss_item_sk#4 ASC NULLS FIRST], false, 0 "
          },
          "5" : {
            "sign" : 1583167541,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 3681052128,
            "rowCount" : 39966388,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [7]: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] Arguments: 10 "
          },
          "6" : {
            "sign" : 1611086926,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [6]: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] Arguments: [i_item_sk#75 ASC NULLS FIRST], false, 0 "
          },
          "1" : {
            "sign" : -903068003,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 118459872995,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_store_sk#9] Right keys [1]: [s_store_sk#46] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 1071065994,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 113837048683,
            "rowCount" : 577853039,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [14]: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] Input [16]: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] "
          },
          "2" : {
            "sign" : 1101749378,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 44237719834,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [12]: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] Input [13]: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "7" : {
            "sign" : -1609075797,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 16488824,
            "rowCount" : 204000,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [6]: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] Arguments: 3 "
          },
          "3" : {
            "sign" : 409750489,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 45386751518,
            "rowCount" : 287257921,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [ss_item_sk#4] Right keys [1]: [i_item_sk#75] Join type: Inner Join condition: None "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Sort",
          "toId" : 3,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "ShuffleQueryStage",
          "toId" : 6,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Sort",
          "toId" : 3,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "SortMergeJoin",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n+- BroadcastHashJoin [ss_store_sk#9], [s_store_sk#46], Inner, BuildRight, false\n   :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n   :  +- SortMergeJoin [ss_item_sk#4], [i_item_sk#75], Inner\n   :     :- Sort [ss_item_sk#4 ASC NULLS FIRST], false, 0\n   :     :  +- ShuffleQueryStage 10\n   :     :     +- Exchange hashpartitioning(ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=2131]\n   :     :        +- *(9) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n   :     :           +- *(9) SortMergeJoin [ss_customer_sk#5], [c_customer_sk#97], Inner\n   :     :              :- *(7) Sort [ss_customer_sk#5 ASC NULLS FIRST], false, 0\n   :     :              :  +- AQEShuffleRead coalesced\n   :     :              :     +- ShuffleQueryStage 0\n   :     :              :        +- Exchange hashpartitioning(ss_customer_sk#5, 200), ENSURE_REQUIREMENTS, [plan_id=1693]\n   :     :              :           +- *(1) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n   :     :              :              +- *(1) Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(ReusedSubquery Subquery subquery#177, [id=#290], xxhash64(ss_store_sk#9, 42)))\n   :     :              :                 :  +- ReusedSubquery Subquery subquery#177, [id=#290]\n   :     :              :                 +- *(1) ColumnarToRow\n   :     :              :                    +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_sales_price#15,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_ticket_number#11L), isnotnull(ss_item_sk#4), isnotnull(ss_store_sk#9), isnotnull(ss..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_sales_price:d...\n   :     :              +- *(8) Sort [c_customer_sk#97 ASC NULLS FIRST], false, 0\n   :     :                 +- AQEShuffleRead coalesced\n   :     :                    +- ShuffleQueryStage 2\n   :     :                       +- ReusedExchange [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111], Exchange hashpartitioning(c_customer_sk#97, 200), ENSURE_REQUIREMENTS, [plan_id=493]\n   :     +- Sort [i_item_sk#75 ASC NULLS FIRST], false, 0\n   :        +- ShuffleQueryStage 3\n   :           +- Exchange hashpartitioning(i_item_sk#75, 200), ENSURE_REQUIREMENTS, [plan_id=1735]\n   :              +- *(3) Filter isnotnull(i_item_sk#75)\n   :                 +- *(3) ColumnarToRow\n   :                    +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_current_price#80,i_size#90,i_color#92,i_units#93,i_manager_id#95] Batched: true, DataFilters: [isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_m...\n   +- BroadcastQueryStage 5\n      +- ReusedExchange [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=531]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3698592656,
        "inputRowCount" : 40170435
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "11" : [ 39317, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 39317, 39317, 39317, 35743, 39317, 35743, 35743, 39317, 39317, 39317, 35743, 39317, 39317, 35743, 35743, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 35743, 39317, 39317, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 35743, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 39317, 35743, 35743, 35743, 39317, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 39317, 35743, 35743, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 35743, 39317, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 35743, 39317, 39317, 39317, 39317, 39317, 39317, 35743, 39317, 35743, 35743, 39317, 39317, 35743, 39317, 35743, 35743, 35743, 35743, 35743, 39317, 35743, 39317, 35743, 39317, 39317, 35743, 39317, 35743, 35743, 39317, 35743, 35743, 35743, 39317, 35743, 35743, 35743, 39317, 39317 ],
        "12" : [ 10647805, 10564791, 10730819, 10730819, 10730819, 10647805, 10730819, 9755295, 9755295, 10730819, 10730819, 10730819, 10730819, 10481777, 10730819, 10481777, 10730819, 10730819, 11164690, 10730819, 10730819, 10730819, 10647805, 10232735, 11073374, 10730819, 10730819, 10730819, 10481777, 10730819, 10730819, 10730819, 10982058, 10730819, 10730819, 10730819, 10730819, 10564791, 10315749, 10730819, 10647805, 10647805, 10647805, 10730819, 10730819, 10730819, 10730819, 10647805, 9755295, 10149721, 11712586, 10730819, 10730819, 10730819, 10647805, 10799426, 11073374, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 9755295, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 10066707, 10730819, 10730819, 10730819, 10730819, 9755295, 10730819, 10730819, 10730819, 10730819, 10481777, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 9755295, 10730819, 10730819, 10564791, 10647805, 10982058, 10315749, 10730819, 10730819, 10647805, 10730819, 10730819, 10730819, 10730819, 11529954, 9755295, 10730819, 10730819, 10730819, 9755295, 10730819, 10647805, 10730819, 10730819, 10564791, 9900679, 10730819, 10647805, 10730819, 11529954, 10730819, 10730819, 10730819, 10730819, 10481777, 10730819, 10647805, 10730819, 10730819, 10647805, 10730819, 10647805, 10730819, 10564791, 10730819, 10730819, 10730819, 10730819, 10315749, 10730819, 10730819, 10647805, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 9755295, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 9755295, 10564791, 10730819, 10730819, 10730819, 10730819, 10730819, 10730819, 10398763, 10730819, 10730819, 10730819, 10982058, 10730819, 10730819, 10730819, 10730819, 9755295, 9755295, 10730819, 10730819, 10730819, 10149721, 10730819, 10481777, 11073374, 10799426, 10730819, 10730819, 10730819, 10481777, 10730819, 10481777, 10730819, 9755295, 10730819, 9983693, 10730819, 10066707, 10799426, 10822135 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 20,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 41 ],
      "Objectives" : {
        "DurationInMs" : 7768,
        "TotalTasksDurationInMs" : 105682,
        "IOBytes" : {
          "Total" : 5910311619,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 2031306512,
            "SW" : 3879005107
          }
        }
      }
    },
    "23" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 473987292,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 40,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 24,
                "rowCount" : 1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163], HashAggregate(keys=[], functions=[avg(netpaid#159)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163], HashAggregate(keys=[], functions=[avg(netpaid#159)])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -2056888245,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 40,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [2]: [sum#189, count#190L] Keys: [] Functions [1]: [avg(netpaid#159)] Aggregate Attributes [1]: [avg(netpaid#159)#162] Results [1]: [(0.05 * avg(netpaid#159)#162) AS (0.05 * avg(netpaid))#163] "
          },
          "1" : {
            "sign" : -1953400799,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 24,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [sum#189, count#190L] Arguments: 14 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[], functions=[avg(netpaid#159)], output=[(0.05 * avg(netpaid))#163])\n+- ShuffleQueryStage 14\n   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=2616]\n      +- *(19) HashAggregate(keys=[], functions=[partial_avg(netpaid#159)], output=[sum#189, count#190L])\n         +- *(19) HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], functions=[sum(UnscaledValue(ss_sales_price#15))], output=[netpaid#159])\n            +- AQEShuffleRead coalesced\n               +- ShuffleQueryStage 13\n                  +- Exchange hashpartitioning(c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90, 200), ENSURE_REQUIREMENTS, [plan_id=2568]\n                     +- *(18) HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], functions=[partial_sum(UnscaledValue(ss_sales_price#15))], output=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90, sum#192L])\n                        +- *(18) Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n                           +- *(18) SortMergeJoin [c_birth_country#111, s_zip#71], [upper(ca_country#125), ca_zip#124], Inner\n                              :- *(16) Sort [c_birth_country#111 ASC NULLS FIRST, s_zip#71 ASC NULLS FIRST], false, 0\n                              :  +- AQEShuffleRead coalesced\n                              :     +- ShuffleQueryStage 12\n                              :        +- Exchange hashpartitioning(c_birth_country#111, s_zip#71, 200), ENSURE_REQUIREMENTS, [plan_id=2461]\n                              :           +- *(15) Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n                              :              +- *(15) SortMergeJoin [ss_ticket_number#11L, ss_item_sk#4], [sr_ticket_number#34L, sr_item_sk#27], Inner\n                              :                 :- *(13) Sort [ss_ticket_number#11L ASC NULLS FIRST, ss_item_sk#4 ASC NULLS FIRST], false, 0\n                              :                 :  +- AQEShuffleRead coalesced\n                              :                 :     +- ShuffleQueryStage 11\n                              :                 :        +- Exchange hashpartitioning(ss_ticket_number#11L, ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=2320]\n                              :                 :           +- *(12) Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n                              :                 :              +- *(12) BroadcastHashJoin [ss_store_sk#9], [s_store_sk#46], Inner, BuildRight, false\n                              :                 :                 :- *(12) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n                              :                 :                 :  +- *(12) SortMergeJoin [ss_item_sk#4], [i_item_sk#75], Inner\n                              :                 :                 :     :- *(10) Sort [ss_item_sk#4 ASC NULLS FIRST], false, 0\n                              :                 :                 :     :  +- AQEShuffleRead coalesced\n                              :                 :                 :     :     +- ShuffleQueryStage 10\n                              :                 :                 :     :        +- Exchange hashpartitioning(ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=2131]\n                              :                 :                 :     :           +- *(9) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n                              :                 :                 :     :              +- *(9) SortMergeJoin [ss_customer_sk#5], [c_customer_sk#97], Inner\n                              :                 :                 :     :                 :- *(7) Sort [ss_customer_sk#5 ASC NULLS FIRST], false, 0\n                              :                 :                 :     :                 :  +- AQEShuffleRead coalesced\n                              :                 :                 :     :                 :     +- ShuffleQueryStage 0\n                              :                 :                 :     :                 :        +- Exchange hashpartitioning(ss_customer_sk#5, 200), ENSURE_REQUIREMENTS, [plan_id=1693]\n                              :                 :                 :     :                 :           +- *(1) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n                              :                 :                 :     :                 :              +- *(1) Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(ReusedSubquery Subquery subquery#177, [id=#290], xxhash64(ss_store_sk#9, 42)))\n                              :                 :                 :     :                 :                 :  +- ReusedSubquery Subquery subquery#177, [id=#290]\n                              :                 :                 :     :                 :                 +- *(1) ColumnarToRow\n                              :                 :                 :     :                 :                    +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_sales_price#15,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_ticket_number#11L), isnotnull(ss_item_sk#4), isnotnull(ss_store_sk#9), isnotnull(ss..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_sales_price:d...\n                              :                 :                 :     :                 +- *(8) Sort [c_customer_sk#97 ASC NULLS FIRST], false, 0\n                              :                 :                 :     :                    +- AQEShuffleRead coalesced\n                              :                 :                 :     :                       +- ShuffleQueryStage 2\n                              :                 :                 :     :                          +- ReusedExchange [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111], Exchange hashpartitioning(c_customer_sk#97, 200), ENSURE_REQUIREMENTS, [plan_id=493]\n                              :                 :                 :     +- *(11) Sort [i_item_sk#75 ASC NULLS FIRST], false, 0\n                              :                 :                 :        +- AQEShuffleRead coalesced\n                              :                 :                 :           +- ShuffleQueryStage 3\n                              :                 :                 :              +- Exchange hashpartitioning(i_item_sk#75, 200), ENSURE_REQUIREMENTS, [plan_id=1735]\n                              :                 :                 :                 +- *(3) Filter isnotnull(i_item_sk#75)\n                              :                 :                 :                    +- *(3) ColumnarToRow\n                              :                 :                 :                       +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_current_price#80,i_size#90,i_color#92,i_units#93,i_manager_id#95] Batched: true, DataFilters: [isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_m...\n                              :                 :                 +- BroadcastQueryStage 5\n                              :                 :                    +- ReusedExchange [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=531]\n                              :                 +- *(14) Sort [sr_ticket_number#34L ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST], false, 0\n                              :                    +- AQEShuffleRead coalesced\n                              :                       +- ShuffleQueryStage 7\n                              :                          +- ReusedExchange [sr_item_sk#27, sr_ticket_number#34L], Exchange hashpartitioning(sr_ticket_number#34L, sr_item_sk#27, 200), ENSURE_REQUIREMENTS, [plan_id=554]\n                              +- *(17) Sort [upper(ca_country#125) ASC NULLS FIRST, ca_zip#124 ASC NULLS FIRST], false, 0\n                                 +- AQEShuffleRead coalesced\n                                    +- ShuffleQueryStage 9\n                                       +- ReusedExchange [ca_state#123, ca_zip#124, ca_country#125], Exchange hashpartitioning(upper(ca_country#125), ca_zip#124, 200), ENSURE_REQUIREMENTS, [plan_id=577]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 40,
        "inputRowCount" : 1
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "16" : [ 88 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 24,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 78 ],
      "Objectives" : {
        "DurationInMs" : 39,
        "TotalTasksDurationInMs" : 33,
        "IOBytes" : {
          "Total" : 82,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 82,
            "SW" : 0
          }
        }
      }
    },
    "4" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 2043403682,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : 812756911,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 588,
                "rowCount" : 49
              },
              "compileTime" : {
                "sizeInBytes" : 588,
                "rowCount" : 49
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "0" : {
            "sign" : 1921382062,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176] "
          },
          "2" : {
            "sign" : -84657601,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 588,
                "rowCount" : 49
              },
              "compileTime" : {
                "sizeInBytes" : 588,
                "rowCount" : 49
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46] "
          },
          "3" : {
            "sign" : -1176082101,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 23471,
                "rowCount" : 49
              },
              "compileTime" : {
                "sizeInBytes" : 23471,
                "rowCount" : 49
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71)) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n+- Project [s_store_sk#46]\n   +- Project [s_store_sk#46]\n      +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n         +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1878565924,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [s_store_sk#46] Keys: [] Functions [1]: [partial_bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)] Aggregate Attributes [1]: [buf#178] Results [1]: [buf#193] "
          },
          "1" : {
            "sign" : 2017526785,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [s_store_sk#46] Input [3]: [s_store_sk#46, s_market_id#56, s_zip#71] "
          },
          "2" : {
            "sign" : 1177434381,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [s_store_sk#46, s_market_id#56, s_zip#71] Condition : (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71)) "
          },
          "3" : {
            "sign" : -1018742556,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 588,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store Output [3]: [s_store_sk#46, s_market_id#56, s_zip#71] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store] PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)] ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[buf#193])\n+- Project [s_store_sk#46]\n   +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n      +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_market_id#56,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 588,
        "inputRowCount" : 49
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 2 ],
      "Objectives" : {
        "DurationInMs" : 3806,
        "TotalTasksDurationInMs" : 3793,
        "IOBytes" : {
          "Total" : 15978,
          "Details" : {
            "IR" : 15978,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "15" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -660546749,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 759207352512,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 759207352512,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157] "
          }
        },
        "links" : [ ],
        "rawPlan" : "Aggregate [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157]\n+- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n   +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n      +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n         :- LogicalQueryStage Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 8\n         +- LogicalQueryStage Project [ca_state#123, ca_zip#124, ca_country#125], ShuffleQueryStage 5\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 645946350,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 759207352512,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [4]: [c_last_name#106, c_first_name#105, s_store_name#51, netpaid#159] Keys [3]: [c_last_name#106, c_first_name#105, s_store_name#51] Functions [1]: [partial_sum(netpaid#159)] Aggregate Attributes [2]: [sum#183, isEmpty#184] Results [5]: [c_last_name#106, c_first_name#105, s_store_name#51, sum#185, isEmpty#186] "
          },
          "1" : {
            "sign" : 435816177,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 33920,
            "rowCount" : 214,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [11]: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90, sum#188L] Keys [10]: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90] Functions [1]: [sum(UnscaledValue(ss_sales_price#15))] Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#15))#160L] Results [4]: [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15))#160L,17,2) AS netpaid#159] "
          },
          "2" : {
            "sign" : 1854651110,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 686901890368,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [11]: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90, sum#188L] Arguments: 10 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "ShuffleQueryStage",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51], functions=[partial_sum(netpaid#159)], output=[c_last_name#106, c_first_name#105, s_store_name#51, sum#185, isEmpty#186])\n+- HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], functions=[sum(UnscaledValue(ss_sales_price#15))], output=[c_last_name#106, c_first_name#105, s_store_name#51, netpaid#159])\n   +- ShuffleQueryStage 10\n      +- Exchange hashpartitioning(c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90, 200), ENSURE_REQUIREMENTS, [plan_id=1470]\n         +- *(11) HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], functions=[partial_sum(UnscaledValue(ss_sales_price#15))], output=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90, sum#188L])\n            +- *(11) Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n               +- *(11) BroadcastHashJoin [c_birth_country#111, s_zip#71], [upper(ca_country#125), ca_zip#124], Inner, BuildLeft, false\n                  :- BroadcastQueryStage 9\n                  :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[3, string, true], input[11, string, true]),false), [plan_id=1398]\n                  :     +- AQEShuffleRead local\n                  :        +- ShuffleQueryStage 8\n                  :           +- Exchange hashpartitioning(c_birth_country#111, s_zip#71, 200), ENSURE_REQUIREMENTS, [plan_id=1315]\n                  :              +- *(10) Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n                  :                 +- *(10) SortMergeJoin [ss_ticket_number#11L, ss_item_sk#4], [sr_ticket_number#34L, sr_item_sk#27], Inner\n                  :                    :- *(8) Sort [ss_ticket_number#11L ASC NULLS FIRST, ss_item_sk#4 ASC NULLS FIRST], false, 0\n                  :                    :  +- AQEShuffleRead coalesced\n                  :                    :     +- ShuffleQueryStage 7\n                  :                    :        +- Exchange hashpartitioning(ss_ticket_number#11L, ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=1081]\n                  :                    :           +- *(7) Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n                  :                    :              +- *(7) BroadcastHashJoin [ss_store_sk#9], [s_store_sk#46], Inner, BuildRight, false\n                  :                    :                 :- *(7) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n                  :                    :                 :  +- *(7) BroadcastHashJoin [ss_item_sk#4], [i_item_sk#75], Inner, BuildRight, false\n                  :                    :                 :     :- *(7) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n                  :                    :                 :     :  +- *(7) BroadcastHashJoin [ss_customer_sk#5], [c_customer_sk#97], Inner, BuildLeft, false\n                  :                    :                 :     :     :- BroadcastQueryStage 6\n                  :                    :                 :     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [plan_id=915]\n                  :                    :                 :     :     :     +- AQEShuffleRead local\n                  :                    :                 :     :     :        +- ShuffleQueryStage 0\n                  :                    :                 :     :     :           +- Exchange hashpartitioning(ss_customer_sk#5, 200), ENSURE_REQUIREMENTS, [plan_id=474]\n                  :                    :                 :     :     :              +- *(1) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n                  :                    :                 :     :     :                 +- *(1) Filter (((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(Subquery subquery#174, [id=#277], xxhash64(ss_item_sk#4, 42))) AND might_contain(Subquery subquery#177, [id=#290], xxhash64(ss_store_sk#9, 42)))\n                  :                    :                 :     :     :                    :  :- Subquery subquery#174, [id=#277]\n                  :                    :                 :     :     :                    :  :  +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                                   +- == Final Plan ==\n                                                                                                      ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[bloomFilter#173])\n                                                                                                      +- ShuffleQueryStage 0\n                                                                                                         +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=620]\n                                                                                                            +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[buf#194])\n                                                                                                               +- *(1) Project [i_item_sk#75]\n                                                                                                                  +- *(1) Filter ((isnotnull(i_color#92) AND (i_color#92 = chiffon)) AND isnotnull(i_item_sk#75))\n                                                                                                                     +- *(1) ColumnarToRow\n                                                                                                                        +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_color#92] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = chiffon), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,chiffon), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_color:string>\n                                                                                                   +- == Initial Plan ==\n                                                                                                      ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[bloomFilter#173])\n                                                                                                      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=275]\n                                                                                                         +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[buf#194])\n                                                                                                            +- Project [i_item_sk#75]\n                                                                                                               +- Filter ((isnotnull(i_color#92) AND (i_color#92 = chiffon)) AND isnotnull(i_item_sk#75))\n                                                                                                                  +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_color#92] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = chiffon), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,chiffon), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_color:string>\n                  :                    :                 :     :     :                    :  +- Subquery subquery#177, [id=#290]\n                  :                    :                 :     :     :                    :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                                   +- == Final Plan ==\n                                                                                                      ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[bloomFilter#176])\n                                                                                                      +- ShuffleQueryStage 0\n                                                                                                         +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=621]\n                                                                                                            +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[buf#193])\n                                                                                                               +- *(1) Project [s_store_sk#46]\n                                                                                                                  +- *(1) Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n                                                                                                                     +- *(1) ColumnarToRow\n                                                                                                                        +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_market_id#56,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string>\n                                                                                                   +- == Initial Plan ==\n                                                                                                      ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[bloomFilter#176])\n                                                                                                      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=288]\n                                                                                                         +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[buf#193])\n                                                                                                            +- Project [s_store_sk#46]\n                                                                                                               +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n                                                                                                                  +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_market_id#56,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string>\n                  :                    :                 :     :     :                    +- *(1) ColumnarToRow\n                  :                    :                 :     :     :                       +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_sales_price#15,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_ticket_number#11L), isnotnull(ss_item_sk#4), isnotnull(ss_store_sk#9), isnotnull(ss..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_sales_price:d...\n                  :                    :                 :     :     +- AQEShuffleRead local\n                  :                    :                 :     :        +- ShuffleQueryStage 1\n                  :                    :                 :     :           +- Exchange hashpartitioning(c_customer_sk#97, 200), ENSURE_REQUIREMENTS, [plan_id=493]\n                  :                    :                 :     :              +- *(2) Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n                  :                    :                 :     :                 +- *(2) ColumnarToRow\n                  :                    :                 :     :                    +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#97,c_first_name#105,c_last_name#106,c_birth_country#111] Batched: true, DataFilters: [isnotnull(c_customer_sk#97), isnotnull(c_birth_country#111)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_birth_country)], ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>\n                  :                    :                 :     +- BroadcastQueryStage 2\n                  :                    :                 :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=512]\n                  :                    :                 :           +- *(3) Filter ((isnotnull(i_color#92) AND (i_color#92 = chiffon)) AND isnotnull(i_item_sk#75))\n                  :                    :                 :              +- *(3) ColumnarToRow\n                  :                    :                 :                 +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_current_price#80,i_size#90,i_color#92,i_units#93,i_manager_id#95] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = chiffon), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,chiffon), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_m...\n                  :                    :                 +- BroadcastQueryStage 3\n                  :                    :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=531]\n                  :                    :                       +- *(4) Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n                  :                    :                          +- *(4) Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n                  :                    :                             +- *(4) ColumnarToRow\n                  :                    :                                +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_store_name#51,s_market_id#56,s_state#70,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>\n                  :                    +- *(9) Sort [sr_ticket_number#34L ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST], false, 0\n                  :                       +- AQEShuffleRead coalesced\n                  :                          +- ShuffleQueryStage 4\n                  :                             +- Exchange hashpartitioning(sr_ticket_number#34L, sr_item_sk#27, 200), ENSURE_REQUIREMENTS, [plan_id=554]\n                  :                                +- *(5) Project [sr_item_sk#27, sr_ticket_number#34L]\n                  :                                   +- *(5) Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n                  :                                      +- *(5) ColumnarToRow\n                  :                                         +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#27,sr_ticket_number#34L,sr_returned_date_sk#45] Batched: true, DataFilters: [isnotnull(sr_ticket_number#34L), isnotnull(sr_item_sk#27)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_retu..., PartitionFilters: [], PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)], ReadSchema: struct<sr_item_sk:int,sr_ticket_number:bigint>\n                  +- AQEShuffleRead local\n                     +- ShuffleQueryStage 5\n                        +- Exchange hashpartitioning(upper(ca_country#125), ca_zip#124, 200), ENSURE_REQUIREMENTS, [plan_id=577]\n                           +- *(6) Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n                              +- *(6) ColumnarToRow\n                                 +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_state#123,ca_zip#124,ca_country#125] Batched: true, DataFilters: [isnotnull(ca_country#125), isnotnull(ca_zip#124)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_country), IsNotNull(ca_zip)], ReadSchema: struct<ca_state:string,ca_zip:string,ca_country:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 33920,
        "inputRowCount" : 214
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "8" : [ 189, 171, 171, 276, 189, 189, 304, 304, 276, 276, 251, 189, 189, 156, 0, 304, 171, 276, 405, 0, 0, 276, 0, 0, 0, 0, 189, 334, 304, 189, 189, 189, 0, 368, 304, 171, 0, 0, 0, 405, 276, 189, 189, 304, 0, 304, 445, 0, 189, 0, 334, 0, 0, 0, 0, 189, 189, 189, 0, 304, 0, 0, 189, 0, 189, 0, 445, 189, 0, 0, 189, 189, 276, 189, 189, 189, 334, 189, 368, 189, 189, 0, 171, 0, 251, 0, 189, 0, 189, 189, 276, 0, 0, 368, 0, 189, 189, 0, 0, 304, 189, 276, 189, 276, 0, 334, 0, 0, 368, 189, 189, 189, 276, 189, 0, 189, 0, 189, 189, 304, 189, 189, 189, 304, 0, 0, 0, 0, 0, 189, 0, 0, 189, 405, 0, 368, 189, 0, 207, 189, 276, 0, 189, 490, 304, 189, 0, 189, 368, 405, 304, 171, 0, 368, 171, 0, 0, 189, 0, 189, 0, 0, 189, 171, 189, 189, 304, 0, 276, 189, 304, 0, 189, 0, 334, 368, 0, 0, 276, 276, 0, 189, 0, 304, 0, 276, 276, 368, 171, 368, 304, 0, 0, 0, 0, 0, 276, 0, 189, 189 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 15,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 31 ],
      "Objectives" : {
        "DurationInMs" : 436,
        "TotalTasksDurationInMs" : 427,
        "IOBytes" : {
          "Total" : 35192,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 30739,
            "SW" : 4453
          }
        }
      }
    },
    "11" : {
      "QSLogical" : {
        "operators" : {
          "8" : {
            "sign" : -2059652252,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1051704,
                "rowCount" : 47
              },
              "compileTime" : {
                "sizeInBytes" : 2891,
                "rowCount" : 49
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71], BroadcastQueryStage 3 "
          },
          "4" : {
            "sign" : -306043799,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17392445172096,
                "rowCount" : 189048317088
              },
              "compileTime" : {
                "sizeInBytes" : 17392445172096,
                "rowCount" : 189048317088
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "5" : {
            "sign" : -1741284868,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 18904831708800,
                "rowCount" : 189048317088
              },
              "compileTime" : {
                "sizeInBytes" : 18904831708800,
                "rowCount" : 189048317088
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#5 = c_customer_sk#97) "
          },
          "6" : {
            "sign" : 1038420939,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 131450376,
                "rowCount" : 1930128
              },
              "compileTime" : {
                "sizeInBytes" : 135108960,
                "rowCount" : 1930128
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111], ShuffleQueryStage 1 "
          },
          "1" : {
            "sign" : 1915756015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 950119788214138752,
                "rowCount" : 4167192053570784
              },
              "compileTime" : {
                "sizeInBytes" : 950119788214138752,
                "rowCount" : 4167192053570784
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_store_sk#9 = s_store_sk#46) "
          },
          "0" : {
            "sign" : -1752375254,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 916782251785572480,
                "rowCount" : 4167192053570784
              },
              "compileTime" : {
                "sizeInBytes" : 916782251785572480,
                "rowCount" : 4167192053570784
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "2" : {
            "sign" : 880242762,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14540840357140608,
                "rowCount" : 88663660714272
              },
              "compileTime" : {
                "sizeInBytes" : 14540840357140608,
                "rowCount" : 88663660714272
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "7" : {
            "sign" : 204445740,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1064960,
                "rowCount" : 469
              },
              "compileTime" : {
                "sizeInBytes" : 175788,
                "rowCount" : 2313
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95], BroadcastQueryStage 2 "
          },
          "3" : {
            "sign" : 294442031,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14895494999997696,
                "rowCount" : 88663660714272
              },
              "compileTime" : {
                "sizeInBytes" : 14895494999997696,
                "rowCount" : 88663660714272
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_item_sk#4 = i_item_sk#75) "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n+- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n   :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n   :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n   :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n   :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n   :     :     :- LogicalQueryStage Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15], ShuffleQueryStage 0\n   :     :     +- LogicalQueryStage Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111], ShuffleQueryStage 1\n   :     +- LogicalQueryStage Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95], BroadcastQueryStage 2\n   +- LogicalQueryStage Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71], BroadcastQueryStage 3\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : 1309683159,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1064960,
            "rowCount" : 469,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [6]: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] Arguments: 2 "
          },
          "4" : {
            "sign" : 1832562040,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 17392445172096,
            "rowCount" : 189048317088,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [7]: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] Input [9]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "9" : {
            "sign" : -2125406535,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1051704,
            "rowCount" : 47,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [4]: [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] Arguments: 3 "
          },
          "5" : {
            "sign" : -529559303,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 18904831708800,
            "rowCount" : 189048317088,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_customer_sk#5] Right keys [1]: [c_customer_sk#97] Join type: Inner Join condition: None "
          },
          "6" : {
            "sign" : 432504756,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 12582912,
            "rowCount" : 97946,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [5]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] Arguments: 6 "
          },
          "1" : {
            "sign" : 650521168,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 950119788214138752,
            "rowCount" : 4167192053570784,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_store_sk#9] Right keys [1]: [s_store_sk#46] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 1689743475,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 916782251785572480,
            "rowCount" : 4167192053570784,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [14]: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] Input [16]: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] "
          },
          "2" : {
            "sign" : 227151112,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 14540840357140608,
            "rowCount" : 88663660714272,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [12]: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] Input [13]: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "7" : {
            "sign" : 211028395,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 131450376,
            "rowCount" : 1930128,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] Arguments: 1 "
          },
          "3" : {
            "sign" : 1081463605,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 14895494999997696,
            "rowCount" : 88663660714272,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ss_item_sk#4] Right keys [1]: [i_item_sk#75] Join type: Inner Join condition: None "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "BroadcastQueryStage",
          "toId" : 5,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "ShuffleQueryStage",
          "toId" : 5,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "BroadcastHashJoin",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "BroadcastQueryStage",
          "toId" : 3,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "BroadcastHashJoin",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n+- BroadcastHashJoin [ss_store_sk#9], [s_store_sk#46], Inner, BuildRight, false\n   :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n   :  +- BroadcastHashJoin [ss_item_sk#4], [i_item_sk#75], Inner, BuildRight, false\n   :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n   :     :  +- BroadcastHashJoin [ss_customer_sk#5], [c_customer_sk#97], Inner, BuildLeft, false\n   :     :     :- BroadcastQueryStage 6\n   :     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [plan_id=915]\n   :     :     :     +- AQEShuffleRead local\n   :     :     :        +- ShuffleQueryStage 0\n   :     :     :           +- Exchange hashpartitioning(ss_customer_sk#5, 200), ENSURE_REQUIREMENTS, [plan_id=474]\n   :     :     :              +- *(1) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n   :     :     :                 +- *(1) Filter (((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(Subquery subquery#174, [id=#277], xxhash64(ss_item_sk#4, 42))) AND might_contain(Subquery subquery#177, [id=#290], xxhash64(ss_store_sk#9, 42)))\n   :     :     :                    :  :- Subquery subquery#174, [id=#277]\n   :     :     :                    :  :  +- AdaptiveSparkPlan isFinalPlan=true\n                                             +- == Final Plan ==\n                                                ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[bloomFilter#173])\n                                                +- ShuffleQueryStage 0\n                                                   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=620]\n                                                      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[buf#194])\n                                                         +- *(1) Project [i_item_sk#75]\n                                                            +- *(1) Filter ((isnotnull(i_color#92) AND (i_color#92 = chiffon)) AND isnotnull(i_item_sk#75))\n                                                               +- *(1) ColumnarToRow\n                                                                  +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_color#92] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = chiffon), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,chiffon), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_color:string>\n                                             +- == Initial Plan ==\n                                                ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[bloomFilter#173])\n                                                +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=275]\n                                                   +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[buf#194])\n                                                      +- Project [i_item_sk#75]\n                                                         +- Filter ((isnotnull(i_color#92) AND (i_color#92 = chiffon)) AND isnotnull(i_item_sk#75))\n                                                            +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_color#92] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = chiffon), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,chiffon), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_color:string>\n   :     :     :                    :  +- Subquery subquery#177, [id=#290]\n   :     :     :                    :     +- AdaptiveSparkPlan isFinalPlan=true\n                                             +- == Final Plan ==\n                                                ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[bloomFilter#176])\n                                                +- ShuffleQueryStage 0\n                                                   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=621]\n                                                      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[buf#193])\n                                                         +- *(1) Project [s_store_sk#46]\n                                                            +- *(1) Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n                                                               +- *(1) ColumnarToRow\n                                                                  +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_market_id#56,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string>\n                                             +- == Initial Plan ==\n                                                ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[bloomFilter#176])\n                                                +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=288]\n                                                   +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[buf#193])\n                                                      +- Project [s_store_sk#46]\n                                                         +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n                                                            +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_market_id#56,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string>\n   :     :     :                    +- *(1) ColumnarToRow\n   :     :     :                       +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_sales_price#15,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_ticket_number#11L), isnotnull(ss_item_sk#4), isnotnull(ss_store_sk#9), isnotnull(ss..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_sales_price:d...\n   :     :     +- ShuffleQueryStage 1\n   :     :        +- Exchange hashpartitioning(c_customer_sk#97, 200), ENSURE_REQUIREMENTS, [plan_id=493]\n   :     :           +- *(2) Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n   :     :              +- *(2) ColumnarToRow\n   :     :                 +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#97,c_first_name#105,c_last_name#106,c_birth_country#111] Batched: true, DataFilters: [isnotnull(c_customer_sk#97), isnotnull(c_birth_country#111)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_birth_country)], ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>\n   :     +- BroadcastQueryStage 2\n   :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=512]\n   :           +- *(3) Filter ((isnotnull(i_color#92) AND (i_color#92 = chiffon)) AND isnotnull(i_item_sk#75))\n   :              +- *(3) ColumnarToRow\n   :                 +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_current_price#80,i_size#90,i_color#92,i_units#93,i_manager_id#95] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = chiffon), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,chiffon), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_m...\n   +- BroadcastQueryStage 3\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=531]\n         +- *(4) Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n            +- *(4) Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n               +- *(4) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_store_name#51,s_market_id#56,s_state#70,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 146149952,
        "inputRowCount" : 2028590
      },
      "InitialPartitionNum" : 200,
      "PD" : {

      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 3,
        "FinishedTasksNum" : 78,
        "FinishedTasksTotalTimeInMs" : 247369.0,
        "FinishedTasksDistributionInMs" : [ 14.0, 478.0, 739.0, 1249.0, 19180.0 ]
      },
      "QueryStageOptimizationId" : 11,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 17 ],
      "Objectives" : {
        "DurationInMs" : 976,
        "TotalTasksDurationInMs" : 1195,
        "IOBytes" : {
          "Total" : 82516114,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 73267945,
            "SW" : 9248169
          }
        }
      }
    },
    "9" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1153698931,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 60193664,
                "rowCount" : 940526
              },
              "compileTime" : {
                "sizeInBytes" : 60193664,
                "rowCount" : 940526
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ca_state#123, ca_zip#124, ca_country#125] "
          },
          "1" : {
            "sign" : -1835352789,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 231369396,
                "rowCount" : 940526
              },
              "compileTime" : {
                "sizeInBytes" : 231369396,
                "rowCount" : 940526
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ca_country#125) AND isnotnull(ca_zip#124)) "
          },
          "2" : {
            "sign" : 527040145,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 246000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 246000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ca_address_sk#115, ca_address_id#116, ca_street_number#117, ca_street_name#118, ca_street_type#119, ca_suite_number#120, ca_city#121, ca_county#122, ca_state#123, ca_zip#124, ca_country#125, ca_gmt_offset#126, ca_location_type#127], `spark_catalog`.`tpcds_100`.`customer_address`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ca_state#123, ca_zip#124, ca_country#125]\n+- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n   +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 2001601244,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [ca_state#123, ca_zip#124, ca_country#125] Condition : (isnotnull(ca_country#125) AND isnotnull(ca_zip#124)) "
          },
          "1" : {
            "sign" : -1556840766,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer_address Output [3]: [ca_state#123, ca_zip#124, ca_country#125] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_address] PushedFilters: [IsNotNull(ca_country), IsNotNull(ca_zip)] ReadSchema: struct<ca_state:string,ca_zip:string,ca_country:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer_address",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n+- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_state#123,ca_zip#124,ca_country#125] Batched: true, DataFilters: [isnotnull(ca_country#125), isnotnull(ca_zip#124)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_country), IsNotNull(ca_zip)], ReadSchema: struct<ca_state:string,ca_zip:string,ca_country:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 60193664,
        "inputRowCount" : 940526
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 13 ],
      "Objectives" : {
        "DurationInMs" : 21794,
        "TotalTasksDurationInMs" : 1112,
        "IOBytes" : {
          "Total" : 7767836,
          "Details" : {
            "IR" : 2579561,
            "IW" : 0,
            "SR" : 0,
            "SW" : 5188275
          }
        }
      }
    },
    "22" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1726153103,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 24,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 24,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163] "
          }
        },
        "links" : [ ],
        "rawPlan" : "Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163]\n+- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n   +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n      +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n         :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n         :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n         :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n         :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n         :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n         :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n         :     :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n         :     :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n         :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n         :     :     :     :     :  +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42)))\n         :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n         :     :     :     :     :     :     +- Project [s_store_sk#46]\n         :     :     :     :     :     :        +- Project [s_store_sk#46]\n         :     :     :     :     :     :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n         :     :     :     :     :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n         :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n         :     :     :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n         :     :     :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n         :     :     :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n         :     :     :     +- Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n         :     :     :        +- Filter isnotnull(i_item_sk#75)\n         :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n         :     :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n         :     :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n         :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n         :     +- Project [sr_item_sk#27, sr_ticket_number#34L]\n         :        +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n         :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n         +- Project [ca_state#123, ca_zip#124, ca_country#125]\n            +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n               +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -249547047,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 24,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [1]: [netpaid#159] Keys: [] Functions [1]: [partial_avg(netpaid#159)] Aggregate Attributes [2]: [sum#181, count#182L] Results [2]: [sum#189, count#190L] "
          },
          "1" : {
            "sign" : 481006650,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 16119024,
            "rowCount" : 100798,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [11]: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90, sum#192L] Keys [10]: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90] Functions [1]: [sum(UnscaledValue(ss_sales_price#15))] Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#15))#160L] Results [1]: [MakeDecimal(sum(UnscaledValue(ss_sales_price#15))#160L,17,2) AS netpaid#159] "
          },
          "2" : {
            "sign" : -736259814,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 675059401424,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [11]: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90, sum#192L] Arguments: 13 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "ShuffleQueryStage",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[], functions=[partial_avg(netpaid#159)], output=[sum#189, count#190L])\n+- HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], functions=[sum(UnscaledValue(ss_sales_price#15))], output=[netpaid#159])\n   +- ShuffleQueryStage 13\n      +- Exchange hashpartitioning(c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90, 200), ENSURE_REQUIREMENTS, [plan_id=2568]\n         +- *(18) HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], functions=[partial_sum(UnscaledValue(ss_sales_price#15))], output=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90, sum#192L])\n            +- *(18) Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n               +- *(18) SortMergeJoin [c_birth_country#111, s_zip#71], [upper(ca_country#125), ca_zip#124], Inner\n                  :- *(16) Sort [c_birth_country#111 ASC NULLS FIRST, s_zip#71 ASC NULLS FIRST], false, 0\n                  :  +- AQEShuffleRead coalesced\n                  :     +- ShuffleQueryStage 12\n                  :        +- Exchange hashpartitioning(c_birth_country#111, s_zip#71, 200), ENSURE_REQUIREMENTS, [plan_id=2461]\n                  :           +- *(15) Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n                  :              +- *(15) SortMergeJoin [ss_ticket_number#11L, ss_item_sk#4], [sr_ticket_number#34L, sr_item_sk#27], Inner\n                  :                 :- *(13) Sort [ss_ticket_number#11L ASC NULLS FIRST, ss_item_sk#4 ASC NULLS FIRST], false, 0\n                  :                 :  +- AQEShuffleRead coalesced\n                  :                 :     +- ShuffleQueryStage 11\n                  :                 :        +- Exchange hashpartitioning(ss_ticket_number#11L, ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=2320]\n                  :                 :           +- *(12) Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n                  :                 :              +- *(12) BroadcastHashJoin [ss_store_sk#9], [s_store_sk#46], Inner, BuildRight, false\n                  :                 :                 :- *(12) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n                  :                 :                 :  +- *(12) SortMergeJoin [ss_item_sk#4], [i_item_sk#75], Inner\n                  :                 :                 :     :- *(10) Sort [ss_item_sk#4 ASC NULLS FIRST], false, 0\n                  :                 :                 :     :  +- AQEShuffleRead coalesced\n                  :                 :                 :     :     +- ShuffleQueryStage 10\n                  :                 :                 :     :        +- Exchange hashpartitioning(ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=2131]\n                  :                 :                 :     :           +- *(9) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n                  :                 :                 :     :              +- *(9) SortMergeJoin [ss_customer_sk#5], [c_customer_sk#97], Inner\n                  :                 :                 :     :                 :- *(7) Sort [ss_customer_sk#5 ASC NULLS FIRST], false, 0\n                  :                 :                 :     :                 :  +- AQEShuffleRead coalesced\n                  :                 :                 :     :                 :     +- ShuffleQueryStage 0\n                  :                 :                 :     :                 :        +- Exchange hashpartitioning(ss_customer_sk#5, 200), ENSURE_REQUIREMENTS, [plan_id=1693]\n                  :                 :                 :     :                 :           +- *(1) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n                  :                 :                 :     :                 :              +- *(1) Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(ReusedSubquery Subquery subquery#177, [id=#290], xxhash64(ss_store_sk#9, 42)))\n                  :                 :                 :     :                 :                 :  +- ReusedSubquery Subquery subquery#177, [id=#290]\n                  :                 :                 :     :                 :                 +- *(1) ColumnarToRow\n                  :                 :                 :     :                 :                    +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_sales_price#15,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_ticket_number#11L), isnotnull(ss_item_sk#4), isnotnull(ss_store_sk#9), isnotnull(ss..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_sales_price:d...\n                  :                 :                 :     :                 +- *(8) Sort [c_customer_sk#97 ASC NULLS FIRST], false, 0\n                  :                 :                 :     :                    +- AQEShuffleRead coalesced\n                  :                 :                 :     :                       +- ShuffleQueryStage 2\n                  :                 :                 :     :                          +- ReusedExchange [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111], Exchange hashpartitioning(c_customer_sk#97, 200), ENSURE_REQUIREMENTS, [plan_id=493]\n                  :                 :                 :     +- *(11) Sort [i_item_sk#75 ASC NULLS FIRST], false, 0\n                  :                 :                 :        +- AQEShuffleRead coalesced\n                  :                 :                 :           +- ShuffleQueryStage 3\n                  :                 :                 :              +- Exchange hashpartitioning(i_item_sk#75, 200), ENSURE_REQUIREMENTS, [plan_id=1735]\n                  :                 :                 :                 +- *(3) Filter isnotnull(i_item_sk#75)\n                  :                 :                 :                    +- *(3) ColumnarToRow\n                  :                 :                 :                       +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_current_price#80,i_size#90,i_color#92,i_units#93,i_manager_id#95] Batched: true, DataFilters: [isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_m...\n                  :                 :                 +- BroadcastQueryStage 5\n                  :                 :                    +- ReusedExchange [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=531]\n                  :                 +- *(14) Sort [sr_ticket_number#34L ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST], false, 0\n                  :                    +- AQEShuffleRead coalesced\n                  :                       +- ShuffleQueryStage 7\n                  :                          +- ReusedExchange [sr_item_sk#27, sr_ticket_number#34L], Exchange hashpartitioning(sr_ticket_number#34L, sr_item_sk#27, 200), ENSURE_REQUIREMENTS, [plan_id=554]\n                  +- *(17) Sort [upper(ca_country#125) ASC NULLS FIRST, ca_zip#124 ASC NULLS FIRST], false, 0\n                     +- AQEShuffleRead coalesced\n                        +- ShuffleQueryStage 9\n                           +- ReusedExchange [ca_state#123, ca_zip#124, ca_country#125], Exchange hashpartitioning(upper(ca_country#125), ca_zip#124, 200), ENSURE_REQUIREMENTS, [plan_id=577]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 16119024,
        "inputRowCount" : 100798
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "15" : [ 35949, 41096, 38498, 40130, 40251, 39847, 38896, 41815, 40303, 38413, 35232, 40385, 37321, 40862, 37608, 40537, 38475, 39982, 39049, 38636, 40405, 38048, 38363, 40323, 42562, 38146, 38253, 42211, 40513, 37598, 40645, 41416, 38526, 36678, 39387, 37845, 40287, 40797, 39026, 39024, 37418, 41345, 42914, 38828, 40287, 40562, 41065, 39941, 39120, 40023, 38548, 37189, 38605, 37858, 39448, 37336, 40175, 37843, 39140, 40422, 36775, 38352, 36903, 35676, 38601, 39517, 44955, 39252, 38889, 38632, 39495, 35591, 40445, 40816, 39119, 38805, 39163, 38820, 41413, 38378, 39407, 39077, 38473, 40259, 42079, 38598, 38472, 39583, 39739, 40638, 36846, 39220, 40114, 37335, 38749, 40435, 38497, 43235, 38784, 39535, 38338, 39398, 37405, 39700, 38328, 36664, 40546, 39398, 38253, 43306, 40371, 41301, 36857, 41909, 41053, 40226, 37489, 38352, 36053, 37289, 40147, 42255, 40338, 40287, 37883, 36746, 38661, 41506, 38548, 36366, 39092, 42096, 39454, 41271, 42011, 38665, 40493, 36830, 39764, 36431, 37770, 39580, 37603, 40157, 40363, 39819, 40862, 39504, 38404, 40110, 39216, 39182, 37651, 35546, 37140, 41838, 37982, 36312, 40360, 37770, 40242, 36878, 38887, 39103, 39843, 40595, 40155, 38057, 40028, 39288, 40160, 36839, 39471, 40205, 40458, 40353, 40910, 38999, 42192, 41324, 39184, 38002, 38107, 37286, 39212, 39961, 37973, 40664, 40761, 40389, 41751, 39784, 37371, 38221, 39590, 39464, 39560, 38658, 39513, 42176 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 23,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 67 ],
      "Objectives" : {
        "DurationInMs" : 1051,
        "TotalTasksDurationInMs" : 1039,
        "IOBytes" : {
          "Total" : 7492852,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 7492770,
            "SW" : 82
          }
        }
      }
    },
    "13" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -396646579,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1708504,
                "rowCount" : 9467
              },
              "compileTime" : {
                "sizeInBytes" : 24964543653761271400468992,
                "rowCount" : 120021844489236881733024
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 8 "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 8\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1310909714,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 1708504,
            "rowCount" : 9467,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [12]: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] Arguments: 8 "
          }
        },
        "links" : [ ],
        "rawPlan" : "ShuffleQueryStage 8\n+- Exchange hashpartitioning(c_birth_country#111, s_zip#71, 200), ENSURE_REQUIREMENTS, [plan_id=1315]\n   +- *(10) Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n      +- *(10) SortMergeJoin [ss_ticket_number#11L, ss_item_sk#4], [sr_ticket_number#34L, sr_item_sk#27], Inner\n         :- *(8) Sort [ss_ticket_number#11L ASC NULLS FIRST, ss_item_sk#4 ASC NULLS FIRST], false, 0\n         :  +- AQEShuffleRead coalesced\n         :     +- ShuffleQueryStage 7\n         :        +- Exchange hashpartitioning(ss_ticket_number#11L, ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=1081]\n         :           +- *(7) Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n         :              +- *(7) BroadcastHashJoin [ss_store_sk#9], [s_store_sk#46], Inner, BuildRight, false\n         :                 :- *(7) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n         :                 :  +- *(7) BroadcastHashJoin [ss_item_sk#4], [i_item_sk#75], Inner, BuildRight, false\n         :                 :     :- *(7) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n         :                 :     :  +- *(7) BroadcastHashJoin [ss_customer_sk#5], [c_customer_sk#97], Inner, BuildLeft, false\n         :                 :     :     :- BroadcastQueryStage 6\n         :                 :     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [plan_id=915]\n         :                 :     :     :     +- AQEShuffleRead local\n         :                 :     :     :        +- ShuffleQueryStage 0\n         :                 :     :     :           +- Exchange hashpartitioning(ss_customer_sk#5, 200), ENSURE_REQUIREMENTS, [plan_id=474]\n         :                 :     :     :              +- *(1) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n         :                 :     :     :                 +- *(1) Filter (((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(Subquery subquery#174, [id=#277], xxhash64(ss_item_sk#4, 42))) AND might_contain(Subquery subquery#177, [id=#290], xxhash64(ss_store_sk#9, 42)))\n         :                 :     :     :                    :  :- Subquery subquery#174, [id=#277]\n         :                 :     :     :                    :  :  +- AdaptiveSparkPlan isFinalPlan=true\n                                                                     +- == Final Plan ==\n                                                                        ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[bloomFilter#173])\n                                                                        +- ShuffleQueryStage 0\n                                                                           +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=620]\n                                                                              +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[buf#194])\n                                                                                 +- *(1) Project [i_item_sk#75]\n                                                                                    +- *(1) Filter ((isnotnull(i_color#92) AND (i_color#92 = chiffon)) AND isnotnull(i_item_sk#75))\n                                                                                       +- *(1) ColumnarToRow\n                                                                                          +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_color#92] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = chiffon), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,chiffon), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_color:string>\n                                                                     +- == Initial Plan ==\n                                                                        ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[bloomFilter#173])\n                                                                        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=275]\n                                                                           +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[buf#194])\n                                                                              +- Project [i_item_sk#75]\n                                                                                 +- Filter ((isnotnull(i_color#92) AND (i_color#92 = chiffon)) AND isnotnull(i_item_sk#75))\n                                                                                    +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_color#92] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = chiffon), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,chiffon), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_color:string>\n         :                 :     :     :                    :  +- Subquery subquery#177, [id=#290]\n         :                 :     :     :                    :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                                     +- == Final Plan ==\n                                                                        ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[bloomFilter#176])\n                                                                        +- ShuffleQueryStage 0\n                                                                           +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=621]\n                                                                              +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[buf#193])\n                                                                                 +- *(1) Project [s_store_sk#46]\n                                                                                    +- *(1) Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n                                                                                       +- *(1) ColumnarToRow\n                                                                                          +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_market_id#56,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string>\n                                                                     +- == Initial Plan ==\n                                                                        ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[bloomFilter#176])\n                                                                        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=288]\n                                                                           +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[buf#193])\n                                                                              +- Project [s_store_sk#46]\n                                                                                 +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n                                                                                    +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_market_id#56,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string>\n         :                 :     :     :                    +- *(1) ColumnarToRow\n         :                 :     :     :                       +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_sales_price#15,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_ticket_number#11L), isnotnull(ss_item_sk#4), isnotnull(ss_store_sk#9), isnotnull(ss..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_sales_price:d...\n         :                 :     :     +- AQEShuffleRead local\n         :                 :     :        +- ShuffleQueryStage 1\n         :                 :     :           +- Exchange hashpartitioning(c_customer_sk#97, 200), ENSURE_REQUIREMENTS, [plan_id=493]\n         :                 :     :              +- *(2) Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n         :                 :     :                 +- *(2) ColumnarToRow\n         :                 :     :                    +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#97,c_first_name#105,c_last_name#106,c_birth_country#111] Batched: true, DataFilters: [isnotnull(c_customer_sk#97), isnotnull(c_birth_country#111)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_birth_country)], ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>\n         :                 :     +- BroadcastQueryStage 2\n         :                 :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=512]\n         :                 :           +- *(3) Filter ((isnotnull(i_color#92) AND (i_color#92 = chiffon)) AND isnotnull(i_item_sk#75))\n         :                 :              +- *(3) ColumnarToRow\n         :                 :                 +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_current_price#80,i_size#90,i_color#92,i_units#93,i_manager_id#95] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = chiffon), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,chiffon), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_m...\n         :                 +- BroadcastQueryStage 3\n         :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=531]\n         :                       +- *(4) Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n         :                          +- *(4) Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n         :                             +- *(4) ColumnarToRow\n         :                                +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_store_name#51,s_market_id#56,s_state#70,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>\n         +- *(9) Sort [sr_ticket_number#34L ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST], false, 0\n            +- AQEShuffleRead coalesced\n               +- ShuffleQueryStage 4\n                  +- Exchange hashpartitioning(sr_ticket_number#34L, sr_item_sk#27, 200), ENSURE_REQUIREMENTS, [plan_id=554]\n                     +- *(5) Project [sr_item_sk#27, sr_ticket_number#34L]\n                        +- *(5) Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n                           +- *(5) ColumnarToRow\n                              +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#27,sr_ticket_number#34L,sr_returned_date_sk#45] Batched: true, DataFilters: [isnotnull(sr_ticket_number#34L), isnotnull(sr_item_sk#27)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_retu..., PartitionFilters: [], PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)], ReadSchema: struct<sr_item_sk:int,sr_ticket_number:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1708504,
        "inputRowCount" : 9467
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "7" : [ 4679, 6396, 8269, 5209, 4500, 7167, 6069, 5683, 4135, 5062, 5756, 5986, 4391, 4837, 4340, 6237, 6020, 6241, 6142, 8714, 5484, 3817, 5912, 5384, 5074, 4184, 5656, 6317, 6476, 6476, 5959, 5582, 5918, 5206, 6323, 9602, 4443, 6056, 6882, 4929, 4684, 4893, 5957, 5576, 4857, 5428, 4790, 7390, 7896, 7277, 5939, 6357, 5889, 4957, 4999, 6191, 3564, 7111, 5608, 5972, 7059, 5975, 5823, 5595, 5962, 5226, 5648, 4553, 6704, 4749, 6988, 5510, 3833, 5560, 4662, 6739, 4670, 5357, 6662, 5095, 5045, 6855, 5734, 8235, 6638, 6943, 4498, 4415, 5775, 4991, 7511, 5166, 6438, 4390, 6052, 5073, 5871, 7471, 9347, 7498, 8551, 6167, 5536, 4818, 5938, 6004, 6493, 6423, 5161, 5612, 6614, 3992, 5601, 6664, 5855, 3844, 6154, 5247, 6085, 7790, 5782, 4385, 5085, 5637, 4132, 4807, 4817, 7624, 5733, 6101, 6599, 6018, 5915, 6544, 5501, 4825, 5125, 5938, 5462, 4305, 6144, 3863, 5358, 7657, 6970, 5471, 7681, 6313, 6827, 3983, 6987, 5418, 5488, 5065, 4436, 6768, 6677, 5497, 7927, 6478, 5733, 7175, 7642, 5760, 7332, 7185, 6225, 4571, 6158, 6292, 6081, 5944, 3918, 5379, 5048, 3815, 7524, 4166, 4754, 7148, 3883, 5167, 7309, 4368, 5762, 4805, 6583, 6269, 5445, 6907, 5490, 9187, 3637, 3872, 4993, 4358, 4729, 4886, 5979, 5197 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 13,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 26 ],
      "Objectives" : {
        "DurationInMs" : 66,
        "TotalTasksDurationInMs" : 60,
        "IOBytes" : {
          "Total" : 1106251,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1106251,
            "SW" : 0
          }
        }
      }
    },
    "24" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -800836232,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 759207352512,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 759207352512,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8)))) "
          }
        },
        "links" : [ ],
        "rawPlan" : "Filter (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(scalar-subquery#158 [] as decimal(33,8))))\n:  +- Aggregate [(0.05 * avg(netpaid#159)) AS (0.05 * avg(netpaid))#163]\n:     +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n:        +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n:           +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n:              :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n:              :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:              :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n:              :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n:              :     :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n:              :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n:              :     :     :     :     :  +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42)))\n:              :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n:              :     :     :     :     :     :     +- Project [s_store_sk#46]\n:              :     :     :     :     :     :        +- Project [s_store_sk#46]\n:              :     :     :     :     :     :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :     :     :     :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n:              :     :     :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n:              :     :     :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n:              :     :     :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n:              :     :     :     +- Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:              :     :     :        +- Filter isnotnull(i_item_sk#75)\n:              :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n:              :     :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n:              :     :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:              :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n:              :     +- Project [sr_item_sk#27, sr_ticket_number#34L]\n:              :        +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n:              :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n:              +- Project [ca_state#123, ca_zip#124, ca_country#125]\n:                 +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n:                    +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n+- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51], [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159) AS paid#157]\n   +- Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n      +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n         +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n            :- LogicalQueryStage Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 8\n            +- LogicalQueryStage Project [ca_state#123, ca_zip#124, ca_country#125], ShuffleQueryStage 5\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 380356157,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 759207352512,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [c_last_name#106, c_first_name#105, s_store_name#51, paid#157] Condition : (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(Subquery subquery#158, [id=#264] as decimal(33,8)))) "
          },
          "1" : {
            "sign" : -913125617,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 3512,
            "rowCount" : 40,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [5]: [c_last_name#106, c_first_name#105, s_store_name#51, sum#185, isEmpty#186] Keys [3]: [c_last_name#106, c_first_name#105, s_store_name#51] Functions [1]: [sum(netpaid#159)] Aggregate Attributes [1]: [sum(netpaid#159)#161] Results [4]: [c_last_name#106, c_first_name#105, s_store_name#51, sum(netpaid#159)#161 AS paid#157] "
          },
          "2" : {
            "sign" : -1982591635,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 759207352512,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [5]: [c_last_name#106, c_first_name#105, s_store_name#51, sum#185, isEmpty#186] Arguments: 11 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "ShuffleQueryStage",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(paid#157) AND (cast(paid#157 as decimal(33,8)) > cast(Subquery subquery#158, [id=#264] as decimal(33,8))))\n:  +- Subquery subquery#158, [id=#264]\n:     +- AdaptiveSparkPlan isFinalPlan=false\n:        +- HashAggregate(keys=[], functions=[avg(netpaid#159)], output=[(0.05 * avg(netpaid))#163])\n:           +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=262]\n:              +- HashAggregate(keys=[], functions=[partial_avg(netpaid#159)], output=[sum#189, count#190L])\n:                 +- HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], functions=[sum(UnscaledValue(ss_sales_price#15))], output=[netpaid#159])\n:                    +- Exchange hashpartitioning(c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90, 200), ENSURE_REQUIREMENTS, [plan_id=258]\n:                       +- HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], functions=[partial_sum(UnscaledValue(ss_sales_price#15))], output=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90, sum#192L])\n:                          +- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n:                             +- SortMergeJoin [c_birth_country#111, s_zip#71], [upper(ca_country#125), ca_zip#124], Inner\n:                                :- Sort [c_birth_country#111 ASC NULLS FIRST, s_zip#71 ASC NULLS FIRST], false, 0\n:                                :  +- Exchange hashpartitioning(c_birth_country#111, s_zip#71, 200), ENSURE_REQUIREMENTS, [plan_id=250]\n:                                :     +- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:                                :        +- SortMergeJoin [ss_ticket_number#11L, ss_item_sk#4], [sr_ticket_number#34L, sr_item_sk#27], Inner\n:                                :           :- Sort [ss_ticket_number#11L ASC NULLS FIRST, ss_item_sk#4 ASC NULLS FIRST], false, 0\n:                                :           :  +- Exchange hashpartitioning(ss_ticket_number#11L, ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=243]\n:                                :           :     +- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n:                                :           :        +- BroadcastHashJoin [ss_store_sk#9], [s_store_sk#46], Inner, BuildRight, false\n:                                :           :           :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n:                                :           :           :  +- SortMergeJoin [ss_item_sk#4], [i_item_sk#75], Inner\n:                                :           :           :     :- Sort [ss_item_sk#4 ASC NULLS FIRST], false, 0\n:                                :           :           :     :  +- Exchange hashpartitioning(ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=230]\n:                                :           :           :     :     +- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n:                                :           :           :     :        +- SortMergeJoin [ss_customer_sk#5], [c_customer_sk#97], Inner\n:                                :           :           :     :           :- Sort [ss_customer_sk#5 ASC NULLS FIRST], false, 0\n:                                :           :           :     :           :  +- Exchange hashpartitioning(ss_customer_sk#5, 200), ENSURE_REQUIREMENTS, [plan_id=222]\n:                                :           :           :     :           :     +- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n:                                :           :           :     :           :        +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(Subquery subquery#171, [id=#189], xxhash64(ss_store_sk#9, 42)))\n:                                :           :           :     :           :           :  +- Subquery subquery#171, [id=#189]\n:                                :           :           :     :           :           :     +- AdaptiveSparkPlan isFinalPlan=false\n:                                :           :           :     :           :           :        +- ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[bloomFilter#176])\n:                                :           :           :     :           :           :           +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=187]\n:                                :           :           :     :           :           :              +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[buf#193])\n:                                :           :           :     :           :           :                 +- Project [s_store_sk#46]\n:                                :           :           :     :           :           :                    +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:                                :           :           :     :           :           :                       +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_market_id#56,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string>\n:                                :           :           :     :           :           +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_sales_price#15,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_ticket_number#11L), isnotnull(ss_item_sk#4), isnotnull(ss_store_sk#9), isnotnull(ss..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_sales_price:d...\n:                                :           :           :     :           +- Sort [c_customer_sk#97 ASC NULLS FIRST], false, 0\n:                                :           :           :     :              +- Exchange hashpartitioning(c_customer_sk#97, 200), ENSURE_REQUIREMENTS, [plan_id=223]\n:                                :           :           :     :                 +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n:                                :           :           :     :                    +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#97,c_first_name#105,c_last_name#106,c_birth_country#111] Batched: true, DataFilters: [isnotnull(c_customer_sk#97), isnotnull(c_birth_country#111)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_birth_country)], ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>\n:                                :           :           :     +- Sort [i_item_sk#75 ASC NULLS FIRST], false, 0\n:                                :           :           :        +- Exchange hashpartitioning(i_item_sk#75, 200), ENSURE_REQUIREMENTS, [plan_id=231]\n:                                :           :           :           +- Filter isnotnull(i_item_sk#75)\n:                                :           :           :              +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_current_price#80,i_size#90,i_color#92,i_units#93,i_manager_id#95] Batched: true, DataFilters: [isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_m...\n:                                :           :           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=237]\n:                                :           :              +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n:                                :           :                 +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n:                                :           :                    +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_store_name#51,s_market_id#56,s_state#70,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>\n:                                :           +- Sort [sr_ticket_number#34L ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST], false, 0\n:                                :              +- Exchange hashpartitioning(sr_ticket_number#34L, sr_item_sk#27, 200), ENSURE_REQUIREMENTS, [plan_id=242]\n:                                :                 +- Project [sr_item_sk#27, sr_ticket_number#34L]\n:                                :                    +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n:                                :                       +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#27,sr_ticket_number#34L,sr_returned_date_sk#45] Batched: true, DataFilters: [isnotnull(sr_ticket_number#34L), isnotnull(sr_item_sk#27)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_retu..., PartitionFilters: [], PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)], ReadSchema: struct<sr_item_sk:int,sr_ticket_number:bigint>\n:                                +- Sort [upper(ca_country#125) ASC NULLS FIRST, ca_zip#124 ASC NULLS FIRST], false, 0\n:                                   +- Exchange hashpartitioning(upper(ca_country#125), ca_zip#124, 200), ENSURE_REQUIREMENTS, [plan_id=251]\n:                                      +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n:                                         +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_state#123,ca_zip#124,ca_country#125] Batched: true, DataFilters: [isnotnull(ca_country#125), isnotnull(ca_zip#124)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_country), IsNotNull(ca_zip)], ReadSchema: struct<ca_state:string,ca_zip:string,ca_country:string>\n+- HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51], functions=[sum(netpaid#159)], output=[c_last_name#106, c_first_name#105, s_store_name#51, paid#157])\n   +- ShuffleQueryStage 11\n      +- Exchange hashpartitioning(c_last_name#106, c_first_name#105, s_store_name#51, 200), ENSURE_REQUIREMENTS, [plan_id=1516]\n         +- *(12) HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51], functions=[partial_sum(netpaid#159)], output=[c_last_name#106, c_first_name#105, s_store_name#51, sum#185, isEmpty#186])\n            +- *(12) HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], functions=[sum(UnscaledValue(ss_sales_price#15))], output=[c_last_name#106, c_first_name#105, s_store_name#51, netpaid#159])\n               +- AQEShuffleRead coalesced\n                  +- ShuffleQueryStage 10\n                     +- Exchange hashpartitioning(c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90, 200), ENSURE_REQUIREMENTS, [plan_id=1470]\n                        +- *(11) HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], functions=[partial_sum(UnscaledValue(ss_sales_price#15))], output=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90, sum#188L])\n                           +- *(11) Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n                              +- *(11) BroadcastHashJoin [c_birth_country#111, s_zip#71], [upper(ca_country#125), ca_zip#124], Inner, BuildLeft, false\n                                 :- BroadcastQueryStage 9\n                                 :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[3, string, true], input[11, string, true]),false), [plan_id=1398]\n                                 :     +- AQEShuffleRead local\n                                 :        +- ShuffleQueryStage 8\n                                 :           +- Exchange hashpartitioning(c_birth_country#111, s_zip#71, 200), ENSURE_REQUIREMENTS, [plan_id=1315]\n                                 :              +- *(10) Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n                                 :                 +- *(10) SortMergeJoin [ss_ticket_number#11L, ss_item_sk#4], [sr_ticket_number#34L, sr_item_sk#27], Inner\n                                 :                    :- *(8) Sort [ss_ticket_number#11L ASC NULLS FIRST, ss_item_sk#4 ASC NULLS FIRST], false, 0\n                                 :                    :  +- AQEShuffleRead coalesced\n                                 :                    :     +- ShuffleQueryStage 7\n                                 :                    :        +- Exchange hashpartitioning(ss_ticket_number#11L, ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=1081]\n                                 :                    :           +- *(7) Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n                                 :                    :              +- *(7) BroadcastHashJoin [ss_store_sk#9], [s_store_sk#46], Inner, BuildRight, false\n                                 :                    :                 :- *(7) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n                                 :                    :                 :  +- *(7) BroadcastHashJoin [ss_item_sk#4], [i_item_sk#75], Inner, BuildRight, false\n                                 :                    :                 :     :- *(7) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n                                 :                    :                 :     :  +- *(7) BroadcastHashJoin [ss_customer_sk#5], [c_customer_sk#97], Inner, BuildLeft, false\n                                 :                    :                 :     :     :- BroadcastQueryStage 6\n                                 :                    :                 :     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [plan_id=915]\n                                 :                    :                 :     :     :     +- AQEShuffleRead local\n                                 :                    :                 :     :     :        +- ShuffleQueryStage 0\n                                 :                    :                 :     :     :           +- Exchange hashpartitioning(ss_customer_sk#5, 200), ENSURE_REQUIREMENTS, [plan_id=474]\n                                 :                    :                 :     :     :              +- *(1) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n                                 :                    :                 :     :     :                 +- *(1) Filter (((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(Subquery subquery#174, [id=#277], xxhash64(ss_item_sk#4, 42))) AND might_contain(Subquery subquery#177, [id=#290], xxhash64(ss_store_sk#9, 42)))\n                                 :                    :                 :     :     :                    :  :- Subquery subquery#174, [id=#277]\n                                 :                    :                 :     :     :                    :  :  +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                                                  +- == Final Plan ==\n                                                                                                                     ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[bloomFilter#173])\n                                                                                                                     +- ShuffleQueryStage 0\n                                                                                                                        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=620]\n                                                                                                                           +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[buf#194])\n                                                                                                                              +- *(1) Project [i_item_sk#75]\n                                                                                                                                 +- *(1) Filter ((isnotnull(i_color#92) AND (i_color#92 = chiffon)) AND isnotnull(i_item_sk#75))\n                                                                                                                                    +- *(1) ColumnarToRow\n                                                                                                                                       +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_color#92] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = chiffon), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,chiffon), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_color:string>\n                                                                                                                  +- == Initial Plan ==\n                                                                                                                     ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[bloomFilter#173])\n                                                                                                                     +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=275]\n                                                                                                                        +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[buf#194])\n                                                                                                                           +- Project [i_item_sk#75]\n                                                                                                                              +- Filter ((isnotnull(i_color#92) AND (i_color#92 = chiffon)) AND isnotnull(i_item_sk#75))\n                                                                                                                                 +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_color#92] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = chiffon), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,chiffon), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_color:string>\n                                 :                    :                 :     :     :                    :  +- Subquery subquery#177, [id=#290]\n                                 :                    :                 :     :     :                    :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                                                  +- == Final Plan ==\n                                                                                                                     ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[bloomFilter#176])\n                                                                                                                     +- ShuffleQueryStage 0\n                                                                                                                        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=621]\n                                                                                                                           +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[buf#193])\n                                                                                                                              +- *(1) Project [s_store_sk#46]\n                                                                                                                                 +- *(1) Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n                                                                                                                                    +- *(1) ColumnarToRow\n                                                                                                                                       +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_market_id#56,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string>\n                                                                                                                  +- == Initial Plan ==\n                                                                                                                     ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[bloomFilter#176])\n                                                                                                                     +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=288]\n                                                                                                                        +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[buf#193])\n                                                                                                                           +- Project [s_store_sk#46]\n                                                                                                                              +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n                                                                                                                                 +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_market_id#56,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string>\n                                 :                    :                 :     :     :                    +- *(1) ColumnarToRow\n                                 :                    :                 :     :     :                       +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_sales_price#15,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_ticket_number#11L), isnotnull(ss_item_sk#4), isnotnull(ss_store_sk#9), isnotnull(ss..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_sales_price:d...\n                                 :                    :                 :     :     +- AQEShuffleRead local\n                                 :                    :                 :     :        +- ShuffleQueryStage 1\n                                 :                    :                 :     :           +- Exchange hashpartitioning(c_customer_sk#97, 200), ENSURE_REQUIREMENTS, [plan_id=493]\n                                 :                    :                 :     :              +- *(2) Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n                                 :                    :                 :     :                 +- *(2) ColumnarToRow\n                                 :                    :                 :     :                    +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#97,c_first_name#105,c_last_name#106,c_birth_country#111] Batched: true, DataFilters: [isnotnull(c_customer_sk#97), isnotnull(c_birth_country#111)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_birth_country)], ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>\n                                 :                    :                 :     +- BroadcastQueryStage 2\n                                 :                    :                 :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=512]\n                                 :                    :                 :           +- *(3) Filter ((isnotnull(i_color#92) AND (i_color#92 = chiffon)) AND isnotnull(i_item_sk#75))\n                                 :                    :                 :              +- *(3) ColumnarToRow\n                                 :                    :                 :                 +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_current_price#80,i_size#90,i_color#92,i_units#93,i_manager_id#95] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = chiffon), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,chiffon), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_m...\n                                 :                    :                 +- BroadcastQueryStage 3\n                                 :                    :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=531]\n                                 :                    :                       +- *(4) Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n                                 :                    :                          +- *(4) Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n                                 :                    :                             +- *(4) ColumnarToRow\n                                 :                    :                                +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_store_name#51,s_market_id#56,s_state#70,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>\n                                 :                    +- *(9) Sort [sr_ticket_number#34L ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST], false, 0\n                                 :                       +- AQEShuffleRead coalesced\n                                 :                          +- ShuffleQueryStage 4\n                                 :                             +- Exchange hashpartitioning(sr_ticket_number#34L, sr_item_sk#27, 200), ENSURE_REQUIREMENTS, [plan_id=554]\n                                 :                                +- *(5) Project [sr_item_sk#27, sr_ticket_number#34L]\n                                 :                                   +- *(5) Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n                                 :                                      +- *(5) ColumnarToRow\n                                 :                                         +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#27,sr_ticket_number#34L,sr_returned_date_sk#45] Batched: true, DataFilters: [isnotnull(sr_ticket_number#34L), isnotnull(sr_item_sk#27)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_retu..., PartitionFilters: [], PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)], ReadSchema: struct<sr_item_sk:int,sr_ticket_number:bigint>\n                                 +- AQEShuffleRead local\n                                    +- ShuffleQueryStage 5\n                                       +- Exchange hashpartitioning(upper(ca_country#125), ca_zip#124, 200), ENSURE_REQUIREMENTS, [plan_id=577]\n                                          +- *(6) Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n                                             +- *(6) ColumnarToRow\n                                                +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_state#123,ca_zip#124,ca_country#125] Batched: true, DataFilters: [isnotnull(ca_country#125), isnotnull(ca_zip#124)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_country), IsNotNull(ca_zip)], ReadSchema: struct<ca_state:string,ca_zip:string,ca_country:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3512,
        "inputRowCount" : 40
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "9" : [ 0, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 171, 0, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 0, 0, 129, 0, 129, 142, 171, 0, 0, 0, 129, 0, 0, 0, 0, 0, 129, 0, 0, 0, 129, 0, 0, 0, 0, 0, 0, 0, 129, 0, 129, 0, 0, 0, 0, 0, 0, 0, 0, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 117, 171, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 0, 0, 129, 129, 171, 0, 0, 0, 0, 129, 0, 129, 0, 0, 0, 0, 129, 117, 129, 0, 0, 0, 0, 117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 189, 0, 0, 0, 0, 0, 0, 0, 0, 129, 0, 0, 0, 0, 0, 0, 0, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 129, 0, 0, 0, 0, 0, 129, 0, 0, 0, 0, 0, 0, 0 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 16,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 82 ],
      "Objectives" : {
        "DurationInMs" : 123,
        "TotalTasksDurationInMs" : 110,
        "IOBytes" : {
          "Total" : 4453,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 4453,
            "SW" : 0
          }
        }
      }
    },
    "16" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1867243163,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9456300108,
                "rowCount" : 262675003
              },
              "compileTime" : {
                "sizeInBytes" : 9456300108,
                "rowCount" : 262675003
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] "
          },
          "1" : {
            "sign" : 1011872821,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 39926600456,
                "rowCount" : 262675003
              },
              "compileTime" : {
                "sizeInBytes" : 39926600456,
                "rowCount" : 262675003
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42))) "
          },
          "2" : {
            "sign" : -628374504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 43776970976,
                "rowCount" : 288006388
              },
              "compileTime" : {
                "sizeInBytes" : 43776970976,
                "rowCount" : 288006388
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n+- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42)))\n   :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n   :     +- Project [s_store_sk#46]\n   :        +- Project [s_store_sk#46]\n   :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n   :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n   +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 584596355,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 9456300108,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] Input [6]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, ss_sold_date_sk#25] "
          },
          "1" : {
            "sign" : 1105566799,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 9456300108,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [6]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, ss_sold_date_sk#25] Condition : ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(ReusedSubquery Subquery subquery#177, [id=#290], xxhash64(ss_store_sk#9, 42))) "
          },
          "2" : {
            "sign" : 1625522527,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 9456300108,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_sales Output [6]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, ss_sold_date_sk#25] Batched: true Location: CatalogFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales] PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)] ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_sales_price:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_sales",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n+- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(ReusedSubquery Subquery subquery#177, [id=#290], xxhash64(ss_store_sk#9, 42)))\n   :  +- ReusedSubquery Subquery subquery#177, [id=#290]\n   +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_sales_price#15,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_ticket_number#11L), isnotnull(ss_item_sk#4), isnotnull(ss_store_sk#9), isnotnull(ss..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_sales_price:d...\n"
      },
      "IM" : {
        "inputSizeInBytes" : 9456300108,
        "inputRowCount" : 262675003
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 17,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 32 ],
      "Objectives" : {
        "DurationInMs" : 7317,
        "TotalTasksDurationInMs" : 102336,
        "IOBytes" : {
          "Total" : 3014065658,
          "Details" : {
            "IR" : 2355309235,
            "IW" : 0,
            "SR" : 0,
            "SW" : 658756423
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1058420140,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 224,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1685381320,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 224,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [buf#193] Keys: [] Functions [1]: [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)] Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)#175] Results [1]: [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)#175 AS bloomFilter#176] "
          },
          "1" : {
            "sign" : -1062067092,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [buf#193] Arguments: 0 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[bloomFilter#176])\n+- ShuffleQueryStage 0\n   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=621]\n      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[buf#193])\n         +- *(1) Project [s_store_sk#46]\n            +- *(1) Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n               +- *(1) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_market_id#56,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 224,
        "inputRowCount" : 1
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "0" : [ 276 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 3,
        "FinishedTasksNum" : 7,
        "FinishedTasksTotalTimeInMs" : 24856.0,
        "FinishedTasksDistributionInMs" : [ 3272.0, 3273.0, 3546.0, 3815.0, 3922.0 ]
      },
      "QueryStageOptimizationId" : 8,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 7 ],
      "Objectives" : {
        "DurationInMs" : 1736,
        "TotalTasksDurationInMs" : 1720,
        "IOBytes" : {
          "Total" : 6722,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 6722,
            "SW" : 0
          }
        }
      }
    },
    "10" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 2012214440,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4701408,
                "rowCount" : 97946
              },
              "compileTime" : {
                "sizeInBytes" : 9456300108,
                "rowCount" : 262675003
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15], ShuffleQueryStage 0 "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15], ShuffleQueryStage 0\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1863784092,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 4701408,
            "rowCount" : 97946,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [5]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] Arguments: 0 "
          }
        },
        "links" : [ ],
        "rawPlan" : "ShuffleQueryStage 0\n+- Exchange hashpartitioning(ss_customer_sk#5, 200), ENSURE_REQUIREMENTS, [plan_id=474]\n   +- *(1) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n      +- *(1) Filter (((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(Subquery subquery#174, [id=#277], xxhash64(ss_item_sk#4, 42))) AND might_contain(Subquery subquery#177, [id=#290], xxhash64(ss_store_sk#9, 42)))\n         :  :- Subquery subquery#174, [id=#277]\n         :  :  +- AdaptiveSparkPlan isFinalPlan=true\n                  +- == Final Plan ==\n                     ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[bloomFilter#173])\n                     +- ShuffleQueryStage 0\n                        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=620]\n                           +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[buf#194])\n                              +- *(1) Project [i_item_sk#75]\n                                 +- *(1) Filter ((isnotnull(i_color#92) AND (i_color#92 = chiffon)) AND isnotnull(i_item_sk#75))\n                                    +- *(1) ColumnarToRow\n                                       +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_color#92] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = chiffon), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,chiffon), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_color:string>\n                  +- == Initial Plan ==\n                     ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[bloomFilter#173])\n                     +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=275]\n                        +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[buf#194])\n                           +- Project [i_item_sk#75]\n                              +- Filter ((isnotnull(i_color#92) AND (i_color#92 = chiffon)) AND isnotnull(i_item_sk#75))\n                                 +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_color#92] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = chiffon), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,chiffon), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_color:string>\n         :  +- Subquery subquery#177, [id=#290]\n         :     +- AdaptiveSparkPlan isFinalPlan=true\n                  +- == Final Plan ==\n                     ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[bloomFilter#176])\n                     +- ShuffleQueryStage 0\n                        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=621]\n                           +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[buf#193])\n                              +- *(1) Project [s_store_sk#46]\n                                 +- *(1) Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n                                    +- *(1) ColumnarToRow\n                                       +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_market_id#56,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string>\n                  +- == Initial Plan ==\n                     ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[bloomFilter#176])\n                     +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=288]\n                        +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[buf#193])\n                           +- Project [s_store_sk#46]\n                              +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n                                 +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_market_id#56,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string>\n         +- *(1) ColumnarToRow\n            +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_sales_price#15,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_ticket_number#11L), isnotnull(ss_item_sk#4), isnotnull(ss_store_sk#9), isnotnull(ss..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_sales_price:d...\n"
      },
      "IM" : {
        "inputSizeInBytes" : 4701408,
        "inputRowCount" : 97946
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "2" : [ 24239, 24517, 24791, 24022, 26181, 25961, 24217, 26356, 25111, 23476, 24604, 26286, 25734, 25274, 23897, 25013, 23774, 26138, 25762, 23900, 25919, 25497, 24293, 24576, 25287, 24879, 24945, 26329, 26983, 25682, 24307, 24820, 26419, 25508, 24969, 23571, 24645, 25763, 24702, 27110, 24893, 26470, 24752, 25436, 24531, 25673, 23651, 23712, 25635, 24018, 24207, 24962, 25092, 25285, 26447, 24543, 24752, 23833, 24029, 26727, 26336, 24367, 24513, 25970, 24848, 26589, 26389, 26001, 25857, 23503, 25556, 25479, 25338, 25317, 26053, 27243, 26065, 24609, 26203, 24181, 23554, 26302, 24906, 23822, 23234, 24012, 25032, 28118, 25912, 26382, 24201, 26387, 26554, 25687, 26158, 26836, 25436, 26837, 27537, 23402, 24219, 25789, 23884, 24169, 25769, 25414, 24927, 25866, 26047, 26284, 24485, 25146, 26762, 24725, 24815, 25400, 24773, 25288, 25486, 24343, 25849, 23293, 25333, 26085, 23689, 23714, 25320, 25135, 24732, 24986, 24941, 23852, 26109, 27175, 25042, 25617, 25759, 25221, 24215, 25254, 25471, 25268, 25200, 25814, 25626, 25841, 26281, 26825, 24897, 25162, 27001, 24570, 25743, 25588, 27301, 24470, 24751, 26322, 25074, 23256, 24630, 25234, 24152, 25458, 24675, 25412, 25226, 26387, 25361, 24258, 27023, 25414, 23994, 25105, 24904, 23889, 24308, 25391, 25428, 25783, 24800, 25575, 23818, 24966, 26550, 26970, 26549, 24286, 24146, 23737, 25466, 25343, 25155, 25814, 25484, 24698, 23961, 24943, 24735, 25264 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 5,
        "FinishedTasksTotalTimeInMs" : 78295.0,
        "FinishedTasksDistributionInMs" : [ 11675.0, 15771.0, 16603.0, 16771.0, 17475.0 ]
      },
      "QueryStageOptimizationId" : 10,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 15 ],
      "Objectives" : {
        "DurationInMs" : 3674,
        "TotalTasksDurationInMs" : 392,
        "IOBytes" : {
          "Total" : 4829233,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 4829233,
            "SW" : 0
          }
        }
      }
    },
    "21" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -842263021,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 675059401424,
                "rowCount" : 42191212589
              },
              "compileTime" : {
                "sizeInBytes" : 675059401424,
                "rowCount" : 42191212589
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "1" : {
            "sign" : -859819627,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6792785226829,
                "rowCount" : 42191212589
              },
              "compileTime" : {
                "sizeInBytes" : 6792785226829,
                "rowCount" : 42191212589
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "2" : {
            "sign" : 474468585,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 10168082233949,
                "rowCount" : 42191212589
              },
              "compileTime" : {
                "sizeInBytes" : 10168082233949,
                "rowCount" : 42191212589
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n+- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n   +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n      :- Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n      :  +- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n      :     :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n      :     :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n      :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n      :     :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n      :     :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n      :     :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n      :     :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n      :     :     :     :     :  +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42)))\n      :     :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n      :     :     :     :     :     :     +- Project [s_store_sk#46]\n      :     :     :     :     :     :        +- Project [s_store_sk#46]\n      :     :     :     :     :     :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n      :     :     :     :     :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n      :     :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n      :     :     :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n      :     :     :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n      :     :     :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n      :     :     :     +- Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n      :     :     :        +- Filter isnotnull(i_item_sk#75)\n      :     :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n      :     :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n      :     :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n      :     :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n      :     +- Project [sr_item_sk#27, sr_ticket_number#34L]\n      :        +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n      :           +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n      +- Project [ca_state#123, ca_zip#124, ca_country#125]\n         +- Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n            +- Relation spark_catalog.tpcds_100.customer_address[ca_address_sk#115,ca_address_id#116,ca_street_number#117,ca_street_name#118,ca_street_type#119,ca_suite_number#120,ca_city#121,ca_county#122,ca_state#123,ca_zip#124,ca_country#125,ca_gmt_offset#126,ca_location_type#127] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -430573247,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 723016576,
            "rowCount" : 3996138,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [12]: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] Arguments: 12 "
          },
          "5" : {
            "sign" : -605630449,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [3]: [ca_state#123, ca_zip#124, ca_country#125] Arguments: [upper(ca_country#125) ASC NULLS FIRST, ca_zip#124 ASC NULLS FIRST], false, 0 "
          },
          "6" : {
            "sign" : -1948919473,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 60193664,
            "rowCount" : 940526,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [ca_state#123, ca_zip#124, ca_country#125] Arguments: 9 "
          },
          "1" : {
            "sign" : -1296280233,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 6792785226829,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [11]: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] Input [15]: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71, ca_state#123, ca_zip#124, ca_country#125] "
          },
          "0" : {
            "sign" : 208190955,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 675059401424,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [11]: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] Keys [10]: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90] Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#15))] Aggregate Attributes [1]: [sum#191L] Results [11]: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90, sum#192L] "
          },
          "2" : {
            "sign" : 384239489,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 10168082233949,
            "rowCount" : 42191212589,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [2]: [c_birth_country#111, s_zip#71] Right keys [2]: [upper(ca_country#125), ca_zip#124] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : -1656374078,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [12]: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] Arguments: [c_birth_country#111 ASC NULLS FIRST, s_zip#71 ASC NULLS FIRST], false, 0 "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "ShuffleQueryStage",
          "toId" : 5,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "SortMergeJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], functions=[partial_sum(UnscaledValue(ss_sales_price#15))], output=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90, sum#192L])\n+- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n   +- SortMergeJoin [c_birth_country#111, s_zip#71], [upper(ca_country#125), ca_zip#124], Inner\n      :- Sort [c_birth_country#111 ASC NULLS FIRST, s_zip#71 ASC NULLS FIRST], false, 0\n      :  +- ShuffleQueryStage 12\n      :     +- Exchange hashpartitioning(c_birth_country#111, s_zip#71, 200), ENSURE_REQUIREMENTS, [plan_id=2461]\n      :        +- *(15) Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n      :           +- *(15) SortMergeJoin [ss_ticket_number#11L, ss_item_sk#4], [sr_ticket_number#34L, sr_item_sk#27], Inner\n      :              :- *(13) Sort [ss_ticket_number#11L ASC NULLS FIRST, ss_item_sk#4 ASC NULLS FIRST], false, 0\n      :              :  +- AQEShuffleRead coalesced\n      :              :     +- ShuffleQueryStage 11\n      :              :        +- Exchange hashpartitioning(ss_ticket_number#11L, ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=2320]\n      :              :           +- *(12) Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n      :              :              +- *(12) BroadcastHashJoin [ss_store_sk#9], [s_store_sk#46], Inner, BuildRight, false\n      :              :                 :- *(12) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n      :              :                 :  +- *(12) SortMergeJoin [ss_item_sk#4], [i_item_sk#75], Inner\n      :              :                 :     :- *(10) Sort [ss_item_sk#4 ASC NULLS FIRST], false, 0\n      :              :                 :     :  +- AQEShuffleRead coalesced\n      :              :                 :     :     +- ShuffleQueryStage 10\n      :              :                 :     :        +- Exchange hashpartitioning(ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=2131]\n      :              :                 :     :           +- *(9) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n      :              :                 :     :              +- *(9) SortMergeJoin [ss_customer_sk#5], [c_customer_sk#97], Inner\n      :              :                 :     :                 :- *(7) Sort [ss_customer_sk#5 ASC NULLS FIRST], false, 0\n      :              :                 :     :                 :  +- AQEShuffleRead coalesced\n      :              :                 :     :                 :     +- ShuffleQueryStage 0\n      :              :                 :     :                 :        +- Exchange hashpartitioning(ss_customer_sk#5, 200), ENSURE_REQUIREMENTS, [plan_id=1693]\n      :              :                 :     :                 :           +- *(1) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n      :              :                 :     :                 :              +- *(1) Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(ReusedSubquery Subquery subquery#177, [id=#290], xxhash64(ss_store_sk#9, 42)))\n      :              :                 :     :                 :                 :  +- ReusedSubquery Subquery subquery#177, [id=#290]\n      :              :                 :     :                 :                 +- *(1) ColumnarToRow\n      :              :                 :     :                 :                    +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_sales_price#15,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_ticket_number#11L), isnotnull(ss_item_sk#4), isnotnull(ss_store_sk#9), isnotnull(ss..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_sales_price:d...\n      :              :                 :     :                 +- *(8) Sort [c_customer_sk#97 ASC NULLS FIRST], false, 0\n      :              :                 :     :                    +- AQEShuffleRead coalesced\n      :              :                 :     :                       +- ShuffleQueryStage 2\n      :              :                 :     :                          +- ReusedExchange [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111], Exchange hashpartitioning(c_customer_sk#97, 200), ENSURE_REQUIREMENTS, [plan_id=493]\n      :              :                 :     +- *(11) Sort [i_item_sk#75 ASC NULLS FIRST], false, 0\n      :              :                 :        +- AQEShuffleRead coalesced\n      :              :                 :           +- ShuffleQueryStage 3\n      :              :                 :              +- Exchange hashpartitioning(i_item_sk#75, 200), ENSURE_REQUIREMENTS, [plan_id=1735]\n      :              :                 :                 +- *(3) Filter isnotnull(i_item_sk#75)\n      :              :                 :                    +- *(3) ColumnarToRow\n      :              :                 :                       +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_current_price#80,i_size#90,i_color#92,i_units#93,i_manager_id#95] Batched: true, DataFilters: [isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_m...\n      :              :                 +- BroadcastQueryStage 5\n      :              :                    +- ReusedExchange [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=531]\n      :              +- *(14) Sort [sr_ticket_number#34L ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST], false, 0\n      :                 +- AQEShuffleRead coalesced\n      :                    +- ShuffleQueryStage 7\n      :                       +- ReusedExchange [sr_item_sk#27, sr_ticket_number#34L], Exchange hashpartitioning(sr_ticket_number#34L, sr_item_sk#27, 200), ENSURE_REQUIREMENTS, [plan_id=554]\n      +- Sort [upper(ca_country#125) ASC NULLS FIRST, ca_zip#124 ASC NULLS FIRST], false, 0\n         +- ShuffleQueryStage 9\n            +- ReusedExchange [ca_state#123, ca_zip#124, ca_country#125], Exchange hashpartitioning(upper(ca_country#125), ca_zip#124, 200), ENSURE_REQUIREMENTS, [plan_id=577]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 784057144,
        "inputRowCount" : 4950842
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "5" : [ 10353, 13780, 29539, 20176, 18341, 22193, 24413, 43249, 57565, 57565, 18341, 20176, 47574, 35743, 43249, 35743, 13780, 43249, 20176, 47574, 32493, 22193, 29539, 26854, 8556, 18341, 32493, 29539, 47574, 4390, 7778, 22193, 12527, 10353, 20176, 29539, 26854, 43249, 39317, 22193, 29539, 24413, 15158, 13780, 24413, 18341, 35743, 32493, 32493, 35743, 57565, 43249, 13780, 29539, 39317, 24413, 12527, 47574, 43249, 26854, 22193, 32493, 26854, 13780, 22193, 47574, 39317, 16674, 26854, 29539, 13780, 13780, 22193, 12527, 18341, 39317, 6428, 18341, 39317, 26854, 52331, 39317, 32493, 32493, 32493, 9412, 29539, 26854, 11388, 18341, 10353, 12527, 11388, 43249, 52331, 18341, 15158, 13780, 13780, 32493, 35743, 43249, 32493, 16674, 15158, 20176, 18341, 22193, 29539, 3628, 29539, 24413, 16674, 22193, 16674, 39317, 22193, 57565, 29539, 32493, 13780, 32493, 43249, 20176, 22193, 24413, 4830, 13780, 22193, 26854, 15158, 24413, 22193, 32493, 35743, 47574, 29539, 29539, 24413, 9412, 18341, 29539, 43249, 11388, 18341, 32493, 47574, 22193, 47574, 24413, 26854, 47574, 18341, 11388, 43249, 15158, 29539, 39317, 24413, 16674, 52331, 20176, 10353, 29539, 22193, 12527, 18341, 10353, 47574, 15158, 8556, 47574, 47574, 35743, 9412, 29539, 32493, 13780, 16674, 35743, 47574, 22193, 63321, 24413, 24413, 24413, 26854, 52331, 26854, 35743, 47574, 16674, 29539, 22193, 39317, 29539, 24413, 18341, 35743, 22193 ],
        "14" : [ 1496624, 1864989, 2515031, 1475076, 1394795, 1815402, 1939828, 1505396, 1584600, 1924318, 1863350, 1855176, 1524503, 1730570, 1676949, 2014382, 2051207, 1908255, 2178129, 2523261, 2458819, 1455671, 1591911, 1704482, 1909562, 1468149, 2062344, 1877831, 2088571, 1997406, 2022276, 1840139, 1956203, 1695724, 2006167, 2422839, 1269967, 2001713, 2344774, 1234431, 1877694, 1247841, 1770737, 1698400, 1627167, 1638860, 1667362, 2306574, 2265576, 2378588, 1497816, 2333047, 1641687, 1585230, 1758197, 2241302, 1423973, 2193039, 1557001, 2290872, 2247535, 1759446, 1919279, 2039826, 2204983, 1809187, 2152051, 1638827, 2117475, 1733145, 1930941, 1996921, 1004727, 1790796, 1434747, 2346403, 1505759, 1923985, 2421066, 2007033, 1732703, 2310572, 1805043, 2706148, 1828223, 2160767, 1509205, 1866283, 2064017, 1487454, 2188855, 1616844, 2362164, 1794384, 1983353, 1346938, 2217309, 2212207, 2600604, 2305099, 2095770, 1710045, 1291818, 1313618, 1772923, 2096654, 2049743, 2138443, 1612975, 2038672, 2426349, 1419000, 2009071, 1999045, 1840461, 1229753, 2016421, 1775639, 1608007, 2655130, 1963953, 2046578, 1457574, 1618222, 1507111, 1824934, 1583962, 2227729, 2233455, 2306150, 2200319, 1995199, 1397402, 2096685, 1628448, 1457235, 1672729, 2177043, 2018437, 1579455, 2255054, 1556165, 1433998, 2788431, 2629500, 1981360, 2151133, 2228994, 1998631, 1786031, 2138072, 1757442, 1690762, 1659907, 1657813, 2119492, 1745940, 2147671, 2979447, 2374073, 2014200, 2069206, 2549053, 1655538, 2203145, 2224130, 2318879, 1217874, 2405955, 2130207, 1820259, 1920813, 1357210, 2144473, 1785822, 1477720, 2071126, 1757865, 1739254, 2306335, 1137909, 1408227, 2273808, 1441841, 2215674, 1432594, 2175688, 1576330, 1558748, 2369045, 1802667, 2425465, 1431553, 1243364, 1821597, 1795827, 1733981, 1747993, 1447692, 1743736 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 22,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 57 ],
      "Objectives" : {
        "DurationInMs" : 6259,
        "TotalTasksDurationInMs" : 22041,
        "IOBytes" : {
          "Total" : 373390728,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 365897958,
            "SW" : 7492770
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -531618589,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9456300108,
                "rowCount" : 262675003
              },
              "compileTime" : {
                "sizeInBytes" : 9456300108,
                "rowCount" : 262675003
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] "
          },
          "1" : {
            "sign" : -215932517,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 39926600456,
                "rowCount" : 262675003
              },
              "compileTime" : {
                "sizeInBytes" : 39926600456,
                "rowCount" : 262675003
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND (might_contain(scalar-subquery#174 [], xxhash64(ss_item_sk#4, 42)) AND might_contain(scalar-subquery#177 [], xxhash64(ss_store_sk#9, 42)))) "
          },
          "2" : {
            "sign" : -628374504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 43776970976,
                "rowCount" : 288006388
              },
              "compileTime" : {
                "sizeInBytes" : 43776970976,
                "rowCount" : 288006388
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#3, ss_item_sk#4, ss_customer_sk#5, ss_cdemo_sk#6, ss_hdemo_sk#7, ss_addr_sk#8, ss_store_sk#9, ss_promo_sk#10, ss_ticket_number#11L, ss_quantity#12, ss_wholesale_cost#13, ss_list_price#14, ss_sales_price#15, ss_ext_discount_amt#16, ss_ext_sales_price#17, ss_ext_wholesale_cost#18, ss_ext_list_price#19, ss_ext_tax#20, ss_coupon_amt#21, ss_net_paid#22, ss_net_paid_inc_tax#23, ss_net_profit#24, ss_sold_date_sk#25], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n+- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND (might_contain(scalar-subquery#174 [], xxhash64(ss_item_sk#4, 42)) AND might_contain(scalar-subquery#177 [], xxhash64(ss_store_sk#9, 42))))\n   :  :- Aggregate [bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0) AS bloomFilter#173]\n   :  :  +- Project [i_item_sk#75]\n   :  :     +- Project [i_item_sk#75]\n   :  :        +- Filter ((isnotnull(i_color#92) AND (i_color#92 = chiffon)) AND isnotnull(i_item_sk#75))\n   :  :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n   :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n   :     +- Project [s_store_sk#46]\n   :        +- Project [s_store_sk#46]\n   :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n   :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n   +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -2071526322,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 9456300108,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] Input [6]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, ss_sold_date_sk#25] "
          },
          "1" : {
            "sign" : -184457824,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 9456300108,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [6]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, ss_sold_date_sk#25] Condition : (((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(Subquery subquery#174, [id=#277], xxhash64(ss_item_sk#4, 42))) AND might_contain(Subquery subquery#177, [id=#290], xxhash64(ss_store_sk#9, 42))) "
          },
          "2" : {
            "sign" : 1625522527,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 9456300108,
            "rowCount" : 262675003,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_sales Output [6]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, ss_sold_date_sk#25] Batched: true Location: CatalogFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales] PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)] ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_sales_price:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_sales",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n+- Filter (((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(Subquery subquery#174, [id=#277], xxhash64(ss_item_sk#4, 42))) AND might_contain(Subquery subquery#177, [id=#290], xxhash64(ss_store_sk#9, 42)))\n   :  :- Subquery subquery#174, [id=#277]\n   :  :  +- AdaptiveSparkPlan isFinalPlan=false\n   :  :     +- ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[bloomFilter#173])\n   :  :        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=275]\n   :  :           +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[buf#194])\n   :  :              +- Project [i_item_sk#75]\n   :  :                 +- Filter ((isnotnull(i_color#92) AND (i_color#92 = chiffon)) AND isnotnull(i_item_sk#75))\n   :  :                    +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_color#92] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = chiffon), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,chiffon), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_color:string>\n   :  +- Subquery subquery#177, [id=#290]\n   :     +- AdaptiveSparkPlan isFinalPlan=false\n   :        +- ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[bloomFilter#176])\n   :           +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=288]\n   :              +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[buf#193])\n   :                 +- Project [s_store_sk#46]\n   :                    +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n   :                       +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_market_id#56,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string>\n   +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_sales_price#15,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_ticket_number#11L), isnotnull(ss_item_sk#4), isnotnull(ss_store_sk#9), isnotnull(ss..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_sales_price:d...\n"
      },
      "IM" : {
        "inputSizeInBytes" : 9456300108,
        "inputRowCount" : 262675003
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 9 ],
      "Objectives" : {
        "DurationInMs" : 34034,
        "TotalTasksDurationInMs" : 299534,
        "IOBytes" : {
          "Total" : 2360138468,
          "Details" : {
            "IR" : 2355309235,
            "IW" : 0,
            "SR" : 0,
            "SW" : 4829233
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 352920416,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2891,
                "rowCount" : 49
              },
              "compileTime" : {
                "sizeInBytes" : 2891,
                "rowCount" : 49
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] "
          },
          "1" : {
            "sign" : -1176082101,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 23471,
                "rowCount" : 49
              },
              "compileTime" : {
                "sizeInBytes" : 23471,
                "rowCount" : 49
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71)) "
          },
          "2" : {
            "sign" : 2043403682,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#46, s_store_id#47, s_rec_start_date#48, s_rec_end_date#49, s_closed_date_sk#50, s_store_name#51, s_number_employees#52, s_floor_space#53, s_hours#54, s_manager#55, s_market_id#56, s_geography_class#57, s_market_desc#58, s_market_manager#59, s_division_id#60, s_division_name#61, s_company_id#62, s_company_name#63, s_street_number#64, s_street_name#65, s_street_type#66, s_suite_number#67, s_city#68, s_county#69, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n+- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n   +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -852594249,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 2891,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71] Input [5]: [s_store_sk#46, s_store_name#51, s_market_id#56, s_state#70, s_zip#71] "
          },
          "1" : {
            "sign" : -1657302046,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 2891,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [5]: [s_store_sk#46, s_store_name#51, s_market_id#56, s_state#70, s_zip#71] Condition : (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71)) "
          },
          "2" : {
            "sign" : 1117021561,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 2891,
            "rowCount" : 49,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store Output [5]: [s_store_sk#46, s_store_name#51, s_market_id#56, s_state#70, s_zip#71] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store] PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)] ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n+- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n   +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_store_name#51,s_market_id#56,s_state#70,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2891,
        "inputRowCount" : 49
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 0 ],
      "Objectives" : {
        "DurationInMs" : 4147,
        "TotalTasksDurationInMs" : 4043,
        "IOBytes" : {
          "Total" : 15609,
          "Details" : {
            "IR" : 15344,
            "IW" : 0,
            "SR" : 0,
            "SW" : 265
          }
        }
      }
    },
    "17" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -459341749,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 15504000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 15504000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "1" : {
            "sign" : 2095138697,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(i_item_sk#75) "
          },
          "2" : {
            "sign" : 228187507,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#75, i_item_id#76, i_rec_start_date#77, i_rec_end_date#78, i_item_desc#79, i_current_price#80, i_wholesale_cost#81, i_brand_id#82, i_brand#83, i_class_id#84, i_class#85, i_category_id#86, i_category#87, i_manufact_id#88, i_manufact#89, i_size#90, i_formulation#91, i_color#92, i_units#93, i_container#94, i_manager_id#95, i_product_name#96], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n+- Filter isnotnull(i_item_sk#75)\n   +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -952946995,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 15504000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [6]: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] Condition : isnotnull(i_item_sk#75) "
          },
          "1" : {
            "sign" : 694777251,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 15504000,
            "rowCount" : 204000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.item Output [6]: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item] PushedFilters: [IsNotNull(i_item_sk)] ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.item",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull(i_item_sk#75)\n+- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_current_price#80,i_size#90,i_color#92,i_units#93,i_manager_id#95] Batched: true, DataFilters: [isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_m...\n"
      },
      "IM" : {
        "inputSizeInBytes" : 15504000,
        "inputRowCount" : 204000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 18,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 33 ],
      "Objectives" : {
        "DurationInMs" : 6289,
        "TotalTasksDurationInMs" : 489,
        "IOBytes" : {
          "Total" : 9030677,
          "Details" : {
            "IR" : 1814748,
            "IW" : 0,
            "SR" : 0,
            "SW" : 7215929
          }
        }
      }
    },
    "14" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 442592461,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 686901890368,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 686901890368,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159] "
          },
          "1" : {
            "sign" : -1371236512,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1699178360384,
                "rowCount" : 9038182768
              },
              "compileTime" : {
                "sizeInBytes" : 1699178360384,
                "rowCount" : 9038182768
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] "
          },
          "2" : {
            "sign" : 367696420,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2422232981824,
                "rowCount" : 9038182768
              },
              "compileTime" : {
                "sizeInBytes" : 2422232981824,
                "rowCount" : 9038182768
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124)) "
          },
          "3" : {
            "sign" : 775636263,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 61040568,
                "rowCount" : 954704
              },
              "compileTime" : {
                "sizeInBytes" : 60193664,
                "rowCount" : 940526
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ca_state#123, ca_zip#124, ca_country#125], ShuffleQueryStage 5 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], [c_last_name#106, c_first_name#105, s_store_name#51, MakeDecimal(sum(UnscaledValue(ss_sales_price#15)),17,2) AS netpaid#159]\n+- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n   +- Join Inner, ((c_birth_country#111 = upper(ca_country#125)) AND (s_zip#71 = ca_zip#124))\n      :- LogicalQueryStage Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71], ShuffleQueryStage 8\n      +- LogicalQueryStage Project [ca_state#123, ca_zip#124, ca_country#125], ShuffleQueryStage 5\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 1541951443,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 61040568,
            "rowCount" : 954704,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [ca_state#123, ca_zip#124, ca_country#125] Arguments: 5 "
          },
          "1" : {
            "sign" : 368510789,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1699178360384,
            "rowCount" : 9038182768,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [11]: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] Input [15]: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71, ca_state#123, ca_zip#124, ca_country#125] "
          },
          "0" : {
            "sign" : 445009920,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 686901890368,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [11]: [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123] Keys [10]: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90] Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#15))] Aggregate Attributes [1]: [sum#187L] Results [11]: [c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90, sum#188L] "
          },
          "2" : {
            "sign" : 272743471,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 2422232981824,
            "rowCount" : 9038182768,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [2]: [c_birth_country#111, s_zip#71] Right keys [2]: [upper(ca_country#125), ca_zip#124] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : 1089708991,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 33816576,
            "rowCount" : 9467,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [12]: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] Arguments: 9 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90], functions=[partial_sum(UnscaledValue(ss_sales_price#15))], output=[c_last_name#106, c_first_name#105, s_store_name#51, ca_state#123, s_state#70, i_color#92, i_current_price#80, i_manager_id#95, i_units#93, i_size#90, sum#188L])\n+- Project [ss_sales_price#15, s_store_name#51, s_state#70, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, c_first_name#105, c_last_name#106, ca_state#123]\n   +- BroadcastHashJoin [c_birth_country#111, s_zip#71], [upper(ca_country#125), ca_zip#124], Inner, BuildLeft, false\n      :- BroadcastQueryStage 9\n      :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[3, string, true], input[11, string, true]),false), [plan_id=1398]\n      :     +- AQEShuffleRead local\n      :        +- ShuffleQueryStage 8\n      :           +- Exchange hashpartitioning(c_birth_country#111, s_zip#71, 200), ENSURE_REQUIREMENTS, [plan_id=1315]\n      :              +- *(10) Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n      :                 +- *(10) SortMergeJoin [ss_ticket_number#11L, ss_item_sk#4], [sr_ticket_number#34L, sr_item_sk#27], Inner\n      :                    :- *(8) Sort [ss_ticket_number#11L ASC NULLS FIRST, ss_item_sk#4 ASC NULLS FIRST], false, 0\n      :                    :  +- AQEShuffleRead coalesced\n      :                    :     +- ShuffleQueryStage 7\n      :                    :        +- Exchange hashpartitioning(ss_ticket_number#11L, ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=1081]\n      :                    :           +- *(7) Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n      :                    :              +- *(7) BroadcastHashJoin [ss_store_sk#9], [s_store_sk#46], Inner, BuildRight, false\n      :                    :                 :- *(7) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n      :                    :                 :  +- *(7) BroadcastHashJoin [ss_item_sk#4], [i_item_sk#75], Inner, BuildRight, false\n      :                    :                 :     :- *(7) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n      :                    :                 :     :  +- *(7) BroadcastHashJoin [ss_customer_sk#5], [c_customer_sk#97], Inner, BuildLeft, false\n      :                    :                 :     :     :- BroadcastQueryStage 6\n      :                    :                 :     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [plan_id=915]\n      :                    :                 :     :     :     +- AQEShuffleRead local\n      :                    :                 :     :     :        +- ShuffleQueryStage 0\n      :                    :                 :     :     :           +- Exchange hashpartitioning(ss_customer_sk#5, 200), ENSURE_REQUIREMENTS, [plan_id=474]\n      :                    :                 :     :     :              +- *(1) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n      :                    :                 :     :     :                 +- *(1) Filter (((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(Subquery subquery#174, [id=#277], xxhash64(ss_item_sk#4, 42))) AND might_contain(Subquery subquery#177, [id=#290], xxhash64(ss_store_sk#9, 42)))\n      :                    :                 :     :     :                    :  :- Subquery subquery#174, [id=#277]\n      :                    :                 :     :     :                    :  :  +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                       +- == Final Plan ==\n                                                                                          ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[bloomFilter#173])\n                                                                                          +- ShuffleQueryStage 0\n                                                                                             +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=620]\n                                                                                                +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[buf#194])\n                                                                                                   +- *(1) Project [i_item_sk#75]\n                                                                                                      +- *(1) Filter ((isnotnull(i_color#92) AND (i_color#92 = chiffon)) AND isnotnull(i_item_sk#75))\n                                                                                                         +- *(1) ColumnarToRow\n                                                                                                            +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_color#92] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = chiffon), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,chiffon), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_color:string>\n                                                                                       +- == Initial Plan ==\n                                                                                          ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[bloomFilter#173])\n                                                                                          +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=275]\n                                                                                             +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[buf#194])\n                                                                                                +- Project [i_item_sk#75]\n                                                                                                   +- Filter ((isnotnull(i_color#92) AND (i_color#92 = chiffon)) AND isnotnull(i_item_sk#75))\n                                                                                                      +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_color#92] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = chiffon), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,chiffon), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_color:string>\n      :                    :                 :     :     :                    :  +- Subquery subquery#177, [id=#290]\n      :                    :                 :     :     :                    :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                       +- == Final Plan ==\n                                                                                          ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[bloomFilter#176])\n                                                                                          +- ShuffleQueryStage 0\n                                                                                             +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=621]\n                                                                                                +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[buf#193])\n                                                                                                   +- *(1) Project [s_store_sk#46]\n                                                                                                      +- *(1) Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n                                                                                                         +- *(1) ColumnarToRow\n                                                                                                            +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_market_id#56,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string>\n                                                                                       +- == Initial Plan ==\n                                                                                          ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[bloomFilter#176])\n                                                                                          +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=288]\n                                                                                             +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0)], output=[buf#193])\n                                                                                                +- Project [s_store_sk#46]\n                                                                                                   +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n                                                                                                      +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_market_id#56,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_market_id:int,s_zip:string>\n      :                    :                 :     :     :                    +- *(1) ColumnarToRow\n      :                    :                 :     :     :                       +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_sales_price#15,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_ticket_number#11L), isnotnull(ss_item_sk#4), isnotnull(ss_store_sk#9), isnotnull(ss..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_sales_price:d...\n      :                    :                 :     :     +- AQEShuffleRead local\n      :                    :                 :     :        +- ShuffleQueryStage 1\n      :                    :                 :     :           +- Exchange hashpartitioning(c_customer_sk#97, 200), ENSURE_REQUIREMENTS, [plan_id=493]\n      :                    :                 :     :              +- *(2) Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n      :                    :                 :     :                 +- *(2) ColumnarToRow\n      :                    :                 :     :                    +- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#97,c_first_name#105,c_last_name#106,c_birth_country#111] Batched: true, DataFilters: [isnotnull(c_customer_sk#97), isnotnull(c_birth_country#111)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_birth_country)], ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>\n      :                    :                 :     +- BroadcastQueryStage 2\n      :                    :                 :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=512]\n      :                    :                 :           +- *(3) Filter ((isnotnull(i_color#92) AND (i_color#92 = chiffon)) AND isnotnull(i_item_sk#75))\n      :                    :                 :              +- *(3) ColumnarToRow\n      :                    :                 :                 +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_current_price#80,i_size#90,i_color#92,i_units#93,i_manager_id#95] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = chiffon), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,chiffon), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_m...\n      :                    :                 +- BroadcastQueryStage 3\n      :                    :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=531]\n      :                    :                       +- *(4) Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n      :                    :                          +- *(4) Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n      :                    :                             +- *(4) ColumnarToRow\n      :                    :                                +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#46,s_store_name#51,s_market_id#56,s_state#70,s_zip#71] Batched: true, DataFilters: [isnotnull(s_market_id#56), (s_market_id#56 = 7), isnotnull(s_store_sk#46), isnotnull(s_zip#71)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,7), IsNotNull(s_store_sk), IsNotNull(s_zip)], ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>\n      :                    +- *(9) Sort [sr_ticket_number#34L ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST], false, 0\n      :                       +- AQEShuffleRead coalesced\n      :                          +- ShuffleQueryStage 4\n      :                             +- Exchange hashpartitioning(sr_ticket_number#34L, sr_item_sk#27, 200), ENSURE_REQUIREMENTS, [plan_id=554]\n      :                                +- *(5) Project [sr_item_sk#27, sr_ticket_number#34L]\n      :                                   +- *(5) Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n      :                                      +- *(5) ColumnarToRow\n      :                                         +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_item_sk#27,sr_ticket_number#34L,sr_returned_date_sk#45] Batched: true, DataFilters: [isnotnull(sr_ticket_number#34L), isnotnull(sr_item_sk#27)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_retu..., PartitionFilters: [], PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)], ReadSchema: struct<sr_item_sk:int,sr_ticket_number:bigint>\n      +- ShuffleQueryStage 5\n         +- Exchange hashpartitioning(upper(ca_country#125), ca_zip#124, 200), ENSURE_REQUIREMENTS, [plan_id=577]\n            +- *(6) Filter (isnotnull(ca_country#125) AND isnotnull(ca_zip#124))\n               +- *(6) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.customer_address[ca_state#123,ca_zip#124,ca_country#125] Batched: true, DataFilters: [isnotnull(ca_country#125), isnotnull(ca_zip#124)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer_..., PartitionFilters: [], PushedFilters: [IsNotNull(ca_country), IsNotNull(ca_zip)], ReadSchema: struct<ca_state:string,ca_zip:string,ca_country:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 94857144,
        "inputRowCount" : 964171
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "5" : [ 10353, 13780, 29539, 20176, 18341, 22193, 24413, 43249, 57565, 57565, 18341, 20176, 47574, 35743, 43249, 35743, 13780, 43249, 20176, 47574, 32493, 22193, 29539, 26854, 8556, 18341, 32493, 29539, 47574, 4390, 7778, 22193, 12527, 10353, 20176, 29539, 26854, 43249, 39317, 22193, 29539, 24413, 15158, 13780, 24413, 18341, 35743, 32493, 32493, 35743, 57565, 43249, 13780, 29539, 39317, 24413, 12527, 47574, 43249, 26854, 22193, 32493, 26854, 13780, 22193, 47574, 39317, 16674, 26854, 29539, 13780, 13780, 22193, 12527, 18341, 39317, 6428, 18341, 39317, 26854, 52331, 39317, 32493, 32493, 32493, 9412, 29539, 26854, 11388, 18341, 10353, 12527, 11388, 43249, 52331, 18341, 15158, 13780, 13780, 32493, 35743, 43249, 32493, 16674, 15158, 20176, 18341, 22193, 29539, 3628, 29539, 24413, 16674, 22193, 16674, 39317, 22193, 57565, 29539, 32493, 13780, 32493, 43249, 20176, 22193, 24413, 4830, 13780, 22193, 26854, 15158, 24413, 22193, 32493, 35743, 47574, 29539, 29539, 24413, 9412, 18341, 29539, 43249, 11388, 18341, 32493, 47574, 22193, 47574, 24413, 26854, 47574, 18341, 11388, 43249, 15158, 29539, 39317, 24413, 16674, 52331, 20176, 10353, 29539, 22193, 12527, 18341, 10353, 47574, 15158, 8556, 47574, 47574, 35743, 9412, 29539, 32493, 13780, 16674, 35743, 47574, 22193, 63321, 24413, 24413, 24413, 26854, 52331, 26854, 35743, 47574, 16674, 29539, 22193, 39317, 29539, 24413, 18341, 35743, 22193 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 14,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 28 ],
      "Objectives" : {
        "DurationInMs" : 828,
        "TotalTasksDurationInMs" : 731,
        "IOBytes" : {
          "Total" : 5219014,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 5188275,
            "SW" : 30739
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 98177037,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 175788,
                "rowCount" : 2313
              },
              "compileTime" : {
                "sizeInBytes" : 175788,
                "rowCount" : 2313
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] "
          },
          "1" : {
            "sign" : -816531149,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 985338,
                "rowCount" : 2313
              },
              "compileTime" : {
                "sizeInBytes" : 985338,
                "rowCount" : 2313
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(i_color#92) AND (i_color#92 = chiffon)) AND isnotnull(i_item_sk#75)) "
          },
          "2" : {
            "sign" : 228187507,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#75, i_item_id#76, i_rec_start_date#77, i_rec_end_date#78, i_item_desc#79, i_current_price#80, i_wholesale_cost#81, i_brand_id#82, i_brand#83, i_class_id#84, i_class#85, i_category_id#86, i_category#87, i_manufact_id#88, i_manufact#89, i_size#90, i_formulation#91, i_color#92, i_units#93, i_container#94, i_manager_id#95, i_product_name#96], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n+- Filter ((isnotnull(i_color#92) AND (i_color#92 = chiffon)) AND isnotnull(i_item_sk#75))\n   +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1359986219,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 175788,
            "rowCount" : 2313,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [6]: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] Condition : ((isnotnull(i_color#92) AND (i_color#92 = chiffon)) AND isnotnull(i_item_sk#75)) "
          },
          "1" : {
            "sign" : -2065513877,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 175788,
            "rowCount" : 2313,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.item Output [6]: [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item] PushedFilters: [IsNotNull(i_color), EqualTo(i_color,chiffon), IsNotNull(i_item_sk)] ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.item",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter ((isnotnull(i_color#92) AND (i_color#92 = chiffon)) AND isnotnull(i_item_sk#75))\n+- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_current_price#80,i_size#90,i_color#92,i_units#93,i_manager_id#95] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = chiffon), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,chiffon), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_m...\n"
      },
      "IM" : {
        "inputSizeInBytes" : 175788,
        "inputRowCount" : 2313
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 1 ],
      "Objectives" : {
        "DurationInMs" : 5727,
        "TotalTasksDurationInMs" : 21121,
        "IOBytes" : {
          "Total" : 1055923,
          "Details" : {
            "IR" : 1049201,
            "IW" : 0,
            "SR" : 0,
            "SW" : 6722
          }
        }
      }
    },
    "20" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 210705200,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 64283634425,
                "rowCount" : 347479105
              },
              "compileTime" : {
                "sizeInBytes" : 64283634425,
                "rowCount" : 347479105
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] "
          },
          "1" : {
            "sign" : 815965107,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 72623132945,
                "rowCount" : 347479105
              },
              "compileTime" : {
                "sizeInBytes" : 72623132945,
                "rowCount" : 347479105
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27)) "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n+- Join Inner, ((ss_ticket_number#11L = sr_ticket_number#34L) AND (ss_item_sk#4 = sr_item_sk#27))\n   :- Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n   :  +- Join Inner, (ss_store_sk#9 = s_store_sk#46)\n   :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n   :     :  +- Join Inner, (ss_item_sk#4 = i_item_sk#75)\n   :     :     :- Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n   :     :     :  +- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n   :     :     :     :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n   :     :     :     :  +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42)))\n   :     :     :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n   :     :     :     :     :     +- Project [s_store_sk#46]\n   :     :     :     :     :        +- Project [s_store_sk#46]\n   :     :     :     :     :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n   :     :     :     :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n   :     :     :     :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n   :     :     :     +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n   :     :     :        +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n   :     :     :           +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n   :     :     +- Project [i_item_sk#75, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n   :     :        +- Filter isnotnull(i_item_sk#75)\n   :     :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n   :     +- Project [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71]\n   :        +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n   :           +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n   +- Project [sr_item_sk#27, sr_ticket_number#34L]\n      +- Filter (isnotnull(sr_ticket_number#34L) AND isnotnull(sr_item_sk#27))\n         +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#26,sr_item_sk#27,sr_customer_sk#28,sr_cdemo_sk#29,sr_hdemo_sk#30,sr_addr_sk#31,sr_store_sk#32,sr_reason_sk#33,sr_ticket_number#34L,sr_return_quantity#35,sr_return_amt#36,sr_return_tax#37,sr_return_amt_inc_tax#38,sr_fee#39,sr_return_ship_cost#40,sr_refunded_cash#41,sr_reversed_charge#42,sr_store_credit#43,sr_net_loss#44,sr_returned_date_sk#45] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 1446038281,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [sr_item_sk#27, sr_ticket_number#34L] Arguments: [sr_ticket_number#34L ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST], false, 0 "
          },
          "5" : {
            "sign" : -640264682,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 576032220,
            "rowCount" : 28801611,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [sr_item_sk#27, sr_ticket_number#34L] Arguments: 7 "
          },
          "1" : {
            "sign" : 1245073563,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 72623132945,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [2]: [ss_ticket_number#11L, ss_item_sk#4] Right keys [2]: [sr_ticket_number#34L, sr_item_sk#27] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : -162227204,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 64283634425,
            "rowCount" : 347479105,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [12]: [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] Input [16]: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71, sr_item_sk#27, sr_ticket_number#34L] "
          },
          "2" : {
            "sign" : -637347857,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [14]: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] Arguments: [ss_ticket_number#11L ASC NULLS FIRST, ss_item_sk#4 ASC NULLS FIRST], false, 0 "
          },
          "3" : {
            "sign" : -38212972,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 7870557840,
            "rowCount" : 39966388,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [14]: [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71] Arguments: 11 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "SortMergeJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n+- SortMergeJoin [ss_ticket_number#11L, ss_item_sk#4], [sr_ticket_number#34L, sr_item_sk#27], Inner\n   :- Sort [ss_ticket_number#11L ASC NULLS FIRST, ss_item_sk#4 ASC NULLS FIRST], false, 0\n   :  +- ShuffleQueryStage 11\n   :     +- Exchange hashpartitioning(ss_ticket_number#11L, ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=2320]\n   :        +- *(12) Project [ss_item_sk#4, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95, s_store_name#51, s_state#70, s_zip#71]\n   :           +- *(12) BroadcastHashJoin [ss_store_sk#9], [s_store_sk#46], Inner, BuildRight, false\n   :              :- *(12) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111, i_current_price#80, i_size#90, i_color#92, i_units#93, i_manager_id#95]\n   :              :  +- *(12) SortMergeJoin [ss_item_sk#4], [i_item_sk#75], Inner\n   :              :     :- *(10) Sort [ss_item_sk#4 ASC NULLS FIRST], false, 0\n   :              :     :  +- AQEShuffleRead coalesced\n   :              :     :     +- ShuffleQueryStage 10\n   :              :     :        +- Exchange hashpartitioning(ss_item_sk#4, 200), ENSURE_REQUIREMENTS, [plan_id=2131]\n   :              :     :           +- *(9) Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n   :              :     :              +- *(9) SortMergeJoin [ss_customer_sk#5], [c_customer_sk#97], Inner\n   :              :     :                 :- *(7) Sort [ss_customer_sk#5 ASC NULLS FIRST], false, 0\n   :              :     :                 :  +- AQEShuffleRead coalesced\n   :              :     :                 :     +- ShuffleQueryStage 0\n   :              :     :                 :        +- Exchange hashpartitioning(ss_customer_sk#5, 200), ENSURE_REQUIREMENTS, [plan_id=1693]\n   :              :     :                 :           +- *(1) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n   :              :     :                 :              +- *(1) Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(ReusedSubquery Subquery subquery#177, [id=#290], xxhash64(ss_store_sk#9, 42)))\n   :              :     :                 :                 :  +- ReusedSubquery Subquery subquery#177, [id=#290]\n   :              :     :                 :                 +- *(1) ColumnarToRow\n   :              :     :                 :                    +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_sales_price#15,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_ticket_number#11L), isnotnull(ss_item_sk#4), isnotnull(ss_store_sk#9), isnotnull(ss..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_sales_price:d...\n   :              :     :                 +- *(8) Sort [c_customer_sk#97 ASC NULLS FIRST], false, 0\n   :              :     :                    +- AQEShuffleRead coalesced\n   :              :     :                       +- ShuffleQueryStage 2\n   :              :     :                          +- ReusedExchange [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111], Exchange hashpartitioning(c_customer_sk#97, 200), ENSURE_REQUIREMENTS, [plan_id=493]\n   :              :     +- *(11) Sort [i_item_sk#75 ASC NULLS FIRST], false, 0\n   :              :        +- AQEShuffleRead coalesced\n   :              :           +- ShuffleQueryStage 3\n   :              :              +- Exchange hashpartitioning(i_item_sk#75, 200), ENSURE_REQUIREMENTS, [plan_id=1735]\n   :              :                 +- *(3) Filter isnotnull(i_item_sk#75)\n   :              :                    +- *(3) ColumnarToRow\n   :              :                       +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_current_price#80,i_size#90,i_color#92,i_units#93,i_manager_id#95] Batched: true, DataFilters: [isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_m...\n   :              +- BroadcastQueryStage 5\n   :                 +- ReusedExchange [s_store_sk#46, s_store_name#51, s_state#70, s_zip#71], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=531]\n   +- Sort [sr_ticket_number#34L ASC NULLS FIRST, sr_item_sk#27 ASC NULLS FIRST], false, 0\n      +- ShuffleQueryStage 7\n         +- ReusedExchange [sr_item_sk#27, sr_ticket_number#34L], Exchange hashpartitioning(sr_ticket_number#34L, sr_item_sk#27, 200), ENSURE_REQUIREMENTS, [plan_id=554]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 8561796504,
        "inputRowCount" : 68767999
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "4" : [ 1849964, 1850299, 1850358, 1828178, 1831060, 1824389, 1830718, 1842096, 1821121, 1834564, 1826760, 1837485, 1834037, 1863690, 1834545, 1831490, 1833619, 1845225, 1852827, 1832435, 1833492, 1844280, 1834139, 1845389, 1823976, 1828654, 1838733, 1833991, 1836305, 1844661, 1833924, 1845608, 1829244, 1840258, 1840080, 1833519, 1831033, 1825910, 1828701, 1833146, 1825723, 1829867, 1850291, 1836296, 1834189, 1832532, 1836096, 1828702, 1822331, 1836086, 1836603, 1846376, 1841103, 1842299, 1838503, 1837943, 1827601, 1836511, 1842266, 1833890, 1833656, 1837981, 1830944, 1847736, 1846568, 1838698, 1826914, 1834211, 1840349, 1831696, 1842126, 1832055, 1846371, 1832261, 1824675, 1831276, 1847990, 1829238, 1826547, 1834235, 1848247, 1842449, 1826302, 1850820, 1829120, 1832394, 1838881, 1824017, 1841697, 1828751, 1837932, 1841286, 1819490, 1834471, 1834123, 1840507, 1833671, 1846962, 1830238, 1847174, 1847382, 1831330, 1834565, 1823998, 1822885, 1827910, 1837354, 1846442, 1837273, 1840872, 1832856, 1824718, 1846350, 1849427, 1835742, 1837108, 1834981, 1826638, 1824546, 1851557, 1849691, 1827136, 1832401, 1853163, 1827561, 1817816, 1839470, 1835444, 1826730, 1843801, 1840640, 1831522, 1836781, 1841159, 1838616, 1831369, 1834276, 1830520, 1840323, 1846935, 1849354, 1846896, 1828782, 1834591, 1834808, 1836994, 1832831, 1835276, 1833918, 1843148, 1838411, 1832496, 1821068, 1840055, 1826489, 1825662, 1838319, 1841064, 1835652, 1842056, 1853796, 1824006, 1835888, 1847150, 1831745, 1844599, 1827961, 1842865, 1830256, 1846443, 1838984, 1834224, 1829329, 1846810, 1829207, 1838887, 1829365, 1834906, 1840150, 1836248, 1846923, 1828523, 1846992, 1830402, 1846910, 1827421, 1834102, 1833531, 1839872, 1840015, 1845898, 1837808, 1843181, 1829087, 1839423, 1836629, 1832089, 1834549, 1827101, 1845794 ],
        "13" : [ 20687303, 20687303, 20630603, 20687303, 20630603, 20687303, 20687303, 20517203, 20517203, 20687303, 20573903, 20630603, 20573903, 20630603, 20687303, 20630603, 20724130, 20630603, 20630603, 20630603, 20687303, 20630603, 20554030, 20610730, 20744003, 20517203, 20630603, 20667430, 20687303, 20744003, 20573903, 20460503, 20744003, 20610730, 20687303, 20687303, 20630603, 20687303, 20630603, 20630603, 20630603, 20687303, 20630603, 20687303, 20744003, 20687303, 20687303, 20744003, 20687303, 20610730, 20497330, 20687303, 20744003, 20744003, 20687303, 20573903, 20630603, 20744003, 20800703, 20780830, 20687303, 20687303, 20573903, 20573903, 20687303, 20744003, 20744003, 20630603, 20744003, 20630603, 20630603, 20687303, 20687303, 20744003, 20630603, 20573903, 20630603, 20573903, 20744003, 20687303, 20687303, 20630603, 20744003, 20687303, 20610730, 20744003, 20610730, 20630603, 20630603, 20517203, 20687303, 20497330, 20517203, 20687303, 20630603, 20573903, 20630603, 20610730, 20744003, 20573903, 20630603, 20630603, 20687303, 20630603, 20744003, 20687303, 20630603, 20630603, 20630603, 20687303, 20667430, 20744003, 20687303, 20630603, 20744003, 20517203, 20687303, 20630603, 20744003, 20630603, 20630603, 20687303, 20744003, 20687303, 20630603, 20667430, 20744003, 20630603, 20687303, 20573903, 20800703, 20744003, 20630603, 20687303, 20687303, 20630603, 20517203, 20630603, 20744003, 20667430, 20573903, 20497330, 20630603, 20687303, 20667430, 20630603, 20630603, 20630603, 20630603, 20687303, 20440630, 20687303, 20667430, 20687303, 20687303, 20573903, 20744003, 20780830, 20667430, 20630603, 20744003, 20630603, 20573903, 20687303, 20687303, 20667430, 20687303, 20610730, 20630603, 20800703, 20630603, 20724130, 20573903, 20573903, 20744003, 20667430, 20667430, 20687303, 20630603, 20573903, 20724130, 20800703, 20573903, 20744003, 20630603, 20687303, 20744003, 20744003, 20744003, 20573903, 20724130, 20687303, 20687303, 20573903, 20744003, 20610730, 20630603, 20610730, 20610730, 20630603 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 21,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 48 ],
      "Objectives" : {
        "DurationInMs" : 6362,
        "TotalTasksDurationInMs" : 95396,
        "IOBytes" : {
          "Total" : 4589932895,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 4229223212,
            "SW" : 360709683
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 228187507,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#75, i_item_id#76, i_rec_start_date#77, i_rec_end_date#78, i_item_desc#79, i_current_price#80, i_wholesale_cost#81, i_brand_id#82, i_brand#83, i_class_id#84, i_class#85, i_category_id#86, i_category#87, i_manufact_id#88, i_manufact#89, i_size#90, i_formulation#91, i_color#92, i_units#93, i_container#94, i_manager_id#95, i_product_name#96], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : -502682117,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 27756,
                "rowCount" : 2313
              },
              "compileTime" : {
                "sizeInBytes" : 27756,
                "rowCount" : 2313
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#75] "
          },
          "0" : {
            "sign" : -1571532493,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0) AS bloomFilter#173] "
          },
          "2" : {
            "sign" : -373253587,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 27756,
                "rowCount" : 2313
              },
              "compileTime" : {
                "sizeInBytes" : 27756,
                "rowCount" : 2313
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#75] "
          },
          "3" : {
            "sign" : -816531149,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 985338,
                "rowCount" : 2313
              },
              "compileTime" : {
                "sizeInBytes" : 985338,
                "rowCount" : 2313
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(i_color#92) AND (i_color#92 = chiffon)) AND isnotnull(i_item_sk#75)) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0) AS bloomFilter#173]\n+- Project [i_item_sk#75]\n   +- Project [i_item_sk#75]\n      +- Filter ((isnotnull(i_color#92) AND (i_color#92 = chiffon)) AND isnotnull(i_item_sk#75))\n         +- Relation spark_catalog.tpcds_100.item[i_item_sk#75,i_item_id#76,i_rec_start_date#77,i_rec_end_date#78,i_item_desc#79,i_current_price#80,i_wholesale_cost#81,i_brand_id#82,i_brand#83,i_class_id#84,i_class#85,i_category_id#86,i_category#87,i_manufact_id#88,i_manufact#89,i_size#90,i_formulation#91,i_color#92,i_units#93,i_container#94,i_manager_id#95,i_product_name#96] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1795757085,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [i_item_sk#75] Keys: [] Functions [1]: [partial_bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)] Aggregate Attributes [1]: [buf#179] Results [1]: [buf#194] "
          },
          "1" : {
            "sign" : 1473290913,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 27756,
            "rowCount" : 2313,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [i_item_sk#75] Input [2]: [i_item_sk#75, i_color#92] "
          },
          "2" : {
            "sign" : -443729753,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 27756,
            "rowCount" : 2313,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [i_item_sk#75, i_color#92] Condition : ((isnotnull(i_color#92) AND (i_color#92 = chiffon)) AND isnotnull(i_item_sk#75)) "
          },
          "3" : {
            "sign" : 2042363111,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 27756,
            "rowCount" : 2313,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.item Output [2]: [i_item_sk#75, i_color#92] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item] PushedFilters: [IsNotNull(i_color), EqualTo(i_color,chiffon), IsNotNull(i_item_sk)] ReadSchema: struct<i_item_sk:int,i_color:string> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.item",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[buf#194])\n+- Project [i_item_sk#75]\n   +- Filter ((isnotnull(i_color#92) AND (i_color#92 = chiffon)) AND isnotnull(i_item_sk#75))\n      +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_color#92] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = chiffon), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,chiffon), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_color:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 27756,
        "inputRowCount" : 2313
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 5570,
        "TotalTasksDurationInMs" : 19136,
        "IOBytes" : {
          "Total" : 1815718,
          "Details" : {
            "IR" : 1815718,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "18" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1031245998,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 24753955590,
                "rowCount" : 275043951
              },
              "compileTime" : {
                "sizeInBytes" : 24753955590,
                "rowCount" : 275043951
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "1" : {
            "sign" : 102638235,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 26954307198,
                "rowCount" : 275043951
              },
              "compileTime" : {
                "sizeInBytes" : 26954307198,
                "rowCount" : 275043951
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (ss_customer_sk#5 = c_customer_sk#97) "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n+- Join Inner, (ss_customer_sk#5 = c_customer_sk#97)\n   :- Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n   :  +- Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(scalar-subquery#171 [], xxhash64(ss_store_sk#9, 42)))\n   :     :  +- Aggregate [bloom_filter_agg(xxhash64(s_store_sk#46, 42), 49, 1511, 0, 0) AS bloomFilter#176]\n   :     :     +- Project [s_store_sk#46]\n   :     :        +- Project [s_store_sk#46]\n   :     :           +- Filter (((isnotnull(s_market_id#56) AND (s_market_id#56 = 7)) AND isnotnull(s_store_sk#46)) AND isnotnull(s_zip#71))\n   :     :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#46,s_store_id#47,s_rec_start_date#48,s_rec_end_date#49,s_closed_date_sk#50,s_store_name#51,s_number_employees#52,s_floor_space#53,s_hours#54,s_manager#55,s_market_id#56,s_geography_class#57,s_market_desc#58,s_market_manager#59,s_division_id#60,s_division_name#61,s_company_id#62,s_company_name#63,s_street_number#64,s_street_name#65,s_street_type#66,s_suite_number#67,s_city#68,s_county#69,... 5 more fields] parquet\n   :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#3,ss_item_sk#4,ss_customer_sk#5,ss_cdemo_sk#6,ss_hdemo_sk#7,ss_addr_sk#8,ss_store_sk#9,ss_promo_sk#10,ss_ticket_number#11L,ss_quantity#12,ss_wholesale_cost#13,ss_list_price#14,ss_sales_price#15,ss_ext_discount_amt#16,ss_ext_sales_price#17,ss_ext_wholesale_cost#18,ss_ext_list_price#19,ss_ext_tax#20,ss_coupon_amt#21,ss_net_paid#22,ss_net_paid_inc_tax#23,ss_net_profit#24,ss_sold_date_sk#25] parquet\n   +- Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n      +- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n         +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 1377296582,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [4]: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] Arguments: [c_customer_sk#97 ASC NULLS FIRST], false, 0 "
          },
          "5" : {
            "sign" : 1518114752,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 135108960,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] Arguments: 2 "
          },
          "1" : {
            "sign" : -1548030349,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 26954307198,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [ss_customer_sk#5] Right keys [1]: [c_customer_sk#97] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 937764548,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 24753955590,
            "rowCount" : 275043951,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [7]: [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111] Input [9]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "2" : {
            "sign" : 559878226,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [5]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] Arguments: [ss_customer_sk#5 ASC NULLS FIRST], false, 0 "
          },
          "3" : {
            "sign" : -1605069074,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 1987810560,
            "rowCount" : 41412720,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [5]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15] Arguments: 0 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "SortMergeJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ss_item_sk#4, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15, c_first_name#105, c_last_name#106, c_birth_country#111]\n+- SortMergeJoin [ss_customer_sk#5], [c_customer_sk#97], Inner\n   :- Sort [ss_customer_sk#5 ASC NULLS FIRST], false, 0\n   :  +- ShuffleQueryStage 0\n   :     +- Exchange hashpartitioning(ss_customer_sk#5, 200), ENSURE_REQUIREMENTS, [plan_id=1693]\n   :        +- *(1) Project [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#9, ss_ticket_number#11L, ss_sales_price#15]\n   :           +- *(1) Filter ((((isnotnull(ss_ticket_number#11L) AND isnotnull(ss_item_sk#4)) AND isnotnull(ss_store_sk#9)) AND isnotnull(ss_customer_sk#5)) AND might_contain(ReusedSubquery Subquery subquery#177, [id=#290], xxhash64(ss_store_sk#9, 42)))\n   :              :  +- ReusedSubquery Subquery subquery#177, [id=#290]\n   :              +- *(1) ColumnarToRow\n   :                 +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_item_sk#4,ss_customer_sk#5,ss_store_sk#9,ss_ticket_number#11L,ss_sales_price#15,ss_sold_date_sk#25] Batched: true, DataFilters: [isnotnull(ss_ticket_number#11L), isnotnull(ss_item_sk#4), isnotnull(ss_store_sk#9), isnotnull(ss..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_custome..., ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:bigint,ss_sales_price:d...\n   +- Sort [c_customer_sk#97 ASC NULLS FIRST], false, 0\n      +- ShuffleQueryStage 2\n         +- ReusedExchange [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111], Exchange hashpartitioning(c_customer_sk#97, 200), ENSURE_REQUIREMENTS, [plan_id=493]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2119260936,
        "inputRowCount" : 43342848
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "10" : [ 3456889, 3501116, 3465177, 3439010, 3489774, 3483863, 3442190, 3443503, 3468893, 3439834, 3515814, 3440166, 3486374, 3482964, 3462151, 3437108, 3496964, 3537820, 3423865, 3434563, 3465259, 3426613, 3444692, 3504289, 3467479, 3466853, 3447280, 3570218, 3490334, 3490656, 3364398, 3417421, 3486556, 3381638, 3454982, 3492140, 3430915, 3421772, 3379506, 3434476, 3454406, 3481699, 3364237, 3464753, 3501022, 3391394, 3483867, 3459423, 3466211, 3485033, 3494282, 3461458, 3433389, 3506115, 3441713, 3424067, 3415286, 3409957, 3399897, 3447070, 3428523, 3529544, 3382316, 3458973, 3419408, 3511940, 3486271, 3418551, 3466270, 3441860, 3479647, 3416018, 3434302, 3465953, 3474326, 3454065, 3549426, 3452021, 3504284, 3421802, 3456246, 3502104, 3511056, 3351346, 3488716, 3411110, 3413858, 3463974, 3437456, 3556578, 3424696, 3453442, 3476419, 3417496, 3501142, 3519598, 3460159, 3448815, 3477689, 3398281, 3385440, 3509742, 3452458, 3370516, 3417510, 3466891, 3467086, 3550868, 3350976, 3420885, 3403189, 3437624, 3480506, 3443891, 3412606, 3436316, 3386571, 3422536, 3391636, 3374540, 3440121, 3449789, 3542064, 3425370, 3486688, 3522638, 3468153, 3466679, 3451975, 3404524, 3490157, 3483735, 3430636, 3435016, 3411561, 3436842, 3477828, 3470235, 3440381, 3444934, 3456156, 3346930, 3512840, 3512271, 3483956, 3502116, 3543469, 3423808, 3457163, 3424780, 3487396, 3473496, 3475556, 3499559, 3536884, 3516551, 3480296, 3494165, 3500325, 3398889, 3396814, 3410997, 3492915, 3398936, 3464573, 3511624, 3429185, 3500523, 3495514, 3418198, 3485610, 3558975, 3476671, 3482907, 3490102, 3397552, 3431913, 3408249, 3457648, 3431969, 3430781, 3456194, 3405252, 3417463, 3522869, 3477174, 3529055, 3512422, 3434744, 3452329, 3443578, 3450966, 3455298, 3377601, 3462517, 3483835, 3395394, 3442125, 3450768, 3414852 ],

      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 19,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 36 ],
      "Objectives" : {
        "DurationInMs" : 5361,
        "TotalTasksDurationInMs" : 57118,
        "IOBytes" : {
          "Total" : 2756114951,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 732024368,
            "SW" : 2024090583
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -702144975,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 135108960,
                "rowCount" : 1930128
              },
              "compileTime" : {
                "sizeInBytes" : 135108960,
                "rowCount" : 1930128
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] "
          },
          "1" : {
            "sign" : -14387779,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 482532000,
                "rowCount" : 1930128
              },
              "compileTime" : {
                "sizeInBytes" : 482532000,
                "rowCount" : 1930128
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111)) "
          },
          "2" : {
            "sign" : 2021572997,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              },
              "compileTime" : {
                "sizeInBytes" : 500000000,
                "rowCount" : 2000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_customer_sk#97, c_customer_id#98, c_current_cdemo_sk#99, c_current_hdemo_sk#100, c_current_addr_sk#101, c_first_shipto_date_sk#102, c_first_sales_date_sk#103, c_salutation#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_day#108, c_birth_month#109, c_birth_year#110, c_birth_country#111, c_login#112, c_email_address#113, c_last_review_date#114], `spark_catalog`.`tpcds_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111]\n+- Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n   +- Relation spark_catalog.tpcds_100.customer[c_customer_sk#97,c_customer_id#98,c_current_cdemo_sk#99,c_current_hdemo_sk#100,c_current_addr_sk#101,c_first_shipto_date_sk#102,c_first_sales_date_sk#103,c_salutation#104,c_first_name#105,c_last_name#106,c_preferred_cust_flag#107,c_birth_day#108,c_birth_month#109,c_birth_year#110,c_birth_country#111,c_login#112,c_email_address#113,c_last_review_date#114] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1324481030,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 135108960,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] Condition : (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111)) "
          },
          "1" : {
            "sign" : 332720590,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 135108960,
            "rowCount" : 1930128,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.customer Output [4]: [c_customer_sk#97, c_first_name#105, c_last_name#106, c_birth_country#111] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer] PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_birth_country)] ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.customer",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(c_customer_sk#97) AND isnotnull(c_birth_country#111))\n+- FileScan parquet spark_catalog.tpcds_100.customer[c_customer_sk#97,c_first_name#105,c_last_name#106,c_birth_country#111] Batched: true, DataFilters: [isnotnull(c_customer_sk#97), isnotnull(c_birth_country#111)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_birth_country)], ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 135108960,
        "inputRowCount" : 1930128
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 10 ],
      "Objectives" : {
        "DurationInMs" : 13674,
        "TotalTasksDurationInMs" : 4506,
        "IOBytes" : {
          "Total" : 90138295,
          "Details" : {
            "IR" : 16870350,
            "IW" : 0,
            "SR" : 0,
            "SW" : 73267945
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -907905969,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 33160,
                "rowCount" : 5
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0) AS bloomFilter#173], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0) AS bloomFilter#173], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -132478385,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 33160,
            "rowCount" : 5,
            "isRuntime" : true,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [buf#194] Keys: [] Functions [1]: [bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)] Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)#172] Results [1]: [bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)#172 AS bloomFilter#173] "
          },
          "1" : {
            "sign" : 720475088,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [buf#194] Arguments: 0 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[bloomFilter#173])\n+- ShuffleQueryStage 0\n   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=620]\n      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(i_item_sk#75, 42), 2313, 52773, 0, 0)], output=[buf#194])\n         +- *(1) Project [i_item_sk#75]\n            +- *(1) Filter ((isnotnull(i_color#92) AND (i_color#92 = chiffon)) AND isnotnull(i_item_sk#75))\n               +- *(1) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#75,i_color#92] Batched: true, DataFilters: [isnotnull(i_color#92), (i_color#92 = chiffon), isnotnull(i_item_sk#75)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_color), EqualTo(i_color,chiffon), IsNotNull(i_item_sk)], ReadSchema: struct<i_item_sk:int,i_color:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 33160,
        "inputRowCount" : 5
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "1" : [ 6852 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 9,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 5 ],
      "Objectives" : {
        "DurationInMs" : 1988,
        "TotalTasksDurationInMs" : 1964,
        "IOBytes" : {
          "Total" : 265,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 265,
            "SW" : 0
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702226729088,
  "SQLEndTimeInMs" : 1702226823568,
  "Objectives" : {
    "DurationInMs" : 94480,
    "IOBytes" : {
      "Total" : 20199950612,
      "Details" : {
        "IR" : 5008934819,
        "IW" : 0,
        "SR" : 7809845059,
        "SW" : 7381170734
      }
    }
  }
}
