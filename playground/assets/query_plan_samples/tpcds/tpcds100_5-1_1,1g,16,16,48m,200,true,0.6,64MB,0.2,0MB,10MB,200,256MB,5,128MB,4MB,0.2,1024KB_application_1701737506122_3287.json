{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "45" : {
          "sign" : -1743733982,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 97707581048,
          "rowCount" : 2220626842,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [wsr_web_site_sk#44, sales_price#46, profit#47, return_amt#48, net_loss#49] "
        },
        "34" : {
          "sign" : 1045661158,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3444,
          "rowCount" : 14,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#316) AND ((d_date#316 >= 1998-08-04) AND (d_date#316 <= 1998-08-18))) AND isnotnull(d_date_sk#314)) "
        },
        "12" : {
          "sign" : 1878411813,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 12608330304,
          "rowCount" : 262673548,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ss_store_sk#66 AS store_sk#12, ss_sold_date_sk#82 AS date_sk#13, ss_ext_sales_price#74 AS sales_price#14, ss_net_profit#81 AS profit#15, 0.00 AS return_amt#16, 0.00 AS net_loss#17] "
        },
        "51" : {
          "sign" : -618013700,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 168,
          "rowCount" : 14,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#376] "
        },
        "8" : {
          "sign" : 616828920,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 123825589143984,
          "rowCount" : 1629284067684,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (store_sk#12 = s_store_sk#131) "
        },
        "19" : {
          "sign" : -1300333345,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3433287040,
          "rowCount" : 26822555,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(sr_returned_date_sk#102) AND isnotnull(sr_store_sk#89)) AND dynamicpruning#446 [sr_returned_date_sk#102]) "
        },
        "23" : {
          "sign" : -1579921744,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 192558,
          "rowCount" : 402,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#131, s_store_id#132, s_rec_start_date#133, s_rec_end_date#134, s_closed_date_sk#135, s_store_name#136, s_number_employees#137, s_floor_space#138, s_hours#139, s_manager#140, s_market_id#141, s_geography_class#142, s_market_desc#143, s_market_manager#144, s_division_id#145, s_division_name#146, s_company_id#147, s_company_name#148, s_street_number#149, s_street_name#150, s_street_type#151, s_suite_number#152, s_city#153, s_county#154, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "62" : {
          "sign" : 383050477,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 960,
          "rowCount" : 24,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [web_site_sk#288, web_site_id#289] "
        },
        "4" : {
          "sign" : 1599313004,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Expand",
          "sizeInBytes" : 5774160,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Expand Arguments: [[sales#24, returns#26, profit#2, channel#432, id#433, 0], [sales#24, returns#26, profit#2, channel#432, null, 1], [sales#24, returns#26, profit#2, null, null, 3]], [sales#24, returns#26, profit#2, channel#435, id#436, spark_grouping_id#434L] "
        },
        "40" : {
          "sign" : -1706463023,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3774000,
          "rowCount" : 20400,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(cp_catalog_page_sk#221) "
        },
        "15" : {
          "sign" : 815227588,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 168,
          "rowCount" : 14,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#103] "
        },
        "11" : {
          "sign" : 1753648280,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
          "sizeInBytes" : 13895812944,
          "rowCount" : 289496103,
          "isRuntime" : false,
          "predicate" : " (unknown) Union Arguments: false, false "
        },
        "9" : {
          "sign" : 688701003,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 178329599448,
          "rowCount" : 4052945442,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [store_sk#12, sales_price#14, profit#15, return_amt#16, net_loss#17] "
        },
        "44" : {
          "sign" : -1327201593,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 4050423359808,
          "rowCount" : 53295044208,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (wsr_web_site_sk#44 = web_site_sk#288) "
        },
        "33" : {
          "sign" : -1683970750,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 168,
          "rowCount" : 14,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#314] "
        },
        "22" : {
          "sign" : 405233793,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 192558,
          "rowCount" : 402,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(s_store_sk#131) "
        },
        "56" : {
          "sign" : -1679825351,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 274996000,
          "rowCount" : 6874900,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [wr_item_sk#265, wr_order_number#276L, wr_return_amt#278, wr_net_loss#286, wr_returned_date_sk#287] "
        },
        "55" : {
          "sign" : -1867853223,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 4852435280,
          "rowCount" : 86650630,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((wr_item_sk#265 = ws_item_sk#344) AND (wr_order_number#276L = ws_order_number#358L)) "
        },
        "26" : {
          "sign" : -1954979125,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 3400539644409600,
          "rowCount" : 44743942689600,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (page_sk#28 = cp_catalog_page_sk#221) "
        },
        "50" : {
          "sign" : 1265230408,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 14972593792,
          "rowCount" : 71983624,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#230, ws_ship_date_sk#231, ws_item_sk#232, ws_bill_customer_sk#233, ws_bill_cdemo_sk#234, ws_bill_hdemo_sk#235, ws_bill_addr_sk#236, ws_ship_customer_sk#237, ws_ship_cdemo_sk#238, ws_ship_hdemo_sk#239, ws_ship_addr_sk#240, ws_web_page_sk#241, ws_web_site_sk#242, ws_ship_mode_sk#243, ws_warehouse_sk#244, ws_promo_sk#245, ws_order_number#246L, ws_quantity#247, ws_wholesale_cost#248, ws_list_price#249, ws_sales_price#250, ws_ext_discount_amt#251, ws_ext_sales_price#252, ws_ext_wholesale_cost#253, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "37" : {
          "sign" : 200908026,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 2201244396,
          "rowCount" : 14110541,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(cr_returned_date_sk#220) AND isnotnull(cr_catalog_page_sk#205)) AND dynamicpruning#447 [cr_returned_date_sk#220]) "
        },
        "61" : {
          "sign" : -367408058,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 14976335504,
          "rowCount" : 72001613,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#342, ws_ship_date_sk#343, ws_item_sk#344, ws_bill_customer_sk#345, ws_bill_cdemo_sk#346, ws_bill_hdemo_sk#347, ws_bill_addr_sk#348, ws_ship_customer_sk#349, ws_ship_cdemo_sk#350, ws_ship_hdemo_sk#351, ws_ship_addr_sk#352, ws_web_page_sk#353, ws_web_site_sk#354, ws_ship_mode_sk#355, ws_warehouse_sk#356, ws_promo_sk#357, ws_order_number#358L, ws_quantity#359, ws_wholesale_cost#360, ws_list_price#361, ws_sales_price#362, ws_ext_discount_amt#363, ws_ext_sales_price#364, ws_ext_wholesale_cost#365, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "13" : {
          "sign" : 1709358190,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 39926379296,
          "rowCount" : 262673548,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_sold_date_sk#82) AND isnotnull(ss_store_sk#66)) AND dynamicpruning#446 [ss_sold_date_sk#82]) "
        },
        "46" : {
          "sign" : -867601970,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 115472595784,
          "rowCount" : 2220626842,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (date_sk#45 = d_date_sk#376) "
        },
        "24" : {
          "sign" : 217734867,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 1713600,
          "rowCount" : 20400,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [cp_catalog_page_id#222], [MakeDecimal(sum(UnscaledValue(sales_price#30)),17,2) AS sales#40, MakeDecimal(sum(UnscaledValue(return_amt#32)),17,2) AS returns#42, (MakeDecimal(sum(UnscaledValue(profit#31)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#33)),17,2)) AS profit#5, catalog channel AS channel#442, concat(catalog_page, cp_catalog_page_id#222) AS id#443] "
        },
        "35" : {
          "sign" : -1395256588,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#314, d_date_id#315, d_date#316, d_month_seq#317, d_week_seq#318, d_quarter_seq#319, d_year#320, d_dow#321, d_moy#322, d_dom#323, d_qoy#324, d_fy_year#325, d_fy_quarter_seq#326, d_fy_week_seq#327, d_day_name#328, d_quarter_name#329, d_holiday#330, d_weekend#331, d_following_holiday#332, d_first_dom#333, d_last_dom#334, d_same_day_ly#335, d_same_day_lq#336, d_current_day#337, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "16" : {
          "sign" : 793984382,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3444,
          "rowCount" : 14,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#105) AND ((d_date#105 >= 1998-08-04) AND (d_date#105 <= 1998-08-18))) AND isnotnull(d_date_sk#103)) "
        },
        "5" : {
          "sign" : -559414743,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
          "sizeInBytes" : 1732248,
          "rowCount" : 20622,
          "isRuntime" : false,
          "predicate" : " (unknown) Union Arguments: false, false "
        },
        "10" : {
          "sign" : 2144958666,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 210753162984,
          "rowCount" : 4052945442,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (date_sk#13 = d_date_sk#103) "
        },
        "59" : {
          "sign" : 1134589474,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1727605368,
          "rowCount" : 71983557,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_item_sk#344, ws_web_site_sk#354, ws_order_number#358L] "
        },
        "48" : {
          "sign" : 157743064,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3454347504,
          "rowCount" : 71965573,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_web_site_sk#242 AS wsr_web_site_sk#44, ws_sold_date_sk#263 AS date_sk#45, ws_ext_sales_price#252 AS sales_price#46, ws_net_profit#262 AS profit#47, 0.00 AS return_amt#48, 0.00 AS net_loss#49] "
        },
        "21" : {
          "sign" : -1918610260,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 16080,
          "rowCount" : 402,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [s_store_sk#131, s_store_id#132] "
        },
        "54" : {
          "sign" : 766223573,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 4159230240,
          "rowCount" : 86650630,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ws_web_site_sk#354 AS wsr_web_site_sk#50, wr_returned_date_sk#287 AS date_sk#51, 0.00 AS sales_price#52, 0.00 AS profit#53, wr_return_amt#278 AS return_amt#54, wr_net_loss#286 AS net_loss#55] "
        },
        "43" : {
          "sign" : 882200440,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3624063006144,
          "rowCount" : 53295044208,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [sales_price#46, profit#47, return_amt#48, net_loss#49, web_site_id#289] "
        },
        "57" : {
          "sign" : 433080442,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 989985600,
          "rowCount" : 6874900,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(wr_returned_date_sk#287) AND dynamicpruning#448 [wr_returned_date_sk#287]) "
        },
        "32" : {
          "sign" : -243072556,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 29800787536,
          "rowCount" : 143273017,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#160, cs_ship_date_sk#161, cs_bill_customer_sk#162, cs_bill_cdemo_sk#163, cs_bill_hdemo_sk#164, cs_bill_addr_sk#165, cs_ship_customer_sk#166, cs_ship_cdemo_sk#167, cs_ship_hdemo_sk#168, cs_ship_addr_sk#169, cs_call_center_sk#170, cs_catalog_page_sk#171, cs_ship_mode_sk#172, cs_warehouse_sk#173, cs_item_sk#174, cs_promo_sk#175, cs_order_number#176L, cs_quantity#177, cs_wholesale_cost#178, cs_list_price#179, cs_sales_price#180, cs_ext_discount_amt#181, cs_ext_sales_price#182, cs_ext_wholesale_cost#183, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "49" : {
          "sign" : -1406906908,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 14968839184,
          "rowCount" : 71965573,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(ws_sold_date_sk#263) AND isnotnull(ws_web_site_sk#242)) AND dynamicpruning#448 [ws_sold_date_sk#263]) "
        },
        "6" : {
          "sign" : 1387279019,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 17640,
          "rowCount" : 210,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [s_store_id#132], [MakeDecimal(sum(UnscaledValue(sales_price#14)),17,2) AS sales#24, MakeDecimal(sum(UnscaledValue(return_amt#16)),17,2) AS returns#26, (MakeDecimal(sum(UnscaledValue(profit#15)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#17)),17,2)) AS profit#2, store channel AS channel#432, concat(store, s_store_id#132) AS id#433] "
        },
        "36" : {
          "sign" : -1961666563,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 677305968,
          "rowCount" : 14110541,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cr_catalog_page_sk#205 AS page_sk#34, cr_returned_date_sk#220 AS date_sk#35, 0.00 AS sales_price#36, 0.00 AS profit#37, cr_return_amount#211 AS return_amt#38, cr_net_loss#219 AS net_loss#39] "
        },
        "1" : {
          "sign" : 1928644604,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
          "sizeInBytes" : 6928992,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) LocalLimit Arguments: 100 "
        },
        "39" : {
          "sign" : 183178940,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 816000,
          "rowCount" : 20400,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cp_catalog_page_sk#221, cp_catalog_page_id#222] "
        },
        "17" : {
          "sign" : -144809072,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#103, d_date_id#104, d_date#105, d_month_seq#106, d_week_seq#107, d_quarter_seq#108, d_year#109, d_dow#110, d_moy#111, d_dom#112, d_qoy#113, d_fy_year#114, d_fy_quarter_seq#115, d_fy_week_seq#116, d_day_name#117, d_quarter_name#118, d_holiday#119, d_weekend#120, d_following_holiday#121, d_first_dom#122, d_last_dom#123, d_same_day_ly#124, d_same_day_lq#125, d_current_day#126, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "25" : {
          "sign" : -418321668,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3042588102892800,
          "rowCount" : 44743942689600,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [sales_price#30, profit#31, return_amt#32, net_loss#33, cp_catalog_page_id#222] "
        },
        "60" : {
          "sign" : 639579045,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 14972579856,
          "rowCount" : 71983557,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(ws_item_sk#344) AND isnotnull(ws_order_number#358L)) AND isnotnull(ws_web_site_sk#354)) "
        },
        "14" : {
          "sign" : -166967311,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 41806893656,
          "rowCount" : 275045353,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#60, ss_item_sk#61, ss_customer_sk#62, ss_cdemo_sk#63, ss_hdemo_sk#64, ss_addr_sk#65, ss_store_sk#66, ss_promo_sk#67, ss_ticket_number#68L, ss_quantity#69, ss_wholesale_cost#70, ss_list_price#71, ss_sales_price#72, ss_ext_discount_amt#73, ss_ext_sales_price#74, ss_ext_wholesale_cost#75, ss_ext_list_price#76, ss_ext_tax#77, ss_coupon_amt#78, ss_net_paid#79, ss_net_paid_inc_tax#80, ss_net_profit#81, ss_sold_date_sk#82], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "47" : {
          "sign" : 1320130293,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
          "sizeInBytes" : 7613577744,
          "rowCount" : 158616203,
          "isRuntime" : false,
          "predicate" : " (unknown) Union Arguments: false, false "
        },
        "31" : {
          "sign" : 298465781,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 29651632400,
          "rowCount" : 142555925,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(cs_sold_date_sk#193) AND isnotnull(cs_catalog_page_sk#171)) AND dynamicpruning#447 [cs_sold_date_sk#193]) "
        },
        "58" : {
          "sign" : -972042,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 989985600,
          "rowCount" : 6874900,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [wr_returned_time_sk#264, wr_item_sk#265, wr_refunded_customer_sk#266, wr_refunded_cdemo_sk#267, wr_refunded_hdemo_sk#268, wr_refunded_addr_sk#269, wr_returning_customer_sk#270, wr_returning_cdemo_sk#271, wr_returning_hdemo_sk#272, wr_returning_addr_sk#273, wr_web_page_sk#274, wr_reason_sk#275, wr_order_number#276L, wr_return_quantity#277, wr_return_amt#278, wr_return_tax#279, wr_return_amt_inc_tax#280, wr_fee#281, wr_return_ship_cost#282, wr_refunded_cash#283, wr_reversed_charge#284, wr_account_credit#285, wr_net_loss#286, wr_returned_date_sk#287], `spark_catalog`.`tpcds_100`.`web_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "64" : {
          "sign" : 1776939949,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 11736,
          "rowCount" : 24,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [web_site_sk#288, web_site_id#289, web_rec_start_date#290, web_rec_end_date#291, web_name#292, web_open_date_sk#293, web_close_date_sk#294, web_class#295, web_manager#296, web_mkt_id#297, web_mkt_class#298, web_mkt_desc#299, web_market_manager#300, web_company_id#301, web_company_name#302, web_street_number#303, web_street_name#304, web_street_type#305, web_suite_number#306, web_city#307, web_county#308, web_state#309, web_zip#310, web_country#311, ... 2 more fields], `spark_catalog`.`tpcds_100`.`web_site`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "53" : {
          "sign" : -1154310174,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#376, d_date_id#377, d_date#378, d_month_seq#379, d_week_seq#380, d_quarter_seq#381, d_year#382, d_dow#383, d_moy#384, d_dom#385, d_qoy#386, d_fy_year#387, d_fy_quarter_seq#388, d_fy_week_seq#389, d_day_name#390, d_quarter_name#391, d_holiday#392, d_weekend#393, d_following_holiday#394, d_first_dom#395, d_last_dom#396, d_same_day_ly#397, d_same_day_lq#398, d_current_day#399, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "42" : {
          "sign" : -492841918,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 1008,
          "rowCount" : 12,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [web_site_id#289], [MakeDecimal(sum(UnscaledValue(sales_price#46)),17,2) AS sales#56, MakeDecimal(sum(UnscaledValue(return_amt#48)),17,2) AS returns#58, (MakeDecimal(sum(UnscaledValue(profit#47)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#49)),17,2)) AS profit#8, web channel AS channel#444, concat(web_site, web_site_id#289) AS id#445] "
        },
        "0" : {
          "sign" : -378289317,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
          "sizeInBytes" : 9600,
          "rowCount" : 100,
          "isRuntime" : false,
          "predicate" : " (unknown) GlobalLimit Arguments: 100 "
        },
        "20" : {
          "sign" : 1795467426,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3557606528,
          "rowCount" : 27793801,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#83, sr_item_sk#84, sr_customer_sk#85, sr_cdemo_sk#86, sr_hdemo_sk#87, sr_addr_sk#88, sr_store_sk#89, sr_reason_sk#90, sr_ticket_number#91L, sr_return_quantity#92, sr_return_amt#93, sr_return_tax#94, sr_return_amt_inc_tax#95, sr_fee#96, sr_return_ship_cost#97, sr_refunded_cash#98, sr_reversed_charge#99, sr_store_credit#100, sr_net_loss#101, sr_returned_date_sk#102], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "27" : {
          "sign" : -873417051,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 96506543056,
          "rowCount" : 2193330524,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [page_sk#28, sales_price#30, profit#31, return_amt#32, net_loss#33] "
        },
        "2" : {
          "sign" : 2055110897,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 6928992,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [channel#435 ASC NULLS FIRST, id#436 ASC NULLS FIRST], true "
        },
        "38" : {
          "sign" : -1716719794,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 2246060232,
          "rowCount" : 14397822,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cr_returned_time_sk#194, cr_item_sk#195, cr_refunded_customer_sk#196, cr_refunded_cdemo_sk#197, cr_refunded_hdemo_sk#198, cr_refunded_addr_sk#199, cr_returning_customer_sk#200, cr_returning_cdemo_sk#201, cr_returning_hdemo_sk#202, cr_returning_addr_sk#203, cr_call_center_sk#204, cr_catalog_page_sk#205, cr_ship_mode_sk#206, cr_warehouse_sk#207, cr_reason_sk#208, cr_order_number#209L, cr_return_quantity#210, cr_return_amount#211, cr_return_tax#212, cr_return_amt_inc_tax#213, cr_fee#214, cr_return_ship_cost#215, cr_refunded_cash#216, cr_reversed_charge#217, ... 3 more fields], `spark_catalog`.`tpcds_100`.`catalog_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "18" : {
          "sign" : 1061453053,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1287482640,
          "rowCount" : 26822555,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [sr_store_sk#89 AS store_sk#18, sr_returned_date_sk#102 AS date_sk#19, 0.00 AS sales_price#20, 0.00 AS profit#21, sr_return_amt#93 AS return_amt#22, sr_net_loss#101 AS net_loss#23] "
        },
        "30" : {
          "sign" : -1776520573,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 6842684400,
          "rowCount" : 142555925,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [cs_catalog_page_sk#171 AS page_sk#28, cs_sold_date_sk#193 AS date_sk#29, cs_ext_sales_price#182 AS sales_price#30, cs_net_profit#192 AS profit#31, 0.00 AS return_amt#32, 0.00 AS net_loss#33] "
        },
        "7" : {
          "sign" : 1749073997,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 110791316602512,
          "rowCount" : 1629284067684,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [sales_price#14, profit#15, return_amt#16, net_loss#17, s_store_id#132] "
        },
        "29" : {
          "sign" : -741424636,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
          "sizeInBytes" : 7519990368,
          "rowCount" : 156666466,
          "isRuntime" : false,
          "predicate" : " (unknown) Union Arguments: false, false "
        },
        "41" : {
          "sign" : 1739450256,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3774000,
          "rowCount" : 20400,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cp_catalog_page_sk#221, cp_catalog_page_id#222, cp_start_date_sk#223, cp_end_date_sk#224, cp_department#225, cp_catalog_number#226, cp_catalog_page_number#227, cp_description#228, cp_type#229], `spark_catalog`.`tpcds_100`.`catalog_page`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "63" : {
          "sign" : -1631754172,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 11736,
          "rowCount" : 24,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(web_site_sk#288) "
        },
        "3" : {
          "sign" : 754006538,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 6928992,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [channel#435, id#436, spark_grouping_id#434L], [channel#435, id#436, sum(sales#24) AS sales#9, sum(returns#26) AS returns#10, sum(profit#2) AS profit#11] "
        },
        "52" : {
          "sign" : -762511156,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3444,
          "rowCount" : 14,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#378) AND ((d_date#378 >= 1998-08-04) AND (d_date#378 <= 1998-08-18))) AND isnotnull(d_date_sk#376)) "
        },
        "28" : {
          "sign" : -706977703,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 114053187248,
          "rowCount" : 2193330524,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (date_sk#29 = d_date_sk#314) "
        }
      },
      "links" : [ {
        "fromId" : 14,
        "fromName" : "LogicalRelation",
        "toId" : 13,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "LogicalRelation",
        "toId" : 16,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "Filter",
        "toId" : 15,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "Project",
        "toId" : 13,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 13,
        "fromName" : "Filter",
        "toId" : 12,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 12,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Union",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "LogicalRelation",
        "toId" : 19,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "Project",
        "toId" : 19,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 19,
        "fromName" : "Filter",
        "toId" : 18,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Union",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "Union",
        "toId" : 10,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "Project",
        "toId" : 10,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Join",
        "toId" : 9,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Project",
        "toId" : 8,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "LogicalRelation",
        "toId" : 22,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "Filter",
        "toId" : 21,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Project",
        "toId" : 8,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Join",
        "toId" : 7,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Project",
        "toId" : 6,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Aggregate",
        "toId" : 5,
        "toName" : "Union",
        "linkType" : "Operator"
      }, {
        "fromId" : 32,
        "fromName" : "LogicalRelation",
        "toId" : 31,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 35,
        "fromName" : "LogicalRelation",
        "toId" : 34,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 34,
        "fromName" : "Filter",
        "toId" : 33,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 33,
        "fromName" : "Project",
        "toId" : 31,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 31,
        "fromName" : "Filter",
        "toId" : 30,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 30,
        "fromName" : "Project",
        "toId" : 29,
        "toName" : "Union",
        "linkType" : "Operator"
      }, {
        "fromId" : 38,
        "fromName" : "LogicalRelation",
        "toId" : 37,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 33,
        "fromName" : "Project",
        "toId" : 37,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 37,
        "fromName" : "Filter",
        "toId" : 36,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 36,
        "fromName" : "Project",
        "toId" : 29,
        "toName" : "Union",
        "linkType" : "Operator"
      }, {
        "fromId" : 29,
        "fromName" : "Union",
        "toId" : 28,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 33,
        "fromName" : "Project",
        "toId" : 28,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "Join",
        "toId" : 27,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "Project",
        "toId" : 26,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 41,
        "fromName" : "LogicalRelation",
        "toId" : 40,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 40,
        "fromName" : "Filter",
        "toId" : 39,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 39,
        "fromName" : "Project",
        "toId" : 26,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "Join",
        "toId" : 25,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "Project",
        "toId" : 24,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "Aggregate",
        "toId" : 5,
        "toName" : "Union",
        "linkType" : "Operator"
      }, {
        "fromId" : 50,
        "fromName" : "LogicalRelation",
        "toId" : 49,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 53,
        "fromName" : "LogicalRelation",
        "toId" : 52,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 52,
        "fromName" : "Filter",
        "toId" : 51,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 51,
        "fromName" : "Project",
        "toId" : 49,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 49,
        "fromName" : "Filter",
        "toId" : 48,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 48,
        "fromName" : "Project",
        "toId" : 47,
        "toName" : "Union",
        "linkType" : "Operator"
      }, {
        "fromId" : 58,
        "fromName" : "LogicalRelation",
        "toId" : 57,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 51,
        "fromName" : "Project",
        "toId" : 57,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 57,
        "fromName" : "Filter",
        "toId" : 56,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 56,
        "fromName" : "Project",
        "toId" : 55,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 61,
        "fromName" : "LogicalRelation",
        "toId" : 60,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 60,
        "fromName" : "Filter",
        "toId" : 59,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 59,
        "fromName" : "Project",
        "toId" : 55,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 55,
        "fromName" : "Join",
        "toId" : 54,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 54,
        "fromName" : "Project",
        "toId" : 47,
        "toName" : "Union",
        "linkType" : "Operator"
      }, {
        "fromId" : 47,
        "fromName" : "Union",
        "toId" : 46,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 51,
        "fromName" : "Project",
        "toId" : 46,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 46,
        "fromName" : "Join",
        "toId" : 45,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 45,
        "fromName" : "Project",
        "toId" : 44,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 64,
        "fromName" : "LogicalRelation",
        "toId" : 63,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 63,
        "fromName" : "Filter",
        "toId" : 62,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 62,
        "fromName" : "Project",
        "toId" : 44,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 44,
        "fromName" : "Join",
        "toId" : 43,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 43,
        "fromName" : "Project",
        "toId" : 42,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 42,
        "fromName" : "Aggregate",
        "toId" : 5,
        "toName" : "Union",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Union",
        "toId" : 4,
        "toName" : "Expand",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Expand",
        "toId" : 3,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Aggregate",
        "toId" : 2,
        "toName" : "Sort",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Sort",
        "toId" : 1,
        "toName" : "LocalLimit",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "LocalLimit",
        "toId" : 0,
        "toName" : "GlobalLimit",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#435 ASC NULLS FIRST, id#436 ASC NULLS FIRST], true\n      +- Aggregate [channel#435, id#436, spark_grouping_id#434L], [channel#435, id#436, sum(sales#24) AS sales#9, sum(returns#26) AS returns#10, sum(profit#2) AS profit#11]\n         +- Expand [[sales#24, returns#26, profit#2, channel#432, id#433, 0], [sales#24, returns#26, profit#2, channel#432, null, 1], [sales#24, returns#26, profit#2, null, null, 3]], [sales#24, returns#26, profit#2, channel#435, id#436, spark_grouping_id#434L]\n            +- Union false, false\n               :- Aggregate [s_store_id#132], [MakeDecimal(sum(UnscaledValue(sales_price#14)),17,2) AS sales#24, MakeDecimal(sum(UnscaledValue(return_amt#16)),17,2) AS returns#26, (MakeDecimal(sum(UnscaledValue(profit#15)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#17)),17,2)) AS profit#2, store channel AS channel#432, concat(store, s_store_id#132) AS id#433]\n               :  +- Project [sales_price#14, profit#15, return_amt#16, net_loss#17, s_store_id#132]\n               :     +- Join Inner, (store_sk#12 = s_store_sk#131)\n               :        :- Project [store_sk#12, sales_price#14, profit#15, return_amt#16, net_loss#17]\n               :        :  +- Join Inner, (date_sk#13 = d_date_sk#103)\n               :        :     :- Union false, false\n               :        :     :  :- Project [ss_store_sk#66 AS store_sk#12, ss_sold_date_sk#82 AS date_sk#13, ss_ext_sales_price#74 AS sales_price#14, ss_net_profit#81 AS profit#15, 0.00 AS return_amt#16, 0.00 AS net_loss#17]\n               :        :     :  :  +- Filter ((isnotnull(ss_sold_date_sk#82) AND isnotnull(ss_store_sk#66)) AND dynamicpruning#446 [ss_sold_date_sk#82])\n               :        :     :  :     :  +- Project [d_date_sk#103]\n               :        :     :  :     :     +- Filter ((isnotnull(d_date#105) AND ((d_date#105 >= 1998-08-04) AND (d_date#105 <= 1998-08-18))) AND isnotnull(d_date_sk#103))\n               :        :     :  :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_date_id#104,d_date#105,d_month_seq#106,d_week_seq#107,d_quarter_seq#108,d_year#109,d_dow#110,d_moy#111,d_dom#112,d_qoy#113,d_fy_year#114,d_fy_quarter_seq#115,d_fy_week_seq#116,d_day_name#117,d_quarter_name#118,d_holiday#119,d_weekend#120,d_following_holiday#121,d_first_dom#122,d_last_dom#123,d_same_day_ly#124,d_same_day_lq#125,d_current_day#126,... 4 more fields] parquet\n               :        :     :  :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#60,ss_item_sk#61,ss_customer_sk#62,ss_cdemo_sk#63,ss_hdemo_sk#64,ss_addr_sk#65,ss_store_sk#66,ss_promo_sk#67,ss_ticket_number#68L,ss_quantity#69,ss_wholesale_cost#70,ss_list_price#71,ss_sales_price#72,ss_ext_discount_amt#73,ss_ext_sales_price#74,ss_ext_wholesale_cost#75,ss_ext_list_price#76,ss_ext_tax#77,ss_coupon_amt#78,ss_net_paid#79,ss_net_paid_inc_tax#80,ss_net_profit#81,ss_sold_date_sk#82] parquet\n               :        :     :  +- Project [sr_store_sk#89 AS store_sk#18, sr_returned_date_sk#102 AS date_sk#19, 0.00 AS sales_price#20, 0.00 AS profit#21, sr_return_amt#93 AS return_amt#22, sr_net_loss#101 AS net_loss#23]\n               :        :     :     +- Filter ((isnotnull(sr_returned_date_sk#102) AND isnotnull(sr_store_sk#89)) AND dynamicpruning#446 [sr_returned_date_sk#102])\n               :        :     :        :  +- Project [d_date_sk#103]\n               :        :     :        :     +- Filter ((isnotnull(d_date#105) AND ((d_date#105 >= 1998-08-04) AND (d_date#105 <= 1998-08-18))) AND isnotnull(d_date_sk#103))\n               :        :     :        :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_date_id#104,d_date#105,d_month_seq#106,d_week_seq#107,d_quarter_seq#108,d_year#109,d_dow#110,d_moy#111,d_dom#112,d_qoy#113,d_fy_year#114,d_fy_quarter_seq#115,d_fy_week_seq#116,d_day_name#117,d_quarter_name#118,d_holiday#119,d_weekend#120,d_following_holiday#121,d_first_dom#122,d_last_dom#123,d_same_day_ly#124,d_same_day_lq#125,d_current_day#126,... 4 more fields] parquet\n               :        :     :        +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#83,sr_item_sk#84,sr_customer_sk#85,sr_cdemo_sk#86,sr_hdemo_sk#87,sr_addr_sk#88,sr_store_sk#89,sr_reason_sk#90,sr_ticket_number#91L,sr_return_quantity#92,sr_return_amt#93,sr_return_tax#94,sr_return_amt_inc_tax#95,sr_fee#96,sr_return_ship_cost#97,sr_refunded_cash#98,sr_reversed_charge#99,sr_store_credit#100,sr_net_loss#101,sr_returned_date_sk#102] parquet\n               :        :     +- Project [d_date_sk#103]\n               :        :        +- Filter ((isnotnull(d_date#105) AND ((d_date#105 >= 1998-08-04) AND (d_date#105 <= 1998-08-18))) AND isnotnull(d_date_sk#103))\n               :        :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_date_id#104,d_date#105,d_month_seq#106,d_week_seq#107,d_quarter_seq#108,d_year#109,d_dow#110,d_moy#111,d_dom#112,d_qoy#113,d_fy_year#114,d_fy_quarter_seq#115,d_fy_week_seq#116,d_day_name#117,d_quarter_name#118,d_holiday#119,d_weekend#120,d_following_holiday#121,d_first_dom#122,d_last_dom#123,d_same_day_ly#124,d_same_day_lq#125,d_current_day#126,... 4 more fields] parquet\n               :        +- Project [s_store_sk#131, s_store_id#132]\n               :           +- Filter isnotnull(s_store_sk#131)\n               :              +- Relation spark_catalog.tpcds_100.store[s_store_sk#131,s_store_id#132,s_rec_start_date#133,s_rec_end_date#134,s_closed_date_sk#135,s_store_name#136,s_number_employees#137,s_floor_space#138,s_hours#139,s_manager#140,s_market_id#141,s_geography_class#142,s_market_desc#143,s_market_manager#144,s_division_id#145,s_division_name#146,s_company_id#147,s_company_name#148,s_street_number#149,s_street_name#150,s_street_type#151,s_suite_number#152,s_city#153,s_county#154,... 5 more fields] parquet\n               :- Aggregate [cp_catalog_page_id#222], [MakeDecimal(sum(UnscaledValue(sales_price#30)),17,2) AS sales#40, MakeDecimal(sum(UnscaledValue(return_amt#32)),17,2) AS returns#42, (MakeDecimal(sum(UnscaledValue(profit#31)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#33)),17,2)) AS profit#5, catalog channel AS channel#442, concat(catalog_page, cp_catalog_page_id#222) AS id#443]\n               :  +- Project [sales_price#30, profit#31, return_amt#32, net_loss#33, cp_catalog_page_id#222]\n               :     +- Join Inner, (page_sk#28 = cp_catalog_page_sk#221)\n               :        :- Project [page_sk#28, sales_price#30, profit#31, return_amt#32, net_loss#33]\n               :        :  +- Join Inner, (date_sk#29 = d_date_sk#314)\n               :        :     :- Union false, false\n               :        :     :  :- Project [cs_catalog_page_sk#171 AS page_sk#28, cs_sold_date_sk#193 AS date_sk#29, cs_ext_sales_price#182 AS sales_price#30, cs_net_profit#192 AS profit#31, 0.00 AS return_amt#32, 0.00 AS net_loss#33]\n               :        :     :  :  +- Filter ((isnotnull(cs_sold_date_sk#193) AND isnotnull(cs_catalog_page_sk#171)) AND dynamicpruning#447 [cs_sold_date_sk#193])\n               :        :     :  :     :  +- Project [d_date_sk#314]\n               :        :     :  :     :     +- Filter ((isnotnull(d_date#316) AND ((d_date#316 >= 1998-08-04) AND (d_date#316 <= 1998-08-18))) AND isnotnull(d_date_sk#314))\n               :        :     :  :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#314,d_date_id#315,d_date#316,d_month_seq#317,d_week_seq#318,d_quarter_seq#319,d_year#320,d_dow#321,d_moy#322,d_dom#323,d_qoy#324,d_fy_year#325,d_fy_quarter_seq#326,d_fy_week_seq#327,d_day_name#328,d_quarter_name#329,d_holiday#330,d_weekend#331,d_following_holiday#332,d_first_dom#333,d_last_dom#334,d_same_day_ly#335,d_same_day_lq#336,d_current_day#337,... 4 more fields] parquet\n               :        :     :  :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#160,cs_ship_date_sk#161,cs_bill_customer_sk#162,cs_bill_cdemo_sk#163,cs_bill_hdemo_sk#164,cs_bill_addr_sk#165,cs_ship_customer_sk#166,cs_ship_cdemo_sk#167,cs_ship_hdemo_sk#168,cs_ship_addr_sk#169,cs_call_center_sk#170,cs_catalog_page_sk#171,cs_ship_mode_sk#172,cs_warehouse_sk#173,cs_item_sk#174,cs_promo_sk#175,cs_order_number#176L,cs_quantity#177,cs_wholesale_cost#178,cs_list_price#179,cs_sales_price#180,cs_ext_discount_amt#181,cs_ext_sales_price#182,cs_ext_wholesale_cost#183,... 10 more fields] parquet\n               :        :     :  +- Project [cr_catalog_page_sk#205 AS page_sk#34, cr_returned_date_sk#220 AS date_sk#35, 0.00 AS sales_price#36, 0.00 AS profit#37, cr_return_amount#211 AS return_amt#38, cr_net_loss#219 AS net_loss#39]\n               :        :     :     +- Filter ((isnotnull(cr_returned_date_sk#220) AND isnotnull(cr_catalog_page_sk#205)) AND dynamicpruning#447 [cr_returned_date_sk#220])\n               :        :     :        :  +- Project [d_date_sk#314]\n               :        :     :        :     +- Filter ((isnotnull(d_date#316) AND ((d_date#316 >= 1998-08-04) AND (d_date#316 <= 1998-08-18))) AND isnotnull(d_date_sk#314))\n               :        :     :        :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#314,d_date_id#315,d_date#316,d_month_seq#317,d_week_seq#318,d_quarter_seq#319,d_year#320,d_dow#321,d_moy#322,d_dom#323,d_qoy#324,d_fy_year#325,d_fy_quarter_seq#326,d_fy_week_seq#327,d_day_name#328,d_quarter_name#329,d_holiday#330,d_weekend#331,d_following_holiday#332,d_first_dom#333,d_last_dom#334,d_same_day_ly#335,d_same_day_lq#336,d_current_day#337,... 4 more fields] parquet\n               :        :     :        +- Relation spark_catalog.tpcds_100.catalog_returns[cr_returned_time_sk#194,cr_item_sk#195,cr_refunded_customer_sk#196,cr_refunded_cdemo_sk#197,cr_refunded_hdemo_sk#198,cr_refunded_addr_sk#199,cr_returning_customer_sk#200,cr_returning_cdemo_sk#201,cr_returning_hdemo_sk#202,cr_returning_addr_sk#203,cr_call_center_sk#204,cr_catalog_page_sk#205,cr_ship_mode_sk#206,cr_warehouse_sk#207,cr_reason_sk#208,cr_order_number#209L,cr_return_quantity#210,cr_return_amount#211,cr_return_tax#212,cr_return_amt_inc_tax#213,cr_fee#214,cr_return_ship_cost#215,cr_refunded_cash#216,cr_reversed_charge#217,... 3 more fields] parquet\n               :        :     +- Project [d_date_sk#314]\n               :        :        +- Filter ((isnotnull(d_date#316) AND ((d_date#316 >= 1998-08-04) AND (d_date#316 <= 1998-08-18))) AND isnotnull(d_date_sk#314))\n               :        :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#314,d_date_id#315,d_date#316,d_month_seq#317,d_week_seq#318,d_quarter_seq#319,d_year#320,d_dow#321,d_moy#322,d_dom#323,d_qoy#324,d_fy_year#325,d_fy_quarter_seq#326,d_fy_week_seq#327,d_day_name#328,d_quarter_name#329,d_holiday#330,d_weekend#331,d_following_holiday#332,d_first_dom#333,d_last_dom#334,d_same_day_ly#335,d_same_day_lq#336,d_current_day#337,... 4 more fields] parquet\n               :        +- Project [cp_catalog_page_sk#221, cp_catalog_page_id#222]\n               :           +- Filter isnotnull(cp_catalog_page_sk#221)\n               :              +- Relation spark_catalog.tpcds_100.catalog_page[cp_catalog_page_sk#221,cp_catalog_page_id#222,cp_start_date_sk#223,cp_end_date_sk#224,cp_department#225,cp_catalog_number#226,cp_catalog_page_number#227,cp_description#228,cp_type#229] parquet\n               +- Aggregate [web_site_id#289], [MakeDecimal(sum(UnscaledValue(sales_price#46)),17,2) AS sales#56, MakeDecimal(sum(UnscaledValue(return_amt#48)),17,2) AS returns#58, (MakeDecimal(sum(UnscaledValue(profit#47)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#49)),17,2)) AS profit#8, web channel AS channel#444, concat(web_site, web_site_id#289) AS id#445]\n                  +- Project [sales_price#46, profit#47, return_amt#48, net_loss#49, web_site_id#289]\n                     +- Join Inner, (wsr_web_site_sk#44 = web_site_sk#288)\n                        :- Project [wsr_web_site_sk#44, sales_price#46, profit#47, return_amt#48, net_loss#49]\n                        :  +- Join Inner, (date_sk#45 = d_date_sk#376)\n                        :     :- Union false, false\n                        :     :  :- Project [ws_web_site_sk#242 AS wsr_web_site_sk#44, ws_sold_date_sk#263 AS date_sk#45, ws_ext_sales_price#252 AS sales_price#46, ws_net_profit#262 AS profit#47, 0.00 AS return_amt#48, 0.00 AS net_loss#49]\n                        :     :  :  +- Filter ((isnotnull(ws_sold_date_sk#263) AND isnotnull(ws_web_site_sk#242)) AND dynamicpruning#448 [ws_sold_date_sk#263])\n                        :     :  :     :  +- Project [d_date_sk#376]\n                        :     :  :     :     +- Filter ((isnotnull(d_date#378) AND ((d_date#378 >= 1998-08-04) AND (d_date#378 <= 1998-08-18))) AND isnotnull(d_date_sk#376))\n                        :     :  :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#376,d_date_id#377,d_date#378,d_month_seq#379,d_week_seq#380,d_quarter_seq#381,d_year#382,d_dow#383,d_moy#384,d_dom#385,d_qoy#386,d_fy_year#387,d_fy_quarter_seq#388,d_fy_week_seq#389,d_day_name#390,d_quarter_name#391,d_holiday#392,d_weekend#393,d_following_holiday#394,d_first_dom#395,d_last_dom#396,d_same_day_ly#397,d_same_day_lq#398,d_current_day#399,... 4 more fields] parquet\n                        :     :  :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#230,ws_ship_date_sk#231,ws_item_sk#232,ws_bill_customer_sk#233,ws_bill_cdemo_sk#234,ws_bill_hdemo_sk#235,ws_bill_addr_sk#236,ws_ship_customer_sk#237,ws_ship_cdemo_sk#238,ws_ship_hdemo_sk#239,ws_ship_addr_sk#240,ws_web_page_sk#241,ws_web_site_sk#242,ws_ship_mode_sk#243,ws_warehouse_sk#244,ws_promo_sk#245,ws_order_number#246L,ws_quantity#247,ws_wholesale_cost#248,ws_list_price#249,ws_sales_price#250,ws_ext_discount_amt#251,ws_ext_sales_price#252,ws_ext_wholesale_cost#253,... 10 more fields] parquet\n                        :     :  +- Project [ws_web_site_sk#354 AS wsr_web_site_sk#50, wr_returned_date_sk#287 AS date_sk#51, 0.00 AS sales_price#52, 0.00 AS profit#53, wr_return_amt#278 AS return_amt#54, wr_net_loss#286 AS net_loss#55]\n                        :     :     +- Join Inner, ((wr_item_sk#265 = ws_item_sk#344) AND (wr_order_number#276L = ws_order_number#358L))\n                        :     :        :- Project [wr_item_sk#265, wr_order_number#276L, wr_return_amt#278, wr_net_loss#286, wr_returned_date_sk#287]\n                        :     :        :  +- Filter (isnotnull(wr_returned_date_sk#287) AND dynamicpruning#448 [wr_returned_date_sk#287])\n                        :     :        :     :  +- Project [d_date_sk#376]\n                        :     :        :     :     +- Filter ((isnotnull(d_date#378) AND ((d_date#378 >= 1998-08-04) AND (d_date#378 <= 1998-08-18))) AND isnotnull(d_date_sk#376))\n                        :     :        :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#376,d_date_id#377,d_date#378,d_month_seq#379,d_week_seq#380,d_quarter_seq#381,d_year#382,d_dow#383,d_moy#384,d_dom#385,d_qoy#386,d_fy_year#387,d_fy_quarter_seq#388,d_fy_week_seq#389,d_day_name#390,d_quarter_name#391,d_holiday#392,d_weekend#393,d_following_holiday#394,d_first_dom#395,d_last_dom#396,d_same_day_ly#397,d_same_day_lq#398,d_current_day#399,... 4 more fields] parquet\n                        :     :        :     +- Relation spark_catalog.tpcds_100.web_returns[wr_returned_time_sk#264,wr_item_sk#265,wr_refunded_customer_sk#266,wr_refunded_cdemo_sk#267,wr_refunded_hdemo_sk#268,wr_refunded_addr_sk#269,wr_returning_customer_sk#270,wr_returning_cdemo_sk#271,wr_returning_hdemo_sk#272,wr_returning_addr_sk#273,wr_web_page_sk#274,wr_reason_sk#275,wr_order_number#276L,wr_return_quantity#277,wr_return_amt#278,wr_return_tax#279,wr_return_amt_inc_tax#280,wr_fee#281,wr_return_ship_cost#282,wr_refunded_cash#283,wr_reversed_charge#284,wr_account_credit#285,wr_net_loss#286,wr_returned_date_sk#287] parquet\n                        :     :        +- Project [ws_item_sk#344, ws_web_site_sk#354, ws_order_number#358L]\n                        :     :           +- Filter ((isnotnull(ws_item_sk#344) AND isnotnull(ws_order_number#358L)) AND isnotnull(ws_web_site_sk#354))\n                        :     :              +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#342,ws_ship_date_sk#343,ws_item_sk#344,ws_bill_customer_sk#345,ws_bill_cdemo_sk#346,ws_bill_hdemo_sk#347,ws_bill_addr_sk#348,ws_ship_customer_sk#349,ws_ship_cdemo_sk#350,ws_ship_hdemo_sk#351,ws_ship_addr_sk#352,ws_web_page_sk#353,ws_web_site_sk#354,ws_ship_mode_sk#355,ws_warehouse_sk#356,ws_promo_sk#357,ws_order_number#358L,ws_quantity#359,ws_wholesale_cost#360,ws_list_price#361,ws_sales_price#362,ws_ext_discount_amt#363,ws_ext_sales_price#364,ws_ext_wholesale_cost#365,... 10 more fields] parquet\n                        :     +- Project [d_date_sk#376]\n                        :        +- Filter ((isnotnull(d_date#378) AND ((d_date#378 >= 1998-08-04) AND (d_date#378 <= 1998-08-18))) AND isnotnull(d_date_sk#376))\n                        :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#376,d_date_id#377,d_date#378,d_month_seq#379,d_week_seq#380,d_quarter_seq#381,d_year#382,d_dow#383,d_moy#384,d_dom#385,d_qoy#386,d_fy_year#387,d_fy_quarter_seq#388,d_fy_week_seq#389,d_day_name#390,d_quarter_name#391,d_holiday#392,d_weekend#393,d_following_holiday#394,d_first_dom#395,d_last_dom#396,d_same_day_ly#397,d_same_day_lq#398,d_current_day#399,... 4 more fields] parquet\n                        +- Project [web_site_sk#288, web_site_id#289]\n                           +- Filter isnotnull(web_site_sk#288)\n                              +- Relation spark_catalog.tpcds_100.web_site[web_site_sk#288,web_site_id#289,web_rec_start_date#290,web_rec_end_date#291,web_name#292,web_open_date_sk#293,web_close_date_sk#294,web_class#295,web_manager#296,web_mkt_id#297,web_mkt_class#298,web_mkt_desc#299,web_market_manager#300,web_company_id#301,web_company_name#302,web_street_number#303,web_street_name#304,web_street_type#305,web_suite_number#306,web_city#307,web_county#308,web_state#309,web_zip#310,web_country#311,... 2 more fields] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 108408151304,
      "inputRowCount" : 611610103
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "8" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : -605420609,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 85696,
            "rowCount" : 1339,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [web_site_id#289], [MakeDecimal(sum(UnscaledValue(sales_price#495)),17,2) AS sales#505, MakeDecimal(sum(UnscaledValue(return_amt#497)),17,2) AS returns#507, (MakeDecimal(sum(UnscaledValue(profit#496)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#498)),17,2)) AS profit#457, web channel AS channel#629, concat(web_site, web_site_id#289) AS id#630], HashAggregate(keys=[web_site_id#289], functions=[sum(UnscaledValue(sales_price#495)), sum(UnscaledValue(return_amt#497)), sum(UnscaledValue(profit#496)), sum(UnscaledValue(net_loss#498))]) "
          },
          "4" : {
            "sign" : -1395023961,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Expand",
            "sizeInBytes" : 6082560,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Expand Arguments: [[sales#473, returns#475, profit#451, channel#617, id#618, 0], [sales#473, returns#475, profit#451, channel#617, null, 1], [sales#473, returns#475, profit#451, null, null, 3]], [sales#473, returns#475, profit#451, channel#620, id#621, spark_grouping_id#619L] "
          },
          "5" : {
            "sign" : -195318572,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 1824768,
            "rowCount" : 28512,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "6" : {
            "sign" : 1295834334,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 385920,
            "rowCount" : 6030,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [s_store_id#132], [MakeDecimal(sum(UnscaledValue(sales_price#463)),17,2) AS sales#473, MakeDecimal(sum(UnscaledValue(return_amt#465)),17,2) AS returns#475, (MakeDecimal(sum(UnscaledValue(profit#464)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#466)),17,2)) AS profit#451, store channel AS channel#617, concat(store, s_store_id#132) AS id#618], HashAggregate(keys=[s_store_id#132], functions=[sum(UnscaledValue(sales_price#463)), sum(UnscaledValue(return_amt#465)), sum(UnscaledValue(profit#464)), sum(UnscaledValue(net_loss#466))]) "
          },
          "1" : {
            "sign" : 1929669759,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 7299072,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -2003452372,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 9600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1872058242,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 7299072,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#620 ASC NULLS FIRST, id#621 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -890924188,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1353152,
            "rowCount" : 21143,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cp_catalog_page_id#222], [MakeDecimal(sum(UnscaledValue(sales_price#479)),17,2) AS sales#489, MakeDecimal(sum(UnscaledValue(return_amt#481)),17,2) AS returns#491, (MakeDecimal(sum(UnscaledValue(profit#480)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#482)),17,2)) AS profit#454, catalog channel AS channel#627, concat(catalog_page, cp_catalog_page_id#222) AS id#628], HashAggregate(keys=[cp_catalog_page_id#222], functions=[sum(UnscaledValue(sales_price#479)), sum(UnscaledValue(return_amt#481)), sum(UnscaledValue(profit#480)), sum(UnscaledValue(net_loss#482))]) "
          },
          "3" : {
            "sign" : 7189513,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 7299072,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#620, id#621, spark_grouping_id#619L], [channel#620, id#621, sum(sales#473) AS sales#458, sum(returns#475) AS returns#459, sum(profit#451) AS profit#460] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Union",
          "toId" : 4,
          "toName" : "Expand",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Expand",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#620 ASC NULLS FIRST, id#621 ASC NULLS FIRST], true\n      +- Aggregate [channel#620, id#621, spark_grouping_id#619L], [channel#620, id#621, sum(sales#473) AS sales#458, sum(returns#475) AS returns#459, sum(profit#451) AS profit#460]\n         +- Expand [[sales#473, returns#475, profit#451, channel#617, id#618, 0], [sales#473, returns#475, profit#451, channel#617, null, 1], [sales#473, returns#475, profit#451, null, null, 3]], [sales#473, returns#475, profit#451, channel#620, id#621, spark_grouping_id#619L]\n            +- Union false, false\n               :- LogicalQueryStage Aggregate [s_store_id#132], [MakeDecimal(sum(UnscaledValue(sales_price#463)),17,2) AS sales#473, MakeDecimal(sum(UnscaledValue(return_amt#465)),17,2) AS returns#475, (MakeDecimal(sum(UnscaledValue(profit#464)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#466)),17,2)) AS profit#451, store channel AS channel#617, concat(store, s_store_id#132) AS id#618], HashAggregate(keys=[s_store_id#132], functions=[sum(UnscaledValue(sales_price#463)), sum(UnscaledValue(return_amt#465)), sum(UnscaledValue(profit#464)), sum(UnscaledValue(net_loss#466))])\n               :- LogicalQueryStage Aggregate [cp_catalog_page_id#222], [MakeDecimal(sum(UnscaledValue(sales_price#479)),17,2) AS sales#489, MakeDecimal(sum(UnscaledValue(return_amt#481)),17,2) AS returns#491, (MakeDecimal(sum(UnscaledValue(profit#480)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#482)),17,2)) AS profit#454, catalog channel AS channel#627, concat(catalog_page, cp_catalog_page_id#222) AS id#628], HashAggregate(keys=[cp_catalog_page_id#222], functions=[sum(UnscaledValue(sales_price#479)), sum(UnscaledValue(return_amt#481)), sum(UnscaledValue(profit#480)), sum(UnscaledValue(net_loss#482))])\n               +- LogicalQueryStage Aggregate [web_site_id#289], [MakeDecimal(sum(UnscaledValue(sales_price#495)),17,2) AS sales#505, MakeDecimal(sum(UnscaledValue(return_amt#497)),17,2) AS returns#507, (MakeDecimal(sum(UnscaledValue(profit#496)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#498)),17,2)) AS profit#457, web channel AS channel#629, concat(web_site, web_site_id#289) AS id#630], HashAggregate(keys=[web_site_id#289], functions=[sum(UnscaledValue(sales_price#495)), sum(UnscaledValue(return_amt#497)), sum(UnscaledValue(profit#496)), sum(UnscaledValue(net_loss#498))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1824768,
        "inputRowCount" : 28512
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226528801,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 842,
        "IOBytes" : {
          "Total" : 1693938,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1586484,
            "SW" : 107454
          }
        }
      }
    },
    "4" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -1080569702,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1220639558732880,
            "rowCount" : 23473837667940,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (date_sk#494 = d_date_sk#571) "
          },
          "8" : {
            "sign" : -511227864,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 40562791490200320,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [web_site_id#289], [MakeDecimal(sum(UnscaledValue(sales_price#495)),17,2) AS sales#505, MakeDecimal(sum(UnscaledValue(return_amt#497)),17,2) AS returns#507, (MakeDecimal(sum(UnscaledValue(profit#496)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#498)),17,2)) AS profit#457, web channel AS channel#629, concat(web_site, web_site_id#289) AS id#630] "
          },
          "19" : {
            "sign" : -1179734106,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#571, d_date_id#572, d_date#573, d_month_seq#574, d_week_seq#575, d_quarter_seq#576, d_year#577, d_dow#578, d_moy#579, d_dom#580, d_qoy#581, d_fy_year#582, d_fy_quarter_seq#583, d_fy_week_seq#584, d_day_name#585, d_quarter_name#586, d_holiday#587, d_weekend#588, d_following_holiday#589, d_first_dom#590, d_last_dom#591, d_same_day_ly#592, d_same_day_lq#593, d_current_day#594, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "23" : {
            "sign" : -366447926,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2303473824,
            "rowCount" : 71983557,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_item_sk#539, ws_web_site_sk#549, ws_order_number#553L], ShuffleQueryStage 6 "
          },
          "4" : {
            "sign" : 725554624,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Expand",
            "sizeInBytes" : 135209304973105200,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Expand Arguments: [[sales#473, returns#475, profit#451, channel#617, id#618, 0], [sales#473, returns#475, profit#451, channel#617, null, 1], [sales#473, returns#475, profit#451, null, null, 3]], [sales#473, returns#475, profit#451, channel#620, id#621, spark_grouping_id#619L] "
          },
          "15" : {
            "sign" : -1750723565,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14968839184,
            "rowCount" : 71965573,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ws_sold_date_sk#263) AND isnotnull(ws_web_site_sk#242)) AND dynamicpruning#633 [ws_sold_date_sk#263]) "
          },
          "11" : {
            "sign" : -1981387328,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1032848857389360,
            "rowCount" : 23473837667940,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [wsr_web_site_sk#493, sales_price#495, profit#496, return_amt#497, net_loss#498] "
          },
          "9" : {
            "sign" : 699017997,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 33802326241833600,
            "rowCount" : 563372104030560,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales_price#495, profit#496, return_amt#497, net_loss#498, web_site_id#289] "
          },
          "22" : {
            "sign" : -696082401,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1043472,
            "rowCount" : 21739,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Project [wr_item_sk#265, wr_order_number#276L, wr_return_amt#278, wr_net_loss#286, wr_returned_date_sk#287], ShuffleQueryStage 5, BroadcastQueryStage 12 "
          },
          "13" : {
            "sign" : 1476946815,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 75116280537408,
            "rowCount" : 1564922511196,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "24" : {
            "sign" : -1247614395,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048696,
            "rowCount" : 15,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#571], BroadcastQueryStage 8 "
          },
          "16" : {
            "sign" : 1265230408,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#230, ws_ship_date_sk#231, ws_item_sk#232, ws_bill_customer_sk#233, ws_bill_cdemo_sk#234, ws_bill_hdemo_sk#235, ws_bill_addr_sk#236, ws_ship_customer_sk#237, ws_ship_cdemo_sk#238, ws_ship_hdemo_sk#239, ws_ship_addr_sk#240, ws_web_page_sk#241, ws_web_site_sk#242, ws_ship_mode_sk#243, ws_warehouse_sk#244, ws_promo_sk#245, ws_order_number#246L, ws_quantity#247, ws_wholesale_cost#248, ws_list_price#249, ws_sales_price#250, ws_ext_discount_amt#251, ws_ext_sales_price#252, ws_ext_wholesale_cost#253, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "5" : {
            "sign" : 312602853,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 40562791491931560,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "10" : {
            "sign" : -1787905692,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 38309303074078080,
            "rowCount" : 563372104030560,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (wsr_web_site_sk#493 = web_site_sk#288) "
          },
          "21" : {
            "sign" : -268593408,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 87631630554888,
            "rowCount" : 1564850545623,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((wr_item_sk#265 = ws_item_sk#539) AND (wr_order_number#276L = ws_order_number#553L)) "
          },
          "6" : {
            "sign" : 1295834334,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 17640,
            "rowCount" : 210,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [s_store_id#132], [MakeDecimal(sum(UnscaledValue(sales_price#463)),17,2) AS sales#473, MakeDecimal(sum(UnscaledValue(return_amt#465)),17,2) AS returns#475, (MakeDecimal(sum(UnscaledValue(profit#464)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#466)),17,2)) AS profit#451, store channel AS channel#617, concat(store, s_store_id#132) AS id#618], HashAggregate(keys=[s_store_id#132], functions=[sum(UnscaledValue(sales_price#463)), sum(UnscaledValue(return_amt#465)), sum(UnscaledValue(profit#464)), sum(UnscaledValue(net_loss#466))]) "
          },
          "1" : {
            "sign" : -362394288,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 162251165967726240,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -1437727159,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 168,
            "rowCount" : 14,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#571] "
          },
          "25" : {
            "sign" : -885356408,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048768,
            "rowCount" : 24,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [web_site_sk#288, web_site_id#289], BroadcastQueryStage 9 "
          },
          "14" : {
            "sign" : 1052684669,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3454347504,
            "rowCount" : 71965573,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_web_site_sk#242 AS wsr_web_site_sk#493, ws_sold_date_sk#263 AS date_sk#494, ws_ext_sales_price#252 AS sales_price#495, ws_net_profit#262 AS profit#496, 0.00 AS return_amt#497, 0.00 AS net_loss#498] "
          },
          "0" : {
            "sign" : -61152421,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 9600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -346817022,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 75112826189904,
            "rowCount" : 1564850545623,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_web_site_sk#549 AS wsr_web_site_sk#499, wr_returned_date_sk#287 AS date_sk#500, 0.00 AS sales_price#501, 0.00 AS profit#502, wr_return_amt#278 AS return_amt#503, wr_net_loss#286 AS net_loss#504] "
          },
          "2" : {
            "sign" : 1462860037,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 162251165967726240,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#620 ASC NULLS FIRST, id#621 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 454951658,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3444,
            "rowCount" : 14,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#573) AND ((d_date#573 >= 1998-08-04) AND (d_date#573 <= 1998-08-18))) AND isnotnull(d_date_sk#571)) "
          },
          "7" : {
            "sign" : -890924188,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1713600,
            "rowCount" : 20400,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cp_catalog_page_id#222], [MakeDecimal(sum(UnscaledValue(sales_price#479)),17,2) AS sales#489, MakeDecimal(sum(UnscaledValue(return_amt#481)),17,2) AS returns#491, (MakeDecimal(sum(UnscaledValue(profit#480)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#482)),17,2)) AS profit#454, catalog channel AS channel#627, concat(catalog_page, cp_catalog_page_id#222) AS id#628], HashAggregate(keys=[cp_catalog_page_id#222], functions=[sum(UnscaledValue(sales_price#479)), sum(UnscaledValue(return_amt#481)), sum(UnscaledValue(profit#480)), sum(UnscaledValue(net_loss#482))]) "
          },
          "3" : {
            "sign" : -2055028902,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 162251165967726240,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#620, id#621, spark_grouping_id#619L], [channel#620, id#621, sum(sales#473) AS sales#458, sum(returns#475) AS returns#459, sum(profit#451) AS profit#460] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalRelation",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalRelation",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Filter",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalQueryStage",
          "toId" : 21,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "LogicalQueryStage",
          "toId" : 21,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Join",
          "toId" : 20,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Union",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Join",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Aggregate",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Union",
          "toId" : 4,
          "toName" : "Expand",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Expand",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#620 ASC NULLS FIRST, id#621 ASC NULLS FIRST], true\n      +- Aggregate [channel#620, id#621, spark_grouping_id#619L], [channel#620, id#621, sum(sales#473) AS sales#458, sum(returns#475) AS returns#459, sum(profit#451) AS profit#460]\n         +- Expand [[sales#473, returns#475, profit#451, channel#617, id#618, 0], [sales#473, returns#475, profit#451, channel#617, null, 1], [sales#473, returns#475, profit#451, null, null, 3]], [sales#473, returns#475, profit#451, channel#620, id#621, spark_grouping_id#619L]\n            +- Union false, false\n               :- LogicalQueryStage Aggregate [s_store_id#132], [MakeDecimal(sum(UnscaledValue(sales_price#463)),17,2) AS sales#473, MakeDecimal(sum(UnscaledValue(return_amt#465)),17,2) AS returns#475, (MakeDecimal(sum(UnscaledValue(profit#464)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#466)),17,2)) AS profit#451, store channel AS channel#617, concat(store, s_store_id#132) AS id#618], HashAggregate(keys=[s_store_id#132], functions=[sum(UnscaledValue(sales_price#463)), sum(UnscaledValue(return_amt#465)), sum(UnscaledValue(profit#464)), sum(UnscaledValue(net_loss#466))])\n               :- LogicalQueryStage Aggregate [cp_catalog_page_id#222], [MakeDecimal(sum(UnscaledValue(sales_price#479)),17,2) AS sales#489, MakeDecimal(sum(UnscaledValue(return_amt#481)),17,2) AS returns#491, (MakeDecimal(sum(UnscaledValue(profit#480)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#482)),17,2)) AS profit#454, catalog channel AS channel#627, concat(catalog_page, cp_catalog_page_id#222) AS id#628], HashAggregate(keys=[cp_catalog_page_id#222], functions=[sum(UnscaledValue(sales_price#479)), sum(UnscaledValue(return_amt#481)), sum(UnscaledValue(profit#480)), sum(UnscaledValue(net_loss#482))])\n               +- Aggregate [web_site_id#289], [MakeDecimal(sum(UnscaledValue(sales_price#495)),17,2) AS sales#505, MakeDecimal(sum(UnscaledValue(return_amt#497)),17,2) AS returns#507, (MakeDecimal(sum(UnscaledValue(profit#496)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#498)),17,2)) AS profit#457, web channel AS channel#629, concat(web_site, web_site_id#289) AS id#630]\n                  +- Project [sales_price#495, profit#496, return_amt#497, net_loss#498, web_site_id#289]\n                     +- Join Inner, (wsr_web_site_sk#493 = web_site_sk#288)\n                        :- Project [wsr_web_site_sk#493, sales_price#495, profit#496, return_amt#497, net_loss#498]\n                        :  +- Join Inner, (date_sk#494 = d_date_sk#571)\n                        :     :- Union false, false\n                        :     :  :- Project [ws_web_site_sk#242 AS wsr_web_site_sk#493, ws_sold_date_sk#263 AS date_sk#494, ws_ext_sales_price#252 AS sales_price#495, ws_net_profit#262 AS profit#496, 0.00 AS return_amt#497, 0.00 AS net_loss#498]\n                        :     :  :  +- Filter ((isnotnull(ws_sold_date_sk#263) AND isnotnull(ws_web_site_sk#242)) AND dynamicpruning#633 [ws_sold_date_sk#263])\n                        :     :  :     :  +- Project [d_date_sk#571]\n                        :     :  :     :     +- Filter ((isnotnull(d_date#573) AND ((d_date#573 >= 1998-08-04) AND (d_date#573 <= 1998-08-18))) AND isnotnull(d_date_sk#571))\n                        :     :  :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#571,d_date_id#572,d_date#573,d_month_seq#574,d_week_seq#575,d_quarter_seq#576,d_year#577,d_dow#578,d_moy#579,d_dom#580,d_qoy#581,d_fy_year#582,d_fy_quarter_seq#583,d_fy_week_seq#584,d_day_name#585,d_quarter_name#586,d_holiday#587,d_weekend#588,d_following_holiday#589,d_first_dom#590,d_last_dom#591,d_same_day_ly#592,d_same_day_lq#593,d_current_day#594,... 4 more fields] parquet\n                        :     :  :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#230,ws_ship_date_sk#231,ws_item_sk#232,ws_bill_customer_sk#233,ws_bill_cdemo_sk#234,ws_bill_hdemo_sk#235,ws_bill_addr_sk#236,ws_ship_customer_sk#237,ws_ship_cdemo_sk#238,ws_ship_hdemo_sk#239,ws_ship_addr_sk#240,ws_web_page_sk#241,ws_web_site_sk#242,ws_ship_mode_sk#243,ws_warehouse_sk#244,ws_promo_sk#245,ws_order_number#246L,ws_quantity#247,ws_wholesale_cost#248,ws_list_price#249,ws_sales_price#250,ws_ext_discount_amt#251,ws_ext_sales_price#252,ws_ext_wholesale_cost#253,... 10 more fields] parquet\n                        :     :  +- Project [ws_web_site_sk#549 AS wsr_web_site_sk#499, wr_returned_date_sk#287 AS date_sk#500, 0.00 AS sales_price#501, 0.00 AS profit#502, wr_return_amt#278 AS return_amt#503, wr_net_loss#286 AS net_loss#504]\n                        :     :     +- Join Inner, ((wr_item_sk#265 = ws_item_sk#539) AND (wr_order_number#276L = ws_order_number#553L))\n                        :     :        :- LogicalQueryStage LogicalQueryStage Project [wr_item_sk#265, wr_order_number#276L, wr_return_amt#278, wr_net_loss#286, wr_returned_date_sk#287], ShuffleQueryStage 5, BroadcastQueryStage 12\n                        :     :        +- LogicalQueryStage Project [ws_item_sk#539, ws_web_site_sk#549, ws_order_number#553L], ShuffleQueryStage 6\n                        :     +- LogicalQueryStage Project [d_date_sk#571], BroadcastQueryStage 8\n                        +- LogicalQueryStage Project [web_site_sk#288, web_site_id#289], BroadcastQueryStage 9\n"
      },
      "IM" : {
        "inputSizeInBytes" : 17280939792,
        "inputRowCount" : 144009569
      },
      "PD" : {
        "1" : [ 5248901, 5302968, 5283311, 5313845, 5327280, 5276466, 5263957, 5285198, 5326922, 5302355, 5292704, 5320266, 5276108, 5269739, 5279442, 5286575, 5284448, 5277895, 5301539, 5270234, 5319674, 5269876, 5283614, 5273350, 5294949, 5282953, 5282643, 5276924, 5266147, 5256733, 5289130, 5273450, 5272652, 5321764, 5304965, 5271223, 5282798, 5280911, 5300025, 5286272, 5296754, 5287564, 5305781, 5289248, 5297049, 5281487, 5263344, 5309713, 5299036, 5300365, 5297562, 5248993, 5291120, 5262212, 5276621, 5270592, 5311087, 5269639, 5295362, 5268547, 5269108, 5267989, 5281642, 5290101, 5286885, 5255270, 5285456, 5297607, 5245069, 5265652, 5297670, 5281524, 5271408, 5276466, 5275595, 5281432, 5278711, 5268805, 5278050, 5317016, 5308539, 5280956, 5284282, 5285301, 5276887, 5246335, 5301702, 5321103, 5246353, 5301539, 5267934, 5306597, 5275137, 5267018, 5286014, 5257780, 5330854, 5239645, 5278353, 5279169, 5282100, 5284548, 5272937, 5259457, 5274624, 5292364, 5277950, 5279287, 5267073, 5289588, 5254014, 5281214, 5268465, 5316108, 5276566, 5308484, 5278253, 5280911, 5302070, 5287343, 5294033, 5286527, 5262739, 5303023, 5281927, 5291035, 5273250, 5276466, 5258028, 5288059, 5320690, 5319261, 5282285, 5259646, 5303023, 5272652, 5301181, 5303599, 5321506, 5264360, 5243732, 5275037, 5308502, 5289964, 5250880, 5294096, 5288938, 5256396, 5264205, 5282503, 5313763, 5294564, 5278308, 5262233, 5257330, 5291788, 5268447, 5303381, 5274827, 5285814, 5317016, 5259715, 5288617, 5304917, 5278153, 5248085, 5314203, 5302968, 5271471, 5299294, 5267291, 5265652, 5289861, 5301849, 5304094, 5278526, 5275395, 5292859, 5259457, 5274642, 5272955, 5280040, 5275255, 5290514, 5272534, 5280040, 5264378, 5293217, 5286527, 5278387, 5293520, 5256754, 5254912, 5295059, 5299449, 5271681, 5294291, 5257891, 5295517, 5281806 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226526082,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 3561,
        "IOBytes" : {
          "Total" : 1061634885,
          "Details" : {
            "IR" : 48240308,
            "IW" : 0,
            "SR" : 1011808093,
            "SW" : 1586484
          }
        }
      }
    },
    "9" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : 342643002,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 9600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "1" : {
            "sign" : -1379627203,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 301304,
            "rowCount" : 1723,
            "isRuntime" : true,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -917649584,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 301304,
            "rowCount" : 1723,
            "isRuntime" : true,
            "predicate" : " (unknown) Sort Arguments: [channel#620 ASC NULLS FIRST, id#621 ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : 2052626163,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 301304,
            "rowCount" : 1723,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [channel#620, id#621, spark_grouping_id#619L], [channel#620, id#621, sum(sales#473) AS sales#458, sum(returns#475) AS returns#459, sum(profit#451) AS profit#460], HashAggregate(keys=[channel#620, id#621, spark_grouping_id#619L], functions=[sum(sales#473), sum(returns#475), sum(profit#451)]) "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#620 ASC NULLS FIRST, id#621 ASC NULLS FIRST], true\n      +- LogicalQueryStage Aggregate [channel#620, id#621, spark_grouping_id#619L], [channel#620, id#621, sum(sales#473) AS sales#458, sum(returns#475) AS returns#459, sum(profit#451) AS profit#460], HashAggregate(keys=[channel#620, id#621, spark_grouping_id#619L], functions=[sum(sales#473), sum(returns#475), sum(profit#451)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 301304,
        "inputRowCount" : 1723
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226529334,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 309,
        "IOBytes" : {
          "Total" : 107454,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 107454,
            "SW" : 0
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -1080569702,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1220639558732880,
            "rowCount" : 23473837667940,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (date_sk#494 = d_date_sk#571) "
          },
          "8" : {
            "sign" : -511227864,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 40562791490200320,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [web_site_id#289], [MakeDecimal(sum(UnscaledValue(sales_price#495)),17,2) AS sales#505, MakeDecimal(sum(UnscaledValue(return_amt#497)),17,2) AS returns#507, (MakeDecimal(sum(UnscaledValue(profit#496)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#498)),17,2)) AS profit#457, web channel AS channel#629, concat(web_site, web_site_id#289) AS id#630] "
          },
          "19" : {
            "sign" : -1179734106,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#571, d_date_id#572, d_date#573, d_month_seq#574, d_week_seq#575, d_quarter_seq#576, d_year#577, d_dow#578, d_moy#579, d_dom#580, d_qoy#581, d_fy_year#582, d_fy_quarter_seq#583, d_fy_week_seq#584, d_day_name#585, d_quarter_name#586, d_holiday#587, d_weekend#588, d_following_holiday#589, d_first_dom#590, d_last_dom#591, d_same_day_ly#592, d_same_day_lq#593, d_current_day#594, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "23" : {
            "sign" : -366447926,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2303473824,
            "rowCount" : 71983557,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_item_sk#539, ws_web_site_sk#549, ws_order_number#553L], ShuffleQueryStage 6 "
          },
          "4" : {
            "sign" : 725554624,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Expand",
            "sizeInBytes" : 135209304974332800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Expand Arguments: [[sales#473, returns#475, profit#451, channel#617, id#618, 0], [sales#473, returns#475, profit#451, channel#617, null, 1], [sales#473, returns#475, profit#451, null, null, 3]], [sales#473, returns#475, profit#451, channel#620, id#621, spark_grouping_id#619L] "
          },
          "15" : {
            "sign" : -1750723565,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14968839184,
            "rowCount" : 71965573,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ws_sold_date_sk#263) AND isnotnull(ws_web_site_sk#242)) AND dynamicpruning#633 [ws_sold_date_sk#263]) "
          },
          "11" : {
            "sign" : -1981387328,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1032848857389360,
            "rowCount" : 23473837667940,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [wsr_web_site_sk#493, sales_price#495, profit#496, return_amt#497, net_loss#498] "
          },
          "9" : {
            "sign" : 699017997,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 33802326241833600,
            "rowCount" : 563372104030560,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales_price#495, profit#496, return_amt#497, net_loss#498, web_site_id#289] "
          },
          "22" : {
            "sign" : -696082401,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1043472,
            "rowCount" : 21739,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Project [wr_item_sk#265, wr_order_number#276L, wr_return_amt#278, wr_net_loss#286, wr_returned_date_sk#287], ShuffleQueryStage 5, BroadcastQueryStage 12 "
          },
          "13" : {
            "sign" : 1476946815,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 75116280537408,
            "rowCount" : 1564922511196,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "24" : {
            "sign" : -1247614395,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048696,
            "rowCount" : 15,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#571], BroadcastQueryStage 8 "
          },
          "16" : {
            "sign" : 1265230408,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#230, ws_ship_date_sk#231, ws_item_sk#232, ws_bill_customer_sk#233, ws_bill_cdemo_sk#234, ws_bill_hdemo_sk#235, ws_bill_addr_sk#236, ws_ship_customer_sk#237, ws_ship_cdemo_sk#238, ws_ship_hdemo_sk#239, ws_ship_addr_sk#240, ws_web_page_sk#241, ws_web_site_sk#242, ws_ship_mode_sk#243, ws_warehouse_sk#244, ws_promo_sk#245, ws_order_number#246L, ws_quantity#247, ws_wholesale_cost#248, ws_list_price#249, ws_sales_price#250, ws_ext_discount_amt#251, ws_ext_sales_price#252, ws_ext_wholesale_cost#253, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "5" : {
            "sign" : 312602853,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 40562791492299840,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "10" : {
            "sign" : -1787905692,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 38309303074078080,
            "rowCount" : 563372104030560,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (wsr_web_site_sk#493 = web_site_sk#288) "
          },
          "21" : {
            "sign" : -268593408,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 87631630554888,
            "rowCount" : 1564850545623,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((wr_item_sk#265 = ws_item_sk#539) AND (wr_order_number#276L = ws_order_number#553L)) "
          },
          "6" : {
            "sign" : 1295834334,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 385920,
            "rowCount" : 6030,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [s_store_id#132], [MakeDecimal(sum(UnscaledValue(sales_price#463)),17,2) AS sales#473, MakeDecimal(sum(UnscaledValue(return_amt#465)),17,2) AS returns#475, (MakeDecimal(sum(UnscaledValue(profit#464)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#466)),17,2)) AS profit#451, store channel AS channel#617, concat(store, s_store_id#132) AS id#618], HashAggregate(keys=[s_store_id#132], functions=[sum(UnscaledValue(sales_price#463)), sum(UnscaledValue(return_amt#465)), sum(UnscaledValue(profit#464)), sum(UnscaledValue(net_loss#466))]) "
          },
          "1" : {
            "sign" : -362394288,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 162251165969199360,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -1437727159,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 168,
            "rowCount" : 14,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#571] "
          },
          "25" : {
            "sign" : -885356408,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048768,
            "rowCount" : 24,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [web_site_sk#288, web_site_id#289], BroadcastQueryStage 9 "
          },
          "14" : {
            "sign" : 1052684669,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3454347504,
            "rowCount" : 71965573,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_web_site_sk#242 AS wsr_web_site_sk#493, ws_sold_date_sk#263 AS date_sk#494, ws_ext_sales_price#252 AS sales_price#495, ws_net_profit#262 AS profit#496, 0.00 AS return_amt#497, 0.00 AS net_loss#498] "
          },
          "0" : {
            "sign" : -61152421,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 9600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -346817022,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 75112826189904,
            "rowCount" : 1564850545623,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_web_site_sk#549 AS wsr_web_site_sk#499, wr_returned_date_sk#287 AS date_sk#500, 0.00 AS sales_price#501, 0.00 AS profit#502, wr_return_amt#278 AS return_amt#503, wr_net_loss#286 AS net_loss#504] "
          },
          "2" : {
            "sign" : 1462860037,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 162251165969199360,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#620 ASC NULLS FIRST, id#621 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 454951658,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3444,
            "rowCount" : 14,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#573) AND ((d_date#573 >= 1998-08-04) AND (d_date#573 <= 1998-08-18))) AND isnotnull(d_date_sk#571)) "
          },
          "7" : {
            "sign" : -890924188,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1713600,
            "rowCount" : 20400,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cp_catalog_page_id#222], [MakeDecimal(sum(UnscaledValue(sales_price#479)),17,2) AS sales#489, MakeDecimal(sum(UnscaledValue(return_amt#481)),17,2) AS returns#491, (MakeDecimal(sum(UnscaledValue(profit#480)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#482)),17,2)) AS profit#454, catalog channel AS channel#627, concat(catalog_page, cp_catalog_page_id#222) AS id#628], HashAggregate(keys=[cp_catalog_page_id#222], functions=[sum(UnscaledValue(sales_price#479)), sum(UnscaledValue(return_amt#481)), sum(UnscaledValue(profit#480)), sum(UnscaledValue(net_loss#482))]) "
          },
          "3" : {
            "sign" : -2055028902,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 162251165969199360,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#620, id#621, spark_grouping_id#619L], [channel#620, id#621, sum(sales#473) AS sales#458, sum(returns#475) AS returns#459, sum(profit#451) AS profit#460] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalRelation",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalRelation",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Filter",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalQueryStage",
          "toId" : 21,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "LogicalQueryStage",
          "toId" : 21,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Join",
          "toId" : 20,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Union",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Join",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Aggregate",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Union",
          "toId" : 4,
          "toName" : "Expand",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Expand",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#620 ASC NULLS FIRST, id#621 ASC NULLS FIRST], true\n      +- Aggregate [channel#620, id#621, spark_grouping_id#619L], [channel#620, id#621, sum(sales#473) AS sales#458, sum(returns#475) AS returns#459, sum(profit#451) AS profit#460]\n         +- Expand [[sales#473, returns#475, profit#451, channel#617, id#618, 0], [sales#473, returns#475, profit#451, channel#617, null, 1], [sales#473, returns#475, profit#451, null, null, 3]], [sales#473, returns#475, profit#451, channel#620, id#621, spark_grouping_id#619L]\n            +- Union false, false\n               :- LogicalQueryStage Aggregate [s_store_id#132], [MakeDecimal(sum(UnscaledValue(sales_price#463)),17,2) AS sales#473, MakeDecimal(sum(UnscaledValue(return_amt#465)),17,2) AS returns#475, (MakeDecimal(sum(UnscaledValue(profit#464)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#466)),17,2)) AS profit#451, store channel AS channel#617, concat(store, s_store_id#132) AS id#618], HashAggregate(keys=[s_store_id#132], functions=[sum(UnscaledValue(sales_price#463)), sum(UnscaledValue(return_amt#465)), sum(UnscaledValue(profit#464)), sum(UnscaledValue(net_loss#466))])\n               :- LogicalQueryStage Aggregate [cp_catalog_page_id#222], [MakeDecimal(sum(UnscaledValue(sales_price#479)),17,2) AS sales#489, MakeDecimal(sum(UnscaledValue(return_amt#481)),17,2) AS returns#491, (MakeDecimal(sum(UnscaledValue(profit#480)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#482)),17,2)) AS profit#454, catalog channel AS channel#627, concat(catalog_page, cp_catalog_page_id#222) AS id#628], HashAggregate(keys=[cp_catalog_page_id#222], functions=[sum(UnscaledValue(sales_price#479)), sum(UnscaledValue(return_amt#481)), sum(UnscaledValue(profit#480)), sum(UnscaledValue(net_loss#482))])\n               +- Aggregate [web_site_id#289], [MakeDecimal(sum(UnscaledValue(sales_price#495)),17,2) AS sales#505, MakeDecimal(sum(UnscaledValue(return_amt#497)),17,2) AS returns#507, (MakeDecimal(sum(UnscaledValue(profit#496)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#498)),17,2)) AS profit#457, web channel AS channel#629, concat(web_site, web_site_id#289) AS id#630]\n                  +- Project [sales_price#495, profit#496, return_amt#497, net_loss#498, web_site_id#289]\n                     +- Join Inner, (wsr_web_site_sk#493 = web_site_sk#288)\n                        :- Project [wsr_web_site_sk#493, sales_price#495, profit#496, return_amt#497, net_loss#498]\n                        :  +- Join Inner, (date_sk#494 = d_date_sk#571)\n                        :     :- Union false, false\n                        :     :  :- Project [ws_web_site_sk#242 AS wsr_web_site_sk#493, ws_sold_date_sk#263 AS date_sk#494, ws_ext_sales_price#252 AS sales_price#495, ws_net_profit#262 AS profit#496, 0.00 AS return_amt#497, 0.00 AS net_loss#498]\n                        :     :  :  +- Filter ((isnotnull(ws_sold_date_sk#263) AND isnotnull(ws_web_site_sk#242)) AND dynamicpruning#633 [ws_sold_date_sk#263])\n                        :     :  :     :  +- Project [d_date_sk#571]\n                        :     :  :     :     +- Filter ((isnotnull(d_date#573) AND ((d_date#573 >= 1998-08-04) AND (d_date#573 <= 1998-08-18))) AND isnotnull(d_date_sk#571))\n                        :     :  :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#571,d_date_id#572,d_date#573,d_month_seq#574,d_week_seq#575,d_quarter_seq#576,d_year#577,d_dow#578,d_moy#579,d_dom#580,d_qoy#581,d_fy_year#582,d_fy_quarter_seq#583,d_fy_week_seq#584,d_day_name#585,d_quarter_name#586,d_holiday#587,d_weekend#588,d_following_holiday#589,d_first_dom#590,d_last_dom#591,d_same_day_ly#592,d_same_day_lq#593,d_current_day#594,... 4 more fields] parquet\n                        :     :  :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#230,ws_ship_date_sk#231,ws_item_sk#232,ws_bill_customer_sk#233,ws_bill_cdemo_sk#234,ws_bill_hdemo_sk#235,ws_bill_addr_sk#236,ws_ship_customer_sk#237,ws_ship_cdemo_sk#238,ws_ship_hdemo_sk#239,ws_ship_addr_sk#240,ws_web_page_sk#241,ws_web_site_sk#242,ws_ship_mode_sk#243,ws_warehouse_sk#244,ws_promo_sk#245,ws_order_number#246L,ws_quantity#247,ws_wholesale_cost#248,ws_list_price#249,ws_sales_price#250,ws_ext_discount_amt#251,ws_ext_sales_price#252,ws_ext_wholesale_cost#253,... 10 more fields] parquet\n                        :     :  +- Project [ws_web_site_sk#549 AS wsr_web_site_sk#499, wr_returned_date_sk#287 AS date_sk#500, 0.00 AS sales_price#501, 0.00 AS profit#502, wr_return_amt#278 AS return_amt#503, wr_net_loss#286 AS net_loss#504]\n                        :     :     +- Join Inner, ((wr_item_sk#265 = ws_item_sk#539) AND (wr_order_number#276L = ws_order_number#553L))\n                        :     :        :- LogicalQueryStage LogicalQueryStage Project [wr_item_sk#265, wr_order_number#276L, wr_return_amt#278, wr_net_loss#286, wr_returned_date_sk#287], ShuffleQueryStage 5, BroadcastQueryStage 12\n                        :     :        +- LogicalQueryStage Project [ws_item_sk#539, ws_web_site_sk#549, ws_order_number#553L], ShuffleQueryStage 6\n                        :     +- LogicalQueryStage Project [d_date_sk#571], BroadcastQueryStage 8\n                        +- LogicalQueryStage Project [web_site_sk#288, web_site_id#289], BroadcastQueryStage 9\n"
      },
      "IM" : {
        "inputSizeInBytes" : 17281308072,
        "inputRowCount" : 144015389
      },
      "PD" : {
        "1" : [ 5248901, 5302968, 5283311, 5313845, 5327280, 5276466, 5263957, 5285198, 5326922, 5302355, 5292704, 5320266, 5276108, 5269739, 5279442, 5286575, 5284448, 5277895, 5301539, 5270234, 5319674, 5269876, 5283614, 5273350, 5294949, 5282953, 5282643, 5276924, 5266147, 5256733, 5289130, 5273450, 5272652, 5321764, 5304965, 5271223, 5282798, 5280911, 5300025, 5286272, 5296754, 5287564, 5305781, 5289248, 5297049, 5281487, 5263344, 5309713, 5299036, 5300365, 5297562, 5248993, 5291120, 5262212, 5276621, 5270592, 5311087, 5269639, 5295362, 5268547, 5269108, 5267989, 5281642, 5290101, 5286885, 5255270, 5285456, 5297607, 5245069, 5265652, 5297670, 5281524, 5271408, 5276466, 5275595, 5281432, 5278711, 5268805, 5278050, 5317016, 5308539, 5280956, 5284282, 5285301, 5276887, 5246335, 5301702, 5321103, 5246353, 5301539, 5267934, 5306597, 5275137, 5267018, 5286014, 5257780, 5330854, 5239645, 5278353, 5279169, 5282100, 5284548, 5272937, 5259457, 5274624, 5292364, 5277950, 5279287, 5267073, 5289588, 5254014, 5281214, 5268465, 5316108, 5276566, 5308484, 5278253, 5280911, 5302070, 5287343, 5294033, 5286527, 5262739, 5303023, 5281927, 5291035, 5273250, 5276466, 5258028, 5288059, 5320690, 5319261, 5282285, 5259646, 5303023, 5272652, 5301181, 5303599, 5321506, 5264360, 5243732, 5275037, 5308502, 5289964, 5250880, 5294096, 5288938, 5256396, 5264205, 5282503, 5313763, 5294564, 5278308, 5262233, 5257330, 5291788, 5268447, 5303381, 5274827, 5285814, 5317016, 5259715, 5288617, 5304917, 5278153, 5248085, 5314203, 5302968, 5271471, 5299294, 5267291, 5265652, 5289861, 5301849, 5304094, 5278526, 5275395, 5292859, 5259457, 5274642, 5272955, 5280040, 5275255, 5290514, 5272534, 5280040, 5264378, 5293217, 5286527, 5278387, 5293520, 5256754, 5254912, 5295059, 5299449, 5271681, 5294291, 5257891, 5295517, 5281806 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226526525,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 3118,
        "IOBytes" : {
          "Total" : 1035281767,
          "Details" : {
            "IR" : 22299451,
            "IW" : 0,
            "SR" : 1011808093,
            "SW" : 1174223
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -1080569702,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1220639558732880,
            "rowCount" : 23473837667940,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (date_sk#494 = d_date_sk#571) "
          },
          "8" : {
            "sign" : -511227864,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 40562791490200320,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [web_site_id#289], [MakeDecimal(sum(UnscaledValue(sales_price#495)),17,2) AS sales#505, MakeDecimal(sum(UnscaledValue(return_amt#497)),17,2) AS returns#507, (MakeDecimal(sum(UnscaledValue(profit#496)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#498)),17,2)) AS profit#457, web channel AS channel#629, concat(web_site, web_site_id#289) AS id#630] "
          },
          "19" : {
            "sign" : -1179734106,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#571, d_date_id#572, d_date#573, d_month_seq#574, d_week_seq#575, d_quarter_seq#576, d_year#577, d_dow#578, d_moy#579, d_dom#580, d_qoy#581, d_fy_year#582, d_fy_quarter_seq#583, d_fy_week_seq#584, d_day_name#585, d_quarter_name#586, d_holiday#587, d_weekend#588, d_following_holiday#589, d_first_dom#590, d_last_dom#591, d_same_day_ly#592, d_same_day_lq#593, d_current_day#594, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "23" : {
            "sign" : -366447926,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2303473824,
            "rowCount" : 71983557,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_item_sk#539, ws_web_site_sk#549, ws_order_number#553L], ShuffleQueryStage 6 "
          },
          "4" : {
            "sign" : 725554624,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Expand",
            "sizeInBytes" : 135209304973131306,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Expand Arguments: [[sales#473, returns#475, profit#451, channel#617, id#618, 0], [sales#473, returns#475, profit#451, channel#617, null, 1], [sales#473, returns#475, profit#451, null, null, 3]], [sales#473, returns#475, profit#451, channel#620, id#621, spark_grouping_id#619L] "
          },
          "15" : {
            "sign" : -1750723565,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14968839184,
            "rowCount" : 71965573,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ws_sold_date_sk#263) AND isnotnull(ws_web_site_sk#242)) AND dynamicpruning#633 [ws_sold_date_sk#263]) "
          },
          "11" : {
            "sign" : -1981387328,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1032848857389360,
            "rowCount" : 23473837667940,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [wsr_web_site_sk#493, sales_price#495, profit#496, return_amt#497, net_loss#498] "
          },
          "9" : {
            "sign" : 699017997,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 33802326241833600,
            "rowCount" : 563372104030560,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales_price#495, profit#496, return_amt#497, net_loss#498, web_site_id#289] "
          },
          "22" : {
            "sign" : -696082401,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1043472,
            "rowCount" : 21739,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Project [wr_item_sk#265, wr_order_number#276L, wr_return_amt#278, wr_net_loss#286, wr_returned_date_sk#287], ShuffleQueryStage 5, BroadcastQueryStage 12 "
          },
          "13" : {
            "sign" : 1476946815,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 75116280537408,
            "rowCount" : 1564922511196,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "24" : {
            "sign" : -1247614395,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048696,
            "rowCount" : 15,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#571], BroadcastQueryStage 8 "
          },
          "16" : {
            "sign" : 1265230408,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#230, ws_ship_date_sk#231, ws_item_sk#232, ws_bill_customer_sk#233, ws_bill_cdemo_sk#234, ws_bill_hdemo_sk#235, ws_bill_addr_sk#236, ws_ship_customer_sk#237, ws_ship_cdemo_sk#238, ws_ship_hdemo_sk#239, ws_ship_addr_sk#240, ws_web_page_sk#241, ws_web_site_sk#242, ws_ship_mode_sk#243, ws_warehouse_sk#244, ws_promo_sk#245, ws_order_number#246L, ws_quantity#247, ws_wholesale_cost#248, ws_list_price#249, ws_sales_price#250, ws_ext_discount_amt#251, ws_ext_sales_price#252, ws_ext_wholesale_cost#253, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "5" : {
            "sign" : 312602853,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 40562791491939392,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "10" : {
            "sign" : -1787905692,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 38309303074078080,
            "rowCount" : 563372104030560,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (wsr_web_site_sk#493 = web_site_sk#288) "
          },
          "21" : {
            "sign" : -268593408,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 87631630554888,
            "rowCount" : 1564850545623,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((wr_item_sk#265 = ws_item_sk#539) AND (wr_order_number#276L = ws_order_number#553L)) "
          },
          "6" : {
            "sign" : 1295834334,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 385920,
            "rowCount" : 6030,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [s_store_id#132], [MakeDecimal(sum(UnscaledValue(sales_price#463)),17,2) AS sales#473, MakeDecimal(sum(UnscaledValue(return_amt#465)),17,2) AS returns#475, (MakeDecimal(sum(UnscaledValue(profit#464)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#466)),17,2)) AS profit#451, store channel AS channel#617, concat(store, s_store_id#132) AS id#618], HashAggregate(keys=[s_store_id#132], functions=[sum(UnscaledValue(sales_price#463)), sum(UnscaledValue(return_amt#465)), sum(UnscaledValue(profit#464)), sum(UnscaledValue(net_loss#466))]) "
          },
          "1" : {
            "sign" : -362394288,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 162251165967757567,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -1437727159,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 168,
            "rowCount" : 14,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#571] "
          },
          "25" : {
            "sign" : -885356408,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048768,
            "rowCount" : 24,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [web_site_sk#288, web_site_id#289], BroadcastQueryStage 9 "
          },
          "14" : {
            "sign" : 1052684669,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3454347504,
            "rowCount" : 71965573,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_web_site_sk#242 AS wsr_web_site_sk#493, ws_sold_date_sk#263 AS date_sk#494, ws_ext_sales_price#252 AS sales_price#495, ws_net_profit#262 AS profit#496, 0.00 AS return_amt#497, 0.00 AS net_loss#498] "
          },
          "0" : {
            "sign" : -61152421,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 9600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -346817022,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 75112826189904,
            "rowCount" : 1564850545623,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_web_site_sk#549 AS wsr_web_site_sk#499, wr_returned_date_sk#287 AS date_sk#500, 0.00 AS sales_price#501, 0.00 AS profit#502, wr_return_amt#278 AS return_amt#503, wr_net_loss#286 AS net_loss#504] "
          },
          "2" : {
            "sign" : 1462860037,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 162251165967757567,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#620 ASC NULLS FIRST, id#621 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 454951658,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3444,
            "rowCount" : 14,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#573) AND ((d_date#573 >= 1998-08-04) AND (d_date#573 <= 1998-08-18))) AND isnotnull(d_date_sk#571)) "
          },
          "7" : {
            "sign" : -890924188,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1353152,
            "rowCount" : 21143,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cp_catalog_page_id#222], [MakeDecimal(sum(UnscaledValue(sales_price#479)),17,2) AS sales#489, MakeDecimal(sum(UnscaledValue(return_amt#481)),17,2) AS returns#491, (MakeDecimal(sum(UnscaledValue(profit#480)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#482)),17,2)) AS profit#454, catalog channel AS channel#627, concat(catalog_page, cp_catalog_page_id#222) AS id#628], HashAggregate(keys=[cp_catalog_page_id#222], functions=[sum(UnscaledValue(sales_price#479)), sum(UnscaledValue(return_amt#481)), sum(UnscaledValue(profit#480)), sum(UnscaledValue(net_loss#482))]) "
          },
          "3" : {
            "sign" : -2055028902,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 162251165967757567,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#620, id#621, spark_grouping_id#619L], [channel#620, id#621, sum(sales#473) AS sales#458, sum(returns#475) AS returns#459, sum(profit#451) AS profit#460] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalRelation",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalRelation",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Filter",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalQueryStage",
          "toId" : 21,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "LogicalQueryStage",
          "toId" : 21,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Join",
          "toId" : 20,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Union",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Join",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Aggregate",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Union",
          "toId" : 4,
          "toName" : "Expand",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Expand",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#620 ASC NULLS FIRST, id#621 ASC NULLS FIRST], true\n      +- Aggregate [channel#620, id#621, spark_grouping_id#619L], [channel#620, id#621, sum(sales#473) AS sales#458, sum(returns#475) AS returns#459, sum(profit#451) AS profit#460]\n         +- Expand [[sales#473, returns#475, profit#451, channel#617, id#618, 0], [sales#473, returns#475, profit#451, channel#617, null, 1], [sales#473, returns#475, profit#451, null, null, 3]], [sales#473, returns#475, profit#451, channel#620, id#621, spark_grouping_id#619L]\n            +- Union false, false\n               :- LogicalQueryStage Aggregate [s_store_id#132], [MakeDecimal(sum(UnscaledValue(sales_price#463)),17,2) AS sales#473, MakeDecimal(sum(UnscaledValue(return_amt#465)),17,2) AS returns#475, (MakeDecimal(sum(UnscaledValue(profit#464)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#466)),17,2)) AS profit#451, store channel AS channel#617, concat(store, s_store_id#132) AS id#618], HashAggregate(keys=[s_store_id#132], functions=[sum(UnscaledValue(sales_price#463)), sum(UnscaledValue(return_amt#465)), sum(UnscaledValue(profit#464)), sum(UnscaledValue(net_loss#466))])\n               :- LogicalQueryStage Aggregate [cp_catalog_page_id#222], [MakeDecimal(sum(UnscaledValue(sales_price#479)),17,2) AS sales#489, MakeDecimal(sum(UnscaledValue(return_amt#481)),17,2) AS returns#491, (MakeDecimal(sum(UnscaledValue(profit#480)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#482)),17,2)) AS profit#454, catalog channel AS channel#627, concat(catalog_page, cp_catalog_page_id#222) AS id#628], HashAggregate(keys=[cp_catalog_page_id#222], functions=[sum(UnscaledValue(sales_price#479)), sum(UnscaledValue(return_amt#481)), sum(UnscaledValue(profit#480)), sum(UnscaledValue(net_loss#482))])\n               +- Aggregate [web_site_id#289], [MakeDecimal(sum(UnscaledValue(sales_price#495)),17,2) AS sales#505, MakeDecimal(sum(UnscaledValue(return_amt#497)),17,2) AS returns#507, (MakeDecimal(sum(UnscaledValue(profit#496)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#498)),17,2)) AS profit#457, web channel AS channel#629, concat(web_site, web_site_id#289) AS id#630]\n                  +- Project [sales_price#495, profit#496, return_amt#497, net_loss#498, web_site_id#289]\n                     +- Join Inner, (wsr_web_site_sk#493 = web_site_sk#288)\n                        :- Project [wsr_web_site_sk#493, sales_price#495, profit#496, return_amt#497, net_loss#498]\n                        :  +- Join Inner, (date_sk#494 = d_date_sk#571)\n                        :     :- Union false, false\n                        :     :  :- Project [ws_web_site_sk#242 AS wsr_web_site_sk#493, ws_sold_date_sk#263 AS date_sk#494, ws_ext_sales_price#252 AS sales_price#495, ws_net_profit#262 AS profit#496, 0.00 AS return_amt#497, 0.00 AS net_loss#498]\n                        :     :  :  +- Filter ((isnotnull(ws_sold_date_sk#263) AND isnotnull(ws_web_site_sk#242)) AND dynamicpruning#633 [ws_sold_date_sk#263])\n                        :     :  :     :  +- Project [d_date_sk#571]\n                        :     :  :     :     +- Filter ((isnotnull(d_date#573) AND ((d_date#573 >= 1998-08-04) AND (d_date#573 <= 1998-08-18))) AND isnotnull(d_date_sk#571))\n                        :     :  :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#571,d_date_id#572,d_date#573,d_month_seq#574,d_week_seq#575,d_quarter_seq#576,d_year#577,d_dow#578,d_moy#579,d_dom#580,d_qoy#581,d_fy_year#582,d_fy_quarter_seq#583,d_fy_week_seq#584,d_day_name#585,d_quarter_name#586,d_holiday#587,d_weekend#588,d_following_holiday#589,d_first_dom#590,d_last_dom#591,d_same_day_ly#592,d_same_day_lq#593,d_current_day#594,... 4 more fields] parquet\n                        :     :  :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#230,ws_ship_date_sk#231,ws_item_sk#232,ws_bill_customer_sk#233,ws_bill_cdemo_sk#234,ws_bill_hdemo_sk#235,ws_bill_addr_sk#236,ws_ship_customer_sk#237,ws_ship_cdemo_sk#238,ws_ship_hdemo_sk#239,ws_ship_addr_sk#240,ws_web_page_sk#241,ws_web_site_sk#242,ws_ship_mode_sk#243,ws_warehouse_sk#244,ws_promo_sk#245,ws_order_number#246L,ws_quantity#247,ws_wholesale_cost#248,ws_list_price#249,ws_sales_price#250,ws_ext_discount_amt#251,ws_ext_sales_price#252,ws_ext_wholesale_cost#253,... 10 more fields] parquet\n                        :     :  +- Project [ws_web_site_sk#549 AS wsr_web_site_sk#499, wr_returned_date_sk#287 AS date_sk#500, 0.00 AS sales_price#501, 0.00 AS profit#502, wr_return_amt#278 AS return_amt#503, wr_net_loss#286 AS net_loss#504]\n                        :     :     +- Join Inner, ((wr_item_sk#265 = ws_item_sk#539) AND (wr_order_number#276L = ws_order_number#553L))\n                        :     :        :- LogicalQueryStage LogicalQueryStage Project [wr_item_sk#265, wr_order_number#276L, wr_return_amt#278, wr_net_loss#286, wr_returned_date_sk#287], ShuffleQueryStage 5, BroadcastQueryStage 12\n                        :     :        +- LogicalQueryStage Project [ws_item_sk#539, ws_web_site_sk#549, ws_order_number#553L], ShuffleQueryStage 6\n                        :     +- LogicalQueryStage Project [d_date_sk#571], BroadcastQueryStage 8\n                        +- LogicalQueryStage Project [web_site_sk#288, web_site_id#289], BroadcastQueryStage 9\n"
      },
      "IM" : {
        "inputSizeInBytes" : 17280947624,
        "inputRowCount" : 144016132
      },
      "PD" : {
        "1" : [ 5248901, 5302968, 5283311, 5313845, 5327280, 5276466, 5263957, 5285198, 5326922, 5302355, 5292704, 5320266, 5276108, 5269739, 5279442, 5286575, 5284448, 5277895, 5301539, 5270234, 5319674, 5269876, 5283614, 5273350, 5294949, 5282953, 5282643, 5276924, 5266147, 5256733, 5289130, 5273450, 5272652, 5321764, 5304965, 5271223, 5282798, 5280911, 5300025, 5286272, 5296754, 5287564, 5305781, 5289248, 5297049, 5281487, 5263344, 5309713, 5299036, 5300365, 5297562, 5248993, 5291120, 5262212, 5276621, 5270592, 5311087, 5269639, 5295362, 5268547, 5269108, 5267989, 5281642, 5290101, 5286885, 5255270, 5285456, 5297607, 5245069, 5265652, 5297670, 5281524, 5271408, 5276466, 5275595, 5281432, 5278711, 5268805, 5278050, 5317016, 5308539, 5280956, 5284282, 5285301, 5276887, 5246335, 5301702, 5321103, 5246353, 5301539, 5267934, 5306597, 5275137, 5267018, 5286014, 5257780, 5330854, 5239645, 5278353, 5279169, 5282100, 5284548, 5272937, 5259457, 5274624, 5292364, 5277950, 5279287, 5267073, 5289588, 5254014, 5281214, 5268465, 5316108, 5276566, 5308484, 5278253, 5280911, 5302070, 5287343, 5294033, 5286527, 5262739, 5303023, 5281927, 5291035, 5273250, 5276466, 5258028, 5288059, 5320690, 5319261, 5282285, 5259646, 5303023, 5272652, 5301181, 5303599, 5321506, 5264360, 5243732, 5275037, 5308502, 5289964, 5250880, 5294096, 5288938, 5256396, 5264205, 5282503, 5313763, 5294564, 5278308, 5262233, 5257330, 5291788, 5268447, 5303381, 5274827, 5285814, 5317016, 5259715, 5288617, 5304917, 5278153, 5248085, 5314203, 5302968, 5271471, 5299294, 5267291, 5265652, 5289861, 5301849, 5304094, 5278526, 5275395, 5292859, 5259457, 5274642, 5272955, 5280040, 5275255, 5290514, 5272534, 5280040, 5264378, 5293217, 5286527, 5278387, 5293520, 5256754, 5254912, 5295059, 5299449, 5271681, 5294291, 5257891, 5295517, 5281806 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226526850,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 2793,
        "IOBytes" : {
          "Total" : 1018908393,
          "Details" : {
            "IR" : 6872904,
            "IW" : 0,
            "SR" : 1011808093,
            "SW" : 227396
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -1247614612,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048696,
            "rowCount" : 15,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#571], BroadcastQueryStage 1 "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Project [d_date_sk#571], BroadcastQueryStage 1\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1048696,
        "inputRowCount" : 15
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226520327,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 9316,
        "IOBytes" : {
          "Total" : 2472544967,
          "Details" : {
            "IR" : 448928781,
            "IW" : 0,
            "SR" : 1011808093,
            "SW" : 1011808093
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "45" : {
            "sign" : 2107064032,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 7613577744,
            "rowCount" : 158616203,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "34" : {
            "sign" : 954184409,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#509, d_date_id#510, d_date#511, d_month_seq#512, d_week_seq#513, d_quarter_seq#514, d_year#515, d_dow#516, d_moy#517, d_dom#518, d_qoy#519, d_fy_year#520, d_fy_quarter_seq#521, d_fy_week_seq#522, d_day_name#523, d_quarter_name#524, d_holiday#525, d_weekend#526, d_following_holiday#527, d_first_dom#528, d_last_dom#529, d_same_day_ly#530, d_same_day_lq#531, d_current_day#532, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "12" : {
            "sign" : -270570787,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 12608330304,
            "rowCount" : 262673548,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_store_sk#66 AS store_sk#461, ss_sold_date_sk#82 AS date_sk#462, ss_ext_sales_price#74 AS sales_price#463, ss_net_profit#81 AS profit#464, 0.00 AS return_amt#465, 0.00 AS net_loss#466] "
          },
          "51" : {
            "sign" : -1179734106,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#571, d_date_id#572, d_date#573, d_month_seq#574, d_week_seq#575, d_quarter_seq#576, d_year#577, d_dow#578, d_moy#579, d_dom#580, d_qoy#581, d_fy_year#582, d_fy_quarter_seq#583, d_fy_week_seq#584, d_day_name#585, d_quarter_name#586, d_holiday#587, d_weekend#588, d_following_holiday#589, d_first_dom#590, d_last_dom#591, d_same_day_ly#592, d_same_day_lq#593, d_current_day#594, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "8" : {
            "sign" : 942251097,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 118704982074120,
            "rowCount" : 1745661501090,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (store_sk#461 = s_store_sk#131) "
          },
          "19" : {
            "sign" : 475748417,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3433287040,
            "rowCount" : 26822555,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(sr_returned_date_sk#102) AND isnotnull(sr_store_sk#89)) AND dynamicpruning#631 [sr_returned_date_sk#102]) "
          },
          "23" : {
            "sign" : -1004433326,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 3451675578912000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [cp_catalog_page_id#222], [MakeDecimal(sum(UnscaledValue(sales_price#479)),17,2) AS sales#489, MakeDecimal(sum(UnscaledValue(return_amt#481)),17,2) AS returns#491, (MakeDecimal(sum(UnscaledValue(profit#480)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#482)),17,2)) AS profit#454, catalog channel AS channel#627, concat(catalog_page, cp_catalog_page_id#222) AS id#628] "
          },
          "4" : {
            "sign" : 1229769715,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Expand",
            "sizeInBytes" : 11938248463240800,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Expand Arguments: [[sales#473, returns#475, profit#451, channel#617, id#618, 0], [sales#473, returns#475, profit#451, channel#617, null, 1], [sales#473, returns#475, profit#451, null, null, 3]], [sales#473, returns#475, profit#451, channel#620, id#621, spark_grouping_id#619L] "
          },
          "40" : {
            "sign" : 1554293513,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 4111331981760,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [web_site_id#289], [MakeDecimal(sum(UnscaledValue(sales_price#495)),17,2) AS sales#505, MakeDecimal(sum(UnscaledValue(return_amt#497)),17,2) AS returns#507, (MakeDecimal(sum(UnscaledValue(profit#496)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#498)),17,2)) AS profit#457, web channel AS channel#629, concat(web_site, web_site_id#289) AS id#630] "
          },
          "15" : {
            "sign" : 815227588,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 168,
            "rowCount" : 14,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#103] "
          },
          "11" : {
            "sign" : 782820937,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 13895812944,
            "rowCount" : 289496103,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "9" : {
            "sign" : 1849292760,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 191067427980,
            "rowCount" : 4342441545,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [store_sk#461, sales_price#463, profit#464, return_amt#465, net_loss#466] "
          },
          "44" : {
            "sign" : -1839408871,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 123720638340,
            "rowCount" : 2379243045,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (date_sk#494 = d_date_sk#571) "
          },
          "33" : {
            "sign" : 2146830800,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3444,
            "rowCount" : 14,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#511) AND ((d_date#511 >= 1998-08-04) AND (d_date#511 <= 1998-08-18))) AND isnotnull(d_date_sk#509)) "
          },
          "22" : {
            "sign" : 557630796,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1051792,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_store_sk#131, s_store_id#132], BroadcastQueryStage 1 "
          },
          "56" : {
            "sign" : -1247614395,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048696,
            "rowCount" : 15,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#571], BroadcastQueryStage 8 "
          },
          "55" : {
            "sign" : -366447926,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1727605368,
            "rowCount" : 71983557,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_item_sk#539, ws_web_site_sk#549, ws_order_number#553L], ShuffleQueryStage 6 "
          },
          "26" : {
            "sign" : 1829674044,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 103399867560,
            "rowCount" : 2349996990,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [page_sk#477, sales_price#479, profit#480, return_amt#481, net_loss#482] "
          },
          "50" : {
            "sign" : 454951658,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3444,
            "rowCount" : 14,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#573) AND ((d_date#573 >= 1998-08-04) AND (d_date#573 <= 1998-08-18))) AND isnotnull(d_date_sk#571)) "
          },
          "37" : {
            "sign" : -1716719794,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 2246060232,
            "rowCount" : 14397822,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cr_returned_time_sk#194, cr_item_sk#195, cr_refunded_customer_sk#196, cr_refunded_cdemo_sk#197, cr_refunded_hdemo_sk#198, cr_refunded_addr_sk#199, cr_returning_customer_sk#200, cr_returning_cdemo_sk#201, cr_returning_hdemo_sk#202, cr_returning_addr_sk#203, cr_call_center_sk#204, cr_catalog_page_sk#205, cr_ship_mode_sk#206, cr_warehouse_sk#207, cr_reason_sk#208, cr_order_number#209L, cr_return_quantity#210, cr_return_amount#211, cr_return_tax#212, cr_return_amt_inc_tax#213, cr_fee#214, cr_return_ship_cost#215, cr_refunded_cash#216, cr_reversed_charge#217, ... 3 more fields], `spark_catalog`.`tpcds_100`.`catalog_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "13" : {
            "sign" : 750163788,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 39926379296,
            "rowCount" : 262673548,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_sold_date_sk#82) AND isnotnull(ss_store_sk#66)) AND dynamicpruning#631 [ss_sold_date_sk#82]) "
          },
          "46" : {
            "sign" : 1052684669,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3454347504,
            "rowCount" : 71965573,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_web_site_sk#242 AS wsr_web_site_sk#493, ws_sold_date_sk#263 AS date_sk#494, ws_ext_sales_price#252 AS sales_price#495, ws_net_profit#262 AS profit#496, 0.00 AS return_amt#497, 0.00 AS net_loss#498] "
          },
          "24" : {
            "sign" : 996625161,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2876396315760000,
            "rowCount" : 47939938596000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales_price#479, profit#480, return_amt#481, net_loss#482, cp_catalog_page_id#222] "
          },
          "35" : {
            "sign" : -1827807311,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 677305968,
            "rowCount" : 14110541,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cr_catalog_page_sk#205 AS page_sk#483, cr_returned_date_sk#220 AS date_sk#484, 0.00 AS sales_price#485, 0.00 AS profit#486, cr_return_amount#211 AS return_amt#487, cr_net_loss#219 AS net_loss#488] "
          },
          "16" : {
            "sign" : 793984382,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3444,
            "rowCount" : 14,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#105) AND ((d_date#105 >= 1998-08-04) AND (d_date#105 <= 1998-08-18))) AND isnotnull(d_date_sk#103)) "
          },
          "5" : {
            "sign" : -410450844,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 3581474538972240,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "10" : {
            "sign" : 973625703,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 225806960340,
            "rowCount" : 4342441545,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (date_sk#462 = d_date_sk#103) "
          },
          "48" : {
            "sign" : 1265230408,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#230, ws_ship_date_sk#231, ws_item_sk#232, ws_bill_customer_sk#233, ws_bill_cdemo_sk#234, ws_bill_hdemo_sk#235, ws_bill_addr_sk#236, ws_ship_customer_sk#237, ws_ship_cdemo_sk#238, ws_ship_hdemo_sk#239, ws_ship_addr_sk#240, ws_web_page_sk#241, ws_web_site_sk#242, ws_ship_mode_sk#243, ws_warehouse_sk#244, ws_promo_sk#245, ws_order_number#246L, ws_quantity#247, ws_wholesale_cost#248, ws_list_price#249, ws_sales_price#250, ws_ext_discount_amt#251, ws_ext_sales_price#252, ws_ext_wholesale_cost#253, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "21" : {
            "sign" : 1692007624,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048696,
            "rowCount" : 15,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#103], BroadcastQueryStage 0 "
          },
          "54" : {
            "sign" : 1427256798,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 274996000,
            "rowCount" : 6874900,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [wr_item_sk#265, wr_order_number#276L, wr_return_amt#278, wr_net_loss#286, wr_returned_date_sk#287], ShuffleQueryStage 5 "
          },
          "43" : {
            "sign" : -1935086209,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 104686693980,
            "rowCount" : 2379243045,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [wsr_web_site_sk#493, sales_price#495, profit#496, return_amt#497, net_loss#498] "
          },
          "57" : {
            "sign" : -885356408,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048768,
            "rowCount" : 24,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [web_site_sk#288, web_site_id#289], BroadcastQueryStage 9 "
          },
          "32" : {
            "sign" : 1088840858,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 168,
            "rowCount" : 14,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#509] "
          },
          "49" : {
            "sign" : -1437727159,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 168,
            "rowCount" : 14,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#571] "
          },
          "6" : {
            "sign" : -15921172,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 125687628078480,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [s_store_id#132], [MakeDecimal(sum(UnscaledValue(sales_price#463)),17,2) AS sales#473, MakeDecimal(sum(UnscaledValue(return_amt#465)),17,2) AS returns#475, (MakeDecimal(sum(UnscaledValue(profit#464)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#466)),17,2)) AS profit#451, store channel AS channel#617, concat(store, s_store_id#132) AS id#618] "
          },
          "36" : {
            "sign" : -429221004,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 2201244396,
            "rowCount" : 14110541,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(cr_returned_date_sk#220) AND isnotnull(cr_catalog_page_sk#205)) AND dynamicpruning#632 [cr_returned_date_sk#220]) "
          },
          "1" : {
            "sign" : 1549445071,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 14325898155888960,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "39" : {
            "sign" : -799434295,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1211776,
            "rowCount" : 20400,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [cp_catalog_page_sk#221, cp_catalog_page_id#222], BroadcastQueryStage 4 "
          },
          "17" : {
            "sign" : -144809072,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#103, d_date_id#104, d_date#105, d_month_seq#106, d_week_seq#107, d_quarter_seq#108, d_year#109, d_dow#110, d_moy#111, d_dom#112, d_qoy#113, d_fy_year#114, d_fy_quarter_seq#115, d_fy_week_seq#116, d_day_name#117, d_quarter_name#118, d_holiday#119, d_weekend#120, d_following_holiday#121, d_first_dom#122, d_last_dom#123, d_same_day_ly#124, d_same_day_lq#125, d_current_day#126, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "25" : {
            "sign" : -1547752087,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3259915824528000,
            "rowCount" : 47939938596000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (page_sk#477 = cp_catalog_page_sk#221) "
          },
          "14" : {
            "sign" : -166967311,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 41806893656,
            "rowCount" : 275045353,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#60, ss_item_sk#61, ss_customer_sk#62, ss_cdemo_sk#63, ss_hdemo_sk#64, ss_addr_sk#65, ss_store_sk#66, ss_promo_sk#67, ss_ticket_number#68L, ss_quantity#69, ss_wholesale_cost#70, ss_list_price#71, ss_sales_price#72, ss_ext_discount_amt#73, ss_ext_sales_price#74, ss_ext_wholesale_cost#75, ss_ext_list_price#76, ss_ext_tax#77, ss_coupon_amt#78, ss_net_paid#79, ss_net_paid_inc_tax#80, ss_net_profit#81, ss_sold_date_sk#82], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "47" : {
            "sign" : -1750723565,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14968839184,
            "rowCount" : 71965573,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ws_sold_date_sk#263) AND isnotnull(ws_web_site_sk#242)) AND dynamicpruning#633 [ws_sold_date_sk#263]) "
          },
          "31" : {
            "sign" : -243072556,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 29800787536,
            "rowCount" : 143273017,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#160, cs_ship_date_sk#161, cs_bill_customer_sk#162, cs_bill_cdemo_sk#163, cs_bill_hdemo_sk#164, cs_bill_addr_sk#165, cs_ship_customer_sk#166, cs_ship_cdemo_sk#167, cs_ship_hdemo_sk#168, cs_ship_addr_sk#169, cs_call_center_sk#170, cs_catalog_page_sk#171, cs_ship_mode_sk#172, cs_warehouse_sk#173, cs_item_sk#174, cs_promo_sk#175, cs_order_number#176L, cs_quantity#177, cs_wholesale_cost#178, cs_list_price#179, cs_sales_price#180, cs_ext_discount_amt#181, cs_ext_sales_price#182, cs_ext_wholesale_cost#183, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "53" : {
            "sign" : -1906591647,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4852435280,
            "rowCount" : 86650630,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((wr_item_sk#265 = ws_item_sk#539) AND (wr_order_number#276L = ws_order_number#553L)) "
          },
          "42" : {
            "sign" : 1044841861,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3882924649440,
            "rowCount" : 57101833080,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (wsr_web_site_sk#493 = web_site_sk#288) "
          },
          "0" : {
            "sign" : 2013077198,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 9600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 1795467426,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3557606528,
            "rowCount" : 27793801,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#83, sr_item_sk#84, sr_customer_sk#85, sr_cdemo_sk#86, sr_hdemo_sk#87, sr_addr_sk#88, sr_store_sk#89, sr_reason_sk#90, sr_ticket_number#91L, sr_return_quantity#92, sr_return_amt#93, sr_return_tax#94, sr_return_amt_inc_tax#95, sr_fee#96, sr_return_ship_cost#97, sr_refunded_cash#98, sr_reversed_charge#99, sr_store_credit#100, sr_net_loss#101, sr_returned_date_sk#102], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "27" : {
            "sign" : -1531443069,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 122199843480,
            "rowCount" : 2349996990,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (date_sk#478 = d_date_sk#509) "
          },
          "2" : {
            "sign" : 364203896,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 14325898155888960,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#620 ASC NULLS FIRST, id#621 ASC NULLS FIRST], true "
          },
          "38" : {
            "sign" : 859180379,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048696,
            "rowCount" : 15,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#509], BroadcastQueryStage 3 "
          },
          "18" : {
            "sign" : 144179700,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1287482640,
            "rowCount" : 26822555,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_store_sk#89 AS store_sk#467, sr_returned_date_sk#102 AS date_sk#468, 0.00 AS sales_price#469, 0.00 AS profit#470, sr_return_amt#93 AS return_amt#471, sr_net_loss#101 AS net_loss#472] "
          },
          "30" : {
            "sign" : 156541243,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 29651632400,
            "rowCount" : 142555925,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(cs_sold_date_sk#193) AND isnotnull(cs_catalog_page_sk#171)) AND dynamicpruning#632 [cs_sold_date_sk#193]) "
          },
          "7" : {
            "sign" : 1257590634,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 104739690065400,
            "rowCount" : 1745661501090,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales_price#463, profit#464, return_amt#465, net_loss#466, s_store_id#132] "
          },
          "29" : {
            "sign" : 57684352,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6842684400,
            "rowCount" : 142555925,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_catalog_page_sk#171 AS page_sk#477, cs_sold_date_sk#193 AS date_sk#478, cs_ext_sales_price#182 AS sales_price#479, cs_net_profit#192 AS profit#480, 0.00 AS return_amt#481, 0.00 AS net_loss#482] "
          },
          "41" : {
            "sign" : 751852620,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3426109984800,
            "rowCount" : 57101833080,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales_price#495, profit#496, return_amt#497, net_loss#498, web_site_id#289] "
          },
          "3" : {
            "sign" : -1484397351,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 14325898155888960,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#620, id#621, spark_grouping_id#619L], [channel#620, id#621, sum(sales#473) AS sales#458, sum(returns#475) AS returns#459, sum(profit#451) AS profit#460] "
          },
          "52" : {
            "sign" : -989590655,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4159230240,
            "rowCount" : 86650630,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_web_site_sk#549 AS wsr_web_site_sk#499, wr_returned_date_sk#287 AS date_sk#500, 0.00 AS sales_price#501, 0.00 AS profit#502, wr_return_amt#278 AS return_amt#503, wr_net_loss#286 AS net_loss#504] "
          },
          "28" : {
            "sign" : 713323329,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 7519990368,
            "rowCount" : 156666466,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          }
        },
        "links" : [ {
          "fromId" : 14,
          "fromName" : "LogicalRelation",
          "toId" : 13,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalRelation",
          "toId" : 16,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Filter",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 13,
          "fromName" : "Filter",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalRelation",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 19,
          "fromName" : "Filter",
          "toId" : 18,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Union",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Aggregate",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "LogicalRelation",
          "toId" : 30,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "LogicalRelation",
          "toId" : 33,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "Filter",
          "toId" : 32,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "Project",
          "toId" : 30,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 30,
          "fromName" : "Filter",
          "toId" : 29,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Project",
          "toId" : 28,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 37,
          "fromName" : "LogicalRelation",
          "toId" : 36,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "Project",
          "toId" : 36,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 36,
          "fromName" : "Filter",
          "toId" : 35,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "Project",
          "toId" : 28,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Union",
          "toId" : 27,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 38,
          "fromName" : "LogicalQueryStage",
          "toId" : 27,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Join",
          "toId" : 26,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "Project",
          "toId" : 25,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 39,
          "fromName" : "LogicalQueryStage",
          "toId" : 25,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Join",
          "toId" : 24,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Project",
          "toId" : 23,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Aggregate",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 48,
          "fromName" : "LogicalRelation",
          "toId" : 47,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 51,
          "fromName" : "LogicalRelation",
          "toId" : 50,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 50,
          "fromName" : "Filter",
          "toId" : 49,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 49,
          "fromName" : "Project",
          "toId" : 47,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 47,
          "fromName" : "Filter",
          "toId" : 46,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 46,
          "fromName" : "Project",
          "toId" : 45,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 54,
          "fromName" : "LogicalQueryStage",
          "toId" : 53,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 55,
          "fromName" : "LogicalQueryStage",
          "toId" : 53,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 53,
          "fromName" : "Join",
          "toId" : 52,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 52,
          "fromName" : "Project",
          "toId" : 45,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 45,
          "fromName" : "Union",
          "toId" : 44,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 56,
          "fromName" : "LogicalQueryStage",
          "toId" : 44,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 44,
          "fromName" : "Join",
          "toId" : 43,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 43,
          "fromName" : "Project",
          "toId" : 42,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 57,
          "fromName" : "LogicalQueryStage",
          "toId" : 42,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 42,
          "fromName" : "Join",
          "toId" : 41,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 41,
          "fromName" : "Project",
          "toId" : 40,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 40,
          "fromName" : "Aggregate",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Union",
          "toId" : 4,
          "toName" : "Expand",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Expand",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#620 ASC NULLS FIRST, id#621 ASC NULLS FIRST], true\n      +- Aggregate [channel#620, id#621, spark_grouping_id#619L], [channel#620, id#621, sum(sales#473) AS sales#458, sum(returns#475) AS returns#459, sum(profit#451) AS profit#460]\n         +- Expand [[sales#473, returns#475, profit#451, channel#617, id#618, 0], [sales#473, returns#475, profit#451, channel#617, null, 1], [sales#473, returns#475, profit#451, null, null, 3]], [sales#473, returns#475, profit#451, channel#620, id#621, spark_grouping_id#619L]\n            +- Union false, false\n               :- Aggregate [s_store_id#132], [MakeDecimal(sum(UnscaledValue(sales_price#463)),17,2) AS sales#473, MakeDecimal(sum(UnscaledValue(return_amt#465)),17,2) AS returns#475, (MakeDecimal(sum(UnscaledValue(profit#464)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#466)),17,2)) AS profit#451, store channel AS channel#617, concat(store, s_store_id#132) AS id#618]\n               :  +- Project [sales_price#463, profit#464, return_amt#465, net_loss#466, s_store_id#132]\n               :     +- Join Inner, (store_sk#461 = s_store_sk#131)\n               :        :- Project [store_sk#461, sales_price#463, profit#464, return_amt#465, net_loss#466]\n               :        :  +- Join Inner, (date_sk#462 = d_date_sk#103)\n               :        :     :- Union false, false\n               :        :     :  :- Project [ss_store_sk#66 AS store_sk#461, ss_sold_date_sk#82 AS date_sk#462, ss_ext_sales_price#74 AS sales_price#463, ss_net_profit#81 AS profit#464, 0.00 AS return_amt#465, 0.00 AS net_loss#466]\n               :        :     :  :  +- Filter ((isnotnull(ss_sold_date_sk#82) AND isnotnull(ss_store_sk#66)) AND dynamicpruning#631 [ss_sold_date_sk#82])\n               :        :     :  :     :  +- Project [d_date_sk#103]\n               :        :     :  :     :     +- Filter ((isnotnull(d_date#105) AND ((d_date#105 >= 1998-08-04) AND (d_date#105 <= 1998-08-18))) AND isnotnull(d_date_sk#103))\n               :        :     :  :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_date_id#104,d_date#105,d_month_seq#106,d_week_seq#107,d_quarter_seq#108,d_year#109,d_dow#110,d_moy#111,d_dom#112,d_qoy#113,d_fy_year#114,d_fy_quarter_seq#115,d_fy_week_seq#116,d_day_name#117,d_quarter_name#118,d_holiday#119,d_weekend#120,d_following_holiday#121,d_first_dom#122,d_last_dom#123,d_same_day_ly#124,d_same_day_lq#125,d_current_day#126,... 4 more fields] parquet\n               :        :     :  :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#60,ss_item_sk#61,ss_customer_sk#62,ss_cdemo_sk#63,ss_hdemo_sk#64,ss_addr_sk#65,ss_store_sk#66,ss_promo_sk#67,ss_ticket_number#68L,ss_quantity#69,ss_wholesale_cost#70,ss_list_price#71,ss_sales_price#72,ss_ext_discount_amt#73,ss_ext_sales_price#74,ss_ext_wholesale_cost#75,ss_ext_list_price#76,ss_ext_tax#77,ss_coupon_amt#78,ss_net_paid#79,ss_net_paid_inc_tax#80,ss_net_profit#81,ss_sold_date_sk#82] parquet\n               :        :     :  +- Project [sr_store_sk#89 AS store_sk#467, sr_returned_date_sk#102 AS date_sk#468, 0.00 AS sales_price#469, 0.00 AS profit#470, sr_return_amt#93 AS return_amt#471, sr_net_loss#101 AS net_loss#472]\n               :        :     :     +- Filter ((isnotnull(sr_returned_date_sk#102) AND isnotnull(sr_store_sk#89)) AND dynamicpruning#631 [sr_returned_date_sk#102])\n               :        :     :        :  +- Project [d_date_sk#103]\n               :        :     :        :     +- Filter ((isnotnull(d_date#105) AND ((d_date#105 >= 1998-08-04) AND (d_date#105 <= 1998-08-18))) AND isnotnull(d_date_sk#103))\n               :        :     :        :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_date_id#104,d_date#105,d_month_seq#106,d_week_seq#107,d_quarter_seq#108,d_year#109,d_dow#110,d_moy#111,d_dom#112,d_qoy#113,d_fy_year#114,d_fy_quarter_seq#115,d_fy_week_seq#116,d_day_name#117,d_quarter_name#118,d_holiday#119,d_weekend#120,d_following_holiday#121,d_first_dom#122,d_last_dom#123,d_same_day_ly#124,d_same_day_lq#125,d_current_day#126,... 4 more fields] parquet\n               :        :     :        +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#83,sr_item_sk#84,sr_customer_sk#85,sr_cdemo_sk#86,sr_hdemo_sk#87,sr_addr_sk#88,sr_store_sk#89,sr_reason_sk#90,sr_ticket_number#91L,sr_return_quantity#92,sr_return_amt#93,sr_return_tax#94,sr_return_amt_inc_tax#95,sr_fee#96,sr_return_ship_cost#97,sr_refunded_cash#98,sr_reversed_charge#99,sr_store_credit#100,sr_net_loss#101,sr_returned_date_sk#102] parquet\n               :        :     +- LogicalQueryStage Project [d_date_sk#103], BroadcastQueryStage 0\n               :        +- LogicalQueryStage Project [s_store_sk#131, s_store_id#132], BroadcastQueryStage 1\n               :- Aggregate [cp_catalog_page_id#222], [MakeDecimal(sum(UnscaledValue(sales_price#479)),17,2) AS sales#489, MakeDecimal(sum(UnscaledValue(return_amt#481)),17,2) AS returns#491, (MakeDecimal(sum(UnscaledValue(profit#480)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#482)),17,2)) AS profit#454, catalog channel AS channel#627, concat(catalog_page, cp_catalog_page_id#222) AS id#628]\n               :  +- Project [sales_price#479, profit#480, return_amt#481, net_loss#482, cp_catalog_page_id#222]\n               :     +- Join Inner, (page_sk#477 = cp_catalog_page_sk#221)\n               :        :- Project [page_sk#477, sales_price#479, profit#480, return_amt#481, net_loss#482]\n               :        :  +- Join Inner, (date_sk#478 = d_date_sk#509)\n               :        :     :- Union false, false\n               :        :     :  :- Project [cs_catalog_page_sk#171 AS page_sk#477, cs_sold_date_sk#193 AS date_sk#478, cs_ext_sales_price#182 AS sales_price#479, cs_net_profit#192 AS profit#480, 0.00 AS return_amt#481, 0.00 AS net_loss#482]\n               :        :     :  :  +- Filter ((isnotnull(cs_sold_date_sk#193) AND isnotnull(cs_catalog_page_sk#171)) AND dynamicpruning#632 [cs_sold_date_sk#193])\n               :        :     :  :     :  +- Project [d_date_sk#509]\n               :        :     :  :     :     +- Filter ((isnotnull(d_date#511) AND ((d_date#511 >= 1998-08-04) AND (d_date#511 <= 1998-08-18))) AND isnotnull(d_date_sk#509))\n               :        :     :  :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#509,d_date_id#510,d_date#511,d_month_seq#512,d_week_seq#513,d_quarter_seq#514,d_year#515,d_dow#516,d_moy#517,d_dom#518,d_qoy#519,d_fy_year#520,d_fy_quarter_seq#521,d_fy_week_seq#522,d_day_name#523,d_quarter_name#524,d_holiday#525,d_weekend#526,d_following_holiday#527,d_first_dom#528,d_last_dom#529,d_same_day_ly#530,d_same_day_lq#531,d_current_day#532,... 4 more fields] parquet\n               :        :     :  :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#160,cs_ship_date_sk#161,cs_bill_customer_sk#162,cs_bill_cdemo_sk#163,cs_bill_hdemo_sk#164,cs_bill_addr_sk#165,cs_ship_customer_sk#166,cs_ship_cdemo_sk#167,cs_ship_hdemo_sk#168,cs_ship_addr_sk#169,cs_call_center_sk#170,cs_catalog_page_sk#171,cs_ship_mode_sk#172,cs_warehouse_sk#173,cs_item_sk#174,cs_promo_sk#175,cs_order_number#176L,cs_quantity#177,cs_wholesale_cost#178,cs_list_price#179,cs_sales_price#180,cs_ext_discount_amt#181,cs_ext_sales_price#182,cs_ext_wholesale_cost#183,... 10 more fields] parquet\n               :        :     :  +- Project [cr_catalog_page_sk#205 AS page_sk#483, cr_returned_date_sk#220 AS date_sk#484, 0.00 AS sales_price#485, 0.00 AS profit#486, cr_return_amount#211 AS return_amt#487, cr_net_loss#219 AS net_loss#488]\n               :        :     :     +- Filter ((isnotnull(cr_returned_date_sk#220) AND isnotnull(cr_catalog_page_sk#205)) AND dynamicpruning#632 [cr_returned_date_sk#220])\n               :        :     :        :  +- Project [d_date_sk#509]\n               :        :     :        :     +- Filter ((isnotnull(d_date#511) AND ((d_date#511 >= 1998-08-04) AND (d_date#511 <= 1998-08-18))) AND isnotnull(d_date_sk#509))\n               :        :     :        :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#509,d_date_id#510,d_date#511,d_month_seq#512,d_week_seq#513,d_quarter_seq#514,d_year#515,d_dow#516,d_moy#517,d_dom#518,d_qoy#519,d_fy_year#520,d_fy_quarter_seq#521,d_fy_week_seq#522,d_day_name#523,d_quarter_name#524,d_holiday#525,d_weekend#526,d_following_holiday#527,d_first_dom#528,d_last_dom#529,d_same_day_ly#530,d_same_day_lq#531,d_current_day#532,... 4 more fields] parquet\n               :        :     :        +- Relation spark_catalog.tpcds_100.catalog_returns[cr_returned_time_sk#194,cr_item_sk#195,cr_refunded_customer_sk#196,cr_refunded_cdemo_sk#197,cr_refunded_hdemo_sk#198,cr_refunded_addr_sk#199,cr_returning_customer_sk#200,cr_returning_cdemo_sk#201,cr_returning_hdemo_sk#202,cr_returning_addr_sk#203,cr_call_center_sk#204,cr_catalog_page_sk#205,cr_ship_mode_sk#206,cr_warehouse_sk#207,cr_reason_sk#208,cr_order_number#209L,cr_return_quantity#210,cr_return_amount#211,cr_return_tax#212,cr_return_amt_inc_tax#213,cr_fee#214,cr_return_ship_cost#215,cr_refunded_cash#216,cr_reversed_charge#217,... 3 more fields] parquet\n               :        :     +- LogicalQueryStage Project [d_date_sk#509], BroadcastQueryStage 3\n               :        +- LogicalQueryStage Project [cp_catalog_page_sk#221, cp_catalog_page_id#222], BroadcastQueryStage 4\n               +- Aggregate [web_site_id#289], [MakeDecimal(sum(UnscaledValue(sales_price#495)),17,2) AS sales#505, MakeDecimal(sum(UnscaledValue(return_amt#497)),17,2) AS returns#507, (MakeDecimal(sum(UnscaledValue(profit#496)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#498)),17,2)) AS profit#457, web channel AS channel#629, concat(web_site, web_site_id#289) AS id#630]\n                  +- Project [sales_price#495, profit#496, return_amt#497, net_loss#498, web_site_id#289]\n                     +- Join Inner, (wsr_web_site_sk#493 = web_site_sk#288)\n                        :- Project [wsr_web_site_sk#493, sales_price#495, profit#496, return_amt#497, net_loss#498]\n                        :  +- Join Inner, (date_sk#494 = d_date_sk#571)\n                        :     :- Union false, false\n                        :     :  :- Project [ws_web_site_sk#242 AS wsr_web_site_sk#493, ws_sold_date_sk#263 AS date_sk#494, ws_ext_sales_price#252 AS sales_price#495, ws_net_profit#262 AS profit#496, 0.00 AS return_amt#497, 0.00 AS net_loss#498]\n                        :     :  :  +- Filter ((isnotnull(ws_sold_date_sk#263) AND isnotnull(ws_web_site_sk#242)) AND dynamicpruning#633 [ws_sold_date_sk#263])\n                        :     :  :     :  +- Project [d_date_sk#571]\n                        :     :  :     :     +- Filter ((isnotnull(d_date#573) AND ((d_date#573 >= 1998-08-04) AND (d_date#573 <= 1998-08-18))) AND isnotnull(d_date_sk#571))\n                        :     :  :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#571,d_date_id#572,d_date#573,d_month_seq#574,d_week_seq#575,d_quarter_seq#576,d_year#577,d_dow#578,d_moy#579,d_dom#580,d_qoy#581,d_fy_year#582,d_fy_quarter_seq#583,d_fy_week_seq#584,d_day_name#585,d_quarter_name#586,d_holiday#587,d_weekend#588,d_following_holiday#589,d_first_dom#590,d_last_dom#591,d_same_day_ly#592,d_same_day_lq#593,d_current_day#594,... 4 more fields] parquet\n                        :     :  :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#230,ws_ship_date_sk#231,ws_item_sk#232,ws_bill_customer_sk#233,ws_bill_cdemo_sk#234,ws_bill_hdemo_sk#235,ws_bill_addr_sk#236,ws_ship_customer_sk#237,ws_ship_cdemo_sk#238,ws_ship_hdemo_sk#239,ws_ship_addr_sk#240,ws_web_page_sk#241,ws_web_site_sk#242,ws_ship_mode_sk#243,ws_warehouse_sk#244,ws_promo_sk#245,ws_order_number#246L,ws_quantity#247,ws_wholesale_cost#248,ws_list_price#249,ws_sales_price#250,ws_ext_discount_amt#251,ws_ext_sales_price#252,ws_ext_wholesale_cost#253,... 10 more fields] parquet\n                        :     :  +- Project [ws_web_site_sk#549 AS wsr_web_site_sk#499, wr_returned_date_sk#287 AS date_sk#500, 0.00 AS sales_price#501, 0.00 AS profit#502, wr_return_amt#278 AS return_amt#503, wr_net_loss#286 AS net_loss#504]\n                        :     :     +- Join Inner, ((wr_item_sk#265 = ws_item_sk#539) AND (wr_order_number#276L = ws_order_number#553L))\n                        :     :        :- LogicalQueryStage Project [wr_item_sk#265, wr_order_number#276L, wr_return_amt#278, wr_net_loss#286, wr_returned_date_sk#287], ShuffleQueryStage 5\n                        :     :        +- LogicalQueryStage Project [ws_item_sk#539, ws_web_site_sk#549, ws_order_number#553L], ShuffleQueryStage 6\n                        :     +- LogicalQueryStage Project [d_date_sk#571], BroadcastQueryStage 8\n                        +- LogicalQueryStage Project [web_site_sk#288, web_site_id#289], BroadcastQueryStage 9\n"
      },
      "IM" : {
        "inputSizeInBytes" : 94393001536,
        "inputRowCount" : 611372945
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 3,
        "FinishedTasksTotalTimeInMs" : 1232.0,
        "FinishedTasksDistributionInMs" : [ 408.0, 408.0, 408.0, 416.0, 416.0 ]
      },
      "StartTimeInMs" : 1702226521023,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 8620,
        "IOBytes" : {
          "Total" : 2472544967,
          "Details" : {
            "IR" : 448928781,
            "IW" : 0,
            "SR" : 1011808093,
            "SW" : 1011808093
          }
        }
      }
    },
    "7" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -1080569702,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1220639558732880,
            "rowCount" : 23473837667940,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (date_sk#494 = d_date_sk#571) "
          },
          "8" : {
            "sign" : -511227864,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 40562791490200320,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [web_site_id#289], [MakeDecimal(sum(UnscaledValue(sales_price#495)),17,2) AS sales#505, MakeDecimal(sum(UnscaledValue(return_amt#497)),17,2) AS returns#507, (MakeDecimal(sum(UnscaledValue(profit#496)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#498)),17,2)) AS profit#457, web channel AS channel#629, concat(web_site, web_site_id#289) AS id#630] "
          },
          "19" : {
            "sign" : -1179734106,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#571, d_date_id#572, d_date#573, d_month_seq#574, d_week_seq#575, d_quarter_seq#576, d_year#577, d_dow#578, d_moy#579, d_dom#580, d_qoy#581, d_fy_year#582, d_fy_quarter_seq#583, d_fy_week_seq#584, d_day_name#585, d_quarter_name#586, d_holiday#587, d_weekend#588, d_following_holiday#589, d_first_dom#590, d_last_dom#591, d_same_day_ly#592, d_same_day_lq#593, d_current_day#594, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "23" : {
            "sign" : -366447926,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2303473824,
            "rowCount" : 71983557,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_item_sk#539, ws_web_site_sk#549, ws_order_number#553L], ShuffleQueryStage 6 "
          },
          "4" : {
            "sign" : 725554624,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Expand",
            "sizeInBytes" : 135209304973131306,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Expand Arguments: [[sales#473, returns#475, profit#451, channel#617, id#618, 0], [sales#473, returns#475, profit#451, channel#617, null, 1], [sales#473, returns#475, profit#451, null, null, 3]], [sales#473, returns#475, profit#451, channel#620, id#621, spark_grouping_id#619L] "
          },
          "15" : {
            "sign" : -1750723565,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14968839184,
            "rowCount" : 71965573,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ws_sold_date_sk#263) AND isnotnull(ws_web_site_sk#242)) AND dynamicpruning#633 [ws_sold_date_sk#263]) "
          },
          "11" : {
            "sign" : -1981387328,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1032848857389360,
            "rowCount" : 23473837667940,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [wsr_web_site_sk#493, sales_price#495, profit#496, return_amt#497, net_loss#498] "
          },
          "9" : {
            "sign" : 699017997,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 33802326241833600,
            "rowCount" : 563372104030560,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales_price#495, profit#496, return_amt#497, net_loss#498, web_site_id#289] "
          },
          "22" : {
            "sign" : -696082401,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 34603008,
            "rowCount" : 21739,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Project [wr_item_sk#265, wr_order_number#276L, wr_return_amt#278, wr_net_loss#286, wr_returned_date_sk#287], ShuffleQueryStage 5, BroadcastQueryStage 12 "
          },
          "13" : {
            "sign" : 1476946815,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 75116280537408,
            "rowCount" : 1564922511196,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "24" : {
            "sign" : -1247614395,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048696,
            "rowCount" : 15,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#571], BroadcastQueryStage 8 "
          },
          "16" : {
            "sign" : 1265230408,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#230, ws_ship_date_sk#231, ws_item_sk#232, ws_bill_customer_sk#233, ws_bill_cdemo_sk#234, ws_bill_hdemo_sk#235, ws_bill_addr_sk#236, ws_ship_customer_sk#237, ws_ship_cdemo_sk#238, ws_ship_hdemo_sk#239, ws_ship_addr_sk#240, ws_web_page_sk#241, ws_web_site_sk#242, ws_ship_mode_sk#243, ws_warehouse_sk#244, ws_promo_sk#245, ws_order_number#246L, ws_quantity#247, ws_wholesale_cost#248, ws_list_price#249, ws_sales_price#250, ws_ext_discount_amt#251, ws_ext_sales_price#252, ws_ext_wholesale_cost#253, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "5" : {
            "sign" : 312602853,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 40562791491939392,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "10" : {
            "sign" : -1787905692,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 38309303074078080,
            "rowCount" : 563372104030560,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (wsr_web_site_sk#493 = web_site_sk#288) "
          },
          "21" : {
            "sign" : -268593408,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 87631630554888,
            "rowCount" : 1564850545623,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((wr_item_sk#265 = ws_item_sk#539) AND (wr_order_number#276L = ws_order_number#553L)) "
          },
          "6" : {
            "sign" : 1295834334,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 385920,
            "rowCount" : 6030,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [s_store_id#132], [MakeDecimal(sum(UnscaledValue(sales_price#463)),17,2) AS sales#473, MakeDecimal(sum(UnscaledValue(return_amt#465)),17,2) AS returns#475, (MakeDecimal(sum(UnscaledValue(profit#464)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#466)),17,2)) AS profit#451, store channel AS channel#617, concat(store, s_store_id#132) AS id#618], HashAggregate(keys=[s_store_id#132], functions=[sum(UnscaledValue(sales_price#463)), sum(UnscaledValue(return_amt#465)), sum(UnscaledValue(profit#464)), sum(UnscaledValue(net_loss#466))]) "
          },
          "1" : {
            "sign" : -362394288,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 162251165967757567,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -1437727159,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 168,
            "rowCount" : 14,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#571] "
          },
          "25" : {
            "sign" : -885356408,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048768,
            "rowCount" : 24,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [web_site_sk#288, web_site_id#289], BroadcastQueryStage 9 "
          },
          "14" : {
            "sign" : 1052684669,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3454347504,
            "rowCount" : 71965573,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_web_site_sk#242 AS wsr_web_site_sk#493, ws_sold_date_sk#263 AS date_sk#494, ws_ext_sales_price#252 AS sales_price#495, ws_net_profit#262 AS profit#496, 0.00 AS return_amt#497, 0.00 AS net_loss#498] "
          },
          "0" : {
            "sign" : -61152421,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 9600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -346817022,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 75112826189904,
            "rowCount" : 1564850545623,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_web_site_sk#549 AS wsr_web_site_sk#499, wr_returned_date_sk#287 AS date_sk#500, 0.00 AS sales_price#501, 0.00 AS profit#502, wr_return_amt#278 AS return_amt#503, wr_net_loss#286 AS net_loss#504] "
          },
          "2" : {
            "sign" : 1462860037,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 162251165967757567,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#620 ASC NULLS FIRST, id#621 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 454951658,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3444,
            "rowCount" : 14,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#573) AND ((d_date#573 >= 1998-08-04) AND (d_date#573 <= 1998-08-18))) AND isnotnull(d_date_sk#571)) "
          },
          "7" : {
            "sign" : -890924188,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1353152,
            "rowCount" : 21143,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cp_catalog_page_id#222], [MakeDecimal(sum(UnscaledValue(sales_price#479)),17,2) AS sales#489, MakeDecimal(sum(UnscaledValue(return_amt#481)),17,2) AS returns#491, (MakeDecimal(sum(UnscaledValue(profit#480)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#482)),17,2)) AS profit#454, catalog channel AS channel#627, concat(catalog_page, cp_catalog_page_id#222) AS id#628], HashAggregate(keys=[cp_catalog_page_id#222], functions=[sum(UnscaledValue(sales_price#479)), sum(UnscaledValue(return_amt#481)), sum(UnscaledValue(profit#480)), sum(UnscaledValue(net_loss#482))]) "
          },
          "3" : {
            "sign" : -2055028902,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 162251165967757567,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#620, id#621, spark_grouping_id#619L], [channel#620, id#621, sum(sales#473) AS sales#458, sum(returns#475) AS returns#459, sum(profit#451) AS profit#460] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalRelation",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalRelation",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Filter",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalQueryStage",
          "toId" : 21,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "LogicalQueryStage",
          "toId" : 21,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Join",
          "toId" : 20,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Union",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Join",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Aggregate",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Union",
          "toId" : 4,
          "toName" : "Expand",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Expand",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#620 ASC NULLS FIRST, id#621 ASC NULLS FIRST], true\n      +- Aggregate [channel#620, id#621, spark_grouping_id#619L], [channel#620, id#621, sum(sales#473) AS sales#458, sum(returns#475) AS returns#459, sum(profit#451) AS profit#460]\n         +- Expand [[sales#473, returns#475, profit#451, channel#617, id#618, 0], [sales#473, returns#475, profit#451, channel#617, null, 1], [sales#473, returns#475, profit#451, null, null, 3]], [sales#473, returns#475, profit#451, channel#620, id#621, spark_grouping_id#619L]\n            +- Union false, false\n               :- LogicalQueryStage Aggregate [s_store_id#132], [MakeDecimal(sum(UnscaledValue(sales_price#463)),17,2) AS sales#473, MakeDecimal(sum(UnscaledValue(return_amt#465)),17,2) AS returns#475, (MakeDecimal(sum(UnscaledValue(profit#464)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#466)),17,2)) AS profit#451, store channel AS channel#617, concat(store, s_store_id#132) AS id#618], HashAggregate(keys=[s_store_id#132], functions=[sum(UnscaledValue(sales_price#463)), sum(UnscaledValue(return_amt#465)), sum(UnscaledValue(profit#464)), sum(UnscaledValue(net_loss#466))])\n               :- LogicalQueryStage Aggregate [cp_catalog_page_id#222], [MakeDecimal(sum(UnscaledValue(sales_price#479)),17,2) AS sales#489, MakeDecimal(sum(UnscaledValue(return_amt#481)),17,2) AS returns#491, (MakeDecimal(sum(UnscaledValue(profit#480)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#482)),17,2)) AS profit#454, catalog channel AS channel#627, concat(catalog_page, cp_catalog_page_id#222) AS id#628], HashAggregate(keys=[cp_catalog_page_id#222], functions=[sum(UnscaledValue(sales_price#479)), sum(UnscaledValue(return_amt#481)), sum(UnscaledValue(profit#480)), sum(UnscaledValue(net_loss#482))])\n               +- Aggregate [web_site_id#289], [MakeDecimal(sum(UnscaledValue(sales_price#495)),17,2) AS sales#505, MakeDecimal(sum(UnscaledValue(return_amt#497)),17,2) AS returns#507, (MakeDecimal(sum(UnscaledValue(profit#496)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#498)),17,2)) AS profit#457, web channel AS channel#629, concat(web_site, web_site_id#289) AS id#630]\n                  +- Project [sales_price#495, profit#496, return_amt#497, net_loss#498, web_site_id#289]\n                     +- Join Inner, (wsr_web_site_sk#493 = web_site_sk#288)\n                        :- Project [wsr_web_site_sk#493, sales_price#495, profit#496, return_amt#497, net_loss#498]\n                        :  +- Join Inner, (date_sk#494 = d_date_sk#571)\n                        :     :- Union false, false\n                        :     :  :- Project [ws_web_site_sk#242 AS wsr_web_site_sk#493, ws_sold_date_sk#263 AS date_sk#494, ws_ext_sales_price#252 AS sales_price#495, ws_net_profit#262 AS profit#496, 0.00 AS return_amt#497, 0.00 AS net_loss#498]\n                        :     :  :  +- Filter ((isnotnull(ws_sold_date_sk#263) AND isnotnull(ws_web_site_sk#242)) AND dynamicpruning#633 [ws_sold_date_sk#263])\n                        :     :  :     :  +- Project [d_date_sk#571]\n                        :     :  :     :     +- Filter ((isnotnull(d_date#573) AND ((d_date#573 >= 1998-08-04) AND (d_date#573 <= 1998-08-18))) AND isnotnull(d_date_sk#571))\n                        :     :  :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#571,d_date_id#572,d_date#573,d_month_seq#574,d_week_seq#575,d_quarter_seq#576,d_year#577,d_dow#578,d_moy#579,d_dom#580,d_qoy#581,d_fy_year#582,d_fy_quarter_seq#583,d_fy_week_seq#584,d_day_name#585,d_quarter_name#586,d_holiday#587,d_weekend#588,d_following_holiday#589,d_first_dom#590,d_last_dom#591,d_same_day_ly#592,d_same_day_lq#593,d_current_day#594,... 4 more fields] parquet\n                        :     :  :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#230,ws_ship_date_sk#231,ws_item_sk#232,ws_bill_customer_sk#233,ws_bill_cdemo_sk#234,ws_bill_hdemo_sk#235,ws_bill_addr_sk#236,ws_ship_customer_sk#237,ws_ship_cdemo_sk#238,ws_ship_hdemo_sk#239,ws_ship_addr_sk#240,ws_web_page_sk#241,ws_web_site_sk#242,ws_ship_mode_sk#243,ws_warehouse_sk#244,ws_promo_sk#245,ws_order_number#246L,ws_quantity#247,ws_wholesale_cost#248,ws_list_price#249,ws_sales_price#250,ws_ext_discount_amt#251,ws_ext_sales_price#252,ws_ext_wholesale_cost#253,... 10 more fields] parquet\n                        :     :  +- Project [ws_web_site_sk#549 AS wsr_web_site_sk#499, wr_returned_date_sk#287 AS date_sk#500, 0.00 AS sales_price#501, 0.00 AS profit#502, wr_return_amt#278 AS return_amt#503, wr_net_loss#286 AS net_loss#504]\n                        :     :     +- Join Inner, ((wr_item_sk#265 = ws_item_sk#539) AND (wr_order_number#276L = ws_order_number#553L))\n                        :     :        :- LogicalQueryStage LogicalQueryStage Project [wr_item_sk#265, wr_order_number#276L, wr_return_amt#278, wr_net_loss#286, wr_returned_date_sk#287], ShuffleQueryStage 5, BroadcastQueryStage 12\n                        :     :        +- LogicalQueryStage Project [ws_item_sk#539, ws_web_site_sk#549, ws_order_number#553L], ShuffleQueryStage 6\n                        :     +- LogicalQueryStage Project [d_date_sk#571], BroadcastQueryStage 8\n                        +- LogicalQueryStage Project [web_site_sk#288, web_site_id#289], BroadcastQueryStage 9\n"
      },
      "IM" : {
        "inputSizeInBytes" : 17314507160,
        "inputRowCount" : 144016132
      },
      "PD" : {
        "1" : [ 5248901, 5302968, 5283311, 5313845, 5327280, 5276466, 5263957, 5285198, 5326922, 5302355, 5292704, 5320266, 5276108, 5269739, 5279442, 5286575, 5284448, 5277895, 5301539, 5270234, 5319674, 5269876, 5283614, 5273350, 5294949, 5282953, 5282643, 5276924, 5266147, 5256733, 5289130, 5273450, 5272652, 5321764, 5304965, 5271223, 5282798, 5280911, 5300025, 5286272, 5296754, 5287564, 5305781, 5289248, 5297049, 5281487, 5263344, 5309713, 5299036, 5300365, 5297562, 5248993, 5291120, 5262212, 5276621, 5270592, 5311087, 5269639, 5295362, 5268547, 5269108, 5267989, 5281642, 5290101, 5286885, 5255270, 5285456, 5297607, 5245069, 5265652, 5297670, 5281524, 5271408, 5276466, 5275595, 5281432, 5278711, 5268805, 5278050, 5317016, 5308539, 5280956, 5284282, 5285301, 5276887, 5246335, 5301702, 5321103, 5246353, 5301539, 5267934, 5306597, 5275137, 5267018, 5286014, 5257780, 5330854, 5239645, 5278353, 5279169, 5282100, 5284548, 5272937, 5259457, 5274624, 5292364, 5277950, 5279287, 5267073, 5289588, 5254014, 5281214, 5268465, 5316108, 5276566, 5308484, 5278253, 5280911, 5302070, 5287343, 5294033, 5286527, 5262739, 5303023, 5281927, 5291035, 5273250, 5276466, 5258028, 5288059, 5320690, 5319261, 5282285, 5259646, 5303023, 5272652, 5301181, 5303599, 5321506, 5264360, 5243732, 5275037, 5308502, 5289964, 5250880, 5294096, 5288938, 5256396, 5264205, 5282503, 5313763, 5294564, 5278308, 5262233, 5257330, 5291788, 5268447, 5303381, 5274827, 5285814, 5317016, 5259715, 5288617, 5304917, 5278153, 5248085, 5314203, 5302968, 5271471, 5299294, 5267291, 5265652, 5289861, 5301849, 5304094, 5278526, 5275395, 5292859, 5259457, 5274642, 5272955, 5280040, 5275255, 5290514, 5272534, 5280040, 5264378, 5293217, 5286527, 5278387, 5293520, 5256754, 5254912, 5295059, 5299449, 5271681, 5294291, 5257891, 5295517, 5281806 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226527012,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 2631,
        "IOBytes" : {
          "Total" : 1018164343,
          "Details" : {
            "IR" : 6872904,
            "IW" : 0,
            "SR" : 1011064043,
            "SW" : 227396
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -1839408871,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1220639558732880,
            "rowCount" : 23473837667940,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (date_sk#494 = d_date_sk#571) "
          },
          "8" : {
            "sign" : 1554293513,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 40562791490200320,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [web_site_id#289], [MakeDecimal(sum(UnscaledValue(sales_price#495)),17,2) AS sales#505, MakeDecimal(sum(UnscaledValue(return_amt#497)),17,2) AS returns#507, (MakeDecimal(sum(UnscaledValue(profit#496)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#498)),17,2)) AS profit#457, web channel AS channel#629, concat(web_site, web_site_id#289) AS id#630] "
          },
          "19" : {
            "sign" : -1179734106,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#571, d_date_id#572, d_date#573, d_month_seq#574, d_week_seq#575, d_quarter_seq#576, d_year#577, d_dow#578, d_moy#579, d_dom#580, d_qoy#581, d_fy_year#582, d_fy_quarter_seq#583, d_fy_week_seq#584, d_day_name#585, d_quarter_name#586, d_holiday#587, d_weekend#588, d_following_holiday#589, d_first_dom#590, d_last_dom#591, d_same_day_ly#592, d_same_day_lq#593, d_current_day#594, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "23" : {
            "sign" : -366447926,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1727605368,
            "rowCount" : 71983557,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_item_sk#539, ws_web_site_sk#549, ws_order_number#553L], ShuffleQueryStage 6 "
          },
          "4" : {
            "sign" : 438802529,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Expand",
            "sizeInBytes" : 135209304973105200,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Expand Arguments: [[sales#473, returns#475, profit#451, channel#617, id#618, 0], [sales#473, returns#475, profit#451, channel#617, null, 1], [sales#473, returns#475, profit#451, null, null, 3]], [sales#473, returns#475, profit#451, channel#620, id#621, spark_grouping_id#619L] "
          },
          "15" : {
            "sign" : -1750723565,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14968839184,
            "rowCount" : 71965573,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ws_sold_date_sk#263) AND isnotnull(ws_web_site_sk#242)) AND dynamicpruning#633 [ws_sold_date_sk#263]) "
          },
          "11" : {
            "sign" : -1935086209,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1032848857389360,
            "rowCount" : 23473837667940,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [wsr_web_site_sk#493, sales_price#495, profit#496, return_amt#497, net_loss#498] "
          },
          "9" : {
            "sign" : 751852620,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 33802326241833600,
            "rowCount" : 563372104030560,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales_price#495, profit#496, return_amt#497, net_loss#498, web_site_id#289] "
          },
          "22" : {
            "sign" : 1427256798,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1043472,
            "rowCount" : 21739,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [wr_item_sk#265, wr_order_number#276L, wr_return_amt#278, wr_net_loss#286, wr_returned_date_sk#287], ShuffleQueryStage 5 "
          },
          "13" : {
            "sign" : 2107064032,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 75116280537408,
            "rowCount" : 1564922511196,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "24" : {
            "sign" : -1247614395,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048696,
            "rowCount" : 15,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#571], BroadcastQueryStage 8 "
          },
          "16" : {
            "sign" : 1265230408,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 14972593792,
            "rowCount" : 71983624,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#230, ws_ship_date_sk#231, ws_item_sk#232, ws_bill_customer_sk#233, ws_bill_cdemo_sk#234, ws_bill_hdemo_sk#235, ws_bill_addr_sk#236, ws_ship_customer_sk#237, ws_ship_cdemo_sk#238, ws_ship_hdemo_sk#239, ws_ship_addr_sk#240, ws_web_page_sk#241, ws_web_site_sk#242, ws_ship_mode_sk#243, ws_warehouse_sk#244, ws_promo_sk#245, ws_order_number#246L, ws_quantity#247, ws_wholesale_cost#248, ws_list_price#249, ws_sales_price#250, ws_ext_discount_amt#251, ws_ext_sales_price#252, ws_ext_wholesale_cost#253, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "5" : {
            "sign" : -16626076,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "sizeInBytes" : 40562791491931560,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "10" : {
            "sign" : 1044841861,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 38309303074078080,
            "rowCount" : 563372104030560,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (wsr_web_site_sk#493 = web_site_sk#288) "
          },
          "21" : {
            "sign" : -1906591647,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 87631630554888,
            "rowCount" : 1564850545623,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((wr_item_sk#265 = ws_item_sk#539) AND (wr_order_number#276L = ws_order_number#553L)) "
          },
          "6" : {
            "sign" : 1295834334,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 17640,
            "rowCount" : 210,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [s_store_id#132], [MakeDecimal(sum(UnscaledValue(sales_price#463)),17,2) AS sales#473, MakeDecimal(sum(UnscaledValue(return_amt#465)),17,2) AS returns#475, (MakeDecimal(sum(UnscaledValue(profit#464)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#466)),17,2)) AS profit#451, store channel AS channel#617, concat(store, s_store_id#132) AS id#618], HashAggregate(keys=[s_store_id#132], functions=[sum(UnscaledValue(sales_price#463)), sum(UnscaledValue(return_amt#465)), sum(UnscaledValue(profit#464)), sum(UnscaledValue(net_loss#466))]) "
          },
          "1" : {
            "sign" : -1749148401,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 162251165967726240,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -1437727159,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 168,
            "rowCount" : 14,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#571] "
          },
          "25" : {
            "sign" : -885356408,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048768,
            "rowCount" : 24,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [web_site_sk#288, web_site_id#289], BroadcastQueryStage 9 "
          },
          "14" : {
            "sign" : 1052684669,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3454347504,
            "rowCount" : 71965573,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_web_site_sk#242 AS wsr_web_site_sk#493, ws_sold_date_sk#263 AS date_sk#494, ws_ext_sales_price#252 AS sales_price#495, ws_net_profit#262 AS profit#496, 0.00 AS return_amt#497, 0.00 AS net_loss#498] "
          },
          "0" : {
            "sign" : -53392580,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 9600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : -989590655,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 75112826189904,
            "rowCount" : 1564850545623,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_web_site_sk#549 AS wsr_web_site_sk#499, wr_returned_date_sk#287 AS date_sk#500, 0.00 AS sales_price#501, 0.00 AS profit#502, wr_return_amt#278 AS return_amt#503, wr_net_loss#286 AS net_loss#504] "
          },
          "2" : {
            "sign" : 554363814,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 162251165967726240,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#620 ASC NULLS FIRST, id#621 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 454951658,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3444,
            "rowCount" : 14,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#573) AND ((d_date#573 >= 1998-08-04) AND (d_date#573 <= 1998-08-18))) AND isnotnull(d_date_sk#571)) "
          },
          "7" : {
            "sign" : -890924188,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1713600,
            "rowCount" : 20400,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cp_catalog_page_id#222], [MakeDecimal(sum(UnscaledValue(sales_price#479)),17,2) AS sales#489, MakeDecimal(sum(UnscaledValue(return_amt#481)),17,2) AS returns#491, (MakeDecimal(sum(UnscaledValue(profit#480)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#482)),17,2)) AS profit#454, catalog channel AS channel#627, concat(catalog_page, cp_catalog_page_id#222) AS id#628], HashAggregate(keys=[cp_catalog_page_id#222], functions=[sum(UnscaledValue(sales_price#479)), sum(UnscaledValue(return_amt#481)), sum(UnscaledValue(profit#480)), sum(UnscaledValue(net_loss#482))]) "
          },
          "3" : {
            "sign" : -697524903,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 162251165967726240,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#620, id#621, spark_grouping_id#619L], [channel#620, id#621, sum(sales#473) AS sales#458, sum(returns#475) AS returns#459, sum(profit#451) AS profit#460] "
          }
        },
        "links" : [ {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalRelation",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalRelation",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Filter",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalQueryStage",
          "toId" : 21,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "LogicalQueryStage",
          "toId" : 21,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Join",
          "toId" : 20,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Union",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalQueryStage",
          "toId" : 12,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Join",
          "toId" : 11,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Project",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Aggregate",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Union",
          "toId" : 4,
          "toName" : "Expand",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Expand",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#620 ASC NULLS FIRST, id#621 ASC NULLS FIRST], true\n      +- Aggregate [channel#620, id#621, spark_grouping_id#619L], [channel#620, id#621, sum(sales#473) AS sales#458, sum(returns#475) AS returns#459, sum(profit#451) AS profit#460]\n         +- Expand [[sales#473, returns#475, profit#451, channel#617, id#618, 0], [sales#473, returns#475, profit#451, channel#617, null, 1], [sales#473, returns#475, profit#451, null, null, 3]], [sales#473, returns#475, profit#451, channel#620, id#621, spark_grouping_id#619L]\n            +- Union false, false\n               :- LogicalQueryStage Aggregate [s_store_id#132], [MakeDecimal(sum(UnscaledValue(sales_price#463)),17,2) AS sales#473, MakeDecimal(sum(UnscaledValue(return_amt#465)),17,2) AS returns#475, (MakeDecimal(sum(UnscaledValue(profit#464)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#466)),17,2)) AS profit#451, store channel AS channel#617, concat(store, s_store_id#132) AS id#618], HashAggregate(keys=[s_store_id#132], functions=[sum(UnscaledValue(sales_price#463)), sum(UnscaledValue(return_amt#465)), sum(UnscaledValue(profit#464)), sum(UnscaledValue(net_loss#466))])\n               :- LogicalQueryStage Aggregate [cp_catalog_page_id#222], [MakeDecimal(sum(UnscaledValue(sales_price#479)),17,2) AS sales#489, MakeDecimal(sum(UnscaledValue(return_amt#481)),17,2) AS returns#491, (MakeDecimal(sum(UnscaledValue(profit#480)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#482)),17,2)) AS profit#454, catalog channel AS channel#627, concat(catalog_page, cp_catalog_page_id#222) AS id#628], HashAggregate(keys=[cp_catalog_page_id#222], functions=[sum(UnscaledValue(sales_price#479)), sum(UnscaledValue(return_amt#481)), sum(UnscaledValue(profit#480)), sum(UnscaledValue(net_loss#482))])\n               +- Aggregate [web_site_id#289], [MakeDecimal(sum(UnscaledValue(sales_price#495)),17,2) AS sales#505, MakeDecimal(sum(UnscaledValue(return_amt#497)),17,2) AS returns#507, (MakeDecimal(sum(UnscaledValue(profit#496)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#498)),17,2)) AS profit#457, web channel AS channel#629, concat(web_site, web_site_id#289) AS id#630]\n                  +- Project [sales_price#495, profit#496, return_amt#497, net_loss#498, web_site_id#289]\n                     +- Join Inner, (wsr_web_site_sk#493 = web_site_sk#288)\n                        :- Project [wsr_web_site_sk#493, sales_price#495, profit#496, return_amt#497, net_loss#498]\n                        :  +- Join Inner, (date_sk#494 = d_date_sk#571)\n                        :     :- Union false, false\n                        :     :  :- Project [ws_web_site_sk#242 AS wsr_web_site_sk#493, ws_sold_date_sk#263 AS date_sk#494, ws_ext_sales_price#252 AS sales_price#495, ws_net_profit#262 AS profit#496, 0.00 AS return_amt#497, 0.00 AS net_loss#498]\n                        :     :  :  +- Filter ((isnotnull(ws_sold_date_sk#263) AND isnotnull(ws_web_site_sk#242)) AND dynamicpruning#633 [ws_sold_date_sk#263])\n                        :     :  :     :  +- Project [d_date_sk#571]\n                        :     :  :     :     +- Filter ((isnotnull(d_date#573) AND ((d_date#573 >= 1998-08-04) AND (d_date#573 <= 1998-08-18))) AND isnotnull(d_date_sk#571))\n                        :     :  :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#571,d_date_id#572,d_date#573,d_month_seq#574,d_week_seq#575,d_quarter_seq#576,d_year#577,d_dow#578,d_moy#579,d_dom#580,d_qoy#581,d_fy_year#582,d_fy_quarter_seq#583,d_fy_week_seq#584,d_day_name#585,d_quarter_name#586,d_holiday#587,d_weekend#588,d_following_holiday#589,d_first_dom#590,d_last_dom#591,d_same_day_ly#592,d_same_day_lq#593,d_current_day#594,... 4 more fields] parquet\n                        :     :  :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#230,ws_ship_date_sk#231,ws_item_sk#232,ws_bill_customer_sk#233,ws_bill_cdemo_sk#234,ws_bill_hdemo_sk#235,ws_bill_addr_sk#236,ws_ship_customer_sk#237,ws_ship_cdemo_sk#238,ws_ship_hdemo_sk#239,ws_ship_addr_sk#240,ws_web_page_sk#241,ws_web_site_sk#242,ws_ship_mode_sk#243,ws_warehouse_sk#244,ws_promo_sk#245,ws_order_number#246L,ws_quantity#247,ws_wholesale_cost#248,ws_list_price#249,ws_sales_price#250,ws_ext_discount_amt#251,ws_ext_sales_price#252,ws_ext_wholesale_cost#253,... 10 more fields] parquet\n                        :     :  +- Project [ws_web_site_sk#549 AS wsr_web_site_sk#499, wr_returned_date_sk#287 AS date_sk#500, 0.00 AS sales_price#501, 0.00 AS profit#502, wr_return_amt#278 AS return_amt#503, wr_net_loss#286 AS net_loss#504]\n                        :     :     +- Join Inner, ((wr_item_sk#265 = ws_item_sk#539) AND (wr_order_number#276L = ws_order_number#553L))\n                        :     :        :- LogicalQueryStage Project [wr_item_sk#265, wr_order_number#276L, wr_return_amt#278, wr_net_loss#286, wr_returned_date_sk#287], ShuffleQueryStage 5\n                        :     :        +- LogicalQueryStage Project [ws_item_sk#539, ws_web_site_sk#549, ws_order_number#553L], ShuffleQueryStage 6\n                        :     +- LogicalQueryStage Project [d_date_sk#571], BroadcastQueryStage 8\n                        +- LogicalQueryStage Project [web_site_sk#288, web_site_id#289], BroadcastQueryStage 9\n"
      },
      "IM" : {
        "inputSizeInBytes" : 16705071336,
        "inputRowCount" : 144009569
      },
      "PD" : {
        "0" : [ 4344, 3327, 3926, 4213, 3752, 3525, 4265, 3614, 3811, 4440, 4357, 3988, 3979, 3435, 3891, 3532, 3753, 4496, 4080, 4586, 3668, 4129, 4090, 4203, 3963, 3607, 3276, 3947, 3750, 4204, 4216, 3918, 4060, 4123, 3863, 3847, 4049, 4160, 4393, 3940, 3993, 3760, 3943, 3497, 4140, 4085, 3857, 4042, 3655, 3883, 3489, 3532, 3530, 4032, 4162, 4148, 3964, 3823, 3472, 4014, 3798, 3930, 4355, 3152, 4345, 3405, 4287, 3683, 3917, 3935, 3699, 4058, 3604, 4138, 4240, 3854, 3745, 3995, 4164, 3752, 3913, 3770, 3621, 4032, 3790, 4228, 3325, 3778, 3937, 4168, 3384, 4241, 4219, 3833, 3370, 3917, 3583, 3725, 3979, 3727, 4037, 3804, 4005, 4088, 3712, 3905, 3646, 4148, 3742, 4028, 3892, 4271, 4271, 3536, 4203, 4079, 3436, 3929, 4155, 3726, 3899, 4355, 3971, 3562, 3555, 4205, 3709, 4120, 3957, 3971, 3453, 3749, 3769, 3858, 3785, 3744, 4256, 3637, 4349, 4336, 3648, 3811, 3651, 3584, 4135, 3857, 3975, 3683, 3498, 4093, 3623, 3871, 4197, 3743, 3582, 4113, 4389, 4174, 3753, 4356, 3352, 3514, 3917, 4259, 3776, 4195, 3613, 3350, 3814, 4049, 3983, 4075, 3784, 3670, 3311, 3349, 4138, 4040, 3326, 4067, 3853, 3613, 3701, 4008, 3943, 4024, 3975, 3690, 3630, 3548, 4005, 4203, 4281, 3870, 3991, 3591, 3832, 3770, 3453, 3596 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 8,
        "FinishedTasksTotalTimeInMs" : 6223.0,
        "FinishedTasksDistributionInMs" : [ 593.0, 634.0, 853.0, 879.0, 1043.0 ]
      },
      "StartTimeInMs" : 1702226522631,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 7012,
        "IOBytes" : {
          "Total" : 2471278444,
          "Details" : {
            "IR" : 448406308,
            "IW" : 0,
            "SR" : 1011808093,
            "SW" : 1011064043
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "8" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1427256798,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1043472,
                "rowCount" : 21739
              },
              "compileTime" : {
                "sizeInBytes" : 274996000,
                "rowCount" : 6874900
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [wr_item_sk#265, wr_order_number#276L, wr_return_amt#278, wr_net_loss#286, wr_returned_date_sk#287], ShuffleQueryStage 5 "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Project [wr_item_sk#265, wr_order_number#276L, wr_return_amt#278, wr_net_loss#286, wr_returned_date_sk#287], ShuffleQueryStage 5\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1300092765,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 1043472,
            "rowCount" : 21739,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [5]: [wr_item_sk#265, wr_order_number#276L, wr_return_amt#278, wr_net_loss#286, wr_returned_date_sk#287] Arguments: 5 "
          }
        },
        "links" : [ ],
        "rawPlan" : "ShuffleQueryStage 5\n+- Exchange hashpartitioning(wr_item_sk#265, wr_order_number#276L, 200), ENSURE_REQUIREMENTS, [plan_id=578]\n   +- *(5) ColumnarToRow\n      +- FileScan parquet spark_catalog.tpcds_100.web_returns[wr_item_sk#265,wr_order_number#276L,wr_return_amt#278,wr_net_loss#286,wr_returned_date_sk#287] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(2179 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_re..., PartitionFilters: [isnotnull(wr_returned_date_sk#287), dynamicpruningexpression(wr_returned_date_sk#287 IN dynamicp..., PushedFilters: [], ReadSchema: struct<wr_item_sk:int,wr_order_number:bigint,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>\n            +- SubqueryBroadcast dynamicpruning#633, 0, [d_date_sk#571], [id=#568]\n               +- AdaptiveSparkPlan isFinalPlan=true\n                  +- == Final Plan ==\n                     BroadcastQueryStage 1\n                     +- ReusedExchange [d_date_sk#571], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=490]\n                  +- == Initial Plan ==\n                     BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=565]\n                     +- Project [d_date_sk#571]\n                        +- Filter (((isnotnull(d_date#573) AND (d_date#573 >= 1998-08-04)) AND (d_date#573 <= 1998-08-18)) AND isnotnull(d_date_sk#571))\n                           +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#571,d_date#573] Batched: true, DataFilters: [isnotnull(d_date#573), (d_date#573 >= 1998-08-04), (d_date#573 <= 1998-08-18), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-08-18), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1043472,
        "inputRowCount" : 21739
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "0" : [ 4344, 3327, 3926, 4213, 3752, 3525, 4265, 3614, 3811, 4440, 4357, 3988, 3979, 3435, 3891, 3532, 3753, 4496, 4080, 4586, 3668, 4129, 4090, 4203, 3963, 3607, 3276, 3947, 3750, 4204, 4216, 3918, 4060, 4123, 3863, 3847, 4049, 4160, 4393, 3940, 3993, 3760, 3943, 3497, 4140, 4085, 3857, 4042, 3655, 3883, 3489, 3532, 3530, 4032, 4162, 4148, 3964, 3823, 3472, 4014, 3798, 3930, 4355, 3152, 4345, 3405, 4287, 3683, 3917, 3935, 3699, 4058, 3604, 4138, 4240, 3854, 3745, 3995, 4164, 3752, 3913, 3770, 3621, 4032, 3790, 4228, 3325, 3778, 3937, 4168, 3384, 4241, 4219, 3833, 3370, 3917, 3583, 3725, 3979, 3727, 4037, 3804, 4005, 4088, 3712, 3905, 3646, 4148, 3742, 4028, 3892, 4271, 4271, 3536, 4203, 4079, 3436, 3929, 4155, 3726, 3899, 4355, 3971, 3562, 3555, 4205, 3709, 4120, 3957, 3971, 3453, 3749, 3769, 3858, 3785, 3744, 4256, 3637, 4349, 4336, 3648, 3811, 3651, 3584, 4135, 3857, 3975, 3683, 3498, 4093, 3623, 3871, 4197, 3743, 3582, 4113, 4389, 4174, 3753, 4356, 3352, 3514, 3917, 4259, 3776, 4195, 3613, 3350, 3814, 4049, 3983, 4075, 3784, 3670, 3311, 3349, 4138, 4040, 3326, 4067, 3853, 3613, 3701, 4008, 3943, 4024, 3975, 3690, 3630, 3548, 4005, 4203, 4281, 3870, 3991, 3591, 3832, 3770, 3453, 3596 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 8,
        "FinishedTasksTotalTimeInMs" : 6223.0,
        "FinishedTasksDistributionInMs" : [ 593.0, 634.0, 853.0, 879.0, 1043.0 ]
      },
      "QueryStageOptimizationId" : 8,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 15 ],
      "Objectives" : {
        "DurationInMs" : 3902,
        "TotalTasksDurationInMs" : 245,
        "IOBytes" : {
          "Total" : 744050,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 744050,
            "SW" : 0
          }
        }
      }
    },
    "4" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1593143208,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 274996000,
                "rowCount" : 6874900
              },
              "compileTime" : {
                "sizeInBytes" : 274996000,
                "rowCount" : 6874900
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [wr_item_sk#265, wr_order_number#276L, wr_return_amt#278, wr_net_loss#286, wr_returned_date_sk#287] "
          },
          "1" : {
            "sign" : -1791386005,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 989985600,
                "rowCount" : 6874900
              },
              "compileTime" : {
                "sizeInBytes" : 989985600,
                "rowCount" : 6874900
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(wr_returned_date_sk#287) AND dynamicpruning#633 [wr_returned_date_sk#287]) "
          },
          "2" : {
            "sign" : -972042,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 989985600,
                "rowCount" : 6874900
              },
              "compileTime" : {
                "sizeInBytes" : 989985600,
                "rowCount" : 6874900
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [wr_returned_time_sk#264, wr_item_sk#265, wr_refunded_customer_sk#266, wr_refunded_cdemo_sk#267, wr_refunded_hdemo_sk#268, wr_refunded_addr_sk#269, wr_returning_customer_sk#270, wr_returning_cdemo_sk#271, wr_returning_hdemo_sk#272, wr_returning_addr_sk#273, wr_web_page_sk#274, wr_reason_sk#275, wr_order_number#276L, wr_return_quantity#277, wr_return_amt#278, wr_return_tax#279, wr_return_amt_inc_tax#280, wr_fee#281, wr_return_ship_cost#282, wr_refunded_cash#283, wr_reversed_charge#284, wr_account_credit#285, wr_net_loss#286, wr_returned_date_sk#287], `spark_catalog`.`tpcds_100`.`web_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [wr_item_sk#265, wr_order_number#276L, wr_return_amt#278, wr_net_loss#286, wr_returned_date_sk#287]\n+- Filter (isnotnull(wr_returned_date_sk#287) AND dynamicpruning#633 [wr_returned_date_sk#287])\n   :  +- Project [d_date_sk#571]\n   :     +- Filter ((isnotnull(d_date#573) AND ((d_date#573 >= 1998-08-04) AND (d_date#573 <= 1998-08-18))) AND isnotnull(d_date_sk#571))\n   :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#571,d_date_id#572,d_date#573,d_month_seq#574,d_week_seq#575,d_quarter_seq#576,d_year#577,d_dow#578,d_moy#579,d_dom#580,d_qoy#581,d_fy_year#582,d_fy_quarter_seq#583,d_fy_week_seq#584,d_day_name#585,d_quarter_name#586,d_holiday#587,d_weekend#588,d_following_holiday#589,d_first_dom#590,d_last_dom#591,d_same_day_ly#592,d_same_day_lq#593,d_current_day#594,... 4 more fields] parquet\n   +- Relation spark_catalog.tpcds_100.web_returns[wr_returned_time_sk#264,wr_item_sk#265,wr_refunded_customer_sk#266,wr_refunded_cdemo_sk#267,wr_refunded_hdemo_sk#268,wr_refunded_addr_sk#269,wr_returning_customer_sk#270,wr_returning_cdemo_sk#271,wr_returning_hdemo_sk#272,wr_returning_addr_sk#273,wr_web_page_sk#274,wr_reason_sk#275,wr_order_number#276L,wr_return_quantity#277,wr_return_amt#278,wr_return_tax#279,wr_return_amt_inc_tax#280,wr_fee#281,wr_return_ship_cost#282,wr_refunded_cash#283,wr_reversed_charge#284,wr_account_credit#285,wr_net_loss#286,wr_returned_date_sk#287] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1580883527,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 274996000,
            "rowCount" : 6874900,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_returns Output [5]: [wr_item_sk#265, wr_order_number#276L, wr_return_amt#278, wr_net_loss#286, wr_returned_date_sk#287] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_returns/wr_returned_date_sk=2450821, ... 2178 entries] PartitionFilters: [isnotnull(wr_returned_date_sk#287), dynamicpruningexpression(wr_returned_date_sk#287 IN dynamicpruning#633)] ReadSchema: struct<wr_item_sk:int,wr_order_number:bigint,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)> "
          }
        },
        "links" : [ ],
        "rawPlan" : "FileScan parquet spark_catalog.tpcds_100.web_returns[wr_item_sk#265,wr_order_number#276L,wr_return_amt#278,wr_net_loss#286,wr_returned_date_sk#287] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(2179 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_re..., PartitionFilters: [isnotnull(wr_returned_date_sk#287), dynamicpruningexpression(wr_returned_date_sk#287 IN dynamicp..., PushedFilters: [], ReadSchema: struct<wr_item_sk:int,wr_order_number:bigint,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>\n   +- SubqueryBroadcast dynamicpruning#633, 0, [d_date_sk#571], [id=#568]\n      +- AdaptiveSparkPlan isFinalPlan=false\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=565]\n            +- Project [d_date_sk#571]\n               +- Filter (((isnotnull(d_date#573) AND (d_date#573 >= 1998-08-04)) AND (d_date#573 <= 1998-08-18)) AND isnotnull(d_date_sk#571))\n                  +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#571,d_date#573] Batched: true, DataFilters: [isnotnull(d_date#573), (d_date#573 >= 1998-08-04), (d_date#573 <= 1998-08-18), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-08-18), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 274996000,
        "inputRowCount" : 6874900
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 10 ],
      "Objectives" : {
        "DurationInMs" : 2143,
        "TotalTasksDurationInMs" : 22030,
        "IOBytes" : {
          "Total" : 1266523,
          "Details" : {
            "IR" : 522473,
            "IW" : 0,
            "SR" : 0,
            "SW" : 744050
          }
        }
      }
    },
    "11" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -53392580,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9600,
                "rowCount" : 100
              },
              "compileTime" : {
                "sizeInBytes" : 9600,
                "rowCount" : 100
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "1" : {
            "sign" : -1749148401,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 162251165967726240,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 162251165967726240,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 554363814,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 162251165967726240,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 162251165967726240,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [channel#620 ASC NULLS FIRST, id#621 ASC NULLS FIRST], true "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [channel#620 ASC NULLS FIRST, id#621 ASC NULLS FIRST], true\n      +- Aggregate [channel#620, id#621, spark_grouping_id#619L], [channel#620, id#621, sum(sales#473) AS sales#458, sum(returns#475) AS returns#459, sum(profit#451) AS profit#460]\n         +- Expand [[sales#473, returns#475, profit#451, channel#617, id#618, 0], [sales#473, returns#475, profit#451, channel#617, null, 1], [sales#473, returns#475, profit#451, null, null, 3]], [sales#473, returns#475, profit#451, channel#620, id#621, spark_grouping_id#619L]\n            +- Union false, false\n               :- LogicalQueryStage Aggregate [s_store_id#132], [MakeDecimal(sum(UnscaledValue(sales_price#463)),17,2) AS sales#473, MakeDecimal(sum(UnscaledValue(return_amt#465)),17,2) AS returns#475, (MakeDecimal(sum(UnscaledValue(profit#464)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#466)),17,2)) AS profit#451, store channel AS channel#617, concat(store, s_store_id#132) AS id#618], HashAggregate(keys=[s_store_id#132], functions=[sum(UnscaledValue(sales_price#463)), sum(UnscaledValue(return_amt#465)), sum(UnscaledValue(profit#464)), sum(UnscaledValue(net_loss#466))])\n               :- LogicalQueryStage Aggregate [cp_catalog_page_id#222], [MakeDecimal(sum(UnscaledValue(sales_price#479)),17,2) AS sales#489, MakeDecimal(sum(UnscaledValue(return_amt#481)),17,2) AS returns#491, (MakeDecimal(sum(UnscaledValue(profit#480)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#482)),17,2)) AS profit#454, catalog channel AS channel#627, concat(catalog_page, cp_catalog_page_id#222) AS id#628], HashAggregate(keys=[cp_catalog_page_id#222], functions=[sum(UnscaledValue(sales_price#479)), sum(UnscaledValue(return_amt#481)), sum(UnscaledValue(profit#480)), sum(UnscaledValue(net_loss#482))])\n               +- Aggregate [web_site_id#289], [MakeDecimal(sum(UnscaledValue(sales_price#495)),17,2) AS sales#505, MakeDecimal(sum(UnscaledValue(return_amt#497)),17,2) AS returns#507, (MakeDecimal(sum(UnscaledValue(profit#496)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#498)),17,2)) AS profit#457, web channel AS channel#629, concat(web_site, web_site_id#289) AS id#630]\n                  +- Project [sales_price#495, profit#496, return_amt#497, net_loss#498, web_site_id#289]\n                     +- Join Inner, (wsr_web_site_sk#493 = web_site_sk#288)\n                        :- Project [wsr_web_site_sk#493, sales_price#495, profit#496, return_amt#497, net_loss#498]\n                        :  +- Join Inner, (date_sk#494 = d_date_sk#571)\n                        :     :- Union false, false\n                        :     :  :- Project [ws_web_site_sk#242 AS wsr_web_site_sk#493, ws_sold_date_sk#263 AS date_sk#494, ws_ext_sales_price#252 AS sales_price#495, ws_net_profit#262 AS profit#496, 0.00 AS return_amt#497, 0.00 AS net_loss#498]\n                        :     :  :  +- Filter ((isnotnull(ws_sold_date_sk#263) AND isnotnull(ws_web_site_sk#242)) AND dynamicpruning#633 [ws_sold_date_sk#263])\n                        :     :  :     :  +- Project [d_date_sk#571]\n                        :     :  :     :     +- Filter ((isnotnull(d_date#573) AND ((d_date#573 >= 1998-08-04) AND (d_date#573 <= 1998-08-18))) AND isnotnull(d_date_sk#571))\n                        :     :  :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#571,d_date_id#572,d_date#573,d_month_seq#574,d_week_seq#575,d_quarter_seq#576,d_year#577,d_dow#578,d_moy#579,d_dom#580,d_qoy#581,d_fy_year#582,d_fy_quarter_seq#583,d_fy_week_seq#584,d_day_name#585,d_quarter_name#586,d_holiday#587,d_weekend#588,d_following_holiday#589,d_first_dom#590,d_last_dom#591,d_same_day_ly#592,d_same_day_lq#593,d_current_day#594,... 4 more fields] parquet\n                        :     :  :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#230,ws_ship_date_sk#231,ws_item_sk#232,ws_bill_customer_sk#233,ws_bill_cdemo_sk#234,ws_bill_hdemo_sk#235,ws_bill_addr_sk#236,ws_ship_customer_sk#237,ws_ship_cdemo_sk#238,ws_ship_hdemo_sk#239,ws_ship_addr_sk#240,ws_web_page_sk#241,ws_web_site_sk#242,ws_ship_mode_sk#243,ws_warehouse_sk#244,ws_promo_sk#245,ws_order_number#246L,ws_quantity#247,ws_wholesale_cost#248,ws_list_price#249,ws_sales_price#250,ws_ext_discount_amt#251,ws_ext_sales_price#252,ws_ext_wholesale_cost#253,... 10 more fields] parquet\n                        :     :  +- Project [ws_web_site_sk#549 AS wsr_web_site_sk#499, wr_returned_date_sk#287 AS date_sk#500, 0.00 AS sales_price#501, 0.00 AS profit#502, wr_return_amt#278 AS return_amt#503, wr_net_loss#286 AS net_loss#504]\n                        :     :     +- Join Inner, ((wr_item_sk#265 = ws_item_sk#539) AND (wr_order_number#276L = ws_order_number#553L))\n                        :     :        :- LogicalQueryStage Project [wr_item_sk#265, wr_order_number#276L, wr_return_amt#278, wr_net_loss#286, wr_returned_date_sk#287], ShuffleQueryStage 5\n                        :     :        +- LogicalQueryStage Project [ws_item_sk#539, ws_web_site_sk#549, ws_order_number#553L], ShuffleQueryStage 6\n                        :     +- LogicalQueryStage Project [d_date_sk#571], BroadcastQueryStage 8\n                        +- LogicalQueryStage Project [web_site_sk#288, web_site_id#289], BroadcastQueryStage 9\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -990226717,
            "className" : "org.apache.spark.sql.execution.TakeOrderedAndProjectExec",
            "sizeInBytes" : 9600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) TakeOrderedAndProject Input [5]: [channel#620, id#621, sales#458, returns#459, profit#460] Arguments: 100, [channel#620 ASC NULLS FIRST, id#621 ASC NULLS FIRST], [channel#620, id#621, sales#458, returns#459, profit#460] "
          },
          "1" : {
            "sign" : -116830994,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 301304,
            "rowCount" : 1723,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [9]: [channel#620, id#621, spark_grouping_id#619L, sum#640, isEmpty#641, sum#642, isEmpty#643, sum#644, isEmpty#645] Keys [3]: [channel#620, id#621, spark_grouping_id#619L] Functions [3]: [sum(sales#473), sum(returns#475), sum(profit#451)] Aggregate Attributes [3]: [sum(sales#473)#614, sum(returns#475)#615, sum(profit#451)#616] Results [5]: [channel#620, id#621, sum(sales#473)#614 AS sales#458, sum(returns#475)#615 AS returns#459, sum(profit#451)#616 AS profit#460] "
          },
          "2" : {
            "sign" : 1549449248,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 162251165967726240,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [9]: [channel#620, id#621, spark_grouping_id#619L, sum#640, isEmpty#641, sum#642, isEmpty#643, sum#644, isEmpty#645] Arguments: 14 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "ShuffleQueryStage",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "TakeOrderedAndProject",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "TakeOrderedAndProject(limit=100, orderBy=[channel#620 ASC NULLS FIRST,id#621 ASC NULLS FIRST], output=[channel#620,id#621,sales#458,returns#459,profit#460])\n+- HashAggregate(keys=[channel#620, id#621, spark_grouping_id#619L], functions=[sum(sales#473), sum(returns#475), sum(profit#451)], output=[channel#620, id#621, sales#458, returns#459, profit#460])\n   +- ShuffleQueryStage 14\n      +- Exchange hashpartitioning(channel#620, id#621, spark_grouping_id#619L, 200), ENSURE_REQUIREMENTS, [plan_id=1844]\n         +- *(21) HashAggregate(keys=[channel#620, id#621, spark_grouping_id#619L], functions=[partial_sum(sales#473), partial_sum(returns#475), partial_sum(profit#451)], output=[channel#620, id#621, spark_grouping_id#619L, sum#640, isEmpty#641, sum#642, isEmpty#643, sum#644, isEmpty#645])\n            +- *(21) Expand [[sales#473, returns#475, profit#451, channel#617, id#618, 0], [sales#473, returns#475, profit#451, channel#617, null, 1], [sales#473, returns#475, profit#451, null, null, 3]], [sales#473, returns#475, profit#451, channel#620, id#621, spark_grouping_id#619L]\n               +- Union\n                  :- *(18) HashAggregate(keys=[s_store_id#132], functions=[sum(UnscaledValue(sales_price#463)), sum(UnscaledValue(return_amt#465)), sum(UnscaledValue(profit#464)), sum(UnscaledValue(net_loss#466))], output=[sales#473, returns#475, profit#451, channel#617, id#618])\n                  :  +- AQEShuffleRead coalesced\n                  :     +- ShuffleQueryStage 10\n                  :        +- Exchange hashpartitioning(s_store_id#132, 200), ENSURE_REQUIREMENTS, [plan_id=1015]\n                  :           +- *(11) HashAggregate(keys=[s_store_id#132], functions=[partial_sum(UnscaledValue(sales_price#463)), partial_sum(UnscaledValue(return_amt#465)), partial_sum(UnscaledValue(profit#464)), partial_sum(UnscaledValue(net_loss#466))], output=[s_store_id#132, sum#650L, sum#651L, sum#652L, sum#653L])\n                  :              +- *(11) Project [sales_price#463, profit#464, return_amt#465, net_loss#466, s_store_id#132]\n                  :                 +- *(11) BroadcastHashJoin [store_sk#461], [s_store_sk#131], Inner, BuildRight, false\n                  :                    :- *(11) Project [store_sk#461, sales_price#463, profit#464, return_amt#465, net_loss#466]\n                  :                    :  +- *(11) BroadcastHashJoin [date_sk#462], [d_date_sk#103], Inner, BuildRight, false\n                  :                    :     :- Union\n                  :                    :     :  :- *(9) Project [ss_store_sk#66 AS store_sk#461, ss_sold_date_sk#82 AS date_sk#462, ss_ext_sales_price#74 AS sales_price#463, ss_net_profit#81 AS profit#464, 0.00 AS return_amt#465, 0.00 AS net_loss#466]\n                  :                    :     :  :  +- *(9) Filter isnotnull(ss_store_sk#66)\n                  :                    :     :  :     +- *(9) ColumnarToRow\n                  :                    :     :  :        +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_store_sk#66,ss_ext_sales_price#74,ss_net_profit#81,ss_sold_date_sk#82] Batched: true, DataFilters: [isnotnull(ss_store_sk#66)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#82), dynamicpruningexpression(ss_sold_date_sk#82 IN dynamicpruning#633)], PushedFilters: [IsNotNull(ss_store_sk)], ReadSchema: struct<ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>\n                  :                    :     :  :              +- ReusedSubquery SubqueryBroadcast dynamicpruning#633, 0, [d_date_sk#571], [id=#568]\n                  :                    :     :  +- *(10) Project [sr_store_sk#89 AS store_sk#467, sr_returned_date_sk#102 AS date_sk#468, 0.00 AS sales_price#469, 0.00 AS profit#470, sr_return_amt#93 AS return_amt#471, sr_net_loss#101 AS net_loss#472]\n                  :                    :     :     +- *(10) Filter isnotnull(sr_store_sk#89)\n                  :                    :     :        +- *(10) ColumnarToRow\n                  :                    :     :           +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_store_sk#89,sr_return_amt#93,sr_net_loss#101,sr_returned_date_sk#102] Batched: true, DataFilters: [isnotnull(sr_store_sk#89)], Format: Parquet, Location: InMemoryFileIndex(2003 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(sr_returned_date_sk#102), dynamicpruningexpression(sr_returned_date_sk#102 IN dynamicp..., PushedFilters: [IsNotNull(sr_store_sk)], ReadSchema: struct<sr_store_sk:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>\n                  :                    :     :                 +- ReusedSubquery SubqueryBroadcast dynamicpruning#633, 0, [d_date_sk#571], [id=#568]\n                  :                    :     +- BroadcastQueryStage 0\n                  :                    :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=490]\n                  :                    :           +- *(1) Project [d_date_sk#103]\n                  :                    :              +- *(1) Filter (((isnotnull(d_date#105) AND (d_date#105 >= 1998-08-04)) AND (d_date#105 <= 1998-08-18)) AND isnotnull(d_date_sk#103))\n                  :                    :                 +- *(1) ColumnarToRow\n                  :                    :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_date#105] Batched: true, DataFilters: [isnotnull(d_date#105), (d_date#105 >= 1998-08-04), (d_date#105 <= 1998-08-18), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-08-18), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n                  :                    +- BroadcastQueryStage 1\n                  :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=509]\n                  :                          +- *(2) Filter isnotnull(s_store_sk#131)\n                  :                             +- *(2) ColumnarToRow\n                  :                                +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#131,s_store_id#132] Batched: true, DataFilters: [isnotnull(s_store_sk#131)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_store_id:string>\n                  :- *(19) HashAggregate(keys=[cp_catalog_page_id#222], functions=[sum(UnscaledValue(sales_price#479)), sum(UnscaledValue(return_amt#481)), sum(UnscaledValue(profit#480)), sum(UnscaledValue(net_loss#482))], output=[sales#489, returns#491, profit#454, channel#627, id#628])\n                  :  +- AQEShuffleRead coalesced\n                  :     +- ShuffleQueryStage 11\n                  :        +- Exchange hashpartitioning(cp_catalog_page_id#222, 200), ENSURE_REQUIREMENTS, [plan_id=1140]\n                  :           +- *(14) HashAggregate(keys=[cp_catalog_page_id#222], functions=[partial_sum(UnscaledValue(sales_price#479)), partial_sum(UnscaledValue(return_amt#481)), partial_sum(UnscaledValue(profit#480)), partial_sum(UnscaledValue(net_loss#482))], output=[cp_catalog_page_id#222, sum#658L, sum#659L, sum#660L, sum#661L])\n                  :              +- *(14) Project [sales_price#479, profit#480, return_amt#481, net_loss#482, cp_catalog_page_id#222]\n                  :                 +- *(14) BroadcastHashJoin [page_sk#477], [cp_catalog_page_sk#221], Inner, BuildRight, false\n                  :                    :- *(14) Project [page_sk#477, sales_price#479, profit#480, return_amt#481, net_loss#482]\n                  :                    :  +- *(14) BroadcastHashJoin [date_sk#478], [d_date_sk#509], Inner, BuildRight, false\n                  :                    :     :- Union\n                  :                    :     :  :- *(12) Project [cs_catalog_page_sk#171 AS page_sk#477, cs_sold_date_sk#193 AS date_sk#478, cs_ext_sales_price#182 AS sales_price#479, cs_net_profit#192 AS profit#480, 0.00 AS return_amt#481, 0.00 AS net_loss#482]\n                  :                    :     :  :  +- *(12) Filter isnotnull(cs_catalog_page_sk#171)\n                  :                    :     :  :     +- *(12) ColumnarToRow\n                  :                    :     :  :        +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_catalog_page_sk#171,cs_ext_sales_price#182,cs_net_profit#192,cs_sold_date_sk#193] Batched: true, DataFilters: [isnotnull(cs_catalog_page_sk#171)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#193), dynamicpruningexpression(cs_sold_date_sk#193 IN dynamicpruning#6..., PushedFilters: [IsNotNull(cs_catalog_page_sk)], ReadSchema: struct<cs_catalog_page_sk:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>\n                  :                    :     :  :              +- ReusedSubquery SubqueryBroadcast dynamicpruning#633, 0, [d_date_sk#571], [id=#568]\n                  :                    :     :  +- *(13) Project [cr_catalog_page_sk#205 AS page_sk#483, cr_returned_date_sk#220 AS date_sk#484, 0.00 AS sales_price#485, 0.00 AS profit#486, cr_return_amount#211 AS return_amt#487, cr_net_loss#219 AS net_loss#488]\n                  :                    :     :     +- *(13) Filter isnotnull(cr_catalog_page_sk#205)\n                  :                    :     :        +- *(13) ColumnarToRow\n                  :                    :     :           +- FileScan parquet spark_catalog.tpcds_100.catalog_returns[cr_catalog_page_sk#205,cr_return_amount#211,cr_net_loss#219,cr_returned_date_sk#220] Batched: true, DataFilters: [isnotnull(cr_catalog_page_sk#205)], Format: Parquet, Location: InMemoryFileIndex(2101 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cr_returned_date_sk#220), dynamicpruningexpression(cr_returned_date_sk#220 IN dynamicp..., PushedFilters: [IsNotNull(cr_catalog_page_sk)], ReadSchema: struct<cr_catalog_page_sk:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>\n                  :                    :     :                 +- ReusedSubquery SubqueryBroadcast dynamicpruning#633, 0, [d_date_sk#571], [id=#568]\n                  :                    :     +- BroadcastQueryStage 3\n                  :                    :        +- ReusedExchange [d_date_sk#509], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=490]\n                  :                    +- BroadcastQueryStage 4\n                  :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=552]\n                  :                          +- *(4) Filter isnotnull(cp_catalog_page_sk#221)\n                  :                             +- *(4) ColumnarToRow\n                  :                                +- FileScan parquet spark_catalog.tpcds_100.catalog_page[cp_catalog_page_sk#221,cp_catalog_page_id#222] Batched: true, DataFilters: [isnotnull(cp_catalog_page_sk#221)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_p..., PartitionFilters: [], PushedFilters: [IsNotNull(cp_catalog_page_sk)], ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>\n                  +- *(20) HashAggregate(keys=[web_site_id#289], functions=[sum(UnscaledValue(sales_price#495)), sum(UnscaledValue(return_amt#497)), sum(UnscaledValue(profit#496)), sum(UnscaledValue(net_loss#498))], output=[sales#505, returns#507, profit#457, channel#629, id#630])\n                     +- AQEShuffleRead coalesced\n                        +- ShuffleQueryStage 13\n                           +- Exchange hashpartitioning(web_site_id#289, 200), ENSURE_REQUIREMENTS, [plan_id=1749]\n                              +- *(17) HashAggregate(keys=[web_site_id#289], functions=[partial_sum(UnscaledValue(sales_price#495)), partial_sum(UnscaledValue(return_amt#497)), partial_sum(UnscaledValue(profit#496)), partial_sum(UnscaledValue(net_loss#498))], output=[web_site_id#289, sum#666L, sum#667L, sum#668L, sum#669L])\n                                 +- *(17) Project [sales_price#495, profit#496, return_amt#497, net_loss#498, web_site_id#289]\n                                    +- *(17) BroadcastHashJoin [wsr_web_site_sk#493], [web_site_sk#288], Inner, BuildRight, false\n                                       :- *(17) Project [wsr_web_site_sk#493, sales_price#495, profit#496, return_amt#497, net_loss#498]\n                                       :  +- *(17) BroadcastHashJoin [date_sk#494], [d_date_sk#571], Inner, BuildRight, false\n                                       :     :- Union\n                                       :     :  :- *(15) Project [ws_web_site_sk#242 AS wsr_web_site_sk#493, ws_sold_date_sk#263 AS date_sk#494, ws_ext_sales_price#252 AS sales_price#495, ws_net_profit#262 AS profit#496, 0.00 AS return_amt#497, 0.00 AS net_loss#498]\n                                       :     :  :  +- *(15) Filter isnotnull(ws_web_site_sk#242)\n                                       :     :  :     +- *(15) ColumnarToRow\n                                       :     :  :        +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_web_site_sk#242,ws_ext_sales_price#252,ws_net_profit#262,ws_sold_date_sk#263] Batched: true, DataFilters: [isnotnull(ws_web_site_sk#242)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#263), dynamicpruningexpression(ws_sold_date_sk#263 IN dynamicpruning#6..., PushedFilters: [IsNotNull(ws_web_site_sk)], ReadSchema: struct<ws_web_site_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>\n                                       :     :  :              +- ReusedSubquery SubqueryBroadcast dynamicpruning#633, 0, [d_date_sk#571], [id=#568]\n                                       :     :  +- *(16) Project [ws_web_site_sk#549 AS wsr_web_site_sk#499, wr_returned_date_sk#287 AS date_sk#500, 0.00 AS sales_price#501, 0.00 AS profit#502, wr_return_amt#278 AS return_amt#503, wr_net_loss#286 AS net_loss#504]\n                                       :     :     +- *(16) BroadcastHashJoin [wr_item_sk#265, wr_order_number#276L], [ws_item_sk#539, ws_order_number#553L], Inner, BuildLeft, false\n                                       :     :        :- BroadcastQueryStage 12\n                                       :     :        :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, true], input[1, bigint, true]),false), [plan_id=1307]\n                                       :     :        :     +- AQEShuffleRead local\n                                       :     :        :        +- ShuffleQueryStage 5\n                                       :     :        :           +- Exchange hashpartitioning(wr_item_sk#265, wr_order_number#276L, 200), ENSURE_REQUIREMENTS, [plan_id=578]\n                                       :     :        :              +- *(5) ColumnarToRow\n                                       :     :        :                 +- FileScan parquet spark_catalog.tpcds_100.web_returns[wr_item_sk#265,wr_order_number#276L,wr_return_amt#278,wr_net_loss#286,wr_returned_date_sk#287] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(2179 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_re..., PartitionFilters: [isnotnull(wr_returned_date_sk#287), dynamicpruningexpression(wr_returned_date_sk#287 IN dynamicp..., PushedFilters: [], ReadSchema: struct<wr_item_sk:int,wr_order_number:bigint,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>\n                                       :     :        :                       +- SubqueryBroadcast dynamicpruning#633, 0, [d_date_sk#571], [id=#568]\n                                       :     :        :                          +- AdaptiveSparkPlan isFinalPlan=true\n                                                                                    +- == Final Plan ==\n                                                                                       BroadcastQueryStage 1\n                                                                                       +- ReusedExchange [d_date_sk#571], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=490]\n                                                                                    +- == Initial Plan ==\n                                                                                       BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=565]\n                                                                                       +- Project [d_date_sk#571]\n                                                                                          +- Filter (((isnotnull(d_date#573) AND (d_date#573 >= 1998-08-04)) AND (d_date#573 <= 1998-08-18)) AND isnotnull(d_date_sk#571))\n                                                                                             +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#571,d_date#573] Batched: true, DataFilters: [isnotnull(d_date#573), (d_date#573 >= 1998-08-04), (d_date#573 <= 1998-08-18), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-08-18), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n                                       :     :        +- AQEShuffleRead local\n                                       :     :           +- ShuffleQueryStage 6\n                                       :     :              +- Exchange hashpartitioning(ws_item_sk#539, ws_order_number#553L, 200), ENSURE_REQUIREMENTS, [plan_id=595]\n                                       :     :                 +- *(6) Project [ws_item_sk#539, ws_web_site_sk#549, ws_order_number#553L]\n                                       :     :                    +- *(6) Filter ((isnotnull(ws_item_sk#539) AND isnotnull(ws_order_number#553L)) AND isnotnull(ws_web_site_sk#549))\n                                       :     :                       +- *(6) ColumnarToRow\n                                       :     :                          +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_item_sk#539,ws_web_site_sk#549,ws_order_number#553L,ws_sold_date_sk#570] Batched: true, DataFilters: [isnotnull(ws_item_sk#539), isnotnull(ws_order_number#553L), isnotnull(ws_web_site_sk#549)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_site_sk)], ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_order_number:bigint>\n                                       :     +- BroadcastQueryStage 8\n                                       :        +- ReusedExchange [d_date_sk#571], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=490]\n                                       +- BroadcastQueryStage 9\n                                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=640]\n                                             +- *(8) Filter isnotnull(web_site_sk#288)\n                                                +- *(8) ColumnarToRow\n                                                   +- FileScan parquet spark_catalog.tpcds_100.web_site[web_site_sk#288,web_site_id#289] Batched: true, DataFilters: [isnotnull(web_site_sk#288)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_site], PartitionFilters: [], PushedFilters: [IsNotNull(web_site_sk)], ReadSchema: struct<web_site_sk:int,web_site_id:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 301304,
        "inputRowCount" : 1723
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "5" : [ 399, 505, 490, 576, 661, 475, 1068, 652, 661, 710, 445, 696, 616, 368, 616, 673, 710, 616, 612, 334, 539, 593, 539, 539, 251, 405, 562, 697, 207, 505, 619, 710, 616, 576, 612, 276, 539, 405, 656, 539, 555, 539, 539, 368, 490, 741, 539, 405, 405, 475, 304, 228, 697, 832, 576, 334, 576, 710, 490, 304, 505, 405, 445, 593, 616, 368, 1044, 616, 228, 304, 475, 505, 612, 790, 616, 539, 652, 490, 539, 447, 696, 539, 539, 334, 696, 612, 539, 697, 541, 697, 541, 661, 576, 475, 596, 445, 490, 710, 661, 490, 616, 304, 539, 710, 767, 207, 616, 827, 445, 696, 888, 490, 505, 576, 334, 576, 1075, 539, 616, 596, 405, 405, 445, 823, 787, 616, 505, 646, 539, 539, 697, 276, 575, 490, 405, 334, 475, 511, 710, 575, 741, 749, 612, 539, 445, 539, 505, 304, 576, 601, 405, 422, 405, 661, 304, 539, 593, 741, 661, 815, 764, 764, 832, 334, 251, 334, 616, 697, 746, 764, 935, 612, 661, 490, 539, 575, 790, 539, 539, 539, 445, 445, 511, 505, 475, 746, 661, 619, 445, 445, 576, 585, 368, 661, 867, 458, 612, 575, 994, 576 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 11,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 28 ],
      "Objectives" : {
        "DurationInMs" : 169,
        "TotalTasksDurationInMs" : 160,
        "IOBytes" : {
          "Total" : 107454,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 107454,
            "SW" : 0
          }
        }
      }
    },
    "9" : {
      "QSLogical" : {
        "operators" : {
          "12" : {
            "sign" : -1247614395,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1048696,
                "rowCount" : 15
              },
              "compileTime" : {
                "sizeInBytes" : 168,
                "rowCount" : 14
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#571], BroadcastQueryStage 8 "
          },
          "8" : {
            "sign" : 1265230408,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              },
              "compileTime" : {
                "sizeInBytes" : 14972593792,
                "rowCount" : 71983624
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#230, ws_ship_date_sk#231, ws_item_sk#232, ws_bill_customer_sk#233, ws_bill_cdemo_sk#234, ws_bill_hdemo_sk#235, ws_bill_addr_sk#236, ws_ship_customer_sk#237, ws_ship_cdemo_sk#238, ws_ship_hdemo_sk#239, ws_ship_addr_sk#240, ws_web_page_sk#241, ws_web_site_sk#242, ws_ship_mode_sk#243, ws_warehouse_sk#244, ws_promo_sk#245, ws_order_number#246L, ws_quantity#247, ws_wholesale_cost#248, ws_list_price#249, ws_sales_price#250, ws_ext_discount_amt#251, ws_ext_sales_price#252, ws_ext_wholesale_cost#253, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "4" : {
            "sign" : -1839408871,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1220639558732880,
                "rowCount" : 23473837667940
              },
              "compileTime" : {
                "sizeInBytes" : 1220639558732880,
                "rowCount" : 23473837667940
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (date_sk#494 = d_date_sk#571) "
          },
          "11" : {
            "sign" : -366447926,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2303473824,
                "rowCount" : 71983557
              },
              "compileTime" : {
                "sizeInBytes" : 1727605368,
                "rowCount" : 71983557
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ws_item_sk#539, ws_web_site_sk#549, ws_order_number#553L], ShuffleQueryStage 6 "
          },
          "9" : {
            "sign" : -989590655,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 75112826189904,
                "rowCount" : 1564850545623
              },
              "compileTime" : {
                "sizeInBytes" : 75112826189904,
                "rowCount" : 1564850545623
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_web_site_sk#549 AS wsr_web_site_sk#499, wr_returned_date_sk#287 AS date_sk#500, 0.00 AS sales_price#501, 0.00 AS profit#502, wr_return_amt#278 AS return_amt#503, wr_net_loss#286 AS net_loss#504] "
          },
          "13" : {
            "sign" : -885356408,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1048768,
                "rowCount" : 24
              },
              "compileTime" : {
                "sizeInBytes" : 960,
                "rowCount" : 24
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [web_site_sk#288, web_site_id#289], BroadcastQueryStage 9 "
          },
          "5" : {
            "sign" : 2107064032,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 75116280537408,
                "rowCount" : 1564922511196
              },
              "compileTime" : {
                "sizeInBytes" : 75116280537408,
                "rowCount" : 1564922511196
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "10" : {
            "sign" : -1906591647,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 87631630554888,
                "rowCount" : 1564850545623
              },
              "compileTime" : {
                "sizeInBytes" : 87631630554888,
                "rowCount" : 1564850545623
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((wr_item_sk#265 = ws_item_sk#539) AND (wr_order_number#276L = ws_order_number#553L)) "
          },
          "6" : {
            "sign" : 1052684669,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3454347504,
                "rowCount" : 71965573
              },
              "compileTime" : {
                "sizeInBytes" : 3454347504,
                "rowCount" : 71965573
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_web_site_sk#242 AS wsr_web_site_sk#493, ws_sold_date_sk#263 AS date_sk#494, ws_ext_sales_price#252 AS sales_price#495, ws_net_profit#262 AS profit#496, 0.00 AS return_amt#497, 0.00 AS net_loss#498] "
          },
          "1" : {
            "sign" : 751852620,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 33802326241833600,
                "rowCount" : 563372104030560
              },
              "compileTime" : {
                "sizeInBytes" : 33802326241833600,
                "rowCount" : 563372104030560
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales_price#495, profit#496, return_amt#497, net_loss#498, web_site_id#289] "
          },
          "0" : {
            "sign" : 1554293513,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 40562791490200320,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 40562791490200320,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [web_site_id#289], [MakeDecimal(sum(UnscaledValue(sales_price#495)),17,2) AS sales#505, MakeDecimal(sum(UnscaledValue(return_amt#497)),17,2) AS returns#507, (MakeDecimal(sum(UnscaledValue(profit#496)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#498)),17,2)) AS profit#457, web channel AS channel#629, concat(web_site, web_site_id#289) AS id#630] "
          },
          "2" : {
            "sign" : 1044841861,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 38309303074078080,
                "rowCount" : 563372104030560
              },
              "compileTime" : {
                "sizeInBytes" : 38309303074078080,
                "rowCount" : 563372104030560
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (wsr_web_site_sk#493 = web_site_sk#288) "
          },
          "7" : {
            "sign" : -1750723565,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14968839184,
                "rowCount" : 71965573
              },
              "compileTime" : {
                "sizeInBytes" : 14968839184,
                "rowCount" : 71965573
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ws_sold_date_sk#263) AND isnotnull(ws_web_site_sk#242)) AND dynamicpruning#633 [ws_sold_date_sk#263]) "
          },
          "3" : {
            "sign" : -1935086209,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1032848857389360,
                "rowCount" : 23473837667940
              },
              "compileTime" : {
                "sizeInBytes" : 1032848857389360,
                "rowCount" : 23473837667940
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [wsr_web_site_sk#493, sales_price#495, profit#496, return_amt#497, net_loss#498] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalRelation",
          "toId" : 7,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Union",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [web_site_id#289], [MakeDecimal(sum(UnscaledValue(sales_price#495)),17,2) AS sales#505, MakeDecimal(sum(UnscaledValue(return_amt#497)),17,2) AS returns#507, (MakeDecimal(sum(UnscaledValue(profit#496)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#498)),17,2)) AS profit#457, web channel AS channel#629, concat(web_site, web_site_id#289) AS id#630]\n+- Project [sales_price#495, profit#496, return_amt#497, net_loss#498, web_site_id#289]\n   +- Join Inner, (wsr_web_site_sk#493 = web_site_sk#288)\n      :- Project [wsr_web_site_sk#493, sales_price#495, profit#496, return_amt#497, net_loss#498]\n      :  +- Join Inner, (date_sk#494 = d_date_sk#571)\n      :     :- Union false, false\n      :     :  :- Project [ws_web_site_sk#242 AS wsr_web_site_sk#493, ws_sold_date_sk#263 AS date_sk#494, ws_ext_sales_price#252 AS sales_price#495, ws_net_profit#262 AS profit#496, 0.00 AS return_amt#497, 0.00 AS net_loss#498]\n      :     :  :  +- Filter ((isnotnull(ws_sold_date_sk#263) AND isnotnull(ws_web_site_sk#242)) AND dynamicpruning#633 [ws_sold_date_sk#263])\n      :     :  :     :  +- Project [d_date_sk#571]\n      :     :  :     :     +- Filter ((isnotnull(d_date#573) AND ((d_date#573 >= 1998-08-04) AND (d_date#573 <= 1998-08-18))) AND isnotnull(d_date_sk#571))\n      :     :  :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#571,d_date_id#572,d_date#573,d_month_seq#574,d_week_seq#575,d_quarter_seq#576,d_year#577,d_dow#578,d_moy#579,d_dom#580,d_qoy#581,d_fy_year#582,d_fy_quarter_seq#583,d_fy_week_seq#584,d_day_name#585,d_quarter_name#586,d_holiday#587,d_weekend#588,d_following_holiday#589,d_first_dom#590,d_last_dom#591,d_same_day_ly#592,d_same_day_lq#593,d_current_day#594,... 4 more fields] parquet\n      :     :  :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#230,ws_ship_date_sk#231,ws_item_sk#232,ws_bill_customer_sk#233,ws_bill_cdemo_sk#234,ws_bill_hdemo_sk#235,ws_bill_addr_sk#236,ws_ship_customer_sk#237,ws_ship_cdemo_sk#238,ws_ship_hdemo_sk#239,ws_ship_addr_sk#240,ws_web_page_sk#241,ws_web_site_sk#242,ws_ship_mode_sk#243,ws_warehouse_sk#244,ws_promo_sk#245,ws_order_number#246L,ws_quantity#247,ws_wholesale_cost#248,ws_list_price#249,ws_sales_price#250,ws_ext_discount_amt#251,ws_ext_sales_price#252,ws_ext_wholesale_cost#253,... 10 more fields] parquet\n      :     :  +- Project [ws_web_site_sk#549 AS wsr_web_site_sk#499, wr_returned_date_sk#287 AS date_sk#500, 0.00 AS sales_price#501, 0.00 AS profit#502, wr_return_amt#278 AS return_amt#503, wr_net_loss#286 AS net_loss#504]\n      :     :     +- Join Inner, ((wr_item_sk#265 = ws_item_sk#539) AND (wr_order_number#276L = ws_order_number#553L))\n      :     :        :- LogicalQueryStage Project [wr_item_sk#265, wr_order_number#276L, wr_return_amt#278, wr_net_loss#286, wr_returned_date_sk#287], ShuffleQueryStage 5\n      :     :        +- LogicalQueryStage Project [ws_item_sk#539, ws_web_site_sk#549, ws_order_number#553L], ShuffleQueryStage 6\n      :     +- LogicalQueryStage Project [d_date_sk#571], BroadcastQueryStage 8\n      +- LogicalQueryStage Project [web_site_sk#288, web_site_id#289], BroadcastQueryStage 9\n"
      },
      "QSPhysical" : {
        "operators" : {
          "12" : {
            "sign" : 1916514369,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 2303473824,
            "rowCount" : 71983557,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [ws_item_sk#539, ws_web_site_sk#549, ws_order_number#553L] Arguments: 6 "
          },
          "8" : {
            "sign" : 728874492,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 3454347504,
            "rowCount" : 71965573,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_sales Output [4]: [ws_web_site_sk#242, ws_ext_sales_price#252, ws_net_profit#262, ws_sold_date_sk#263] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales/ws_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ws_sold_date_sk#263), dynamicpruningexpression(ws_sold_date_sk#263 IN dynamicpruning#633)] PushedFilters: [IsNotNull(ws_web_site_sk)] ReadSchema: struct<ws_web_site_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)> "
          },
          "4" : {
            "sign" : 1430286364,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 1220639558732880,
            "rowCount" : 23473837667940,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [date_sk#494] Right keys [1]: [d_date_sk#571] Join type: Inner Join condition: None "
          },
          "11" : {
            "sign" : -912614154,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 34603008,
            "rowCount" : 21739,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [5]: [wr_item_sk#265, wr_order_number#276L, wr_return_amt#278, wr_net_loss#286, wr_returned_date_sk#287] Arguments: 12 "
          },
          "9" : {
            "sign" : -283418945,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 75112826189904,
            "rowCount" : 1564850545623,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [ws_web_site_sk#549 AS wsr_web_site_sk#499, wr_returned_date_sk#287 AS date_sk#500, 0.00 AS sales_price#501, 0.00 AS profit#502, wr_return_amt#278 AS return_amt#503, wr_net_loss#286 AS net_loss#504] Input [8]: [wr_item_sk#265, wr_order_number#276L, wr_return_amt#278, wr_net_loss#286, wr_returned_date_sk#287, ws_item_sk#539, ws_web_site_sk#549, ws_order_number#553L] "
          },
          "13" : {
            "sign" : -1167281941,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048696,
            "rowCount" : 15,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#571] Arguments: 8 "
          },
          "5" : {
            "sign" : 75265521,
            "className" : "org.apache.spark.sql.execution.UnionExec",
            "sizeInBytes" : 75116280537408,
            "rowCount" : 1564922511196,
            "isRuntime" : false,
            "predicate" : " (unknown) Union "
          },
          "10" : {
            "sign" : -1361430061,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 87631630554888,
            "rowCount" : 1564850545623,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [2]: [wr_item_sk#265, wr_order_number#276L] Right keys [2]: [ws_item_sk#539, ws_order_number#553L] Join type: Inner Join condition: None "
          },
          "6" : {
            "sign" : 912228510,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 3454347504,
            "rowCount" : 71965573,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [ws_web_site_sk#242 AS wsr_web_site_sk#493, ws_sold_date_sk#263 AS date_sk#494, ws_ext_sales_price#252 AS sales_price#495, ws_net_profit#262 AS profit#496, 0.00 AS return_amt#497, 0.00 AS net_loss#498] Input [4]: [ws_web_site_sk#242, ws_ext_sales_price#252, ws_net_profit#262, ws_sold_date_sk#263] "
          },
          "1" : {
            "sign" : 505030788,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 33802326241833600,
            "rowCount" : 563372104030560,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [sales_price#495, profit#496, return_amt#497, net_loss#498, web_site_id#289] Input [7]: [wsr_web_site_sk#493, sales_price#495, profit#496, return_amt#497, net_loss#498, web_site_sk#288, web_site_id#289] "
          },
          "14" : {
            "sign" : 1450450481,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048768,
            "rowCount" : 24,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [web_site_sk#288, web_site_id#289] Arguments: 9 "
          },
          "0" : {
            "sign" : -2080630883,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 40562791490200320,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [5]: [sales_price#495, profit#496, return_amt#497, net_loss#498, web_site_id#289] Keys [1]: [web_site_id#289] Functions [4]: [partial_sum(UnscaledValue(sales_price#495)), partial_sum(UnscaledValue(return_amt#497)), partial_sum(UnscaledValue(profit#496)), partial_sum(UnscaledValue(net_loss#498))] Aggregate Attributes [4]: [sum#662L, sum#663L, sum#664L, sum#665L] Results [5]: [web_site_id#289, sum#666L, sum#667L, sum#668L, sum#669L] "
          },
          "2" : {
            "sign" : -1928797561,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 38309303074078080,
            "rowCount" : 563372104030560,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [wsr_web_site_sk#493] Right keys [1]: [web_site_sk#288] Join type: Inner Join condition: None "
          },
          "7" : {
            "sign" : -1083148450,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 3454347504,
            "rowCount" : 71965573,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [ws_web_site_sk#242, ws_ext_sales_price#252, ws_net_profit#262, ws_sold_date_sk#263] Condition : isnotnull(ws_web_site_sk#242) "
          },
          "3" : {
            "sign" : 159155010,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1032848857389360,
            "rowCount" : 23473837667940,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [wsr_web_site_sk#493, sales_price#495, profit#496, return_amt#497, net_loss#498] Input [7]: [wsr_web_site_sk#493, date_sk#494, sales_price#495, profit#496, return_amt#497, net_loss#498, d_date_sk#571] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_sales",
          "toId" : 7,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "BroadcastQueryStage",
          "toId" : 10,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "ShuffleQueryStage",
          "toId" : 10,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "BroadcastHashJoin",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Union",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "BroadcastQueryStage",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastHashJoin",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[web_site_id#289], functions=[partial_sum(UnscaledValue(sales_price#495)), partial_sum(UnscaledValue(return_amt#497)), partial_sum(UnscaledValue(profit#496)), partial_sum(UnscaledValue(net_loss#498))], output=[web_site_id#289, sum#666L, sum#667L, sum#668L, sum#669L])\n+- Project [sales_price#495, profit#496, return_amt#497, net_loss#498, web_site_id#289]\n   +- BroadcastHashJoin [wsr_web_site_sk#493], [web_site_sk#288], Inner, BuildRight, false\n      :- Project [wsr_web_site_sk#493, sales_price#495, profit#496, return_amt#497, net_loss#498]\n      :  +- BroadcastHashJoin [date_sk#494], [d_date_sk#571], Inner, BuildRight, false\n      :     :- Union\n      :     :  :- Project [ws_web_site_sk#242 AS wsr_web_site_sk#493, ws_sold_date_sk#263 AS date_sk#494, ws_ext_sales_price#252 AS sales_price#495, ws_net_profit#262 AS profit#496, 0.00 AS return_amt#497, 0.00 AS net_loss#498]\n      :     :  :  +- Filter isnotnull(ws_web_site_sk#242)\n      :     :  :     +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_web_site_sk#242,ws_ext_sales_price#252,ws_net_profit#262,ws_sold_date_sk#263] Batched: true, DataFilters: [isnotnull(ws_web_site_sk#242)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#263), dynamicpruningexpression(ws_sold_date_sk#263 IN dynamicpruning#6..., PushedFilters: [IsNotNull(ws_web_site_sk)], ReadSchema: struct<ws_web_site_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>\n      :     :  :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#633, 0, [d_date_sk#571], [id=#568]\n      :     :  +- Project [ws_web_site_sk#549 AS wsr_web_site_sk#499, wr_returned_date_sk#287 AS date_sk#500, 0.00 AS sales_price#501, 0.00 AS profit#502, wr_return_amt#278 AS return_amt#503, wr_net_loss#286 AS net_loss#504]\n      :     :     +- BroadcastHashJoin [wr_item_sk#265, wr_order_number#276L], [ws_item_sk#539, ws_order_number#553L], Inner, BuildLeft, false\n      :     :        :- BroadcastQueryStage 12\n      :     :        :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, true], input[1, bigint, true]),false), [plan_id=1307]\n      :     :        :     +- AQEShuffleRead local\n      :     :        :        +- ShuffleQueryStage 5\n      :     :        :           +- Exchange hashpartitioning(wr_item_sk#265, wr_order_number#276L, 200), ENSURE_REQUIREMENTS, [plan_id=578]\n      :     :        :              +- *(5) ColumnarToRow\n      :     :        :                 +- FileScan parquet spark_catalog.tpcds_100.web_returns[wr_item_sk#265,wr_order_number#276L,wr_return_amt#278,wr_net_loss#286,wr_returned_date_sk#287] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(2179 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_re..., PartitionFilters: [isnotnull(wr_returned_date_sk#287), dynamicpruningexpression(wr_returned_date_sk#287 IN dynamicp..., PushedFilters: [], ReadSchema: struct<wr_item_sk:int,wr_order_number:bigint,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>\n      :     :        :                       +- SubqueryBroadcast dynamicpruning#633, 0, [d_date_sk#571], [id=#568]\n      :     :        :                          +- AdaptiveSparkPlan isFinalPlan=true\n                                                   +- == Final Plan ==\n                                                      BroadcastQueryStage 1\n                                                      +- ReusedExchange [d_date_sk#571], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=490]\n                                                   +- == Initial Plan ==\n                                                      BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=565]\n                                                      +- Project [d_date_sk#571]\n                                                         +- Filter (((isnotnull(d_date#573) AND (d_date#573 >= 1998-08-04)) AND (d_date#573 <= 1998-08-18)) AND isnotnull(d_date_sk#571))\n                                                            +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#571,d_date#573] Batched: true, DataFilters: [isnotnull(d_date#573), (d_date#573 >= 1998-08-04), (d_date#573 <= 1998-08-18), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-08-18), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n      :     :        +- ShuffleQueryStage 6\n      :     :           +- Exchange hashpartitioning(ws_item_sk#539, ws_order_number#553L, 200), ENSURE_REQUIREMENTS, [plan_id=595]\n      :     :              +- *(6) Project [ws_item_sk#539, ws_web_site_sk#549, ws_order_number#553L]\n      :     :                 +- *(6) Filter ((isnotnull(ws_item_sk#539) AND isnotnull(ws_order_number#553L)) AND isnotnull(ws_web_site_sk#549))\n      :     :                    +- *(6) ColumnarToRow\n      :     :                       +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_item_sk#539,ws_web_site_sk#549,ws_order_number#553L,ws_sold_date_sk#570] Batched: true, DataFilters: [isnotnull(ws_item_sk#539), isnotnull(ws_order_number#553L), isnotnull(ws_web_site_sk#549)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_site_sk)], ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_order_number:bigint>\n      :     +- BroadcastQueryStage 8\n      :        +- ReusedExchange [d_date_sk#571], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=490]\n      +- BroadcastQueryStage 9\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=640]\n            +- *(8) Filter isnotnull(web_site_sk#288)\n               +- *(8) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.web_site[web_site_sk#288,web_site_id#289] Batched: true, DataFilters: [isnotnull(web_site_sk#288)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_site], PartitionFilters: [], PushedFilters: [IsNotNull(web_site_sk)], ReadSchema: struct<web_site_sk:int,web_site_id:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 5794521800,
        "inputRowCount" : 143970908
      },
      "InitialPartitionNum" : 0,
      "PD" : {
        "1" : [ 5248901, 5302968, 5283311, 5313845, 5327280, 5276466, 5263957, 5285198, 5326922, 5302355, 5292704, 5320266, 5276108, 5269739, 5279442, 5286575, 5284448, 5277895, 5301539, 5270234, 5319674, 5269876, 5283614, 5273350, 5294949, 5282953, 5282643, 5276924, 5266147, 5256733, 5289130, 5273450, 5272652, 5321764, 5304965, 5271223, 5282798, 5280911, 5300025, 5286272, 5296754, 5287564, 5305781, 5289248, 5297049, 5281487, 5263344, 5309713, 5299036, 5300365, 5297562, 5248993, 5291120, 5262212, 5276621, 5270592, 5311087, 5269639, 5295362, 5268547, 5269108, 5267989, 5281642, 5290101, 5286885, 5255270, 5285456, 5297607, 5245069, 5265652, 5297670, 5281524, 5271408, 5276466, 5275595, 5281432, 5278711, 5268805, 5278050, 5317016, 5308539, 5280956, 5284282, 5285301, 5276887, 5246335, 5301702, 5321103, 5246353, 5301539, 5267934, 5306597, 5275137, 5267018, 5286014, 5257780, 5330854, 5239645, 5278353, 5279169, 5282100, 5284548, 5272937, 5259457, 5274624, 5292364, 5277950, 5279287, 5267073, 5289588, 5254014, 5281214, 5268465, 5316108, 5276566, 5308484, 5278253, 5280911, 5302070, 5287343, 5294033, 5286527, 5262739, 5303023, 5281927, 5291035, 5273250, 5276466, 5258028, 5288059, 5320690, 5319261, 5282285, 5259646, 5303023, 5272652, 5301181, 5303599, 5321506, 5264360, 5243732, 5275037, 5308502, 5289964, 5250880, 5294096, 5288938, 5256396, 5264205, 5282503, 5313763, 5294564, 5278308, 5262233, 5257330, 5291788, 5268447, 5303381, 5274827, 5285814, 5317016, 5259715, 5288617, 5304917, 5278153, 5248085, 5314203, 5302968, 5271471, 5299294, 5267291, 5265652, 5289861, 5301849, 5304094, 5278526, 5275395, 5292859, 5259457, 5274642, 5272955, 5280040, 5275255, 5290514, 5272534, 5280040, 5264378, 5293217, 5286527, 5278387, 5293520, 5256754, 5254912, 5295059, 5299449, 5271681, 5294291, 5257891, 5295517, 5281806 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 9,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 17 ],
      "Objectives" : {
        "DurationInMs" : 1607,
        "TotalTasksDurationInMs" : 24970,
        "IOBytes" : {
          "Total" : 1016470405,
          "Details" : {
            "IR" : 6872904,
            "IW" : 0,
            "SR" : 1009477559,
            "SW" : 119942
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1658776053,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1727605368,
                "rowCount" : 71983557
              },
              "compileTime" : {
                "sizeInBytes" : 1727605368,
                "rowCount" : 71983557
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ws_item_sk#539, ws_web_site_sk#549, ws_order_number#553L] "
          },
          "1" : {
            "sign" : -30726287,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14972579856,
                "rowCount" : 71983557
              },
              "compileTime" : {
                "sizeInBytes" : 14972579856,
                "rowCount" : 71983557
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ws_item_sk#539) AND isnotnull(ws_order_number#553L)) AND isnotnull(ws_web_site_sk#549)) "
          },
          "2" : {
            "sign" : 306765999,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14976335504,
                "rowCount" : 72001613
              },
              "compileTime" : {
                "sizeInBytes" : 14976335504,
                "rowCount" : 72001613
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ws_sold_time_sk#537, ws_ship_date_sk#538, ws_item_sk#539, ws_bill_customer_sk#540, ws_bill_cdemo_sk#541, ws_bill_hdemo_sk#542, ws_bill_addr_sk#543, ws_ship_customer_sk#544, ws_ship_cdemo_sk#545, ws_ship_hdemo_sk#546, ws_ship_addr_sk#547, ws_web_page_sk#548, ws_web_site_sk#549, ws_ship_mode_sk#550, ws_warehouse_sk#551, ws_promo_sk#552, ws_order_number#553L, ws_quantity#554, ws_wholesale_cost#555, ws_list_price#556, ws_sales_price#557, ws_ext_discount_amt#558, ws_ext_sales_price#559, ws_ext_wholesale_cost#560, ... 10 more fields], `spark_catalog`.`tpcds_100`.`web_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ws_item_sk#539, ws_web_site_sk#549, ws_order_number#553L]\n+- Filter ((isnotnull(ws_item_sk#539) AND isnotnull(ws_order_number#553L)) AND isnotnull(ws_web_site_sk#549))\n   +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#537,ws_ship_date_sk#538,ws_item_sk#539,ws_bill_customer_sk#540,ws_bill_cdemo_sk#541,ws_bill_hdemo_sk#542,ws_bill_addr_sk#543,ws_ship_customer_sk#544,ws_ship_cdemo_sk#545,ws_ship_hdemo_sk#546,ws_ship_addr_sk#547,ws_web_page_sk#548,ws_web_site_sk#549,ws_ship_mode_sk#550,ws_warehouse_sk#551,ws_promo_sk#552,ws_order_number#553L,ws_quantity#554,ws_wholesale_cost#555,ws_list_price#556,ws_sales_price#557,ws_ext_discount_amt#558,ws_ext_sales_price#559,ws_ext_wholesale_cost#560,... 10 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1173908909,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1727605368,
            "rowCount" : 71983557,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [ws_item_sk#539, ws_web_site_sk#549, ws_order_number#553L] Input [4]: [ws_item_sk#539, ws_web_site_sk#549, ws_order_number#553L, ws_sold_date_sk#570] "
          },
          "1" : {
            "sign" : -1779479375,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 1727605368,
            "rowCount" : 71983557,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [ws_item_sk#539, ws_web_site_sk#549, ws_order_number#553L, ws_sold_date_sk#570] Condition : ((isnotnull(ws_item_sk#539) AND isnotnull(ws_order_number#553L)) AND isnotnull(ws_web_site_sk#549)) "
          },
          "2" : {
            "sign" : -114798157,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 1727605368,
            "rowCount" : 71983557,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_sales Output [4]: [ws_item_sk#539, ws_web_site_sk#549, ws_order_number#553L, ws_sold_date_sk#570] Batched: true Location: CatalogFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales] PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_site_sk)] ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_order_number:bigint> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_sales",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ws_item_sk#539, ws_web_site_sk#549, ws_order_number#553L]\n+- Filter ((isnotnull(ws_item_sk#539) AND isnotnull(ws_order_number#553L)) AND isnotnull(ws_web_site_sk#549))\n   +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_item_sk#539,ws_web_site_sk#549,ws_order_number#553L,ws_sold_date_sk#570] Batched: true, DataFilters: [isnotnull(ws_item_sk#539), isnotnull(ws_order_number#553L), isnotnull(ws_web_site_sk#549)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_site_sk)], ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_order_number:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1727605368,
        "inputRowCount" : 71983557
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 11 ],
      "Objectives" : {
        "DurationInMs" : 5136,
        "TotalTasksDurationInMs" : 61243,
        "IOBytes" : {
          "Total" : 1409643559,
          "Details" : {
            "IR" : 400166000,
            "IW" : 0,
            "SR" : 0,
            "SW" : 1009477559
          }
        }
      }
    },
    "10" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -890924188,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1353152,
                "rowCount" : 21143
              },
              "compileTime" : {
                "sizeInBytes" : 1713600,
                "rowCount" : 20400
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [cp_catalog_page_id#222], [MakeDecimal(sum(UnscaledValue(sales_price#479)),17,2) AS sales#489, MakeDecimal(sum(UnscaledValue(return_amt#481)),17,2) AS returns#491, (MakeDecimal(sum(UnscaledValue(profit#480)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#482)),17,2)) AS profit#454, catalog channel AS channel#627, concat(catalog_page, cp_catalog_page_id#222) AS id#628], HashAggregate(keys=[cp_catalog_page_id#222], functions=[sum(UnscaledValue(sales_price#479)), sum(UnscaledValue(return_amt#481)), sum(UnscaledValue(profit#480)), sum(UnscaledValue(net_loss#482))]) "
          },
          "1" : {
            "sign" : 438802529,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Expand",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 135209304973105200,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 135209304973105200,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Expand Arguments: [[sales#473, returns#475, profit#451, channel#617, id#618, 0], [sales#473, returns#475, profit#451, channel#617, null, 1], [sales#473, returns#475, profit#451, null, null, 3]], [sales#473, returns#475, profit#451, channel#620, id#621, spark_grouping_id#619L] "
          },
          "0" : {
            "sign" : -697524903,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 162251165967726240,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 162251165967726240,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [channel#620, id#621, spark_grouping_id#619L], [channel#620, id#621, sum(sales#473) AS sales#458, sum(returns#475) AS returns#459, sum(profit#451) AS profit#460] "
          },
          "2" : {
            "sign" : -16626076,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 40562791491931560,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 40562791491931560,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "3" : {
            "sign" : 1295834334,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 385920,
                "rowCount" : 6030
              },
              "compileTime" : {
                "sizeInBytes" : 17640,
                "rowCount" : 210
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [s_store_id#132], [MakeDecimal(sum(UnscaledValue(sales_price#463)),17,2) AS sales#473, MakeDecimal(sum(UnscaledValue(return_amt#465)),17,2) AS returns#475, (MakeDecimal(sum(UnscaledValue(profit#464)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#466)),17,2)) AS profit#451, store channel AS channel#617, concat(store, s_store_id#132) AS id#618], HashAggregate(keys=[s_store_id#132], functions=[sum(UnscaledValue(sales_price#463)), sum(UnscaledValue(return_amt#465)), sum(UnscaledValue(profit#464)), sum(UnscaledValue(net_loss#466))]) "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Union",
          "toId" : 1,
          "toName" : "Expand",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Expand",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [channel#620, id#621, spark_grouping_id#619L], [channel#620, id#621, sum(sales#473) AS sales#458, sum(returns#475) AS returns#459, sum(profit#451) AS profit#460]\n+- Expand [[sales#473, returns#475, profit#451, channel#617, id#618, 0], [sales#473, returns#475, profit#451, channel#617, null, 1], [sales#473, returns#475, profit#451, null, null, 3]], [sales#473, returns#475, profit#451, channel#620, id#621, spark_grouping_id#619L]\n   +- Union false, false\n      :- LogicalQueryStage Aggregate [s_store_id#132], [MakeDecimal(sum(UnscaledValue(sales_price#463)),17,2) AS sales#473, MakeDecimal(sum(UnscaledValue(return_amt#465)),17,2) AS returns#475, (MakeDecimal(sum(UnscaledValue(profit#464)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#466)),17,2)) AS profit#451, store channel AS channel#617, concat(store, s_store_id#132) AS id#618], HashAggregate(keys=[s_store_id#132], functions=[sum(UnscaledValue(sales_price#463)), sum(UnscaledValue(return_amt#465)), sum(UnscaledValue(profit#464)), sum(UnscaledValue(net_loss#466))])\n      :- LogicalQueryStage Aggregate [cp_catalog_page_id#222], [MakeDecimal(sum(UnscaledValue(sales_price#479)),17,2) AS sales#489, MakeDecimal(sum(UnscaledValue(return_amt#481)),17,2) AS returns#491, (MakeDecimal(sum(UnscaledValue(profit#480)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#482)),17,2)) AS profit#454, catalog channel AS channel#627, concat(catalog_page, cp_catalog_page_id#222) AS id#628], HashAggregate(keys=[cp_catalog_page_id#222], functions=[sum(UnscaledValue(sales_price#479)), sum(UnscaledValue(return_amt#481)), sum(UnscaledValue(profit#480)), sum(UnscaledValue(net_loss#482))])\n      +- Aggregate [web_site_id#289], [MakeDecimal(sum(UnscaledValue(sales_price#495)),17,2) AS sales#505, MakeDecimal(sum(UnscaledValue(return_amt#497)),17,2) AS returns#507, (MakeDecimal(sum(UnscaledValue(profit#496)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#498)),17,2)) AS profit#457, web channel AS channel#629, concat(web_site, web_site_id#289) AS id#630]\n         +- Project [sales_price#495, profit#496, return_amt#497, net_loss#498, web_site_id#289]\n            +- Join Inner, (wsr_web_site_sk#493 = web_site_sk#288)\n               :- Project [wsr_web_site_sk#493, sales_price#495, profit#496, return_amt#497, net_loss#498]\n               :  +- Join Inner, (date_sk#494 = d_date_sk#571)\n               :     :- Union false, false\n               :     :  :- Project [ws_web_site_sk#242 AS wsr_web_site_sk#493, ws_sold_date_sk#263 AS date_sk#494, ws_ext_sales_price#252 AS sales_price#495, ws_net_profit#262 AS profit#496, 0.00 AS return_amt#497, 0.00 AS net_loss#498]\n               :     :  :  +- Filter ((isnotnull(ws_sold_date_sk#263) AND isnotnull(ws_web_site_sk#242)) AND dynamicpruning#633 [ws_sold_date_sk#263])\n               :     :  :     :  +- Project [d_date_sk#571]\n               :     :  :     :     +- Filter ((isnotnull(d_date#573) AND ((d_date#573 >= 1998-08-04) AND (d_date#573 <= 1998-08-18))) AND isnotnull(d_date_sk#571))\n               :     :  :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#571,d_date_id#572,d_date#573,d_month_seq#574,d_week_seq#575,d_quarter_seq#576,d_year#577,d_dow#578,d_moy#579,d_dom#580,d_qoy#581,d_fy_year#582,d_fy_quarter_seq#583,d_fy_week_seq#584,d_day_name#585,d_quarter_name#586,d_holiday#587,d_weekend#588,d_following_holiday#589,d_first_dom#590,d_last_dom#591,d_same_day_ly#592,d_same_day_lq#593,d_current_day#594,... 4 more fields] parquet\n               :     :  :     +- Relation spark_catalog.tpcds_100.web_sales[ws_sold_time_sk#230,ws_ship_date_sk#231,ws_item_sk#232,ws_bill_customer_sk#233,ws_bill_cdemo_sk#234,ws_bill_hdemo_sk#235,ws_bill_addr_sk#236,ws_ship_customer_sk#237,ws_ship_cdemo_sk#238,ws_ship_hdemo_sk#239,ws_ship_addr_sk#240,ws_web_page_sk#241,ws_web_site_sk#242,ws_ship_mode_sk#243,ws_warehouse_sk#244,ws_promo_sk#245,ws_order_number#246L,ws_quantity#247,ws_wholesale_cost#248,ws_list_price#249,ws_sales_price#250,ws_ext_discount_amt#251,ws_ext_sales_price#252,ws_ext_wholesale_cost#253,... 10 more fields] parquet\n               :     :  +- Project [ws_web_site_sk#549 AS wsr_web_site_sk#499, wr_returned_date_sk#287 AS date_sk#500, 0.00 AS sales_price#501, 0.00 AS profit#502, wr_return_amt#278 AS return_amt#503, wr_net_loss#286 AS net_loss#504]\n               :     :     +- Join Inner, ((wr_item_sk#265 = ws_item_sk#539) AND (wr_order_number#276L = ws_order_number#553L))\n               :     :        :- LogicalQueryStage Project [wr_item_sk#265, wr_order_number#276L, wr_return_amt#278, wr_net_loss#286, wr_returned_date_sk#287], ShuffleQueryStage 5\n               :     :        +- LogicalQueryStage Project [ws_item_sk#539, ws_web_site_sk#549, ws_order_number#553L], ShuffleQueryStage 6\n               :     +- LogicalQueryStage Project [d_date_sk#571], BroadcastQueryStage 8\n               +- LogicalQueryStage Project [web_site_sk#288, web_site_id#289], BroadcastQueryStage 9\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : -1913301465,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 40562791490200320,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [5]: [web_site_id#289, sum#666L, sum#667L, sum#668L, sum#669L] Arguments: 13 "
          },
          "4" : {
            "sign" : 142236620,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 17640,
            "rowCount" : 210,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [5]: [s_store_id#132, sum#650L, sum#651L, sum#652L, sum#653L] Arguments: 10 "
          },
          "5" : {
            "sign" : -1832439884,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 1353152,
            "rowCount" : 21143,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [5]: [cp_catalog_page_id#222, sum#658L, sum#659L, sum#660L, sum#661L] Keys [1]: [cp_catalog_page_id#222] Functions [4]: [sum(UnscaledValue(sales_price#479)), sum(UnscaledValue(return_amt#481)), sum(UnscaledValue(profit#480)), sum(UnscaledValue(net_loss#482))] Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#479))#603L, sum(UnscaledValue(return_amt#481))#605L, sum(UnscaledValue(profit#480))#604L, sum(UnscaledValue(net_loss#482))#606L] Results [5]: [MakeDecimal(sum(UnscaledValue(sales_price#479))#603L,17,2) AS sales#489, MakeDecimal(sum(UnscaledValue(return_amt#481))#605L,17,2) AS returns#491, (MakeDecimal(sum(UnscaledValue(profit#480))#604L,17,2) - MakeDecimal(sum(UnscaledValue(net_loss#482))#606L,17,2)) AS profit#454, catalog channel AS channel#627, concat(catalog_page, cp_catalog_page_id#222) AS id#628] "
          },
          "6" : {
            "sign" : 1165327457,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 1713600,
            "rowCount" : 20400,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [5]: [cp_catalog_page_id#222, sum#658L, sum#659L, sum#660L, sum#661L] Arguments: 11 "
          },
          "1" : {
            "sign" : 2083775214,
            "className" : "org.apache.spark.sql.execution.ExpandExec",
            "sizeInBytes" : 135209304973105200,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Expand Input [5]: [sales#473, returns#475, profit#451, channel#617, id#618] Arguments: [[sales#473, returns#475, profit#451, channel#617, id#618, 0], [sales#473, returns#475, profit#451, channel#617, null, 1], [sales#473, returns#475, profit#451, null, null, 3]], [sales#473, returns#475, profit#451, channel#620, id#621, spark_grouping_id#619L] "
          },
          "0" : {
            "sign" : 105170006,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 162251165967726240,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [6]: [sales#473, returns#475, profit#451, channel#620, id#621, spark_grouping_id#619L] Keys [3]: [channel#620, id#621, spark_grouping_id#619L] Functions [3]: [partial_sum(sales#473), partial_sum(returns#475), partial_sum(profit#451)] Aggregate Attributes [6]: [sum#634, isEmpty#635, sum#636, isEmpty#637, sum#638, isEmpty#639] Results [9]: [channel#620, id#621, spark_grouping_id#619L, sum#640, isEmpty#641, sum#642, isEmpty#643, sum#644, isEmpty#645] "
          },
          "2" : {
            "sign" : -898838293,
            "className" : "org.apache.spark.sql.execution.UnionExec",
            "sizeInBytes" : 40562791491931560,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Union "
          },
          "7" : {
            "sign" : 830573044,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 85696,
            "rowCount" : 1339,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [5]: [web_site_id#289, sum#666L, sum#667L, sum#668L, sum#669L] Keys [1]: [web_site_id#289] Functions [4]: [sum(UnscaledValue(sales_price#495)), sum(UnscaledValue(return_amt#497)), sum(UnscaledValue(profit#496)), sum(UnscaledValue(net_loss#498))] Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#495))#607L, sum(UnscaledValue(return_amt#497))#609L, sum(UnscaledValue(profit#496))#608L, sum(UnscaledValue(net_loss#498))#610L] Results [5]: [MakeDecimal(sum(UnscaledValue(sales_price#495))#607L,17,2) AS sales#505, MakeDecimal(sum(UnscaledValue(return_amt#497))#609L,17,2) AS returns#507, (MakeDecimal(sum(UnscaledValue(profit#496))#608L,17,2) - MakeDecimal(sum(UnscaledValue(net_loss#498))#610L,17,2)) AS profit#457, web channel AS channel#629, concat(web_site, web_site_id#289) AS id#630] "
          },
          "3" : {
            "sign" : 901368888,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 385920,
            "rowCount" : 6030,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [5]: [s_store_id#132, sum#650L, sum#651L, sum#652L, sum#653L] Keys [1]: [s_store_id#132] Functions [4]: [sum(UnscaledValue(sales_price#463)), sum(UnscaledValue(return_amt#465)), sum(UnscaledValue(profit#464)), sum(UnscaledValue(net_loss#466))] Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#463))#599L, sum(UnscaledValue(return_amt#465))#601L, sum(UnscaledValue(profit#464))#600L, sum(UnscaledValue(net_loss#466))#602L] Results [5]: [MakeDecimal(sum(UnscaledValue(sales_price#463))#599L,17,2) AS sales#473, MakeDecimal(sum(UnscaledValue(return_amt#465))#601L,17,2) AS returns#475, (MakeDecimal(sum(UnscaledValue(profit#464))#600L,17,2) - MakeDecimal(sum(UnscaledValue(net_loss#466))#602L,17,2)) AS profit#451, store channel AS channel#617, concat(store, s_store_id#132) AS id#618] "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 3,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "HashAggregate",
          "toId" : 2,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "ShuffleQueryStage",
          "toId" : 5,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "HashAggregate",
          "toId" : 2,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "ShuffleQueryStage",
          "toId" : 7,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "HashAggregate",
          "toId" : 2,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Union",
          "toId" : 1,
          "toName" : "Expand",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Expand",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[channel#620, id#621, spark_grouping_id#619L], functions=[partial_sum(sales#473), partial_sum(returns#475), partial_sum(profit#451)], output=[channel#620, id#621, spark_grouping_id#619L, sum#640, isEmpty#641, sum#642, isEmpty#643, sum#644, isEmpty#645])\n+- Expand [[sales#473, returns#475, profit#451, channel#617, id#618, 0], [sales#473, returns#475, profit#451, channel#617, null, 1], [sales#473, returns#475, profit#451, null, null, 3]], [sales#473, returns#475, profit#451, channel#620, id#621, spark_grouping_id#619L]\n   +- Union\n      :- HashAggregate(keys=[s_store_id#132], functions=[sum(UnscaledValue(sales_price#463)), sum(UnscaledValue(return_amt#465)), sum(UnscaledValue(profit#464)), sum(UnscaledValue(net_loss#466))], output=[sales#473, returns#475, profit#451, channel#617, id#618])\n      :  +- ShuffleQueryStage 10\n      :     +- Exchange hashpartitioning(s_store_id#132, 200), ENSURE_REQUIREMENTS, [plan_id=1015]\n      :        +- *(11) HashAggregate(keys=[s_store_id#132], functions=[partial_sum(UnscaledValue(sales_price#463)), partial_sum(UnscaledValue(return_amt#465)), partial_sum(UnscaledValue(profit#464)), partial_sum(UnscaledValue(net_loss#466))], output=[s_store_id#132, sum#650L, sum#651L, sum#652L, sum#653L])\n      :           +- *(11) Project [sales_price#463, profit#464, return_amt#465, net_loss#466, s_store_id#132]\n      :              +- *(11) BroadcastHashJoin [store_sk#461], [s_store_sk#131], Inner, BuildRight, false\n      :                 :- *(11) Project [store_sk#461, sales_price#463, profit#464, return_amt#465, net_loss#466]\n      :                 :  +- *(11) BroadcastHashJoin [date_sk#462], [d_date_sk#103], Inner, BuildRight, false\n      :                 :     :- Union\n      :                 :     :  :- *(9) Project [ss_store_sk#66 AS store_sk#461, ss_sold_date_sk#82 AS date_sk#462, ss_ext_sales_price#74 AS sales_price#463, ss_net_profit#81 AS profit#464, 0.00 AS return_amt#465, 0.00 AS net_loss#466]\n      :                 :     :  :  +- *(9) Filter isnotnull(ss_store_sk#66)\n      :                 :     :  :     +- *(9) ColumnarToRow\n      :                 :     :  :        +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_store_sk#66,ss_ext_sales_price#74,ss_net_profit#81,ss_sold_date_sk#82] Batched: true, DataFilters: [isnotnull(ss_store_sk#66)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#82), dynamicpruningexpression(ss_sold_date_sk#82 IN dynamicpruning#633)], PushedFilters: [IsNotNull(ss_store_sk)], ReadSchema: struct<ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>\n      :                 :     :  :              +- ReusedSubquery SubqueryBroadcast dynamicpruning#633, 0, [d_date_sk#571], [id=#568]\n      :                 :     :  +- *(10) Project [sr_store_sk#89 AS store_sk#467, sr_returned_date_sk#102 AS date_sk#468, 0.00 AS sales_price#469, 0.00 AS profit#470, sr_return_amt#93 AS return_amt#471, sr_net_loss#101 AS net_loss#472]\n      :                 :     :     +- *(10) Filter isnotnull(sr_store_sk#89)\n      :                 :     :        +- *(10) ColumnarToRow\n      :                 :     :           +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_store_sk#89,sr_return_amt#93,sr_net_loss#101,sr_returned_date_sk#102] Batched: true, DataFilters: [isnotnull(sr_store_sk#89)], Format: Parquet, Location: InMemoryFileIndex(2003 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(sr_returned_date_sk#102), dynamicpruningexpression(sr_returned_date_sk#102 IN dynamicp..., PushedFilters: [IsNotNull(sr_store_sk)], ReadSchema: struct<sr_store_sk:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>\n      :                 :     :                 +- ReusedSubquery SubqueryBroadcast dynamicpruning#633, 0, [d_date_sk#571], [id=#568]\n      :                 :     +- BroadcastQueryStage 0\n      :                 :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=490]\n      :                 :           +- *(1) Project [d_date_sk#103]\n      :                 :              +- *(1) Filter (((isnotnull(d_date#105) AND (d_date#105 >= 1998-08-04)) AND (d_date#105 <= 1998-08-18)) AND isnotnull(d_date_sk#103))\n      :                 :                 +- *(1) ColumnarToRow\n      :                 :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_date#105] Batched: true, DataFilters: [isnotnull(d_date#105), (d_date#105 >= 1998-08-04), (d_date#105 <= 1998-08-18), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-08-18), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n      :                 +- BroadcastQueryStage 1\n      :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=509]\n      :                       +- *(2) Filter isnotnull(s_store_sk#131)\n      :                          +- *(2) ColumnarToRow\n      :                             +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#131,s_store_id#132] Batched: true, DataFilters: [isnotnull(s_store_sk#131)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_store_id:string>\n      :- HashAggregate(keys=[cp_catalog_page_id#222], functions=[sum(UnscaledValue(sales_price#479)), sum(UnscaledValue(return_amt#481)), sum(UnscaledValue(profit#480)), sum(UnscaledValue(net_loss#482))], output=[sales#489, returns#491, profit#454, channel#627, id#628])\n      :  +- ShuffleQueryStage 11\n      :     +- Exchange hashpartitioning(cp_catalog_page_id#222, 200), ENSURE_REQUIREMENTS, [plan_id=1140]\n      :        +- *(14) HashAggregate(keys=[cp_catalog_page_id#222], functions=[partial_sum(UnscaledValue(sales_price#479)), partial_sum(UnscaledValue(return_amt#481)), partial_sum(UnscaledValue(profit#480)), partial_sum(UnscaledValue(net_loss#482))], output=[cp_catalog_page_id#222, sum#658L, sum#659L, sum#660L, sum#661L])\n      :           +- *(14) Project [sales_price#479, profit#480, return_amt#481, net_loss#482, cp_catalog_page_id#222]\n      :              +- *(14) BroadcastHashJoin [page_sk#477], [cp_catalog_page_sk#221], Inner, BuildRight, false\n      :                 :- *(14) Project [page_sk#477, sales_price#479, profit#480, return_amt#481, net_loss#482]\n      :                 :  +- *(14) BroadcastHashJoin [date_sk#478], [d_date_sk#509], Inner, BuildRight, false\n      :                 :     :- Union\n      :                 :     :  :- *(12) Project [cs_catalog_page_sk#171 AS page_sk#477, cs_sold_date_sk#193 AS date_sk#478, cs_ext_sales_price#182 AS sales_price#479, cs_net_profit#192 AS profit#480, 0.00 AS return_amt#481, 0.00 AS net_loss#482]\n      :                 :     :  :  +- *(12) Filter isnotnull(cs_catalog_page_sk#171)\n      :                 :     :  :     +- *(12) ColumnarToRow\n      :                 :     :  :        +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_catalog_page_sk#171,cs_ext_sales_price#182,cs_net_profit#192,cs_sold_date_sk#193] Batched: true, DataFilters: [isnotnull(cs_catalog_page_sk#171)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#193), dynamicpruningexpression(cs_sold_date_sk#193 IN dynamicpruning#6..., PushedFilters: [IsNotNull(cs_catalog_page_sk)], ReadSchema: struct<cs_catalog_page_sk:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>\n      :                 :     :  :              +- ReusedSubquery SubqueryBroadcast dynamicpruning#633, 0, [d_date_sk#571], [id=#568]\n      :                 :     :  +- *(13) Project [cr_catalog_page_sk#205 AS page_sk#483, cr_returned_date_sk#220 AS date_sk#484, 0.00 AS sales_price#485, 0.00 AS profit#486, cr_return_amount#211 AS return_amt#487, cr_net_loss#219 AS net_loss#488]\n      :                 :     :     +- *(13) Filter isnotnull(cr_catalog_page_sk#205)\n      :                 :     :        +- *(13) ColumnarToRow\n      :                 :     :           +- FileScan parquet spark_catalog.tpcds_100.catalog_returns[cr_catalog_page_sk#205,cr_return_amount#211,cr_net_loss#219,cr_returned_date_sk#220] Batched: true, DataFilters: [isnotnull(cr_catalog_page_sk#205)], Format: Parquet, Location: InMemoryFileIndex(2101 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cr_returned_date_sk#220), dynamicpruningexpression(cr_returned_date_sk#220 IN dynamicp..., PushedFilters: [IsNotNull(cr_catalog_page_sk)], ReadSchema: struct<cr_catalog_page_sk:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>\n      :                 :     :                 +- ReusedSubquery SubqueryBroadcast dynamicpruning#633, 0, [d_date_sk#571], [id=#568]\n      :                 :     +- BroadcastQueryStage 3\n      :                 :        +- ReusedExchange [d_date_sk#509], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=490]\n      :                 +- BroadcastQueryStage 4\n      :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=552]\n      :                       +- *(4) Filter isnotnull(cp_catalog_page_sk#221)\n      :                          +- *(4) ColumnarToRow\n      :                             +- FileScan parquet spark_catalog.tpcds_100.catalog_page[cp_catalog_page_sk#221,cp_catalog_page_id#222] Batched: true, DataFilters: [isnotnull(cp_catalog_page_sk#221)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_p..., PartitionFilters: [], PushedFilters: [IsNotNull(cp_catalog_page_sk)], ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>\n      +- HashAggregate(keys=[web_site_id#289], functions=[sum(UnscaledValue(sales_price#495)), sum(UnscaledValue(return_amt#497)), sum(UnscaledValue(profit#496)), sum(UnscaledValue(net_loss#498))], output=[sales#505, returns#507, profit#457, channel#629, id#630])\n         +- ShuffleQueryStage 13\n            +- Exchange hashpartitioning(web_site_id#289, 200), ENSURE_REQUIREMENTS, [plan_id=1749]\n               +- *(17) HashAggregate(keys=[web_site_id#289], functions=[partial_sum(UnscaledValue(sales_price#495)), partial_sum(UnscaledValue(return_amt#497)), partial_sum(UnscaledValue(profit#496)), partial_sum(UnscaledValue(net_loss#498))], output=[web_site_id#289, sum#666L, sum#667L, sum#668L, sum#669L])\n                  +- *(17) Project [sales_price#495, profit#496, return_amt#497, net_loss#498, web_site_id#289]\n                     +- *(17) BroadcastHashJoin [wsr_web_site_sk#493], [web_site_sk#288], Inner, BuildRight, false\n                        :- *(17) Project [wsr_web_site_sk#493, sales_price#495, profit#496, return_amt#497, net_loss#498]\n                        :  +- *(17) BroadcastHashJoin [date_sk#494], [d_date_sk#571], Inner, BuildRight, false\n                        :     :- Union\n                        :     :  :- *(15) Project [ws_web_site_sk#242 AS wsr_web_site_sk#493, ws_sold_date_sk#263 AS date_sk#494, ws_ext_sales_price#252 AS sales_price#495, ws_net_profit#262 AS profit#496, 0.00 AS return_amt#497, 0.00 AS net_loss#498]\n                        :     :  :  +- *(15) Filter isnotnull(ws_web_site_sk#242)\n                        :     :  :     +- *(15) ColumnarToRow\n                        :     :  :        +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_web_site_sk#242,ws_ext_sales_price#252,ws_net_profit#262,ws_sold_date_sk#263] Batched: true, DataFilters: [isnotnull(ws_web_site_sk#242)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sa..., PartitionFilters: [isnotnull(ws_sold_date_sk#263), dynamicpruningexpression(ws_sold_date_sk#263 IN dynamicpruning#6..., PushedFilters: [IsNotNull(ws_web_site_sk)], ReadSchema: struct<ws_web_site_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>\n                        :     :  :              +- ReusedSubquery SubqueryBroadcast dynamicpruning#633, 0, [d_date_sk#571], [id=#568]\n                        :     :  +- *(16) Project [ws_web_site_sk#549 AS wsr_web_site_sk#499, wr_returned_date_sk#287 AS date_sk#500, 0.00 AS sales_price#501, 0.00 AS profit#502, wr_return_amt#278 AS return_amt#503, wr_net_loss#286 AS net_loss#504]\n                        :     :     +- *(16) BroadcastHashJoin [wr_item_sk#265, wr_order_number#276L], [ws_item_sk#539, ws_order_number#553L], Inner, BuildLeft, false\n                        :     :        :- BroadcastQueryStage 12\n                        :     :        :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, true], input[1, bigint, true]),false), [plan_id=1307]\n                        :     :        :     +- AQEShuffleRead local\n                        :     :        :        +- ShuffleQueryStage 5\n                        :     :        :           +- Exchange hashpartitioning(wr_item_sk#265, wr_order_number#276L, 200), ENSURE_REQUIREMENTS, [plan_id=578]\n                        :     :        :              +- *(5) ColumnarToRow\n                        :     :        :                 +- FileScan parquet spark_catalog.tpcds_100.web_returns[wr_item_sk#265,wr_order_number#276L,wr_return_amt#278,wr_net_loss#286,wr_returned_date_sk#287] Batched: true, DataFilters: [], Format: Parquet, Location: InMemoryFileIndex(2179 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_re..., PartitionFilters: [isnotnull(wr_returned_date_sk#287), dynamicpruningexpression(wr_returned_date_sk#287 IN dynamicp..., PushedFilters: [], ReadSchema: struct<wr_item_sk:int,wr_order_number:bigint,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>\n                        :     :        :                       +- SubqueryBroadcast dynamicpruning#633, 0, [d_date_sk#571], [id=#568]\n                        :     :        :                          +- AdaptiveSparkPlan isFinalPlan=true\n                                                                     +- == Final Plan ==\n                                                                        BroadcastQueryStage 1\n                                                                        +- ReusedExchange [d_date_sk#571], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=490]\n                                                                     +- == Initial Plan ==\n                                                                        BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=565]\n                                                                        +- Project [d_date_sk#571]\n                                                                           +- Filter (((isnotnull(d_date#573) AND (d_date#573 >= 1998-08-04)) AND (d_date#573 <= 1998-08-18)) AND isnotnull(d_date_sk#571))\n                                                                              +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#571,d_date#573] Batched: true, DataFilters: [isnotnull(d_date#573), (d_date#573 >= 1998-08-04), (d_date#573 <= 1998-08-18), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-08-18), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n                        :     :        +- AQEShuffleRead local\n                        :     :           +- ShuffleQueryStage 6\n                        :     :              +- Exchange hashpartitioning(ws_item_sk#539, ws_order_number#553L, 200), ENSURE_REQUIREMENTS, [plan_id=595]\n                        :     :                 +- *(6) Project [ws_item_sk#539, ws_web_site_sk#549, ws_order_number#553L]\n                        :     :                    +- *(6) Filter ((isnotnull(ws_item_sk#539) AND isnotnull(ws_order_number#553L)) AND isnotnull(ws_web_site_sk#549))\n                        :     :                       +- *(6) ColumnarToRow\n                        :     :                          +- FileScan parquet spark_catalog.tpcds_100.web_sales[ws_item_sk#539,ws_web_site_sk#549,ws_order_number#553L,ws_sold_date_sk#570] Batched: true, DataFilters: [isnotnull(ws_item_sk#539), isnotnull(ws_order_number#553L), isnotnull(ws_web_site_sk#549)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_sales], PartitionFilters: [], PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_site_sk)], ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_order_number:bigint>\n                        :     +- BroadcastQueryStage 8\n                        :        +- ReusedExchange [d_date_sk#571], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=490]\n                        +- BroadcastQueryStage 9\n                           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=640]\n                              +- *(8) Filter isnotnull(web_site_sk#288)\n                                 +- *(8) ColumnarToRow\n                                    +- FileScan parquet spark_catalog.tpcds_100.web_site[web_site_sk#288,web_site_id#289] Batched: true, DataFilters: [isnotnull(web_site_sk#288)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_site], PartitionFilters: [], PushedFilters: [IsNotNull(web_site_sk)], ReadSchema: struct<web_site_sk:int,web_site_id:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1824768,
        "inputRowCount" : 28512
      },
      "InitialPartitionNum" : 0,
      "PD" : {
        "2" : [ 0, 0, 3846, 0, 4568, 3834, 0, 3870, 2901, 3846, 2775, 0, 3834, 2901, 0, 0, 0, 3750, 0, 2892, 3834, 0, 0, 2892, 3702, 2901, 2892, 3834, 2901, 3870, 2910, 2901, 0, 2910, 2901, 2901, 0, 2901, 3834, 2775, 3870, 0, 2892, 2910, 0, 2775, 2901, 2910, 3834, 4512, 3834, 0, 2910, 3834, 2901, 2892, 0, 0, 0, 3846, 6942, 0, 2901, 2901, 0, 3822, 5418, 2910, 2892, 3798, 3786, 0, 0, 0, 3846, 2901, 2910, 0, 0, 2901, 3822, 0, 2775, 2910, 2901, 2892, 3846, 0, 0, 3798, 3846, 3822, 2901, 0, 0, 0, 3714, 3870, 0, 2910, 4610, 0, 2901, 0, 0, 2883, 2775, 0, 3846, 0, 0, 3846, 3858, 2901, 0, 0, 3774, 2910, 0, 0, 0, 3834, 4638, 0, 2910, 0, 0, 3642, 3858, 3822, 0, 2910, 0, 0, 2910, 2910, 2910, 3846, 2910, 0, 0, 2901, 0, 0, 3846, 0, 3834, 2892, 2901, 2910, 2901, 0, 2883, 0, 0, 3822, 2901, 3714, 5328, 2892, 0, 0, 3762, 0, 0, 0, 2901, 0, 3858, 3726, 0, 2910, 0, 2892, 0, 5436, 2892, 3810, 4596, 2910, 3750, 0, 2892, 2901, 2910, 3846, 3774, 2892, 3870, 0, 3834, 0, 2901, 2892, 0, 2892, 2901, 2892, 0, 2901 ],
        "4" : [ 0, 0, 0, 0, 10783, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10765, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10906, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10316, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10589, 0, 0, 0, 0, 0, 10738, 0, 0, 0, 10889, 0, 0, 10844, 0, 0, 0, 0, 0, 0, 10853, 0, 0, 0, 9666, 0, 0, 0, 0, 0, 10404, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
        "3" : [ 4808, 3830, 7930, 4564, 6903, 4293, 3384, 6746, 5631, 5354, 5253, 3557, 4191, 2001, 3001, 3941, 4653, 5380, 4781, 5407, 4685, 5507, 3638, 4540, 3608, 6114, 5252, 6013, 7171, 6637, 4135, 6877, 4064, 3734, 6058, 5677, 4247, 5124, 6235, 5058, 4950, 5588, 5641, 4956, 4078, 5076, 5216, 5413, 5363, 8151, 6546, 5212, 6502, 4192, 5829, 6327, 5356, 6893, 5778, 3913, 10002, 4989, 7242, 4841, 2408, 7435, 9124, 6866, 5719, 6264, 4408, 4047, 3200, 4212, 5106, 6057, 6111, 5383, 6190, 5615, 4455, 3405, 5267, 4093, 4458, 4973, 6952, 4897, 4445, 5494, 5480, 7258, 4361, 4824, 5019, 1860, 6159, 6437, 1565, 3139, 7678, 3312, 2832, 4550, 3891, 4719, 3985, 6079, 5330, 5520, 3188, 5139, 4839, 3694, 1592, 3494, 6480, 5652, 4498, 4134, 1762, 4651, 5310, 6496, 4836, 6306, 3883, 5072, 7218, 4846, 5218, 5041, 4628, 3698, 3452, 2172, 5017, 4704, 3913, 2004, 3486, 3530, 3534, 3857, 5635, 4318, 5173, 5365, 5221, 4922, 5600, 4393, 4030, 5279, 5029, 5385, 4284, 4072, 5434, 4652, 1889, 4394, 4953, 4665, 4443, 880, 4594, 3126, 5774, 5468, 4038, 4625, 3060, 4832, 5311, 7005, 4488, 4930, 7465, 5645, 3795, 4505, 2405, 4880, 4936, 6218, 8144, 5170, 7327, 5085, 5687, 4970, 3976, 4268, 4279, 4914, 5413, 4655, 5598, 7819 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 10,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 22 ],
      "Objectives" : {
        "DurationInMs" : 304,
        "TotalTasksDurationInMs" : 677,
        "IOBytes" : {
          "Total" : 1586484,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1479030,
            "SW" : 107454
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "8" : {
            "sign" : -166967311,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              },
              "compileTime" : {
                "sizeInBytes" : 41806893656,
                "rowCount" : 275045353
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ss_sold_time_sk#60, ss_item_sk#61, ss_customer_sk#62, ss_cdemo_sk#63, ss_hdemo_sk#64, ss_addr_sk#65, ss_store_sk#66, ss_promo_sk#67, ss_ticket_number#68L, ss_quantity#69, ss_wholesale_cost#70, ss_list_price#71, ss_sales_price#72, ss_ext_discount_amt#73, ss_ext_sales_price#74, ss_ext_wholesale_cost#75, ss_ext_list_price#76, ss_ext_tax#77, ss_coupon_amt#78, ss_net_paid#79, ss_net_paid_inc_tax#80, ss_net_profit#81, ss_sold_date_sk#82], `spark_catalog`.`tpcds_100`.`store_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "4" : {
            "sign" : 1293577031,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 210753162984,
                "rowCount" : 4052945442
              },
              "compileTime" : {
                "sizeInBytes" : 210753162984,
                "rowCount" : 4052945442
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (date_sk#462 = d_date_sk#103) "
          },
          "11" : {
            "sign" : 1795467426,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3557606528,
                "rowCount" : 27793801
              },
              "compileTime" : {
                "sizeInBytes" : 3557606528,
                "rowCount" : 27793801
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [sr_return_time_sk#83, sr_item_sk#84, sr_customer_sk#85, sr_cdemo_sk#86, sr_hdemo_sk#87, sr_addr_sk#88, sr_store_sk#89, sr_reason_sk#90, sr_ticket_number#91L, sr_return_quantity#92, sr_return_amt#93, sr_return_tax#94, sr_return_amt_inc_tax#95, sr_fee#96, sr_return_ship_cost#97, sr_refunded_cash#98, sr_reversed_charge#99, sr_store_credit#100, sr_net_loss#101, sr_returned_date_sk#102], `spark_catalog`.`tpcds_100`.`store_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "9" : {
            "sign" : 144179700,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1287482640,
                "rowCount" : 26822555
              },
              "compileTime" : {
                "sizeInBytes" : 1287482640,
                "rowCount" : 26822555
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sr_store_sk#89 AS store_sk#467, sr_returned_date_sk#102 AS date_sk#468, 0.00 AS sales_price#469, 0.00 AS profit#470, sr_return_amt#93 AS return_amt#471, sr_net_loss#101 AS net_loss#472] "
          },
          "5" : {
            "sign" : 782820937,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 13895812944,
                "rowCount" : 289496103
              },
              "compileTime" : {
                "sizeInBytes" : 13895812944,
                "rowCount" : 289496103
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "10" : {
            "sign" : 475748417,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3433287040,
                "rowCount" : 26822555
              },
              "compileTime" : {
                "sizeInBytes" : 3433287040,
                "rowCount" : 26822555
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(sr_returned_date_sk#102) AND isnotnull(sr_store_sk#89)) AND dynamicpruning#631 [sr_returned_date_sk#102]) "
          },
          "6" : {
            "sign" : -270570787,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 12608330304,
                "rowCount" : 262673548
              },
              "compileTime" : {
                "sizeInBytes" : 12608330304,
                "rowCount" : 262673548
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ss_store_sk#66 AS store_sk#461, ss_sold_date_sk#82 AS date_sk#462, ss_ext_sales_price#74 AS sales_price#463, ss_net_profit#81 AS profit#464, 0.00 AS return_amt#465, 0.00 AS net_loss#466] "
          },
          "1" : {
            "sign" : 274425414,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 110791316602512,
                "rowCount" : 1629284067684
              },
              "compileTime" : {
                "sizeInBytes" : 110791316602512,
                "rowCount" : 1629284067684
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales_price#463, profit#464, return_amt#465, net_loss#466, s_store_id#132] "
          },
          "0" : {
            "sign" : -228413894,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17640,
                "rowCount" : 210
              },
              "compileTime" : {
                "sizeInBytes" : 17640,
                "rowCount" : 210
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [s_store_id#132], [MakeDecimal(sum(UnscaledValue(sales_price#463)),17,2) AS sales#473, MakeDecimal(sum(UnscaledValue(return_amt#465)),17,2) AS returns#475, (MakeDecimal(sum(UnscaledValue(profit#464)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#466)),17,2)) AS profit#451, store channel AS channel#617, concat(store, s_store_id#132) AS id#618] "
          },
          "2" : {
            "sign" : -792528985,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 123825589143984,
                "rowCount" : 1629284067684
              },
              "compileTime" : {
                "sizeInBytes" : 123825589143984,
                "rowCount" : 1629284067684
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (store_sk#461 = s_store_sk#131) "
          },
          "7" : {
            "sign" : 750163788,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 39926379296,
                "rowCount" : 262673548
              },
              "compileTime" : {
                "sizeInBytes" : 39926379296,
                "rowCount" : 262673548
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ss_sold_date_sk#82) AND isnotnull(ss_store_sk#66)) AND dynamicpruning#631 [ss_sold_date_sk#82]) "
          },
          "3" : {
            "sign" : 1966046036,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 178329599448,
                "rowCount" : 4052945442
              },
              "compileTime" : {
                "sizeInBytes" : 178329599448,
                "rowCount" : 4052945442
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [store_sk#461, sales_price#463, profit#464, return_amt#465, net_loss#466] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalRelation",
          "toId" : 7,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalRelation",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Union",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [s_store_id#132], [MakeDecimal(sum(UnscaledValue(sales_price#463)),17,2) AS sales#473, MakeDecimal(sum(UnscaledValue(return_amt#465)),17,2) AS returns#475, (MakeDecimal(sum(UnscaledValue(profit#464)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#466)),17,2)) AS profit#451, store channel AS channel#617, concat(store, s_store_id#132) AS id#618]\n+- Project [sales_price#463, profit#464, return_amt#465, net_loss#466, s_store_id#132]\n   +- Join Inner, (store_sk#461 = s_store_sk#131)\n      :- Project [store_sk#461, sales_price#463, profit#464, return_amt#465, net_loss#466]\n      :  +- Join Inner, (date_sk#462 = d_date_sk#103)\n      :     :- Union false, false\n      :     :  :- Project [ss_store_sk#66 AS store_sk#461, ss_sold_date_sk#82 AS date_sk#462, ss_ext_sales_price#74 AS sales_price#463, ss_net_profit#81 AS profit#464, 0.00 AS return_amt#465, 0.00 AS net_loss#466]\n      :     :  :  +- Filter ((isnotnull(ss_sold_date_sk#82) AND isnotnull(ss_store_sk#66)) AND dynamicpruning#631 [ss_sold_date_sk#82])\n      :     :  :     :  +- Project [d_date_sk#103]\n      :     :  :     :     +- Filter ((isnotnull(d_date#105) AND ((d_date#105 >= 1998-08-04) AND (d_date#105 <= 1998-08-18))) AND isnotnull(d_date_sk#103))\n      :     :  :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_date_id#104,d_date#105,d_month_seq#106,d_week_seq#107,d_quarter_seq#108,d_year#109,d_dow#110,d_moy#111,d_dom#112,d_qoy#113,d_fy_year#114,d_fy_quarter_seq#115,d_fy_week_seq#116,d_day_name#117,d_quarter_name#118,d_holiday#119,d_weekend#120,d_following_holiday#121,d_first_dom#122,d_last_dom#123,d_same_day_ly#124,d_same_day_lq#125,d_current_day#126,... 4 more fields] parquet\n      :     :  :     +- Relation spark_catalog.tpcds_100.store_sales[ss_sold_time_sk#60,ss_item_sk#61,ss_customer_sk#62,ss_cdemo_sk#63,ss_hdemo_sk#64,ss_addr_sk#65,ss_store_sk#66,ss_promo_sk#67,ss_ticket_number#68L,ss_quantity#69,ss_wholesale_cost#70,ss_list_price#71,ss_sales_price#72,ss_ext_discount_amt#73,ss_ext_sales_price#74,ss_ext_wholesale_cost#75,ss_ext_list_price#76,ss_ext_tax#77,ss_coupon_amt#78,ss_net_paid#79,ss_net_paid_inc_tax#80,ss_net_profit#81,ss_sold_date_sk#82] parquet\n      :     :  +- Project [sr_store_sk#89 AS store_sk#467, sr_returned_date_sk#102 AS date_sk#468, 0.00 AS sales_price#469, 0.00 AS profit#470, sr_return_amt#93 AS return_amt#471, sr_net_loss#101 AS net_loss#472]\n      :     :     +- Filter ((isnotnull(sr_returned_date_sk#102) AND isnotnull(sr_store_sk#89)) AND dynamicpruning#631 [sr_returned_date_sk#102])\n      :     :        :  +- Project [d_date_sk#103]\n      :     :        :     +- Filter ((isnotnull(d_date#105) AND ((d_date#105 >= 1998-08-04) AND (d_date#105 <= 1998-08-18))) AND isnotnull(d_date_sk#103))\n      :     :        :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_date_id#104,d_date#105,d_month_seq#106,d_week_seq#107,d_quarter_seq#108,d_year#109,d_dow#110,d_moy#111,d_dom#112,d_qoy#113,d_fy_year#114,d_fy_quarter_seq#115,d_fy_week_seq#116,d_day_name#117,d_quarter_name#118,d_holiday#119,d_weekend#120,d_following_holiday#121,d_first_dom#122,d_last_dom#123,d_same_day_ly#124,d_same_day_lq#125,d_current_day#126,... 4 more fields] parquet\n      :     :        +- Relation spark_catalog.tpcds_100.store_returns[sr_return_time_sk#83,sr_item_sk#84,sr_customer_sk#85,sr_cdemo_sk#86,sr_hdemo_sk#87,sr_addr_sk#88,sr_store_sk#89,sr_reason_sk#90,sr_ticket_number#91L,sr_return_quantity#92,sr_return_amt#93,sr_return_tax#94,sr_return_amt_inc_tax#95,sr_fee#96,sr_return_ship_cost#97,sr_refunded_cash#98,sr_reversed_charge#99,sr_store_credit#100,sr_net_loss#101,sr_returned_date_sk#102] parquet\n      :     +- Project [d_date_sk#103]\n      :        +- Filter ((isnotnull(d_date#105) AND ((d_date#105 >= 1998-08-04) AND (d_date#105 <= 1998-08-18))) AND isnotnull(d_date_sk#103))\n      :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_date_id#104,d_date#105,d_month_seq#106,d_week_seq#107,d_quarter_seq#108,d_year#109,d_dow#110,d_moy#111,d_dom#112,d_qoy#113,d_fy_year#114,d_fy_quarter_seq#115,d_fy_week_seq#116,d_day_name#117,d_quarter_name#118,d_holiday#119,d_weekend#120,d_following_holiday#121,d_first_dom#122,d_last_dom#123,d_same_day_ly#124,d_same_day_lq#125,d_current_day#126,... 4 more fields] parquet\n      +- Project [s_store_sk#131, s_store_id#132]\n         +- Filter isnotnull(s_store_sk#131)\n            +- Relation spark_catalog.tpcds_100.store[s_store_sk#131,s_store_id#132,s_rec_start_date#133,s_rec_end_date#134,s_closed_date_sk#135,s_store_name#136,s_number_employees#137,s_floor_space#138,s_hours#139,s_manager#140,s_market_id#141,s_geography_class#142,s_market_desc#143,s_market_manager#144,s_division_id#145,s_division_name#146,s_company_id#147,s_company_name#148,s_street_number#149,s_street_name#150,s_street_type#151,s_suite_number#152,s_city#153,s_county#154,... 5 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "12" : {
            "sign" : -857123658,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048696,
            "rowCount" : 15,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#103] Arguments: 0 "
          },
          "8" : {
            "sign" : 266078196,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 12608330304,
            "rowCount" : 262673548,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_sales Output [4]: [ss_store_sk#66, ss_ext_sales_price#74, ss_net_profit#81, ss_sold_date_sk#82] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_sales/ss_sold_date_sk=2450816, ... 1822 entries] PartitionFilters: [isnotnull(ss_sold_date_sk#82), dynamicpruningexpression(ss_sold_date_sk#82 IN dynamicpruning#633)] PushedFilters: [IsNotNull(ss_store_sk)] ReadSchema: struct<ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)> "
          },
          "4" : {
            "sign" : 2145791201,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 210753162984,
            "rowCount" : 4052945442,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [date_sk#462] Right keys [1]: [d_date_sk#103] Join type: Inner Join condition: None "
          },
          "11" : {
            "sign" : -1335748645,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 1287482640,
            "rowCount" : 26822555,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store_returns Output [4]: [sr_store_sk#89, sr_return_amt#93, sr_net_loss#101, sr_returned_date_sk#102] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_returns/sr_returned_date_sk=2450820, ... 2002 entries] PartitionFilters: [isnotnull(sr_returned_date_sk#102), dynamicpruningexpression(sr_returned_date_sk#102 IN dynamicpruning#633)] PushedFilters: [IsNotNull(sr_store_sk)] ReadSchema: struct<sr_store_sk:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)> "
          },
          "9" : {
            "sign" : -1623880891,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1287482640,
            "rowCount" : 26822555,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [sr_store_sk#89 AS store_sk#467, sr_returned_date_sk#102 AS date_sk#468, 0.00 AS sales_price#469, 0.00 AS profit#470, sr_return_amt#93 AS return_amt#471, sr_net_loss#101 AS net_loss#472] Input [4]: [sr_store_sk#89, sr_return_amt#93, sr_net_loss#101, sr_returned_date_sk#102] "
          },
          "13" : {
            "sign" : 1433616180,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1051792,
            "rowCount" : 402,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [s_store_sk#131, s_store_id#132] Arguments: 1 "
          },
          "5" : {
            "sign" : 1550793645,
            "className" : "org.apache.spark.sql.execution.UnionExec",
            "sizeInBytes" : 13895812944,
            "rowCount" : 289496103,
            "isRuntime" : false,
            "predicate" : " (unknown) Union "
          },
          "10" : {
            "sign" : 386749410,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 1287482640,
            "rowCount" : 26822555,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [sr_store_sk#89, sr_return_amt#93, sr_net_loss#101, sr_returned_date_sk#102] Condition : isnotnull(sr_store_sk#89) "
          },
          "6" : {
            "sign" : 271477160,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 12608330304,
            "rowCount" : 262673548,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [ss_store_sk#66 AS store_sk#461, ss_sold_date_sk#82 AS date_sk#462, ss_ext_sales_price#74 AS sales_price#463, ss_net_profit#81 AS profit#464, 0.00 AS return_amt#465, 0.00 AS net_loss#466] Input [4]: [ss_store_sk#66, ss_ext_sales_price#74, ss_net_profit#81, ss_sold_date_sk#82] "
          },
          "1" : {
            "sign" : -838122820,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 110791316602512,
            "rowCount" : 1629284067684,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [sales_price#463, profit#464, return_amt#465, net_loss#466, s_store_id#132] Input [7]: [store_sk#461, sales_price#463, profit#464, return_amt#465, net_loss#466, s_store_sk#131, s_store_id#132] "
          },
          "0" : {
            "sign" : 1476196089,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 17640,
            "rowCount" : 210,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [5]: [sales_price#463, profit#464, return_amt#465, net_loss#466, s_store_id#132] Keys [1]: [s_store_id#132] Functions [4]: [partial_sum(UnscaledValue(sales_price#463)), partial_sum(UnscaledValue(return_amt#465)), partial_sum(UnscaledValue(profit#464)), partial_sum(UnscaledValue(net_loss#466))] Aggregate Attributes [4]: [sum#646L, sum#647L, sum#648L, sum#649L] Results [5]: [s_store_id#132, sum#650L, sum#651L, sum#652L, sum#653L] "
          },
          "2" : {
            "sign" : 441141735,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 123825589143984,
            "rowCount" : 1629284067684,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [store_sk#461] Right keys [1]: [s_store_sk#131] Join type: Inner Join condition: None "
          },
          "7" : {
            "sign" : -1330197401,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 12608330304,
            "rowCount" : 262673548,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [ss_store_sk#66, ss_ext_sales_price#74, ss_net_profit#81, ss_sold_date_sk#82] Condition : isnotnull(ss_store_sk#66) "
          },
          "3" : {
            "sign" : -1350131054,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 178329599448,
            "rowCount" : 4052945442,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [store_sk#461, sales_price#463, profit#464, return_amt#465, net_loss#466] Input [7]: [store_sk#461, date_sk#462, sales_price#463, profit#464, return_amt#465, net_loss#466, d_date_sk#103] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_sales",
          "toId" : 7,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store_returns",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Union",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "BroadcastQueryStage",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastHashJoin",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[s_store_id#132], functions=[partial_sum(UnscaledValue(sales_price#463)), partial_sum(UnscaledValue(return_amt#465)), partial_sum(UnscaledValue(profit#464)), partial_sum(UnscaledValue(net_loss#466))], output=[s_store_id#132, sum#650L, sum#651L, sum#652L, sum#653L])\n+- Project [sales_price#463, profit#464, return_amt#465, net_loss#466, s_store_id#132]\n   +- BroadcastHashJoin [store_sk#461], [s_store_sk#131], Inner, BuildRight, false\n      :- Project [store_sk#461, sales_price#463, profit#464, return_amt#465, net_loss#466]\n      :  +- BroadcastHashJoin [date_sk#462], [d_date_sk#103], Inner, BuildRight, false\n      :     :- Union\n      :     :  :- Project [ss_store_sk#66 AS store_sk#461, ss_sold_date_sk#82 AS date_sk#462, ss_ext_sales_price#74 AS sales_price#463, ss_net_profit#81 AS profit#464, 0.00 AS return_amt#465, 0.00 AS net_loss#466]\n      :     :  :  +- Filter isnotnull(ss_store_sk#66)\n      :     :  :     +- FileScan parquet spark_catalog.tpcds_100.store_sales[ss_store_sk#66,ss_ext_sales_price#74,ss_net_profit#81,ss_sold_date_sk#82] Batched: true, DataFilters: [isnotnull(ss_store_sk#66)], Format: Parquet, Location: InMemoryFileIndex(1823 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(ss_sold_date_sk#82), dynamicpruningexpression(ss_sold_date_sk#82 IN dynamicpruning#633)], PushedFilters: [IsNotNull(ss_store_sk)], ReadSchema: struct<ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>\n      :     :  :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#633, 0, [d_date_sk#571], [id=#568]\n      :     :  +- Project [sr_store_sk#89 AS store_sk#467, sr_returned_date_sk#102 AS date_sk#468, 0.00 AS sales_price#469, 0.00 AS profit#470, sr_return_amt#93 AS return_amt#471, sr_net_loss#101 AS net_loss#472]\n      :     :     +- Filter isnotnull(sr_store_sk#89)\n      :     :        +- FileScan parquet spark_catalog.tpcds_100.store_returns[sr_store_sk#89,sr_return_amt#93,sr_net_loss#101,sr_returned_date_sk#102] Batched: true, DataFilters: [isnotnull(sr_store_sk#89)], Format: Parquet, Location: InMemoryFileIndex(2003 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store_..., PartitionFilters: [isnotnull(sr_returned_date_sk#102), dynamicpruningexpression(sr_returned_date_sk#102 IN dynamicp..., PushedFilters: [IsNotNull(sr_store_sk)], ReadSchema: struct<sr_store_sk:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>\n      :     :              +- ReusedSubquery SubqueryBroadcast dynamicpruning#633, 0, [d_date_sk#571], [id=#568]\n      :     +- BroadcastQueryStage 0\n      :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=490]\n      :           +- *(1) Project [d_date_sk#103]\n      :              +- *(1) Filter (((isnotnull(d_date#105) AND (d_date#105 >= 1998-08-04)) AND (d_date#105 <= 1998-08-18)) AND isnotnull(d_date_sk#103))\n      :                 +- *(1) ColumnarToRow\n      :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_date#105] Batched: true, DataFilters: [isnotnull(d_date#105), (d_date#105 >= 1998-08-04), (d_date#105 <= 1998-08-18), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-08-18), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n      +- BroadcastQueryStage 1\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=509]\n            +- *(2) Filter isnotnull(s_store_sk#131)\n               +- *(2) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#131,s_store_id#132] Batched: true, DataFilters: [isnotnull(s_store_sk#131)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_store_id:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 13897913432,
        "inputRowCount" : 289496520
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 3,
        "FinishedTasksTotalTimeInMs" : 1232.0,
        "FinishedTasksDistributionInMs" : [ 408.0, 408.0, 408.0, 416.0, 416.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 12 ],
      "Objectives" : {
        "DurationInMs" : 4889,
        "TotalTasksDurationInMs" : 10255,
        "IOBytes" : {
          "Total" : 26353118,
          "Details" : {
            "IR" : 25940857,
            "IW" : 0,
            "SR" : 0,
            "SW" : 412261
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1918610260,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 16080,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 16080,
                "rowCount" : 402
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_store_sk#131, s_store_id#132] "
          },
          "1" : {
            "sign" : 405233793,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(s_store_sk#131) "
          },
          "2" : {
            "sign" : -1579921744,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              },
              "compileTime" : {
                "sizeInBytes" : 192558,
                "rowCount" : 402
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_store_sk#131, s_store_id#132, s_rec_start_date#133, s_rec_end_date#134, s_closed_date_sk#135, s_store_name#136, s_number_employees#137, s_floor_space#138, s_hours#139, s_manager#140, s_market_id#141, s_geography_class#142, s_market_desc#143, s_market_manager#144, s_division_id#145, s_division_name#146, s_company_id#147, s_company_name#148, s_street_number#149, s_street_name#150, s_street_type#151, s_suite_number#152, s_city#153, s_county#154, ... 5 more fields], `spark_catalog`.`tpcds_100`.`store`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [s_store_sk#131, s_store_id#132]\n+- Filter isnotnull(s_store_sk#131)\n   +- Relation spark_catalog.tpcds_100.store[s_store_sk#131,s_store_id#132,s_rec_start_date#133,s_rec_end_date#134,s_closed_date_sk#135,s_store_name#136,s_number_employees#137,s_floor_space#138,s_hours#139,s_manager#140,s_market_id#141,s_geography_class#142,s_market_desc#143,s_market_manager#144,s_division_id#145,s_division_name#146,s_company_id#147,s_company_name#148,s_street_number#149,s_street_name#150,s_street_type#151,s_suite_number#152,s_city#153,s_county#154,... 5 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -2050431389,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 16080,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [s_store_sk#131, s_store_id#132] Condition : isnotnull(s_store_sk#131) "
          },
          "1" : {
            "sign" : -288942638,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 16080,
            "rowCount" : 402,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.store Output [2]: [s_store_sk#131, s_store_id#132] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store] PushedFilters: [IsNotNull(s_store_sk)] ReadSchema: struct<s_store_sk:int,s_store_id:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.store",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull(s_store_sk#131)\n+- FileScan parquet spark_catalog.tpcds_100.store[s_store_sk#131,s_store_id#132] Batched: true, DataFilters: [isnotnull(s_store_sk#131)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/store], PartitionFilters: [], PushedFilters: [IsNotNull(s_store_sk)], ReadSchema: struct<s_store_sk:int,s_store_id:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 16080,
        "inputRowCount" : 402
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 9 ],
      "Objectives" : {
        "DurationInMs" : 1341,
        "TotalTasksDurationInMs" : 1336,
        "IOBytes" : {
          "Total" : 15575,
          "Details" : {
            "IR" : 15575,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 815227588,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 168,
                "rowCount" : 14
              },
              "compileTime" : {
                "sizeInBytes" : 168,
                "rowCount" : 14
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#103] "
          },
          "1" : {
            "sign" : 793984382,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3444,
                "rowCount" : 14
              },
              "compileTime" : {
                "sizeInBytes" : 3444,
                "rowCount" : 14
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#105) AND ((d_date#105 >= 1998-08-04) AND (d_date#105 <= 1998-08-18))) AND isnotnull(d_date_sk#103)) "
          },
          "2" : {
            "sign" : -144809072,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#103, d_date_id#104, d_date#105, d_month_seq#106, d_week_seq#107, d_quarter_seq#108, d_year#109, d_dow#110, d_moy#111, d_dom#112, d_qoy#113, d_fy_year#114, d_fy_quarter_seq#115, d_fy_week_seq#116, d_day_name#117, d_quarter_name#118, d_holiday#119, d_weekend#120, d_following_holiday#121, d_first_dom#122, d_last_dom#123, d_same_day_ly#124, d_same_day_lq#125, d_current_day#126, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#103]\n+- Filter ((isnotnull(d_date#105) AND ((d_date#105 >= 1998-08-04) AND (d_date#105 <= 1998-08-18))) AND isnotnull(d_date_sk#103))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_date_id#104,d_date#105,d_month_seq#106,d_week_seq#107,d_quarter_seq#108,d_year#109,d_dow#110,d_moy#111,d_dom#112,d_qoy#113,d_fy_year#114,d_fy_quarter_seq#115,d_fy_week_seq#116,d_day_name#117,d_quarter_name#118,d_holiday#119,d_weekend#120,d_following_holiday#121,d_first_dom#122,d_last_dom#123,d_same_day_ly#124,d_same_day_lq#125,d_current_day#126,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -193482684,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 168,
            "rowCount" : 14,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [d_date_sk#103] Input [2]: [d_date_sk#103, d_date#105] "
          },
          "1" : {
            "sign" : 935347354,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 168,
            "rowCount" : 14,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [d_date_sk#103, d_date#105] Condition : (((isnotnull(d_date#105) AND (d_date#105 >= 1998-08-04)) AND (d_date#105 <= 1998-08-18)) AND isnotnull(d_date_sk#103)) "
          },
          "2" : {
            "sign" : 1607749344,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 168,
            "rowCount" : 14,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [2]: [d_date_sk#103, d_date#105] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-08-18), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_date:date> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#103]\n+- Filter (((isnotnull(d_date#105) AND (d_date#105 >= 1998-08-04)) AND (d_date#105 <= 1998-08-18)) AND isnotnull(d_date_sk#103))\n   +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#103,d_date#105] Batched: true, DataFilters: [isnotnull(d_date#105), (d_date#105 >= 1998-08-04), (d_date#105 <= 1998-08-18), isnotnull(d_date_..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-08-18), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 168,
        "inputRowCount" : 14
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 7 ],
      "Objectives" : {
        "DurationInMs" : 1772,
        "TotalTasksDurationInMs" : 1765,
        "IOBytes" : {
          "Total" : 171738,
          "Details" : {
            "IR" : 171738,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 183178940,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 816000,
                "rowCount" : 20400
              },
              "compileTime" : {
                "sizeInBytes" : 816000,
                "rowCount" : 20400
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cp_catalog_page_sk#221, cp_catalog_page_id#222] "
          },
          "1" : {
            "sign" : -1706463023,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3774000,
                "rowCount" : 20400
              },
              "compileTime" : {
                "sizeInBytes" : 3774000,
                "rowCount" : 20400
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(cp_catalog_page_sk#221) "
          },
          "2" : {
            "sign" : 1739450256,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3774000,
                "rowCount" : 20400
              },
              "compileTime" : {
                "sizeInBytes" : 3774000,
                "rowCount" : 20400
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cp_catalog_page_sk#221, cp_catalog_page_id#222, cp_start_date_sk#223, cp_end_date_sk#224, cp_department#225, cp_catalog_number#226, cp_catalog_page_number#227, cp_description#228, cp_type#229], `spark_catalog`.`tpcds_100`.`catalog_page`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [cp_catalog_page_sk#221, cp_catalog_page_id#222]\n+- Filter isnotnull(cp_catalog_page_sk#221)\n   +- Relation spark_catalog.tpcds_100.catalog_page[cp_catalog_page_sk#221,cp_catalog_page_id#222,cp_start_date_sk#223,cp_end_date_sk#224,cp_department#225,cp_catalog_number#226,cp_catalog_page_number#227,cp_description#228,cp_type#229] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1501425193,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 816000,
            "rowCount" : 20400,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [cp_catalog_page_sk#221, cp_catalog_page_id#222] Condition : isnotnull(cp_catalog_page_sk#221) "
          },
          "1" : {
            "sign" : -594405704,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 816000,
            "rowCount" : 20400,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.catalog_page Output [2]: [cp_catalog_page_sk#221, cp_catalog_page_id#222] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_page] PushedFilters: [IsNotNull(cp_catalog_page_sk)] ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.catalog_page",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull(cp_catalog_page_sk#221)\n+- FileScan parquet spark_catalog.tpcds_100.catalog_page[cp_catalog_page_sk#221,cp_catalog_page_id#222] Batched: true, DataFilters: [isnotnull(cp_catalog_page_sk#221)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_p..., PartitionFilters: [], PushedFilters: [IsNotNull(cp_catalog_page_sk)], ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 816000,
        "inputRowCount" : 20400
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 8 ],
      "Objectives" : {
        "DurationInMs" : 1411,
        "TotalTasksDurationInMs" : 1407,
        "IOBytes" : {
          "Total" : 188265,
          "Details" : {
            "IR" : 188265,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "8" : {
            "sign" : -243072556,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              },
              "compileTime" : {
                "sizeInBytes" : 29800787536,
                "rowCount" : 143273017
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cs_sold_time_sk#160, cs_ship_date_sk#161, cs_bill_customer_sk#162, cs_bill_cdemo_sk#163, cs_bill_hdemo_sk#164, cs_bill_addr_sk#165, cs_ship_customer_sk#166, cs_ship_cdemo_sk#167, cs_ship_hdemo_sk#168, cs_ship_addr_sk#169, cs_call_center_sk#170, cs_catalog_page_sk#171, cs_ship_mode_sk#172, cs_warehouse_sk#173, cs_item_sk#174, cs_promo_sk#175, cs_order_number#176L, cs_quantity#177, cs_wholesale_cost#178, cs_list_price#179, cs_sales_price#180, cs_ext_discount_amt#181, cs_ext_sales_price#182, cs_ext_wholesale_cost#183, ... 10 more fields], `spark_catalog`.`tpcds_100`.`catalog_sales`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "4" : {
            "sign" : -1085274984,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 114053187248,
                "rowCount" : 2193330524
              },
              "compileTime" : {
                "sizeInBytes" : 114053187248,
                "rowCount" : 2193330524
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (date_sk#478 = d_date_sk#509) "
          },
          "11" : {
            "sign" : -1716719794,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2246060232,
                "rowCount" : 14397822
              },
              "compileTime" : {
                "sizeInBytes" : 2246060232,
                "rowCount" : 14397822
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [cr_returned_time_sk#194, cr_item_sk#195, cr_refunded_customer_sk#196, cr_refunded_cdemo_sk#197, cr_refunded_hdemo_sk#198, cr_refunded_addr_sk#199, cr_returning_customer_sk#200, cr_returning_cdemo_sk#201, cr_returning_hdemo_sk#202, cr_returning_addr_sk#203, cr_call_center_sk#204, cr_catalog_page_sk#205, cr_ship_mode_sk#206, cr_warehouse_sk#207, cr_reason_sk#208, cr_order_number#209L, cr_return_quantity#210, cr_return_amount#211, cr_return_tax#212, cr_return_amt_inc_tax#213, cr_fee#214, cr_return_ship_cost#215, cr_refunded_cash#216, cr_reversed_charge#217, ... 3 more fields], `spark_catalog`.`tpcds_100`.`catalog_returns`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "9" : {
            "sign" : -1827807311,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 677305968,
                "rowCount" : 14110541
              },
              "compileTime" : {
                "sizeInBytes" : 677305968,
                "rowCount" : 14110541
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cr_catalog_page_sk#205 AS page_sk#483, cr_returned_date_sk#220 AS date_sk#484, 0.00 AS sales_price#485, 0.00 AS profit#486, cr_return_amount#211 AS return_amt#487, cr_net_loss#219 AS net_loss#488] "
          },
          "5" : {
            "sign" : 713323329,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Union",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7519990368,
                "rowCount" : 156666466
              },
              "compileTime" : {
                "sizeInBytes" : 7519990368,
                "rowCount" : 156666466
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Union Arguments: false, false "
          },
          "10" : {
            "sign" : -429221004,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2201244396,
                "rowCount" : 14110541
              },
              "compileTime" : {
                "sizeInBytes" : 2201244396,
                "rowCount" : 14110541
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(cr_returned_date_sk#220) AND isnotnull(cr_catalog_page_sk#205)) AND dynamicpruning#632 [cr_returned_date_sk#220]) "
          },
          "6" : {
            "sign" : 57684352,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6842684400,
                "rowCount" : 142555925
              },
              "compileTime" : {
                "sizeInBytes" : 6842684400,
                "rowCount" : 142555925
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [cs_catalog_page_sk#171 AS page_sk#477, cs_sold_date_sk#193 AS date_sk#478, cs_ext_sales_price#182 AS sales_price#479, cs_net_profit#192 AS profit#480, 0.00 AS return_amt#481, 0.00 AS net_loss#482] "
          },
          "1" : {
            "sign" : -2134346629,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3042588102892800,
                "rowCount" : 44743942689600
              },
              "compileTime" : {
                "sizeInBytes" : 3042588102892800,
                "rowCount" : 44743942689600
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [sales_price#479, profit#480, return_amt#481, net_loss#482, cp_catalog_page_id#222] "
          },
          "0" : {
            "sign" : -89475138,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1713600,
                "rowCount" : 20400
              },
              "compileTime" : {
                "sizeInBytes" : 1713600,
                "rowCount" : 20400
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [cp_catalog_page_id#222], [MakeDecimal(sum(UnscaledValue(sales_price#479)),17,2) AS sales#489, MakeDecimal(sum(UnscaledValue(return_amt#481)),17,2) AS returns#491, (MakeDecimal(sum(UnscaledValue(profit#480)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#482)),17,2)) AS profit#454, catalog channel AS channel#627, concat(catalog_page, cp_catalog_page_id#222) AS id#628] "
          },
          "2" : {
            "sign" : 1180378453,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3400539644409600,
                "rowCount" : 44743942689600
              },
              "compileTime" : {
                "sizeInBytes" : 3400539644409600,
                "rowCount" : 44743942689600
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (page_sk#477 = cp_catalog_page_sk#221) "
          },
          "7" : {
            "sign" : 156541243,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 29651632400,
                "rowCount" : 142555925
              },
              "compileTime" : {
                "sizeInBytes" : 29651632400,
                "rowCount" : 142555925
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(cs_sold_date_sk#193) AND isnotnull(cs_catalog_page_sk#171)) AND dynamicpruning#632 [cs_sold_date_sk#193]) "
          },
          "3" : {
            "sign" : 1579532155,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 96506543056,
                "rowCount" : 2193330524
              },
              "compileTime" : {
                "sizeInBytes" : 96506543056,
                "rowCount" : 2193330524
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [page_sk#477, sales_price#479, profit#480, return_amt#481, net_loss#482] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalRelation",
          "toId" : 7,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalRelation",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Union",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [cp_catalog_page_id#222], [MakeDecimal(sum(UnscaledValue(sales_price#479)),17,2) AS sales#489, MakeDecimal(sum(UnscaledValue(return_amt#481)),17,2) AS returns#491, (MakeDecimal(sum(UnscaledValue(profit#480)),17,2) - MakeDecimal(sum(UnscaledValue(net_loss#482)),17,2)) AS profit#454, catalog channel AS channel#627, concat(catalog_page, cp_catalog_page_id#222) AS id#628]\n+- Project [sales_price#479, profit#480, return_amt#481, net_loss#482, cp_catalog_page_id#222]\n   +- Join Inner, (page_sk#477 = cp_catalog_page_sk#221)\n      :- Project [page_sk#477, sales_price#479, profit#480, return_amt#481, net_loss#482]\n      :  +- Join Inner, (date_sk#478 = d_date_sk#509)\n      :     :- Union false, false\n      :     :  :- Project [cs_catalog_page_sk#171 AS page_sk#477, cs_sold_date_sk#193 AS date_sk#478, cs_ext_sales_price#182 AS sales_price#479, cs_net_profit#192 AS profit#480, 0.00 AS return_amt#481, 0.00 AS net_loss#482]\n      :     :  :  +- Filter ((isnotnull(cs_sold_date_sk#193) AND isnotnull(cs_catalog_page_sk#171)) AND dynamicpruning#632 [cs_sold_date_sk#193])\n      :     :  :     :  +- Project [d_date_sk#509]\n      :     :  :     :     +- Filter ((isnotnull(d_date#511) AND ((d_date#511 >= 1998-08-04) AND (d_date#511 <= 1998-08-18))) AND isnotnull(d_date_sk#509))\n      :     :  :     :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#509,d_date_id#510,d_date#511,d_month_seq#512,d_week_seq#513,d_quarter_seq#514,d_year#515,d_dow#516,d_moy#517,d_dom#518,d_qoy#519,d_fy_year#520,d_fy_quarter_seq#521,d_fy_week_seq#522,d_day_name#523,d_quarter_name#524,d_holiday#525,d_weekend#526,d_following_holiday#527,d_first_dom#528,d_last_dom#529,d_same_day_ly#530,d_same_day_lq#531,d_current_day#532,... 4 more fields] parquet\n      :     :  :     +- Relation spark_catalog.tpcds_100.catalog_sales[cs_sold_time_sk#160,cs_ship_date_sk#161,cs_bill_customer_sk#162,cs_bill_cdemo_sk#163,cs_bill_hdemo_sk#164,cs_bill_addr_sk#165,cs_ship_customer_sk#166,cs_ship_cdemo_sk#167,cs_ship_hdemo_sk#168,cs_ship_addr_sk#169,cs_call_center_sk#170,cs_catalog_page_sk#171,cs_ship_mode_sk#172,cs_warehouse_sk#173,cs_item_sk#174,cs_promo_sk#175,cs_order_number#176L,cs_quantity#177,cs_wholesale_cost#178,cs_list_price#179,cs_sales_price#180,cs_ext_discount_amt#181,cs_ext_sales_price#182,cs_ext_wholesale_cost#183,... 10 more fields] parquet\n      :     :  +- Project [cr_catalog_page_sk#205 AS page_sk#483, cr_returned_date_sk#220 AS date_sk#484, 0.00 AS sales_price#485, 0.00 AS profit#486, cr_return_amount#211 AS return_amt#487, cr_net_loss#219 AS net_loss#488]\n      :     :     +- Filter ((isnotnull(cr_returned_date_sk#220) AND isnotnull(cr_catalog_page_sk#205)) AND dynamicpruning#632 [cr_returned_date_sk#220])\n      :     :        :  +- Project [d_date_sk#509]\n      :     :        :     +- Filter ((isnotnull(d_date#511) AND ((d_date#511 >= 1998-08-04) AND (d_date#511 <= 1998-08-18))) AND isnotnull(d_date_sk#509))\n      :     :        :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#509,d_date_id#510,d_date#511,d_month_seq#512,d_week_seq#513,d_quarter_seq#514,d_year#515,d_dow#516,d_moy#517,d_dom#518,d_qoy#519,d_fy_year#520,d_fy_quarter_seq#521,d_fy_week_seq#522,d_day_name#523,d_quarter_name#524,d_holiday#525,d_weekend#526,d_following_holiday#527,d_first_dom#528,d_last_dom#529,d_same_day_ly#530,d_same_day_lq#531,d_current_day#532,... 4 more fields] parquet\n      :     :        +- Relation spark_catalog.tpcds_100.catalog_returns[cr_returned_time_sk#194,cr_item_sk#195,cr_refunded_customer_sk#196,cr_refunded_cdemo_sk#197,cr_refunded_hdemo_sk#198,cr_refunded_addr_sk#199,cr_returning_customer_sk#200,cr_returning_cdemo_sk#201,cr_returning_hdemo_sk#202,cr_returning_addr_sk#203,cr_call_center_sk#204,cr_catalog_page_sk#205,cr_ship_mode_sk#206,cr_warehouse_sk#207,cr_reason_sk#208,cr_order_number#209L,cr_return_quantity#210,cr_return_amount#211,cr_return_tax#212,cr_return_amt_inc_tax#213,cr_fee#214,cr_return_ship_cost#215,cr_refunded_cash#216,cr_reversed_charge#217,... 3 more fields] parquet\n      :     +- Project [d_date_sk#509]\n      :        +- Filter ((isnotnull(d_date#511) AND ((d_date#511 >= 1998-08-04) AND (d_date#511 <= 1998-08-18))) AND isnotnull(d_date_sk#509))\n      :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#509,d_date_id#510,d_date#511,d_month_seq#512,d_week_seq#513,d_quarter_seq#514,d_year#515,d_dow#516,d_moy#517,d_dom#518,d_qoy#519,d_fy_year#520,d_fy_quarter_seq#521,d_fy_week_seq#522,d_day_name#523,d_quarter_name#524,d_holiday#525,d_weekend#526,d_following_holiday#527,d_first_dom#528,d_last_dom#529,d_same_day_ly#530,d_same_day_lq#531,d_current_day#532,... 4 more fields] parquet\n      +- Project [cp_catalog_page_sk#221, cp_catalog_page_id#222]\n         +- Filter isnotnull(cp_catalog_page_sk#221)\n            +- Relation spark_catalog.tpcds_100.catalog_page[cp_catalog_page_sk#221,cp_catalog_page_id#222,cp_start_date_sk#223,cp_end_date_sk#224,cp_department#225,cp_catalog_number#226,cp_catalog_page_number#227,cp_description#228,cp_type#229] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "12" : {
            "sign" : 1703637207,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048696,
            "rowCount" : 15,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [d_date_sk#509] Arguments: 3 "
          },
          "8" : {
            "sign" : -369588742,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 6842684400,
            "rowCount" : 142555925,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.catalog_sales Output [4]: [cs_catalog_page_sk#171, cs_ext_sales_price#182, cs_net_profit#192, cs_sold_date_sk#193] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_sales/cs_sold_date_sk=2450815, ... 1835 entries] PartitionFilters: [isnotnull(cs_sold_date_sk#193), dynamicpruningexpression(cs_sold_date_sk#193 IN dynamicpruning#633)] PushedFilters: [IsNotNull(cs_catalog_page_sk)] ReadSchema: struct<cs_catalog_page_sk:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)> "
          },
          "4" : {
            "sign" : -1052341784,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 114053187248,
            "rowCount" : 2193330524,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [date_sk#478] Right keys [1]: [d_date_sk#509] Join type: Inner Join condition: None "
          },
          "11" : {
            "sign" : 1652027909,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 677305968,
            "rowCount" : 14110541,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.catalog_returns Output [4]: [cr_catalog_page_sk#205, cr_return_amount#211, cr_net_loss#219, cr_returned_date_sk#220] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_returns/cr_returned_date_sk=2450822, ... 2100 entries] PartitionFilters: [isnotnull(cr_returned_date_sk#220), dynamicpruningexpression(cr_returned_date_sk#220 IN dynamicpruning#633)] PushedFilters: [IsNotNull(cr_catalog_page_sk)] ReadSchema: struct<cr_catalog_page_sk:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)> "
          },
          "9" : {
            "sign" : -1609017845,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 677305968,
            "rowCount" : 14110541,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [cr_catalog_page_sk#205 AS page_sk#483, cr_returned_date_sk#220 AS date_sk#484, 0.00 AS sales_price#485, 0.00 AS profit#486, cr_return_amount#211 AS return_amt#487, cr_net_loss#219 AS net_loss#488] Input [4]: [cr_catalog_page_sk#205, cr_return_amount#211, cr_net_loss#219, cr_returned_date_sk#220] "
          },
          "13" : {
            "sign" : -490721993,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1211776,
            "rowCount" : 20400,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [cp_catalog_page_sk#221, cp_catalog_page_id#222] Arguments: 4 "
          },
          "5" : {
            "sign" : 2116648430,
            "className" : "org.apache.spark.sql.execution.UnionExec",
            "sizeInBytes" : 7519990368,
            "rowCount" : 156666466,
            "isRuntime" : false,
            "predicate" : " (unknown) Union "
          },
          "10" : {
            "sign" : 1635526846,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 677305968,
            "rowCount" : 14110541,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [cr_catalog_page_sk#205, cr_return_amount#211, cr_net_loss#219, cr_returned_date_sk#220] Condition : isnotnull(cr_catalog_page_sk#205) "
          },
          "6" : {
            "sign" : -1997999447,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 6842684400,
            "rowCount" : 142555925,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [cs_catalog_page_sk#171 AS page_sk#477, cs_sold_date_sk#193 AS date_sk#478, cs_ext_sales_price#182 AS sales_price#479, cs_net_profit#192 AS profit#480, 0.00 AS return_amt#481, 0.00 AS net_loss#482] Input [4]: [cs_catalog_page_sk#171, cs_ext_sales_price#182, cs_net_profit#192, cs_sold_date_sk#193] "
          },
          "1" : {
            "sign" : 1949250652,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 3042588102892800,
            "rowCount" : 44743942689600,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [sales_price#479, profit#480, return_amt#481, net_loss#482, cp_catalog_page_id#222] Input [7]: [page_sk#477, sales_price#479, profit#480, return_amt#481, net_loss#482, cp_catalog_page_sk#221, cp_catalog_page_id#222] "
          },
          "0" : {
            "sign" : 1755949078,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 1713600,
            "rowCount" : 20400,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [5]: [sales_price#479, profit#480, return_amt#481, net_loss#482, cp_catalog_page_id#222] Keys [1]: [cp_catalog_page_id#222] Functions [4]: [partial_sum(UnscaledValue(sales_price#479)), partial_sum(UnscaledValue(return_amt#481)), partial_sum(UnscaledValue(profit#480)), partial_sum(UnscaledValue(net_loss#482))] Aggregate Attributes [4]: [sum#654L, sum#655L, sum#656L, sum#657L] Results [5]: [cp_catalog_page_id#222, sum#658L, sum#659L, sum#660L, sum#661L] "
          },
          "2" : {
            "sign" : -272459774,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 3400539644409600,
            "rowCount" : 44743942689600,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [page_sk#477] Right keys [1]: [cp_catalog_page_sk#221] Join type: Inner Join condition: None "
          },
          "7" : {
            "sign" : -212643724,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 6842684400,
            "rowCount" : 142555925,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [cs_catalog_page_sk#171, cs_ext_sales_price#182, cs_net_profit#192, cs_sold_date_sk#193] Condition : isnotnull(cs_catalog_page_sk#171) "
          },
          "3" : {
            "sign" : 520027657,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 96506543056,
            "rowCount" : 2193330524,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [page_sk#477, sales_price#479, profit#480, return_amt#481, net_loss#482] Input [7]: [page_sk#477, date_sk#478, sales_price#479, profit#480, return_amt#481, net_loss#482, d_date_sk#509] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.catalog_sales",
          "toId" : 7,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.catalog_returns",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Union",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Union",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "BroadcastQueryStage",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastHashJoin",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[cp_catalog_page_id#222], functions=[partial_sum(UnscaledValue(sales_price#479)), partial_sum(UnscaledValue(return_amt#481)), partial_sum(UnscaledValue(profit#480)), partial_sum(UnscaledValue(net_loss#482))], output=[cp_catalog_page_id#222, sum#658L, sum#659L, sum#660L, sum#661L])\n+- Project [sales_price#479, profit#480, return_amt#481, net_loss#482, cp_catalog_page_id#222]\n   +- BroadcastHashJoin [page_sk#477], [cp_catalog_page_sk#221], Inner, BuildRight, false\n      :- Project [page_sk#477, sales_price#479, profit#480, return_amt#481, net_loss#482]\n      :  +- BroadcastHashJoin [date_sk#478], [d_date_sk#509], Inner, BuildRight, false\n      :     :- Union\n      :     :  :- Project [cs_catalog_page_sk#171 AS page_sk#477, cs_sold_date_sk#193 AS date_sk#478, cs_ext_sales_price#182 AS sales_price#479, cs_net_profit#192 AS profit#480, 0.00 AS return_amt#481, 0.00 AS net_loss#482]\n      :     :  :  +- Filter isnotnull(cs_catalog_page_sk#171)\n      :     :  :     +- FileScan parquet spark_catalog.tpcds_100.catalog_sales[cs_catalog_page_sk#171,cs_ext_sales_price#182,cs_net_profit#192,cs_sold_date_sk#193] Batched: true, DataFilters: [isnotnull(cs_catalog_page_sk#171)], Format: Parquet, Location: InMemoryFileIndex(1836 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cs_sold_date_sk#193), dynamicpruningexpression(cs_sold_date_sk#193 IN dynamicpruning#6..., PushedFilters: [IsNotNull(cs_catalog_page_sk)], ReadSchema: struct<cs_catalog_page_sk:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>\n      :     :  :           +- ReusedSubquery SubqueryBroadcast dynamicpruning#633, 0, [d_date_sk#571], [id=#568]\n      :     :  +- Project [cr_catalog_page_sk#205 AS page_sk#483, cr_returned_date_sk#220 AS date_sk#484, 0.00 AS sales_price#485, 0.00 AS profit#486, cr_return_amount#211 AS return_amt#487, cr_net_loss#219 AS net_loss#488]\n      :     :     +- Filter isnotnull(cr_catalog_page_sk#205)\n      :     :        +- FileScan parquet spark_catalog.tpcds_100.catalog_returns[cr_catalog_page_sk#205,cr_return_amount#211,cr_net_loss#219,cr_returned_date_sk#220] Batched: true, DataFilters: [isnotnull(cr_catalog_page_sk#205)], Format: Parquet, Location: InMemoryFileIndex(2101 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalo..., PartitionFilters: [isnotnull(cr_returned_date_sk#220), dynamicpruningexpression(cr_returned_date_sk#220 IN dynamicp..., PushedFilters: [IsNotNull(cr_catalog_page_sk)], ReadSchema: struct<cr_catalog_page_sk:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>\n      :     :              +- ReusedSubquery SubqueryBroadcast dynamicpruning#633, 0, [d_date_sk#571], [id=#568]\n      :     +- BroadcastQueryStage 3\n      :        +- ReusedExchange [d_date_sk#509], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=490]\n      +- BroadcastQueryStage 4\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=552]\n            +- *(4) Filter isnotnull(cp_catalog_page_sk#221)\n               +- *(4) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.catalog_page[cp_catalog_page_sk#221,cp_catalog_page_id#222] Batched: true, DataFilters: [isnotnull(cp_catalog_page_sk#221)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/catalog_p..., PartitionFilters: [], PushedFilters: [IsNotNull(cp_catalog_page_sk)], ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 7522250840,
        "inputRowCount" : 156686881
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 3,
        "FinishedTasksTotalTimeInMs" : 1232.0,
        "FinishedTasksDistributionInMs" : [ 408.0, 408.0, 408.0, 416.0, 416.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 13 ],
      "Objectives" : {
        "DurationInMs" : 5050,
        "TotalTasksDurationInMs" : 5935,
        "IOBytes" : {
          "Total" : 16373374,
          "Details" : {
            "IR" : 15426547,
            "IW" : 0,
            "SR" : 0,
            "SW" : 946827
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 383050477,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 960,
                "rowCount" : 24
              },
              "compileTime" : {
                "sizeInBytes" : 960,
                "rowCount" : 24
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [web_site_sk#288, web_site_id#289] "
          },
          "1" : {
            "sign" : -1631754172,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11736,
                "rowCount" : 24
              },
              "compileTime" : {
                "sizeInBytes" : 11736,
                "rowCount" : 24
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(web_site_sk#288) "
          },
          "2" : {
            "sign" : 1776939949,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11736,
                "rowCount" : 24
              },
              "compileTime" : {
                "sizeInBytes" : 11736,
                "rowCount" : 24
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [web_site_sk#288, web_site_id#289, web_rec_start_date#290, web_rec_end_date#291, web_name#292, web_open_date_sk#293, web_close_date_sk#294, web_class#295, web_manager#296, web_mkt_id#297, web_mkt_class#298, web_mkt_desc#299, web_market_manager#300, web_company_id#301, web_company_name#302, web_street_number#303, web_street_name#304, web_street_type#305, web_suite_number#306, web_city#307, web_county#308, web_state#309, web_zip#310, web_country#311, ... 2 more fields], `spark_catalog`.`tpcds_100`.`web_site`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [web_site_sk#288, web_site_id#289]\n+- Filter isnotnull(web_site_sk#288)\n   +- Relation spark_catalog.tpcds_100.web_site[web_site_sk#288,web_site_id#289,web_rec_start_date#290,web_rec_end_date#291,web_name#292,web_open_date_sk#293,web_close_date_sk#294,web_class#295,web_manager#296,web_mkt_id#297,web_mkt_class#298,web_mkt_desc#299,web_market_manager#300,web_company_id#301,web_company_name#302,web_street_number#303,web_street_name#304,web_street_type#305,web_suite_number#306,web_city#307,web_county#308,web_state#309,web_zip#310,web_country#311,... 2 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1248826712,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 960,
            "rowCount" : 24,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [web_site_sk#288, web_site_id#289] Condition : isnotnull(web_site_sk#288) "
          },
          "1" : {
            "sign" : 473076753,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 960,
            "rowCount" : 24,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.web_site Output [2]: [web_site_sk#288, web_site_id#289] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_site] PushedFilters: [IsNotNull(web_site_sk)] ReadSchema: struct<web_site_sk:int,web_site_id:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.web_site",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull(web_site_sk#288)\n+- FileScan parquet spark_catalog.tpcds_100.web_site[web_site_sk#288,web_site_id#289] Batched: true, DataFilters: [isnotnull(web_site_sk#288)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/web_site], PartitionFilters: [], PushedFilters: [IsNotNull(web_site_sk)], ReadSchema: struct<web_site_sk:int,web_site_id:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 960,
        "inputRowCount" : 24
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 6 ],
      "Objectives" : {
        "DurationInMs" : 1504,
        "TotalTasksDurationInMs" : 1493,
        "IOBytes" : {
          "Total" : 11430,
          "Details" : {
            "IR" : 11430,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702226517803,
  "SQLEndTimeInMs" : 1702226529643,
  "Objectives" : {
    "DurationInMs" : 11840,
    "IOBytes" : {
      "Total" : 2472931975,
      "Details" : {
        "IR" : 449315789,
        "IW" : 0,
        "SR" : 1011808093,
        "SW" : 1011808093
      }
    }
  }
}
