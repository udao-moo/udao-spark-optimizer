{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "12" : {
          "sign" : -1912318073,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 9583920000,
          "rowCount" : 399330000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, inv_date_sk#5], `spark_catalog`.`tpcds_100`.`inventory`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "8" : {
          "sign" : -1612466510,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 22337178976,
          "rowCount" : 398878196,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#20 = inv_item_sk#2) "
        },
        "19" : {
          "sign" : -65849787,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 570,
          "rowCount" : 15,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [w_warehouse_sk#6, w_warehouse_name#8] "
        },
        "4" : {
          "sign" : 1384665611,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 7371000,
          "rowCount" : 94500,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#8, i_item_id#21], [w_warehouse_name#8, i_item_id#21, sum(CASE WHEN (d_date#44 < 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END) AS inv_before#0L, sum(CASE WHEN (d_date#44 >= 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END) AS inv_after#1L] "
        },
        "15" : {
          "sign" : -1627855362,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 17970054,
          "rowCount" : 73049,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#42, d_date_id#43, d_date#44, d_month_seq#45, d_week_seq#46, d_quarter_seq#47, d_year#48, d_dow#49, d_moy#50, d_dom#51, d_qoy#52, d_fy_year#53, d_fy_quarter_seq#54, d_fy_week_seq#55, d_day_name#56, d_quarter_name#57, d_holiday#58, d_weekend#59, d_following_holiday#60, d_first_dom#61, d_last_dom#62, d_same_day_ly#63, d_same_day_lq#64, d_current_day#65, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "11" : {
          "sign" : -1769675766,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 9583920000,
          "rowCount" : 399330000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(inv_warehouse_sk#3) AND isnotnull(inv_item_sk#2)) AND isnotnull(inv_date_sk#5)) AND dynamicpruning#80 [inv_date_sk#5]) "
        },
        "9" : {
          "sign" : -1533671401,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 9378749856,
          "rowCount" : 390781244,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, d_date#44] "
        },
        "13" : {
          "sign" : 1686826212,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 960,
          "rowCount" : 60,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [d_date_sk#42, d_date#44] "
        },
        "16" : {
          "sign" : 1183792770,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 494080,
          "rowCount" : 12352,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [i_item_sk#20, i_item_id#21] "
        },
        "5" : {
          "sign" : -2045834189,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 31039743420,
          "rowCount" : 443424906,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [inv_quantity_on_hand#4, w_warehouse_name#8, i_item_id#21, d_date#44] "
        },
        "10" : {
          "sign" : -1836609315,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 12504999808,
          "rowCount" : 390781244,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (inv_date_sk#5 = d_date_sk#42) "
        },
        "21" : {
          "sign" : -1413540099,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3810,
          "rowCount" : 15,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [w_warehouse_sk#6, w_warehouse_id#7, w_warehouse_name#8, w_warehouse_sq_ft#9, w_street_number#10, w_street_name#11, w_street_type#12, w_suite_number#13, w_city#14, w_county#15, w_state#16, w_zip#17, w_country#18, w_gmt_offset#19], `spark_catalog`.`tpcds_100`.`warehouse`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "6" : {
          "sign" : -971321257,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 34587142668,
          "rowCount" : 443424906,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (inv_warehouse_sk#3 = w_warehouse_sk#6) "
        },
        "1" : {
          "sign" : 1305313994,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
          "sizeInBytes" : 7371000,
          "rowCount" : 94500,
          "isRuntime" : false,
          "predicate" : " (unknown) LocalLimit Arguments: 100 "
        },
        "17" : {
          "sign" : -776771239,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 5261952,
          "rowCount" : 12352,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(i_current_price#25) AND ((i_current_price#25 >= 0.99) AND (i_current_price#25 <= 1.49))) AND isnotnull(i_item_sk#20)) "
        },
        "14" : {
          "sign" : -1285628986,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 14760,
          "rowCount" : 60,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#44) AND ((d_date#44 >= 1998-03-09) AND (d_date#44 <= 1998-05-08))) AND isnotnull(d_date_sk#42)) "
        },
        "0" : {
          "sign" : 115125307,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
          "sizeInBytes" : 6400,
          "rowCount" : 100,
          "isRuntime" : false,
          "predicate" : " (unknown) GlobalLimit Arguments: 100 "
        },
        "20" : {
          "sign" : 1655055695,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3810,
          "rowCount" : 15,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(w_warehouse_sk#6) "
        },
        "2" : {
          "sign" : -810228847,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 7371000,
          "rowCount" : 94500,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [w_warehouse_name#8 ASC NULLS FIRST, i_item_id#21 ASC NULLS FIRST], true "
        },
        "18" : {
          "sign" : -905970743,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 86904000,
          "rowCount" : 204000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#20, i_item_id#21, i_rec_start_date#22, i_rec_end_date#23, i_item_desc#24, i_current_price#25, i_wholesale_cost#26, i_brand_id#27, i_brand#28, i_class_id#29, i_class#30, i_category_id#31, i_category#32, i_manufact_id#33, i_manufact#34, i_size#35, i_formulation#36, i_color#37, i_units#38, i_container#39, i_manager_id#40, i_product_name#41], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "7" : {
          "sign" : 1349431668,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 19146153408,
          "rowCount" : 398878196,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [inv_warehouse_sk#3, inv_quantity_on_hand#4, d_date#44, i_item_id#21] "
        },
        "3" : {
          "sign" : 132088592,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 7371000,
          "rowCount" : 94500,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (CASE WHEN (inv_before#0L > 0) THEN ((cast(inv_after#1L as double) / cast(inv_before#0L as double)) >= 0.666667) END AND CASE WHEN (inv_before#0L > 0) THEN ((cast(inv_after#1L as double) / cast(inv_before#0L as double)) <= 1.5) END) "
        }
      },
      "links" : [ {
        "fromId" : 12,
        "fromName" : "LogicalRelation",
        "toId" : 11,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "LogicalRelation",
        "toId" : 14,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Filter",
        "toId" : 13,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 11,
        "fromName" : "Filter",
        "toId" : 10,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Project",
        "toId" : 10,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Join",
        "toId" : 9,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Project",
        "toId" : 8,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "LogicalRelation",
        "toId" : 17,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Filter",
        "toId" : 16,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "Project",
        "toId" : 8,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Join",
        "toId" : 7,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Project",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "LogicalRelation",
        "toId" : 20,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "Filter",
        "toId" : 19,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "Project",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Join",
        "toId" : 5,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Project",
        "toId" : 4,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Aggregate",
        "toId" : 3,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Filter",
        "toId" : 2,
        "toName" : "Sort",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Sort",
        "toId" : 1,
        "toName" : "LocalLimit",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "LocalLimit",
        "toId" : 0,
        "toName" : "GlobalLimit",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [w_warehouse_name#8 ASC NULLS FIRST, i_item_id#21 ASC NULLS FIRST], true\n      +- Filter (CASE WHEN (inv_before#0L > 0) THEN ((cast(inv_after#1L as double) / cast(inv_before#0L as double)) >= 0.666667) END AND CASE WHEN (inv_before#0L > 0) THEN ((cast(inv_after#1L as double) / cast(inv_before#0L as double)) <= 1.5) END)\n         +- Aggregate [w_warehouse_name#8, i_item_id#21], [w_warehouse_name#8, i_item_id#21, sum(CASE WHEN (d_date#44 < 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END) AS inv_before#0L, sum(CASE WHEN (d_date#44 >= 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END) AS inv_after#1L]\n            +- Project [inv_quantity_on_hand#4, w_warehouse_name#8, i_item_id#21, d_date#44]\n               +- Join Inner, (inv_warehouse_sk#3 = w_warehouse_sk#6)\n                  :- Project [inv_warehouse_sk#3, inv_quantity_on_hand#4, d_date#44, i_item_id#21]\n                  :  +- Join Inner, (i_item_sk#20 = inv_item_sk#2)\n                  :     :- Project [inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, d_date#44]\n                  :     :  +- Join Inner, (inv_date_sk#5 = d_date_sk#42)\n                  :     :     :- Filter (((isnotnull(inv_warehouse_sk#3) AND isnotnull(inv_item_sk#2)) AND isnotnull(inv_date_sk#5)) AND dynamicpruning#80 [inv_date_sk#5])\n                  :     :     :  :  +- Project [d_date_sk#42, d_date#44]\n                  :     :     :  :     +- Filter ((isnotnull(d_date#44) AND ((d_date#44 >= 1998-03-09) AND (d_date#44 <= 1998-05-08))) AND isnotnull(d_date_sk#42))\n                  :     :     :  :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#42,d_date_id#43,d_date#44,d_month_seq#45,d_week_seq#46,d_quarter_seq#47,d_year#48,d_dow#49,d_moy#50,d_dom#51,d_qoy#52,d_fy_year#53,d_fy_quarter_seq#54,d_fy_week_seq#55,d_day_name#56,d_quarter_name#57,d_holiday#58,d_weekend#59,d_following_holiday#60,d_first_dom#61,d_last_dom#62,d_same_day_ly#63,d_same_day_lq#64,d_current_day#65,... 4 more fields] parquet\n                  :     :     :  +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#2,inv_warehouse_sk#3,inv_quantity_on_hand#4,inv_date_sk#5] parquet\n                  :     :     +- Project [d_date_sk#42, d_date#44]\n                  :     :        +- Filter ((isnotnull(d_date#44) AND ((d_date#44 >= 1998-03-09) AND (d_date#44 <= 1998-05-08))) AND isnotnull(d_date_sk#42))\n                  :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#42,d_date_id#43,d_date#44,d_month_seq#45,d_week_seq#46,d_quarter_seq#47,d_year#48,d_dow#49,d_moy#50,d_dom#51,d_qoy#52,d_fy_year#53,d_fy_quarter_seq#54,d_fy_week_seq#55,d_day_name#56,d_quarter_name#57,d_holiday#58,d_weekend#59,d_following_holiday#60,d_first_dom#61,d_last_dom#62,d_same_day_ly#63,d_same_day_lq#64,d_current_day#65,... 4 more fields] parquet\n                  :     +- Project [i_item_sk#20, i_item_id#21]\n                  :        +- Filter ((isnotnull(i_current_price#25) AND ((i_current_price#25 >= 0.99) AND (i_current_price#25 <= 1.49))) AND isnotnull(i_item_sk#20))\n                  :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#20,i_item_id#21,i_rec_start_date#22,i_rec_end_date#23,i_item_desc#24,i_current_price#25,i_wholesale_cost#26,i_brand_id#27,i_brand#28,i_class_id#29,i_class#30,i_category_id#31,i_category#32,i_manufact_id#33,i_manufact#34,i_size#35,i_formulation#36,i_color#37,i_units#38,i_container#39,i_manager_id#40,i_product_name#41] parquet\n                  +- Project [w_warehouse_sk#6, w_warehouse_name#8]\n                     +- Filter isnotnull(w_warehouse_sk#6)\n                        +- Relation spark_catalog.tpcds_100.warehouse[w_warehouse_sk#6,w_warehouse_id#7,w_warehouse_name#8,w_warehouse_sq_ft#9,w_street_number#10,w_street_name#11,w_street_type#12,w_suite_number#13,w_city#14,w_county#15,w_state#16,w_zip#17,w_country#18,w_gmt_offset#19] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 9688797864,
      "inputRowCount" : 399607064
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "3" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -1912318073,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 9583920000,
            "rowCount" : 399330000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, inv_date_sk#5], `spark_catalog`.`tpcds_100`.`inventory`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "8" : {
            "sign" : 564096363,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 14806063833120000,
            "rowCount" : 308459663190000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#20 = inv_item_sk#2) "
          },
          "4" : {
            "sign" : -1437105247,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 296121276662400000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#8, i_item_id#21], [w_warehouse_name#8, i_item_id#21, sum(CASE WHEN (d_date#44 < 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END) AS inv_before#81L, sum(CASE WHEN (d_date#44 >= 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END) AS inv_after#82L] "
          },
          "15" : {
            "sign" : -1627855362,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#42, d_date_id#43, d_date#44, d_month_seq#45, d_week_seq#46, d_quarter_seq#47, d_year#48, d_dow#49, d_moy#50, d_dom#51, d_qoy#52, d_fy_year#53, d_fy_quarter_seq#54, d_fy_week_seq#55, d_day_name#56, d_quarter_name#57, d_holiday#58, d_weekend#59, d_following_holiday#60, d_first_dom#61, d_last_dom#62, d_same_day_ly#63, d_same_day_lq#64, d_current_day#65, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "11" : {
            "sign" : 1939428947,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 9583920000,
            "rowCount" : 399330000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(inv_warehouse_sk#3) AND isnotnull(inv_item_sk#2)) AND isnotnull(inv_date_sk#5)) AND dynamicpruning#89 [inv_date_sk#5]) "
          },
          "9" : {
            "sign" : -1524773858,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 584619120000,
            "rowCount" : 24359130000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, d_date#44] "
          },
          "13" : {
            "sign" : 1686826212,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 960,
            "rowCount" : 60,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#42, d_date#44] "
          },
          "16" : {
            "sign" : 259305684,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1049064,
            "rowCount" : 61,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#42, d_date#44], BroadcastQueryStage 0 "
          },
          "5" : {
            "sign" : -575809177,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 259106117079600000,
            "rowCount" : 4626894947850000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_quantity_on_hand#4, w_warehouse_name#8, i_item_id#21, d_date#44] "
          },
          "10" : {
            "sign" : 414306302,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 779492160000,
            "rowCount" : 24359130000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_date_sk#5 = d_date_sk#42) "
          },
          "6" : {
            "sign" : 932653881,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 296121276662400000,
            "rowCount" : 4626894947850000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_warehouse_sk#3 = w_warehouse_sk#6) "
          },
          "1" : {
            "sign" : 1818450516,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 296121276662400000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : 99238440,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1572864,
            "rowCount" : 12663,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#20, i_item_id#21], BroadcastQueryStage 1 "
          },
          "14" : {
            "sign" : -1285628986,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14760,
            "rowCount" : 60,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#44) AND ((d_date#44 >= 1998-03-09) AND (d_date#44 <= 1998-05-08))) AND isnotnull(d_date_sk#42)) "
          },
          "0" : {
            "sign" : -1355858513,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 6400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -427846843,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 296121276662400000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [w_warehouse_name#8 ASC NULLS FIRST, i_item_id#21 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : -1982234536,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048696,
            "rowCount" : 15,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [w_warehouse_sk#6, w_warehouse_name#8], BroadcastQueryStage 2 "
          },
          "7" : {
            "sign" : 1985358689,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 12338386527600000,
            "rowCount" : 308459663190000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_warehouse_sk#3, inv_quantity_on_hand#4, d_date#44, i_item_id#21] "
          },
          "3" : {
            "sign" : -1510535590,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 296121276662400000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (CASE WHEN (inv_before#81L > 0) THEN ((cast(inv_after#82L as double) / cast(inv_before#81L as double)) >= 0.666667) END AND CASE WHEN (inv_before#81L > 0) THEN ((cast(inv_after#82L as double) / cast(inv_before#81L as double)) <= 1.5) END) "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalRelation",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalRelation",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Aggregate",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [w_warehouse_name#8 ASC NULLS FIRST, i_item_id#21 ASC NULLS FIRST], true\n      +- Filter (CASE WHEN (inv_before#81L > 0) THEN ((cast(inv_after#82L as double) / cast(inv_before#81L as double)) >= 0.666667) END AND CASE WHEN (inv_before#81L > 0) THEN ((cast(inv_after#82L as double) / cast(inv_before#81L as double)) <= 1.5) END)\n         +- Aggregate [w_warehouse_name#8, i_item_id#21], [w_warehouse_name#8, i_item_id#21, sum(CASE WHEN (d_date#44 < 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END) AS inv_before#81L, sum(CASE WHEN (d_date#44 >= 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END) AS inv_after#82L]\n            +- Project [inv_quantity_on_hand#4, w_warehouse_name#8, i_item_id#21, d_date#44]\n               +- Join Inner, (inv_warehouse_sk#3 = w_warehouse_sk#6)\n                  :- Project [inv_warehouse_sk#3, inv_quantity_on_hand#4, d_date#44, i_item_id#21]\n                  :  +- Join Inner, (i_item_sk#20 = inv_item_sk#2)\n                  :     :- Project [inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, d_date#44]\n                  :     :  +- Join Inner, (inv_date_sk#5 = d_date_sk#42)\n                  :     :     :- Filter (((isnotnull(inv_warehouse_sk#3) AND isnotnull(inv_item_sk#2)) AND isnotnull(inv_date_sk#5)) AND dynamicpruning#89 [inv_date_sk#5])\n                  :     :     :  :  +- Project [d_date_sk#42, d_date#44]\n                  :     :     :  :     +- Filter ((isnotnull(d_date#44) AND ((d_date#44 >= 1998-03-09) AND (d_date#44 <= 1998-05-08))) AND isnotnull(d_date_sk#42))\n                  :     :     :  :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#42,d_date_id#43,d_date#44,d_month_seq#45,d_week_seq#46,d_quarter_seq#47,d_year#48,d_dow#49,d_moy#50,d_dom#51,d_qoy#52,d_fy_year#53,d_fy_quarter_seq#54,d_fy_week_seq#55,d_day_name#56,d_quarter_name#57,d_holiday#58,d_weekend#59,d_following_holiday#60,d_first_dom#61,d_last_dom#62,d_same_day_ly#63,d_same_day_lq#64,d_current_day#65,... 4 more fields] parquet\n                  :     :     :  +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#2,inv_warehouse_sk#3,inv_quantity_on_hand#4,inv_date_sk#5] parquet\n                  :     :     +- LogicalQueryStage Project [d_date_sk#42, d_date#44], BroadcastQueryStage 0\n                  :     +- LogicalQueryStage Project [i_item_sk#20, i_item_id#21], BroadcastQueryStage 1\n                  +- LogicalQueryStage Project [w_warehouse_sk#6, w_warehouse_name#8], BroadcastQueryStage 2\n"
      },
      "IM" : {
        "inputSizeInBytes" : 9587590624,
        "inputRowCount" : 399342739
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226690531,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 4146,
        "IOBytes" : {
          "Total" : 100926029,
          "Details" : {
            "IR" : 72926787,
            "IW" : 0,
            "SR" : 13999621,
            "SW" : 13999621
          }
        }
      }
    },
    "4" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : -1020231802,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 62776512,
            "rowCount" : 865485,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [w_warehouse_name#8, i_item_id#21], [w_warehouse_name#8, i_item_id#21, sum(CASE WHEN (d_date#44 < 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END) AS inv_before#81L, sum(CASE WHEN (d_date#44 >= 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END) AS inv_after#82L], HashAggregate(keys=[w_warehouse_name#8, i_item_id#21], functions=[sum(CASE WHEN (d_date#44 < 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END), sum(CASE WHEN (d_date#44 >= 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END)]) "
          },
          "1" : {
            "sign" : -853166109,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 55391040,
            "rowCount" : 865485,
            "isRuntime" : true,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -1575123144,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 6400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -2077929502,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 55391040,
            "rowCount" : 865485,
            "isRuntime" : true,
            "predicate" : " (unknown) Sort Arguments: [w_warehouse_name#8 ASC NULLS FIRST, i_item_id#21 ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : -738023651,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 55391040,
            "rowCount" : 865485,
            "isRuntime" : true,
            "predicate" : " (unknown) Filter Arguments: (CASE WHEN (inv_before#81L > 0) THEN ((cast(inv_after#82L as double) / cast(inv_before#81L as double)) >= 0.666667) END AND CASE WHEN (inv_before#81L > 0) THEN ((cast(inv_after#82L as double) / cast(inv_before#81L as double)) <= 1.5) END) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [w_warehouse_name#8 ASC NULLS FIRST, i_item_id#21 ASC NULLS FIRST], true\n      +- Filter (CASE WHEN (inv_before#81L > 0) THEN ((cast(inv_after#82L as double) / cast(inv_before#81L as double)) >= 0.666667) END AND CASE WHEN (inv_before#81L > 0) THEN ((cast(inv_after#82L as double) / cast(inv_before#81L as double)) <= 1.5) END)\n         +- LogicalQueryStage Aggregate [w_warehouse_name#8, i_item_id#21], [w_warehouse_name#8, i_item_id#21, sum(CASE WHEN (d_date#44 < 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END) AS inv_before#81L, sum(CASE WHEN (d_date#44 >= 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END) AS inv_after#82L], HashAggregate(keys=[w_warehouse_name#8, i_item_id#21], functions=[sum(CASE WHEN (d_date#44 < 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END), sum(CASE WHEN (d_date#44 >= 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 62776512,
        "inputRowCount" : 865485
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226693572,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 1105,
        "IOBytes" : {
          "Total" : 13999621,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 13999621,
            "SW" : 0
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -1912318073,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 9583920000,
            "rowCount" : 399330000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, inv_date_sk#5], `spark_catalog`.`tpcds_100`.`inventory`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "8" : {
            "sign" : 564096363,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 22337178976,
            "rowCount" : 398878196,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#20 = inv_item_sk#2) "
          },
          "4" : {
            "sign" : -1437105247,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 437626363611,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#8, i_item_id#21], [w_warehouse_name#8, i_item_id#21, sum(CASE WHEN (d_date#44 < 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END) AS inv_before#81L, sum(CASE WHEN (d_date#44 >= 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END) AS inv_after#82L] "
          },
          "15" : {
            "sign" : -1627855362,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#42, d_date_id#43, d_date#44, d_month_seq#45, d_week_seq#46, d_quarter_seq#47, d_year#48, d_dow#49, d_moy#50, d_dom#51, d_qoy#52, d_fy_year#53, d_fy_quarter_seq#54, d_fy_week_seq#55, d_day_name#56, d_quarter_name#57, d_holiday#58, d_weekend#59, d_following_holiday#60, d_first_dom#61, d_last_dom#62, d_same_day_ly#63, d_same_day_lq#64, d_current_day#65, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "11" : {
            "sign" : 1939428947,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 9583920000,
            "rowCount" : 399330000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(inv_warehouse_sk#3) AND isnotnull(inv_item_sk#2)) AND isnotnull(inv_date_sk#5)) AND dynamicpruning#89 [inv_date_sk#5]) "
          },
          "9" : {
            "sign" : -1524773858,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9378749856,
            "rowCount" : 390781244,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, d_date#44] "
          },
          "13" : {
            "sign" : 1686826212,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 960,
            "rowCount" : 60,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#42, d_date#44] "
          },
          "16" : {
            "sign" : 259305684,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 960,
            "rowCount" : 60,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#42, d_date#44], BroadcastQueryStage 0 "
          },
          "5" : {
            "sign" : -575809177,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 382923068160,
            "rowCount" : 5983172940,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_quantity_on_hand#4, w_warehouse_name#8, i_item_id#21, d_date#44] "
          },
          "10" : {
            "sign" : 414306302,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 12504999808,
            "rowCount" : 390781244,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_date_sk#5 = d_date_sk#42) "
          },
          "6" : {
            "sign" : 932653881,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 430788451680,
            "rowCount" : 5983172940,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_warehouse_sk#3 = w_warehouse_sk#6) "
          },
          "1" : {
            "sign" : 1818450516,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 437626363611,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : 99238440,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 494080,
            "rowCount" : 12352,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#20, i_item_id#21], BroadcastQueryStage 1 "
          },
          "14" : {
            "sign" : -1285628986,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14760,
            "rowCount" : 60,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#44) AND ((d_date#44 >= 1998-03-09) AND (d_date#44 <= 1998-05-08))) AND isnotnull(d_date_sk#42)) "
          },
          "0" : {
            "sign" : -1355858513,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 6400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -427846843,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 437626363611,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [w_warehouse_name#8 ASC NULLS FIRST, i_item_id#21 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : -1982234536,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048696,
            "rowCount" : 15,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [w_warehouse_sk#6, w_warehouse_name#8], BroadcastQueryStage 2 "
          },
          "7" : {
            "sign" : 1985358689,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 19146153408,
            "rowCount" : 398878196,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_warehouse_sk#3, inv_quantity_on_hand#4, d_date#44, i_item_id#21] "
          },
          "3" : {
            "sign" : -1510535590,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 437626363611,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (CASE WHEN (inv_before#81L > 0) THEN ((cast(inv_after#82L as double) / cast(inv_before#81L as double)) >= 0.666667) END AND CASE WHEN (inv_before#81L > 0) THEN ((cast(inv_after#82L as double) / cast(inv_before#81L as double)) <= 1.5) END) "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalRelation",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalRelation",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Aggregate",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [w_warehouse_name#8 ASC NULLS FIRST, i_item_id#21 ASC NULLS FIRST], true\n      +- Filter (CASE WHEN (inv_before#81L > 0) THEN ((cast(inv_after#82L as double) / cast(inv_before#81L as double)) >= 0.666667) END AND CASE WHEN (inv_before#81L > 0) THEN ((cast(inv_after#82L as double) / cast(inv_before#81L as double)) <= 1.5) END)\n         +- Aggregate [w_warehouse_name#8, i_item_id#21], [w_warehouse_name#8, i_item_id#21, sum(CASE WHEN (d_date#44 < 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END) AS inv_before#81L, sum(CASE WHEN (d_date#44 >= 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END) AS inv_after#82L]\n            +- Project [inv_quantity_on_hand#4, w_warehouse_name#8, i_item_id#21, d_date#44]\n               +- Join Inner, (inv_warehouse_sk#3 = w_warehouse_sk#6)\n                  :- Project [inv_warehouse_sk#3, inv_quantity_on_hand#4, d_date#44, i_item_id#21]\n                  :  +- Join Inner, (i_item_sk#20 = inv_item_sk#2)\n                  :     :- Project [inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, d_date#44]\n                  :     :  +- Join Inner, (inv_date_sk#5 = d_date_sk#42)\n                  :     :     :- Filter (((isnotnull(inv_warehouse_sk#3) AND isnotnull(inv_item_sk#2)) AND isnotnull(inv_date_sk#5)) AND dynamicpruning#89 [inv_date_sk#5])\n                  :     :     :  :  +- Project [d_date_sk#42, d_date#44]\n                  :     :     :  :     +- Filter ((isnotnull(d_date#44) AND ((d_date#44 >= 1998-03-09) AND (d_date#44 <= 1998-05-08))) AND isnotnull(d_date_sk#42))\n                  :     :     :  :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#42,d_date_id#43,d_date#44,d_month_seq#45,d_week_seq#46,d_quarter_seq#47,d_year#48,d_dow#49,d_moy#50,d_dom#51,d_qoy#52,d_fy_year#53,d_fy_quarter_seq#54,d_fy_week_seq#55,d_day_name#56,d_quarter_name#57,d_holiday#58,d_weekend#59,d_following_holiday#60,d_first_dom#61,d_last_dom#62,d_same_day_ly#63,d_same_day_lq#64,d_current_day#65,... 4 more fields] parquet\n                  :     :     :  +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#2,inv_warehouse_sk#3,inv_quantity_on_hand#4,inv_date_sk#5] parquet\n                  :     :     +- LogicalQueryStage Project [d_date_sk#42, d_date#44], BroadcastQueryStage 0\n                  :     +- LogicalQueryStage Project [i_item_sk#20, i_item_id#21], BroadcastQueryStage 1\n                  +- LogicalQueryStage Project [w_warehouse_sk#6, w_warehouse_name#8], BroadcastQueryStage 2\n"
      },
      "IM" : {
        "inputSizeInBytes" : 9585463736,
        "inputRowCount" : 399342427
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 2,
        "FinishedTasksNum" : 4,
        "FinishedTasksTotalTimeInMs" : 4400.0,
        "FinishedTasksDistributionInMs" : [ 1002.0, 1075.0, 1128.0, 1195.0, 1195.0 ]
      },
      "StartTimeInMs" : 1702226690231,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 4446,
        "IOBytes" : {
          "Total" : 103128618,
          "Details" : {
            "IR" : 75129376,
            "IW" : 0,
            "SR" : 13999621,
            "SW" : 13999621
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -1912318073,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 9583920000,
            "rowCount" : 399330000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, inv_date_sk#5], `spark_catalog`.`tpcds_100`.`inventory`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "8" : {
            "sign" : 564096363,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 237526218853056,
            "rowCount" : 4948462892772,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#20 = inv_item_sk#2) "
          },
          "4" : {
            "sign" : -1437105247,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 4750524377061120,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#8, i_item_id#21], [w_warehouse_name#8, i_item_id#21, sum(CASE WHEN (d_date#44 < 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END) AS inv_before#81L, sum(CASE WHEN (d_date#44 >= 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END) AS inv_after#82L] "
          },
          "15" : {
            "sign" : -1627855362,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 17970054,
            "rowCount" : 73049,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#42, d_date_id#43, d_date#44, d_month_seq#45, d_week_seq#46, d_quarter_seq#47, d_year#48, d_dow#49, d_moy#50, d_dom#51, d_qoy#52, d_fy_year#53, d_fy_quarter_seq#54, d_fy_week_seq#55, d_day_name#56, d_quarter_name#57, d_holiday#58, d_weekend#59, d_following_holiday#60, d_first_dom#61, d_last_dom#62, d_same_day_ly#63, d_same_day_lq#64, d_current_day#65, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "11" : {
            "sign" : 1939428947,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 9583920000,
            "rowCount" : 399330000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(inv_warehouse_sk#3) AND isnotnull(inv_item_sk#2)) AND isnotnull(inv_date_sk#5)) AND dynamicpruning#89 [inv_date_sk#5]) "
          },
          "9" : {
            "sign" : -1524773858,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9378749856,
            "rowCount" : 390781244,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, d_date#44] "
          },
          "13" : {
            "sign" : 1686826212,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 960,
            "rowCount" : 60,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#42, d_date#44] "
          },
          "16" : {
            "sign" : 259305684,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 960,
            "rowCount" : 60,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [d_date_sk#42, d_date#44], BroadcastQueryStage 0 "
          },
          "5" : {
            "sign" : -575809177,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4156708829928480,
            "rowCount" : 74226943391580,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_quantity_on_hand#4, w_warehouse_name#8, i_item_id#21, d_date#44] "
          },
          "10" : {
            "sign" : 414306302,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 12504999808,
            "rowCount" : 390781244,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_date_sk#5 = d_date_sk#42) "
          },
          "6" : {
            "sign" : 932653881,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4750524377061120,
            "rowCount" : 74226943391580,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_warehouse_sk#3 = w_warehouse_sk#6) "
          },
          "1" : {
            "sign" : 1818450516,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 4750524377061120,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : 99238440,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1572864,
            "rowCount" : 12663,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [i_item_sk#20, i_item_id#21], BroadcastQueryStage 1 "
          },
          "14" : {
            "sign" : -1285628986,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 14760,
            "rowCount" : 60,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#44) AND ((d_date#44 >= 1998-03-09) AND (d_date#44 <= 1998-05-08))) AND isnotnull(d_date_sk#42)) "
          },
          "0" : {
            "sign" : -1355858513,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 6400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -427846843,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 4750524377061120,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [w_warehouse_name#8 ASC NULLS FIRST, i_item_id#21 ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : -1982234536,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048696,
            "rowCount" : 15,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [w_warehouse_sk#6, w_warehouse_name#8], BroadcastQueryStage 2 "
          },
          "7" : {
            "sign" : 1985358689,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 197938515710880,
            "rowCount" : 4948462892772,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_warehouse_sk#3, inv_quantity_on_hand#4, d_date#44, i_item_id#21] "
          },
          "3" : {
            "sign" : -1510535590,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 4750524377061120,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (CASE WHEN (inv_before#81L > 0) THEN ((cast(inv_after#82L as double) / cast(inv_before#81L as double)) >= 0.666667) END AND CASE WHEN (inv_before#81L > 0) THEN ((cast(inv_after#82L as double) / cast(inv_before#81L as double)) <= 1.5) END) "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalRelation",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalRelation",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Subquery"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Project",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Aggregate",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [w_warehouse_name#8 ASC NULLS FIRST, i_item_id#21 ASC NULLS FIRST], true\n      +- Filter (CASE WHEN (inv_before#81L > 0) THEN ((cast(inv_after#82L as double) / cast(inv_before#81L as double)) >= 0.666667) END AND CASE WHEN (inv_before#81L > 0) THEN ((cast(inv_after#82L as double) / cast(inv_before#81L as double)) <= 1.5) END)\n         +- Aggregate [w_warehouse_name#8, i_item_id#21], [w_warehouse_name#8, i_item_id#21, sum(CASE WHEN (d_date#44 < 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END) AS inv_before#81L, sum(CASE WHEN (d_date#44 >= 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END) AS inv_after#82L]\n            +- Project [inv_quantity_on_hand#4, w_warehouse_name#8, i_item_id#21, d_date#44]\n               +- Join Inner, (inv_warehouse_sk#3 = w_warehouse_sk#6)\n                  :- Project [inv_warehouse_sk#3, inv_quantity_on_hand#4, d_date#44, i_item_id#21]\n                  :  +- Join Inner, (i_item_sk#20 = inv_item_sk#2)\n                  :     :- Project [inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, d_date#44]\n                  :     :  +- Join Inner, (inv_date_sk#5 = d_date_sk#42)\n                  :     :     :- Filter (((isnotnull(inv_warehouse_sk#3) AND isnotnull(inv_item_sk#2)) AND isnotnull(inv_date_sk#5)) AND dynamicpruning#89 [inv_date_sk#5])\n                  :     :     :  :  +- Project [d_date_sk#42, d_date#44]\n                  :     :     :  :     +- Filter ((isnotnull(d_date#44) AND ((d_date#44 >= 1998-03-09) AND (d_date#44 <= 1998-05-08))) AND isnotnull(d_date_sk#42))\n                  :     :     :  :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#42,d_date_id#43,d_date#44,d_month_seq#45,d_week_seq#46,d_quarter_seq#47,d_year#48,d_dow#49,d_moy#50,d_dom#51,d_qoy#52,d_fy_year#53,d_fy_quarter_seq#54,d_fy_week_seq#55,d_day_name#56,d_quarter_name#57,d_holiday#58,d_weekend#59,d_following_holiday#60,d_first_dom#61,d_last_dom#62,d_same_day_ly#63,d_same_day_lq#64,d_current_day#65,... 4 more fields] parquet\n                  :     :     :  +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#2,inv_warehouse_sk#3,inv_quantity_on_hand#4,inv_date_sk#5] parquet\n                  :     :     +- LogicalQueryStage Project [d_date_sk#42, d_date#44], BroadcastQueryStage 0\n                  :     +- LogicalQueryStage Project [i_item_sk#20, i_item_id#21], BroadcastQueryStage 1\n                  +- LogicalQueryStage Project [w_warehouse_sk#6, w_warehouse_name#8], BroadcastQueryStage 2\n"
      },
      "IM" : {
        "inputSizeInBytes" : 9586542520,
        "inputRowCount" : 399342738
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 1,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226690500,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 4177,
        "IOBytes" : {
          "Total" : 101097767,
          "Details" : {
            "IR" : 73098525,
            "IW" : 0,
            "SR" : 13999621,
            "SW" : 13999621
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "4" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1537355946,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6400,
                "rowCount" : 100
              },
              "compileTime" : {
                "sizeInBytes" : 6400,
                "rowCount" : 100
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "1" : {
            "sign" : 1965412727,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7371000,
                "rowCount" : 94500
              },
              "compileTime" : {
                "sizeInBytes" : 7371000,
                "rowCount" : 94500
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1391487212,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7371000,
                "rowCount" : 94500
              },
              "compileTime" : {
                "sizeInBytes" : 7371000,
                "rowCount" : 94500
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [w_warehouse_name#8 ASC NULLS FIRST, i_item_id#21 ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : -1845038211,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7371000,
                "rowCount" : 94500
              },
              "compileTime" : {
                "sizeInBytes" : 7371000,
                "rowCount" : 94500
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (CASE WHEN (inv_before#81L > 0) THEN ((cast(inv_after#82L as double) / cast(inv_before#81L as double)) >= 0.666667) END AND CASE WHEN (inv_before#81L > 0) THEN ((cast(inv_after#82L as double) / cast(inv_before#81L as double)) <= 1.5) END) "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [w_warehouse_name#8 ASC NULLS FIRST, i_item_id#21 ASC NULLS FIRST], true\n      +- Filter (CASE WHEN (inv_before#81L > 0) THEN ((cast(inv_after#82L as double) / cast(inv_before#81L as double)) >= 0.666667) END AND CASE WHEN (inv_before#81L > 0) THEN ((cast(inv_after#82L as double) / cast(inv_before#81L as double)) <= 1.5) END)\n         +- Aggregate [w_warehouse_name#8, i_item_id#21], [w_warehouse_name#8, i_item_id#21, sum(CASE WHEN (d_date#44 < 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END) AS inv_before#81L, sum(CASE WHEN (d_date#44 >= 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END) AS inv_after#82L]\n            +- Project [inv_quantity_on_hand#4, w_warehouse_name#8, i_item_id#21, d_date#44]\n               +- Join Inner, (inv_warehouse_sk#3 = w_warehouse_sk#6)\n                  :- Project [inv_warehouse_sk#3, inv_quantity_on_hand#4, d_date#44, i_item_id#21]\n                  :  +- Join Inner, (i_item_sk#20 = inv_item_sk#2)\n                  :     :- Project [inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, d_date#44]\n                  :     :  +- Join Inner, (inv_date_sk#5 = d_date_sk#42)\n                  :     :     :- Filter (((isnotnull(inv_warehouse_sk#3) AND isnotnull(inv_item_sk#2)) AND isnotnull(inv_date_sk#5)) AND dynamicpruning#89 [inv_date_sk#5])\n                  :     :     :  :  +- Project [d_date_sk#42, d_date#44]\n                  :     :     :  :     +- Filter ((isnotnull(d_date#44) AND ((d_date#44 >= 1998-03-09) AND (d_date#44 <= 1998-05-08))) AND isnotnull(d_date_sk#42))\n                  :     :     :  :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#42,d_date_id#43,d_date#44,d_month_seq#45,d_week_seq#46,d_quarter_seq#47,d_year#48,d_dow#49,d_moy#50,d_dom#51,d_qoy#52,d_fy_year#53,d_fy_quarter_seq#54,d_fy_week_seq#55,d_day_name#56,d_quarter_name#57,d_holiday#58,d_weekend#59,d_following_holiday#60,d_first_dom#61,d_last_dom#62,d_same_day_ly#63,d_same_day_lq#64,d_current_day#65,... 4 more fields] parquet\n                  :     :     :  +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#2,inv_warehouse_sk#3,inv_quantity_on_hand#4,inv_date_sk#5] parquet\n                  :     :     +- Project [d_date_sk#42, d_date#44]\n                  :     :        +- Filter ((isnotnull(d_date#44) AND ((d_date#44 >= 1998-03-09) AND (d_date#44 <= 1998-05-08))) AND isnotnull(d_date_sk#42))\n                  :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#42,d_date_id#43,d_date#44,d_month_seq#45,d_week_seq#46,d_quarter_seq#47,d_year#48,d_dow#49,d_moy#50,d_dom#51,d_qoy#52,d_fy_year#53,d_fy_quarter_seq#54,d_fy_week_seq#55,d_day_name#56,d_quarter_name#57,d_holiday#58,d_weekend#59,d_following_holiday#60,d_first_dom#61,d_last_dom#62,d_same_day_ly#63,d_same_day_lq#64,d_current_day#65,... 4 more fields] parquet\n                  :     +- Project [i_item_sk#20, i_item_id#21]\n                  :        +- Filter ((isnotnull(i_current_price#25) AND ((i_current_price#25 >= 0.99) AND (i_current_price#25 <= 1.49))) AND isnotnull(i_item_sk#20))\n                  :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#20,i_item_id#21,i_rec_start_date#22,i_rec_end_date#23,i_item_desc#24,i_current_price#25,i_wholesale_cost#26,i_brand_id#27,i_brand#28,i_class_id#29,i_class#30,i_category_id#31,i_category#32,i_manufact_id#33,i_manufact#34,i_size#35,i_formulation#36,i_color#37,i_units#38,i_container#39,i_manager_id#40,i_product_name#41] parquet\n                  +- Project [w_warehouse_sk#6, w_warehouse_name#8]\n                     +- Filter isnotnull(w_warehouse_sk#6)\n                        +- Relation spark_catalog.tpcds_100.warehouse[w_warehouse_sk#6,w_warehouse_id#7,w_warehouse_name#8,w_warehouse_sq_ft#9,w_street_number#10,w_street_name#11,w_street_type#12,w_suite_number#13,w_city#14,w_county#15,w_state#16,w_zip#17,w_country#18,w_gmt_offset#19] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 811641412,
            "className" : "org.apache.spark.sql.execution.TakeOrderedAndProjectExec",
            "sizeInBytes" : 6400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) TakeOrderedAndProject Input [4]: [w_warehouse_name#8, i_item_id#21, inv_before#81L, inv_after#82L] Arguments: 100, [w_warehouse_name#8 ASC NULLS FIRST, i_item_id#21 ASC NULLS FIRST], [w_warehouse_name#8, i_item_id#21, inv_before#81L, inv_after#82L] "
          },
          "1" : {
            "sign" : -1094389908,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 7371000,
            "rowCount" : 94500,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [w_warehouse_name#8, i_item_id#21, inv_before#81L, inv_after#82L] Condition : (CASE WHEN (inv_before#81L > 0) THEN ((cast(inv_after#82L as double) / cast(inv_before#81L as double)) >= 0.666667) END AND CASE WHEN (inv_before#81L > 0) THEN ((cast(inv_after#82L as double) / cast(inv_before#81L as double)) <= 1.5) END) "
          },
          "2" : {
            "sign" : -563957369,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 62776512,
            "rowCount" : 865485,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [4]: [w_warehouse_name#8, i_item_id#21, sum#92L, sum#93L] Keys [2]: [w_warehouse_name#8, i_item_id#21] Functions [2]: [sum(CASE WHEN (d_date#44 < 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END), sum(CASE WHEN (d_date#44 >= 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END)] Aggregate Attributes [2]: [sum(CASE WHEN (d_date#44 < 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END)#83L, sum(CASE WHEN (d_date#44 >= 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END)#84L] Results [4]: [w_warehouse_name#8, i_item_id#21, sum(CASE WHEN (d_date#44 < 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END)#83L AS inv_before#81L, sum(CASE WHEN (d_date#44 >= 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END)#84L AS inv_after#82L] "
          },
          "3" : {
            "sign" : 596882165,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 7371000,
            "rowCount" : 94500,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [w_warehouse_name#8, i_item_id#21, sum#92L, sum#93L] Arguments: 3 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "HashAggregate",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "TakeOrderedAndProject",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "TakeOrderedAndProject(limit=100, orderBy=[w_warehouse_name#8 ASC NULLS FIRST,i_item_id#21 ASC NULLS FIRST], output=[w_warehouse_name#8,i_item_id#21,inv_before#81L,inv_after#82L])\n+- Filter (CASE WHEN (inv_before#81L > 0) THEN ((cast(inv_after#82L as double) / cast(inv_before#81L as double)) >= 0.666667) END AND CASE WHEN (inv_before#81L > 0) THEN ((cast(inv_after#82L as double) / cast(inv_before#81L as double)) <= 1.5) END)\n   +- HashAggregate(keys=[w_warehouse_name#8, i_item_id#21], functions=[sum(CASE WHEN (d_date#44 < 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END), sum(CASE WHEN (d_date#44 >= 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END)], output=[w_warehouse_name#8, i_item_id#21, inv_before#81L, inv_after#82L])\n      +- ShuffleQueryStage 3\n         +- Exchange hashpartitioning(w_warehouse_name#8, i_item_id#21, 200), ENSURE_REQUIREMENTS, [plan_id=485]\n            +- *(4) HashAggregate(keys=[w_warehouse_name#8, i_item_id#21], functions=[partial_sum(CASE WHEN (d_date#44 < 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END), partial_sum(CASE WHEN (d_date#44 >= 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END)], output=[w_warehouse_name#8, i_item_id#21, sum#92L, sum#93L])\n               +- *(4) Project [inv_quantity_on_hand#4, w_warehouse_name#8, i_item_id#21, d_date#44]\n                  +- *(4) BroadcastHashJoin [inv_warehouse_sk#3], [w_warehouse_sk#6], Inner, BuildRight, false\n                     :- *(4) Project [inv_warehouse_sk#3, inv_quantity_on_hand#4, d_date#44, i_item_id#21]\n                     :  +- *(4) BroadcastHashJoin [inv_item_sk#2], [i_item_sk#20], Inner, BuildRight, false\n                     :     :- *(4) Project [inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, d_date#44]\n                     :     :  +- *(4) BroadcastHashJoin [inv_date_sk#5], [d_date_sk#42], Inner, BuildRight, false\n                     :     :     :- *(4) Filter (isnotnull(inv_warehouse_sk#3) AND isnotnull(inv_item_sk#2))\n                     :     :     :  +- *(4) ColumnarToRow\n                     :     :     :     +- FileScan parquet spark_catalog.tpcds_100.inventory[inv_item_sk#2,inv_warehouse_sk#3,inv_quantity_on_hand#4,inv_date_sk#5] Batched: true, DataFilters: [isnotnull(inv_warehouse_sk#3), isnotnull(inv_item_sk#2)], Format: Parquet, Location: InMemoryFileIndex(261 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/invento..., PartitionFilters: [isnotnull(inv_date_sk#5), dynamicpruningexpression(inv_date_sk#5 IN dynamicpruning#89)], PushedFilters: [IsNotNull(inv_warehouse_sk), IsNotNull(inv_item_sk)], ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>\n                     :     :     :           +- SubqueryBroadcast dynamicpruning#89, 0, [d_date_sk#42], [id=#432]\n                     :     :     :              +- AdaptiveSparkPlan isFinalPlan=true\n                                                   +- == Final Plan ==\n                                                      BroadcastQueryStage 1\n                                                      +- ReusedExchange [d_date_sk#42, d_date#44], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=165]\n                                                   +- == Initial Plan ==\n                                                      BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=429]\n                                                      +- Filter (((isnotnull(d_date#44) AND (d_date#44 >= 1998-03-09)) AND (d_date#44 <= 1998-05-08)) AND isnotnull(d_date_sk#42))\n                                                         +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#42,d_date#44] Batched: true, DataFilters: [isnotnull(d_date#44), (d_date#44 >= 1998-03-09), (d_date#44 <= 1998-05-08), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-03-09), LessThanOrEqual(d_date,1998-05-08), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n                     :     :     +- BroadcastQueryStage 0\n                     :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=165]\n                     :     :           +- *(1) Filter (((isnotnull(d_date#44) AND (d_date#44 >= 1998-03-09)) AND (d_date#44 <= 1998-05-08)) AND isnotnull(d_date_sk#42))\n                     :     :              +- *(1) ColumnarToRow\n                     :     :                 +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#42,d_date#44] Batched: true, DataFilters: [isnotnull(d_date#44), (d_date#44 >= 1998-03-09), (d_date#44 <= 1998-05-08), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-03-09), LessThanOrEqual(d_date,1998-05-08), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n                     :     +- BroadcastQueryStage 1\n                     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=184]\n                     :           +- *(2) Project [i_item_sk#20, i_item_id#21]\n                     :              +- *(2) Filter (((isnotnull(i_current_price#25) AND (i_current_price#25 >= 0.99)) AND (i_current_price#25 <= 1.49)) AND isnotnull(i_item_sk#20))\n                     :                 +- *(2) ColumnarToRow\n                     :                    +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#20,i_item_id#21,i_current_price#25] Batched: true, DataFilters: [isnotnull(i_current_price#25), (i_current_price#25 >= 0.99), (i_current_price#25 <= 1.49), isnot..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_current_price), GreaterThanOrEqual(i_current_price,0.99), LessThanOrEqual(i_current_..., ReadSchema: struct<i_item_sk:int,i_item_id:string,i_current_price:decimal(7,2)>\n                     +- BroadcastQueryStage 2\n                        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=203]\n                           +- *(3) Filter isnotnull(w_warehouse_sk#6)\n                              +- *(3) ColumnarToRow\n                                 +- FileScan parquet spark_catalog.tpcds_100.warehouse[w_warehouse_sk#6,w_warehouse_name#8] Batched: true, DataFilters: [isnotnull(w_warehouse_sk#6)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/warehouse], PartitionFilters: [], PushedFilters: [IsNotNull(w_warehouse_sk)], ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 62776512,
        "inputRowCount" : 865485
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "0" : [ 70002, 77004, 77004, 75448, 77004, 73114, 77004, 77004, 77004, 77004, 84708, 70002, 70002, 71558, 77004, 63639, 70002, 77004, 70002, 70002, 77004, 77004, 77004, 70002, 70002, 70002, 77004, 70002, 77004, 72336, 77004, 73892, 75448, 70780, 75448, 73892, 73892, 70002, 70002, 73114, 70002, 70002, 77004, 70002, 75448, 77004, 70002, 71558, 70002, 70002, 77004, 70002, 76226, 70780, 70002, 70002, 77004, 70002, 77004, 70002, 70002, 72336, 70002, 77004, 73114, 70002, 70780, 75448, 70002, 70002, 75448, 77004, 77004, 70002, 70002, 71558, 70002, 76226, 77004, 77860, 70002, 77004, 70002, 84708, 70002, 70002, 70002, 71558, 70002, 73892, 73892, 70002, 77004, 70002, 77004, 70002, 70002, 70002, 75448, 77004, 77004, 77004, 70002, 73892, 75448, 77004, 77004, 76226, 77004, 70002, 70002, 73892, 76226, 70002, 70002, 77004, 70002, 75448, 77004, 71558, 77004, 77004, 70002, 74670, 77004, 77004, 77004, 70002, 76226, 75448, 77004, 70780, 77004, 76226, 70002, 70002, 77004, 70002, 77004, 70780, 77860, 70002, 70002, 77004, 70002, 77004, 74670, 77004, 77004, 70002, 72336, 77004, 76226, 70002, 76226, 77004, 71558, 70002, 77004, 71558, 70002, 70002, 77004, 77004, 70002, 77004, 77004, 77004, 71558, 77004, 77004, 71558, 71558, 74670, 77004, 70002, 77004, 72336, 76226, 78716, 70002, 75448, 73114, 77004, 77004, 77004, 71558, 77004, 70002, 70002, 70002, 77004, 70002, 70002, 77004, 70002, 70780, 77004, 77004, 75448 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 6 ],
      "Objectives" : {
        "DurationInMs" : 899,
        "TotalTasksDurationInMs" : 889,
        "IOBytes" : {
          "Total" : 13999621,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 13999621,
            "SW" : 0
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1183792770,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 494080,
                "rowCount" : 12352
              },
              "compileTime" : {
                "sizeInBytes" : 494080,
                "rowCount" : 12352
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [i_item_sk#20, i_item_id#21] "
          },
          "1" : {
            "sign" : -776771239,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 5261952,
                "rowCount" : 12352
              },
              "compileTime" : {
                "sizeInBytes" : 5261952,
                "rowCount" : 12352
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(i_current_price#25) AND ((i_current_price#25 >= 0.99) AND (i_current_price#25 <= 1.49))) AND isnotnull(i_item_sk#20)) "
          },
          "2" : {
            "sign" : -905970743,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              },
              "compileTime" : {
                "sizeInBytes" : 86904000,
                "rowCount" : 204000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [i_item_sk#20, i_item_id#21, i_rec_start_date#22, i_rec_end_date#23, i_item_desc#24, i_current_price#25, i_wholesale_cost#26, i_brand_id#27, i_brand#28, i_class_id#29, i_class#30, i_category_id#31, i_category#32, i_manufact_id#33, i_manufact#34, i_size#35, i_formulation#36, i_color#37, i_units#38, i_container#39, i_manager_id#40, i_product_name#41], `spark_catalog`.`tpcds_100`.`item`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#20, i_item_id#21]\n+- Filter ((isnotnull(i_current_price#25) AND ((i_current_price#25 >= 0.99) AND (i_current_price#25 <= 1.49))) AND isnotnull(i_item_sk#20))\n   +- Relation spark_catalog.tpcds_100.item[i_item_sk#20,i_item_id#21,i_rec_start_date#22,i_rec_end_date#23,i_item_desc#24,i_current_price#25,i_wholesale_cost#26,i_brand_id#27,i_brand#28,i_class_id#29,i_class#30,i_category_id#31,i_category#32,i_manufact_id#33,i_manufact#34,i_size#35,i_formulation#36,i_color#37,i_units#38,i_container#39,i_manager_id#40,i_product_name#41] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 250547972,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 494080,
            "rowCount" : 12352,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [i_item_sk#20, i_item_id#21] Input [3]: [i_item_sk#20, i_item_id#21, i_current_price#25] "
          },
          "1" : {
            "sign" : 1598687995,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 494080,
            "rowCount" : 12352,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [i_item_sk#20, i_item_id#21, i_current_price#25] Condition : (((isnotnull(i_current_price#25) AND (i_current_price#25 >= 0.99)) AND (i_current_price#25 <= 1.49)) AND isnotnull(i_item_sk#20)) "
          },
          "2" : {
            "sign" : -561372261,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 494080,
            "rowCount" : 12352,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.item Output [3]: [i_item_sk#20, i_item_id#21, i_current_price#25] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item] PushedFilters: [IsNotNull(i_current_price), GreaterThanOrEqual(i_current_price,0.99), LessThanOrEqual(i_current_price,1.49), IsNotNull(i_item_sk)] ReadSchema: struct<i_item_sk:int,i_item_id:string,i_current_price:decimal(7,2)> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.item",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [i_item_sk#20, i_item_id#21]\n+- Filter (((isnotnull(i_current_price#25) AND (i_current_price#25 >= 0.99)) AND (i_current_price#25 <= 1.49)) AND isnotnull(i_item_sk#20))\n   +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#20,i_item_id#21,i_current_price#25] Batched: true, DataFilters: [isnotnull(i_current_price#25), (i_current_price#25 >= 0.99), (i_current_price#25 <= 1.49), isnot..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_current_price), GreaterThanOrEqual(i_current_price,0.99), LessThanOrEqual(i_current_..., ReadSchema: struct<i_item_sk:int,i_item_id:string,i_current_price:decimal(7,2)>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 494080,
        "inputRowCount" : 12352
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 2 ],
      "Objectives" : {
        "DurationInMs" : 1569,
        "TotalTasksDurationInMs" : 5963,
        "IOBytes" : {
          "Total" : 2030851,
          "Details" : {
            "IR" : 2030851,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1686826212,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 960,
                "rowCount" : 60
              },
              "compileTime" : {
                "sizeInBytes" : 960,
                "rowCount" : 60
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [d_date_sk#42, d_date#44] "
          },
          "1" : {
            "sign" : -1285628986,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14760,
                "rowCount" : 60
              },
              "compileTime" : {
                "sizeInBytes" : 14760,
                "rowCount" : 60
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(d_date#44) AND ((d_date#44 >= 1998-03-09) AND (d_date#44 <= 1998-05-08))) AND isnotnull(d_date_sk#42)) "
          },
          "2" : {
            "sign" : -1627855362,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              },
              "compileTime" : {
                "sizeInBytes" : 17970054,
                "rowCount" : 73049
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [d_date_sk#42, d_date_id#43, d_date#44, d_month_seq#45, d_week_seq#46, d_quarter_seq#47, d_year#48, d_dow#49, d_moy#50, d_dom#51, d_qoy#52, d_fy_year#53, d_fy_quarter_seq#54, d_fy_week_seq#55, d_day_name#56, d_quarter_name#57, d_holiday#58, d_weekend#59, d_following_holiday#60, d_first_dom#61, d_last_dom#62, d_same_day_ly#63, d_same_day_lq#64, d_current_day#65, ... 4 more fields], `spark_catalog`.`tpcds_100`.`date_dim`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [d_date_sk#42, d_date#44]\n+- Filter ((isnotnull(d_date#44) AND ((d_date#44 >= 1998-03-09) AND (d_date#44 <= 1998-05-08))) AND isnotnull(d_date_sk#42))\n   +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#42,d_date_id#43,d_date#44,d_month_seq#45,d_week_seq#46,d_quarter_seq#47,d_year#48,d_dow#49,d_moy#50,d_dom#51,d_qoy#52,d_fy_year#53,d_fy_quarter_seq#54,d_fy_week_seq#55,d_day_name#56,d_quarter_name#57,d_holiday#58,d_weekend#59,d_following_holiday#60,d_first_dom#61,d_last_dom#62,d_same_day_ly#63,d_same_day_lq#64,d_current_day#65,... 4 more fields] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 699137105,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 960,
            "rowCount" : 60,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [d_date_sk#42, d_date#44] Condition : (((isnotnull(d_date#44) AND (d_date#44 >= 1998-03-09)) AND (d_date#44 <= 1998-05-08)) AND isnotnull(d_date_sk#42)) "
          },
          "1" : {
            "sign" : 1877135415,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 960,
            "rowCount" : 60,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.date_dim Output [2]: [d_date_sk#42, d_date#44] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim] PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-03-09), LessThanOrEqual(d_date,1998-05-08), IsNotNull(d_date_sk)] ReadSchema: struct<d_date_sk:int,d_date:date> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.date_dim",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (((isnotnull(d_date#44) AND (d_date#44 >= 1998-03-09)) AND (d_date#44 <= 1998-05-08)) AND isnotnull(d_date_sk#42))\n+- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#42,d_date#44] Batched: true, DataFilters: [isnotnull(d_date#44), (d_date#44 >= 1998-03-09), (d_date#44 <= 1998-05-08), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-03-09), LessThanOrEqual(d_date,1998-05-08), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 960,
        "inputRowCount" : 60
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 1 ],
      "Objectives" : {
        "DurationInMs" : 1635,
        "TotalTasksDurationInMs" : 1625,
        "IOBytes" : {
          "Total" : 171738,
          "Details" : {
            "IR" : 171738,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -65849787,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 570,
                "rowCount" : 15
              },
              "compileTime" : {
                "sizeInBytes" : 570,
                "rowCount" : 15
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [w_warehouse_sk#6, w_warehouse_name#8] "
          },
          "1" : {
            "sign" : 1655055695,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3810,
                "rowCount" : 15
              },
              "compileTime" : {
                "sizeInBytes" : 3810,
                "rowCount" : 15
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(w_warehouse_sk#6) "
          },
          "2" : {
            "sign" : -1413540099,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3810,
                "rowCount" : 15
              },
              "compileTime" : {
                "sizeInBytes" : 3810,
                "rowCount" : 15
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [w_warehouse_sk#6, w_warehouse_id#7, w_warehouse_name#8, w_warehouse_sq_ft#9, w_street_number#10, w_street_name#11, w_street_type#12, w_suite_number#13, w_city#14, w_county#15, w_state#16, w_zip#17, w_country#18, w_gmt_offset#19], `spark_catalog`.`tpcds_100`.`warehouse`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [w_warehouse_sk#6, w_warehouse_name#8]\n+- Filter isnotnull(w_warehouse_sk#6)\n   +- Relation spark_catalog.tpcds_100.warehouse[w_warehouse_sk#6,w_warehouse_id#7,w_warehouse_name#8,w_warehouse_sq_ft#9,w_street_number#10,w_street_name#11,w_street_type#12,w_suite_number#13,w_city#14,w_county#15,w_state#16,w_zip#17,w_country#18,w_gmt_offset#19] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 680095786,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 570,
            "rowCount" : 15,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [w_warehouse_sk#6, w_warehouse_name#8] Condition : isnotnull(w_warehouse_sk#6) "
          },
          "1" : {
            "sign" : -12848168,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 570,
            "rowCount" : 15,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.warehouse Output [2]: [w_warehouse_sk#6, w_warehouse_name#8] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/warehouse] PushedFilters: [IsNotNull(w_warehouse_sk)] ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.warehouse",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull(w_warehouse_sk#6)\n+- FileScan parquet spark_catalog.tpcds_100.warehouse[w_warehouse_sk#6,w_warehouse_name#8] Batched: true, DataFilters: [isnotnull(w_warehouse_sk#6)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/warehouse], PartitionFilters: [], PushedFilters: [IsNotNull(w_warehouse_sk)], ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 570,
        "inputRowCount" : 15
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 1274,
        "TotalTasksDurationInMs" : 1268,
        "IOBytes" : {
          "Total" : 6239,
          "Details" : {
            "IR" : 6239,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "8" : {
            "sign" : -1912318073,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9583920000,
                "rowCount" : 399330000
              },
              "compileTime" : {
                "sizeInBytes" : 9583920000,
                "rowCount" : 399330000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, inv_date_sk#5], `spark_catalog`.`tpcds_100`.`inventory`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "4" : {
            "sign" : 1669732809,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 22337178976,
                "rowCount" : 398878196
              },
              "compileTime" : {
                "sizeInBytes" : 22337178976,
                "rowCount" : 398878196
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (i_item_sk#20 = inv_item_sk#2) "
          },
          "5" : {
            "sign" : 1452608942,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9378749856,
                "rowCount" : 390781244
              },
              "compileTime" : {
                "sizeInBytes" : 9378749856,
                "rowCount" : 390781244
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, d_date#44] "
          },
          "6" : {
            "sign" : -1371645210,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 12504999808,
                "rowCount" : 390781244
              },
              "compileTime" : {
                "sizeInBytes" : 12504999808,
                "rowCount" : 390781244
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_date_sk#5 = d_date_sk#42) "
          },
          "1" : {
            "sign" : -1163792502,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 31039743420,
                "rowCount" : 443424906
              },
              "compileTime" : {
                "sizeInBytes" : 31039743420,
                "rowCount" : 443424906
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_quantity_on_hand#4, w_warehouse_name#8, i_item_id#21, d_date#44] "
          },
          "0" : {
            "sign" : -1244250168,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7371000,
                "rowCount" : 94500
              },
              "compileTime" : {
                "sizeInBytes" : 7371000,
                "rowCount" : 94500
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [w_warehouse_name#8, i_item_id#21], [w_warehouse_name#8, i_item_id#21, sum(CASE WHEN (d_date#44 < 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END) AS inv_before#81L, sum(CASE WHEN (d_date#44 >= 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END) AS inv_after#82L] "
          },
          "2" : {
            "sign" : -1442753312,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 34587142668,
                "rowCount" : 443424906
              },
              "compileTime" : {
                "sizeInBytes" : 34587142668,
                "rowCount" : 443424906
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (inv_warehouse_sk#3 = w_warehouse_sk#6) "
          },
          "7" : {
            "sign" : 1939428947,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9583920000,
                "rowCount" : 399330000
              },
              "compileTime" : {
                "sizeInBytes" : 9583920000,
                "rowCount" : 399330000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(inv_warehouse_sk#3) AND isnotnull(inv_item_sk#2)) AND isnotnull(inv_date_sk#5)) AND dynamicpruning#89 [inv_date_sk#5]) "
          },
          "3" : {
            "sign" : 1928057419,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 19146153408,
                "rowCount" : 398878196
              },
              "compileTime" : {
                "sizeInBytes" : 19146153408,
                "rowCount" : 398878196
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [inv_warehouse_sk#3, inv_quantity_on_hand#4, d_date#44, i_item_id#21] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalRelation",
          "toId" : 7,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [w_warehouse_name#8, i_item_id#21], [w_warehouse_name#8, i_item_id#21, sum(CASE WHEN (d_date#44 < 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END) AS inv_before#81L, sum(CASE WHEN (d_date#44 >= 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END) AS inv_after#82L]\n+- Project [inv_quantity_on_hand#4, w_warehouse_name#8, i_item_id#21, d_date#44]\n   +- Join Inner, (inv_warehouse_sk#3 = w_warehouse_sk#6)\n      :- Project [inv_warehouse_sk#3, inv_quantity_on_hand#4, d_date#44, i_item_id#21]\n      :  +- Join Inner, (i_item_sk#20 = inv_item_sk#2)\n      :     :- Project [inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, d_date#44]\n      :     :  +- Join Inner, (inv_date_sk#5 = d_date_sk#42)\n      :     :     :- Filter (((isnotnull(inv_warehouse_sk#3) AND isnotnull(inv_item_sk#2)) AND isnotnull(inv_date_sk#5)) AND dynamicpruning#89 [inv_date_sk#5])\n      :     :     :  :  +- Project [d_date_sk#42, d_date#44]\n      :     :     :  :     +- Filter ((isnotnull(d_date#44) AND ((d_date#44 >= 1998-03-09) AND (d_date#44 <= 1998-05-08))) AND isnotnull(d_date_sk#42))\n      :     :     :  :        +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#42,d_date_id#43,d_date#44,d_month_seq#45,d_week_seq#46,d_quarter_seq#47,d_year#48,d_dow#49,d_moy#50,d_dom#51,d_qoy#52,d_fy_year#53,d_fy_quarter_seq#54,d_fy_week_seq#55,d_day_name#56,d_quarter_name#57,d_holiday#58,d_weekend#59,d_following_holiday#60,d_first_dom#61,d_last_dom#62,d_same_day_ly#63,d_same_day_lq#64,d_current_day#65,... 4 more fields] parquet\n      :     :     :  +- Relation spark_catalog.tpcds_100.inventory[inv_item_sk#2,inv_warehouse_sk#3,inv_quantity_on_hand#4,inv_date_sk#5] parquet\n      :     :     +- Project [d_date_sk#42, d_date#44]\n      :     :        +- Filter ((isnotnull(d_date#44) AND ((d_date#44 >= 1998-03-09) AND (d_date#44 <= 1998-05-08))) AND isnotnull(d_date_sk#42))\n      :     :           +- Relation spark_catalog.tpcds_100.date_dim[d_date_sk#42,d_date_id#43,d_date#44,d_month_seq#45,d_week_seq#46,d_quarter_seq#47,d_year#48,d_dow#49,d_moy#50,d_dom#51,d_qoy#52,d_fy_year#53,d_fy_quarter_seq#54,d_fy_week_seq#55,d_day_name#56,d_quarter_name#57,d_holiday#58,d_weekend#59,d_following_holiday#60,d_first_dom#61,d_last_dom#62,d_same_day_ly#63,d_same_day_lq#64,d_current_day#65,... 4 more fields] parquet\n      :     +- Project [i_item_sk#20, i_item_id#21]\n      :        +- Filter ((isnotnull(i_current_price#25) AND ((i_current_price#25 >= 0.99) AND (i_current_price#25 <= 1.49))) AND isnotnull(i_item_sk#20))\n      :           +- Relation spark_catalog.tpcds_100.item[i_item_sk#20,i_item_id#21,i_rec_start_date#22,i_rec_end_date#23,i_item_desc#24,i_current_price#25,i_wholesale_cost#26,i_brand_id#27,i_brand#28,i_class_id#29,i_class#30,i_category_id#31,i_category#32,i_manufact_id#33,i_manufact#34,i_size#35,i_formulation#36,i_color#37,i_units#38,i_container#39,i_manager_id#40,i_product_name#41] parquet\n      +- Project [w_warehouse_sk#6, w_warehouse_name#8]\n         +- Filter isnotnull(w_warehouse_sk#6)\n            +- Relation spark_catalog.tpcds_100.warehouse[w_warehouse_sk#6,w_warehouse_id#7,w_warehouse_name#8,w_warehouse_sq_ft#9,w_street_number#10,w_street_name#11,w_street_type#12,w_suite_number#13,w_city#14,w_county#15,w_state#16,w_zip#17,w_country#18,w_gmt_offset#19] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : 654291579,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 9583920000,
            "rowCount" : 399330000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpcds_100.inventory Output [4]: [inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, inv_date_sk#5] Batched: true Location: InMemoryFileIndex [hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/inventory/inv_date_sk=2450815, ... 260 entries] PartitionFilters: [isnotnull(inv_date_sk#5), dynamicpruningexpression(inv_date_sk#5 IN dynamicpruning#89)] PushedFilters: [IsNotNull(inv_warehouse_sk), IsNotNull(inv_item_sk)] ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int> "
          },
          "4" : {
            "sign" : -1028166153,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 22337178976,
            "rowCount" : 398878196,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [inv_item_sk#2] Right keys [1]: [i_item_sk#20] Join type: Inner Join condition: None "
          },
          "11" : {
            "sign" : -1543100253,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048696,
            "rowCount" : 15,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [w_warehouse_sk#6, w_warehouse_name#8] Arguments: 2 "
          },
          "9" : {
            "sign" : -70841751,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1049064,
            "rowCount" : 61,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [d_date_sk#42, d_date#44] Arguments: 0 "
          },
          "5" : {
            "sign" : -177737128,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 9378749856,
            "rowCount" : 390781244,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, d_date#44] Input [6]: [inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, inv_date_sk#5, d_date_sk#42, d_date#44] "
          },
          "10" : {
            "sign" : 72692504,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1572864,
            "rowCount" : 12663,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [i_item_sk#20, i_item_id#21] Arguments: 1 "
          },
          "6" : {
            "sign" : 338632964,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 12504999808,
            "rowCount" : 390781244,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [inv_date_sk#5] Right keys [1]: [d_date_sk#42] Join type: Inner Join condition: None "
          },
          "1" : {
            "sign" : -272192250,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 31039743420,
            "rowCount" : 443424906,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [inv_quantity_on_hand#4, w_warehouse_name#8, i_item_id#21, d_date#44] Input [6]: [inv_warehouse_sk#3, inv_quantity_on_hand#4, d_date#44, i_item_id#21, w_warehouse_sk#6, w_warehouse_name#8] "
          },
          "0" : {
            "sign" : -44410155,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 7371000,
            "rowCount" : 94500,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [4]: [inv_quantity_on_hand#4, w_warehouse_name#8, i_item_id#21, d_date#44] Keys [2]: [w_warehouse_name#8, i_item_id#21] Functions [2]: [partial_sum(CASE WHEN (d_date#44 < 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END), partial_sum(CASE WHEN (d_date#44 >= 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END)] Aggregate Attributes [2]: [sum#90L, sum#91L] Results [4]: [w_warehouse_name#8, i_item_id#21, sum#92L, sum#93L] "
          },
          "2" : {
            "sign" : -105175452,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 34587142668,
            "rowCount" : 443424906,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [inv_warehouse_sk#3] Right keys [1]: [w_warehouse_sk#6] Join type: Inner Join condition: None "
          },
          "7" : {
            "sign" : -1543927180,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 9583920000,
            "rowCount" : 399330000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, inv_date_sk#5] Condition : (isnotnull(inv_warehouse_sk#3) AND isnotnull(inv_item_sk#2)) "
          },
          "3" : {
            "sign" : -1675185687,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 19146153408,
            "rowCount" : 398878196,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [inv_warehouse_sk#3, inv_quantity_on_hand#4, d_date#44, i_item_id#21] Input [6]: [inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, d_date#44, i_item_sk#20, i_item_id#21] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "Scan parquet spark_catalog.tpcds_100.inventory",
          "toId" : 7,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Filter",
          "toId" : 6,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "BroadcastQueryStage",
          "toId" : 6,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "BroadcastHashJoin",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "BroadcastQueryStage",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastHashJoin",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[w_warehouse_name#8, i_item_id#21], functions=[partial_sum(CASE WHEN (d_date#44 < 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END), partial_sum(CASE WHEN (d_date#44 >= 1998-04-08) THEN inv_quantity_on_hand#4 ELSE 0 END)], output=[w_warehouse_name#8, i_item_id#21, sum#92L, sum#93L])\n+- Project [inv_quantity_on_hand#4, w_warehouse_name#8, i_item_id#21, d_date#44]\n   +- BroadcastHashJoin [inv_warehouse_sk#3], [w_warehouse_sk#6], Inner, BuildRight, false\n      :- Project [inv_warehouse_sk#3, inv_quantity_on_hand#4, d_date#44, i_item_id#21]\n      :  +- BroadcastHashJoin [inv_item_sk#2], [i_item_sk#20], Inner, BuildRight, false\n      :     :- Project [inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, d_date#44]\n      :     :  +- BroadcastHashJoin [inv_date_sk#5], [d_date_sk#42], Inner, BuildRight, false\n      :     :     :- Filter (isnotnull(inv_warehouse_sk#3) AND isnotnull(inv_item_sk#2))\n      :     :     :  +- FileScan parquet spark_catalog.tpcds_100.inventory[inv_item_sk#2,inv_warehouse_sk#3,inv_quantity_on_hand#4,inv_date_sk#5] Batched: true, DataFilters: [isnotnull(inv_warehouse_sk#3), isnotnull(inv_item_sk#2)], Format: Parquet, Location: InMemoryFileIndex(261 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/invento..., PartitionFilters: [isnotnull(inv_date_sk#5), dynamicpruningexpression(inv_date_sk#5 IN dynamicpruning#89)], PushedFilters: [IsNotNull(inv_warehouse_sk), IsNotNull(inv_item_sk)], ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>\n      :     :     :        +- SubqueryBroadcast dynamicpruning#89, 0, [d_date_sk#42], [id=#432]\n      :     :     :           +- AdaptiveSparkPlan isFinalPlan=false\n      :     :     :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=429]\n      :     :     :                 +- Filter (((isnotnull(d_date#44) AND (d_date#44 >= 1998-03-09)) AND (d_date#44 <= 1998-05-08)) AND isnotnull(d_date_sk#42))\n      :     :     :                    +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#42,d_date#44] Batched: true, DataFilters: [isnotnull(d_date#44), (d_date#44 >= 1998-03-09), (d_date#44 <= 1998-05-08), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-03-09), LessThanOrEqual(d_date,1998-05-08), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n      :     :     +- BroadcastQueryStage 0\n      :     :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=165]\n      :     :           +- *(1) Filter (((isnotnull(d_date#44) AND (d_date#44 >= 1998-03-09)) AND (d_date#44 <= 1998-05-08)) AND isnotnull(d_date_sk#42))\n      :     :              +- *(1) ColumnarToRow\n      :     :                 +- FileScan parquet spark_catalog.tpcds_100.date_dim[d_date_sk#42,d_date#44] Batched: true, DataFilters: [isnotnull(d_date#44), (d_date#44 >= 1998-03-09), (d_date#44 <= 1998-05-08), isnotnull(d_date_sk#..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/date_dim], PartitionFilters: [], PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-03-09), LessThanOrEqual(d_date,1998-05-08), Is..., ReadSchema: struct<d_date_sk:int,d_date:date>\n      :     +- BroadcastQueryStage 1\n      :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=184]\n      :           +- *(2) Project [i_item_sk#20, i_item_id#21]\n      :              +- *(2) Filter (((isnotnull(i_current_price#25) AND (i_current_price#25 >= 0.99)) AND (i_current_price#25 <= 1.49)) AND isnotnull(i_item_sk#20))\n      :                 +- *(2) ColumnarToRow\n      :                    +- FileScan parquet spark_catalog.tpcds_100.item[i_item_sk#20,i_item_id#21,i_current_price#25] Batched: true, DataFilters: [isnotnull(i_current_price#25), (i_current_price#25 >= 0.99), (i_current_price#25 <= 1.49), isnot..., Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/item], PartitionFilters: [], PushedFilters: [IsNotNull(i_current_price), GreaterThanOrEqual(i_current_price,0.99), LessThanOrEqual(i_current_..., ReadSchema: struct<i_item_sk:int,i_item_id:string,i_current_price:decimal(7,2)>\n      +- BroadcastQueryStage 2\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=203]\n            +- *(3) Filter isnotnull(w_warehouse_sk#6)\n               +- *(3) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpcds_100.warehouse[w_warehouse_sk#6,w_warehouse_name#8] Batched: true, DataFilters: [isnotnull(w_warehouse_sk#6)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node7-opa:8020/user/spark_benchmark/tpcds_100/dataset/warehouse], PartitionFilters: [], PushedFilters: [IsNotNull(w_warehouse_sk)], ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 9587590624,
        "inputRowCount" : 399342739
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 4 ],
      "Objectives" : {
        "DurationInMs" : 2681,
        "TotalTasksDurationInMs" : 25949,
        "IOBytes" : {
          "Total" : 86926408,
          "Details" : {
            "IR" : 72926787,
            "IW" : 0,
            "SR" : 0,
            "SW" : 13999621
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702226688296,
  "SQLEndTimeInMs" : 1702226694677,
  "Objectives" : {
    "DurationInMs" : 6381,
    "IOBytes" : {
      "Total" : 103134857,
      "Details" : {
        "IR" : 75135615,
        "IW" : 0,
        "SR" : 13999621,
        "SW" : 13999621
      }
    }
  }
}
