{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "12" : {
          "sign" : -2029617665,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 33602122512,
          "rowCount" : 600037902,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26] "
        },
        "8" : {
          "sign" : 1645768682,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 31230311684,
          "rowCount" : 600582917,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49] "
        },
        "19" : {
          "sign" : 963828806,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3960000000,
          "rowCount" : 20000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(p_name#5) AND Contains(p_name#5, thistle)) AND isnotnull(p_partkey#4L)) "
        },
        "23" : {
          "sign" : 741471493,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 201000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_suppkey#13L, s_name#14, s_address#15, s_nationkey#16L, s_phone#17, s_acctbal#18, s_comment#19], `spark_catalog`.`tpch_100`.`supplier`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "4" : {
          "sign" : -2010747574,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 85569480,
          "rowCount" : 1188465,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, n_name#51] "
        },
        "15" : {
          "sign" : 1561781683,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3000000000,
          "rowCount" : 150000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [o_orderkey#41L, o_orderdate#49] "
        },
        "11" : {
          "sign" : 537908823,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 40895963096,
          "rowCount" : 601411222,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (o_orderkey#41L = l_orderkey#20L) "
        },
        "9" : {
          "sign" : 1982670230,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 36034975020,
          "rowCount" : 600582917,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (p_partkey#4L = l_partkey#21L) "
        },
        "22" : {
          "sign" : 1264449009,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 201000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(s_suppkey#13L) AND isnotnull(s_nationkey#16L)) "
        },
        "26" : {
          "sign" : -741175738,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3275,
          "rowCount" : 25,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [n_nationkey#50L, n_name#51, n_regionkey#52L, n_comment#53], `spark_catalog`.`tpch_100`.`nation`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "13" : {
          "sign" : -993113324,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 111607049772,
          "rowCount" : 600037902,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(l_partkey#21L) AND isnotnull(l_suppkey#22L)) AND isnotnull(l_orderkey#20L)) "
        },
        "24" : {
          "sign" : 377419375,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 900,
          "rowCount" : 25,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [n_nationkey#50L, n_name#51] "
        },
        "16" : {
          "sign" : 1428154615,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 24300000000,
          "rowCount" : 150000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(o_orderkey#41L) "
        },
        "5" : {
          "sign" : -863258961,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 104584920,
          "rowCount" : 1188465,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#16L = n_nationkey#50L) "
        },
        "10" : {
          "sign" : -506209847,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 31273383544,
          "rowCount" : 601411222,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49] "
        },
        "21" : {
          "sign" : -188402084,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 24000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [s_suppkey#13L, s_nationkey#16L] "
        },
        "6" : {
          "sign" : -1563105702,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 36036631020,
          "rowCount" : 600610517,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, s_nationkey#16L] "
        },
        "1" : {
          "sign" : -1570269605,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 115333550736,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [nation#0, o_year#1], [nation#0, o_year#1, sum(amount#2) AS sum_profit#3] "
        },
        "17" : {
          "sign" : 170474439,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 24300000000,
          "rowCount" : 150000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [o_orderkey#41L, o_custkey#42L, o_orderstatus#43, o_totalprice#44, o_orderpriority#45, o_clerk#46, o_shippriority#47, o_comment#48, o_orderdate#49], `spark_catalog`.`tpch_100`.`orders`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "25" : {
          "sign" : -1841832386,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3275,
          "rowCount" : 25,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(n_nationkey#50L) "
        },
        "14" : {
          "sign" : 559913504,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 111607049772,
          "rowCount" : 600037902,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_linenumber#23, l_quantity#24, l_extendedprice#25, l_discount#26, l_tax#27, l_returnflag#28, l_linestatus#29, l_commitdate#30, l_receiptdate#31, l_shipinstruct#32, l_shipmode#33, l_comment#34, l_shipdate#35], `spark_catalog`.`tpch_100`.`lineitem`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "0" : {
          "sign" : -1246245478,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 115333550736,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [nation#0 ASC NULLS FIRST, o_year#1 DESC NULLS LAST], true "
        },
        "20" : {
          "sign" : -879419419,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3960000000,
          "rowCount" : 20000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [p_partkey#4L, p_name#5, p_mfgr#6, p_type#7, p_size#8, p_container#9, p_retailprice#10, p_comment#11, p_brand#12], `spark_catalog`.`tpch_100`.`part`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "27" : {
          "sign" : -1893226881,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2560000000,
          "rowCount" : 80000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ps_partkey#36L, ps_suppkey#37L, ps_supplycost#39] "
        },
        "2" : {
          "sign" : -1022805215,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 115333550736,
          "rowCount" : 2402782307,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [n_name#51 AS nation#0, year(o_orderdate#49) AS o_year#1, ((l_extendedprice#25 * (1 - l_discount#26)) - (ps_supplycost#39 * l_quantity#24)) AS amount#2] "
        },
        "18" : {
          "sign" : 1655166433,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 320000000,
          "rowCount" : 20000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [p_partkey#4L] "
        },
        "7" : {
          "sign" : 275956942,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 40841515156,
          "rowCount" : 600610517,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#13L = l_suppkey#22L) "
        },
        "29" : {
          "sign" : -1221742165,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 13760000000,
          "rowCount" : 80000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ps_partkey#36L, ps_suppkey#37L, ps_availqty#38, ps_supplycost#39, ps_comment#40], `spark_catalog`.`tpch_100`.`partsupp`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "3" : {
          "sign" : 719839430,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 230667101472,
          "rowCount" : 2402782307,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((ps_suppkey#37L = l_suppkey#22L) AND (ps_partkey#36L = l_partkey#21L)) "
        },
        "28" : {
          "sign" : -1357142421,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 13760000000,
          "rowCount" : 80000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(ps_suppkey#37L) AND isnotnull(ps_partkey#36L)) "
        }
      },
      "links" : [ {
        "fromId" : 14,
        "fromName" : "LogicalRelation",
        "toId" : 13,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Filter",
        "toId" : 12,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 12,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "LogicalRelation",
        "toId" : 16,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "Filter",
        "toId" : 15,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "Join",
        "toId" : 10,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "LogicalRelation",
        "toId" : 19,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "Filter",
        "toId" : 18,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Join",
        "toId" : 8,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "LogicalRelation",
        "toId" : 22,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "Filter",
        "toId" : 21,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Join",
        "toId" : 6,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Project",
        "toId" : 5,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "LogicalRelation",
        "toId" : 25,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "Filter",
        "toId" : 24,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "Project",
        "toId" : 5,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Join",
        "toId" : 4,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Project",
        "toId" : 3,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 29,
        "fromName" : "LogicalRelation",
        "toId" : 28,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "Filter",
        "toId" : 27,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "Project",
        "toId" : 3,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Join",
        "toId" : 2,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Project",
        "toId" : 1,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "Aggregate",
        "toId" : 0,
        "toName" : "Sort",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "Sort [nation#0 ASC NULLS FIRST, o_year#1 DESC NULLS LAST], true\n+- Aggregate [nation#0, o_year#1], [nation#0, o_year#1, sum(amount#2) AS sum_profit#3]\n   +- Project [n_name#51 AS nation#0, year(o_orderdate#49) AS o_year#1, ((l_extendedprice#25 * (1 - l_discount#26)) - (ps_supplycost#39 * l_quantity#24)) AS amount#2]\n      +- Join Inner, ((ps_suppkey#37L = l_suppkey#22L) AND (ps_partkey#36L = l_partkey#21L))\n         :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, n_name#51]\n         :  +- Join Inner, (s_nationkey#16L = n_nationkey#50L)\n         :     :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, s_nationkey#16L]\n         :     :  +- Join Inner, (s_suppkey#13L = l_suppkey#22L)\n         :     :     :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49]\n         :     :     :  +- Join Inner, (p_partkey#4L = l_partkey#21L)\n         :     :     :     :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49]\n         :     :     :     :  +- Join Inner, (o_orderkey#41L = l_orderkey#20L)\n         :     :     :     :     :- Project [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26]\n         :     :     :     :     :  +- Filter ((isnotnull(l_partkey#21L) AND isnotnull(l_suppkey#22L)) AND isnotnull(l_orderkey#20L))\n         :     :     :     :     :     +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#20L,l_partkey#21L,l_suppkey#22L,l_linenumber#23,l_quantity#24,l_extendedprice#25,l_discount#26,l_tax#27,l_returnflag#28,l_linestatus#29,l_commitdate#30,l_receiptdate#31,l_shipinstruct#32,l_shipmode#33,l_comment#34,l_shipdate#35] parquet\n         :     :     :     :     +- Project [o_orderkey#41L, o_orderdate#49]\n         :     :     :     :        +- Filter isnotnull(o_orderkey#41L)\n         :     :     :     :           +- Relation spark_catalog.tpch_100.orders[o_orderkey#41L,o_custkey#42L,o_orderstatus#43,o_totalprice#44,o_orderpriority#45,o_clerk#46,o_shippriority#47,o_comment#48,o_orderdate#49] parquet\n         :     :     :     +- Project [p_partkey#4L]\n         :     :     :        +- Filter ((isnotnull(p_name#5) AND Contains(p_name#5, thistle)) AND isnotnull(p_partkey#4L))\n         :     :     :           +- Relation spark_catalog.tpch_100.part[p_partkey#4L,p_name#5,p_mfgr#6,p_type#7,p_size#8,p_container#9,p_retailprice#10,p_comment#11,p_brand#12] parquet\n         :     :     +- Project [s_suppkey#13L, s_nationkey#16L]\n         :     :        +- Filter (isnotnull(s_suppkey#13L) AND isnotnull(s_nationkey#16L))\n         :     :           +- Relation spark_catalog.tpch_100.supplier[s_suppkey#13L,s_name#14,s_address#15,s_nationkey#16L,s_phone#17,s_acctbal#18,s_comment#19] parquet\n         :     +- Project [n_nationkey#50L, n_name#51]\n         :        +- Filter isnotnull(n_nationkey#50L)\n         :           +- Relation spark_catalog.tpch_100.nation[n_nationkey#50L,n_name#51,n_regionkey#52L,n_comment#53] parquet\n         +- Project [ps_partkey#36L, ps_suppkey#37L, ps_supplycost#39]\n            +- Filter (isnotnull(ps_suppkey#37L) AND isnotnull(ps_partkey#36L))\n               +- Relation spark_catalog.tpch_100.partsupp[ps_partkey#36L,ps_suppkey#37L,ps_availqty#38,ps_supplycost#39,ps_comment#40] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 153828053047,
      "inputRowCount" : 851037927
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "8" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : 2004395315,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2411984160,
            "rowCount" : 32631902,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, n_name#51], ShuffleQueryStage 8 "
          },
          "5" : {
            "sign" : -1826504625,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ps_partkey#36L, ps_suppkey#37L, ps_supplycost#39], ShuffleQueryStage 5 "
          },
          "1" : {
            "sign" : -2022447174,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 125306503680000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [nation#64, o_year#65], [nation#64, o_year#65, sum(amount#66) AS sum_profit#67] "
          },
          "0" : {
            "sign" : 1256628467,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 125306503680000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [nation#64 ASC NULLS FIRST, o_year#65 DESC NULLS LAST], true "
          },
          "2" : {
            "sign" : -1152855164,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 125306503680000000,
            "rowCount" : 2610552160000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_name#51 AS nation#64, year(o_orderdate#49) AS o_year#65, ((l_extendedprice#25 * (1 - l_discount#26)) - (ps_supplycost#39 * l_quantity#24)) AS amount#66] "
          },
          "3" : {
            "sign" : -1148707791,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 250613007360000000,
            "rowCount" : 2610552160000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ps_suppkey#37L = l_suppkey#22L) AND (ps_partkey#36L = l_partkey#21L)) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [nation#64 ASC NULLS FIRST, o_year#65 DESC NULLS LAST], true\n+- Aggregate [nation#64, o_year#65], [nation#64, o_year#65, sum(amount#66) AS sum_profit#67]\n   +- Project [n_name#51 AS nation#64, year(o_orderdate#49) AS o_year#65, ((l_extendedprice#25 * (1 - l_discount#26)) - (ps_supplycost#39 * l_quantity#24)) AS amount#66]\n      +- Join Inner, ((ps_suppkey#37L = l_suppkey#22L) AND (ps_partkey#36L = l_partkey#21L))\n         :- LogicalQueryStage Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, n_name#51], ShuffleQueryStage 8\n         +- LogicalQueryStage Project [ps_partkey#36L, ps_suppkey#37L, ps_supplycost#39], ShuffleQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 4971984160,
        "inputRowCount" : 112631902
      },
      "PD" : {
        "4" : [ 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7555897, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237 ],
        "7" : [ 3947205, 3908425, 3883925, 3915931, 3851919, 3911999, 3911999, 3951137, 3879993, 3947205, 3943631, 3911999, 3915931, 3908425, 3947205, 3847987, 3908425, 3919131, 3879993, 3951137, 3883925, 3908425, 3876419, 3911999, 3911999, 3915931, 3915931, 3911999, 3911999, 3911999, 3883925, 3911999, 3911999, 3915931, 3911999, 3879993, 3911625, 3911999, 3883925, 3883925, 3915931, 3911999, 3915931, 3908425, 3915931, 3911999, 3876419, 3911999, 3915931, 3879993, 3879993, 3876419, 3911999, 3911999, 3911999, 3908425, 3911999, 3911999, 3947205, 3873169, 3908425, 3908425, 3915931, 3920256, 3879993, 3908425, 3947205, 3879993, 3919131, 3879993, 3911999, 3851919, 3876419, 3879993, 3911999, 3876419, 3915931, 3908425, 3911999, 3911999, 3911999, 3911999, 3908425, 3911999, 3911999, 3911999, 3883925, 3911999, 3911999, 3915199, 3905175, 3911999, 3911999, 3943631, 3908425, 3911999, 3876419, 3876419, 3947205, 3951137, 3911999, 3915931, 3911999, 3879993, 3940381, 3915931, 3911999, 3915931, 3911999, 3915931, 3915931, 3911999, 3879993, 3911999, 3943631, 3911999, 3876419, 3911999, 3911999, 3915931, 3873169, 3911999, 3911999, 3908425, 3911999, 3915931, 3911999, 3908425, 3879993, 3911999, 3879993, 3951137, 3876419, 3908425, 3911999, 3943631, 3908425, 3947205, 3879993, 3915931, 3943631, 3908425, 3908425, 3911999, 3908425, 3911999, 3911999, 3908425, 3920256, 3876419, 3911999, 3915931, 3915931, 3908425, 3947205, 3911999, 3911999, 3879993, 3911999, 3911999, 3879993, 3911999, 3879993, 3943631, 3879993, 3908425, 3911999, 3911999, 3911999, 3911999, 3911999, 3911625, 3951137, 3915931, 3879993, 3911999, 3908425, 3851919, 3915931, 3879993, 3908425, 3911999, 3879993, 3908425, 3911999, 3911999, 3911999, 3943631, 3883925, 3982411, 3908425, 3908425, 3911999, 3879619, 3883925, 3908425, 3911999, 3911999, 3911999, 3911999 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226731242,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 9817,
        "IOBytes" : {
          "Total" : 2182702497,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 2182107000,
            "SW" : 595497
          }
        }
      }
    },
    "4" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -1953889982,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_suppkey#13L, s_nationkey#16L], ShuffleQueryStage 3 "
          },
          "8" : {
            "sign" : -327139219,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 34008647488908872,
            "rowCount" : 654012451709786,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49] "
          },
          "4" : {
            "sign" : 1347233483,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1177222413077614800000000,
            "rowCount" : 16350311292744650000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, n_name#51] "
          },
          "11" : {
            "sign" : -15030167,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 17399408,
            "rowCount" : 1087463,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_partkey#4L], ShuffleQueryStage 2 "
          },
          "9" : {
            "sign" : 1344725189,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 39240747102587160,
            "rowCount" : 654012451709786,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (p_partkey#4L = l_partkey#21L) "
          },
          "13" : {
            "sign" : -151942205,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048776,
            "rowCount" : 25,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#50L, n_name#51], BroadcastQueryStage 4 "
          },
          "5" : {
            "sign" : -1643734276,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1438827393761529200000000,
            "rowCount" : 16350311292744650000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#16L = n_nationkey#50L) "
          },
          "10" : {
            "sign" : -223876024,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 31273383544,
            "rowCount" : 601411222,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49], ShuffleQueryStage 6 "
          },
          "6" : {
            "sign" : 21474581,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 39240747102587160000000,
            "rowCount" : 654012451709786000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, s_nationkey#16L] "
          },
          "1" : {
            "sign" : 1790609164,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 115333550736,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [nation#64, o_year#65], [nation#64, o_year#65, sum(amount#66) AS sum_profit#67] "
          },
          "14" : {
            "sign" : -1826504625,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ps_partkey#36L, ps_suppkey#37L, ps_supplycost#39], ShuffleQueryStage 5 "
          },
          "0" : {
            "sign" : 501012941,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 115333550736,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [nation#64 ASC NULLS FIRST, o_year#65 DESC NULLS LAST], true "
          },
          "2" : {
            "sign" : -58722658,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 115333550736,
            "rowCount" : 2402782307,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_name#51 AS nation#64, year(o_orderdate#49) AS o_year#65, ((l_extendedprice#25 * (1 - l_discount#26)) - (ps_supplycost#39 * l_quantity#24)) AS amount#66] "
          },
          "7" : {
            "sign" : -1871594429,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 44472846716265448000000,
            "rowCount" : 654012451709786000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#13L = l_suppkey#22L) "
          },
          "3" : {
            "sign" : -1461094795,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 230667101472,
            "rowCount" : 2402782307,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ps_suppkey#37L = l_suppkey#22L) AND (ps_partkey#36L = l_partkey#21L)) "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [nation#64 ASC NULLS FIRST, o_year#65 DESC NULLS LAST], true\n+- Aggregate [nation#64, o_year#65], [nation#64, o_year#65, sum(amount#66) AS sum_profit#67]\n   +- Project [n_name#51 AS nation#64, year(o_orderdate#49) AS o_year#65, ((l_extendedprice#25 * (1 - l_discount#26)) - (ps_supplycost#39 * l_quantity#24)) AS amount#66]\n      +- Join Inner, ((ps_suppkey#37L = l_suppkey#22L) AND (ps_partkey#36L = l_partkey#21L))\n         :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, n_name#51]\n         :  +- Join Inner, (s_nationkey#16L = n_nationkey#50L)\n         :     :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, s_nationkey#16L]\n         :     :  +- Join Inner, (s_suppkey#13L = l_suppkey#22L)\n         :     :     :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49]\n         :     :     :  +- Join Inner, (p_partkey#4L = l_partkey#21L)\n         :     :     :     :- LogicalQueryStage Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49], ShuffleQueryStage 6\n         :     :     :     +- LogicalQueryStage Project [p_partkey#4L], ShuffleQueryStage 2\n         :     :     +- LogicalQueryStage Project [s_suppkey#13L, s_nationkey#16L], ShuffleQueryStage 3\n         :     +- LogicalQueryStage Project [n_nationkey#50L, n_name#51], BroadcastQueryStage 4\n         +- LogicalQueryStage Project [ps_partkey#36L, ps_suppkey#37L, ps_supplycost#39], ShuffleQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 33875831728,
        "inputRowCount" : 683498710
      },
      "PD" : {
        "2" : [ 34114, 34138, 34392, 35041, 34635, 34774, 33708, 35030, 34646, 37031, 34531, 34394, 34251, 35043, 35747, 35158, 34976, 34240, 34416, 34335, 34416, 35398, 35145, 34785, 34368, 34544, 33754, 34509, 34939, 35041, 34648, 34785, 33745, 34288, 34809, 34392, 33752, 34277, 35352, 35853, 33615, 34529, 34008, 34500, 34321, 34101, 35122, 34636, 34608, 36251, 34937, 35019, 35169, 35173, 34913, 34681, 35551, 35330, 34774, 34776, 34251, 33094, 34381, 34090, 34824, 34136, 34904, 34392, 34299, 34785, 34112, 34785, 34774, 33778, 34008, 33904, 33860, 33823, 34917, 36418, 35147, 35067, 36085, 35191, 35098, 34370, 34915, 34253, 34065, 33719, 35447, 35067, 34659, 35285, 34891, 34474, 34624, 34496, 34266, 35319, 34240, 34251, 34787, 34915, 34657, 35835, 34251, 35732, 34509, 35123, 34913, 34763, 33591, 34496, 34253, 34520, 33986, 34544, 34242, 34379, 34868, 34820, 34557, 35067, 34820, 34659, 34778, 35489, 34867, 35842, 33500, 35006, 34939, 33476, 33997, 34220, 34787, 33984, 33589, 34763, 35614, 36213, 34418, 35354, 34136, 33604, 34368, 34476, 34379, 35158, 34498, 33463, 34924, 34277, 34229, 35169, 35679, 35425, 35158, 34533, 35414, 34403, 34646, 34970, 34112, 34635, 34561, 34359, 35645, 34264, 35745, 35052, 35376, 33639, 35054, 34613, 36027, 35156, 34444, 34520, 34776, 33743, 34266, 35195, 34637, 35428, 34253, 34529, 34846, 34891, 34496, 34893, 36422, 35529, 34950, 34650, 34741, 35412, 34668, 34276 ],
        "3" : [ 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 52331, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 52331, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 52331, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 52331, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 57565, 57565, 52331, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 52331, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226647137,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 93922,
        "IOBytes" : {
          "Total" : 60551172172,
          "Details" : {
            "IR" : 1089156142,
            "IW" : 0,
            "SR" : 39699279461,
            "SW" : 19762736569
          }
        }
      }
    },
    "9" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -902541249,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 461440,
            "rowCount" : 7000,
            "isRuntime" : true,
            "predicate" : " (unknown) Sort Arguments: [nation#64 ASC NULLS FIRST, o_year#65 DESC NULLS LAST], true "
          },
          "1" : {
            "sign" : -150876616,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 461440,
            "rowCount" : 7000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [nation#64, o_year#65], [nation#64, o_year#65, sum(amount#66) AS sum_profit#67], HashAggregate(keys=[nation#64, o_year#65], functions=[sum(amount#66)]) "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "LogicalQueryStage",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [nation#64 ASC NULLS FIRST, o_year#65 DESC NULLS LAST], true\n+- LogicalQueryStage Aggregate [nation#64, o_year#65], [nation#64, o_year#65, sum(amount#66) AS sum_profit#67], HashAggregate(keys=[nation#64, o_year#65], functions=[sum(amount#66)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 461440,
        "inputRowCount" : 7000
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226740463,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 596,
        "IOBytes" : {
          "Total" : 1190994,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1173711,
            "SW" : 17283
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -1953889982,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_suppkey#13L, s_nationkey#16L], ShuffleQueryStage 3 "
          },
          "8" : {
            "sign" : -327139219,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 34008647488908872,
            "rowCount" : 654012451709786,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49] "
          },
          "4" : {
            "sign" : 1347233483,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1177222413077614800000000,
            "rowCount" : 16350311292744650000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, n_name#51] "
          },
          "11" : {
            "sign" : -15030167,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 17399408,
            "rowCount" : 1087463,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_partkey#4L], ShuffleQueryStage 2 "
          },
          "9" : {
            "sign" : 1344725189,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 39240747102587160,
            "rowCount" : 654012451709786,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (p_partkey#4L = l_partkey#21L) "
          },
          "13" : {
            "sign" : -151942205,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048776,
            "rowCount" : 25,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#50L, n_name#51], BroadcastQueryStage 4 "
          },
          "5" : {
            "sign" : -1643734276,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1438827393761529200000000,
            "rowCount" : 16350311292744650000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#16L = n_nationkey#50L) "
          },
          "10" : {
            "sign" : -223876024,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 31273383544,
            "rowCount" : 601411222,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49], ShuffleQueryStage 6 "
          },
          "6" : {
            "sign" : 21474581,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 39240747102587160000000,
            "rowCount" : 654012451709786000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, s_nationkey#16L] "
          },
          "1" : {
            "sign" : 1790609164,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 62785195364139456000000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [nation#64, o_year#65], [nation#64, o_year#65, sum(amount#66) AS sum_profit#67] "
          },
          "14" : {
            "sign" : -1826504625,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ps_partkey#36L, ps_suppkey#37L, ps_supplycost#39], ShuffleQueryStage 5 "
          },
          "0" : {
            "sign" : 501012941,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 62785195364139456000000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [nation#64 ASC NULLS FIRST, o_year#65 DESC NULLS LAST], true "
          },
          "2" : {
            "sign" : -58722658,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 62785195364139456000000000000000,
            "rowCount" : 1308024903419572000000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_name#51 AS nation#64, year(o_orderdate#49) AS o_year#65, ((l_extendedprice#25 * (1 - l_discount#26)) - (ps_supplycost#39 * l_quantity#24)) AS amount#66] "
          },
          "7" : {
            "sign" : -1871594429,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 44472846716265448000000,
            "rowCount" : 654012451709786000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#13L = l_suppkey#22L) "
          },
          "3" : {
            "sign" : -1461094795,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 125570390728278912000000000000000,
            "rowCount" : 1308024903419572000000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ps_suppkey#37L = l_suppkey#22L) AND (ps_partkey#36L = l_partkey#21L)) "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [nation#64 ASC NULLS FIRST, o_year#65 DESC NULLS LAST], true\n+- Aggregate [nation#64, o_year#65], [nation#64, o_year#65, sum(amount#66) AS sum_profit#67]\n   +- Project [n_name#51 AS nation#64, year(o_orderdate#49) AS o_year#65, ((l_extendedprice#25 * (1 - l_discount#26)) - (ps_supplycost#39 * l_quantity#24)) AS amount#66]\n      +- Join Inner, ((ps_suppkey#37L = l_suppkey#22L) AND (ps_partkey#36L = l_partkey#21L))\n         :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, n_name#51]\n         :  +- Join Inner, (s_nationkey#16L = n_nationkey#50L)\n         :     :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, s_nationkey#16L]\n         :     :  +- Join Inner, (s_suppkey#13L = l_suppkey#22L)\n         :     :     :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49]\n         :     :     :  +- Join Inner, (p_partkey#4L = l_partkey#21L)\n         :     :     :     :- LogicalQueryStage Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49], ShuffleQueryStage 6\n         :     :     :     +- LogicalQueryStage Project [p_partkey#4L], ShuffleQueryStage 2\n         :     :     +- LogicalQueryStage Project [s_suppkey#13L, s_nationkey#16L], ShuffleQueryStage 3\n         :     +- LogicalQueryStage Project [n_nationkey#50L, n_name#51], BroadcastQueryStage 4\n         +- LogicalQueryStage Project [ps_partkey#36L, ps_suppkey#37L, ps_supplycost#39], ShuffleQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 33875831728,
        "inputRowCount" : 683498710
      },
      "PD" : {
        "2" : [ 34114, 34138, 34392, 35041, 34635, 34774, 33708, 35030, 34646, 37031, 34531, 34394, 34251, 35043, 35747, 35158, 34976, 34240, 34416, 34335, 34416, 35398, 35145, 34785, 34368, 34544, 33754, 34509, 34939, 35041, 34648, 34785, 33745, 34288, 34809, 34392, 33752, 34277, 35352, 35853, 33615, 34529, 34008, 34500, 34321, 34101, 35122, 34636, 34608, 36251, 34937, 35019, 35169, 35173, 34913, 34681, 35551, 35330, 34774, 34776, 34251, 33094, 34381, 34090, 34824, 34136, 34904, 34392, 34299, 34785, 34112, 34785, 34774, 33778, 34008, 33904, 33860, 33823, 34917, 36418, 35147, 35067, 36085, 35191, 35098, 34370, 34915, 34253, 34065, 33719, 35447, 35067, 34659, 35285, 34891, 34474, 34624, 34496, 34266, 35319, 34240, 34251, 34787, 34915, 34657, 35835, 34251, 35732, 34509, 35123, 34913, 34763, 33591, 34496, 34253, 34520, 33986, 34544, 34242, 34379, 34868, 34820, 34557, 35067, 34820, 34659, 34778, 35489, 34867, 35842, 33500, 35006, 34939, 33476, 33997, 34220, 34787, 33984, 33589, 34763, 35614, 36213, 34418, 35354, 34136, 33604, 34368, 34476, 34379, 35158, 34498, 33463, 34924, 34277, 34229, 35169, 35679, 35425, 35158, 34533, 35414, 34403, 34646, 34970, 34112, 34635, 34561, 34359, 35645, 34264, 35745, 35052, 35376, 33639, 35054, 34613, 36027, 35156, 34444, 34520, 34776, 33743, 34266, 35195, 34637, 35428, 34253, 34529, 34846, 34891, 34496, 34893, 36422, 35529, 34950, 34650, 34741, 35412, 34668, 34276 ],
        "4" : [ 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7555897, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237 ],
        "3" : [ 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 52331, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 52331, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 52331, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 52331, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 57565, 57565, 52331, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 52331, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226650257,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 90802,
        "IOBytes" : {
          "Total" : 58025071886,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 39699279461,
            "SW" : 18325792425
          }
        }
      }
    },
    "10" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -1063029394,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 10136,
            "rowCount" : 175,
            "isRuntime" : true,
            "predicate" : " (unknown) Sort Arguments: [nation#64 ASC NULLS FIRST, o_year#65 DESC NULLS LAST], true "
          },
          "1" : {
            "sign" : -1505045593,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 10136,
            "rowCount" : 175,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [nation#64, o_year#65], [nation#64, o_year#65, sum(amount#66) AS sum_profit#67], ShuffleQueryStage 10 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "LogicalQueryStage",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [nation#64 ASC NULLS FIRST, o_year#65 DESC NULLS LAST], true\n+- LogicalQueryStage Aggregate [nation#64, o_year#65], [nation#64, o_year#65, sum(amount#66) AS sum_profit#67], ShuffleQueryStage 10\n"
      },
      "IM" : {
        "inputSizeInBytes" : 10136,
        "inputRowCount" : 175
      },
      "PD" : {
        "9" : [ 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 106, 106, 106, 106, 106, 106, 106, 97, 97, 97, 97, 97, 97, 97, 106, 106, 106, 106, 106, 106, 106, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 97, 97, 97, 97, 97, 97, 97, 106, 106, 106, 106, 106, 106, 106, 97, 97, 97, 97, 97, 97, 97, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226740861,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 198,
        "IOBytes" : {
          "Total" : 17283,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 17283,
            "SW" : 0
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -1953889982,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_suppkey#13L, s_nationkey#16L], ShuffleQueryStage 3 "
          },
          "8" : {
            "sign" : -327139219,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 33930988885176552,
            "rowCount" : 652519017022626,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49] "
          },
          "4" : {
            "sign" : 1347233483,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1174534230640726800000000,
            "rowCount" : 16312975425565650000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, n_name#51] "
          },
          "11" : {
            "sign" : -15030167,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 17399408,
            "rowCount" : 1087463,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_partkey#4L], ShuffleQueryStage 2 "
          },
          "9" : {
            "sign" : 1344725189,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 39151141021357560,
            "rowCount" : 652519017022626,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (p_partkey#4L = l_partkey#21L) "
          },
          "13" : {
            "sign" : -151942205,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048776,
            "rowCount" : 25,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#50L, n_name#51], BroadcastQueryStage 4 "
          },
          "5" : {
            "sign" : -1643734276,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1435541837449777200000000,
            "rowCount" : 16312975425565650000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#16L = n_nationkey#50L) "
          },
          "10" : {
            "sign" : -223876024,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 33602122512,
            "rowCount" : 600037902,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49], ShuffleQueryStage 6 "
          },
          "6" : {
            "sign" : 21474581,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 39151141021357560000000,
            "rowCount" : 652519017022626000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, s_nationkey#16L] "
          },
          "1" : {
            "sign" : 1790609164,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 62641825634172096000000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [nation#64, o_year#65], [nation#64, o_year#65, sum(amount#66) AS sum_profit#67] "
          },
          "14" : {
            "sign" : -1826504625,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ps_partkey#36L, ps_suppkey#37L, ps_supplycost#39], ShuffleQueryStage 5 "
          },
          "0" : {
            "sign" : 501012941,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 62641825634172096000000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [nation#64 ASC NULLS FIRST, o_year#65 DESC NULLS LAST], true "
          },
          "2" : {
            "sign" : -58722658,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 62641825634172096000000000000000,
            "rowCount" : 1305038034045252000000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_name#51 AS nation#64, year(o_orderdate#49) AS o_year#65, ((l_extendedprice#25 * (1 - l_discount#26)) - (ps_supplycost#39 * l_quantity#24)) AS amount#66] "
          },
          "7" : {
            "sign" : -1871594429,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 44371293157538568000000,
            "rowCount" : 652519017022626000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#13L = l_suppkey#22L) "
          },
          "3" : {
            "sign" : -1461094795,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 125283651268344192000000000000000,
            "rowCount" : 1305038034045252000000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ps_suppkey#37L = l_suppkey#22L) AND (ps_partkey#36L = l_partkey#21L)) "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [nation#64 ASC NULLS FIRST, o_year#65 DESC NULLS LAST], true\n+- Aggregate [nation#64, o_year#65], [nation#64, o_year#65, sum(amount#66) AS sum_profit#67]\n   +- Project [n_name#51 AS nation#64, year(o_orderdate#49) AS o_year#65, ((l_extendedprice#25 * (1 - l_discount#26)) - (ps_supplycost#39 * l_quantity#24)) AS amount#66]\n      +- Join Inner, ((ps_suppkey#37L = l_suppkey#22L) AND (ps_partkey#36L = l_partkey#21L))\n         :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, n_name#51]\n         :  +- Join Inner, (s_nationkey#16L = n_nationkey#50L)\n         :     :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, s_nationkey#16L]\n         :     :  +- Join Inner, (s_suppkey#13L = l_suppkey#22L)\n         :     :     :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49]\n         :     :     :  +- Join Inner, (p_partkey#4L = l_partkey#21L)\n         :     :     :     :- LogicalQueryStage Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49], ShuffleQueryStage 6\n         :     :     :     +- LogicalQueryStage Project [p_partkey#4L], ShuffleQueryStage 2\n         :     :     +- LogicalQueryStage Project [s_suppkey#13L, s_nationkey#16L], ShuffleQueryStage 3\n         :     +- LogicalQueryStage Project [n_nationkey#50L, n_name#51], BroadcastQueryStage 4\n         +- LogicalQueryStage Project [ps_partkey#36L, ps_suppkey#37L, ps_supplycost#39], ShuffleQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 36204570696,
        "inputRowCount" : 682125390
      },
      "PD" : {
        "2" : [ 34114, 34138, 34392, 35041, 34635, 34774, 33708, 35030, 34646, 37031, 34531, 34394, 34251, 35043, 35747, 35158, 34976, 34240, 34416, 34335, 34416, 35398, 35145, 34785, 34368, 34544, 33754, 34509, 34939, 35041, 34648, 34785, 33745, 34288, 34809, 34392, 33752, 34277, 35352, 35853, 33615, 34529, 34008, 34500, 34321, 34101, 35122, 34636, 34608, 36251, 34937, 35019, 35169, 35173, 34913, 34681, 35551, 35330, 34774, 34776, 34251, 33094, 34381, 34090, 34824, 34136, 34904, 34392, 34299, 34785, 34112, 34785, 34774, 33778, 34008, 33904, 33860, 33823, 34917, 36418, 35147, 35067, 36085, 35191, 35098, 34370, 34915, 34253, 34065, 33719, 35447, 35067, 34659, 35285, 34891, 34474, 34624, 34496, 34266, 35319, 34240, 34251, 34787, 34915, 34657, 35835, 34251, 35732, 34509, 35123, 34913, 34763, 33591, 34496, 34253, 34520, 33986, 34544, 34242, 34379, 34868, 34820, 34557, 35067, 34820, 34659, 34778, 35489, 34867, 35842, 33500, 35006, 34939, 33476, 33997, 34220, 34787, 33984, 33589, 34763, 35614, 36213, 34418, 35354, 34136, 33604, 34368, 34476, 34379, 35158, 34498, 33463, 34924, 34277, 34229, 35169, 35679, 35425, 35158, 34533, 35414, 34403, 34646, 34970, 34112, 34635, 34561, 34359, 35645, 34264, 35745, 35052, 35376, 33639, 35054, 34613, 36027, 35156, 34444, 34520, 34776, 33743, 34266, 35195, 34637, 35428, 34253, 34529, 34846, 34891, 34496, 34893, 36422, 35529, 34950, 34650, 34741, 35412, 34668, 34276 ],
        "5" : [ 85625000, 86221400, 87925400, 86903000, 87499400, 86051000, 86051000, 88138400, 86903000, 87669800, 86690000, 86604800, 87030800, 86477000, 86604800, 86178800, 86562200, 86562200, 87371600, 87073400, 85838000, 87371600, 89331200, 88521800, 86434400, 86860400, 86690000, 85582400, 86477000, 86306600, 86519600, 87414200, 86136200, 86349200, 86775200, 87712400, 86178800, 86562200, 86178800, 87712400, 86647400, 86690000, 86945600, 86306600, 85838000, 86391800, 86732600, 88649600, 85880600, 87584600, 85880600, 88394000, 86732600, 88521800, 86391800, 86264000, 86988200, 85838000, 89757200, 87030800, 85880600, 87286400, 86178800, 86690000, 86008400, 86647400, 86008400, 87116000, 86221400, 86562200, 86008400, 88905200, 86391800, 85838000, 86945600, 87797600, 86519600, 88734800, 87030800, 86221400, 86562200, 85923200, 86903000, 86349200, 87201200, 86434400, 85880600, 86008400, 85412000, 85582400, 86604800, 86562200, 89331200, 86860400, 86775200, 85923200, 87243800, 86264000, 85795400, 85923200, 88181000, 86051000, 88436600, 86306600, 88692200, 88053200, 85880600, 87158600, 86860400, 87840200, 86349200, 86647400, 86690000, 88095800, 86221400, 87243800, 85923200, 86562200, 88734800, 86604800, 87073400, 85838000, 85923200, 87201200, 86306600, 88181000, 87329000, 85795400, 86945600, 86136200, 86136200, 86817800, 85923200, 85710200, 88010600, 86306600, 87669800, 85838000, 87030800, 88564400, 86860400, 87201200, 85838000, 85625000, 87030800, 85795400, 87073400, 87627200, 86860400, 87286400, 86178800, 87456800, 85752800, 86604800, 87968000, 86690000, 86562200, 86008400, 86860400, 86306600, 87329000, 86349200, 87371600, 85880600, 87669800, 85752800, 87243800, 86093600, 86093600, 87073400, 88436600, 87371600, 87073400, 86817800, 87584600, 86988200, 86690000, 86477000, 86647400, 86519600, 85412000, 86051000, 85710200, 87329000, 85838000, 90353600, 86477000, 87797600, 88649600, 87073400, 86519600, 87968000, 86562200, 88607000, 85880600, 86051000, 86860400, 86860400, 86519600, 86732600 ],
        "4" : [ 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7555897, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237 ],
        "3" : [ 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 52331, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 52331, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 52331, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 52331, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 57565, 57565, 52331, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 52331, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226709873,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 31186,
        "IOBytes" : {
          "Total" : 21194948867,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 19780550700,
            "SW" : 1414398167
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -167727909,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 33602122512,
            "rowCount" : 600037902,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26], ShuffleQueryStage 0 "
          },
          "8" : {
            "sign" : 1181071108,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 93605912712000000000000000,
            "rowCount" : 1800113706000000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49] "
          },
          "4" : {
            "sign" : -1985086058,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3240204670800000000000000000000000,
            "rowCount" : 45002842650000000000000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, n_name#51] "
          },
          "15" : {
            "sign" : -1953889982,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_suppkey#13L, s_nationkey#16L], ShuffleQueryStage 3 "
          },
          "11" : {
            "sign" : -2113415597,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 6120386600400000000,
            "rowCount" : 90005685300000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (o_orderkey#41L = l_orderkey#20L) "
          },
          "9" : {
            "sign" : 1434594926,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 108006822360000000000000000,
            "rowCount" : 1800113706000000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (p_partkey#4L = l_partkey#21L) "
          },
          "13" : {
            "sign" : 228703627,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3000000000,
            "rowCount" : 150000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [o_orderkey#41L, o_orderdate#49], ShuffleQueryStage 1 "
          },
          "16" : {
            "sign" : -151942205,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048776,
            "rowCount" : 25,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#50L, n_name#51], BroadcastQueryStage 4 "
          },
          "5" : {
            "sign" : -20858271,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3960250153200000000000000000000000,
            "rowCount" : 45002842650000000000000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#16L = n_nationkey#50L) "
          },
          "10" : {
            "sign" : -1040911739,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4680295635600000000,
            "rowCount" : 90005685300000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49] "
          },
          "6" : {
            "sign" : 381388678,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 108006822360000000000000000000000,
            "rowCount" : 1800113706000000000000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, s_nationkey#16L] "
          },
          "1" : {
            "sign" : -46613469,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 172810915776000000000000000000000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [nation#64, o_year#65], [nation#64, o_year#65, sum(amount#66) AS sum_profit#67] "
          },
          "17" : {
            "sign" : -1826504625,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ps_partkey#36L, ps_suppkey#37L, ps_supplycost#39], ShuffleQueryStage 5 "
          },
          "14" : {
            "sign" : -15030167,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 320000000,
            "rowCount" : 20000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_partkey#4L], ShuffleQueryStage 2 "
          },
          "0" : {
            "sign" : 564215858,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 172810915776000000000000000000000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [nation#64 ASC NULLS FIRST, o_year#65 DESC NULLS LAST], true "
          },
          "2" : {
            "sign" : -1489736125,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 172810915776000000000000000000000000000000,
            "rowCount" : 3600227412000000000000000000000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_name#51 AS nation#64, year(o_orderdate#49) AS o_year#65, ((l_extendedprice#25 * (1 - l_discount#26)) - (ps_supplycost#39 * l_quantity#24)) AS amount#66] "
          },
          "7" : {
            "sign" : -1680305060,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 122407732008000000000000000000000,
            "rowCount" : 1800113706000000000000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#13L = l_suppkey#22L) "
          },
          "3" : {
            "sign" : 1316447386,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 345621831552000000000000000000000000000000,
            "rowCount" : 3600227412000000000000000000000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ps_suppkey#37L = l_suppkey#22L) AND (ps_partkey#36L = l_partkey#21L)) "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [nation#64 ASC NULLS FIRST, o_year#65 DESC NULLS LAST], true\n+- Aggregate [nation#64, o_year#65], [nation#64, o_year#65, sum(amount#66) AS sum_profit#67]\n   +- Project [n_name#51 AS nation#64, year(o_orderdate#49) AS o_year#65, ((l_extendedprice#25 * (1 - l_discount#26)) - (ps_supplycost#39 * l_quantity#24)) AS amount#66]\n      +- Join Inner, ((ps_suppkey#37L = l_suppkey#22L) AND (ps_partkey#36L = l_partkey#21L))\n         :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, n_name#51]\n         :  +- Join Inner, (s_nationkey#16L = n_nationkey#50L)\n         :     :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, s_nationkey#16L]\n         :     :  +- Join Inner, (s_suppkey#13L = l_suppkey#22L)\n         :     :     :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49]\n         :     :     :  +- Join Inner, (p_partkey#4L = l_partkey#21L)\n         :     :     :     :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49]\n         :     :     :     :  +- Join Inner, (o_orderkey#41L = l_orderkey#20L)\n         :     :     :     :     :- LogicalQueryStage Project [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26], ShuffleQueryStage 0\n         :     :     :     :     +- LogicalQueryStage Project [o_orderkey#41L, o_orderdate#49], ShuffleQueryStage 1\n         :     :     :     +- LogicalQueryStage Project [p_partkey#4L], ShuffleQueryStage 2\n         :     :     +- LogicalQueryStage Project [s_suppkey#13L, s_nationkey#16L], ShuffleQueryStage 3\n         :     +- LogicalQueryStage Project [n_nationkey#50L, n_name#51], BroadcastQueryStage 4\n         +- LogicalQueryStage Project [ps_partkey#36L, ps_suppkey#37L, ps_supplycost#39], ShuffleQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 39507171288,
        "inputRowCount" : 851037927
      },
      "PD" : {
        "0" : [ 97985923, 98006309, 97763681, 98428781, 97305582, 98167078, 97482033, 98041654, 98564510, 98499332, 98361890, 97830572, 97270643, 97860251, 97478512, 98627214, 96880010, 97904351, 97700784, 98049816, 98291941, 98619631, 98330344, 98404874, 97849868, 98009969, 98362183, 98656904, 97974763, 98119297, 97834093, 97974917, 98757878, 98147270, 98076721, 97936546, 98112066, 98190471, 97443013, 97689455, 97281957, 98714413, 98041654, 97935897, 97798733, 98749619, 98816047, 98307902, 97825045, 98840900, 98361890, 98573265, 97765849, 98150793, 97865485, 97552291, 98155434, 97921354, 98012787, 98253214, 97935769, 98478807, 99136294, 97417901, 97446673, 97869145, 99136422, 98749449, 97446673, 97763145, 97126159, 98080381, 98151117, 98749295, 97493193, 98784825, 98643190, 97693115, 98925325, 98397559, 98472288, 97974917, 97807316, 97982556, 97771027, 98432302, 98467380, 97620382, 98012558, 98534538, 98076860, 98432765, 97517409, 98272835, 98147005, 97809893, 98096805, 99136422, 97194816, 97411467, 98756964, 98151117, 97798594, 97569422, 97900563, 98352552, 98432765, 98049020, 98016403, 97798733, 97989598, 97991511, 98229495, 97834093, 97795073, 98538213, 97689748, 98619785, 97904675, 98076721, 97915511, 97663752, 97795073, 97384844, 97658063, 97971242, 98084262, 98816186, 97552291, 97865242, 98714413, 97094474, 98217417, 98502853, 97625153, 97684093, 98045175, 99030943, 98006602, 97657909, 98619785, 97906617, 98288250, 98220823, 97513564, 98186323, 97982263, 97243599, 98185999, 97552152, 97372740, 98069392, 97533663, 97860544, 98499193, 97885723, 98608795, 97823910, 97939557, 97654388, 97165179, 98608332, 98701813, 97839782, 98112220, 97481740, 97947057, 98886598, 98217302, 98358369, 99171767, 98678744, 98713950, 98308195, 98886922, 97937236, 98010123, 98573589, 98749805, 98893218, 97865624, 98570068, 97871734, 97763527, 98237953, 99550602, 99103760, 98499486, 98494813, 99179139, 98068259, 97801322, 98153706, 98009830, 97975087, 98691940, 98569477, 97935897, 98361542, 97930802 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226639958,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 101101,
        "IOBytes" : {
          "Total" : 62987333890,
          "Details" : {
            "IR" : 2375653053,
            "IW" : 0,
            "SR" : 39699279461,
            "SW" : 20912401376
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -167727909,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 33602122512,
            "rowCount" : 600037902,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26], ShuffleQueryStage 0 "
          },
          "8" : {
            "sign" : 1181071108,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 93605912712000000000000000,
            "rowCount" : 1800113706000000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49] "
          },
          "4" : {
            "sign" : -1985086058,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3240204670800000000000000000000000,
            "rowCount" : 45002842650000000000000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, n_name#51] "
          },
          "15" : {
            "sign" : -1953889982,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_suppkey#13L, s_nationkey#16L], ShuffleQueryStage 3 "
          },
          "11" : {
            "sign" : -2113415597,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 6120386600400000000,
            "rowCount" : 90005685300000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (o_orderkey#41L = l_orderkey#20L) "
          },
          "9" : {
            "sign" : 1434594926,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 108006822360000000000000000,
            "rowCount" : 1800113706000000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (p_partkey#4L = l_partkey#21L) "
          },
          "13" : {
            "sign" : 228703627,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3600000000,
            "rowCount" : 150000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [o_orderkey#41L, o_orderdate#49], ShuffleQueryStage 1 "
          },
          "16" : {
            "sign" : -151942205,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048776,
            "rowCount" : 25,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#50L, n_name#51], BroadcastQueryStage 4 "
          },
          "5" : {
            "sign" : -20858271,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3960250153200000000000000000000000,
            "rowCount" : 45002842650000000000000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#16L = n_nationkey#50L) "
          },
          "10" : {
            "sign" : -1040911739,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4680295635600000000,
            "rowCount" : 90005685300000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49] "
          },
          "6" : {
            "sign" : 381388678,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 108006822360000000000000000000000,
            "rowCount" : 1800113706000000000000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, s_nationkey#16L] "
          },
          "1" : {
            "sign" : -46613469,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 172810915776000000000000000000000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [nation#64, o_year#65], [nation#64, o_year#65, sum(amount#66) AS sum_profit#67] "
          },
          "17" : {
            "sign" : -1826504625,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ps_partkey#36L, ps_suppkey#37L, ps_supplycost#39], ShuffleQueryStage 5 "
          },
          "14" : {
            "sign" : -15030167,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 320000000,
            "rowCount" : 20000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_partkey#4L], ShuffleQueryStage 2 "
          },
          "0" : {
            "sign" : 564215858,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 172810915776000000000000000000000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [nation#64 ASC NULLS FIRST, o_year#65 DESC NULLS LAST], true "
          },
          "2" : {
            "sign" : -1489736125,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 172810915776000000000000000000000000000000,
            "rowCount" : 3600227412000000000000000000000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_name#51 AS nation#64, year(o_orderdate#49) AS o_year#65, ((l_extendedprice#25 * (1 - l_discount#26)) - (ps_supplycost#39 * l_quantity#24)) AS amount#66] "
          },
          "7" : {
            "sign" : -1680305060,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 122407732008000000000000000000000,
            "rowCount" : 1800113706000000000000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#13L = l_suppkey#22L) "
          },
          "3" : {
            "sign" : 1316447386,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 345621831552000000000000000000000000000000,
            "rowCount" : 3600227412000000000000000000000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ps_suppkey#37L = l_suppkey#22L) AND (ps_partkey#36L = l_partkey#21L)) "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [nation#64 ASC NULLS FIRST, o_year#65 DESC NULLS LAST], true\n+- Aggregate [nation#64, o_year#65], [nation#64, o_year#65, sum(amount#66) AS sum_profit#67]\n   +- Project [n_name#51 AS nation#64, year(o_orderdate#49) AS o_year#65, ((l_extendedprice#25 * (1 - l_discount#26)) - (ps_supplycost#39 * l_quantity#24)) AS amount#66]\n      +- Join Inner, ((ps_suppkey#37L = l_suppkey#22L) AND (ps_partkey#36L = l_partkey#21L))\n         :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, n_name#51]\n         :  +- Join Inner, (s_nationkey#16L = n_nationkey#50L)\n         :     :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, s_nationkey#16L]\n         :     :  +- Join Inner, (s_suppkey#13L = l_suppkey#22L)\n         :     :     :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49]\n         :     :     :  +- Join Inner, (p_partkey#4L = l_partkey#21L)\n         :     :     :     :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49]\n         :     :     :     :  +- Join Inner, (o_orderkey#41L = l_orderkey#20L)\n         :     :     :     :     :- LogicalQueryStage Project [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26], ShuffleQueryStage 0\n         :     :     :     :     +- LogicalQueryStage Project [o_orderkey#41L, o_orderdate#49], ShuffleQueryStage 1\n         :     :     :     +- LogicalQueryStage Project [p_partkey#4L], ShuffleQueryStage 2\n         :     :     +- LogicalQueryStage Project [s_suppkey#13L, s_nationkey#16L], ShuffleQueryStage 3\n         :     +- LogicalQueryStage Project [n_nationkey#50L, n_name#51], BroadcastQueryStage 4\n         +- LogicalQueryStage Project [ps_partkey#36L, ps_suppkey#37L, ps_supplycost#39], ShuffleQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 40107171288,
        "inputRowCount" : 851037927
      },
      "PD" : {
        "1" : [ 5862369, 5852855, 5862369, 5895668, 5819556, 5881397, 5881397, 5843341, 5876640, 5857612, 5862369, 5852855, 5838584, 5848098, 5867126, 5886154, 5871883, 5862369, 5867558, 5881397, 5881829, 5867126, 5876640, 5876640, 5900425, 5881397, 5895668, 5843341, 5852855, 5867126, 5852855, 5867126, 5848098, 5848098, 5876640, 5890911, 5890911, 5876640, 5857612, 5833827, 5881397, 5867126, 5857612, 5886154, 5862369, 5838584, 5900857, 5895668, 5876640, 5890911, 5862369, 5867126, 5867126, 5852855, 5857612, 5853287, 5881397, 5895668, 5867126, 5862369, 5867126, 5886154, 5905182, 5862369, 5862369, 5877072, 5867126, 5886154, 5871883, 5886154, 5857612, 5858044, 5876640, 5838584, 5843341, 5871883, 5895668, 5871883, 5886586, 5886154, 5905182, 5881397, 5843341, 5857612, 5838584, 5852855, 5871883, 5824313, 5852855, 5881397, 5843341, 5852855, 5857612, 5838584, 5876640, 5848098, 5852855, 5843341, 5867126, 5858044, 5871883, 5857612, 5852855, 5848098, 5848098, 5871883, 5857612, 5871883, 5881397, 5867126, 5843341, 5838584, 5867126, 5857612, 5867558, 5862369, 5857612, 5871883, 5852855, 5852855, 5867126, 5867126, 5871883, 5838584, 5857612, 5876640, 5900425, 5895668, 5843341, 5876640, 5886154, 5852855, 5886154, 5890911, 5867126, 5848098, 5867126, 5890911, 5857612, 5867126, 5871883, 5871883, 5862369, 5876640, 5871883, 5881397, 5858044, 5848098, 5862369, 5852855, 5838584, 5886154, 5833827, 5895668, 5886154, 5867126, 5900425, 5852855, 5867126, 5867126, 5876640, 5852855, 5862369, 5853287, 5867126, 5819556, 5895668, 5881397, 5871883, 5890911, 5881397, 5848098, 5871883, 5876640, 5876640, 5871883, 5857612, 5871883, 5871883, 5886154, 5862369, 5867126, 5852855, 5843341, 5895668, 5867126, 5852855, 5857612, 5881397, 5914696, 5867126, 5838584, 5886154, 5843341, 5890911, 5881397, 5857612, 5871883, 5848098, 5871883 ],
        "0" : [ 97985923, 98006309, 97763681, 98428781, 97305582, 98167078, 97482033, 98041654, 98564510, 98499332, 98361890, 97830572, 97270643, 97860251, 97478512, 98627214, 96880010, 97904351, 97700784, 98049816, 98291941, 98619631, 98330344, 98404874, 97849868, 98009969, 98362183, 98656904, 97974763, 98119297, 97834093, 97974917, 98757878, 98147270, 98076721, 97936546, 98112066, 98190471, 97443013, 97689455, 97281957, 98714413, 98041654, 97935897, 97798733, 98749619, 98816047, 98307902, 97825045, 98840900, 98361890, 98573265, 97765849, 98150793, 97865485, 97552291, 98155434, 97921354, 98012787, 98253214, 97935769, 98478807, 99136294, 97417901, 97446673, 97869145, 99136422, 98749449, 97446673, 97763145, 97126159, 98080381, 98151117, 98749295, 97493193, 98784825, 98643190, 97693115, 98925325, 98397559, 98472288, 97974917, 97807316, 97982556, 97771027, 98432302, 98467380, 97620382, 98012558, 98534538, 98076860, 98432765, 97517409, 98272835, 98147005, 97809893, 98096805, 99136422, 97194816, 97411467, 98756964, 98151117, 97798594, 97569422, 97900563, 98352552, 98432765, 98049020, 98016403, 97798733, 97989598, 97991511, 98229495, 97834093, 97795073, 98538213, 97689748, 98619785, 97904675, 98076721, 97915511, 97663752, 97795073, 97384844, 97658063, 97971242, 98084262, 98816186, 97552291, 97865242, 98714413, 97094474, 98217417, 98502853, 97625153, 97684093, 98045175, 99030943, 98006602, 97657909, 98619785, 97906617, 98288250, 98220823, 97513564, 98186323, 97982263, 97243599, 98185999, 97552152, 97372740, 98069392, 97533663, 97860544, 98499193, 97885723, 98608795, 97823910, 97939557, 97654388, 97165179, 98608332, 98701813, 97839782, 98112220, 97481740, 97947057, 98886598, 98217302, 98358369, 99171767, 98678744, 98713950, 98308195, 98886922, 97937236, 98010123, 98573589, 98749805, 98893218, 97865624, 98570068, 97871734, 97763527, 98237953, 99550602, 99103760, 98499486, 98494813, 99179139, 98068259, 97801322, 98153706, 98009830, 97975087, 98691940, 98569477, 97935897, 98361542, 97930802 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 39,
        "FinishedTasksTotalTimeInMs" : 9252.0,
        "FinishedTasksDistributionInMs" : [ 11.0, 48.0, 249.0, 366.0, 890.0 ]
      },
      "StartTimeInMs" : 1702226646668,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 94391,
        "IOBytes" : {
          "Total" : 60948068596,
          "Details" : {
            "IR" : 1468816649,
            "IW" : 0,
            "SR" : 39699279461,
            "SW" : 19779972486
          }
        }
      }
    },
    "7" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : -223875993,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1827386512,
            "rowCount" : 32631902,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49], ShuffleQueryStage 7 "
          },
          "4" : {
            "sign" : 1093720571,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 58737423600000000,
            "rowCount" : 815797550000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, n_name#51] "
          },
          "11" : {
            "sign" : -1826504625,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ps_partkey#36L, ps_suppkey#37L, ps_supplycost#39], ShuffleQueryStage 5 "
          },
          "9" : {
            "sign" : -1953889982,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_suppkey#13L, s_nationkey#16L], ShuffleQueryStage 3 "
          },
          "5" : {
            "sign" : -621947548,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 71790184400000000,
            "rowCount" : 815797550000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#16L = n_nationkey#50L) "
          },
          "10" : {
            "sign" : -151942205,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048776,
            "rowCount" : 25,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#50L, n_name#51], BroadcastQueryStage 4 "
          },
          "6" : {
            "sign" : 1323389261,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1957914120000000,
            "rowCount" : 32631902000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, s_nationkey#16L] "
          },
          "1" : {
            "sign" : -1769353538,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 3132662592000000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [nation#64, o_year#65], [nation#64, o_year#65, sum(amount#66) AS sum_profit#67] "
          },
          "0" : {
            "sign" : 2108763817,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 3132662592000000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [nation#64 ASC NULLS FIRST, o_year#65 DESC NULLS LAST], true "
          },
          "2" : {
            "sign" : 206469432,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3132662592000000000000000,
            "rowCount" : 65263804000000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_name#51 AS nation#64, year(o_orderdate#49) AS o_year#65, ((l_extendedprice#25 * (1 - l_discount#26)) - (ps_supplycost#39 * l_quantity#24)) AS amount#66] "
          },
          "7" : {
            "sign" : -334214783,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2218969336000000,
            "rowCount" : 32631902000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#13L = l_suppkey#22L) "
          },
          "3" : {
            "sign" : -188038169,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 6265325184000000000000000,
            "rowCount" : 65263804000000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ps_suppkey#37L = l_suppkey#22L) AND (ps_partkey#36L = l_partkey#21L)) "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [nation#64 ASC NULLS FIRST, o_year#65 DESC NULLS LAST], true\n+- Aggregate [nation#64, o_year#65], [nation#64, o_year#65, sum(amount#66) AS sum_profit#67]\n   +- Project [n_name#51 AS nation#64, year(o_orderdate#49) AS o_year#65, ((l_extendedprice#25 * (1 - l_discount#26)) - (ps_supplycost#39 * l_quantity#24)) AS amount#66]\n      +- Join Inner, ((ps_suppkey#37L = l_suppkey#22L) AND (ps_partkey#36L = l_partkey#21L))\n         :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, n_name#51]\n         :  +- Join Inner, (s_nationkey#16L = n_nationkey#50L)\n         :     :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, s_nationkey#16L]\n         :     :  +- Join Inner, (s_suppkey#13L = l_suppkey#22L)\n         :     :     :- LogicalQueryStage Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49], ShuffleQueryStage 7\n         :     :     +- LogicalQueryStage Project [s_suppkey#13L, s_nationkey#16L], ShuffleQueryStage 3\n         :     +- LogicalQueryStage Project [n_nationkey#50L, n_name#51], BroadcastQueryStage 4\n         +- LogicalQueryStage Project [ps_partkey#36L, ps_suppkey#37L, ps_supplycost#39], ShuffleQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 4412435288,
        "inputRowCount" : 113631927
      },
      "PD" : {
        "4" : [ 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7555897, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237 ],
        "3" : [ 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 52331, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 52331, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 52331, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 52331, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 57565, 57565, 52331, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 52331, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565 ],
        "6" : [ 3397791, 3455672, 3558721, 3520817, 3574479, 3583872, 3532497, 3574240, 3518312, 3513526, 3505384, 3506781, 3521983, 3467670, 3559224, 3535190, 3595683, 3492983, 3509198, 3658366, 3494664, 3499964, 3543373, 3470151, 3536810, 3528813, 3547705, 3563914, 3418710, 3530248, 3483216, 3464135, 3461755, 3515356, 3436101, 3515835, 3476568, 3442839, 3629080, 3455226, 3505498, 3537067, 3498908, 3463488, 3490506, 3418967, 3541223, 3446094, 3560290, 3594903, 3520866, 3518969, 3533961, 3554872, 3516659, 3580531, 3565739, 3570216, 3469322, 3436260, 3482338, 3474499, 3446066, 3498835, 3551026, 3640952, 3573232, 3404502, 3442487, 3520357, 3458674, 3475603, 3480811, 3499517, 3543441, 3495709, 3467752, 3525578, 3502441, 3479987, 3571634, 3394460, 3470225, 3480469, 3503226, 3553916, 3554978, 3537397, 3477166, 3494892, 3476866, 3477776, 3559501, 3607061, 3513463, 3531721, 3557936, 3530038, 3586276, 3506281, 3554668, 3611279, 3577831, 3513351, 3577240, 3498927, 3527999, 3473264, 3534500, 3608659, 3433947, 3472971, 3450152, 3513372, 3537572, 3599666, 3456757, 3503296, 3565856, 3468519, 3483733, 3496582, 3574528, 3509226, 3604222, 3485673, 3518044, 3559125, 3471897, 3472331, 3491988, 3620558, 3540906, 3570944, 3492108, 3510365, 3567150, 3426838, 3461906, 3494592, 3606888, 3605220, 3509174, 3516429, 3508771, 3524674, 3474128, 3592080, 3546356, 3495046, 3572164, 3462670, 3479870, 3394431, 3442576, 3498389, 3572588, 3444986, 3600211, 3524730, 3518355, 3437628, 3536890, 3478827, 3567088, 3527029, 3433085, 3557145, 3481880, 3421212, 3607278, 3448739, 3461122, 3473892, 3462747, 3512019, 3626172, 3598341, 3464213, 3558242, 3476571, 3524825, 3438192, 3432382, 3440578, 3532059, 3486980, 3516695, 3507600, 3482578, 3622302, 3467508, 3463141, 3601236, 3498471, 3399485, 3522895, 3568891, 3519594, 3494288 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226727966,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 13093,
        "IOBytes" : {
          "Total" : 3607124474,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 2862539832,
            "SW" : 744584642
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -1953889982,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_suppkey#13L, s_nationkey#16L], ShuffleQueryStage 3 "
          },
          "8" : {
            "sign" : -327139219,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 34008647488908872,
            "rowCount" : 654012451709786,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49] "
          },
          "4" : {
            "sign" : 1347233483,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1081098930600,
            "rowCount" : 15015262925,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, n_name#51] "
          },
          "11" : {
            "sign" : -15030167,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 17399408,
            "rowCount" : 1087463,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_partkey#4L], ShuffleQueryStage 2 "
          },
          "9" : {
            "sign" : 1344725189,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 39240747102587160,
            "rowCount" : 654012451709786,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (p_partkey#4L = l_partkey#21L) "
          },
          "13" : {
            "sign" : -151942205,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048776,
            "rowCount" : 25,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#50L, n_name#51], BroadcastQueryStage 4 "
          },
          "5" : {
            "sign" : -1643734276,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1321343137400,
            "rowCount" : 15015262925,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#16L = n_nationkey#50L) "
          },
          "10" : {
            "sign" : -223876024,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 31273383544,
            "rowCount" : 601411222,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49], ShuffleQueryStage 6 "
          },
          "6" : {
            "sign" : 21474581,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 36036631020,
            "rowCount" : 600610517,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, s_nationkey#16L] "
          },
          "1" : {
            "sign" : 1790609164,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 115333550736,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [nation#64, o_year#65], [nation#64, o_year#65, sum(amount#66) AS sum_profit#67] "
          },
          "14" : {
            "sign" : -1826504625,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ps_partkey#36L, ps_suppkey#37L, ps_supplycost#39], ShuffleQueryStage 5 "
          },
          "0" : {
            "sign" : 501012941,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 115333550736,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [nation#64 ASC NULLS FIRST, o_year#65 DESC NULLS LAST], true "
          },
          "2" : {
            "sign" : -58722658,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 115333550736,
            "rowCount" : 2402782307,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_name#51 AS nation#64, year(o_orderdate#49) AS o_year#65, ((l_extendedprice#25 * (1 - l_discount#26)) - (ps_supplycost#39 * l_quantity#24)) AS amount#66] "
          },
          "7" : {
            "sign" : -1871594429,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 40841515156,
            "rowCount" : 600610517,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#13L = l_suppkey#22L) "
          },
          "3" : {
            "sign" : -1461094795,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 230667101472,
            "rowCount" : 2402782307,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ps_suppkey#37L = l_suppkey#22L) AND (ps_partkey#36L = l_partkey#21L)) "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [nation#64 ASC NULLS FIRST, o_year#65 DESC NULLS LAST], true\n+- Aggregate [nation#64, o_year#65], [nation#64, o_year#65, sum(amount#66) AS sum_profit#67]\n   +- Project [n_name#51 AS nation#64, year(o_orderdate#49) AS o_year#65, ((l_extendedprice#25 * (1 - l_discount#26)) - (ps_supplycost#39 * l_quantity#24)) AS amount#66]\n      +- Join Inner, ((ps_suppkey#37L = l_suppkey#22L) AND (ps_partkey#36L = l_partkey#21L))\n         :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, n_name#51]\n         :  +- Join Inner, (s_nationkey#16L = n_nationkey#50L)\n         :     :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, s_nationkey#16L]\n         :     :  +- Join Inner, (s_suppkey#13L = l_suppkey#22L)\n         :     :     :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49]\n         :     :     :  +- Join Inner, (p_partkey#4L = l_partkey#21L)\n         :     :     :     :- LogicalQueryStage Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49], ShuffleQueryStage 6\n         :     :     :     +- LogicalQueryStage Project [p_partkey#4L], ShuffleQueryStage 2\n         :     :     +- LogicalQueryStage Project [s_suppkey#13L, s_nationkey#16L], ShuffleQueryStage 3\n         :     +- LogicalQueryStage Project [n_nationkey#50L, n_name#51], BroadcastQueryStage 4\n         +- LogicalQueryStage Project [ps_partkey#36L, ps_suppkey#37L, ps_supplycost#39], ShuffleQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 33875831728,
        "inputRowCount" : 683498710
      },
      "PD" : {
        "2" : [ 34114, 34138, 34392, 35041, 34635, 34774, 33708, 35030, 34646, 37031, 34531, 34394, 34251, 35043, 35747, 35158, 34976, 34240, 34416, 34335, 34416, 35398, 35145, 34785, 34368, 34544, 33754, 34509, 34939, 35041, 34648, 34785, 33745, 34288, 34809, 34392, 33752, 34277, 35352, 35853, 33615, 34529, 34008, 34500, 34321, 34101, 35122, 34636, 34608, 36251, 34937, 35019, 35169, 35173, 34913, 34681, 35551, 35330, 34774, 34776, 34251, 33094, 34381, 34090, 34824, 34136, 34904, 34392, 34299, 34785, 34112, 34785, 34774, 33778, 34008, 33904, 33860, 33823, 34917, 36418, 35147, 35067, 36085, 35191, 35098, 34370, 34915, 34253, 34065, 33719, 35447, 35067, 34659, 35285, 34891, 34474, 34624, 34496, 34266, 35319, 34240, 34251, 34787, 34915, 34657, 35835, 34251, 35732, 34509, 35123, 34913, 34763, 33591, 34496, 34253, 34520, 33986, 34544, 34242, 34379, 34868, 34820, 34557, 35067, 34820, 34659, 34778, 35489, 34867, 35842, 33500, 35006, 34939, 33476, 33997, 34220, 34787, 33984, 33589, 34763, 35614, 36213, 34418, 35354, 34136, 33604, 34368, 34476, 34379, 35158, 34498, 33463, 34924, 34277, 34229, 35169, 35679, 35425, 35158, 34533, 35414, 34403, 34646, 34970, 34112, 34635, 34561, 34359, 35645, 34264, 35745, 35052, 35376, 33639, 35054, 34613, 36027, 35156, 34444, 34520, 34776, 33743, 34266, 35195, 34637, 35428, 34253, 34529, 34846, 34891, 34496, 34893, 36422, 35529, 34950, 34650, 34741, 35412, 34668, 34276 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 15,
        "FinishedTasksTotalTimeInMs" : 532.0,
        "FinishedTasksDistributionInMs" : [ 11.0, 12.0, 21.0, 57.0, 88.0 ]
      },
      "StartTimeInMs" : 1702226647083,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 93976,
        "IOBytes" : {
          "Total" : 60567491604,
          "Details" : {
            "IR" : 1094856267,
            "IW" : 0,
            "SR" : 39699279461,
            "SW" : 19773355876
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "8" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -2010747574,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 85569480,
                "rowCount" : 1188465
              },
              "compileTime" : {
                "sizeInBytes" : 85569480,
                "rowCount" : 1188465
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, n_name#51] "
          },
          "1" : {
            "sign" : -863258961,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 104584920,
                "rowCount" : 1188465
              },
              "compileTime" : {
                "sizeInBytes" : 104584920,
                "rowCount" : 1188465
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#16L = n_nationkey#50L) "
          },
          "2" : {
            "sign" : -1563105702,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 36036631020,
                "rowCount" : 600610517
              },
              "compileTime" : {
                "sizeInBytes" : 36036631020,
                "rowCount" : 600610517
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, s_nationkey#16L] "
          },
          "3" : {
            "sign" : 275956942,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 40841515156,
                "rowCount" : 600610517
              },
              "compileTime" : {
                "sizeInBytes" : 40841515156,
                "rowCount" : 600610517
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#13L = l_suppkey#22L) "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, n_name#51]\n+- Join Inner, (s_nationkey#16L = n_nationkey#50L)\n   :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, s_nationkey#16L]\n   :  +- Join Inner, (s_suppkey#13L = l_suppkey#22L)\n   :     :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49]\n   :     :  +- Join Inner, (p_partkey#4L = l_partkey#21L)\n   :     :     :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49]\n   :     :     :  +- Join Inner, (o_orderkey#41L = l_orderkey#20L)\n   :     :     :     :- Project [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26]\n   :     :     :     :  +- Filter ((isnotnull(l_partkey#21L) AND isnotnull(l_suppkey#22L)) AND isnotnull(l_orderkey#20L))\n   :     :     :     :     +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#20L,l_partkey#21L,l_suppkey#22L,l_linenumber#23,l_quantity#24,l_extendedprice#25,l_discount#26,l_tax#27,l_returnflag#28,l_linestatus#29,l_commitdate#30,l_receiptdate#31,l_shipinstruct#32,l_shipmode#33,l_comment#34,l_shipdate#35] parquet\n   :     :     :     +- Project [o_orderkey#41L, o_orderdate#49]\n   :     :     :        +- Filter isnotnull(o_orderkey#41L)\n   :     :     :           +- Relation spark_catalog.tpch_100.orders[o_orderkey#41L,o_custkey#42L,o_orderstatus#43,o_totalprice#44,o_orderpriority#45,o_clerk#46,o_shippriority#47,o_comment#48,o_orderdate#49] parquet\n   :     :     +- Project [p_partkey#4L]\n   :     :        +- Filter ((isnotnull(p_name#5) AND Contains(p_name#5, thistle)) AND isnotnull(p_partkey#4L))\n   :     :           +- Relation spark_catalog.tpch_100.part[p_partkey#4L,p_name#5,p_mfgr#6,p_type#7,p_size#8,p_container#9,p_retailprice#10,p_comment#11,p_brand#12] parquet\n   :     +- Project [s_suppkey#13L, s_nationkey#16L]\n   :        +- Filter (isnotnull(s_suppkey#13L) AND isnotnull(s_nationkey#16L))\n   :           +- Relation spark_catalog.tpch_100.supplier[s_suppkey#13L,s_name#14,s_address#15,s_nationkey#16L,s_phone#17,s_acctbal#18,s_comment#19] parquet\n   +- Project [n_nationkey#50L, n_name#51]\n      +- Filter isnotnull(n_nationkey#50L)\n         +- Relation spark_catalog.tpch_100.nation[n_nationkey#50L,n_name#51,n_regionkey#52L,n_comment#53] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : 693280130,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048776,
            "rowCount" : 25,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [n_nationkey#50L, n_name#51] Arguments: 4 "
          },
          "4" : {
            "sign" : -264433323,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [6]: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49] Arguments: [l_suppkey#22L ASC NULLS FIRST], false, 0 "
          },
          "5" : {
            "sign" : -366955524,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 1827386512,
            "rowCount" : 32631902,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [6]: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49] Arguments: 7 "
          },
          "6" : {
            "sign" : -885507972,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [s_suppkey#13L, s_nationkey#16L] Arguments: [s_suppkey#13L ASC NULLS FIRST], false, 0 "
          },
          "1" : {
            "sign" : 852871253,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 104584920,
            "rowCount" : 1188465,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [s_nationkey#16L] Right keys [1]: [n_nationkey#50L] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 2056765226,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 85569480,
            "rowCount" : 1188465,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [7]: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, n_name#51] Input [9]: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, s_nationkey#16L, n_nationkey#50L, n_name#51] "
          },
          "2" : {
            "sign" : 1517004791,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 36036631020,
            "rowCount" : 600610517,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [7]: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, s_nationkey#16L] Input [8]: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, s_suppkey#13L, s_nationkey#16L] "
          },
          "7" : {
            "sign" : 886700522,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [s_suppkey#13L, s_nationkey#16L] Arguments: 3 "
          },
          "3" : {
            "sign" : 204007609,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 40841515156,
            "rowCount" : 600610517,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [l_suppkey#22L] Right keys [1]: [s_suppkey#13L] Join type: Inner Join condition: None "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Sort",
          "toId" : 3,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "ShuffleQueryStage",
          "toId" : 6,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Sort",
          "toId" : 3,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "SortMergeJoin",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, n_name#51]\n+- BroadcastHashJoin [s_nationkey#16L], [n_nationkey#50L], Inner, BuildRight, false\n   :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, s_nationkey#16L]\n   :  +- SortMergeJoin [l_suppkey#22L], [s_suppkey#13L], Inner\n   :     :- Sort [l_suppkey#22L ASC NULLS FIRST], false, 0\n   :     :  +- ShuffleQueryStage 7\n   :     :     +- Exchange hashpartitioning(l_suppkey#22L, 200), ENSURE_REQUIREMENTS, [plan_id=956]\n   :     :        +- *(12) Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49]\n   :     :           +- *(12) SortMergeJoin [l_partkey#21L], [p_partkey#4L], Inner\n   :     :              :- *(10) Sort [l_partkey#21L ASC NULLS FIRST], false, 0\n   :     :              :  +- ShuffleQueryStage 6\n   :     :              :     +- Exchange hashpartitioning(l_partkey#21L, 200), ENSURE_REQUIREMENTS, [plan_id=598]\n   :     :              :        +- *(9) Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49]\n   :     :              :           +- *(9) SortMergeJoin [l_orderkey#20L], [o_orderkey#41L], Inner\n   :     :              :              :- *(7) Sort [l_orderkey#20L ASC NULLS FIRST], false, 0\n   :     :              :              :  +- ShuffleQueryStage 0\n   :     :              :              :     +- Exchange hashpartitioning(l_orderkey#20L, 200), ENSURE_REQUIREMENTS, [plan_id=249]\n   :     :              :              :        +- *(1) Project [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26]\n   :     :              :              :           +- *(1) Filter ((isnotnull(l_partkey#21L) AND isnotnull(l_suppkey#22L)) AND isnotnull(l_orderkey#20L))\n   :     :              :              :              +- *(1) ColumnarToRow\n   :     :              :              :                 +- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#20L,l_partkey#21L,l_suppkey#22L,l_quantity#24,l_extendedprice#25,l_discount#26,l_shipdate#35] Batched: true, DataFilters: [isnotnull(l_partkey#21L), isnotnull(l_suppkey#22L), isnotnull(l_orderkey#20L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem], PartitionFilters: [], PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey), IsNotNull(l_orderkey)], ReadSchema: struct<l_orderkey:bigint,l_partkey:bigint,l_suppkey:bigint,l_quantity:decimal(12,2),l_extendedpri...\n   :     :              :              +- *(8) Sort [o_orderkey#41L ASC NULLS FIRST], false, 0\n   :     :              :                 +- ShuffleQueryStage 1\n   :     :              :                    +- Exchange hashpartitioning(o_orderkey#41L, 200), ENSURE_REQUIREMENTS, [plan_id=268]\n   :     :              :                       +- *(2) Filter isnotnull(o_orderkey#41L)\n   :     :              :                          +- *(2) ColumnarToRow\n   :     :              :                             +- FileScan parquet spark_catalog.tpch_100.orders[o_orderkey#41L,o_orderdate#49] Batched: true, DataFilters: [isnotnull(o_orderkey#41L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/orders], PartitionFilters: [], PushedFilters: [IsNotNull(o_orderkey)], ReadSchema: struct<o_orderkey:bigint>\n   :     :              +- *(11) Sort [p_partkey#4L ASC NULLS FIRST], false, 0\n   :     :                 +- ShuffleQueryStage 2\n   :     :                    +- Exchange hashpartitioning(p_partkey#4L, 200), ENSURE_REQUIREMENTS, [plan_id=291]\n   :     :                       +- *(3) Project [p_partkey#4L]\n   :     :                          +- *(3) Filter ((isnotnull(p_name#5) AND Contains(p_name#5, thistle)) AND isnotnull(p_partkey#4L))\n   :     :                             +- *(3) ColumnarToRow\n   :     :                                +- FileScan parquet spark_catalog.tpch_100.part[p_partkey#4L,p_name#5,p_brand#12] Batched: true, DataFilters: [isnotnull(p_name#5), Contains(p_name#5, thistle), isnotnull(p_partkey#4L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/part], PartitionFilters: [], PushedFilters: [IsNotNull(p_name), StringContains(p_name,thistle), IsNotNull(p_partkey)], ReadSchema: struct<p_partkey:bigint,p_name:string>\n   :     +- Sort [s_suppkey#13L ASC NULLS FIRST], false, 0\n   :        +- ShuffleQueryStage 3\n   :           +- Exchange hashpartitioning(s_suppkey#13L, 200), ENSURE_REQUIREMENTS, [plan_id=314]\n   :              +- *(4) Filter (isnotnull(s_suppkey#13L) AND isnotnull(s_nationkey#16L))\n   :                 +- *(4) ColumnarToRow\n   :                    +- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#13L,s_nationkey#16L] Batched: true, DataFilters: [isnotnull(s_suppkey#13L), isnotnull(s_nationkey#16L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>\n   +- BroadcastQueryStage 4\n      +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=333]\n         +- *(5) Filter isnotnull(n_nationkey#50L)\n            +- *(5) ColumnarToRow\n               +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#50L,n_name#51] Batched: true, DataFilters: [isnotnull(n_nationkey#50L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1852435288,
        "inputRowCount" : 33631927
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "3" : [ 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 52331, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 52331, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 52331, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 52331, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 57565, 57565, 52331, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 52331, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565 ],
        "6" : [ 3397791, 3455672, 3558721, 3520817, 3574479, 3583872, 3532497, 3574240, 3518312, 3513526, 3505384, 3506781, 3521983, 3467670, 3559224, 3535190, 3595683, 3492983, 3509198, 3658366, 3494664, 3499964, 3543373, 3470151, 3536810, 3528813, 3547705, 3563914, 3418710, 3530248, 3483216, 3464135, 3461755, 3515356, 3436101, 3515835, 3476568, 3442839, 3629080, 3455226, 3505498, 3537067, 3498908, 3463488, 3490506, 3418967, 3541223, 3446094, 3560290, 3594903, 3520866, 3518969, 3533961, 3554872, 3516659, 3580531, 3565739, 3570216, 3469322, 3436260, 3482338, 3474499, 3446066, 3498835, 3551026, 3640952, 3573232, 3404502, 3442487, 3520357, 3458674, 3475603, 3480811, 3499517, 3543441, 3495709, 3467752, 3525578, 3502441, 3479987, 3571634, 3394460, 3470225, 3480469, 3503226, 3553916, 3554978, 3537397, 3477166, 3494892, 3476866, 3477776, 3559501, 3607061, 3513463, 3531721, 3557936, 3530038, 3586276, 3506281, 3554668, 3611279, 3577831, 3513351, 3577240, 3498927, 3527999, 3473264, 3534500, 3608659, 3433947, 3472971, 3450152, 3513372, 3537572, 3599666, 3456757, 3503296, 3565856, 3468519, 3483733, 3496582, 3574528, 3509226, 3604222, 3485673, 3518044, 3559125, 3471897, 3472331, 3491988, 3620558, 3540906, 3570944, 3492108, 3510365, 3567150, 3426838, 3461906, 3494592, 3606888, 3605220, 3509174, 3516429, 3508771, 3524674, 3474128, 3592080, 3546356, 3495046, 3572164, 3462670, 3479870, 3394431, 3442576, 3498389, 3572588, 3444986, 3600211, 3524730, 3518355, 3437628, 3536890, 3478827, 3567088, 3527029, 3433085, 3557145, 3481880, 3421212, 3607278, 3448739, 3461122, 3473892, 3462747, 3512019, 3626172, 3598341, 3464213, 3558242, 3476571, 3524825, 3438192, 3432382, 3440578, 3532059, 3486980, 3516695, 3507600, 3482578, 3622302, 3467508, 3463141, 3601236, 3498471, 3399485, 3522895, 3568891, 3519594, 3494288 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 8,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 22 ],
      "Objectives" : {
        "DurationInMs" : 3130,
        "TotalTasksDurationInMs" : 32685,
        "IOBytes" : {
          "Total" : 1424421977,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 680432832,
            "SW" : 743989145
          }
        }
      }
    },
    "4" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -188402084,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 24000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 24000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_suppkey#13L, s_nationkey#16L] "
          },
          "1" : {
            "sign" : 1264449009,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 201000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 201000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(s_suppkey#13L) AND isnotnull(s_nationkey#16L)) "
          },
          "2" : {
            "sign" : 741471493,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 201000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 201000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_suppkey#13L, s_name#14, s_address#15, s_nationkey#16L, s_phone#17, s_acctbal#18, s_comment#19], `spark_catalog`.`tpch_100`.`supplier`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [s_suppkey#13L, s_nationkey#16L]\n+- Filter (isnotnull(s_suppkey#13L) AND isnotnull(s_nationkey#16L))\n   +- Relation spark_catalog.tpch_100.supplier[s_suppkey#13L,s_name#14,s_address#15,s_nationkey#16L,s_phone#17,s_acctbal#18,s_comment#19] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1095008337,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [s_suppkey#13L, s_nationkey#16L] Condition : (isnotnull(s_suppkey#13L) AND isnotnull(s_nationkey#16L)) "
          },
          "1" : {
            "sign" : -380356157,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.supplier Output [2]: [s_suppkey#13L, s_nationkey#16L] Batched: true Location: InMemoryFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier] PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)] ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpch_100.supplier",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(s_suppkey#13L) AND isnotnull(s_nationkey#16L))\n+- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#13L,s_nationkey#16L] Batched: true, DataFilters: [isnotnull(s_suppkey#13L), isnotnull(s_nationkey#16L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 24000000,
        "inputRowCount" : 1000000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 6 ],
      "Objectives" : {
        "DurationInMs" : 7236,
        "TotalTasksDurationInMs" : 1086,
        "IOBytes" : {
          "Total" : 16319432,
          "Details" : {
            "IR" : 5700125,
            "IW" : 0,
            "SR" : 0,
            "SW" : 10619307
          }
        }
      }
    },
    "11" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -863012456,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 115333550736,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 115333550736,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [nation#64 ASC NULLS FIRST, o_year#65 DESC NULLS LAST], true "
          }
        },
        "links" : [ ],
        "rawPlan" : "Sort [nation#64 ASC NULLS FIRST, o_year#65 DESC NULLS LAST], true\n+- Aggregate [nation#64, o_year#65], [nation#64, o_year#65, sum(amount#66) AS sum_profit#67]\n   +- Project [n_name#51 AS nation#64, year(o_orderdate#49) AS o_year#65, ((l_extendedprice#25 * (1 - l_discount#26)) - (ps_supplycost#39 * l_quantity#24)) AS amount#66]\n      +- Join Inner, ((ps_suppkey#37L = l_suppkey#22L) AND (ps_partkey#36L = l_partkey#21L))\n         :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, n_name#51]\n         :  +- Join Inner, (s_nationkey#16L = n_nationkey#50L)\n         :     :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, s_nationkey#16L]\n         :     :  +- Join Inner, (s_suppkey#13L = l_suppkey#22L)\n         :     :     :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49]\n         :     :     :  +- Join Inner, (p_partkey#4L = l_partkey#21L)\n         :     :     :     :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49]\n         :     :     :     :  +- Join Inner, (o_orderkey#41L = l_orderkey#20L)\n         :     :     :     :     :- Project [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26]\n         :     :     :     :     :  +- Filter ((isnotnull(l_partkey#21L) AND isnotnull(l_suppkey#22L)) AND isnotnull(l_orderkey#20L))\n         :     :     :     :     :     +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#20L,l_partkey#21L,l_suppkey#22L,l_linenumber#23,l_quantity#24,l_extendedprice#25,l_discount#26,l_tax#27,l_returnflag#28,l_linestatus#29,l_commitdate#30,l_receiptdate#31,l_shipinstruct#32,l_shipmode#33,l_comment#34,l_shipdate#35] parquet\n         :     :     :     :     +- Project [o_orderkey#41L, o_orderdate#49]\n         :     :     :     :        +- Filter isnotnull(o_orderkey#41L)\n         :     :     :     :           +- Relation spark_catalog.tpch_100.orders[o_orderkey#41L,o_custkey#42L,o_orderstatus#43,o_totalprice#44,o_orderpriority#45,o_clerk#46,o_shippriority#47,o_comment#48,o_orderdate#49] parquet\n         :     :     :     +- Project [p_partkey#4L]\n         :     :     :        +- Filter ((isnotnull(p_name#5) AND Contains(p_name#5, thistle)) AND isnotnull(p_partkey#4L))\n         :     :     :           +- Relation spark_catalog.tpch_100.part[p_partkey#4L,p_name#5,p_mfgr#6,p_type#7,p_size#8,p_container#9,p_retailprice#10,p_comment#11,p_brand#12] parquet\n         :     :     +- Project [s_suppkey#13L, s_nationkey#16L]\n         :     :        +- Filter (isnotnull(s_suppkey#13L) AND isnotnull(s_nationkey#16L))\n         :     :           +- Relation spark_catalog.tpch_100.supplier[s_suppkey#13L,s_name#14,s_address#15,s_nationkey#16L,s_phone#17,s_acctbal#18,s_comment#19] parquet\n         :     +- Project [n_nationkey#50L, n_name#51]\n         :        +- Filter isnotnull(n_nationkey#50L)\n         :           +- Relation spark_catalog.tpch_100.nation[n_nationkey#50L,n_name#51,n_regionkey#52L,n_comment#53] parquet\n         +- Project [ps_partkey#36L, ps_suppkey#37L, ps_supplycost#39]\n            +- Filter (isnotnull(ps_suppkey#37L) AND isnotnull(ps_partkey#36L))\n               +- Relation spark_catalog.tpch_100.partsupp[ps_partkey#36L,ps_suppkey#37L,ps_availqty#38,ps_supplycost#39,ps_comment#40] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 716934279,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : 115333550736,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [3]: [nation#64, o_year#65, sum_profit#67] Arguments: [nation#64 ASC NULLS FIRST, o_year#65 DESC NULLS LAST], true, 0 "
          },
          "1" : {
            "sign" : 1331159962,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 10136,
            "rowCount" : 175,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [nation#64, o_year#65, sum_profit#67] Arguments: 10 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [nation#64 ASC NULLS FIRST, o_year#65 DESC NULLS LAST], true, 0\n+- ShuffleQueryStage 10\n   +- Exchange rangepartitioning(nation#64 ASC NULLS FIRST, o_year#65 DESC NULLS LAST, 200), ENSURE_REQUIREMENTS, [plan_id=1231]\n      +- *(19) HashAggregate(keys=[nation#64, o_year#65], functions=[sum(amount#66)], output=[nation#64, o_year#65, sum_profit#67])\n         +- AQEShuffleRead coalesced\n            +- ShuffleQueryStage 9\n               +- Exchange hashpartitioning(nation#64, o_year#65, 200), ENSURE_REQUIREMENTS, [plan_id=1189]\n                  +- *(18) HashAggregate(keys=[nation#64, o_year#65], functions=[partial_sum(amount#66)], output=[nation#64, o_year#65, sum#74, isEmpty#75])\n                     +- *(18) Project [n_name#51 AS nation#64, year(o_orderdate#49) AS o_year#65, ((l_extendedprice#25 * (1 - l_discount#26)) - (ps_supplycost#39 * l_quantity#24)) AS amount#66]\n                        +- *(18) SortMergeJoin [l_suppkey#22L, l_partkey#21L], [ps_suppkey#37L, ps_partkey#36L], Inner\n                           :- *(16) Sort [l_suppkey#22L ASC NULLS FIRST, l_partkey#21L ASC NULLS FIRST], false, 0\n                           :  +- AQEShuffleRead coalesced\n                           :     +- ShuffleQueryStage 8\n                           :        +- Exchange hashpartitioning(l_suppkey#22L, l_partkey#21L, 200), ENSURE_REQUIREMENTS, [plan_id=1092]\n                           :           +- *(15) Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, n_name#51]\n                           :              +- *(15) BroadcastHashJoin [s_nationkey#16L], [n_nationkey#50L], Inner, BuildRight, false\n                           :                 :- *(15) Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, s_nationkey#16L]\n                           :                 :  +- *(15) SortMergeJoin [l_suppkey#22L], [s_suppkey#13L], Inner\n                           :                 :     :- *(13) Sort [l_suppkey#22L ASC NULLS FIRST], false, 0\n                           :                 :     :  +- AQEShuffleRead coalesced\n                           :                 :     :     +- ShuffleQueryStage 7\n                           :                 :     :        +- Exchange hashpartitioning(l_suppkey#22L, 200), ENSURE_REQUIREMENTS, [plan_id=956]\n                           :                 :     :           +- *(12) Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49]\n                           :                 :     :              +- *(12) SortMergeJoin [l_partkey#21L], [p_partkey#4L], Inner\n                           :                 :     :                 :- *(10) Sort [l_partkey#21L ASC NULLS FIRST], false, 0\n                           :                 :     :                 :  +- ShuffleQueryStage 6\n                           :                 :     :                 :     +- Exchange hashpartitioning(l_partkey#21L, 200), ENSURE_REQUIREMENTS, [plan_id=598]\n                           :                 :     :                 :        +- *(9) Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49]\n                           :                 :     :                 :           +- *(9) SortMergeJoin [l_orderkey#20L], [o_orderkey#41L], Inner\n                           :                 :     :                 :              :- *(7) Sort [l_orderkey#20L ASC NULLS FIRST], false, 0\n                           :                 :     :                 :              :  +- ShuffleQueryStage 0\n                           :                 :     :                 :              :     +- Exchange hashpartitioning(l_orderkey#20L, 200), ENSURE_REQUIREMENTS, [plan_id=249]\n                           :                 :     :                 :              :        +- *(1) Project [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26]\n                           :                 :     :                 :              :           +- *(1) Filter ((isnotnull(l_partkey#21L) AND isnotnull(l_suppkey#22L)) AND isnotnull(l_orderkey#20L))\n                           :                 :     :                 :              :              +- *(1) ColumnarToRow\n                           :                 :     :                 :              :                 +- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#20L,l_partkey#21L,l_suppkey#22L,l_quantity#24,l_extendedprice#25,l_discount#26,l_shipdate#35] Batched: true, DataFilters: [isnotnull(l_partkey#21L), isnotnull(l_suppkey#22L), isnotnull(l_orderkey#20L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem], PartitionFilters: [], PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey), IsNotNull(l_orderkey)], ReadSchema: struct<l_orderkey:bigint,l_partkey:bigint,l_suppkey:bigint,l_quantity:decimal(12,2),l_extendedpri...\n                           :                 :     :                 :              +- *(8) Sort [o_orderkey#41L ASC NULLS FIRST], false, 0\n                           :                 :     :                 :                 +- ShuffleQueryStage 1\n                           :                 :     :                 :                    +- Exchange hashpartitioning(o_orderkey#41L, 200), ENSURE_REQUIREMENTS, [plan_id=268]\n                           :                 :     :                 :                       +- *(2) Filter isnotnull(o_orderkey#41L)\n                           :                 :     :                 :                          +- *(2) ColumnarToRow\n                           :                 :     :                 :                             +- FileScan parquet spark_catalog.tpch_100.orders[o_orderkey#41L,o_orderdate#49] Batched: true, DataFilters: [isnotnull(o_orderkey#41L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/orders], PartitionFilters: [], PushedFilters: [IsNotNull(o_orderkey)], ReadSchema: struct<o_orderkey:bigint>\n                           :                 :     :                 +- *(11) Sort [p_partkey#4L ASC NULLS FIRST], false, 0\n                           :                 :     :                    +- ShuffleQueryStage 2\n                           :                 :     :                       +- Exchange hashpartitioning(p_partkey#4L, 200), ENSURE_REQUIREMENTS, [plan_id=291]\n                           :                 :     :                          +- *(3) Project [p_partkey#4L]\n                           :                 :     :                             +- *(3) Filter ((isnotnull(p_name#5) AND Contains(p_name#5, thistle)) AND isnotnull(p_partkey#4L))\n                           :                 :     :                                +- *(3) ColumnarToRow\n                           :                 :     :                                   +- FileScan parquet spark_catalog.tpch_100.part[p_partkey#4L,p_name#5,p_brand#12] Batched: true, DataFilters: [isnotnull(p_name#5), Contains(p_name#5, thistle), isnotnull(p_partkey#4L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/part], PartitionFilters: [], PushedFilters: [IsNotNull(p_name), StringContains(p_name,thistle), IsNotNull(p_partkey)], ReadSchema: struct<p_partkey:bigint,p_name:string>\n                           :                 :     +- *(14) Sort [s_suppkey#13L ASC NULLS FIRST], false, 0\n                           :                 :        +- AQEShuffleRead coalesced\n                           :                 :           +- ShuffleQueryStage 3\n                           :                 :              +- Exchange hashpartitioning(s_suppkey#13L, 200), ENSURE_REQUIREMENTS, [plan_id=314]\n                           :                 :                 +- *(4) Filter (isnotnull(s_suppkey#13L) AND isnotnull(s_nationkey#16L))\n                           :                 :                    +- *(4) ColumnarToRow\n                           :                 :                       +- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#13L,s_nationkey#16L] Batched: true, DataFilters: [isnotnull(s_suppkey#13L), isnotnull(s_nationkey#16L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>\n                           :                 +- BroadcastQueryStage 4\n                           :                    +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=333]\n                           :                       +- *(5) Filter isnotnull(n_nationkey#50L)\n                           :                          +- *(5) ColumnarToRow\n                           :                             +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#50L,n_name#51] Batched: true, DataFilters: [isnotnull(n_nationkey#50L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n                           +- *(17) Sort [ps_suppkey#37L ASC NULLS FIRST, ps_partkey#36L ASC NULLS FIRST], false, 0\n                              +- AQEShuffleRead coalesced\n                                 +- ShuffleQueryStage 5\n                                    +- Exchange hashpartitioning(ps_suppkey#37L, ps_partkey#36L, 200), ENSURE_REQUIREMENTS, [plan_id=352]\n                                       +- *(6) Filter (isnotnull(ps_suppkey#37L) AND isnotnull(ps_partkey#36L))\n                                          +- *(6) ColumnarToRow\n                                             +- FileScan parquet spark_catalog.tpch_100.partsupp[ps_partkey#36L,ps_suppkey#37L,ps_supplycost#39] Batched: true, DataFilters: [isnotnull(ps_suppkey#37L), isnotnull(ps_partkey#36L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/partsupp], PartitionFilters: [], PushedFilters: [IsNotNull(ps_suppkey), IsNotNull(ps_partkey)], ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_supplycost:decimal(12,2)>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 10136,
        "inputRowCount" : 175
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "9" : [ 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 106, 106, 106, 106, 106, 106, 106, 97, 97, 97, 97, 97, 97, 97, 106, 106, 106, 106, 106, 106, 106, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 97, 97, 97, 97, 97, 97, 97, 106, 106, 106, 106, 106, 106, 106, 97, 97, 97, 97, 97, 97, 97, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 11,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 62 ],
      "Objectives" : {
        "DurationInMs" : 106,
        "TotalTasksDurationInMs" : 96,
        "IOBytes" : {
          "Total" : 17283,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 17283,
            "SW" : 0
          }
        }
      }
    },
    "9" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1719568163,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 115333550736,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 115333550736,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [nation#64, o_year#65], [nation#64, o_year#65, sum(amount#66) AS sum_profit#67] "
          },
          "1" : {
            "sign" : -668762713,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 115333550736,
                "rowCount" : 2402782307
              },
              "compileTime" : {
                "sizeInBytes" : 115333550736,
                "rowCount" : 2402782307
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_name#51 AS nation#64, year(o_orderdate#49) AS o_year#65, ((l_extendedprice#25 * (1 - l_discount#26)) - (ps_supplycost#39 * l_quantity#24)) AS amount#66] "
          },
          "2" : {
            "sign" : 719839430,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 230667101472,
                "rowCount" : 2402782307
              },
              "compileTime" : {
                "sizeInBytes" : 230667101472,
                "rowCount" : 2402782307
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((ps_suppkey#37L = l_suppkey#22L) AND (ps_partkey#36L = l_partkey#21L)) "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [nation#64, o_year#65], [nation#64, o_year#65, sum(amount#66) AS sum_profit#67]\n+- Project [n_name#51 AS nation#64, year(o_orderdate#49) AS o_year#65, ((l_extendedprice#25 * (1 - l_discount#26)) - (ps_supplycost#39 * l_quantity#24)) AS amount#66]\n   +- Join Inner, ((ps_suppkey#37L = l_suppkey#22L) AND (ps_partkey#36L = l_partkey#21L))\n      :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, n_name#51]\n      :  +- Join Inner, (s_nationkey#16L = n_nationkey#50L)\n      :     :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, s_nationkey#16L]\n      :     :  +- Join Inner, (s_suppkey#13L = l_suppkey#22L)\n      :     :     :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49]\n      :     :     :  +- Join Inner, (p_partkey#4L = l_partkey#21L)\n      :     :     :     :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49]\n      :     :     :     :  +- Join Inner, (o_orderkey#41L = l_orderkey#20L)\n      :     :     :     :     :- Project [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26]\n      :     :     :     :     :  +- Filter ((isnotnull(l_partkey#21L) AND isnotnull(l_suppkey#22L)) AND isnotnull(l_orderkey#20L))\n      :     :     :     :     :     +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#20L,l_partkey#21L,l_suppkey#22L,l_linenumber#23,l_quantity#24,l_extendedprice#25,l_discount#26,l_tax#27,l_returnflag#28,l_linestatus#29,l_commitdate#30,l_receiptdate#31,l_shipinstruct#32,l_shipmode#33,l_comment#34,l_shipdate#35] parquet\n      :     :     :     :     +- Project [o_orderkey#41L, o_orderdate#49]\n      :     :     :     :        +- Filter isnotnull(o_orderkey#41L)\n      :     :     :     :           +- Relation spark_catalog.tpch_100.orders[o_orderkey#41L,o_custkey#42L,o_orderstatus#43,o_totalprice#44,o_orderpriority#45,o_clerk#46,o_shippriority#47,o_comment#48,o_orderdate#49] parquet\n      :     :     :     +- Project [p_partkey#4L]\n      :     :     :        +- Filter ((isnotnull(p_name#5) AND Contains(p_name#5, thistle)) AND isnotnull(p_partkey#4L))\n      :     :     :           +- Relation spark_catalog.tpch_100.part[p_partkey#4L,p_name#5,p_mfgr#6,p_type#7,p_size#8,p_container#9,p_retailprice#10,p_comment#11,p_brand#12] parquet\n      :     :     +- Project [s_suppkey#13L, s_nationkey#16L]\n      :     :        +- Filter (isnotnull(s_suppkey#13L) AND isnotnull(s_nationkey#16L))\n      :     :           +- Relation spark_catalog.tpch_100.supplier[s_suppkey#13L,s_name#14,s_address#15,s_nationkey#16L,s_phone#17,s_acctbal#18,s_comment#19] parquet\n      :     +- Project [n_nationkey#50L, n_name#51]\n      :        +- Filter isnotnull(n_nationkey#50L)\n      :           +- Relation spark_catalog.tpch_100.nation[n_nationkey#50L,n_name#51,n_regionkey#52L,n_comment#53] parquet\n      +- Project [ps_partkey#36L, ps_suppkey#37L, ps_supplycost#39]\n         +- Filter (isnotnull(ps_suppkey#37L) AND isnotnull(ps_partkey#36L))\n            +- Relation spark_catalog.tpch_100.partsupp[ps_partkey#36L,ps_suppkey#37L,ps_availqty#38,ps_supplycost#39,ps_comment#40] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 1271583729,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 2411984160,
            "rowCount" : 32631902,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [7]: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, n_name#51] Arguments: 8 "
          },
          "5" : {
            "sign" : 369594867,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [3]: [ps_partkey#36L, ps_suppkey#37L, ps_supplycost#39] Arguments: [ps_suppkey#37L ASC NULLS FIRST, ps_partkey#36L ASC NULLS FIRST], false, 0 "
          },
          "6" : {
            "sign" : 527957462,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [ps_partkey#36L, ps_suppkey#37L, ps_supplycost#39] Arguments: 5 "
          },
          "1" : {
            "sign" : -1636130025,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 115333550736,
            "rowCount" : 2402782307,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [n_name#51 AS nation#64, year(o_orderdate#49) AS o_year#65, ((l_extendedprice#25 * (1 - l_discount#26)) - (ps_supplycost#39 * l_quantity#24)) AS amount#66] Input [10]: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, n_name#51, ps_partkey#36L, ps_suppkey#37L, ps_supplycost#39] "
          },
          "0" : {
            "sign" : 1658473290,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 115333550736,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [3]: [nation#64, o_year#65, amount#66] Keys [2]: [nation#64, o_year#65] Functions [1]: [partial_sum(amount#66)] Aggregate Attributes [2]: [sum#72, isEmpty#73] Results [4]: [nation#64, o_year#65, sum#74, isEmpty#75] "
          },
          "2" : {
            "sign" : 317775086,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 230667101472,
            "rowCount" : 2402782307,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [2]: [l_suppkey#22L, l_partkey#21L] Right keys [2]: [ps_suppkey#37L, ps_partkey#36L] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : -1342511410,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [7]: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, n_name#51] Arguments: [l_suppkey#22L ASC NULLS FIRST, l_partkey#21L ASC NULLS FIRST], false, 0 "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "ShuffleQueryStage",
          "toId" : 5,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "SortMergeJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[nation#64, o_year#65], functions=[partial_sum(amount#66)], output=[nation#64, o_year#65, sum#74, isEmpty#75])\n+- Project [n_name#51 AS nation#64, year(o_orderdate#49) AS o_year#65, ((l_extendedprice#25 * (1 - l_discount#26)) - (ps_supplycost#39 * l_quantity#24)) AS amount#66]\n   +- SortMergeJoin [l_suppkey#22L, l_partkey#21L], [ps_suppkey#37L, ps_partkey#36L], Inner\n      :- Sort [l_suppkey#22L ASC NULLS FIRST, l_partkey#21L ASC NULLS FIRST], false, 0\n      :  +- ShuffleQueryStage 8\n      :     +- Exchange hashpartitioning(l_suppkey#22L, l_partkey#21L, 200), ENSURE_REQUIREMENTS, [plan_id=1092]\n      :        +- *(15) Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, n_name#51]\n      :           +- *(15) BroadcastHashJoin [s_nationkey#16L], [n_nationkey#50L], Inner, BuildRight, false\n      :              :- *(15) Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, s_nationkey#16L]\n      :              :  +- *(15) SortMergeJoin [l_suppkey#22L], [s_suppkey#13L], Inner\n      :              :     :- *(13) Sort [l_suppkey#22L ASC NULLS FIRST], false, 0\n      :              :     :  +- AQEShuffleRead coalesced\n      :              :     :     +- ShuffleQueryStage 7\n      :              :     :        +- Exchange hashpartitioning(l_suppkey#22L, 200), ENSURE_REQUIREMENTS, [plan_id=956]\n      :              :     :           +- *(12) Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49]\n      :              :     :              +- *(12) SortMergeJoin [l_partkey#21L], [p_partkey#4L], Inner\n      :              :     :                 :- *(10) Sort [l_partkey#21L ASC NULLS FIRST], false, 0\n      :              :     :                 :  +- ShuffleQueryStage 6\n      :              :     :                 :     +- Exchange hashpartitioning(l_partkey#21L, 200), ENSURE_REQUIREMENTS, [plan_id=598]\n      :              :     :                 :        +- *(9) Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49]\n      :              :     :                 :           +- *(9) SortMergeJoin [l_orderkey#20L], [o_orderkey#41L], Inner\n      :              :     :                 :              :- *(7) Sort [l_orderkey#20L ASC NULLS FIRST], false, 0\n      :              :     :                 :              :  +- ShuffleQueryStage 0\n      :              :     :                 :              :     +- Exchange hashpartitioning(l_orderkey#20L, 200), ENSURE_REQUIREMENTS, [plan_id=249]\n      :              :     :                 :              :        +- *(1) Project [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26]\n      :              :     :                 :              :           +- *(1) Filter ((isnotnull(l_partkey#21L) AND isnotnull(l_suppkey#22L)) AND isnotnull(l_orderkey#20L))\n      :              :     :                 :              :              +- *(1) ColumnarToRow\n      :              :     :                 :              :                 +- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#20L,l_partkey#21L,l_suppkey#22L,l_quantity#24,l_extendedprice#25,l_discount#26,l_shipdate#35] Batched: true, DataFilters: [isnotnull(l_partkey#21L), isnotnull(l_suppkey#22L), isnotnull(l_orderkey#20L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem], PartitionFilters: [], PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey), IsNotNull(l_orderkey)], ReadSchema: struct<l_orderkey:bigint,l_partkey:bigint,l_suppkey:bigint,l_quantity:decimal(12,2),l_extendedpri...\n      :              :     :                 :              +- *(8) Sort [o_orderkey#41L ASC NULLS FIRST], false, 0\n      :              :     :                 :                 +- ShuffleQueryStage 1\n      :              :     :                 :                    +- Exchange hashpartitioning(o_orderkey#41L, 200), ENSURE_REQUIREMENTS, [plan_id=268]\n      :              :     :                 :                       +- *(2) Filter isnotnull(o_orderkey#41L)\n      :              :     :                 :                          +- *(2) ColumnarToRow\n      :              :     :                 :                             +- FileScan parquet spark_catalog.tpch_100.orders[o_orderkey#41L,o_orderdate#49] Batched: true, DataFilters: [isnotnull(o_orderkey#41L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/orders], PartitionFilters: [], PushedFilters: [IsNotNull(o_orderkey)], ReadSchema: struct<o_orderkey:bigint>\n      :              :     :                 +- *(11) Sort [p_partkey#4L ASC NULLS FIRST], false, 0\n      :              :     :                    +- ShuffleQueryStage 2\n      :              :     :                       +- Exchange hashpartitioning(p_partkey#4L, 200), ENSURE_REQUIREMENTS, [plan_id=291]\n      :              :     :                          +- *(3) Project [p_partkey#4L]\n      :              :     :                             +- *(3) Filter ((isnotnull(p_name#5) AND Contains(p_name#5, thistle)) AND isnotnull(p_partkey#4L))\n      :              :     :                                +- *(3) ColumnarToRow\n      :              :     :                                   +- FileScan parquet spark_catalog.tpch_100.part[p_partkey#4L,p_name#5,p_brand#12] Batched: true, DataFilters: [isnotnull(p_name#5), Contains(p_name#5, thistle), isnotnull(p_partkey#4L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/part], PartitionFilters: [], PushedFilters: [IsNotNull(p_name), StringContains(p_name,thistle), IsNotNull(p_partkey)], ReadSchema: struct<p_partkey:bigint,p_name:string>\n      :              :     +- *(14) Sort [s_suppkey#13L ASC NULLS FIRST], false, 0\n      :              :        +- AQEShuffleRead coalesced\n      :              :           +- ShuffleQueryStage 3\n      :              :              +- Exchange hashpartitioning(s_suppkey#13L, 200), ENSURE_REQUIREMENTS, [plan_id=314]\n      :              :                 +- *(4) Filter (isnotnull(s_suppkey#13L) AND isnotnull(s_nationkey#16L))\n      :              :                    +- *(4) ColumnarToRow\n      :              :                       +- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#13L,s_nationkey#16L] Batched: true, DataFilters: [isnotnull(s_suppkey#13L), isnotnull(s_nationkey#16L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>\n      :              +- BroadcastQueryStage 4\n      :                 +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=333]\n      :                    +- *(5) Filter isnotnull(n_nationkey#50L)\n      :                       +- *(5) ColumnarToRow\n      :                          +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#50L,n_name#51] Batched: true, DataFilters: [isnotnull(n_nationkey#50L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n      +- Sort [ps_suppkey#37L ASC NULLS FIRST, ps_partkey#36L ASC NULLS FIRST], false, 0\n         +- ShuffleQueryStage 5\n            +- Exchange hashpartitioning(ps_suppkey#37L, ps_partkey#36L, 200), ENSURE_REQUIREMENTS, [plan_id=352]\n               +- *(6) Filter (isnotnull(ps_suppkey#37L) AND isnotnull(ps_partkey#36L))\n                  +- *(6) ColumnarToRow\n                     +- FileScan parquet spark_catalog.tpch_100.partsupp[ps_partkey#36L,ps_suppkey#37L,ps_supplycost#39] Batched: true, DataFilters: [isnotnull(ps_suppkey#37L), isnotnull(ps_partkey#36L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/partsupp], PartitionFilters: [], PushedFilters: [IsNotNull(ps_suppkey), IsNotNull(ps_partkey)], ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_supplycost:decimal(12,2)>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 4971984160,
        "inputRowCount" : 112631902
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "4" : [ 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7555897, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237 ],
        "7" : [ 3947205, 3908425, 3883925, 3915931, 3851919, 3911999, 3911999, 3951137, 3879993, 3947205, 3943631, 3911999, 3915931, 3908425, 3947205, 3847987, 3908425, 3919131, 3879993, 3951137, 3883925, 3908425, 3876419, 3911999, 3911999, 3915931, 3915931, 3911999, 3911999, 3911999, 3883925, 3911999, 3911999, 3915931, 3911999, 3879993, 3911625, 3911999, 3883925, 3883925, 3915931, 3911999, 3915931, 3908425, 3915931, 3911999, 3876419, 3911999, 3915931, 3879993, 3879993, 3876419, 3911999, 3911999, 3911999, 3908425, 3911999, 3911999, 3947205, 3873169, 3908425, 3908425, 3915931, 3920256, 3879993, 3908425, 3947205, 3879993, 3919131, 3879993, 3911999, 3851919, 3876419, 3879993, 3911999, 3876419, 3915931, 3908425, 3911999, 3911999, 3911999, 3911999, 3908425, 3911999, 3911999, 3911999, 3883925, 3911999, 3911999, 3915199, 3905175, 3911999, 3911999, 3943631, 3908425, 3911999, 3876419, 3876419, 3947205, 3951137, 3911999, 3915931, 3911999, 3879993, 3940381, 3915931, 3911999, 3915931, 3911999, 3915931, 3915931, 3911999, 3879993, 3911999, 3943631, 3911999, 3876419, 3911999, 3911999, 3915931, 3873169, 3911999, 3911999, 3908425, 3911999, 3915931, 3911999, 3908425, 3879993, 3911999, 3879993, 3951137, 3876419, 3908425, 3911999, 3943631, 3908425, 3947205, 3879993, 3915931, 3943631, 3908425, 3908425, 3911999, 3908425, 3911999, 3911999, 3908425, 3920256, 3876419, 3911999, 3915931, 3915931, 3908425, 3947205, 3911999, 3911999, 3879993, 3911999, 3911999, 3879993, 3911999, 3879993, 3943631, 3879993, 3908425, 3911999, 3911999, 3911999, 3911999, 3911999, 3911625, 3951137, 3915931, 3879993, 3911999, 3908425, 3851919, 3915931, 3879993, 3908425, 3911999, 3879993, 3908425, 3911999, 3911999, 3911999, 3943631, 3883925, 3982411, 3908425, 3908425, 3911999, 3879619, 3883925, 3908425, 3911999, 3911999, 3911999, 3911999 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 9,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 31 ],
      "Objectives" : {
        "DurationInMs" : 8991,
        "TotalTasksDurationInMs" : 121024,
        "IOBytes" : {
          "Total" : 2181511503,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 2180933289,
            "SW" : 578214
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1893226881,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2560000000,
                "rowCount" : 80000000
              },
              "compileTime" : {
                "sizeInBytes" : 2560000000,
                "rowCount" : 80000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ps_partkey#36L, ps_suppkey#37L, ps_supplycost#39] "
          },
          "1" : {
            "sign" : -1357142421,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 13760000000,
                "rowCount" : 80000000
              },
              "compileTime" : {
                "sizeInBytes" : 13760000000,
                "rowCount" : 80000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ps_suppkey#37L) AND isnotnull(ps_partkey#36L)) "
          },
          "2" : {
            "sign" : -1221742165,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 13760000000,
                "rowCount" : 80000000
              },
              "compileTime" : {
                "sizeInBytes" : 13760000000,
                "rowCount" : 80000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ps_partkey#36L, ps_suppkey#37L, ps_availqty#38, ps_supplycost#39, ps_comment#40], `spark_catalog`.`tpch_100`.`partsupp`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ps_partkey#36L, ps_suppkey#37L, ps_supplycost#39]\n+- Filter (isnotnull(ps_suppkey#37L) AND isnotnull(ps_partkey#36L))\n   +- Relation spark_catalog.tpch_100.partsupp[ps_partkey#36L,ps_suppkey#37L,ps_availqty#38,ps_supplycost#39,ps_comment#40] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1457816365,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [ps_partkey#36L, ps_suppkey#37L, ps_supplycost#39] Condition : (isnotnull(ps_suppkey#37L) AND isnotnull(ps_partkey#36L)) "
          },
          "1" : {
            "sign" : 58079635,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.partsupp Output [3]: [ps_partkey#36L, ps_suppkey#37L, ps_supplycost#39] Batched: true Location: InMemoryFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/partsupp] PushedFilters: [IsNotNull(ps_suppkey), IsNotNull(ps_partkey)] ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_supplycost:decimal(12,2)> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpch_100.partsupp",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(ps_suppkey#37L) AND isnotnull(ps_partkey#36L))\n+- FileScan parquet spark_catalog.tpch_100.partsupp[ps_partkey#36L,ps_suppkey#37L,ps_supplycost#39] Batched: true, DataFilters: [isnotnull(ps_suppkey#37L), isnotnull(ps_partkey#36L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/partsupp], PartitionFilters: [], PushedFilters: [IsNotNull(ps_suppkey), IsNotNull(ps_partkey)], ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_supplycost:decimal(12,2)>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2560000000,
        "inputRowCount" : 80000000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 7 ],
      "Objectives" : {
        "DurationInMs" : 10325,
        "TotalTasksDurationInMs" : 42504,
        "IOBytes" : {
          "Total" : 2526100286,
          "Details" : {
            "IR" : 1089156142,
            "IW" : 0,
            "SR" : 0,
            "SW" : 1436944144
          }
        }
      }
    },
    "10" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -150876616,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 461440,
                "rowCount" : 7000
              },
              "compileTime" : {
                "sizeInBytes" : 115333550736,
                "rowCount" : -1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [nation#64, o_year#65], [nation#64, o_year#65, sum(amount#66) AS sum_profit#67], HashAggregate(keys=[nation#64, o_year#65], functions=[sum(amount#66)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [nation#64, o_year#65], [nation#64, o_year#65, sum(amount#66) AS sum_profit#67], HashAggregate(keys=[nation#64, o_year#65], functions=[sum(amount#66)])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 2081722496,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 461440,
            "rowCount" : 7000,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [4]: [nation#64, o_year#65, sum#74, isEmpty#75] Keys [2]: [nation#64, o_year#65] Functions [1]: [sum(amount#66)] Aggregate Attributes [1]: [sum(amount#66)#68] Results [3]: [nation#64, o_year#65, sum(amount#66)#68 AS sum_profit#67] "
          },
          "1" : {
            "sign" : 878057648,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 115333550736,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [nation#64, o_year#65, sum#74, isEmpty#75] Arguments: 9 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[nation#64, o_year#65], functions=[sum(amount#66)], output=[nation#64, o_year#65, sum_profit#67])\n+- ShuffleQueryStage 9\n   +- Exchange hashpartitioning(nation#64, o_year#65, 200), ENSURE_REQUIREMENTS, [plan_id=1189]\n      +- *(18) HashAggregate(keys=[nation#64, o_year#65], functions=[partial_sum(amount#66)], output=[nation#64, o_year#65, sum#74, isEmpty#75])\n         +- *(18) Project [n_name#51 AS nation#64, year(o_orderdate#49) AS o_year#65, ((l_extendedprice#25 * (1 - l_discount#26)) - (ps_supplycost#39 * l_quantity#24)) AS amount#66]\n            +- *(18) SortMergeJoin [l_suppkey#22L, l_partkey#21L], [ps_suppkey#37L, ps_partkey#36L], Inner\n               :- *(16) Sort [l_suppkey#22L ASC NULLS FIRST, l_partkey#21L ASC NULLS FIRST], false, 0\n               :  +- AQEShuffleRead coalesced\n               :     +- ShuffleQueryStage 8\n               :        +- Exchange hashpartitioning(l_suppkey#22L, l_partkey#21L, 200), ENSURE_REQUIREMENTS, [plan_id=1092]\n               :           +- *(15) Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, n_name#51]\n               :              +- *(15) BroadcastHashJoin [s_nationkey#16L], [n_nationkey#50L], Inner, BuildRight, false\n               :                 :- *(15) Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, s_nationkey#16L]\n               :                 :  +- *(15) SortMergeJoin [l_suppkey#22L], [s_suppkey#13L], Inner\n               :                 :     :- *(13) Sort [l_suppkey#22L ASC NULLS FIRST], false, 0\n               :                 :     :  +- AQEShuffleRead coalesced\n               :                 :     :     +- ShuffleQueryStage 7\n               :                 :     :        +- Exchange hashpartitioning(l_suppkey#22L, 200), ENSURE_REQUIREMENTS, [plan_id=956]\n               :                 :     :           +- *(12) Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49]\n               :                 :     :              +- *(12) SortMergeJoin [l_partkey#21L], [p_partkey#4L], Inner\n               :                 :     :                 :- *(10) Sort [l_partkey#21L ASC NULLS FIRST], false, 0\n               :                 :     :                 :  +- ShuffleQueryStage 6\n               :                 :     :                 :     +- Exchange hashpartitioning(l_partkey#21L, 200), ENSURE_REQUIREMENTS, [plan_id=598]\n               :                 :     :                 :        +- *(9) Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49]\n               :                 :     :                 :           +- *(9) SortMergeJoin [l_orderkey#20L], [o_orderkey#41L], Inner\n               :                 :     :                 :              :- *(7) Sort [l_orderkey#20L ASC NULLS FIRST], false, 0\n               :                 :     :                 :              :  +- ShuffleQueryStage 0\n               :                 :     :                 :              :     +- Exchange hashpartitioning(l_orderkey#20L, 200), ENSURE_REQUIREMENTS, [plan_id=249]\n               :                 :     :                 :              :        +- *(1) Project [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26]\n               :                 :     :                 :              :           +- *(1) Filter ((isnotnull(l_partkey#21L) AND isnotnull(l_suppkey#22L)) AND isnotnull(l_orderkey#20L))\n               :                 :     :                 :              :              +- *(1) ColumnarToRow\n               :                 :     :                 :              :                 +- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#20L,l_partkey#21L,l_suppkey#22L,l_quantity#24,l_extendedprice#25,l_discount#26,l_shipdate#35] Batched: true, DataFilters: [isnotnull(l_partkey#21L), isnotnull(l_suppkey#22L), isnotnull(l_orderkey#20L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem], PartitionFilters: [], PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey), IsNotNull(l_orderkey)], ReadSchema: struct<l_orderkey:bigint,l_partkey:bigint,l_suppkey:bigint,l_quantity:decimal(12,2),l_extendedpri...\n               :                 :     :                 :              +- *(8) Sort [o_orderkey#41L ASC NULLS FIRST], false, 0\n               :                 :     :                 :                 +- ShuffleQueryStage 1\n               :                 :     :                 :                    +- Exchange hashpartitioning(o_orderkey#41L, 200), ENSURE_REQUIREMENTS, [plan_id=268]\n               :                 :     :                 :                       +- *(2) Filter isnotnull(o_orderkey#41L)\n               :                 :     :                 :                          +- *(2) ColumnarToRow\n               :                 :     :                 :                             +- FileScan parquet spark_catalog.tpch_100.orders[o_orderkey#41L,o_orderdate#49] Batched: true, DataFilters: [isnotnull(o_orderkey#41L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/orders], PartitionFilters: [], PushedFilters: [IsNotNull(o_orderkey)], ReadSchema: struct<o_orderkey:bigint>\n               :                 :     :                 +- *(11) Sort [p_partkey#4L ASC NULLS FIRST], false, 0\n               :                 :     :                    +- ShuffleQueryStage 2\n               :                 :     :                       +- Exchange hashpartitioning(p_partkey#4L, 200), ENSURE_REQUIREMENTS, [plan_id=291]\n               :                 :     :                          +- *(3) Project [p_partkey#4L]\n               :                 :     :                             +- *(3) Filter ((isnotnull(p_name#5) AND Contains(p_name#5, thistle)) AND isnotnull(p_partkey#4L))\n               :                 :     :                                +- *(3) ColumnarToRow\n               :                 :     :                                   +- FileScan parquet spark_catalog.tpch_100.part[p_partkey#4L,p_name#5,p_brand#12] Batched: true, DataFilters: [isnotnull(p_name#5), Contains(p_name#5, thistle), isnotnull(p_partkey#4L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/part], PartitionFilters: [], PushedFilters: [IsNotNull(p_name), StringContains(p_name,thistle), IsNotNull(p_partkey)], ReadSchema: struct<p_partkey:bigint,p_name:string>\n               :                 :     +- *(14) Sort [s_suppkey#13L ASC NULLS FIRST], false, 0\n               :                 :        +- AQEShuffleRead coalesced\n               :                 :           +- ShuffleQueryStage 3\n               :                 :              +- Exchange hashpartitioning(s_suppkey#13L, 200), ENSURE_REQUIREMENTS, [plan_id=314]\n               :                 :                 +- *(4) Filter (isnotnull(s_suppkey#13L) AND isnotnull(s_nationkey#16L))\n               :                 :                    +- *(4) ColumnarToRow\n               :                 :                       +- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#13L,s_nationkey#16L] Batched: true, DataFilters: [isnotnull(s_suppkey#13L), isnotnull(s_nationkey#16L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>\n               :                 +- BroadcastQueryStage 4\n               :                    +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=333]\n               :                       +- *(5) Filter isnotnull(n_nationkey#50L)\n               :                          +- *(5) ColumnarToRow\n               :                             +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#50L,n_name#51] Batched: true, DataFilters: [isnotnull(n_nationkey#50L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n               +- *(17) Sort [ps_suppkey#37L ASC NULLS FIRST, ps_partkey#36L ASC NULLS FIRST], false, 0\n                  +- AQEShuffleRead coalesced\n                     +- ShuffleQueryStage 5\n                        +- Exchange hashpartitioning(ps_suppkey#37L, ps_partkey#36L, 200), ENSURE_REQUIREMENTS, [plan_id=352]\n                           +- *(6) Filter (isnotnull(ps_suppkey#37L) AND isnotnull(ps_partkey#36L))\n                              +- *(6) ColumnarToRow\n                                 +- FileScan parquet spark_catalog.tpch_100.partsupp[ps_partkey#36L,ps_suppkey#37L,ps_supplycost#39] Batched: true, DataFilters: [isnotnull(ps_suppkey#37L), isnotnull(ps_partkey#36L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/partsupp], PartitionFilters: [], PushedFilters: [IsNotNull(ps_suppkey), IsNotNull(ps_partkey)], ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_supplycost:decimal(12,2)>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 461440,
        "inputRowCount" : 7000
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "8" : [ 0, 4680, 6240, 0, 4240, 4240, 0, 5680, 4240, 4240, 4240, 9143, 5680, 4240, 0, 4240, 4240, 5667, 0, 0, 0, 4240, 5680, 4240, 4240, 4240, 0, 0, 4240, 0, 4240, 4240, 0, 4240, 6226, 4240, 4680, 0, 6240, 0, 0, 4240, 4240, 6240, 0, 6840, 4240, 6240, 4240, 0, 4240, 0, 4240, 4240, 0, 5680, 4240, 0, 0, 4680, 0, 4240, 0, 0, 5654, 4240, 4240, 4240, 0, 0, 4240, 0, 4240, 4240, 4240, 0, 4240, 0, 0, 6240, 6240, 0, 0, 4240, 0, 0, 0, 0, 6240, 4240, 4240, 4240, 0, 4240, 5680, 5680, 0, 4240, 0, 8280, 4240, 4240, 0, 0, 4240, 9120, 5680, 4240, 4240, 5680, 4240, 0, 4240, 4240, 6240, 4240, 0, 0, 0, 6240, 4240, 5459, 6226, 0, 4240, 6240, 4680, 0, 4680, 0, 6840, 0, 0, 4240, 0, 0, 4240, 0, 5680, 0, 4240, 4240, 0, 4680, 0, 4240, 0, 4240, 0, 4680, 0, 0, 0, 4240, 4240, 4240, 0, 5680, 4680, 0, 0, 6044, 4240, 5654, 0, 6240, 0, 4240, 5680, 4240, 4240, 4240, 4240, 0, 5381, 5680, 5680, 4240, 4240, 6240, 0, 0, 4240, 0, 4680, 0, 4240, 0, 0, 0, 4240, 4240, 0, 0, 6240, 5680, 5667, 5160, 4240, 0 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 10,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 41, 51 ],
      "Objectives" : {
        "DurationInMs" : 267,
        "TotalTasksDurationInMs" : 222,
        "IOBytes" : {
          "Total" : 1173711,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1156428,
            "SW" : 17283
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -506209847,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 31273383544,
                "rowCount" : 601411222
              },
              "compileTime" : {
                "sizeInBytes" : 31273383544,
                "rowCount" : 601411222
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49] "
          },
          "1" : {
            "sign" : 537908823,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 40895963096,
                "rowCount" : 601411222
              },
              "compileTime" : {
                "sizeInBytes" : 40895963096,
                "rowCount" : 601411222
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (o_orderkey#41L = l_orderkey#20L) "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49]\n+- Join Inner, (o_orderkey#41L = l_orderkey#20L)\n   :- Project [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26]\n   :  +- Filter ((isnotnull(l_partkey#21L) AND isnotnull(l_suppkey#22L)) AND isnotnull(l_orderkey#20L))\n   :     +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#20L,l_partkey#21L,l_suppkey#22L,l_linenumber#23,l_quantity#24,l_extendedprice#25,l_discount#26,l_tax#27,l_returnflag#28,l_linestatus#29,l_commitdate#30,l_receiptdate#31,l_shipinstruct#32,l_shipmode#33,l_comment#34,l_shipdate#35] parquet\n   +- Project [o_orderkey#41L, o_orderdate#49]\n      +- Filter isnotnull(o_orderkey#41L)\n         +- Relation spark_catalog.tpch_100.orders[o_orderkey#41L,o_custkey#42L,o_orderstatus#43,o_totalprice#44,o_orderpriority#45,o_clerk#46,o_shippriority#47,o_comment#48,o_orderdate#49] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -1707914572,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [o_orderkey#41L, o_orderdate#49] Arguments: [o_orderkey#41L ASC NULLS FIRST], false, 0 "
          },
          "5" : {
            "sign" : 656219457,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 3600000000,
            "rowCount" : 150000000,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [o_orderkey#41L, o_orderdate#49] Arguments: 1 "
          },
          "1" : {
            "sign" : 377177831,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 40895963096,
            "rowCount" : 601411222,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [l_orderkey#20L] Right keys [1]: [o_orderkey#41L] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 423656773,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 31273383544,
            "rowCount" : 601411222,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49] Input [8]: [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderkey#41L, o_orderdate#49] "
          },
          "2" : {
            "sign" : -24405682,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [6]: [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26] Arguments: [l_orderkey#20L ASC NULLS FIRST], false, 0 "
          },
          "3" : {
            "sign" : -770461779,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 33602122512,
            "rowCount" : 600037902,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [6]: [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26] Arguments: 0 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "SortMergeJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49]\n+- SortMergeJoin [l_orderkey#20L], [o_orderkey#41L], Inner\n   :- Sort [l_orderkey#20L ASC NULLS FIRST], false, 0\n   :  +- ShuffleQueryStage 0\n   :     +- Exchange hashpartitioning(l_orderkey#20L, 200), ENSURE_REQUIREMENTS, [plan_id=249]\n   :        +- *(1) Project [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26]\n   :           +- *(1) Filter ((isnotnull(l_partkey#21L) AND isnotnull(l_suppkey#22L)) AND isnotnull(l_orderkey#20L))\n   :              +- *(1) ColumnarToRow\n   :                 +- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#20L,l_partkey#21L,l_suppkey#22L,l_quantity#24,l_extendedprice#25,l_discount#26,l_shipdate#35] Batched: true, DataFilters: [isnotnull(l_partkey#21L), isnotnull(l_suppkey#22L), isnotnull(l_orderkey#20L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem], PartitionFilters: [], PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey), IsNotNull(l_orderkey)], ReadSchema: struct<l_orderkey:bigint,l_partkey:bigint,l_suppkey:bigint,l_quantity:decimal(12,2),l_extendedpri...\n   +- Sort [o_orderkey#41L ASC NULLS FIRST], false, 0\n      +- ShuffleQueryStage 1\n         +- Exchange hashpartitioning(o_orderkey#41L, 200), ENSURE_REQUIREMENTS, [plan_id=268]\n            +- *(2) Filter isnotnull(o_orderkey#41L)\n               +- *(2) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpch_100.orders[o_orderkey#41L,o_orderdate#49] Batched: true, DataFilters: [isnotnull(o_orderkey#41L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/orders], PartitionFilters: [], PushedFilters: [IsNotNull(o_orderkey)], ReadSchema: struct<o_orderkey:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 37202122512,
        "inputRowCount" : 750037902
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "1" : [ 5862369, 5852855, 5862369, 5895668, 5819556, 5881397, 5881397, 5843341, 5876640, 5857612, 5862369, 5852855, 5838584, 5848098, 5867126, 5886154, 5871883, 5862369, 5867558, 5881397, 5881829, 5867126, 5876640, 5876640, 5900425, 5881397, 5895668, 5843341, 5852855, 5867126, 5852855, 5867126, 5848098, 5848098, 5876640, 5890911, 5890911, 5876640, 5857612, 5833827, 5881397, 5867126, 5857612, 5886154, 5862369, 5838584, 5900857, 5895668, 5876640, 5890911, 5862369, 5867126, 5867126, 5852855, 5857612, 5853287, 5881397, 5895668, 5867126, 5862369, 5867126, 5886154, 5905182, 5862369, 5862369, 5877072, 5867126, 5886154, 5871883, 5886154, 5857612, 5858044, 5876640, 5838584, 5843341, 5871883, 5895668, 5871883, 5886586, 5886154, 5905182, 5881397, 5843341, 5857612, 5838584, 5852855, 5871883, 5824313, 5852855, 5881397, 5843341, 5852855, 5857612, 5838584, 5876640, 5848098, 5852855, 5843341, 5867126, 5858044, 5871883, 5857612, 5852855, 5848098, 5848098, 5871883, 5857612, 5871883, 5881397, 5867126, 5843341, 5838584, 5867126, 5857612, 5867558, 5862369, 5857612, 5871883, 5852855, 5852855, 5867126, 5867126, 5871883, 5838584, 5857612, 5876640, 5900425, 5895668, 5843341, 5876640, 5886154, 5852855, 5886154, 5890911, 5867126, 5848098, 5867126, 5890911, 5857612, 5867126, 5871883, 5871883, 5862369, 5876640, 5871883, 5881397, 5858044, 5848098, 5862369, 5852855, 5838584, 5886154, 5833827, 5895668, 5886154, 5867126, 5900425, 5852855, 5867126, 5867126, 5876640, 5852855, 5862369, 5853287, 5867126, 5819556, 5895668, 5881397, 5871883, 5890911, 5881397, 5848098, 5871883, 5876640, 5876640, 5871883, 5857612, 5871883, 5871883, 5886154, 5862369, 5867126, 5852855, 5843341, 5895668, 5867126, 5852855, 5857612, 5881397, 5914696, 5867126, 5838584, 5886154, 5843341, 5890911, 5881397, 5857612, 5871883, 5848098, 5871883 ],
        "0" : [ 97985923, 98006309, 97763681, 98428781, 97305582, 98167078, 97482033, 98041654, 98564510, 98499332, 98361890, 97830572, 97270643, 97860251, 97478512, 98627214, 96880010, 97904351, 97700784, 98049816, 98291941, 98619631, 98330344, 98404874, 97849868, 98009969, 98362183, 98656904, 97974763, 98119297, 97834093, 97974917, 98757878, 98147270, 98076721, 97936546, 98112066, 98190471, 97443013, 97689455, 97281957, 98714413, 98041654, 97935897, 97798733, 98749619, 98816047, 98307902, 97825045, 98840900, 98361890, 98573265, 97765849, 98150793, 97865485, 97552291, 98155434, 97921354, 98012787, 98253214, 97935769, 98478807, 99136294, 97417901, 97446673, 97869145, 99136422, 98749449, 97446673, 97763145, 97126159, 98080381, 98151117, 98749295, 97493193, 98784825, 98643190, 97693115, 98925325, 98397559, 98472288, 97974917, 97807316, 97982556, 97771027, 98432302, 98467380, 97620382, 98012558, 98534538, 98076860, 98432765, 97517409, 98272835, 98147005, 97809893, 98096805, 99136422, 97194816, 97411467, 98756964, 98151117, 97798594, 97569422, 97900563, 98352552, 98432765, 98049020, 98016403, 97798733, 97989598, 97991511, 98229495, 97834093, 97795073, 98538213, 97689748, 98619785, 97904675, 98076721, 97915511, 97663752, 97795073, 97384844, 97658063, 97971242, 98084262, 98816186, 97552291, 97865242, 98714413, 97094474, 98217417, 98502853, 97625153, 97684093, 98045175, 99030943, 98006602, 97657909, 98619785, 97906617, 98288250, 98220823, 97513564, 98186323, 97982263, 97243599, 98185999, 97552152, 97372740, 98069392, 97533663, 97860544, 98499193, 97885723, 98608795, 97823910, 97939557, 97654388, 97165179, 98608332, 98701813, 97839782, 98112220, 97481740, 97947057, 98886598, 98217302, 98358369, 99171767, 98678744, 98713950, 98308195, 98886922, 97937236, 98010123, 98573589, 98749805, 98893218, 97865624, 98570068, 97871734, 97763527, 98237953, 99550602, 99103760, 98499486, 98494813, 99179139, 98068259, 97801322, 98153706, 98009830, 97975087, 98691940, 98569477, 97935897, 98361542, 97930802 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 39,
        "FinishedTasksTotalTimeInMs" : 9252.0,
        "FinishedTasksDistributionInMs" : [ 11.0, 48.0, 249.0, 366.0, 890.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 10 ],
      "Objectives" : {
        "DurationInMs" : 62754,
        "TotalTasksDurationInMs" : 930961,
        "IOBytes" : {
          "Total" : 36830123019,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 19918728761,
            "SW" : 16911394258
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -2029617665,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 33602122512,
                "rowCount" : 600037902
              },
              "compileTime" : {
                "sizeInBytes" : 33602122512,
                "rowCount" : 600037902
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26] "
          },
          "1" : {
            "sign" : -993113324,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 111607049772,
                "rowCount" : 600037902
              },
              "compileTime" : {
                "sizeInBytes" : 111607049772,
                "rowCount" : 600037902
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(l_partkey#21L) AND isnotnull(l_suppkey#22L)) AND isnotnull(l_orderkey#20L)) "
          },
          "2" : {
            "sign" : 559913504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 111607049772,
                "rowCount" : 600037902
              },
              "compileTime" : {
                "sizeInBytes" : 111607049772,
                "rowCount" : 600037902
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_linenumber#23, l_quantity#24, l_extendedprice#25, l_discount#26, l_tax#27, l_returnflag#28, l_linestatus#29, l_commitdate#30, l_receiptdate#31, l_shipinstruct#32, l_shipmode#33, l_comment#34, l_shipdate#35], `spark_catalog`.`tpch_100`.`lineitem`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26]\n+- Filter ((isnotnull(l_partkey#21L) AND isnotnull(l_suppkey#22L)) AND isnotnull(l_orderkey#20L))\n   +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#20L,l_partkey#21L,l_suppkey#22L,l_linenumber#23,l_quantity#24,l_extendedprice#25,l_discount#26,l_tax#27,l_returnflag#28,l_linestatus#29,l_commitdate#30,l_receiptdate#31,l_shipinstruct#32,l_shipmode#33,l_comment#34,l_shipdate#35] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -217087577,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 33602122512,
            "rowCount" : 600037902,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26] Input [7]: [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, l_shipdate#35] "
          },
          "1" : {
            "sign" : -80569166,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 33602122512,
            "rowCount" : 600037902,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [7]: [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, l_shipdate#35] Condition : ((isnotnull(l_partkey#21L) AND isnotnull(l_suppkey#22L)) AND isnotnull(l_orderkey#20L)) "
          },
          "2" : {
            "sign" : -2027263706,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 33602122512,
            "rowCount" : 600037902,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.lineitem Output [7]: [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, l_shipdate#35] Batched: true Location: CatalogFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem] PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey), IsNotNull(l_orderkey)] ReadSchema: struct<l_orderkey:bigint,l_partkey:bigint,l_suppkey:bigint,l_quantity:decimal(12,2),l_extendedprice:decimal(12,2),l_discount:decimal(12,2)> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpch_100.lineitem",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26]\n+- Filter ((isnotnull(l_partkey#21L) AND isnotnull(l_suppkey#22L)) AND isnotnull(l_orderkey#20L))\n   +- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#20L,l_partkey#21L,l_suppkey#22L,l_quantity#24,l_extendedprice#25,l_discount#26,l_shipdate#35] Batched: true, DataFilters: [isnotnull(l_partkey#21L), isnotnull(l_suppkey#22L), isnotnull(l_orderkey#20L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem], PartitionFilters: [], PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey), IsNotNull(l_orderkey)], ReadSchema: struct<l_orderkey:bigint,l_partkey:bigint,l_suppkey:bigint,l_quantity:decimal(12,2),l_extendedpri...\n"
      },
      "IM" : {
        "inputSizeInBytes" : 33602122512,
        "inputRowCount" : 600037902
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 2 ],
      "Objectives" : {
        "DurationInMs" : 34126,
        "TotalTasksDurationInMs" : 521916,
        "IOBytes" : {
          "Total" : 32495436364,
          "Details" : {
            "IR" : 13709136493,
            "IW" : 0,
            "SR" : 0,
            "SW" : 18786299871
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 377419375,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 900,
                "rowCount" : 25
              },
              "compileTime" : {
                "sizeInBytes" : 900,
                "rowCount" : 25
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_nationkey#50L, n_name#51] "
          },
          "1" : {
            "sign" : -1841832386,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3275,
                "rowCount" : 25
              },
              "compileTime" : {
                "sizeInBytes" : 3275,
                "rowCount" : 25
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(n_nationkey#50L) "
          },
          "2" : {
            "sign" : -741175738,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3275,
                "rowCount" : 25
              },
              "compileTime" : {
                "sizeInBytes" : 3275,
                "rowCount" : 25
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [n_nationkey#50L, n_name#51, n_regionkey#52L, n_comment#53], `spark_catalog`.`tpch_100`.`nation`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [n_nationkey#50L, n_name#51]\n+- Filter isnotnull(n_nationkey#50L)\n   +- Relation spark_catalog.tpch_100.nation[n_nationkey#50L,n_name#51,n_regionkey#52L,n_comment#53] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1636301148,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 900,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [n_nationkey#50L, n_name#51] Condition : isnotnull(n_nationkey#50L) "
          },
          "1" : {
            "sign" : -1272849052,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 900,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.nation Output [2]: [n_nationkey#50L, n_name#51] Batched: true Location: InMemoryFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation] PushedFilters: [IsNotNull(n_nationkey)] ReadSchema: struct<n_nationkey:bigint,n_name:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpch_100.nation",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull(n_nationkey#50L)\n+- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#50L,n_name#51] Batched: true, DataFilters: [isnotnull(n_nationkey#50L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 900,
        "inputRowCount" : 25
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 0 ],
      "Objectives" : {
        "DurationInMs" : 3451,
        "TotalTasksDurationInMs" : 3404,
        "IOBytes" : {
          "Total" : 2751,
          "Details" : {
            "IR" : 2751,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1561781683,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3000000000,
                "rowCount" : 150000000
              },
              "compileTime" : {
                "sizeInBytes" : 3000000000,
                "rowCount" : 150000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [o_orderkey#41L, o_orderdate#49] "
          },
          "1" : {
            "sign" : 1428154615,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 24300000000,
                "rowCount" : 150000000
              },
              "compileTime" : {
                "sizeInBytes" : 24300000000,
                "rowCount" : 150000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(o_orderkey#41L) "
          },
          "2" : {
            "sign" : 170474439,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 24300000000,
                "rowCount" : 150000000
              },
              "compileTime" : {
                "sizeInBytes" : 24300000000,
                "rowCount" : 150000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [o_orderkey#41L, o_custkey#42L, o_orderstatus#43, o_totalprice#44, o_orderpriority#45, o_clerk#46, o_shippriority#47, o_comment#48, o_orderdate#49], `spark_catalog`.`tpch_100`.`orders`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [o_orderkey#41L, o_orderdate#49]\n+- Filter isnotnull(o_orderkey#41L)\n   +- Relation spark_catalog.tpch_100.orders[o_orderkey#41L,o_custkey#42L,o_orderstatus#43,o_totalprice#44,o_orderpriority#45,o_clerk#46,o_shippriority#47,o_comment#48,o_orderdate#49] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1726928361,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 3000000000,
            "rowCount" : 150000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [o_orderkey#41L, o_orderdate#49] Condition : isnotnull(o_orderkey#41L) "
          },
          "1" : {
            "sign" : 2016993561,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 3000000000,
            "rowCount" : 150000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.orders Output [2]: [o_orderkey#41L, o_orderdate#49] Batched: true Location: CatalogFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/orders] PushedFilters: [IsNotNull(o_orderkey)] ReadSchema: struct<o_orderkey:bigint> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpch_100.orders",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull(o_orderkey#41L)\n+- FileScan parquet spark_catalog.tpch_100.orders[o_orderkey#41L,o_orderdate#49] Batched: true, DataFilters: [isnotnull(o_orderkey#41L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/orders], PartitionFilters: [], PushedFilters: [IsNotNull(o_orderkey)], ReadSchema: struct<o_orderkey:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3000000000,
        "inputRowCount" : 150000000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 4 ],
      "Objectives" : {
        "DurationInMs" : 6926,
        "TotalTasksDurationInMs" : 100500,
        "IOBytes" : {
          "Total" : 2039265294,
          "Details" : {
            "IR" : 906836404,
            "IW" : 0,
            "SR" : 0,
            "SW" : 1132428890
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1645768682,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 31230311684,
                "rowCount" : 600582917
              },
              "compileTime" : {
                "sizeInBytes" : 31230311684,
                "rowCount" : 600582917
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49] "
          },
          "1" : {
            "sign" : 1982670230,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 36034975020,
                "rowCount" : 600582917
              },
              "compileTime" : {
                "sizeInBytes" : 36034975020,
                "rowCount" : 600582917
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (p_partkey#4L = l_partkey#21L) "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49]\n+- Join Inner, (p_partkey#4L = l_partkey#21L)\n   :- Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49]\n   :  +- Join Inner, (o_orderkey#41L = l_orderkey#20L)\n   :     :- Project [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26]\n   :     :  +- Filter ((isnotnull(l_partkey#21L) AND isnotnull(l_suppkey#22L)) AND isnotnull(l_orderkey#20L))\n   :     :     +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#20L,l_partkey#21L,l_suppkey#22L,l_linenumber#23,l_quantity#24,l_extendedprice#25,l_discount#26,l_tax#27,l_returnflag#28,l_linestatus#29,l_commitdate#30,l_receiptdate#31,l_shipinstruct#32,l_shipmode#33,l_comment#34,l_shipdate#35] parquet\n   :     +- Project [o_orderkey#41L, o_orderdate#49]\n   :        +- Filter isnotnull(o_orderkey#41L)\n   :           +- Relation spark_catalog.tpch_100.orders[o_orderkey#41L,o_custkey#42L,o_orderstatus#43,o_totalprice#44,o_orderpriority#45,o_clerk#46,o_shippriority#47,o_comment#48,o_orderdate#49] parquet\n   +- Project [p_partkey#4L]\n      +- Filter ((isnotnull(p_name#5) AND Contains(p_name#5, thistle)) AND isnotnull(p_partkey#4L))\n         +- Relation spark_catalog.tpch_100.part[p_partkey#4L,p_name#5,p_mfgr#6,p_type#7,p_size#8,p_container#9,p_retailprice#10,p_comment#11,p_brand#12] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -76625231,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [1]: [p_partkey#4L] Arguments: [p_partkey#4L ASC NULLS FIRST], false, 0 "
          },
          "5" : {
            "sign" : 1655655935,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 17399408,
            "rowCount" : 1087463,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [p_partkey#4L] Arguments: 2 "
          },
          "1" : {
            "sign" : -1800722561,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 36034975020,
            "rowCount" : 600582917,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [l_partkey#21L] Right keys [1]: [p_partkey#4L] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : -751560177,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 31230311684,
            "rowCount" : 600582917,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [6]: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49] Input [7]: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49, p_partkey#4L] "
          },
          "2" : {
            "sign" : -1526575018,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [6]: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49] Arguments: [l_partkey#21L ASC NULLS FIRST], false, 0 "
          },
          "3" : {
            "sign" : 871330929,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 33602122512,
            "rowCount" : 600037902,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [6]: [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49] Arguments: 6 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "SortMergeJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49]\n+- SortMergeJoin [l_partkey#21L], [p_partkey#4L], Inner\n   :- Sort [l_partkey#21L ASC NULLS FIRST], false, 0\n   :  +- ShuffleQueryStage 6\n   :     +- Exchange hashpartitioning(l_partkey#21L, 200), ENSURE_REQUIREMENTS, [plan_id=598]\n   :        +- *(9) Project [l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26, o_orderdate#49]\n   :           +- *(9) SortMergeJoin [l_orderkey#20L], [o_orderkey#41L], Inner\n   :              :- *(7) Sort [l_orderkey#20L ASC NULLS FIRST], false, 0\n   :              :  +- ShuffleQueryStage 0\n   :              :     +- Exchange hashpartitioning(l_orderkey#20L, 200), ENSURE_REQUIREMENTS, [plan_id=249]\n   :              :        +- *(1) Project [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_quantity#24, l_extendedprice#25, l_discount#26]\n   :              :           +- *(1) Filter ((isnotnull(l_partkey#21L) AND isnotnull(l_suppkey#22L)) AND isnotnull(l_orderkey#20L))\n   :              :              +- *(1) ColumnarToRow\n   :              :                 +- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#20L,l_partkey#21L,l_suppkey#22L,l_quantity#24,l_extendedprice#25,l_discount#26,l_shipdate#35] Batched: true, DataFilters: [isnotnull(l_partkey#21L), isnotnull(l_suppkey#22L), isnotnull(l_orderkey#20L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem], PartitionFilters: [], PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey), IsNotNull(l_orderkey)], ReadSchema: struct<l_orderkey:bigint,l_partkey:bigint,l_suppkey:bigint,l_quantity:decimal(12,2),l_extendedpri...\n   :              +- *(8) Sort [o_orderkey#41L ASC NULLS FIRST], false, 0\n   :                 +- ShuffleQueryStage 1\n   :                    +- Exchange hashpartitioning(o_orderkey#41L, 200), ENSURE_REQUIREMENTS, [plan_id=268]\n   :                       +- *(2) Filter isnotnull(o_orderkey#41L)\n   :                          +- *(2) ColumnarToRow\n   :                             +- FileScan parquet spark_catalog.tpch_100.orders[o_orderkey#41L,o_orderdate#49] Batched: true, DataFilters: [isnotnull(o_orderkey#41L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/orders], PartitionFilters: [], PushedFilters: [IsNotNull(o_orderkey)], ReadSchema: struct<o_orderkey:bigint>\n   +- Sort [p_partkey#4L ASC NULLS FIRST], false, 0\n      +- ShuffleQueryStage 2\n         +- Exchange hashpartitioning(p_partkey#4L, 200), ENSURE_REQUIREMENTS, [plan_id=291]\n            +- *(3) Project [p_partkey#4L]\n               +- *(3) Filter ((isnotnull(p_name#5) AND Contains(p_name#5, thistle)) AND isnotnull(p_partkey#4L))\n                  +- *(3) ColumnarToRow\n                     +- FileScan parquet spark_catalog.tpch_100.part[p_partkey#4L,p_name#5,p_brand#12] Batched: true, DataFilters: [isnotnull(p_name#5), Contains(p_name#5, thistle), isnotnull(p_partkey#4L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/part], PartitionFilters: [], PushedFilters: [IsNotNull(p_name), StringContains(p_name,thistle), IsNotNull(p_partkey)], ReadSchema: struct<p_partkey:bigint,p_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 33619521920,
        "inputRowCount" : 601125365
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "2" : [ 34114, 34138, 34392, 35041, 34635, 34774, 33708, 35030, 34646, 37031, 34531, 34394, 34251, 35043, 35747, 35158, 34976, 34240, 34416, 34335, 34416, 35398, 35145, 34785, 34368, 34544, 33754, 34509, 34939, 35041, 34648, 34785, 33745, 34288, 34809, 34392, 33752, 34277, 35352, 35853, 33615, 34529, 34008, 34500, 34321, 34101, 35122, 34636, 34608, 36251, 34937, 35019, 35169, 35173, 34913, 34681, 35551, 35330, 34774, 34776, 34251, 33094, 34381, 34090, 34824, 34136, 34904, 34392, 34299, 34785, 34112, 34785, 34774, 33778, 34008, 33904, 33860, 33823, 34917, 36418, 35147, 35067, 36085, 35191, 35098, 34370, 34915, 34253, 34065, 33719, 35447, 35067, 34659, 35285, 34891, 34474, 34624, 34496, 34266, 35319, 34240, 34251, 34787, 34915, 34657, 35835, 34251, 35732, 34509, 35123, 34913, 34763, 33591, 34496, 34253, 34520, 33986, 34544, 34242, 34379, 34868, 34820, 34557, 35067, 34820, 34659, 34778, 35489, 34867, 35842, 33500, 35006, 34939, 33476, 33997, 34220, 34787, 33984, 33589, 34763, 35614, 36213, 34418, 35354, 34136, 33604, 34368, 34476, 34379, 35158, 34498, 33463, 34924, 34277, 34229, 35169, 35679, 35425, 35158, 34533, 35414, 34403, 34646, 34970, 34112, 34635, 34561, 34359, 35645, 34264, 35745, 35052, 35376, 33639, 35054, 34613, 36027, 35156, 34444, 34520, 34776, 33743, 34266, 35195, 34637, 35428, 34253, 34529, 34846, 34891, 34496, 34893, 36422, 35529, 34950, 34650, 34741, 35412, 34668, 34276 ],
        "5" : [ 85625000, 86221400, 87925400, 86903000, 87499400, 86051000, 86051000, 88138400, 86903000, 87669800, 86690000, 86604800, 87030800, 86477000, 86604800, 86178800, 86562200, 86562200, 87371600, 87073400, 85838000, 87371600, 89331200, 88521800, 86434400, 86860400, 86690000, 85582400, 86477000, 86306600, 86519600, 87414200, 86136200, 86349200, 86775200, 87712400, 86178800, 86562200, 86178800, 87712400, 86647400, 86690000, 86945600, 86306600, 85838000, 86391800, 86732600, 88649600, 85880600, 87584600, 85880600, 88394000, 86732600, 88521800, 86391800, 86264000, 86988200, 85838000, 89757200, 87030800, 85880600, 87286400, 86178800, 86690000, 86008400, 86647400, 86008400, 87116000, 86221400, 86562200, 86008400, 88905200, 86391800, 85838000, 86945600, 87797600, 86519600, 88734800, 87030800, 86221400, 86562200, 85923200, 86903000, 86349200, 87201200, 86434400, 85880600, 86008400, 85412000, 85582400, 86604800, 86562200, 89331200, 86860400, 86775200, 85923200, 87243800, 86264000, 85795400, 85923200, 88181000, 86051000, 88436600, 86306600, 88692200, 88053200, 85880600, 87158600, 86860400, 87840200, 86349200, 86647400, 86690000, 88095800, 86221400, 87243800, 85923200, 86562200, 88734800, 86604800, 87073400, 85838000, 85923200, 87201200, 86306600, 88181000, 87329000, 85795400, 86945600, 86136200, 86136200, 86817800, 85923200, 85710200, 88010600, 86306600, 87669800, 85838000, 87030800, 88564400, 86860400, 87201200, 85838000, 85625000, 87030800, 85795400, 87073400, 87627200, 86860400, 87286400, 86178800, 87456800, 85752800, 86604800, 87968000, 86690000, 86562200, 86008400, 86860400, 86306600, 87329000, 86349200, 87371600, 85880600, 87669800, 85752800, 87243800, 86093600, 86093600, 87073400, 88436600, 87371600, 87073400, 86817800, 87584600, 86988200, 86690000, 86477000, 86647400, 86519600, 85412000, 86051000, 85710200, 87329000, 85838000, 90353600, 86477000, 87797600, 88649600, 87073400, 86519600, 87968000, 86562200, 88607000, 85880600, 86051000, 86860400, 86860400, 86519600, 86732600 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 15 ],
      "Objectives" : {
        "DurationInMs" : 17970,
        "TotalTasksDurationInMs" : 278082,
        "IOBytes" : {
          "Total" : 17587824393,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 16918010868,
            "SW" : 669813525
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1655166433,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 320000000,
                "rowCount" : 20000000
              },
              "compileTime" : {
                "sizeInBytes" : 320000000,
                "rowCount" : 20000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [p_partkey#4L] "
          },
          "1" : {
            "sign" : 963828806,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3960000000,
                "rowCount" : 20000000
              },
              "compileTime" : {
                "sizeInBytes" : 3960000000,
                "rowCount" : 20000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(p_name#5) AND Contains(p_name#5, thistle)) AND isnotnull(p_partkey#4L)) "
          },
          "2" : {
            "sign" : -879419419,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3960000000,
                "rowCount" : 20000000
              },
              "compileTime" : {
                "sizeInBytes" : 3960000000,
                "rowCount" : 20000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [p_partkey#4L, p_name#5, p_mfgr#6, p_type#7, p_size#8, p_container#9, p_retailprice#10, p_comment#11, p_brand#12], `spark_catalog`.`tpch_100`.`part`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [p_partkey#4L]\n+- Filter ((isnotnull(p_name#5) AND Contains(p_name#5, thistle)) AND isnotnull(p_partkey#4L))\n   +- Relation spark_catalog.tpch_100.part[p_partkey#4L,p_name#5,p_mfgr#6,p_type#7,p_size#8,p_container#9,p_retailprice#10,p_comment#11,p_brand#12] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1759682943,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 320000000,
            "rowCount" : 20000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [p_partkey#4L] Input [3]: [p_partkey#4L, p_name#5, p_brand#12] "
          },
          "1" : {
            "sign" : 755286588,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 320000000,
            "rowCount" : 20000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [p_partkey#4L, p_name#5, p_brand#12] Condition : ((isnotnull(p_name#5) AND Contains(p_name#5, thistle)) AND isnotnull(p_partkey#4L)) "
          },
          "2" : {
            "sign" : 17208061,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 320000000,
            "rowCount" : 20000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.part Output [3]: [p_partkey#4L, p_name#5, p_brand#12] Batched: true Location: CatalogFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/part] PushedFilters: [IsNotNull(p_name), StringContains(p_name,thistle), IsNotNull(p_partkey)] ReadSchema: struct<p_partkey:bigint,p_name:string> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpch_100.part",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [p_partkey#4L]\n+- Filter ((isnotnull(p_name#5) AND Contains(p_name#5, thistle)) AND isnotnull(p_partkey#4L))\n   +- FileScan parquet spark_catalog.tpch_100.part[p_partkey#4L,p_name#5,p_brand#12] Batched: true, DataFilters: [isnotnull(p_name#5), Contains(p_name#5, thistle), isnotnull(p_partkey#4L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/part], PartitionFilters: [], PushedFilters: [IsNotNull(p_name), StringContains(p_name,thistle), IsNotNull(p_partkey)], ReadSchema: struct<p_partkey:bigint,p_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 320000000,
        "inputRowCount" : 20000000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 5 ],
      "Objectives" : {
        "DurationInMs" : 6910,
        "TotalTasksDurationInMs" : 9086,
        "IOBytes" : {
          "Total" : 380576992,
          "Details" : {
            "IR" : 373960382,
            "IW" : 0,
            "SR" : 0,
            "SW" : 6616610
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702226597298,
  "SQLEndTimeInMs" : 1702226741059,
  "Objectives" : {
    "DurationInMs" : 143761,
    "IOBytes" : {
      "Total" : 95482773005,
      "Details" : {
        "IR" : 16084792297,
        "IW" : 0,
        "SR" : 39699279461,
        "SW" : 39698701247
      }
    }
  }
}
