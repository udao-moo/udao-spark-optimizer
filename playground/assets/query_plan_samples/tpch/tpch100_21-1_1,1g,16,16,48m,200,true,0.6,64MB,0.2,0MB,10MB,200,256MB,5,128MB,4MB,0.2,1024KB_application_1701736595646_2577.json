{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "12" : {
          "sign" : -793416515,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 4800303216,
          "rowCount" : 200012634,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [l_orderkey#11L, l_suppkey#13L] "
        },
        "8" : {
          "sign" : -1478001799,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 9622579552,
          "rowCount" : 601411222,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [l_suppkey#13L] "
        },
        "19" : {
          "sign" : -367309280,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 111607049772,
          "rowCount" : 600037902,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [l_orderkey#60L, l_partkey#61L, l_suppkey#62L, l_linenumber#63, l_quantity#64, l_extendedprice#65, l_discount#66, l_tax#67, l_returnflag#68, l_linestatus#69, l_commitdate#70, l_receiptdate#71, l_shipinstruct#72, l_shipmode#73, l_comment#74, l_shipdate#75], `spark_catalog`.`tpch_100`.`lineitem`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "23" : {
          "sign" : 101317295,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 54000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [s_suppkey#4L, s_name#5, s_nationkey#7L] "
        },
        "4" : {
          "sign" : -1458516145,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 45161670,
          "rowCount" : 1188465,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [s_name#5] "
        },
        "15" : {
          "sign" : 1488150229,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 14400909648,
          "rowCount" : 600037902,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [l_orderkey#44L, l_suppkey#46L] "
        },
        "11" : {
          "sign" : -161113441,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 4800303216,
          "rowCount" : 200012634,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: LeftSemi, ((l_orderkey#44L = l_orderkey#11L) AND NOT (l_suppkey#46L = l_suppkey#13L)) "
        },
        "9" : {
          "sign" : -149917205,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 19245159104,
          "rowCount" : 601411222,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (o_orderkey#27L = l_orderkey#11L) "
        },
        "22" : {
          "sign" : 1151370137,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 24300000000,
          "rowCount" : 150000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [o_orderkey#27L, o_custkey#28L, o_orderstatus#29, o_totalprice#30, o_orderpriority#31, o_clerk#32, o_shippriority#33, o_comment#34, o_orderdate#35], `spark_catalog`.`tpch_100`.`orders`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "26" : {
          "sign" : -1468228859,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 108,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(n_nationkey#36L, 42), 1, 38, 0, 0) AS bloomFilter#79] "
        },
        "13" : {
          "sign" : -957302628,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 37202349924,
          "rowCount" : 200012634,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((((isnotnull(l_receiptdate#22) AND isnotnull(l_commitdate#21)) AND (l_receiptdate#22 > l_commitdate#21)) AND isnotnull(l_suppkey#13L)) AND isnotnull(l_orderkey#11L)) "
        },
        "24" : {
          "sign" : 2146392517,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 201000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(s_suppkey#4L) AND isnotnull(s_nationkey#7L)) AND might_contain(scalar-subquery#80 [], xxhash64(s_nationkey#7L, 42))) "
        },
        "16" : {
          "sign" : -1057995158,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 111607049772,
          "rowCount" : 600037902,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [l_orderkey#44L, l_partkey#45L, l_suppkey#46L, l_linenumber#47, l_quantity#48, l_extendedprice#49, l_discount#50, l_tax#51, l_returnflag#52, l_linestatus#53, l_commitdate#54, l_receiptdate#55, l_shipinstruct#56, l_shipmode#57, l_comment#58, l_shipdate#59], `spark_catalog`.`tpch_100`.`lineitem`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "5" : {
          "sign" : 46471989,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 64177110,
          "rowCount" : 1188465,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#7L = n_nationkey#36L) "
        },
        "10" : {
          "sign" : -1977620236,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 4800303216,
          "rowCount" : 200012634,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: LeftAnti, ((l_orderkey#60L = l_orderkey#11L) AND NOT (l_suppkey#62L = l_suppkey#13L)) "
        },
        "21" : {
          "sign" : 1321593992,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 8100000000,
          "rowCount" : 50000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(o_orderstatus#29) AND (o_orderstatus#29 = F)) AND isnotnull(o_orderkey#27L)) "
        },
        "6" : {
          "sign" : -449958776,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 27628083782,
          "rowCount" : 600610517,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [s_name#5, s_nationkey#7L] "
        },
        "1" : {
          "sign" : -1171755985,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
          "sizeInBytes" : 89792,
          "rowCount" : 1952,
          "isRuntime" : false,
          "predicate" : " (unknown) LocalLimit Arguments: 100 "
        },
        "17" : {
          "sign" : 1822974778,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 4800303216,
          "rowCount" : 200012634,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [l_orderkey#60L, l_suppkey#62L] "
        },
        "25" : {
          "sign" : -265163964,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 201000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_suppkey#4L, s_name#5, s_address#6, s_nationkey#7L, s_phone#8, s_acctbal#9, s_comment#10], `spark_catalog`.`tpch_100`.`supplier`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "14" : {
          "sign" : -61390731,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 111607049772,
          "rowCount" : 600037902,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [l_orderkey#11L, l_partkey#12L, l_suppkey#13L, l_linenumber#14, l_quantity#15, l_extendedprice#16, l_discount#17, l_tax#18, l_returnflag#19, l_linestatus#20, l_commitdate#21, l_receiptdate#22, l_shipinstruct#23, l_shipmode#24, l_comment#25, l_shipdate#26], `spark_catalog`.`tpch_100`.`lineitem`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "0" : {
          "sign" : -1276452770,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
          "sizeInBytes" : 3600,
          "rowCount" : 100,
          "isRuntime" : false,
          "predicate" : " (unknown) GlobalLimit Arguments: 100 "
        },
        "20" : {
          "sign" : 1181381854,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 800000000,
          "rowCount" : 50000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [o_orderkey#27L] "
        },
        "27" : {
          "sign" : 1834175151,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 16,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [n_nationkey#36L] "
        },
        "2" : {
          "sign" : -971624332,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 89792,
          "rowCount" : 1952,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [numwait#0L DESC NULLS LAST, s_name#5 ASC NULLS FIRST], true "
        },
        "18" : {
          "sign" : -1403818305,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 37202349924,
          "rowCount" : 200012634,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(l_receiptdate#71) AND isnotnull(l_commitdate#70)) AND (l_receiptdate#71 > l_commitdate#70)) "
        },
        "7" : {
          "sign" : -1796480622,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 37237852054,
          "rowCount" : 600610517,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#4L = l_suppkey#13L) "
        },
        "29" : {
          "sign" : -2109773610,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3275,
          "rowCount" : 25,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [n_nationkey#36L, n_name#37, n_regionkey#38L, n_comment#39], `spark_catalog`.`tpch_100`.`nation`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "3" : {
          "sign" : -1748649871,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 89792,
          "rowCount" : 1952,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [s_name#5], [s_name#5, count(1) AS numwait#0L] "
        },
        "28" : {
          "sign" : 1951646793,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 131,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(n_name#37) AND (n_name#37 = PERU)) AND isnotnull(n_nationkey#36L)) "
        }
      },
      "links" : [ {
        "fromId" : 14,
        "fromName" : "LogicalRelation",
        "toId" : 13,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Filter",
        "toId" : 12,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 12,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "LogicalRelation",
        "toId" : 15,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "Join",
        "toId" : 10,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "LogicalRelation",
        "toId" : 18,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "Filter",
        "toId" : 17,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Project",
        "toId" : 10,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Join",
        "toId" : 9,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "LogicalRelation",
        "toId" : 21,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Filter",
        "toId" : 20,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Join",
        "toId" : 8,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "LogicalRelation",
        "toId" : 24,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 29,
        "fromName" : "LogicalRelation",
        "toId" : 28,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "Filter",
        "toId" : 27,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "Project",
        "toId" : 26,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "Aggregate",
        "toId" : 24,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 24,
        "fromName" : "Filter",
        "toId" : 23,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Join",
        "toId" : 6,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Project",
        "toId" : 5,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "Project",
        "toId" : 5,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Join",
        "toId" : 4,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Project",
        "toId" : 3,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Aggregate",
        "toId" : 2,
        "toName" : "Sort",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Sort",
        "toId" : 1,
        "toName" : "LocalLimit",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "LocalLimit",
        "toId" : 0,
        "toName" : "GlobalLimit",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [numwait#0L DESC NULLS LAST, s_name#5 ASC NULLS FIRST], true\n      +- Aggregate [s_name#5], [s_name#5, count(1) AS numwait#0L]\n         +- Project [s_name#5]\n            +- Join Inner, (s_nationkey#7L = n_nationkey#36L)\n               :- Project [s_name#5, s_nationkey#7L]\n               :  +- Join Inner, (s_suppkey#4L = l_suppkey#13L)\n               :     :- Project [l_suppkey#13L]\n               :     :  +- Join Inner, (o_orderkey#27L = l_orderkey#11L)\n               :     :     :- Join LeftAnti, ((l_orderkey#60L = l_orderkey#11L) AND NOT (l_suppkey#62L = l_suppkey#13L))\n               :     :     :  :- Join LeftSemi, ((l_orderkey#44L = l_orderkey#11L) AND NOT (l_suppkey#46L = l_suppkey#13L))\n               :     :     :  :  :- Project [l_orderkey#11L, l_suppkey#13L]\n               :     :     :  :  :  +- Filter ((((isnotnull(l_receiptdate#22) AND isnotnull(l_commitdate#21)) AND (l_receiptdate#22 > l_commitdate#21)) AND isnotnull(l_suppkey#13L)) AND isnotnull(l_orderkey#11L))\n               :     :     :  :  :     +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#11L,l_partkey#12L,l_suppkey#13L,l_linenumber#14,l_quantity#15,l_extendedprice#16,l_discount#17,l_tax#18,l_returnflag#19,l_linestatus#20,l_commitdate#21,l_receiptdate#22,l_shipinstruct#23,l_shipmode#24,l_comment#25,l_shipdate#26] parquet\n               :     :     :  :  +- Project [l_orderkey#44L, l_suppkey#46L]\n               :     :     :  :     +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#44L,l_partkey#45L,l_suppkey#46L,l_linenumber#47,l_quantity#48,l_extendedprice#49,l_discount#50,l_tax#51,l_returnflag#52,l_linestatus#53,l_commitdate#54,l_receiptdate#55,l_shipinstruct#56,l_shipmode#57,l_comment#58,l_shipdate#59] parquet\n               :     :     :  +- Project [l_orderkey#60L, l_suppkey#62L]\n               :     :     :     +- Filter ((isnotnull(l_receiptdate#71) AND isnotnull(l_commitdate#70)) AND (l_receiptdate#71 > l_commitdate#70))\n               :     :     :        +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#60L,l_partkey#61L,l_suppkey#62L,l_linenumber#63,l_quantity#64,l_extendedprice#65,l_discount#66,l_tax#67,l_returnflag#68,l_linestatus#69,l_commitdate#70,l_receiptdate#71,l_shipinstruct#72,l_shipmode#73,l_comment#74,l_shipdate#75] parquet\n               :     :     +- Project [o_orderkey#27L]\n               :     :        +- Filter ((isnotnull(o_orderstatus#29) AND (o_orderstatus#29 = F)) AND isnotnull(o_orderkey#27L))\n               :     :           +- Relation spark_catalog.tpch_100.orders[o_orderkey#27L,o_custkey#28L,o_orderstatus#29,o_totalprice#30,o_orderpriority#31,o_clerk#32,o_shippriority#33,o_comment#34,o_orderdate#35] parquet\n               :     +- Project [s_suppkey#4L, s_name#5, s_nationkey#7L]\n               :        +- Filter ((isnotnull(s_suppkey#4L) AND isnotnull(s_nationkey#7L)) AND might_contain(scalar-subquery#80 [], xxhash64(s_nationkey#7L, 42)))\n               :           :  +- Aggregate [bloom_filter_agg(xxhash64(n_nationkey#36L, 42), 1, 38, 0, 0) AS bloomFilter#79]\n               :           :     +- Project [n_nationkey#36L]\n               :           :        +- Filter ((isnotnull(n_name#37) AND (n_name#37 = PERU)) AND isnotnull(n_nationkey#36L))\n               :           :           +- Relation spark_catalog.tpch_100.nation[n_nationkey#36L,n_name#37,n_regionkey#38L,n_comment#39] parquet\n               :           +- Relation spark_catalog.tpch_100.supplier[s_suppkey#4L,s_name#5,s_address#6,s_nationkey#7L,s_phone#8,s_acctbal#9,s_comment#10] parquet\n               +- Project [n_nationkey#36L]\n                  +- Filter ((isnotnull(n_name#37) AND (n_name#37 = PERU)) AND isnotnull(n_nationkey#36L))\n                     +- Relation spark_catalog.tpch_100.nation[n_nationkey#36L,n_name#37,n_regionkey#38L,n_comment#39] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 359322152591,
      "inputRowCount" : 1951113731
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "4" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : -1473525224,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 9622579552,
            "rowCount" : 601411222,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_suppkey#13L], ShuffleQueryStage 6 "
          },
          "4" : {
            "sign" : -1788507466,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 667535183036456,
            "rowCount" : 23840542251302,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_name#5] "
          },
          "9" : {
            "sign" : 1026924539,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6291456,
            "rowCount" : 39641,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Project [s_suppkey#4L, s_name#5, s_nationkey#7L], ShuffleQueryStage 4, BroadcastQueryStage 7 "
          },
          "5" : {
            "sign" : -1809712724,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1048983859057288,
            "rowCount" : 23840542251302,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#7L = n_nationkey#36L) "
          },
          "10" : {
            "sign" : 960703765,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048584,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#36L], BroadcastQueryStage 5 "
          },
          "6" : {
            "sign" : 46195115,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 858259521046872,
            "rowCount" : 23840542251302,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_name#5, s_nationkey#7L] "
          },
          "1" : {
            "sign" : -1614431762,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 858259521046872,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 2086906433,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 3600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -168436181,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 858259521046872,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [numwait#81L DESC NULLS LAST, s_name#5 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 656600821,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1239708197067704,
            "rowCount" : 23840542251302,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#4L = l_suppkey#13L) "
          },
          "3" : {
            "sign" : -909848635,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 858259521046872,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [s_name#5], [s_name#5, count(1) AS numwait#81L] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [numwait#81L DESC NULLS LAST, s_name#5 ASC NULLS FIRST], true\n      +- Aggregate [s_name#5], [s_name#5, count(1) AS numwait#81L]\n         +- Project [s_name#5]\n            +- Join Inner, (s_nationkey#7L = n_nationkey#36L)\n               :- Project [s_name#5, s_nationkey#7L]\n               :  +- Join Inner, (s_suppkey#4L = l_suppkey#13L)\n               :     :- LogicalQueryStage Project [l_suppkey#13L], ShuffleQueryStage 6\n               :     +- LogicalQueryStage LogicalQueryStage Project [s_suppkey#4L, s_name#5, s_nationkey#7L], ShuffleQueryStage 4, BroadcastQueryStage 7\n               +- LogicalQueryStage Project [n_nationkey#36L], BroadcastQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 9629919592,
        "inputRowCount" : 601450864
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 15,
        "FinishedTasksNum" : 185,
        "FinishedTasksTotalTimeInMs" : 715381.0,
        "FinishedTasksDistributionInMs" : [ 3195.0, 3595.0, 3790.0, 4010.0, 5520.0 ]
      },
      "StartTimeInMs" : 1702226826646,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 5065,
        "IOBytes" : {
          "Total" : 18386397215,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 18332193930,
            "SW" : 54203285
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : -1473525224,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 158592272,
            "rowCount" : 9912017,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_suppkey#13L], ShuffleQueryStage 6 "
          },
          "4" : {
            "sign" : -1788507466,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 11001823445116,
            "rowCount" : 392922265897,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_name#5] "
          },
          "9" : {
            "sign" : 1026924539,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6291456,
            "rowCount" : 39641,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Project [s_suppkey#4L, s_name#5, s_nationkey#7L], ShuffleQueryStage 4, BroadcastQueryStage 7 "
          },
          "5" : {
            "sign" : -1809712724,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 17288579699468,
            "rowCount" : 392922265897,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#7L = n_nationkey#36L) "
          },
          "10" : {
            "sign" : 960703765,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048584,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#36L], BroadcastQueryStage 5 "
          },
          "6" : {
            "sign" : 46195115,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 14145201572292,
            "rowCount" : 392922265897,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_name#5, s_nationkey#7L] "
          },
          "1" : {
            "sign" : -1614431762,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 14145201572292,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 2086906433,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 3600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -168436181,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 14145201572292,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [numwait#81L DESC NULLS LAST, s_name#5 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 656600821,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 20431957826644,
            "rowCount" : 392922265897,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#4L = l_suppkey#13L) "
          },
          "3" : {
            "sign" : -909848635,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 14145201572292,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [s_name#5], [s_name#5, count(1) AS numwait#81L] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [numwait#81L DESC NULLS LAST, s_name#5 ASC NULLS FIRST], true\n      +- Aggregate [s_name#5], [s_name#5, count(1) AS numwait#81L]\n         +- Project [s_name#5]\n            +- Join Inner, (s_nationkey#7L = n_nationkey#36L)\n               :- Project [s_name#5, s_nationkey#7L]\n               :  +- Join Inner, (s_suppkey#4L = l_suppkey#13L)\n               :     :- LogicalQueryStage Project [l_suppkey#13L], ShuffleQueryStage 6\n               :     +- LogicalQueryStage LogicalQueryStage Project [s_suppkey#4L, s_name#5, s_nationkey#7L], ShuffleQueryStage 4, BroadcastQueryStage 7\n               +- LogicalQueryStage Project [n_nationkey#36L], BroadcastQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 165932312,
        "inputRowCount" : 9951659
      },
      "PD" : {
        "6" : [ 272965, 277895, 284670, 280636, 285127, 286494, 281420, 284579, 282247, 279914, 283088, 285700, 285734, 276099, 284659, 279941, 284539, 277712, 282341, 291729, 280611, 283982, 282663, 279522, 284100, 282865, 286717, 283651, 274978, 279505, 273505, 283257, 281586, 283589, 277438, 283269, 282307, 277396, 290408, 278775, 281285, 280948, 280152, 278210, 276831, 275650, 283940, 278817, 283376, 287728, 283014, 280478, 280674, 282550, 282890, 285261, 282425, 284485, 277112, 274953, 276425, 278585, 277176, 281940, 282020, 289043, 284328, 275817, 274799, 277985, 278353, 284361, 279059, 281830, 282258, 278265, 280680, 283148, 280570, 279245, 283381, 273488, 280097, 279137, 279867, 283694, 284510, 283325, 280822, 280820, 280110, 277946, 280052, 288622, 281664, 280961, 282342, 283325, 288214, 286081, 283813, 291170, 282641, 280214, 284074, 279913, 278789, 278409, 284030, 287191, 278947, 276581, 276492, 281678, 281593, 288512, 277441, 279917, 283662, 277935, 278291, 279659, 284967, 283121, 289844, 280625, 282494, 285576, 282622, 278556, 281610, 286749, 275324, 286567, 276760, 280742, 284864, 279242, 282789, 279663, 291517, 287304, 279639, 280093, 281410, 281044, 279688, 288206, 281481, 277521, 287157, 277105, 278000, 272777, 280288, 286479, 287683, 279316, 282177, 280653, 280245, 274532, 283411, 280529, 287178, 287071, 277488, 282911, 281052, 273649, 289000, 279320, 279722, 282283, 279514, 281647, 288860, 284096, 275203, 284206, 281647, 280203, 274753, 279250, 275665, 280551, 282765, 282736, 283707, 279481, 288575, 277777, 283140, 287343, 279681, 277746, 285397, 283455, 282214, 281827 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226829569,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 2142,
        "IOBytes" : {
          "Total" : 54720764,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 54203285,
            "SW" : 517479
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -1213204403,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 3600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "1" : {
            "sign" : 343822446,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 1902720,
            "rowCount" : 39640,
            "isRuntime" : true,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -759801821,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1902720,
            "rowCount" : 39640,
            "isRuntime" : true,
            "predicate" : " (unknown) Sort Arguments: [numwait#81L DESC NULLS LAST, s_name#5 ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : -1782751227,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1902720,
            "rowCount" : 39640,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [s_name#5], [s_name#5, count(1) AS numwait#81L], HashAggregate(keys=[s_name#5], functions=[count(1)]) "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [numwait#81L DESC NULLS LAST, s_name#5 ASC NULLS FIRST], true\n      +- LogicalQueryStage Aggregate [s_name#5], [s_name#5, count(1) AS numwait#81L], HashAggregate(keys=[s_name#5], functions=[count(1)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1902720,
        "inputRowCount" : 39640
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226831372,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 339,
        "IOBytes" : {
          "Total" : 517479,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 517479,
            "SW" : 0
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -1371755505,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 40,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(n_nationkey#36L, 42), 1, 38, 0, 0) AS bloomFilter#120], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(n_nationkey#36L, 42), 1, 38, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(n_nationkey#36L, 42), 1, 38, 0, 0) AS bloomFilter#120], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(n_nationkey#36L, 42), 1, 38, 0, 0)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 40,
        "inputRowCount" : 1
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 11,
        "FinishedTasksNum" : 111,
        "FinishedTasksTotalTimeInMs" : 41595.0,
        "FinishedTasksDistributionInMs" : [ 216.0, 318.0, 363.0, 397.0, 1083.0 ]
      },
      "StartTimeInMs" : 1702226779165,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 52546,
        "IOBytes" : {
          "Total" : 19341138705,
          "Details" : {
            "IR" : 495180036,
            "IW" : 0,
            "SR" : 18332774915,
            "SW" : 513183754
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 758857983,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 9104555376,
            "rowCount" : 379356474,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_orderkey#11L, l_suppkey#13L], ShuffleQueryStage 0 "
          },
          "8" : {
            "sign" : -1897519032,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 443528427281247168,
            "rowCount" : 27720526705077948,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_suppkey#13L] "
          },
          "4" : {
            "sign" : -1366716153,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1053380014792962024000000,
            "rowCount" : 27720526705077948000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_name#5] "
          },
          "15" : {
            "sign" : 645137473,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1169160032,
            "rowCount" : 73072502,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [o_orderkey#27L], ShuffleQueryStage 3 "
          },
          "11" : {
            "sign" : -1651855276,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 9104555376,
            "rowCount" : 379356474,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, ((l_orderkey#85L = l_orderkey#11L) AND NOT (l_suppkey#87L = l_suppkey#13L)) "
          },
          "9" : {
            "sign" : -391910064,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 887056854562494336,
            "rowCount" : 27720526705077948,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (o_orderkey#27L = l_orderkey#11L) "
          },
          "13" : {
            "sign" : 2143726462,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 14400909648,
            "rowCount" : 600037902,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_orderkey#85L, l_suppkey#87L], ShuffleQueryStage 1 "
          },
          "16" : {
            "sign" : -2087522658,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 54000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_suppkey#4L, s_name#5, s_nationkey#7L], ShuffleQueryStage 4 "
          },
          "5" : {
            "sign" : -665365641,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1496908442074209192000000,
            "rowCount" : 27720526705077948000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#7L = n_nationkey#36L) "
          },
          "10" : {
            "sign" : 288984366,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 9104555376,
            "rowCount" : 379356474,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftAnti, ((l_orderkey#101L = l_orderkey#11L) AND NOT (l_suppkey#103L = l_suppkey#13L)) "
          },
          "6" : {
            "sign" : -2003929224,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1275144228433585608000000,
            "rowCount" : 27720526705077948000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_name#5, s_nationkey#7L] "
          },
          "1" : {
            "sign" : -1958654219,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 45365338,
            "rowCount" : 986203,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : 960703765,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048584,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#36L], BroadcastQueryStage 5 "
          },
          "14" : {
            "sign" : 1200312911,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 9104555376,
            "rowCount" : 379356474,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_orderkey#101L, l_suppkey#103L], ShuffleQueryStage 2 "
          },
          "0" : {
            "sign" : -131356718,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 3600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 96461500,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 45365338,
            "rowCount" : 986203,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [numwait#81L DESC NULLS LAST, s_name#5 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -1301076262,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1718672655714832776000000,
            "rowCount" : 27720526705077948000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#4L = l_suppkey#13L) "
          },
          "3" : {
            "sign" : 733416190,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 45365338,
            "rowCount" : 986203,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [s_name#5], [s_name#5, count(1) AS numwait#81L] "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Join",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [numwait#81L DESC NULLS LAST, s_name#5 ASC NULLS FIRST], true\n      +- Aggregate [s_name#5], [s_name#5, count(1) AS numwait#81L]\n         +- Project [s_name#5]\n            +- Join Inner, (s_nationkey#7L = n_nationkey#36L)\n               :- Project [s_name#5, s_nationkey#7L]\n               :  +- Join Inner, (s_suppkey#4L = l_suppkey#13L)\n               :     :- Project [l_suppkey#13L]\n               :     :  +- Join Inner, (o_orderkey#27L = l_orderkey#11L)\n               :     :     :- Join LeftAnti, ((l_orderkey#101L = l_orderkey#11L) AND NOT (l_suppkey#103L = l_suppkey#13L))\n               :     :     :  :- Join LeftSemi, ((l_orderkey#85L = l_orderkey#11L) AND NOT (l_suppkey#87L = l_suppkey#13L))\n               :     :     :  :  :- LogicalQueryStage Project [l_orderkey#11L, l_suppkey#13L], ShuffleQueryStage 0\n               :     :     :  :  +- LogicalQueryStage Project [l_orderkey#85L, l_suppkey#87L], ShuffleQueryStage 1\n               :     :     :  +- LogicalQueryStage Project [l_orderkey#101L, l_suppkey#103L], ShuffleQueryStage 2\n               :     :     +- LogicalQueryStage Project [o_orderkey#27L], ShuffleQueryStage 3\n               :     +- LogicalQueryStage Project [s_suppkey#4L, s_name#5, s_nationkey#7L], ShuffleQueryStage 4\n               +- LogicalQueryStage Project [n_nationkey#36L], BroadcastQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 33834229016,
        "inputRowCount" : 1432823353
      },
      "PD" : {
        "2" : [ 26253682, 26397319, 26234018, 26482461, 26231387, 26277737, 26325903, 26379894, 26414970, 26377630, 26370482, 26344292, 26107348, 26432224, 26314403, 26492708, 26143549, 26426151, 26350475, 26363560, 26396489, 26398658, 26362189, 26436970, 26321194, 26270283, 26344443, 26453146, 26325741, 26286242, 26216866, 26298962, 26454015, 26379855, 26446300, 26321466, 26426890, 26380660, 26214501, 26278512, 26189448, 26369128, 26269242, 26260274, 26222358, 26350475, 26422026, 26362095, 26314911, 26512127, 26297989, 26430757, 26223649, 26205280, 26093063, 26259335, 26307259, 26359125, 26228199, 26324359, 26268512, 26425563, 26632457, 26206332, 26069227, 26311484, 26484270, 26474164, 26223090, 26133853, 26097199, 26316574, 26450063, 26435568, 26193526, 26462307, 26313224, 26302946, 26502178, 26416935, 26415904, 26206219, 26318300, 26285190, 26234344, 26431592, 26342720, 26358728, 26185856, 26375044, 26250021, 26410272, 26271163, 26283365, 26358019, 26290669, 26362870, 26516537, 26120828, 26149714, 26407611, 26302606, 26299677, 26299885, 26342672, 26337893, 26379855, 26085811, 26213982, 26240702, 26325256, 26224926, 26317410, 26317962, 26171403, 26333657, 26219565, 26380221, 26222324, 26333462, 26373958, 26168106, 26302399, 26277885, 26260958, 26360130, 26330303, 26270851, 26064675, 26282394, 26535786, 26068707, 26473133, 26437084, 26209326, 26260806, 26315838, 26520707, 26332523, 26177524, 26416935, 26212941, 26303137, 26370437, 26265413, 26427873, 26301565, 26191517, 26334379, 26343600, 26264059, 26362385, 26205280, 26390793, 26256349, 26324235, 26359154, 26176843, 26333451, 26221283, 26052316, 26413173, 26583741, 26316426, 26273422, 26139538, 26246813, 26519586, 26367844, 26468927, 26399427, 26361261, 26480206, 26416935, 26454139, 26153801, 26276794, 26427873, 26414413, 26469133, 26186751, 26434606, 26335114, 26226630, 26426205, 26562609, 26435514, 26399323, 26437280, 26560960, 26275817, 26222892, 26358260, 26202061, 26352104, 26370585, 26334966, 26297250, 26450679, 26284548 ],
        "1" : [ 40196725, 40175509, 40135573, 40429336, 40221660, 40354740, 40108374, 40227750, 40339809, 40359473, 40295016, 40150504, 40191992, 40150439, 40153095, 40235292, 40071188, 40265219, 40118435, 40178100, 40160853, 40329611, 40220361, 40317271, 40314621, 40212819, 40329748, 40372399, 40190564, 40199397, 40165435, 40118500, 40361031, 40160774, 40309947, 40325094, 40165435, 40325094, 40257488, 40145706, 40196862, 40296636, 40154388, 40258846, 40236191, 40299237, 40314621, 40295016, 40222952, 40182534, 40329552, 40256326, 40193031, 40241518, 40225094, 40136082, 40254897, 40138040, 40164473, 40242832, 40242557, 40286311, 40378375, 40149927, 40093306, 40226587, 40312538, 40269952, 40220361, 40339696, 40135508, 40237948, 40347270, 40248466, 40165507, 40312675, 40251544, 40265154, 40493917, 40387330, 40317212, 40181724, 40090852, 40210228, 40210803, 40250223, 40264436, 40168098, 40209504, 40302340, 40195232, 40229315, 40188336, 40205430, 40339696, 40120642, 40339809, 40324160, 40213999, 40225159, 40356298, 40152013, 40265154, 40212754, 40210050, 40299814, 40270024, 40257763, 40197960, 40235292, 40208471, 40164723, 40254956, 40282741, 40166069, 40342725, 40115981, 40162185, 40192129, 40250164, 40197823, 40193031, 40269828, 40122000, 40178296, 40180301, 40369612, 40313961, 40235292, 40143701, 40389472, 40103445, 40372203, 40259105, 40204771, 40263919, 40318764, 40309947, 40295081, 40267810, 40240090, 40196590, 40257612, 40311327, 40220361, 40208158, 40269228, 40133307, 40295081, 40160578, 40123233, 40311567, 40190564, 40220498, 40267686, 40241655, 40238020, 40242395, 40259040, 40190564, 40018788, 40309888, 40414464, 40138040, 40165435, 40180301, 40225094, 40301172, 40326248, 40269887, 40420755, 40299749, 40389335, 40324943, 40421925, 40138236, 40231959, 40298073, 40301458, 40462064, 40145112, 40344679, 40079798, 40341302, 40401163, 40504187, 40433729, 40299814, 40265457, 40344483, 40295081, 40168026, 40347270, 40242616, 40281715, 40257684, 40250164, 40276776, 40284611, 40219702 ],
        "3" : [ 2398717, 2391469, 2396296, 2401582, 2391037, 2396144, 2395675, 2395613, 2405569, 2389755, 2397831, 2401730, 2394151, 2394429, 2388767, 2395567, 2396310, 2398982, 2390260, 2401960, 2402831, 2396657, 2395182, 2401524, 2393043, 2397035, 2396897, 2399559, 2393641, 2382508, 2391376, 2391076, 2404623, 2392286, 2395020, 2393051, 2398463, 2397062, 2389092, 2389386, 2402876, 2400763, 2396304, 2392790, 2403272, 2394121, 2400377, 2396359, 2401136, 2394233, 2401864, 2403411, 2392824, 2394643, 2393926, 2389369, 2404903, 2397644, 2406115, 2403317, 2401025, 2403151, 2397298, 2388702, 2402042, 2402397, 2393603, 2408584, 2404517, 2392135, 2396315, 2404055, 2394163, 2393450, 2394566, 2398129, 2394636, 2397905, 2395909, 2398695, 2400814, 2390437, 2400378, 2406404, 2395010, 2404350, 2388653, 2390720, 2400175, 2400001, 2399738, 2395107, 2398058, 2403477, 2398136, 2391890, 2398804, 2396567, 2390232, 2401541, 2393229, 2389705, 2397110, 2386498, 2394468, 2398494, 2403960, 2394005, 2397951, 2386372, 2393993, 2392392, 2391281, 2406550, 2394437, 2396574, 2403540, 2398586, 2395311, 2397992, 2402161, 2403593, 2393181, 2404170, 2404685, 2405994, 2396183, 2391954, 2395525, 2399800, 2394476, 2393843, 2401221, 2399553, 2395033, 2397140, 2403192, 2402176, 2395974, 2392097, 2394572, 2392393, 2395059, 2394659, 2406794, 2391543, 2399790, 2385212, 2395273, 2401496, 2392314, 2394326, 2399120, 2407388, 2392464, 2397261, 2397007, 2397963, 2408036, 2390728, 2394894, 2400536, 2396736, 2393470, 2399619, 2390796, 2400687, 2394990, 2402233, 2397659, 2400258, 2395766, 2394132, 2393899, 2397942, 2395298, 2391459, 2395816, 2404501, 2397866, 2390238, 2398835, 2401753, 2396846, 2397544, 2408663, 2393265, 2402425, 2394542, 2406307, 2403942, 2404134, 2404731, 2397724, 2409641, 2397291, 2391513, 2398206, 2394394, 2390723 ],
        "0" : [ 26253682, 26397319, 26234018, 26482461, 26231387, 26277737, 26325903, 26379894, 26414970, 26377630, 26370482, 26344292, 26107348, 26432224, 26314403, 26492708, 26143549, 26426151, 26350475, 26363560, 26396489, 26398658, 26362189, 26436970, 26321194, 26270283, 26344443, 26453146, 26325741, 26286242, 26216866, 26298962, 26454015, 26379855, 26446300, 26321466, 26426890, 26380660, 26214501, 26278512, 26189448, 26369128, 26269242, 26260274, 26222358, 26350475, 26422026, 26362095, 26314911, 26512127, 26297989, 26430757, 26223649, 26205280, 26093063, 26259335, 26307259, 26359125, 26228199, 26324359, 26268512, 26425563, 26632457, 26206332, 26069227, 26311484, 26484270, 26474164, 26223090, 26133853, 26097199, 26316574, 26450063, 26435568, 26193526, 26462307, 26313224, 26302946, 26502178, 26416935, 26415904, 26206219, 26318300, 26285190, 26234344, 26431592, 26342720, 26358728, 26185856, 26375044, 26250021, 26410272, 26271163, 26283365, 26358019, 26290669, 26362870, 26516537, 26120828, 26149714, 26407611, 26302606, 26299677, 26299885, 26342672, 26337893, 26379855, 26085811, 26213982, 26240702, 26325256, 26224926, 26317410, 26317962, 26171403, 26333657, 26219565, 26380221, 26222324, 26333462, 26373958, 26168106, 26302399, 26277885, 26260958, 26360130, 26330303, 26270851, 26064675, 26282394, 26535786, 26068707, 26473133, 26437084, 26209326, 26260806, 26315838, 26520707, 26332523, 26177524, 26416935, 26212941, 26303137, 26370437, 26265413, 26427873, 26301565, 26191517, 26334379, 26343600, 26264059, 26362385, 26205280, 26390793, 26256349, 26324235, 26359154, 26176843, 26333451, 26221283, 26052316, 26413173, 26583741, 26316426, 26273422, 26139538, 26246813, 26519586, 26367844, 26468927, 26399427, 26361261, 26480206, 26416935, 26454139, 26153801, 26276794, 26427873, 26414413, 26469133, 26186751, 26434606, 26335114, 26226630, 26426205, 26562609, 26435514, 26399323, 26437280, 26560960, 26275817, 26222892, 26358260, 26202061, 26352104, 26370585, 26334966, 26297250, 26450679, 26284548 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226779507,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 52204,
        "IOBytes" : {
          "Total" : 18400150791,
          "Details" : {
            "IR" : 12591768,
            "IW" : 0,
            "SR" : 18332774834,
            "SW" : 54784189
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : -1473525224,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 9622579552,
            "rowCount" : 601411222,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_suppkey#13L], ShuffleQueryStage 6 "
          },
          "4" : {
            "sign" : 660457599,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 667535183036456,
            "rowCount" : 23840542251302,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_name#5] "
          },
          "9" : {
            "sign" : -2087522658,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2219896,
            "rowCount" : 39641,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_suppkey#4L, s_name#5, s_nationkey#7L], ShuffleQueryStage 4 "
          },
          "5" : {
            "sign" : -1026083941,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1048983859057288,
            "rowCount" : 23840542251302,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#7L = n_nationkey#36L) "
          },
          "10" : {
            "sign" : 960703765,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048584,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#36L], BroadcastQueryStage 5 "
          },
          "6" : {
            "sign" : -85244178,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 858259521046872,
            "rowCount" : 23840542251302,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_name#5, s_nationkey#7L] "
          },
          "1" : {
            "sign" : -1068246119,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 858259521046872,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -1333210604,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 3600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -69834710,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 858259521046872,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [numwait#81L DESC NULLS LAST, s_name#5 ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -793471388,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1239708197067704,
            "rowCount" : 23840542251302,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#4L = l_suppkey#13L) "
          },
          "3" : {
            "sign" : 2084934306,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 858259521046872,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [s_name#5], [s_name#5, count(1) AS numwait#81L] "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Aggregate",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [numwait#81L DESC NULLS LAST, s_name#5 ASC NULLS FIRST], true\n      +- Aggregate [s_name#5], [s_name#5, count(1) AS numwait#81L]\n         +- Project [s_name#5]\n            +- Join Inner, (s_nationkey#7L = n_nationkey#36L)\n               :- Project [s_name#5, s_nationkey#7L]\n               :  +- Join Inner, (s_suppkey#4L = l_suppkey#13L)\n               :     :- LogicalQueryStage Project [l_suppkey#13L], ShuffleQueryStage 6\n               :     +- LogicalQueryStage Project [s_suppkey#4L, s_name#5, s_nationkey#7L], ShuffleQueryStage 4\n               +- LogicalQueryStage Project [n_nationkey#36L], BroadcastQueryStage 5\n"
      },
      "IM" : {
        "inputSizeInBytes" : 9625848032,
        "inputRowCount" : 601450864
      },
      "PD" : {
        "5" : [ 2726, 2726, 2999, 3298, 2999, 2726, 2999, 3298, 3298, 2999, 2726, 3298, 2999, 2999, 2999, 3298, 2726, 2999, 2999, 3298, 3298, 2999, 3298, 3298, 3298, 2999, 2726, 2999, 2726, 2999, 2999, 2999, 2999, 2726, 2999, 2999, 2999, 3298, 2999, 2726, 2999, 3298, 2999, 2999, 2999, 2726, 2999, 2999, 2999, 2726, 2999, 3298, 3298, 3298, 2999, 3298, 3298, 3298, 3298, 2999, 2999, 2726, 2726, 2999, 3298, 2999, 2726, 2726, 2726, 3298, 3298, 3298, 2726, 2726, 3298, 3298, 3298, 3298, 2999, 2726, 3298, 2726, 2999, 2999, 2726, 3298, 2999, 2999, 2999, 2999, 2999, 2999, 2726, 2726, 2726, 2999, 3298, 2726, 2726, 2999, 2999, 2999, 2726, 2999, 3298, 2726, 2726, 3298, 3298, 2999, 2726, 2999, 3298, 2726, 2999, 3298, 2999, 3298, 3298, 2999, 2999, 2999, 2999, 2999, 3298, 2999, 2726, 2726, 2726, 2999, 3298, 3298, 3628, 3298, 2999, 3298, 2999, 2726, 2726, 3298, 3298, 2726, 3628, 3298, 2726, 3298, 2999, 2999, 2999, 3298, 2999, 2999, 2726, 2726, 2726, 2999, 2999, 2999, 3298, 2999, 2999, 2999, 2999, 2999, 2999, 2999, 2999, 3298, 2999, 3298, 3628, 2999, 2726, 2999, 2999, 3298, 2999, 3298, 3298, 3628, 3298, 2999, 2999, 3298, 2999, 3298, 2726, 3298, 2999, 2999, 3298, 2999, 3298, 3298, 2999, 2999, 3298, 2999, 2999, 2999 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226779877,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 51834,
        "IOBytes" : {
          "Total" : 18386978119,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 18332774834,
            "SW" : 54203285
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "8" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1723066039,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9622579552,
                "rowCount" : 601411222
              },
              "compileTime" : {
                "sizeInBytes" : 9622579552,
                "rowCount" : 601411222
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_suppkey#13L] "
          },
          "1" : {
            "sign" : -1285650481,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 19245159104,
                "rowCount" : 601411222
              },
              "compileTime" : {
                "sizeInBytes" : 19245159104,
                "rowCount" : 601411222
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (o_orderkey#27L = l_orderkey#11L) "
          },
          "2" : {
            "sign" : -705957136,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4800303216,
                "rowCount" : 200012634
              },
              "compileTime" : {
                "sizeInBytes" : 4800303216,
                "rowCount" : 200012634
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftAnti, ((l_orderkey#101L = l_orderkey#11L) AND NOT (l_suppkey#103L = l_suppkey#13L)) "
          },
          "3" : {
            "sign" : 1953276698,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4800303216,
                "rowCount" : 200012634
              },
              "compileTime" : {
                "sizeInBytes" : 4800303216,
                "rowCount" : 200012634
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, ((l_orderkey#85L = l_orderkey#11L) AND NOT (l_suppkey#87L = l_suppkey#13L)) "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [l_suppkey#13L]\n+- Join Inner, (o_orderkey#27L = l_orderkey#11L)\n   :- Join LeftAnti, ((l_orderkey#101L = l_orderkey#11L) AND NOT (l_suppkey#103L = l_suppkey#13L))\n   :  :- Join LeftSemi, ((l_orderkey#85L = l_orderkey#11L) AND NOT (l_suppkey#87L = l_suppkey#13L))\n   :  :  :- Project [l_orderkey#11L, l_suppkey#13L]\n   :  :  :  +- Filter ((((isnotnull(l_receiptdate#22) AND isnotnull(l_commitdate#21)) AND (l_receiptdate#22 > l_commitdate#21)) AND isnotnull(l_suppkey#13L)) AND isnotnull(l_orderkey#11L))\n   :  :  :     +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#11L,l_partkey#12L,l_suppkey#13L,l_linenumber#14,l_quantity#15,l_extendedprice#16,l_discount#17,l_tax#18,l_returnflag#19,l_linestatus#20,l_commitdate#21,l_receiptdate#22,l_shipinstruct#23,l_shipmode#24,l_comment#25,l_shipdate#26] parquet\n   :  :  +- Project [l_orderkey#85L, l_suppkey#87L]\n   :  :     +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#85L,l_partkey#86L,l_suppkey#87L,l_linenumber#88,l_quantity#89,l_extendedprice#90,l_discount#91,l_tax#92,l_returnflag#93,l_linestatus#94,l_commitdate#95,l_receiptdate#96,l_shipinstruct#97,l_shipmode#98,l_comment#99,l_shipdate#100] parquet\n   :  +- Project [l_orderkey#101L, l_suppkey#103L]\n   :     +- Filter ((isnotnull(l_receiptdate#112) AND isnotnull(l_commitdate#111)) AND (l_receiptdate#112 > l_commitdate#111))\n   :        +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#101L,l_partkey#102L,l_suppkey#103L,l_linenumber#104,l_quantity#105,l_extendedprice#106,l_discount#107,l_tax#108,l_returnflag#109,l_linestatus#110,l_commitdate#111,l_receiptdate#112,l_shipinstruct#113,l_shipmode#114,l_comment#115,l_shipdate#116] parquet\n   +- Project [o_orderkey#27L]\n      +- Filter ((isnotnull(o_orderstatus#29) AND (o_orderstatus#29 = F)) AND isnotnull(o_orderkey#27L))\n         +- Relation spark_catalog.tpch_100.orders[o_orderkey#27L,o_custkey#28L,o_orderstatus#29,o_totalprice#30,o_orderpriority#31,o_clerk#32,o_shippriority#33,o_comment#34,o_orderdate#35] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : -323450770,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [l_orderkey#101L, l_suppkey#103L] Arguments: [l_orderkey#101L ASC NULLS FIRST], false, 0 "
          },
          "4" : {
            "sign" : 28770245,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [l_orderkey#11L, l_suppkey#13L] Arguments: [l_orderkey#11L ASC NULLS FIRST], false, 0 "
          },
          "11" : {
            "sign" : 1737346005,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 1169160032,
            "rowCount" : 73072502,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [o_orderkey#27L] Arguments: 3 "
          },
          "9" : {
            "sign" : -695860895,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 9104555376,
            "rowCount" : 379356474,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [l_orderkey#101L, l_suppkey#103L] Arguments: 2 "
          },
          "5" : {
            "sign" : 1944017336,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 9104555376,
            "rowCount" : 379356474,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [l_orderkey#11L, l_suppkey#13L] Arguments: 0 "
          },
          "10" : {
            "sign" : -704643802,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [1]: [o_orderkey#27L] Arguments: [o_orderkey#27L ASC NULLS FIRST], false, 0 "
          },
          "6" : {
            "sign" : 1804241524,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [l_orderkey#85L, l_suppkey#87L] Arguments: [l_orderkey#85L ASC NULLS FIRST], false, 0 "
          },
          "1" : {
            "sign" : 1047010618,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 19245159104,
            "rowCount" : 601411222,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [l_orderkey#11L] Right keys [1]: [o_orderkey#27L] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 1522341458,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 9622579552,
            "rowCount" : 601411222,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [l_suppkey#13L] Input [3]: [l_orderkey#11L, l_suppkey#13L, o_orderkey#27L] "
          },
          "2" : {
            "sign" : -472479483,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 4800303216,
            "rowCount" : 200012634,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [l_orderkey#11L] Right keys [1]: [l_orderkey#101L] Join type: LeftAnti Join condition: NOT (l_suppkey#103L = l_suppkey#13L) "
          },
          "7" : {
            "sign" : 1388921962,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 14400909648,
            "rowCount" : 600037902,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [l_orderkey#85L, l_suppkey#87L] Arguments: 1 "
          },
          "3" : {
            "sign" : 58880286,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 4800303216,
            "rowCount" : 200012634,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [l_orderkey#11L] Right keys [1]: [l_orderkey#85L] Join type: LeftSemi Join condition: NOT (l_suppkey#87L = l_suppkey#13L) "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Sort",
          "toId" : 3,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "ShuffleQueryStage",
          "toId" : 6,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Sort",
          "toId" : 3,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "SortMergeJoin",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "ShuffleQueryStage",
          "toId" : 8,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "SortMergeJoin",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "ShuffleQueryStage",
          "toId" : 10,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "SortMergeJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [l_suppkey#13L]\n+- SortMergeJoin [l_orderkey#11L], [o_orderkey#27L], Inner\n   :- SortMergeJoin [l_orderkey#11L], [l_orderkey#101L], LeftAnti, NOT (l_suppkey#103L = l_suppkey#13L)\n   :  :- SortMergeJoin [l_orderkey#11L], [l_orderkey#85L], LeftSemi, NOT (l_suppkey#87L = l_suppkey#13L)\n   :  :  :- Sort [l_orderkey#11L ASC NULLS FIRST], false, 0\n   :  :  :  +- ShuffleQueryStage 0\n   :  :  :     +- Exchange hashpartitioning(l_orderkey#11L, 200), ENSURE_REQUIREMENTS, [plan_id=244]\n   :  :  :        +- *(1) Project [l_orderkey#11L, l_suppkey#13L]\n   :  :  :           +- *(1) Filter ((((isnotnull(l_receiptdate#22) AND isnotnull(l_commitdate#21)) AND (l_receiptdate#22 > l_commitdate#21)) AND isnotnull(l_suppkey#13L)) AND isnotnull(l_orderkey#11L))\n   :  :  :              +- *(1) ColumnarToRow\n   :  :  :                 +- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#11L,l_suppkey#13L,l_commitdate#21,l_receiptdate#22,l_shipdate#26] Batched: true, DataFilters: [isnotnull(l_receiptdate#22), isnotnull(l_commitdate#21), (l_receiptdate#22 > l_commitdate#21), i..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem], PartitionFilters: [], PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate), IsNotNull(l_suppkey), IsNotNull(l_orderkey)], ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>\n   :  :  +- Sort [l_orderkey#85L ASC NULLS FIRST], false, 0\n   :  :     +- ShuffleQueryStage 1\n   :  :        +- Exchange hashpartitioning(l_orderkey#85L, 200), ENSURE_REQUIREMENTS, [plan_id=263]\n   :  :           +- *(2) Project [l_orderkey#85L, l_suppkey#87L]\n   :  :              +- *(2) ColumnarToRow\n   :  :                 +- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#85L,l_suppkey#87L,l_shipdate#100] Batched: true, DataFilters: [], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem], PartitionFilters: [], PushedFilters: [], ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint>\n   :  +- Sort [l_orderkey#101L ASC NULLS FIRST], false, 0\n   :     +- ShuffleQueryStage 2\n   :        +- Exchange hashpartitioning(l_orderkey#101L, 200), ENSURE_REQUIREMENTS, [plan_id=283]\n   :           +- *(3) Project [l_orderkey#101L, l_suppkey#103L]\n   :              +- *(3) Filter ((isnotnull(l_receiptdate#112) AND isnotnull(l_commitdate#111)) AND (l_receiptdate#112 > l_commitdate#111))\n   :                 +- *(3) ColumnarToRow\n   :                    +- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#101L,l_suppkey#103L,l_commitdate#111,l_receiptdate#112,l_shipdate#116] Batched: true, DataFilters: [isnotnull(l_receiptdate#112), isnotnull(l_commitdate#111), (l_receiptdate#112 > l_commitdate#111)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem], PartitionFilters: [], PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate)], ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>\n   +- Sort [o_orderkey#27L ASC NULLS FIRST], false, 0\n      +- ShuffleQueryStage 3\n         +- Exchange hashpartitioning(o_orderkey#27L, 200), ENSURE_REQUIREMENTS, [plan_id=305]\n            +- *(4) Project [o_orderkey#27L]\n               +- *(4) Filter ((isnotnull(o_orderstatus#29) AND (o_orderstatus#29 = F)) AND isnotnull(o_orderkey#27L))\n                  +- *(4) ColumnarToRow\n                     +- FileScan parquet spark_catalog.tpch_100.orders[o_orderkey#27L,o_orderstatus#29,o_orderdate#35] Batched: true, DataFilters: [isnotnull(o_orderstatus#29), (o_orderstatus#29 = F), isnotnull(o_orderkey#27L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/orders], PartitionFilters: [], PushedFilters: [IsNotNull(o_orderstatus), EqualTo(o_orderstatus,F), IsNotNull(o_orderkey)], ReadSchema: struct<o_orderkey:bigint,o_orderstatus:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 33779180432,
        "inputRowCount" : 1431823352
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "2" : [ 26253682, 26397319, 26234018, 26482461, 26231387, 26277737, 26325903, 26379894, 26414970, 26377630, 26370482, 26344292, 26107348, 26432224, 26314403, 26492708, 26143549, 26426151, 26350475, 26363560, 26396489, 26398658, 26362189, 26436970, 26321194, 26270283, 26344443, 26453146, 26325741, 26286242, 26216866, 26298962, 26454015, 26379855, 26446300, 26321466, 26426890, 26380660, 26214501, 26278512, 26189448, 26369128, 26269242, 26260274, 26222358, 26350475, 26422026, 26362095, 26314911, 26512127, 26297989, 26430757, 26223649, 26205280, 26093063, 26259335, 26307259, 26359125, 26228199, 26324359, 26268512, 26425563, 26632457, 26206332, 26069227, 26311484, 26484270, 26474164, 26223090, 26133853, 26097199, 26316574, 26450063, 26435568, 26193526, 26462307, 26313224, 26302946, 26502178, 26416935, 26415904, 26206219, 26318300, 26285190, 26234344, 26431592, 26342720, 26358728, 26185856, 26375044, 26250021, 26410272, 26271163, 26283365, 26358019, 26290669, 26362870, 26516537, 26120828, 26149714, 26407611, 26302606, 26299677, 26299885, 26342672, 26337893, 26379855, 26085811, 26213982, 26240702, 26325256, 26224926, 26317410, 26317962, 26171403, 26333657, 26219565, 26380221, 26222324, 26333462, 26373958, 26168106, 26302399, 26277885, 26260958, 26360130, 26330303, 26270851, 26064675, 26282394, 26535786, 26068707, 26473133, 26437084, 26209326, 26260806, 26315838, 26520707, 26332523, 26177524, 26416935, 26212941, 26303137, 26370437, 26265413, 26427873, 26301565, 26191517, 26334379, 26343600, 26264059, 26362385, 26205280, 26390793, 26256349, 26324235, 26359154, 26176843, 26333451, 26221283, 26052316, 26413173, 26583741, 26316426, 26273422, 26139538, 26246813, 26519586, 26367844, 26468927, 26399427, 26361261, 26480206, 26416935, 26454139, 26153801, 26276794, 26427873, 26414413, 26469133, 26186751, 26434606, 26335114, 26226630, 26426205, 26562609, 26435514, 26399323, 26437280, 26560960, 26275817, 26222892, 26358260, 26202061, 26352104, 26370585, 26334966, 26297250, 26450679, 26284548 ],
        "1" : [ 40196725, 40175509, 40135573, 40429336, 40221660, 40354740, 40108374, 40227750, 40339809, 40359473, 40295016, 40150504, 40191992, 40150439, 40153095, 40235292, 40071188, 40265219, 40118435, 40178100, 40160853, 40329611, 40220361, 40317271, 40314621, 40212819, 40329748, 40372399, 40190564, 40199397, 40165435, 40118500, 40361031, 40160774, 40309947, 40325094, 40165435, 40325094, 40257488, 40145706, 40196862, 40296636, 40154388, 40258846, 40236191, 40299237, 40314621, 40295016, 40222952, 40182534, 40329552, 40256326, 40193031, 40241518, 40225094, 40136082, 40254897, 40138040, 40164473, 40242832, 40242557, 40286311, 40378375, 40149927, 40093306, 40226587, 40312538, 40269952, 40220361, 40339696, 40135508, 40237948, 40347270, 40248466, 40165507, 40312675, 40251544, 40265154, 40493917, 40387330, 40317212, 40181724, 40090852, 40210228, 40210803, 40250223, 40264436, 40168098, 40209504, 40302340, 40195232, 40229315, 40188336, 40205430, 40339696, 40120642, 40339809, 40324160, 40213999, 40225159, 40356298, 40152013, 40265154, 40212754, 40210050, 40299814, 40270024, 40257763, 40197960, 40235292, 40208471, 40164723, 40254956, 40282741, 40166069, 40342725, 40115981, 40162185, 40192129, 40250164, 40197823, 40193031, 40269828, 40122000, 40178296, 40180301, 40369612, 40313961, 40235292, 40143701, 40389472, 40103445, 40372203, 40259105, 40204771, 40263919, 40318764, 40309947, 40295081, 40267810, 40240090, 40196590, 40257612, 40311327, 40220361, 40208158, 40269228, 40133307, 40295081, 40160578, 40123233, 40311567, 40190564, 40220498, 40267686, 40241655, 40238020, 40242395, 40259040, 40190564, 40018788, 40309888, 40414464, 40138040, 40165435, 40180301, 40225094, 40301172, 40326248, 40269887, 40420755, 40299749, 40389335, 40324943, 40421925, 40138236, 40231959, 40298073, 40301458, 40462064, 40145112, 40344679, 40079798, 40341302, 40401163, 40504187, 40433729, 40299814, 40265457, 40344483, 40295081, 40168026, 40347270, 40242616, 40281715, 40257684, 40250164, 40276776, 40284611, 40219702 ],
        "3" : [ 2398717, 2391469, 2396296, 2401582, 2391037, 2396144, 2395675, 2395613, 2405569, 2389755, 2397831, 2401730, 2394151, 2394429, 2388767, 2395567, 2396310, 2398982, 2390260, 2401960, 2402831, 2396657, 2395182, 2401524, 2393043, 2397035, 2396897, 2399559, 2393641, 2382508, 2391376, 2391076, 2404623, 2392286, 2395020, 2393051, 2398463, 2397062, 2389092, 2389386, 2402876, 2400763, 2396304, 2392790, 2403272, 2394121, 2400377, 2396359, 2401136, 2394233, 2401864, 2403411, 2392824, 2394643, 2393926, 2389369, 2404903, 2397644, 2406115, 2403317, 2401025, 2403151, 2397298, 2388702, 2402042, 2402397, 2393603, 2408584, 2404517, 2392135, 2396315, 2404055, 2394163, 2393450, 2394566, 2398129, 2394636, 2397905, 2395909, 2398695, 2400814, 2390437, 2400378, 2406404, 2395010, 2404350, 2388653, 2390720, 2400175, 2400001, 2399738, 2395107, 2398058, 2403477, 2398136, 2391890, 2398804, 2396567, 2390232, 2401541, 2393229, 2389705, 2397110, 2386498, 2394468, 2398494, 2403960, 2394005, 2397951, 2386372, 2393993, 2392392, 2391281, 2406550, 2394437, 2396574, 2403540, 2398586, 2395311, 2397992, 2402161, 2403593, 2393181, 2404170, 2404685, 2405994, 2396183, 2391954, 2395525, 2399800, 2394476, 2393843, 2401221, 2399553, 2395033, 2397140, 2403192, 2402176, 2395974, 2392097, 2394572, 2392393, 2395059, 2394659, 2406794, 2391543, 2399790, 2385212, 2395273, 2401496, 2392314, 2394326, 2399120, 2407388, 2392464, 2397261, 2397007, 2397963, 2408036, 2390728, 2394894, 2400536, 2396736, 2393470, 2399619, 2390796, 2400687, 2394990, 2402233, 2397659, 2400258, 2395766, 2394132, 2393899, 2397942, 2395298, 2391459, 2395816, 2404501, 2397866, 2390238, 2398835, 2401753, 2396846, 2397544, 2408663, 2393265, 2402425, 2394542, 2406307, 2403942, 2404134, 2404731, 2397724, 2409641, 2397291, 2391513, 2398206, 2394394, 2390723 ],
        "0" : [ 26253682, 26397319, 26234018, 26482461, 26231387, 26277737, 26325903, 26379894, 26414970, 26377630, 26370482, 26344292, 26107348, 26432224, 26314403, 26492708, 26143549, 26426151, 26350475, 26363560, 26396489, 26398658, 26362189, 26436970, 26321194, 26270283, 26344443, 26453146, 26325741, 26286242, 26216866, 26298962, 26454015, 26379855, 26446300, 26321466, 26426890, 26380660, 26214501, 26278512, 26189448, 26369128, 26269242, 26260274, 26222358, 26350475, 26422026, 26362095, 26314911, 26512127, 26297989, 26430757, 26223649, 26205280, 26093063, 26259335, 26307259, 26359125, 26228199, 26324359, 26268512, 26425563, 26632457, 26206332, 26069227, 26311484, 26484270, 26474164, 26223090, 26133853, 26097199, 26316574, 26450063, 26435568, 26193526, 26462307, 26313224, 26302946, 26502178, 26416935, 26415904, 26206219, 26318300, 26285190, 26234344, 26431592, 26342720, 26358728, 26185856, 26375044, 26250021, 26410272, 26271163, 26283365, 26358019, 26290669, 26362870, 26516537, 26120828, 26149714, 26407611, 26302606, 26299677, 26299885, 26342672, 26337893, 26379855, 26085811, 26213982, 26240702, 26325256, 26224926, 26317410, 26317962, 26171403, 26333657, 26219565, 26380221, 26222324, 26333462, 26373958, 26168106, 26302399, 26277885, 26260958, 26360130, 26330303, 26270851, 26064675, 26282394, 26535786, 26068707, 26473133, 26437084, 26209326, 26260806, 26315838, 26520707, 26332523, 26177524, 26416935, 26212941, 26303137, 26370437, 26265413, 26427873, 26301565, 26191517, 26334379, 26343600, 26264059, 26362385, 26205280, 26390793, 26256349, 26324235, 26359154, 26176843, 26333451, 26221283, 26052316, 26413173, 26583741, 26316426, 26273422, 26139538, 26246813, 26519586, 26367844, 26468927, 26399427, 26361261, 26480206, 26416935, 26454139, 26153801, 26276794, 26427873, 26414413, 26469133, 26186751, 26434606, 26335114, 26226630, 26426205, 26562609, 26435514, 26399323, 26437280, 26560960, 26275817, 26222892, 26358260, 26202061, 26352104, 26370585, 26334966, 26297250, 26450679, 26284548 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 8,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 15 ],
      "Objectives" : {
        "DurationInMs" : 49773,
        "TotalTasksDurationInMs" : 770710,
        "IOBytes" : {
          "Total" : 18331676451,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 18277990645,
            "SW" : 53685806
          }
        }
      }
    },
    "4" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1181381854,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 800000000,
                "rowCount" : 50000000
              },
              "compileTime" : {
                "sizeInBytes" : 800000000,
                "rowCount" : 50000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [o_orderkey#27L] "
          },
          "1" : {
            "sign" : 1321593992,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 8100000000,
                "rowCount" : 50000000
              },
              "compileTime" : {
                "sizeInBytes" : 8100000000,
                "rowCount" : 50000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(o_orderstatus#29) AND (o_orderstatus#29 = F)) AND isnotnull(o_orderkey#27L)) "
          },
          "2" : {
            "sign" : 1151370137,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 24300000000,
                "rowCount" : 150000000
              },
              "compileTime" : {
                "sizeInBytes" : 24300000000,
                "rowCount" : 150000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [o_orderkey#27L, o_custkey#28L, o_orderstatus#29, o_totalprice#30, o_orderpriority#31, o_clerk#32, o_shippriority#33, o_comment#34, o_orderdate#35], `spark_catalog`.`tpch_100`.`orders`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [o_orderkey#27L]\n+- Filter ((isnotnull(o_orderstatus#29) AND (o_orderstatus#29 = F)) AND isnotnull(o_orderkey#27L))\n   +- Relation spark_catalog.tpch_100.orders[o_orderkey#27L,o_custkey#28L,o_orderstatus#29,o_totalprice#30,o_orderpriority#31,o_clerk#32,o_shippriority#33,o_comment#34,o_orderdate#35] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -2079234332,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 800000000,
            "rowCount" : 50000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [o_orderkey#27L] Input [3]: [o_orderkey#27L, o_orderstatus#29, o_orderdate#35] "
          },
          "1" : {
            "sign" : -530917874,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 800000000,
            "rowCount" : 50000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [o_orderkey#27L, o_orderstatus#29, o_orderdate#35] Condition : ((isnotnull(o_orderstatus#29) AND (o_orderstatus#29 = F)) AND isnotnull(o_orderkey#27L)) "
          },
          "2" : {
            "sign" : 1819354591,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 800000000,
            "rowCount" : 50000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.orders Output [3]: [o_orderkey#27L, o_orderstatus#29, o_orderdate#35] Batched: true Location: CatalogFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/orders] PushedFilters: [IsNotNull(o_orderstatus), EqualTo(o_orderstatus,F), IsNotNull(o_orderkey)] ReadSchema: struct<o_orderkey:bigint,o_orderstatus:string> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpch_100.orders",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [o_orderkey#27L]\n+- Filter ((isnotnull(o_orderstatus#29) AND (o_orderstatus#29 = F)) AND isnotnull(o_orderkey#27L))\n   +- FileScan parquet spark_catalog.tpch_100.orders[o_orderkey#27L,o_orderstatus#29,o_orderdate#35] Batched: true, DataFilters: [isnotnull(o_orderstatus#29), (o_orderstatus#29 = F), isnotnull(o_orderkey#27L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/orders], PartitionFilters: [], PushedFilters: [IsNotNull(o_orderstatus), EqualTo(o_orderstatus,F), IsNotNull(o_orderkey)], ReadSchema: struct<o_orderkey:bigint,o_orderstatus:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 800000000,
        "inputRowCount" : 50000000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 6 ],
      "Objectives" : {
        "DurationInMs" : 3386,
        "TotalTasksDurationInMs" : 50005,
        "IOBytes" : {
          "Total" : 940987833,
          "Details" : {
            "IR" : 482588268,
            "IW" : 0,
            "SR" : 0,
            "SW" : 458399565
          }
        }
      }
    },
    "11" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1333210604,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3600,
                "rowCount" : 100
              },
              "compileTime" : {
                "sizeInBytes" : 3600,
                "rowCount" : 100
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "1" : {
            "sign" : -1068246119,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 858259521046872,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 858259521046872,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -69834710,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 858259521046872,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 858259521046872,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [numwait#81L DESC NULLS LAST, s_name#5 ASC NULLS FIRST], true "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [numwait#81L DESC NULLS LAST, s_name#5 ASC NULLS FIRST], true\n      +- Aggregate [s_name#5], [s_name#5, count(1) AS numwait#81L]\n         +- Project [s_name#5]\n            +- Join Inner, (s_nationkey#7L = n_nationkey#36L)\n               :- Project [s_name#5, s_nationkey#7L]\n               :  +- Join Inner, (s_suppkey#4L = l_suppkey#13L)\n               :     :- LogicalQueryStage Project [l_suppkey#13L], ShuffleQueryStage 6\n               :     +- LogicalQueryStage Project [s_suppkey#4L, s_name#5, s_nationkey#7L], ShuffleQueryStage 4\n               +- LogicalQueryStage Project [n_nationkey#36L], BroadcastQueryStage 5\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1739127027,
            "className" : "org.apache.spark.sql.execution.TakeOrderedAndProjectExec",
            "sizeInBytes" : 3600,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) TakeOrderedAndProject Input [2]: [s_name#5, numwait#81L] Arguments: 100, [numwait#81L DESC NULLS LAST, s_name#5 ASC NULLS FIRST], [s_name#5, numwait#81L] "
          },
          "1" : {
            "sign" : 2004658565,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 1902720,
            "rowCount" : 39640,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [2]: [s_name#5, count#123L] Keys [1]: [s_name#5] Functions [1]: [count(1)] Aggregate Attributes [1]: [count(1)#84L] Results [2]: [s_name#5, count(1)#84L AS numwait#81L] "
          },
          "2" : {
            "sign" : 454028396,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 858259521046872,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [s_name#5, count#123L] Arguments: 8 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "ShuffleQueryStage",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "TakeOrderedAndProject",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "TakeOrderedAndProject(limit=100, orderBy=[numwait#81L DESC NULLS LAST,s_name#5 ASC NULLS FIRST], output=[s_name#5,numwait#81L])\n+- HashAggregate(keys=[s_name#5], functions=[count(1)], output=[s_name#5, numwait#81L])\n   +- ShuffleQueryStage 8\n      +- Exchange hashpartitioning(s_name#5, 200), ENSURE_REQUIREMENTS, [plan_id=716]\n         +- *(14) HashAggregate(keys=[s_name#5], functions=[partial_count(1)], output=[s_name#5, count#123L])\n            +- *(14) Project [s_name#5]\n               +- *(14) BroadcastHashJoin [s_nationkey#7L], [n_nationkey#36L], Inner, BuildRight, false\n                  :- *(14) Project [s_name#5, s_nationkey#7L]\n                  :  +- *(14) BroadcastHashJoin [l_suppkey#13L], [s_suppkey#4L], Inner, BuildRight, false\n                  :     :- AQEShuffleRead local\n                  :     :  +- ShuffleQueryStage 6\n                  :     :     +- Exchange hashpartitioning(l_suppkey#13L, 200), ENSURE_REQUIREMENTS, [plan_id=521]\n                  :     :        +- *(13) Project [l_suppkey#13L]\n                  :     :           +- *(13) SortMergeJoin [l_orderkey#11L], [o_orderkey#27L], Inner\n                  :     :              :- *(11) SortMergeJoin [l_orderkey#11L], [l_orderkey#101L], LeftAnti, NOT (l_suppkey#103L = l_suppkey#13L)\n                  :     :              :  :- *(9) SortMergeJoin [l_orderkey#11L], [l_orderkey#85L], LeftSemi, NOT (l_suppkey#87L = l_suppkey#13L)\n                  :     :              :  :  :- *(7) Sort [l_orderkey#11L ASC NULLS FIRST], false, 0\n                  :     :              :  :  :  +- ShuffleQueryStage 0\n                  :     :              :  :  :     +- Exchange hashpartitioning(l_orderkey#11L, 200), ENSURE_REQUIREMENTS, [plan_id=244]\n                  :     :              :  :  :        +- *(1) Project [l_orderkey#11L, l_suppkey#13L]\n                  :     :              :  :  :           +- *(1) Filter ((((isnotnull(l_receiptdate#22) AND isnotnull(l_commitdate#21)) AND (l_receiptdate#22 > l_commitdate#21)) AND isnotnull(l_suppkey#13L)) AND isnotnull(l_orderkey#11L))\n                  :     :              :  :  :              +- *(1) ColumnarToRow\n                  :     :              :  :  :                 +- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#11L,l_suppkey#13L,l_commitdate#21,l_receiptdate#22,l_shipdate#26] Batched: true, DataFilters: [isnotnull(l_receiptdate#22), isnotnull(l_commitdate#21), (l_receiptdate#22 > l_commitdate#21), i..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem], PartitionFilters: [], PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate), IsNotNull(l_suppkey), IsNotNull(l_orderkey)], ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>\n                  :     :              :  :  +- *(8) Sort [l_orderkey#85L ASC NULLS FIRST], false, 0\n                  :     :              :  :     +- ShuffleQueryStage 1\n                  :     :              :  :        +- Exchange hashpartitioning(l_orderkey#85L, 200), ENSURE_REQUIREMENTS, [plan_id=263]\n                  :     :              :  :           +- *(2) Project [l_orderkey#85L, l_suppkey#87L]\n                  :     :              :  :              +- *(2) ColumnarToRow\n                  :     :              :  :                 +- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#85L,l_suppkey#87L,l_shipdate#100] Batched: true, DataFilters: [], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem], PartitionFilters: [], PushedFilters: [], ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint>\n                  :     :              :  +- *(10) Sort [l_orderkey#101L ASC NULLS FIRST], false, 0\n                  :     :              :     +- ShuffleQueryStage 2\n                  :     :              :        +- Exchange hashpartitioning(l_orderkey#101L, 200), ENSURE_REQUIREMENTS, [plan_id=283]\n                  :     :              :           +- *(3) Project [l_orderkey#101L, l_suppkey#103L]\n                  :     :              :              +- *(3) Filter ((isnotnull(l_receiptdate#112) AND isnotnull(l_commitdate#111)) AND (l_receiptdate#112 > l_commitdate#111))\n                  :     :              :                 +- *(3) ColumnarToRow\n                  :     :              :                    +- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#101L,l_suppkey#103L,l_commitdate#111,l_receiptdate#112,l_shipdate#116] Batched: true, DataFilters: [isnotnull(l_receiptdate#112), isnotnull(l_commitdate#111), (l_receiptdate#112 > l_commitdate#111)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem], PartitionFilters: [], PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate)], ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>\n                  :     :              +- *(12) Sort [o_orderkey#27L ASC NULLS FIRST], false, 0\n                  :     :                 +- ShuffleQueryStage 3\n                  :     :                    +- Exchange hashpartitioning(o_orderkey#27L, 200), ENSURE_REQUIREMENTS, [plan_id=305]\n                  :     :                       +- *(4) Project [o_orderkey#27L]\n                  :     :                          +- *(4) Filter ((isnotnull(o_orderstatus#29) AND (o_orderstatus#29 = F)) AND isnotnull(o_orderkey#27L))\n                  :     :                             +- *(4) ColumnarToRow\n                  :     :                                +- FileScan parquet spark_catalog.tpch_100.orders[o_orderkey#27L,o_orderstatus#29,o_orderdate#35] Batched: true, DataFilters: [isnotnull(o_orderstatus#29), (o_orderstatus#29 = F), isnotnull(o_orderkey#27L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/orders], PartitionFilters: [], PushedFilters: [IsNotNull(o_orderstatus), EqualTo(o_orderstatus,F), IsNotNull(o_orderkey)], ReadSchema: struct<o_orderkey:bigint,o_orderstatus:string>\n                  :     +- BroadcastQueryStage 7\n                  :        +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=616]\n                  :           +- AQEShuffleRead local\n                  :              +- ShuffleQueryStage 4\n                  :                 +- Exchange hashpartitioning(s_suppkey#4L, 200), ENSURE_REQUIREMENTS, [plan_id=328]\n                  :                    +- *(5) Filter ((isnotnull(s_suppkey#4L) AND isnotnull(s_nationkey#7L)) AND might_contain(Subquery subquery#121, [id=#102], xxhash64(s_nationkey#7L, 42)))\n                  :                       :  +- Subquery subquery#121, [id=#102]\n                  :                       :     +- AdaptiveSparkPlan isFinalPlan=true\n                                                   +- == Final Plan ==\n                                                      ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(n_nationkey#36L, 42), 1, 38, 0, 0)], output=[bloomFilter#120])\n                                                      +- ShuffleQueryStage 0\n                                                         +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=377]\n                                                            +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(n_nationkey#36L, 42), 1, 38, 0, 0)], output=[buf#125])\n                                                               +- *(1) Project [n_nationkey#36L]\n                                                                  +- *(1) Filter ((isnotnull(n_name#37) AND (n_name#37 = PERU)) AND isnotnull(n_nationkey#36L))\n                                                                     +- *(1) ColumnarToRow\n                                                                        +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#36L,n_name#37] Batched: true, DataFilters: [isnotnull(n_name#37), (n_name#37 = PERU), isnotnull(n_nationkey#36L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_name), EqualTo(n_name,PERU), IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n                                                   +- == Initial Plan ==\n                                                      ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(n_nationkey#36L, 42), 1, 38, 0, 0)], output=[bloomFilter#120])\n                                                      +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=100]\n                                                         +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(n_nationkey#36L, 42), 1, 38, 0, 0)], output=[buf#125])\n                                                            +- Project [n_nationkey#36L]\n                                                               +- Filter ((isnotnull(n_name#37) AND (n_name#37 = PERU)) AND isnotnull(n_nationkey#36L))\n                                                                  +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#36L,n_name#37] Batched: true, DataFilters: [isnotnull(n_name#37), (n_name#37 = PERU), isnotnull(n_nationkey#36L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_name), EqualTo(n_name,PERU), IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n                  :                       +- *(5) ColumnarToRow\n                  :                          +- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#4L,s_name#5,s_nationkey#7L] Batched: true, DataFilters: [isnotnull(s_suppkey#4L), isnotnull(s_nationkey#7L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_name:string,s_nationkey:bigint>\n                  +- BroadcastQueryStage 5\n                     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=349]\n                        +- *(6) Project [n_nationkey#36L]\n                           +- *(6) Filter ((isnotnull(n_name#37) AND (n_name#37 = PERU)) AND isnotnull(n_nationkey#36L))\n                              +- *(6) ColumnarToRow\n                                 +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#36L,n_name#37] Batched: true, DataFilters: [isnotnull(n_name#37), (n_name#37 = PERU), isnotnull(n_nationkey#36L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_name), EqualTo(n_name,PERU), IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1902720,
        "inputRowCount" : 39640
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "7" : [ 2478, 2726, 2726, 2726, 2999, 2726, 2726, 2726, 2478, 2726, 2726, 2726, 2999, 2478, 2478, 2478, 2726, 2478, 2478, 2726, 2726, 2478, 2478, 2478, 2726, 2726, 2726, 2999, 2999, 2726, 2726, 2478, 2253, 2999, 2478, 2999, 2478, 2726, 2726, 2726, 2999, 2999, 2726, 2478, 2726, 2726, 2478, 2726, 2478, 2726, 2726, 2726, 2726, 2726, 2726, 2999, 2726, 2999, 2726, 2726, 2999, 2999, 2726, 2478, 2726, 2253, 2999, 2478, 2478, 2726, 2999, 2478, 2726, 2999, 2478, 2999, 2726, 2999, 2999, 2726, 2726, 2478, 2999, 2726, 2478, 2726, 2478, 2726, 2726, 2999, 2478, 2478, 2726, 2478, 2999, 2478, 2726, 2999, 2726, 2726, 2726, 2999, 2726, 2726, 2999, 2726, 2726, 2999, 2726, 2253, 2478, 2478, 2726, 2999, 2999, 2478, 2478, 2726, 2726, 2726, 2253, 2726, 2726, 2726, 2478, 2726, 2726, 2478, 2999, 2726, 2999, 2478, 2478, 2726, 2726, 2999, 2999, 2726, 2999, 2478, 2726, 2478, 2726, 2726, 2726, 2478, 2999, 2726, 2478, 2726, 2999, 2478, 3298, 2726, 2999, 2999, 2999, 2999, 2726, 2478, 2478, 2253, 2478, 2726, 2726, 2726, 2726, 2999, 2726, 2478, 2999, 2999, 2726, 2726, 2999, 2478, 2726, 2478, 2726, 2726, 2478, 2726, 2478, 2726, 2478, 2478, 2726, 2726, 2726, 2726, 2478, 2999, 2726, 2999, 2999, 2726, 2726, 2726, 2726, 2726 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 11,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 30 ],
      "Objectives" : {
        "DurationInMs" : 229,
        "TotalTasksDurationInMs" : 221,
        "IOBytes" : {
          "Total" : 517479,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 517479,
            "SW" : 0
          }
        }
      }
    },
    "9" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -2087522658,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2219896,
                "rowCount" : 39641
              },
              "compileTime" : {
                "sizeInBytes" : 54000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_suppkey#4L, s_name#5, s_nationkey#7L], ShuffleQueryStage 4 "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Project [s_suppkey#4L, s_name#5, s_nationkey#7L], ShuffleQueryStage 4\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -257670652,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 2219896,
            "rowCount" : 39641,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [s_suppkey#4L, s_name#5, s_nationkey#7L] Arguments: 4 "
          }
        },
        "links" : [ ],
        "rawPlan" : "ShuffleQueryStage 4\n+- Exchange hashpartitioning(s_suppkey#4L, 200), ENSURE_REQUIREMENTS, [plan_id=328]\n   +- *(5) Filter ((isnotnull(s_suppkey#4L) AND isnotnull(s_nationkey#7L)) AND might_contain(Subquery subquery#121, [id=#102], xxhash64(s_nationkey#7L, 42)))\n      :  +- Subquery subquery#121, [id=#102]\n      :     +- AdaptiveSparkPlan isFinalPlan=true\n               +- == Final Plan ==\n                  ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(n_nationkey#36L, 42), 1, 38, 0, 0)], output=[bloomFilter#120])\n                  +- ShuffleQueryStage 0\n                     +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=377]\n                        +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(n_nationkey#36L, 42), 1, 38, 0, 0)], output=[buf#125])\n                           +- *(1) Project [n_nationkey#36L]\n                              +- *(1) Filter ((isnotnull(n_name#37) AND (n_name#37 = PERU)) AND isnotnull(n_nationkey#36L))\n                                 +- *(1) ColumnarToRow\n                                    +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#36L,n_name#37] Batched: true, DataFilters: [isnotnull(n_name#37), (n_name#37 = PERU), isnotnull(n_nationkey#36L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_name), EqualTo(n_name,PERU), IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n               +- == Initial Plan ==\n                  ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(n_nationkey#36L, 42), 1, 38, 0, 0)], output=[bloomFilter#120])\n                  +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=100]\n                     +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(n_nationkey#36L, 42), 1, 38, 0, 0)], output=[buf#125])\n                        +- Project [n_nationkey#36L]\n                           +- Filter ((isnotnull(n_name#37) AND (n_name#37 = PERU)) AND isnotnull(n_nationkey#36L))\n                              +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#36L,n_name#37] Batched: true, DataFilters: [isnotnull(n_name#37), (n_name#37 = PERU), isnotnull(n_nationkey#36L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_name), EqualTo(n_name,PERU), IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n      +- *(5) ColumnarToRow\n         +- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#4L,s_name#5,s_nationkey#7L] Batched: true, DataFilters: [isnotnull(s_suppkey#4L), isnotnull(s_nationkey#7L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_name:string,s_nationkey:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2219896,
        "inputRowCount" : 39641
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "5" : [ 2726, 2726, 2999, 3298, 2999, 2726, 2999, 3298, 3298, 2999, 2726, 3298, 2999, 2999, 2999, 3298, 2726, 2999, 2999, 3298, 3298, 2999, 3298, 3298, 3298, 2999, 2726, 2999, 2726, 2999, 2999, 2999, 2999, 2726, 2999, 2999, 2999, 3298, 2999, 2726, 2999, 3298, 2999, 2999, 2999, 2726, 2999, 2999, 2999, 2726, 2999, 3298, 3298, 3298, 2999, 3298, 3298, 3298, 3298, 2999, 2999, 2726, 2726, 2999, 3298, 2999, 2726, 2726, 2726, 3298, 3298, 3298, 2726, 2726, 3298, 3298, 3298, 3298, 2999, 2726, 3298, 2726, 2999, 2999, 2726, 3298, 2999, 2999, 2999, 2999, 2999, 2999, 2726, 2726, 2726, 2999, 3298, 2726, 2726, 2999, 2999, 2999, 2726, 2999, 3298, 2726, 2726, 3298, 3298, 2999, 2726, 2999, 3298, 2726, 2999, 3298, 2999, 3298, 3298, 2999, 2999, 2999, 2999, 2999, 3298, 2999, 2726, 2726, 2726, 2999, 3298, 3298, 3628, 3298, 2999, 3298, 2999, 2726, 2726, 3298, 3298, 2726, 3628, 3298, 2726, 3298, 2999, 2999, 2999, 3298, 2999, 2999, 2726, 2726, 2726, 2999, 2999, 2999, 3298, 2999, 2999, 2999, 2999, 2999, 2999, 2999, 2999, 3298, 2999, 3298, 3628, 2999, 2726, 2999, 2999, 3298, 2999, 3298, 3298, 3628, 3298, 2999, 2999, 3298, 2999, 3298, 2726, 3298, 2999, 2999, 3298, 2999, 3298, 3298, 2999, 2999, 3298, 2999, 2999, 2999 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 9,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 17 ],
      "Objectives" : {
        "DurationInMs" : 46673,
        "TotalTasksDurationInMs" : 49,
        "IOBytes" : {
          "Total" : 580904,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 580904,
            "SW" : 0
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1566606054,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(n_nationkey#36L, 42), 1, 38, 0, 0) AS bloomFilter#120] "
          }
        },
        "links" : [ ],
        "rawPlan" : "Aggregate [bloom_filter_agg(xxhash64(n_nationkey#36L, 42), 1, 38, 0, 0) AS bloomFilter#120]\n+- Project [n_nationkey#36L]\n   +- Filter ((isnotnull(n_name#37) AND (n_name#37 = PERU)) AND isnotnull(n_nationkey#36L))\n      +- Relation spark_catalog.tpch_100.nation[n_nationkey#36L,n_name#37,n_regionkey#38L,n_comment#39] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1683108764,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [n_nationkey#36L] Keys: [] Functions [1]: [partial_bloom_filter_agg(xxhash64(n_nationkey#36L, 42), 1, 38, 0, 0)] Aggregate Attributes [1]: [buf#124] Results [1]: [buf#125] "
          },
          "1" : {
            "sign" : 268773739,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [n_nationkey#36L] Input [2]: [n_nationkey#36L, n_name#37] "
          },
          "2" : {
            "sign" : -153154415,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [n_nationkey#36L, n_name#37] Condition : ((isnotnull(n_name#37) AND (n_name#37 = PERU)) AND isnotnull(n_nationkey#36L)) "
          },
          "3" : {
            "sign" : 1857658468,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.nation Output [2]: [n_nationkey#36L, n_name#37] Batched: true Location: InMemoryFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation] PushedFilters: [IsNotNull(n_name), EqualTo(n_name,PERU), IsNotNull(n_nationkey)] ReadSchema: struct<n_nationkey:bigint,n_name:string> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpch_100.nation",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(n_nationkey#36L, 42), 1, 38, 0, 0)], output=[buf#125])\n+- Project [n_nationkey#36L]\n   +- Filter ((isnotnull(n_name#37) AND (n_name#37 = PERU)) AND isnotnull(n_nationkey#36L))\n      +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#36L,n_name#37] Batched: true, DataFilters: [isnotnull(n_name#37), (n_name#37 = PERU), isnotnull(n_nationkey#36L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_name), EqualTo(n_name,PERU), IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 16,
        "inputRowCount" : 1
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 7 ],
      "Objectives" : {
        "DurationInMs" : 3030,
        "TotalTasksDurationInMs" : 171,
        "IOBytes" : {
          "Total" : 2861,
          "Details" : {
            "IR" : 2780,
            "IW" : 0,
            "SR" : 0,
            "SW" : 81
          }
        }
      }
    },
    "10" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -793471388,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1239708197067704,
                "rowCount" : 23840542251302
              },
              "compileTime" : {
                "sizeInBytes" : 1239708197067704,
                "rowCount" : 23840542251302
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#4L = l_suppkey#13L) "
          },
          "5" : {
            "sign" : -1473525224,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 158592272,
                "rowCount" : 9912017
              },
              "compileTime" : {
                "sizeInBytes" : 9622579552,
                "rowCount" : 601411222
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_suppkey#13L], ShuffleQueryStage 6 "
          },
          "6" : {
            "sign" : 960703765,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1048584,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 16,
                "rowCount" : 1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#36L], BroadcastQueryStage 5 "
          },
          "1" : {
            "sign" : 660457599,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 667535183036456,
                "rowCount" : 23840542251302
              },
              "compileTime" : {
                "sizeInBytes" : 667535183036456,
                "rowCount" : 23840542251302
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_name#5] "
          },
          "0" : {
            "sign" : 2084934306,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 858259521046872,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 858259521046872,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [s_name#5], [s_name#5, count(1) AS numwait#81L] "
          },
          "2" : {
            "sign" : -1026083941,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1048983859057288,
                "rowCount" : 23840542251302
              },
              "compileTime" : {
                "sizeInBytes" : 1048983859057288,
                "rowCount" : 23840542251302
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#7L = n_nationkey#36L) "
          },
          "3" : {
            "sign" : -85244178,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 858259521046872,
                "rowCount" : 23840542251302
              },
              "compileTime" : {
                "sizeInBytes" : 858259521046872,
                "rowCount" : 23840542251302
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_name#5, s_nationkey#7L] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [s_name#5], [s_name#5, count(1) AS numwait#81L]\n+- Project [s_name#5]\n   +- Join Inner, (s_nationkey#7L = n_nationkey#36L)\n      :- Project [s_name#5, s_nationkey#7L]\n      :  +- Join Inner, (s_suppkey#4L = l_suppkey#13L)\n      :     :- LogicalQueryStage Project [l_suppkey#13L], ShuffleQueryStage 6\n      :     +- LogicalQueryStage Project [s_suppkey#4L, s_name#5, s_nationkey#7L], ShuffleQueryStage 4\n      +- LogicalQueryStage Project [n_nationkey#36L], BroadcastQueryStage 5\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -384410077,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 1239708197067704,
            "rowCount" : 23840542251302,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [l_suppkey#13L] Right keys [1]: [s_suppkey#4L] Join type: Inner Join condition: None "
          },
          "5" : {
            "sign" : -254767947,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 158592272,
            "rowCount" : 9912017,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [l_suppkey#13L] Arguments: 6 "
          },
          "6" : {
            "sign" : -691489520,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 6291456,
            "rowCount" : 39641,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [3]: [s_suppkey#4L, s_name#5, s_nationkey#7L] Arguments: 7 "
          },
          "1" : {
            "sign" : -1008165754,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 667535183036456,
            "rowCount" : 23840542251302,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [s_name#5] Input [3]: [s_name#5, s_nationkey#7L, n_nationkey#36L] "
          },
          "0" : {
            "sign" : 521373460,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 858259521046872,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [1]: [s_name#5] Keys [1]: [s_name#5] Functions [1]: [partial_count(1)] Aggregate Attributes [1]: [count#122L] Results [2]: [s_name#5, count#123L] "
          },
          "2" : {
            "sign" : 1088996222,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 1048983859057288,
            "rowCount" : 23840542251302,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [s_nationkey#7L] Right keys [1]: [n_nationkey#36L] Join type: Inner Join condition: None "
          },
          "7" : {
            "sign" : 1319773763,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048584,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [n_nationkey#36L] Arguments: 5 "
          },
          "3" : {
            "sign" : -604384315,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 858259521046872,
            "rowCount" : 23840542251302,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [s_name#5, s_nationkey#7L] Input [4]: [l_suppkey#13L, s_suppkey#4L, s_name#5, s_nationkey#7L] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "BroadcastQueryStage",
          "toId" : 4,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastHashJoin",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[s_name#5], functions=[partial_count(1)], output=[s_name#5, count#123L])\n+- Project [s_name#5]\n   +- BroadcastHashJoin [s_nationkey#7L], [n_nationkey#36L], Inner, BuildRight, false\n      :- Project [s_name#5, s_nationkey#7L]\n      :  +- BroadcastHashJoin [l_suppkey#13L], [s_suppkey#4L], Inner, BuildRight, false\n      :     :- ShuffleQueryStage 6\n      :     :  +- Exchange hashpartitioning(l_suppkey#13L, 200), ENSURE_REQUIREMENTS, [plan_id=521]\n      :     :     +- *(13) Project [l_suppkey#13L]\n      :     :        +- *(13) SortMergeJoin [l_orderkey#11L], [o_orderkey#27L], Inner\n      :     :           :- *(11) SortMergeJoin [l_orderkey#11L], [l_orderkey#101L], LeftAnti, NOT (l_suppkey#103L = l_suppkey#13L)\n      :     :           :  :- *(9) SortMergeJoin [l_orderkey#11L], [l_orderkey#85L], LeftSemi, NOT (l_suppkey#87L = l_suppkey#13L)\n      :     :           :  :  :- *(7) Sort [l_orderkey#11L ASC NULLS FIRST], false, 0\n      :     :           :  :  :  +- ShuffleQueryStage 0\n      :     :           :  :  :     +- Exchange hashpartitioning(l_orderkey#11L, 200), ENSURE_REQUIREMENTS, [plan_id=244]\n      :     :           :  :  :        +- *(1) Project [l_orderkey#11L, l_suppkey#13L]\n      :     :           :  :  :           +- *(1) Filter ((((isnotnull(l_receiptdate#22) AND isnotnull(l_commitdate#21)) AND (l_receiptdate#22 > l_commitdate#21)) AND isnotnull(l_suppkey#13L)) AND isnotnull(l_orderkey#11L))\n      :     :           :  :  :              +- *(1) ColumnarToRow\n      :     :           :  :  :                 +- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#11L,l_suppkey#13L,l_commitdate#21,l_receiptdate#22,l_shipdate#26] Batched: true, DataFilters: [isnotnull(l_receiptdate#22), isnotnull(l_commitdate#21), (l_receiptdate#22 > l_commitdate#21), i..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem], PartitionFilters: [], PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate), IsNotNull(l_suppkey), IsNotNull(l_orderkey)], ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>\n      :     :           :  :  +- *(8) Sort [l_orderkey#85L ASC NULLS FIRST], false, 0\n      :     :           :  :     +- ShuffleQueryStage 1\n      :     :           :  :        +- Exchange hashpartitioning(l_orderkey#85L, 200), ENSURE_REQUIREMENTS, [plan_id=263]\n      :     :           :  :           +- *(2) Project [l_orderkey#85L, l_suppkey#87L]\n      :     :           :  :              +- *(2) ColumnarToRow\n      :     :           :  :                 +- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#85L,l_suppkey#87L,l_shipdate#100] Batched: true, DataFilters: [], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem], PartitionFilters: [], PushedFilters: [], ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint>\n      :     :           :  +- *(10) Sort [l_orderkey#101L ASC NULLS FIRST], false, 0\n      :     :           :     +- ShuffleQueryStage 2\n      :     :           :        +- Exchange hashpartitioning(l_orderkey#101L, 200), ENSURE_REQUIREMENTS, [plan_id=283]\n      :     :           :           +- *(3) Project [l_orderkey#101L, l_suppkey#103L]\n      :     :           :              +- *(3) Filter ((isnotnull(l_receiptdate#112) AND isnotnull(l_commitdate#111)) AND (l_receiptdate#112 > l_commitdate#111))\n      :     :           :                 +- *(3) ColumnarToRow\n      :     :           :                    +- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#101L,l_suppkey#103L,l_commitdate#111,l_receiptdate#112,l_shipdate#116] Batched: true, DataFilters: [isnotnull(l_receiptdate#112), isnotnull(l_commitdate#111), (l_receiptdate#112 > l_commitdate#111)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem], PartitionFilters: [], PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate)], ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>\n      :     :           +- *(12) Sort [o_orderkey#27L ASC NULLS FIRST], false, 0\n      :     :              +- ShuffleQueryStage 3\n      :     :                 +- Exchange hashpartitioning(o_orderkey#27L, 200), ENSURE_REQUIREMENTS, [plan_id=305]\n      :     :                    +- *(4) Project [o_orderkey#27L]\n      :     :                       +- *(4) Filter ((isnotnull(o_orderstatus#29) AND (o_orderstatus#29 = F)) AND isnotnull(o_orderkey#27L))\n      :     :                          +- *(4) ColumnarToRow\n      :     :                             +- FileScan parquet spark_catalog.tpch_100.orders[o_orderkey#27L,o_orderstatus#29,o_orderdate#35] Batched: true, DataFilters: [isnotnull(o_orderstatus#29), (o_orderstatus#29 = F), isnotnull(o_orderkey#27L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/orders], PartitionFilters: [], PushedFilters: [IsNotNull(o_orderstatus), EqualTo(o_orderstatus,F), IsNotNull(o_orderkey)], ReadSchema: struct<o_orderkey:bigint,o_orderstatus:string>\n      :     +- BroadcastQueryStage 7\n      :        +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=616]\n      :           +- AQEShuffleRead local\n      :              +- ShuffleQueryStage 4\n      :                 +- Exchange hashpartitioning(s_suppkey#4L, 200), ENSURE_REQUIREMENTS, [plan_id=328]\n      :                    +- *(5) Filter ((isnotnull(s_suppkey#4L) AND isnotnull(s_nationkey#7L)) AND might_contain(Subquery subquery#121, [id=#102], xxhash64(s_nationkey#7L, 42)))\n      :                       :  +- Subquery subquery#121, [id=#102]\n      :                       :     +- AdaptiveSparkPlan isFinalPlan=true\n                                       +- == Final Plan ==\n                                          ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(n_nationkey#36L, 42), 1, 38, 0, 0)], output=[bloomFilter#120])\n                                          +- ShuffleQueryStage 0\n                                             +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=377]\n                                                +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(n_nationkey#36L, 42), 1, 38, 0, 0)], output=[buf#125])\n                                                   +- *(1) Project [n_nationkey#36L]\n                                                      +- *(1) Filter ((isnotnull(n_name#37) AND (n_name#37 = PERU)) AND isnotnull(n_nationkey#36L))\n                                                         +- *(1) ColumnarToRow\n                                                            +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#36L,n_name#37] Batched: true, DataFilters: [isnotnull(n_name#37), (n_name#37 = PERU), isnotnull(n_nationkey#36L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_name), EqualTo(n_name,PERU), IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n                                       +- == Initial Plan ==\n                                          ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(n_nationkey#36L, 42), 1, 38, 0, 0)], output=[bloomFilter#120])\n                                          +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=100]\n                                             +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(n_nationkey#36L, 42), 1, 38, 0, 0)], output=[buf#125])\n                                                +- Project [n_nationkey#36L]\n                                                   +- Filter ((isnotnull(n_name#37) AND (n_name#37 = PERU)) AND isnotnull(n_nationkey#36L))\n                                                      +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#36L,n_name#37] Batched: true, DataFilters: [isnotnull(n_name#37), (n_name#37 = PERU), isnotnull(n_nationkey#36L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_name), EqualTo(n_name,PERU), IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n      :                       +- *(5) ColumnarToRow\n      :                          +- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#4L,s_name#5,s_nationkey#7L] Batched: true, DataFilters: [isnotnull(s_suppkey#4L), isnotnull(s_nationkey#7L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_name:string,s_nationkey:bigint>\n      +- BroadcastQueryStage 5\n         +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=349]\n            +- *(6) Project [n_nationkey#36L]\n               +- *(6) Filter ((isnotnull(n_name#37) AND (n_name#37 = PERU)) AND isnotnull(n_nationkey#36L))\n                  +- *(6) ColumnarToRow\n                     +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#36L,n_name#37] Batched: true, DataFilters: [isnotnull(n_name#37), (n_name#37 = PERU), isnotnull(n_nationkey#36L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_name), EqualTo(n_name,PERU), IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 165932312,
        "inputRowCount" : 9951659
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "6" : [ 272965, 277895, 284670, 280636, 285127, 286494, 281420, 284579, 282247, 279914, 283088, 285700, 285734, 276099, 284659, 279941, 284539, 277712, 282341, 291729, 280611, 283982, 282663, 279522, 284100, 282865, 286717, 283651, 274978, 279505, 273505, 283257, 281586, 283589, 277438, 283269, 282307, 277396, 290408, 278775, 281285, 280948, 280152, 278210, 276831, 275650, 283940, 278817, 283376, 287728, 283014, 280478, 280674, 282550, 282890, 285261, 282425, 284485, 277112, 274953, 276425, 278585, 277176, 281940, 282020, 289043, 284328, 275817, 274799, 277985, 278353, 284361, 279059, 281830, 282258, 278265, 280680, 283148, 280570, 279245, 283381, 273488, 280097, 279137, 279867, 283694, 284510, 283325, 280822, 280820, 280110, 277946, 280052, 288622, 281664, 280961, 282342, 283325, 288214, 286081, 283813, 291170, 282641, 280214, 284074, 279913, 278789, 278409, 284030, 287191, 278947, 276581, 276492, 281678, 281593, 288512, 277441, 279917, 283662, 277935, 278291, 279659, 284967, 283121, 289844, 280625, 282494, 285576, 282622, 278556, 281610, 286749, 275324, 286567, 276760, 280742, 284864, 279242, 282789, 279663, 291517, 287304, 279639, 280093, 281410, 281044, 279688, 288206, 281481, 277521, 287157, 277105, 278000, 272777, 280288, 286479, 287683, 279316, 282177, 280653, 280245, 274532, 283411, 280529, 287178, 287071, 277488, 282911, 281052, 273649, 289000, 279320, 279722, 282283, 279514, 281647, 288860, 284096, 275203, 284206, 281647, 280203, 274753, 279250, 275665, 280551, 282765, 282736, 283707, 279481, 288575, 277777, 283140, 287343, 279681, 277746, 285397, 283455, 282214, 281827 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 10,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 23 ],
      "Objectives" : {
        "DurationInMs" : 1661,
        "TotalTasksDurationInMs" : 1653,
        "IOBytes" : {
          "Total" : 54203285,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 53685806,
            "SW" : 517479
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1371755505,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 40,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(n_nationkey#36L, 42), 1, 38, 0, 0) AS bloomFilter#120], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(n_nationkey#36L, 42), 1, 38, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(n_nationkey#36L, 42), 1, 38, 0, 0) AS bloomFilter#120], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(n_nationkey#36L, 42), 1, 38, 0, 0)])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 66301134,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 40,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [buf#125] Keys: [] Functions [1]: [bloom_filter_agg(xxhash64(n_nationkey#36L, 42), 1, 38, 0, 0)] Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(n_nationkey#36L, 42), 1, 38, 0, 0)#119] Results [1]: [bloom_filter_agg(xxhash64(n_nationkey#36L, 42), 1, 38, 0, 0)#119 AS bloomFilter#120] "
          },
          "1" : {
            "sign" : 161980550,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [buf#125] Arguments: 0 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(n_nationkey#36L, 42), 1, 38, 0, 0)], output=[bloomFilter#120])\n+- ShuffleQueryStage 0\n   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=377]\n      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(n_nationkey#36L, 42), 1, 38, 0, 0)], output=[buf#125])\n         +- *(1) Project [n_nationkey#36L]\n            +- *(1) Filter ((isnotnull(n_name#37) AND (n_name#37 = PERU)) AND isnotnull(n_nationkey#36L))\n               +- *(1) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#36L,n_name#37] Batched: true, DataFilters: [isnotnull(n_name#37), (n_name#37 = PERU), isnotnull(n_nationkey#36L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_name), EqualTo(n_name,PERU), IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 40,
        "inputRowCount" : 1
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "4" : [ 88 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 11,
        "FinishedTasksNum" : 111,
        "FinishedTasksTotalTimeInMs" : 41595.0,
        "FinishedTasksDistributionInMs" : [ 216.0, 318.0, 363.0, 397.0, 1083.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 9 ],
      "Objectives" : {
        "DurationInMs" : 242,
        "TotalTasksDurationInMs" : 218,
        "IOBytes" : {
          "Total" : 81,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 81,
            "SW" : 0
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -793416515,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4800303216,
                "rowCount" : 200012634
              },
              "compileTime" : {
                "sizeInBytes" : 4800303216,
                "rowCount" : 200012634
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_orderkey#11L, l_suppkey#13L] "
          },
          "1" : {
            "sign" : -957302628,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 37202349924,
                "rowCount" : 200012634
              },
              "compileTime" : {
                "sizeInBytes" : 37202349924,
                "rowCount" : 200012634
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(l_receiptdate#22) AND isnotnull(l_commitdate#21)) AND (l_receiptdate#22 > l_commitdate#21)) AND isnotnull(l_suppkey#13L)) AND isnotnull(l_orderkey#11L)) "
          },
          "2" : {
            "sign" : -61390731,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 111607049772,
                "rowCount" : 600037902
              },
              "compileTime" : {
                "sizeInBytes" : 111607049772,
                "rowCount" : 600037902
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [l_orderkey#11L, l_partkey#12L, l_suppkey#13L, l_linenumber#14, l_quantity#15, l_extendedprice#16, l_discount#17, l_tax#18, l_returnflag#19, l_linestatus#20, l_commitdate#21, l_receiptdate#22, l_shipinstruct#23, l_shipmode#24, l_comment#25, l_shipdate#26], `spark_catalog`.`tpch_100`.`lineitem`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [l_orderkey#11L, l_suppkey#13L]\n+- Filter ((((isnotnull(l_receiptdate#22) AND isnotnull(l_commitdate#21)) AND (l_receiptdate#22 > l_commitdate#21)) AND isnotnull(l_suppkey#13L)) AND isnotnull(l_orderkey#11L))\n   +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#11L,l_partkey#12L,l_suppkey#13L,l_linenumber#14,l_quantity#15,l_extendedprice#16,l_discount#17,l_tax#18,l_returnflag#19,l_linestatus#20,l_commitdate#21,l_receiptdate#22,l_shipinstruct#23,l_shipmode#24,l_comment#25,l_shipdate#26] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1833100333,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 4800303216,
            "rowCount" : 200012634,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [l_orderkey#11L, l_suppkey#13L] Input [5]: [l_orderkey#11L, l_suppkey#13L, l_commitdate#21, l_receiptdate#22, l_shipdate#26] "
          },
          "1" : {
            "sign" : 877609932,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 4800303216,
            "rowCount" : 200012634,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [5]: [l_orderkey#11L, l_suppkey#13L, l_commitdate#21, l_receiptdate#22, l_shipdate#26] Condition : ((((isnotnull(l_receiptdate#22) AND isnotnull(l_commitdate#21)) AND (l_receiptdate#22 > l_commitdate#21)) AND isnotnull(l_suppkey#13L)) AND isnotnull(l_orderkey#11L)) "
          },
          "2" : {
            "sign" : 44402149,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 4800303216,
            "rowCount" : 200012634,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.lineitem Output [5]: [l_orderkey#11L, l_suppkey#13L, l_commitdate#21, l_receiptdate#22, l_shipdate#26] Batched: true Location: CatalogFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem] PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate), IsNotNull(l_suppkey), IsNotNull(l_orderkey)] ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpch_100.lineitem",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [l_orderkey#11L, l_suppkey#13L]\n+- Filter ((((isnotnull(l_receiptdate#22) AND isnotnull(l_commitdate#21)) AND (l_receiptdate#22 > l_commitdate#21)) AND isnotnull(l_suppkey#13L)) AND isnotnull(l_orderkey#11L))\n   +- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#11L,l_suppkey#13L,l_commitdate#21,l_receiptdate#22,l_shipdate#26] Batched: true, DataFilters: [isnotnull(l_receiptdate#22), isnotnull(l_commitdate#21), (l_receiptdate#22 > l_commitdate#21), i..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem], PartitionFilters: [], PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate), IsNotNull(l_suppkey), IsNotNull(l_orderkey)], ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 4800303216,
        "inputRowCount" : 200012634
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 2 ],
      "Objectives" : {
        "DurationInMs" : 16400,
        "TotalTasksDurationInMs" : 256355,
        "IOBytes" : {
          "Total" : 12536739509,
          "Details" : {
            "IR" : 7560907431,
            "IW" : 0,
            "SR" : 0,
            "SW" : 4975832078
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1834175151,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 16,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 16,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_nationkey#36L] "
          },
          "1" : {
            "sign" : 1951646793,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 131,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 131,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(n_name#37) AND (n_name#37 = PERU)) AND isnotnull(n_nationkey#36L)) "
          },
          "2" : {
            "sign" : -2109773610,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3275,
                "rowCount" : 25
              },
              "compileTime" : {
                "sizeInBytes" : 3275,
                "rowCount" : 25
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [n_nationkey#36L, n_name#37, n_regionkey#38L, n_comment#39], `spark_catalog`.`tpch_100`.`nation`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [n_nationkey#36L]\n+- Filter ((isnotnull(n_name#37) AND (n_name#37 = PERU)) AND isnotnull(n_nationkey#36L))\n   +- Relation spark_catalog.tpch_100.nation[n_nationkey#36L,n_name#37,n_regionkey#38L,n_comment#39] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 268773739,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [n_nationkey#36L] Input [2]: [n_nationkey#36L, n_name#37] "
          },
          "1" : {
            "sign" : -153154415,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [n_nationkey#36L, n_name#37] Condition : ((isnotnull(n_name#37) AND (n_name#37 = PERU)) AND isnotnull(n_nationkey#36L)) "
          },
          "2" : {
            "sign" : 1857658468,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.nation Output [2]: [n_nationkey#36L, n_name#37] Batched: true Location: InMemoryFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation] PushedFilters: [IsNotNull(n_name), EqualTo(n_name,PERU), IsNotNull(n_nationkey)] ReadSchema: struct<n_nationkey:bigint,n_name:string> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpch_100.nation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [n_nationkey#36L]\n+- Filter ((isnotnull(n_name#37) AND (n_name#37 = PERU)) AND isnotnull(n_nationkey#36L))\n   +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#36L,n_name#37] Batched: true, DataFilters: [isnotnull(n_name#37), (n_name#37 = PERU), isnotnull(n_nationkey#36L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_name), EqualTo(n_name,PERU), IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 16,
        "inputRowCount" : 1
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 0 ],
      "Objectives" : {
        "DurationInMs" : 3502,
        "TotalTasksDurationInMs" : 3457,
        "IOBytes" : {
          "Total" : 2780,
          "Details" : {
            "IR" : 2780,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -36946492,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14400909648,
                "rowCount" : 600037902
              },
              "compileTime" : {
                "sizeInBytes" : 14400909648,
                "rowCount" : 600037902
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_orderkey#85L, l_suppkey#87L] "
          },
          "1" : {
            "sign" : -2030251409,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 111607049772,
                "rowCount" : 600037902
              },
              "compileTime" : {
                "sizeInBytes" : 111607049772,
                "rowCount" : 600037902
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [l_orderkey#85L, l_partkey#86L, l_suppkey#87L, l_linenumber#88, l_quantity#89, l_extendedprice#90, l_discount#91, l_tax#92, l_returnflag#93, l_linestatus#94, l_commitdate#95, l_receiptdate#96, l_shipinstruct#97, l_shipmode#98, l_comment#99, l_shipdate#100], `spark_catalog`.`tpch_100`.`lineitem`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "LogicalRelation",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [l_orderkey#85L, l_suppkey#87L]\n+- Relation spark_catalog.tpch_100.lineitem[l_orderkey#85L,l_partkey#86L,l_suppkey#87L,l_linenumber#88,l_quantity#89,l_extendedprice#90,l_discount#91,l_tax#92,l_returnflag#93,l_linestatus#94,l_commitdate#95,l_receiptdate#96,l_shipinstruct#97,l_shipmode#98,l_comment#99,l_shipdate#100] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 117864414,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 14400909648,
            "rowCount" : 600037902,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [l_orderkey#85L, l_suppkey#87L] Input [3]: [l_orderkey#85L, l_suppkey#87L, l_shipdate#100] "
          },
          "1" : {
            "sign" : -280162423,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 14400909648,
            "rowCount" : 600037902,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.lineitem Output [3]: [l_orderkey#85L, l_suppkey#87L, l_shipdate#100] Batched: true Location: CatalogFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem] ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpch_100.lineitem",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [l_orderkey#85L, l_suppkey#87L]\n+- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#85L,l_suppkey#87L,l_shipdate#100] Batched: true, DataFilters: [], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem], PartitionFilters: [], PushedFilters: [], ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 14400909648,
        "inputRowCount" : 600037902
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 28992,
        "TotalTasksDurationInMs" : 206706,
        "IOBytes" : {
          "Total" : 14443801934,
          "Details" : {
            "IR" : 6575875010,
            "IW" : 0,
            "SR" : 0,
            "SW" : 7867926924
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1870124772,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 54000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 54000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_suppkey#4L, s_name#5, s_nationkey#7L] "
          },
          "1" : {
            "sign" : -1602951266,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 201000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 201000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(s_suppkey#4L) AND isnotnull(s_nationkey#7L)) AND might_contain(scalar-subquery#121 [], xxhash64(s_nationkey#7L, 42))) "
          },
          "2" : {
            "sign" : -265163964,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 201000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 201000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_suppkey#4L, s_name#5, s_address#6, s_nationkey#7L, s_phone#8, s_acctbal#9, s_comment#10], `spark_catalog`.`tpch_100`.`supplier`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [s_suppkey#4L, s_name#5, s_nationkey#7L]\n+- Filter ((isnotnull(s_suppkey#4L) AND isnotnull(s_nationkey#7L)) AND might_contain(scalar-subquery#121 [], xxhash64(s_nationkey#7L, 42)))\n   :  +- Aggregate [bloom_filter_agg(xxhash64(n_nationkey#36L, 42), 1, 38, 0, 0) AS bloomFilter#120]\n   :     +- Project [n_nationkey#36L]\n   :        +- Filter ((isnotnull(n_name#37) AND (n_name#37 = PERU)) AND isnotnull(n_nationkey#36L))\n   :           +- Relation spark_catalog.tpch_100.nation[n_nationkey#36L,n_name#37,n_regionkey#38L,n_comment#39] parquet\n   +- Relation spark_catalog.tpch_100.supplier[s_suppkey#4L,s_name#5,s_address#6,s_nationkey#7L,s_phone#8,s_acctbal#9,s_comment#10] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 619079890,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 54000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [s_suppkey#4L, s_name#5, s_nationkey#7L] Condition : ((isnotnull(s_suppkey#4L) AND isnotnull(s_nationkey#7L)) AND might_contain(Subquery subquery#121, [id=#102], xxhash64(s_nationkey#7L, 42))) "
          },
          "1" : {
            "sign" : 360398252,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 54000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.supplier Output [3]: [s_suppkey#4L, s_name#5, s_nationkey#7L] Batched: true Location: InMemoryFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier] PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)] ReadSchema: struct<s_suppkey:bigint,s_name:string,s_nationkey:bigint> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpch_100.supplier",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter ((isnotnull(s_suppkey#4L) AND isnotnull(s_nationkey#7L)) AND might_contain(Subquery subquery#121, [id=#102], xxhash64(s_nationkey#7L, 42)))\n:  +- Subquery subquery#121, [id=#102]\n:     +- AdaptiveSparkPlan isFinalPlan=false\n:        +- ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(n_nationkey#36L, 42), 1, 38, 0, 0)], output=[bloomFilter#120])\n:           +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=100]\n:              +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(n_nationkey#36L, 42), 1, 38, 0, 0)], output=[buf#125])\n:                 +- Project [n_nationkey#36L]\n:                    +- Filter ((isnotnull(n_name#37) AND (n_name#37 = PERU)) AND isnotnull(n_nationkey#36L))\n:                       +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#36L,n_name#37] Batched: true, DataFilters: [isnotnull(n_name#37), (n_name#37 = PERU), isnotnull(n_nationkey#36L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_name), EqualTo(n_name,PERU), IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n+- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#4L,s_name#5,s_nationkey#7L] Batched: true, DataFilters: [isnotnull(s_suppkey#4L), isnotnull(s_nationkey#7L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_name:string,s_nationkey:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 54000000,
        "inputRowCount" : 1000000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 10 ],
      "Objectives" : {
        "DurationInMs" : 378,
        "TotalTasksDurationInMs" : 1422,
        "IOBytes" : {
          "Total" : 13172672,
          "Details" : {
            "IR" : 12591768,
            "IW" : 0,
            "SR" : 0,
            "SW" : 580904
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 386723909,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4800303216,
                "rowCount" : 200012634
              },
              "compileTime" : {
                "sizeInBytes" : 4800303216,
                "rowCount" : 200012634
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_orderkey#101L, l_suppkey#103L] "
          },
          "1" : {
            "sign" : -1113317688,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 37202349924,
                "rowCount" : 200012634
              },
              "compileTime" : {
                "sizeInBytes" : 37202349924,
                "rowCount" : 200012634
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(l_receiptdate#112) AND isnotnull(l_commitdate#111)) AND (l_receiptdate#112 > l_commitdate#111)) "
          },
          "2" : {
            "sign" : 237059681,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 111607049772,
                "rowCount" : 600037902
              },
              "compileTime" : {
                "sizeInBytes" : 111607049772,
                "rowCount" : 600037902
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [l_orderkey#101L, l_partkey#102L, l_suppkey#103L, l_linenumber#104, l_quantity#105, l_extendedprice#106, l_discount#107, l_tax#108, l_returnflag#109, l_linestatus#110, l_commitdate#111, l_receiptdate#112, l_shipinstruct#113, l_shipmode#114, l_comment#115, l_shipdate#116], `spark_catalog`.`tpch_100`.`lineitem`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [l_orderkey#101L, l_suppkey#103L]\n+- Filter ((isnotnull(l_receiptdate#112) AND isnotnull(l_commitdate#111)) AND (l_receiptdate#112 > l_commitdate#111))\n   +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#101L,l_partkey#102L,l_suppkey#103L,l_linenumber#104,l_quantity#105,l_extendedprice#106,l_discount#107,l_tax#108,l_returnflag#109,l_linestatus#110,l_commitdate#111,l_receiptdate#112,l_shipinstruct#113,l_shipmode#114,l_comment#115,l_shipdate#116] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 971583699,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 4800303216,
            "rowCount" : 200012634,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [l_orderkey#101L, l_suppkey#103L] Input [5]: [l_orderkey#101L, l_suppkey#103L, l_commitdate#111, l_receiptdate#112, l_shipdate#116] "
          },
          "1" : {
            "sign" : -1971061712,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 4800303216,
            "rowCount" : 200012634,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [5]: [l_orderkey#101L, l_suppkey#103L, l_commitdate#111, l_receiptdate#112, l_shipdate#116] Condition : ((isnotnull(l_receiptdate#112) AND isnotnull(l_commitdate#111)) AND (l_receiptdate#112 > l_commitdate#111)) "
          },
          "2" : {
            "sign" : 1609094199,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 4800303216,
            "rowCount" : 200012634,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.lineitem Output [5]: [l_orderkey#101L, l_suppkey#103L, l_commitdate#111, l_receiptdate#112, l_shipdate#116] Batched: true Location: CatalogFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem] PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate)] ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpch_100.lineitem",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [l_orderkey#101L, l_suppkey#103L]\n+- Filter ((isnotnull(l_receiptdate#112) AND isnotnull(l_commitdate#111)) AND (l_receiptdate#112 > l_commitdate#111))\n   +- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#101L,l_suppkey#103L,l_commitdate#111,l_receiptdate#112,l_shipdate#116] Batched: true, DataFilters: [isnotnull(l_receiptdate#112), isnotnull(l_commitdate#111), (l_receiptdate#112 > l_commitdate#111)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem], PartitionFilters: [], PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate)], ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 4800303216,
        "inputRowCount" : 200012634
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 4 ],
      "Objectives" : {
        "DurationInMs" : 39548,
        "TotalTasksDurationInMs" : 175628,
        "IOBytes" : {
          "Total" : 12535430457,
          "Details" : {
            "IR" : 7559598379,
            "IW" : 0,
            "SR" : 0,
            "SW" : 4975832078
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702226725972,
  "SQLEndTimeInMs" : 1702226831711,
  "Objectives" : {
    "DurationInMs" : 105739,
    "IOBytes" : {
      "Total" : 58857116246,
      "Details" : {
        "IR" : 22191566416,
        "IW" : 0,
        "SR" : 18332774915,
        "SW" : 18332774915
      }
    }
  }
}
