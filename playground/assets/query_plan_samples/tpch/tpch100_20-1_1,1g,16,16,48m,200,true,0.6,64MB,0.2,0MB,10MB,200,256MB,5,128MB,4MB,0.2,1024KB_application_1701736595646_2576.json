{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "12" : {
          "sign" : -1904590072,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1280000000,
          "rowCount" : 80000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ps_suppkey#15L] "
        },
        "8" : {
          "sign" : 312488708,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 108,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(n_nationkey#10L, 42), 1, 38, 0, 0) AS bloomFilter#54] "
        },
        "19" : {
          "sign" : 1967896796,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3960000000,
          "rowCount" : 20000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(p_name#20) AND StartsWith(p_name#20, ivory)) "
        },
        "23" : {
          "sign" : 1449854217,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 2921339392,
          "rowCount" : 91291856,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: LeftSemi, (l_partkey#30L = p_partkey#19L) "
        },
        "4" : {
          "sign" : -342181261,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 91000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: LeftSemi, (s_suppkey#3L = ps_suppkey#15L) "
        },
        "15" : {
          "sign" : 359082550,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2240000000,
          "rowCount" : 80000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ps_partkey#14L, ps_suppkey#15L, ps_availqty#16] "
        },
        "11" : {
          "sign" : -1010592050,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3275,
          "rowCount" : 25,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [n_nationkey#10L, n_name#11, n_regionkey#12L, n_comment#13], `spark_catalog`.`tpch_100`.`nation`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "9" : {
          "sign" : 1274245449,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 16,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [n_nationkey#10L] "
        },
        "22" : {
          "sign" : 46179081,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 3651674240,
          "rowCount" : 91291856,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [l_partkey#30L, l_suppkey#31L], [(0.5 * sum(l_quantity#33)) AS (0.5 * sum(l_quantity))#47, l_partkey#30L, l_suppkey#31L] "
        },
        "26" : {
          "sign" : 1341754624,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 16980285216,
          "rowCount" : 91291856,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [l_orderkey#29L, l_partkey#30L, l_suppkey#31L, l_linenumber#32, l_quantity#33, l_extendedprice#34, l_discount#35, l_tax#36, l_returnflag#37, l_linestatus#38, l_commitdate#39, l_receiptdate#40, l_shipinstruct#41, l_shipmode#42, l_comment#43, l_shipdate#44], `spark_catalog`.`tpch_100`.`lineitem`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "13" : {
          "sign" : -1127125669,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 4800000000,
          "rowCount" : 80000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (((cast(ps_availqty#16 as decimal(24,3)) > (0.5 * sum(l_quantity))#47) AND (l_partkey#30L = ps_partkey#14L)) AND (l_suppkey#31L = ps_suppkey#15L)) "
        },
        "24" : {
          "sign" : 1052925677,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2921339392,
          "rowCount" : 91291856,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [l_partkey#30L, l_suppkey#31L, l_quantity#33] "
        },
        "16" : {
          "sign" : -1854375490,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 13760000000,
          "rowCount" : 80000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(ps_availqty#16) AND isnotnull(ps_partkey#14L)) AND isnotnull(ps_suppkey#15L)) "
        },
        "5" : {
          "sign" : -671636146,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 91000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [s_suppkey#3L, s_name#4, s_address#5, s_nationkey#6L] "
        },
        "10" : {
          "sign" : 1155064459,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 131,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(n_name#11) AND (n_name#11 = KENYA)) AND isnotnull(n_nationkey#10L)) "
        },
        "21" : {
          "sign" : 1862105278,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3651674240,
          "rowCount" : 91291856,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull((0.5 * sum(l_quantity))#47) "
        },
        "6" : {
          "sign" : -1631788177,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 201000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(s_nationkey#6L) AND might_contain(scalar-subquery#55 [], xxhash64(s_nationkey#6L, 42))) "
        },
        "1" : {
          "sign" : -1117096164,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 75000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [s_name#4, s_address#5] "
        },
        "17" : {
          "sign" : 1671317398,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 13760000000,
          "rowCount" : 80000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ps_partkey#14L, ps_suppkey#15L, ps_availqty#16, ps_supplycost#17, ps_comment#18], `spark_catalog`.`tpch_100`.`partsupp`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "25" : {
          "sign" : -2045429401,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 16980285216,
          "rowCount" : 91291856,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((((isnotnull(l_shipdate#44) AND (l_shipdate#44 >= 1996-01-01)) AND (l_shipdate#44 < 1997-01-01)) AND isnotnull(l_partkey#30L)) AND isnotnull(l_suppkey#31L)) "
        },
        "14" : {
          "sign" : -389219621,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 2240000000,
          "rowCount" : 80000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: LeftSemi, (ps_partkey#14L = p_partkey#19L) "
        },
        "0" : {
          "sign" : 1265317565,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 75000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [s_name#4 ASC NULLS FIRST], true "
        },
        "20" : {
          "sign" : 1980427896,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3960000000,
          "rowCount" : 20000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [p_partkey#19L, p_name#20, p_mfgr#21, p_type#22, p_size#23, p_container#24, p_retailprice#25, p_comment#26, p_brand#27], `spark_catalog`.`tpch_100`.`part`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "2" : {
          "sign" : -153355325,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 91000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#6L = n_nationkey#10L) "
        },
        "18" : {
          "sign" : -1254561239,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 320000000,
          "rowCount" : 20000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [p_partkey#19L] "
        },
        "7" : {
          "sign" : 1086023816,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 201000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_suppkey#3L, s_name#4, s_address#5, s_nationkey#6L, s_phone#7, s_acctbal#8, s_comment#9], `spark_catalog`.`tpch_100`.`supplier`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "3" : {
          "sign" : 912861573,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 83000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [s_name#4, s_address#5, s_nationkey#6L] "
        }
      },
      "links" : [ {
        "fromId" : 7,
        "fromName" : "LogicalRelation",
        "toId" : 6,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "LogicalRelation",
        "toId" : 10,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Filter",
        "toId" : 9,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Project",
        "toId" : 8,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Aggregate",
        "toId" : 6,
        "toName" : "Filter",
        "linkType" : "Subquery"
      }, {
        "fromId" : 6,
        "fromName" : "Filter",
        "toId" : 5,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Project",
        "toId" : 4,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "LogicalRelation",
        "toId" : 16,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "Filter",
        "toId" : 15,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "Project",
        "toId" : 14,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "LogicalRelation",
        "toId" : 19,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "Filter",
        "toId" : 18,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "Project",
        "toId" : 14,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Join",
        "toId" : 13,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "LogicalRelation",
        "toId" : 25,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "Filter",
        "toId" : 24,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "Project",
        "toId" : 23,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "Project",
        "toId" : 23,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "Join",
        "toId" : 22,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "Aggregate",
        "toId" : 21,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Filter",
        "toId" : 13,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Join",
        "toId" : 12,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 12,
        "fromName" : "Project",
        "toId" : 4,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Join",
        "toId" : 3,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Project",
        "toId" : 2,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Project",
        "toId" : 2,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Join",
        "toId" : 1,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "Project",
        "toId" : 0,
        "toName" : "Sort",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "Sort [s_name#4 ASC NULLS FIRST], true\n+- Project [s_name#4, s_address#5]\n   +- Join Inner, (s_nationkey#6L = n_nationkey#10L)\n      :- Project [s_name#4, s_address#5, s_nationkey#6L]\n      :  +- Join LeftSemi, (s_suppkey#3L = ps_suppkey#15L)\n      :     :- Project [s_suppkey#3L, s_name#4, s_address#5, s_nationkey#6L]\n      :     :  +- Filter (isnotnull(s_nationkey#6L) AND might_contain(scalar-subquery#55 [], xxhash64(s_nationkey#6L, 42)))\n      :     :     :  +- Aggregate [bloom_filter_agg(xxhash64(n_nationkey#10L, 42), 1, 38, 0, 0) AS bloomFilter#54]\n      :     :     :     +- Project [n_nationkey#10L]\n      :     :     :        +- Filter ((isnotnull(n_name#11) AND (n_name#11 = KENYA)) AND isnotnull(n_nationkey#10L))\n      :     :     :           +- Relation spark_catalog.tpch_100.nation[n_nationkey#10L,n_name#11,n_regionkey#12L,n_comment#13] parquet\n      :     :     +- Relation spark_catalog.tpch_100.supplier[s_suppkey#3L,s_name#4,s_address#5,s_nationkey#6L,s_phone#7,s_acctbal#8,s_comment#9] parquet\n      :     +- Project [ps_suppkey#15L]\n      :        +- Join Inner, (((cast(ps_availqty#16 as decimal(24,3)) > (0.5 * sum(l_quantity))#47) AND (l_partkey#30L = ps_partkey#14L)) AND (l_suppkey#31L = ps_suppkey#15L))\n      :           :- Join LeftSemi, (ps_partkey#14L = p_partkey#19L)\n      :           :  :- Project [ps_partkey#14L, ps_suppkey#15L, ps_availqty#16]\n      :           :  :  +- Filter ((isnotnull(ps_availqty#16) AND isnotnull(ps_partkey#14L)) AND isnotnull(ps_suppkey#15L))\n      :           :  :     +- Relation spark_catalog.tpch_100.partsupp[ps_partkey#14L,ps_suppkey#15L,ps_availqty#16,ps_supplycost#17,ps_comment#18] parquet\n      :           :  +- Project [p_partkey#19L]\n      :           :     +- Filter (isnotnull(p_name#20) AND StartsWith(p_name#20, ivory))\n      :           :        +- Relation spark_catalog.tpch_100.part[p_partkey#19L,p_name#20,p_mfgr#21,p_type#22,p_size#23,p_container#24,p_retailprice#25,p_comment#26,p_brand#27] parquet\n      :           +- Filter isnotnull((0.5 * sum(l_quantity))#47)\n      :              +- Aggregate [l_partkey#30L, l_suppkey#31L], [(0.5 * sum(l_quantity#33)) AS (0.5 * sum(l_quantity))#47, l_partkey#30L, l_suppkey#31L]\n      :                 +- Join LeftSemi, (l_partkey#30L = p_partkey#19L)\n      :                    :- Project [l_partkey#30L, l_suppkey#31L, l_quantity#33]\n      :                    :  +- Filter ((((isnotnull(l_shipdate#44) AND (l_shipdate#44 >= 1996-01-01)) AND (l_shipdate#44 < 1997-01-01)) AND isnotnull(l_partkey#30L)) AND isnotnull(l_suppkey#31L))\n      :                    :     +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#29L,l_partkey#30L,l_suppkey#31L,l_linenumber#32,l_quantity#33,l_extendedprice#34,l_discount#35,l_tax#36,l_returnflag#37,l_linestatus#38,l_commitdate#39,l_receiptdate#40,l_shipinstruct#41,l_shipmode#42,l_comment#43,l_shipdate#44] parquet\n      :                    +- Project [p_partkey#19L]\n      :                       +- Filter (isnotnull(p_name#20) AND StartsWith(p_name#20, ivory))\n      :                          +- Relation spark_catalog.tpch_100.part[p_partkey#19L,p_name#20,p_mfgr#21,p_type#22,p_size#23,p_container#24,p_retailprice#25,p_comment#26,p_brand#27] parquet\n      +- Project [n_nationkey#10L]\n         +- Filter ((isnotnull(n_name#11) AND (n_name#11 = KENYA)) AND isnotnull(n_nationkey#10L))\n            +- Relation spark_catalog.tpch_100.nation[n_nationkey#10L,n_name#11,n_regionkey#12L,n_comment#13] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 38861288491,
      "inputRowCount" : 212291881
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "12" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : -1366472806,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2543296,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (s_suppkey#3L = ps_suppkey#15L) "
          },
          "5" : {
            "sign" : -161848625,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3671560,
            "rowCount" : 39739,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_suppkey#3L, s_name#4, s_address#5, s_nationkey#6L], ShuffleQueryStage 0 "
          },
          "6" : {
            "sign" : 524132160,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 24777208,
            "rowCount" : 593088,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Project [ps_suppkey#15L], ShuffleQueryStage 12, BroadcastQueryStage 13 "
          },
          "1" : {
            "sign" : 902604402,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1907472,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_name#4, s_address#5] "
          },
          "0" : {
            "sign" : 1714633029,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1907472,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [s_name#4 ASC NULLS FIRST], true "
          },
          "2" : {
            "sign" : -751649729,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2543296,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#6L = n_nationkey#10L) "
          },
          "7" : {
            "sign" : -4539920,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048584,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#10L], BroadcastQueryStage 6 "
          },
          "3" : {
            "sign" : -1802040240,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2225384,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_name#4, s_address#5, s_nationkey#6L] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [s_name#4 ASC NULLS FIRST], true\n+- Project [s_name#4, s_address#5]\n   +- Join Inner, (s_nationkey#6L = n_nationkey#10L)\n      :- Project [s_name#4, s_address#5, s_nationkey#6L]\n      :  +- Join LeftSemi, (s_suppkey#3L = ps_suppkey#15L)\n      :     :- LogicalQueryStage Project [s_suppkey#3L, s_name#4, s_address#5, s_nationkey#6L], ShuffleQueryStage 0\n      :     +- LogicalQueryStage LogicalQueryStage Project [ps_suppkey#15L], ShuffleQueryStage 12, BroadcastQueryStage 13\n      +- LogicalQueryStage Project [n_nationkey#10L], BroadcastQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 29497352,
        "inputRowCount" : 632828
      },
      "PD" : {
        "1" : [ 10353, 11388, 12527, 10353, 10353, 10353, 12527, 10353, 9412, 10353, 9412, 11388, 10353, 10353, 10353, 10353, 10353, 9412, 11388, 11388, 10353, 10353, 10353, 10353, 11388, 11388, 9412, 9412, 9412, 11388, 10353, 9412, 8556, 10353, 10353, 10353, 10353, 9412, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 9412, 11388, 9412, 10353, 10353, 10353, 9412, 11388, 10353, 9412, 10353, 10353, 10353, 9412, 10353, 11388, 10353, 10353, 12527, 10353, 9412, 10353, 9412, 9412, 9412, 9412, 11388, 9412, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 10353, 9412, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 8556, 10353, 11388, 8556, 9412, 10353, 11388, 11388, 9412, 10353, 10353, 12527, 10353, 10353, 11388, 9412, 9412, 11388, 10353, 10353, 10353, 10353, 9412, 10353, 11388, 10353, 10353, 9412, 10353, 12527, 10353, 11388, 10353, 11388, 10353, 10353, 12527, 11388, 9412, 10353, 11388, 10353, 9412, 10353, 10353, 10353, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 11388, 10353, 10353, 11388, 11388, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 10353, 11388, 10353, 11388, 11388, 10353, 10353, 11388, 10353, 10353, 10353, 11388, 11388, 11388, 11388, 10353, 10353, 10353, 10353, 10353, 9412, 11388, 10353, 9412, 11388, 10353, 11388, 10353, 10353, 9412, 10353, 10353, 10353, 11388, 11388, 11388, 12527, 11388, 10353, 11388, 10353, 11388, 11388 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226742033,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 1086,
        "IOBytes" : {
          "Total" : 5554272,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 4772574,
            "SW" : 781698
          }
        }
      }
    },
    "8" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 2124381943,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2920765536,
            "rowCount" : 91273923,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_partkey#30L, l_suppkey#31L, l_quantity#33], ShuffleQueryStage 3 "
          },
          "8" : {
            "sign" : 787042008,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2240000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Join LeftSemi, (ps_partkey#14L = p_partkey#19L), ShuffleQueryStage 10 "
          },
          "4" : {
            "sign" : 1121681188,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2543296,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (s_suppkey#3L = ps_suppkey#15L) "
          },
          "11" : {
            "sign" : 1511408809,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2920765536,
            "rowCount" : 91273923,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (l_partkey#30L = p_partkey#19L) "
          },
          "9" : {
            "sign" : 733428492,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3650956920,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull((0.5 * sum(l_quantity))#60) "
          },
          "13" : {
            "sign" : 1767807213,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 16777216,
            "rowCount" : 217537,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Project [p_partkey#19L], ShuffleQueryStage 5, BroadcastQueryStage 9 "
          },
          "5" : {
            "sign" : -161848625,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3671560,
            "rowCount" : 39739,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_suppkey#3L, s_name#4, s_address#5, s_nationkey#6L], ShuffleQueryStage 0 "
          },
          "10" : {
            "sign" : 116434356,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 3650956920,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [l_partkey#30L, l_suppkey#31L], [(0.5 * sum(l_quantity#33)) AS (0.5 * sum(l_quantity))#60, l_partkey#30L, l_suppkey#31L] "
          },
          "6" : {
            "sign" : -2123758800,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1570921845,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ps_suppkey#15L] "
          },
          "1" : {
            "sign" : 1963670288,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1907472,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_name#4, s_address#5] "
          },
          "14" : {
            "sign" : -4539920,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048584,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#10L], BroadcastQueryStage 6 "
          },
          "0" : {
            "sign" : -1534687691,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1907472,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [s_name#4 ASC NULLS FIRST], true "
          },
          "2" : {
            "sign" : -514932817,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2543296,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#6L = n_nationkey#10L) "
          },
          "7" : {
            "sign" : 1093482181,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 5890956920,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((cast(ps_availqty#16 as decimal(24,3)) > (0.5 * sum(l_quantity))#60) AND (l_partkey#30L = ps_partkey#14L)) AND (l_suppkey#31L = ps_suppkey#15L)) "
          },
          "3" : {
            "sign" : -1307576096,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2225384,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_name#4, s_address#5, s_nationkey#6L] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Aggregate",
          "toId" : 9,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [s_name#4 ASC NULLS FIRST], true\n+- Project [s_name#4, s_address#5]\n   +- Join Inner, (s_nationkey#6L = n_nationkey#10L)\n      :- Project [s_name#4, s_address#5, s_nationkey#6L]\n      :  +- Join LeftSemi, (s_suppkey#3L = ps_suppkey#15L)\n      :     :- LogicalQueryStage Project [s_suppkey#3L, s_name#4, s_address#5, s_nationkey#6L], ShuffleQueryStage 0\n      :     +- Project [ps_suppkey#15L]\n      :        +- Join Inner, (((cast(ps_availqty#16 as decimal(24,3)) > (0.5 * sum(l_quantity))#60) AND (l_partkey#30L = ps_partkey#14L)) AND (l_suppkey#31L = ps_suppkey#15L))\n      :           :- LogicalQueryStage Join LeftSemi, (ps_partkey#14L = p_partkey#19L), ShuffleQueryStage 10\n      :           +- Filter isnotnull((0.5 * sum(l_quantity))#60)\n      :              +- Aggregate [l_partkey#30L, l_suppkey#31L], [(0.5 * sum(l_quantity#33)) AS (0.5 * sum(l_quantity))#60, l_partkey#30L, l_suppkey#31L]\n      :                 +- Join LeftSemi, (l_partkey#30L = p_partkey#19L)\n      :                    :- LogicalQueryStage Project [l_partkey#30L, l_suppkey#31L, l_quantity#33], ShuffleQueryStage 3\n      :                    +- LogicalQueryStage LogicalQueryStage Project [p_partkey#19L], ShuffleQueryStage 5, BroadcastQueryStage 9\n      +- LogicalQueryStage Project [n_nationkey#10L], BroadcastQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 5182262896,
        "inputRowCount" : 171531200
      },
      "PD" : {
        "4" : [ 7158033, 7223729, 7273001, 7273001, 7289425, 7190881, 7223729, 7322273, 7240153, 7273001, 7256577, 7256577, 7273001, 7256577, 7273001, 7207305, 7190881, 7273001, 7289425, 7289425, 7158033, 7333491, 7322273, 7322273, 7202099, 7284219, 7305849, 6993793, 7174457, 7125185, 7190881, 7256577, 7158033, 7125185, 7190881, 7305849, 7174457, 7273001, 7174457, 7256577, 7223729, 7273001, 7284219, 7174457, 7190881, 7273001, 7289425, 7305849, 7075913, 7240153, 7174457, 7305849, 7207305, 7322273, 7256577, 7169251, 7267795, 7158033, 7333491, 7322273, 7240153, 7256577, 7207305, 7158033, 7136403, 7141609, 7207305, 7289425, 7190881, 7223729, 7141609, 7305849, 7223729, 7174457, 7289425, 7256577, 7190881, 7305849, 7223729, 7174457, 7256577, 7240153, 7240153, 7174457, 7223729, 7223729, 7141609, 7223729, 7174457, 7125185, 7256577, 7223729, 7322273, 7305849, 7289425, 7108761, 7240153, 7207305, 7125185, 7190881, 7305849, 7174457, 7305849, 7207305, 7289425, 7289425, 7158033, 7289425, 7223729, 7267795, 7284219, 7256577, 7174457, 7305849, 7190881, 7305849, 7125185, 7273001, 7322273, 7289425, 7305849, 7125185, 7190881, 7240153, 7174457, 7256577, 7289425, 7075913, 7223729, 7223729, 7223729, 7289425, 7092337, 7141609, 7273001, 7158033, 7289425, 7141609, 7322273, 7289425, 7273001, 7273001, 7125185, 7190881, 7273001, 7190881, 7322273, 7240153, 7289425, 7273001, 7256577, 7289425, 7141609, 7218523, 7289425, 7202099, 7223729, 7207305, 7256577, 7256577, 7267795, 7223729, 7273001, 7125185, 7322273, 7141609, 7289425, 7273001, 7158033, 7256577, 7289425, 7256577, 7240153, 7289425, 7289425, 7223729, 7240153, 7207305, 7251371, 7207305, 7043065, 7158033, 7174457, 7256577, 7108761, 7322273, 7289425, 7273001, 7273001, 7256577, 7190881, 7273001, 7207305, 7338697, 7141609, 7207305, 7305849, 7234947, 7207305, 7240153 ],
        "1" : [ 10353, 11388, 12527, 10353, 10353, 10353, 12527, 10353, 9412, 10353, 9412, 11388, 10353, 10353, 10353, 10353, 10353, 9412, 11388, 11388, 10353, 10353, 10353, 10353, 11388, 11388, 9412, 9412, 9412, 11388, 10353, 9412, 8556, 10353, 10353, 10353, 10353, 9412, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 9412, 11388, 9412, 10353, 10353, 10353, 9412, 11388, 10353, 9412, 10353, 10353, 10353, 9412, 10353, 11388, 10353, 10353, 12527, 10353, 9412, 10353, 9412, 9412, 9412, 9412, 11388, 9412, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 10353, 9412, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 8556, 10353, 11388, 8556, 9412, 10353, 11388, 11388, 9412, 10353, 10353, 12527, 10353, 10353, 11388, 9412, 9412, 11388, 10353, 10353, 10353, 10353, 9412, 10353, 11388, 10353, 10353, 9412, 10353, 12527, 10353, 11388, 10353, 11388, 10353, 10353, 12527, 11388, 9412, 10353, 11388, 10353, 9412, 10353, 10353, 10353, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 11388, 10353, 10353, 11388, 11388, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 10353, 11388, 10353, 11388, 11388, 10353, 10353, 11388, 10353, 10353, 10353, 11388, 11388, 11388, 11388, 10353, 10353, 10353, 10353, 10353, 9412, 11388, 10353, 9412, 11388, 10353, 11388, 10353, 10353, 9412, 10353, 10353, 10353, 11388, 11388, 11388, 12527, 11388, 10353, 11388, 10353, 11388, 11388 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226735280,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 7839,
        "IOBytes" : {
          "Total" : 2765389290,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 2733291583,
            "SW" : 32097707
          }
        }
      }
    },
    "4" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 745662757,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 3651674240,
            "rowCount" : 91291856,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [l_partkey#30L, l_suppkey#31L], [(0.5 * sum(l_quantity#33)) AS (0.5 * sum(l_quantity))#60, l_partkey#30L, l_suppkey#31L] "
          },
          "8" : {
            "sign" : -325908990,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2240000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (ps_partkey#14L = p_partkey#19L) "
          },
          "4" : {
            "sign" : -168668633,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2543296,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (s_suppkey#3L = ps_suppkey#15L) "
          },
          "15" : {
            "sign" : 1779703244,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 320000000,
            "rowCount" : 20000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_partkey#19L], ShuffleQueryStage 5 "
          },
          "11" : {
            "sign" : 1085149389,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3651674240,
            "rowCount" : 91291856,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull((0.5 * sum(l_quantity))#60) "
          },
          "9" : {
            "sign" : -605965217,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ps_partkey#14L, ps_suppkey#15L, ps_availqty#16], ShuffleQueryStage 1 "
          },
          "13" : {
            "sign" : -663150960,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2921339392,
            "rowCount" : 91291856,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (l_partkey#30L = p_partkey#19L) "
          },
          "16" : {
            "sign" : -4539920,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048584,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#10L], BroadcastQueryStage 6 "
          },
          "5" : {
            "sign" : -161848625,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3671560,
            "rowCount" : 39739,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_suppkey#3L, s_name#4, s_address#5, s_nationkey#6L], ShuffleQueryStage 0 "
          },
          "10" : {
            "sign" : 1779703151,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 320000000,
            "rowCount" : 20000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_partkey#19L], ShuffleQueryStage 2 "
          },
          "6" : {
            "sign" : -1160338169,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1280000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ps_suppkey#15L] "
          },
          "1" : {
            "sign" : 1382080869,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1907472,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_name#4, s_address#5] "
          },
          "14" : {
            "sign" : 2124381943,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2921339392,
            "rowCount" : 91291856,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_partkey#30L, l_suppkey#31L, l_quantity#33], ShuffleQueryStage 3 "
          },
          "0" : {
            "sign" : 1709364024,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1907472,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [s_name#4 ASC NULLS FIRST], true "
          },
          "2" : {
            "sign" : -583275406,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2543296,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#6L = n_nationkey#10L) "
          },
          "7" : {
            "sign" : 1136882568,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4800000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((cast(ps_availqty#16 as decimal(24,3)) > (0.5 * sum(l_quantity))#60) AND (l_partkey#30L = ps_partkey#14L)) AND (l_suppkey#31L = ps_suppkey#15L)) "
          },
          "3" : {
            "sign" : -2048506697,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2225384,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_name#4, s_address#5, s_nationkey#6L] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Aggregate",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [s_name#4 ASC NULLS FIRST], true\n+- Project [s_name#4, s_address#5]\n   +- Join Inner, (s_nationkey#6L = n_nationkey#10L)\n      :- Project [s_name#4, s_address#5, s_nationkey#6L]\n      :  +- Join LeftSemi, (s_suppkey#3L = ps_suppkey#15L)\n      :     :- LogicalQueryStage Project [s_suppkey#3L, s_name#4, s_address#5, s_nationkey#6L], ShuffleQueryStage 0\n      :     +- Project [ps_suppkey#15L]\n      :        +- Join Inner, (((cast(ps_availqty#16 as decimal(24,3)) > (0.5 * sum(l_quantity))#60) AND (l_partkey#30L = ps_partkey#14L)) AND (l_suppkey#31L = ps_suppkey#15L))\n      :           :- Join LeftSemi, (ps_partkey#14L = p_partkey#19L)\n      :           :  :- LogicalQueryStage Project [ps_partkey#14L, ps_suppkey#15L, ps_availqty#16], ShuffleQueryStage 1\n      :           :  +- LogicalQueryStage Project [p_partkey#19L], ShuffleQueryStage 2\n      :           +- Filter isnotnull((0.5 * sum(l_quantity))#60)\n      :              +- Aggregate [l_partkey#30L, l_suppkey#31L], [(0.5 * sum(l_quantity#33)) AS (0.5 * sum(l_quantity))#60, l_partkey#30L, l_suppkey#31L]\n      :                 +- Join LeftSemi, (l_partkey#30L = p_partkey#19L)\n      :                    :- LogicalQueryStage Project [l_partkey#30L, l_suppkey#31L, l_quantity#33], ShuffleQueryStage 3\n      :                    +- LogicalQueryStage Project [p_partkey#19L], ShuffleQueryStage 5\n      +- LogicalQueryStage Project [n_nationkey#10L], BroadcastQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 6126059536,
        "inputRowCount" : 211331596
      },
      "PD" : {
        "2" : [ 6880215, 6919961, 6979580, 6919961, 6979580, 6939834, 6979580, 7039199, 6988235, 6999453, 6999453, 6939834, 7019326, 6999453, 7019326, 6932301, 6959707, 6919961, 6919961, 7059072, 6939834, 6959707, 7019326, 6979580, 6919961, 6939834, 6999453, 6919961, 6999453, 6939834, 6939834, 6999453, 6999453, 6900088, 6959707, 6959707, 6939834, 6999453, 6939834, 6999453, 6999453, 6939834, 6999453, 6939834, 6959707, 6939834, 6900088, 7078945, 6939834, 6919961, 6900088, 7019326, 6912428, 7118691, 6979580, 6999453, 6999453, 6939834, 7059072, 6939834, 6959707, 7019326, 6959707, 6919961, 6919961, 6919961, 6919961, 6919961, 6959707, 6919961, 6900088, 7039199, 6919961, 6959707, 6939834, 6979580, 6900088, 6979580, 6979580, 6900088, 6999453, 6979580, 6979580, 6968362, 6939834, 6959707, 6919961, 6939834, 6919961, 6939834, 6979580, 6919961, 7039199, 6999453, 7019326, 6900088, 6979580, 6959707, 6959707, 6880215, 6999453, 6939834, 6999453, 6919961, 6979580, 6979580, 6900088, 6939834, 6919961, 7019326, 6959707, 6959707, 6959707, 7039199, 6900088, 6999453, 6939834, 6939834, 7059072, 6999453, 6999453, 6900088, 6919961, 6959707, 6919961, 7019326, 6999453, 6900088, 6979580, 6919961, 6959707, 6979580, 6932301, 6919961, 7019326, 6979580, 7019326, 6919961, 6939834, 6999453, 7019326, 6959707, 6919961, 6919961, 7039199, 6959707, 6939834, 7039199, 6959707, 6979580, 6919961, 7019326, 6939834, 6959707, 6959707, 6939834, 6999453, 6900088, 7019326, 7011793, 6979580, 6919961, 7098818, 6939834, 7019326, 6900088, 6900088, 6939834, 6880215, 6999453, 6979580, 6999453, 7019326, 6939834, 7059072, 6979580, 6959707, 6959707, 6959707, 6939834, 6959707, 6939834, 6939834, 7019326, 6932301, 7078945, 6979580, 7019326, 7019326, 6979580, 6919961, 6999453, 6959707, 6999453, 6959707, 6959707, 7019326, 6959707, 6948489, 6959707 ],
        "1" : [ 10353, 11388, 12527, 10353, 10353, 10353, 12527, 10353, 9412, 10353, 9412, 11388, 10353, 10353, 10353, 10353, 10353, 9412, 11388, 11388, 10353, 10353, 10353, 10353, 11388, 11388, 9412, 9412, 9412, 11388, 10353, 9412, 8556, 10353, 10353, 10353, 10353, 9412, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 9412, 11388, 9412, 10353, 10353, 10353, 9412, 11388, 10353, 9412, 10353, 10353, 10353, 9412, 10353, 11388, 10353, 10353, 12527, 10353, 9412, 10353, 9412, 9412, 9412, 9412, 11388, 9412, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 10353, 9412, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 8556, 10353, 11388, 8556, 9412, 10353, 11388, 11388, 9412, 10353, 10353, 12527, 10353, 10353, 11388, 9412, 9412, 11388, 10353, 10353, 10353, 10353, 9412, 10353, 11388, 10353, 10353, 9412, 10353, 12527, 10353, 11388, 10353, 11388, 10353, 10353, 12527, 11388, 9412, 10353, 11388, 10353, 9412, 10353, 10353, 10353, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 11388, 10353, 10353, 11388, 11388, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 10353, 11388, 10353, 11388, 11388, 10353, 10353, 11388, 10353, 10353, 10353, 11388, 11388, 11388, 11388, 10353, 10353, 10353, 10353, 10353, 9412, 11388, 10353, 9412, 11388, 10353, 11388, 10353, 10353, 9412, 10353, 10353, 10353, 11388, 11388, 11388, 12527, 11388, 10353, 11388, 10353, 11388, 11388 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 24,
        "FinishedTasksTotalTimeInMs" : 7794.0,
        "FinishedTasksDistributionInMs" : [ 209.0, 241.0, 346.0, 410.0, 458.0 ]
      },
      "StartTimeInMs" : 1702226731212,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 11907,
        "IOBytes" : {
          "Total" : 5511144069,
          "Details" : {
            "IR" : 1393675783,
            "IW" : 0,
            "SR" : 2734906808,
            "SW" : 1382561478
          }
        }
      }
    },
    "11" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : -1121773062,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2543296,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (s_suppkey#3L = ps_suppkey#15L) "
          },
          "5" : {
            "sign" : -161848625,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3671560,
            "rowCount" : 39739,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_suppkey#3L, s_name#4, s_address#5, s_nationkey#6L], ShuffleQueryStage 0 "
          },
          "6" : {
            "sign" : -547503840,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 9489408,
            "rowCount" : 593088,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ps_suppkey#15L], ShuffleQueryStage 12 "
          },
          "1" : {
            "sign" : -1691428718,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1907472,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_name#4, s_address#5] "
          },
          "0" : {
            "sign" : 1618981605,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1907472,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [s_name#4 ASC NULLS FIRST], true "
          },
          "2" : {
            "sign" : -503835041,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2543296,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#6L = n_nationkey#10L) "
          },
          "7" : {
            "sign" : -4539920,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048584,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#10L], BroadcastQueryStage 6 "
          },
          "3" : {
            "sign" : -1998288,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2225384,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_name#4, s_address#5, s_nationkey#6L] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [s_name#4 ASC NULLS FIRST], true\n+- Project [s_name#4, s_address#5]\n   +- Join Inner, (s_nationkey#6L = n_nationkey#10L)\n      :- Project [s_name#4, s_address#5, s_nationkey#6L]\n      :  +- Join LeftSemi, (s_suppkey#3L = ps_suppkey#15L)\n      :     :- LogicalQueryStage Project [s_suppkey#3L, s_name#4, s_address#5, s_nationkey#6L], ShuffleQueryStage 0\n      :     +- LogicalQueryStage Project [ps_suppkey#15L], ShuffleQueryStage 12\n      +- LogicalQueryStage Project [n_nationkey#10L], BroadcastQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 14209552,
        "inputRowCount" : 632828
      },
      "PD" : {
        "7" : [ 15158, 15158, 16674, 15158, 16674, 16674, 16674, 15158, 16674, 16674, 15158, 16674, 16674, 15158, 15158, 16674, 16674, 15158, 16674, 15158, 15158, 16674, 15158, 15158, 16674, 15158, 15158, 15158, 16674, 16674, 15158, 16674, 15158, 16674, 15158, 15158, 15158, 15158, 16674, 15158, 15158, 16674, 15158, 16674, 16674, 15158, 16674, 16674, 15158, 16674, 16674, 16674, 16674, 15158, 15158, 16674, 15158, 16674, 15158, 15158, 15158, 16674, 15158, 16674, 16674, 16674, 15158, 15158, 15158, 15158, 15158, 16674, 15158, 15158, 15158, 16674, 15158, 15158, 16674, 16674, 15158, 16674, 16674, 16674, 15158, 16674, 16674, 15158, 16674, 15158, 15158, 15158, 16674, 16674, 16674, 16674, 16674, 15158, 16674, 16674, 16674, 16674, 16674, 15158, 16674, 15158, 15158, 15158, 16674, 15158, 15158, 16674, 16674, 15158, 16674, 16674, 16674, 16674, 15158, 15158, 16674, 16674, 16674, 16674, 16674, 15158, 15158, 16674, 16674, 16674, 16674, 15158, 15158, 16674, 15158, 16674, 16674, 16674, 15158, 16674, 16674, 15158, 15158, 15158, 16674, 16674, 16674, 16674, 15158, 15158, 16674, 15158, 15158, 15158, 16674, 15158, 15158, 15158, 15158, 15158, 16674, 15158, 16674, 16674, 16674, 16674, 15158, 16674, 15158, 15158, 16674, 16674, 16674, 15158, 16674, 16674, 16674, 16674, 15158, 16674, 16674, 15158, 15158, 15158, 15158, 15158, 15158, 16674, 16674, 15158, 16674, 16674, 16674, 16674, 16674, 15158, 16674, 16674, 16674, 16674 ],
        "1" : [ 10353, 11388, 12527, 10353, 10353, 10353, 12527, 10353, 9412, 10353, 9412, 11388, 10353, 10353, 10353, 10353, 10353, 9412, 11388, 11388, 10353, 10353, 10353, 10353, 11388, 11388, 9412, 9412, 9412, 11388, 10353, 9412, 8556, 10353, 10353, 10353, 10353, 9412, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 9412, 11388, 9412, 10353, 10353, 10353, 9412, 11388, 10353, 9412, 10353, 10353, 10353, 9412, 10353, 11388, 10353, 10353, 12527, 10353, 9412, 10353, 9412, 9412, 9412, 9412, 11388, 9412, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 10353, 9412, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 8556, 10353, 11388, 8556, 9412, 10353, 11388, 11388, 9412, 10353, 10353, 12527, 10353, 10353, 11388, 9412, 9412, 11388, 10353, 10353, 10353, 10353, 9412, 10353, 11388, 10353, 10353, 9412, 10353, 12527, 10353, 11388, 10353, 11388, 10353, 10353, 12527, 11388, 9412, 10353, 11388, 10353, 9412, 10353, 10353, 10353, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 11388, 10353, 10353, 11388, 11388, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 10353, 11388, 10353, 11388, 11388, 10353, 10353, 11388, 10353, 10353, 10353, 11388, 11388, 11388, 11388, 10353, 10353, 10353, 10353, 10353, 9412, 11388, 10353, 9412, 11388, 10353, 11388, 10353, 10353, 9412, 10353, 10353, 10353, 11388, 11388, 11388, 12527, 11388, 10353, 11388, 10353, 11388, 11388 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226741535,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 1584,
        "IOBytes" : {
          "Total" : 8601219,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 7819521,
            "SW" : 781698
          }
        }
      }
    },
    "9" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : 787042008,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 27844736,
            "rowCount" : 870148,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Join LeftSemi, (ps_partkey#14L = p_partkey#19L), ShuffleQueryStage 10 "
          },
          "4" : {
            "sign" : 2015365100,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2543296,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (s_suppkey#3L = ps_suppkey#15L) "
          },
          "9" : {
            "sign" : 1851777206,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3651674240,
            "rowCount" : 91291856,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Filter isnotnull((0.5 * sum(l_quantity))#60), ShuffleQueryStage 11 "
          },
          "5" : {
            "sign" : -161848625,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3671560,
            "rowCount" : 39739,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_suppkey#3L, s_name#4, s_address#5, s_nationkey#6L], ShuffleQueryStage 0 "
          },
          "10" : {
            "sign" : -4539920,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048584,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#10L], BroadcastQueryStage 6 "
          },
          "6" : {
            "sign" : -13576294,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1270998814635008,
            "rowCount" : 79437425914688,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ps_suppkey#15L] "
          },
          "1" : {
            "sign" : 108040294,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1907472,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_name#4, s_address#5] "
          },
          "0" : {
            "sign" : 331164605,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1907472,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [s_name#4 ASC NULLS FIRST], true "
          },
          "2" : {
            "sign" : 128326519,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2543296,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#6L = n_nationkey#10L) "
          },
          "7" : {
            "sign" : -2125005811,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4766245554881280,
            "rowCount" : 79437425914688,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((cast(ps_availqty#16 as decimal(24,3)) > (0.5 * sum(l_quantity))#60) AND (l_partkey#30L = ps_partkey#14L)) AND (l_suppkey#31L = ps_suppkey#15L)) "
          },
          "3" : {
            "sign" : 1609333514,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2225384,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_name#4, s_address#5, s_nationkey#6L] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [s_name#4 ASC NULLS FIRST], true\n+- Project [s_name#4, s_address#5]\n   +- Join Inner, (s_nationkey#6L = n_nationkey#10L)\n      :- Project [s_name#4, s_address#5, s_nationkey#6L]\n      :  +- Join LeftSemi, (s_suppkey#3L = ps_suppkey#15L)\n      :     :- LogicalQueryStage Project [s_suppkey#3L, s_name#4, s_address#5, s_nationkey#6L], ShuffleQueryStage 0\n      :     +- Project [ps_suppkey#15L]\n      :        +- Join Inner, (((cast(ps_availqty#16 as decimal(24,3)) > (0.5 * sum(l_quantity))#60) AND (l_partkey#30L = ps_partkey#14L)) AND (l_suppkey#31L = ps_suppkey#15L))\n      :           :- LogicalQueryStage Join LeftSemi, (ps_partkey#14L = p_partkey#19L), ShuffleQueryStage 10\n      :           +- LogicalQueryStage Filter isnotnull((0.5 * sum(l_quantity))#60), ShuffleQueryStage 11\n      +- LogicalQueryStage Project [n_nationkey#10L], BroadcastQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3684239120,
        "inputRowCount" : 92201744
      },
      "PD" : {
        "5" : [ 85319, 87528, 85321, 86730, 85798, 84933, 85060, 86089, 87495, 84446, 85184, 86427, 85581, 84539, 84964, 87485, 85536, 85591, 88548, 86143, 85179, 85275, 86360, 87369, 89008, 85404, 84698, 85956, 86671, 84638, 85147, 84400, 84939, 85687, 82954, 87432, 86233, 87709, 86169, 83735, 85338, 85186, 83017, 85182, 85834, 83444, 84767, 83436, 88909, 86560, 85389, 86997, 85551, 86489, 88085, 83343, 86537, 83657, 88082, 84590, 84122, 86542, 85503, 85897, 84945, 85626, 83424, 85011, 86277, 85826, 84226, 88221, 84972, 86065, 85424, 84598, 86830, 84774, 86990, 86069, 87799, 85967, 86931, 86878, 86243, 86360, 87022, 86959, 85682, 87023, 86547, 83254, 83722, 86952, 85060, 87273, 87703, 86125, 85614, 86717, 87743, 85435, 85849, 86046, 85419, 87728, 87046, 86439, 86389, 86196, 84529, 83245, 86519, 86297, 85085, 86669, 86532, 86823, 85447, 84648, 87721, 87149, 84931, 85166, 84395, 85556, 85363, 88570, 86928, 86122, 86635, 85806, 86881, 85394, 85432, 84208, 86542, 83893, 86431, 84301, 87556, 86031, 87852, 84928, 83986, 85556, 84992, 86866, 86421, 84476, 81912, 86198, 87617, 85657, 83732, 87457, 86241, 87485, 87222, 87528, 86335, 86772, 85730, 85672, 86798, 85305, 86860, 83757, 83477, 83783, 84751, 88383, 86421, 84688, 86332, 85976, 84724, 85075, 85849, 87044, 85338, 87385, 86292, 84362, 89166, 85207, 86608, 86964, 82610, 84820, 85616, 84995, 83886, 89870, 85735, 86252, 84400, 87409, 84739, 84054 ],
        "1" : [ 10353, 11388, 12527, 10353, 10353, 10353, 12527, 10353, 9412, 10353, 9412, 11388, 10353, 10353, 10353, 10353, 10353, 9412, 11388, 11388, 10353, 10353, 10353, 10353, 11388, 11388, 9412, 9412, 9412, 11388, 10353, 9412, 8556, 10353, 10353, 10353, 10353, 9412, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 9412, 11388, 9412, 10353, 10353, 10353, 9412, 11388, 10353, 9412, 10353, 10353, 10353, 9412, 10353, 11388, 10353, 10353, 12527, 10353, 9412, 10353, 9412, 9412, 9412, 9412, 11388, 9412, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 10353, 9412, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 8556, 10353, 11388, 8556, 9412, 10353, 11388, 11388, 9412, 10353, 10353, 12527, 10353, 10353, 11388, 9412, 9412, 11388, 10353, 10353, 10353, 10353, 9412, 10353, 11388, 10353, 10353, 9412, 10353, 12527, 10353, 11388, 10353, 11388, 10353, 10353, 12527, 11388, 9412, 10353, 11388, 10353, 9412, 10353, 10353, 10353, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 11388, 10353, 10353, 11388, 11388, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 10353, 11388, 10353, 11388, 11388, 10353, 10353, 11388, 10353, 10353, 10353, 11388, 11388, 11388, 11388, 10353, 10353, 10353, 10353, 10353, 9412, 11388, 10353, 9412, 11388, 10353, 11388, 10353, 10353, 9412, 10353, 10353, 10353, 11388, 11388, 11388, 12527, 11388, 10353, 11388, 10353, 11388, 11388 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226736769,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 6350,
        "IOBytes" : {
          "Total" : 1400672646,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1384937129,
            "SW" : 15735517
          }
        }
      }
    },
    "13" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : 240221429,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1377296,
            "rowCount" : 18029,
            "isRuntime" : true,
            "predicate" : " (unknown) Sort Arguments: [s_name#4 ASC NULLS FIRST], true "
          },
          "1" : {
            "sign" : -548364656,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1377296,
            "rowCount" : 18029,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_name#4, s_address#5], ShuffleQueryStage 14 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "LogicalQueryStage",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [s_name#4 ASC NULLS FIRST], true\n+- LogicalQueryStage Project [s_name#4, s_address#5], ShuffleQueryStage 14\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1377296,
        "inputRowCount" : 18029
      },
      "PD" : {
        "8" : [ 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 4390, 4390, 3991, 3991, 3991, 3991, 4390, 3991, 3991, 4390, 4390, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 4390, 4390, 4390, 3991, 3991, 4390, 3991, 3991, 3991, 4390, 3991, 3991, 3991, 3991, 3991, 3991, 4390, 3991, 3991, 4390, 3991, 3991, 3991, 3991, 3991, 4390, 4390, 3991, 4390, 4390, 3991, 3991, 3991, 3991, 4390, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 4390, 3991, 3991, 3991, 3991, 4390, 3991, 4390, 3991, 3991, 4390, 3991, 4390, 3991, 3991, 3991, 3991, 4390, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 4390, 3991, 4390, 3991, 3991, 3991, 4390, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 4390, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 4390, 4390, 3991, 3991, 3991, 3991, 4390, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 4390, 3991, 3991, 3991, 4390, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 4390, 3991, 3991, 3991, 3991, 4390, 3991, 3991, 3991, 3991, 3991, 4390, 4390, 4390, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226742759,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 360,
        "IOBytes" : {
          "Total" : 781698,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 781698,
            "SW" : 0
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 745662757,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 3651674240,
            "rowCount" : 91291856,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [l_partkey#30L, l_suppkey#31L], [(0.5 * sum(l_quantity#33)) AS (0.5 * sum(l_quantity))#60, l_partkey#30L, l_suppkey#31L] "
          },
          "8" : {
            "sign" : -325908990,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2240000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (ps_partkey#14L = p_partkey#19L) "
          },
          "4" : {
            "sign" : -168668633,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2543296,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (s_suppkey#3L = ps_suppkey#15L) "
          },
          "15" : {
            "sign" : 1779703244,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3480592,
            "rowCount" : 217537,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_partkey#19L], ShuffleQueryStage 5 "
          },
          "11" : {
            "sign" : 1085149389,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3651674240,
            "rowCount" : 91291856,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull((0.5 * sum(l_quantity))#60) "
          },
          "9" : {
            "sign" : -605965217,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ps_partkey#14L, ps_suppkey#15L, ps_availqty#16], ShuffleQueryStage 1 "
          },
          "13" : {
            "sign" : -663150960,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2921339392,
            "rowCount" : 91291856,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (l_partkey#30L = p_partkey#19L) "
          },
          "16" : {
            "sign" : -4539920,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048584,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#10L], BroadcastQueryStage 6 "
          },
          "5" : {
            "sign" : -161848625,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3671560,
            "rowCount" : 39739,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_suppkey#3L, s_name#4, s_address#5, s_nationkey#6L], ShuffleQueryStage 0 "
          },
          "10" : {
            "sign" : 1779703151,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3480592,
            "rowCount" : 217537,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_partkey#19L], ShuffleQueryStage 2 "
          },
          "6" : {
            "sign" : -1160338169,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1280000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ps_suppkey#15L] "
          },
          "1" : {
            "sign" : 1382080869,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1907472,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_name#4, s_address#5] "
          },
          "14" : {
            "sign" : 2124381943,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2921339392,
            "rowCount" : 91291856,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_partkey#30L, l_suppkey#31L, l_quantity#33], ShuffleQueryStage 3 "
          },
          "0" : {
            "sign" : 1709364024,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1907472,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [s_name#4 ASC NULLS FIRST], true "
          },
          "2" : {
            "sign" : -583275406,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2543296,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#6L = n_nationkey#10L) "
          },
          "7" : {
            "sign" : 1136882568,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4800000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((cast(ps_availqty#16 as decimal(24,3)) > (0.5 * sum(l_quantity))#60) AND (l_partkey#30L = ps_partkey#14L)) AND (l_suppkey#31L = ps_suppkey#15L)) "
          },
          "3" : {
            "sign" : -2048506697,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2225384,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_name#4, s_address#5, s_nationkey#6L] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Aggregate",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [s_name#4 ASC NULLS FIRST], true\n+- Project [s_name#4, s_address#5]\n   +- Join Inner, (s_nationkey#6L = n_nationkey#10L)\n      :- Project [s_name#4, s_address#5, s_nationkey#6L]\n      :  +- Join LeftSemi, (s_suppkey#3L = ps_suppkey#15L)\n      :     :- LogicalQueryStage Project [s_suppkey#3L, s_name#4, s_address#5, s_nationkey#6L], ShuffleQueryStage 0\n      :     +- Project [ps_suppkey#15L]\n      :        +- Join Inner, (((cast(ps_availqty#16 as decimal(24,3)) > (0.5 * sum(l_quantity))#60) AND (l_partkey#30L = ps_partkey#14L)) AND (l_suppkey#31L = ps_suppkey#15L))\n      :           :- Join LeftSemi, (ps_partkey#14L = p_partkey#19L)\n      :           :  :- LogicalQueryStage Project [ps_partkey#14L, ps_suppkey#15L, ps_availqty#16], ShuffleQueryStage 1\n      :           :  +- LogicalQueryStage Project [p_partkey#19L], ShuffleQueryStage 2\n      :           +- Filter isnotnull((0.5 * sum(l_quantity))#60)\n      :              +- Aggregate [l_partkey#30L, l_suppkey#31L], [(0.5 * sum(l_quantity#33)) AS (0.5 * sum(l_quantity))#60, l_partkey#30L, l_suppkey#31L]\n      :                 +- Join LeftSemi, (l_partkey#30L = p_partkey#19L)\n      :                    :- LogicalQueryStage Project [l_partkey#30L, l_suppkey#31L, l_quantity#33], ShuffleQueryStage 3\n      :                    +- LogicalQueryStage Project [p_partkey#19L], ShuffleQueryStage 5\n      +- LogicalQueryStage Project [n_nationkey#10L], BroadcastQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 5493020720,
        "inputRowCount" : 171766670
      },
      "PD" : {
        "2" : [ 6880215, 6919961, 6979580, 6919961, 6979580, 6939834, 6979580, 7039199, 6988235, 6999453, 6999453, 6939834, 7019326, 6999453, 7019326, 6932301, 6959707, 6919961, 6919961, 7059072, 6939834, 6959707, 7019326, 6979580, 6919961, 6939834, 6999453, 6919961, 6999453, 6939834, 6939834, 6999453, 6999453, 6900088, 6959707, 6959707, 6939834, 6999453, 6939834, 6999453, 6999453, 6939834, 6999453, 6939834, 6959707, 6939834, 6900088, 7078945, 6939834, 6919961, 6900088, 7019326, 6912428, 7118691, 6979580, 6999453, 6999453, 6939834, 7059072, 6939834, 6959707, 7019326, 6959707, 6919961, 6919961, 6919961, 6919961, 6919961, 6959707, 6919961, 6900088, 7039199, 6919961, 6959707, 6939834, 6979580, 6900088, 6979580, 6979580, 6900088, 6999453, 6979580, 6979580, 6968362, 6939834, 6959707, 6919961, 6939834, 6919961, 6939834, 6979580, 6919961, 7039199, 6999453, 7019326, 6900088, 6979580, 6959707, 6959707, 6880215, 6999453, 6939834, 6999453, 6919961, 6979580, 6979580, 6900088, 6939834, 6919961, 7019326, 6959707, 6959707, 6959707, 7039199, 6900088, 6999453, 6939834, 6939834, 7059072, 6999453, 6999453, 6900088, 6919961, 6959707, 6919961, 7019326, 6999453, 6900088, 6979580, 6919961, 6959707, 6979580, 6932301, 6919961, 7019326, 6979580, 7019326, 6919961, 6939834, 6999453, 7019326, 6959707, 6919961, 6919961, 7039199, 6959707, 6939834, 7039199, 6959707, 6979580, 6919961, 7019326, 6939834, 6959707, 6959707, 6939834, 6999453, 6900088, 7019326, 7011793, 6979580, 6919961, 7098818, 6939834, 7019326, 6900088, 6900088, 6939834, 6880215, 6999453, 6979580, 6999453, 7019326, 6939834, 7059072, 6979580, 6959707, 6959707, 6959707, 6939834, 6959707, 6939834, 6939834, 7019326, 6932301, 7078945, 6979580, 7019326, 7019326, 6979580, 6919961, 6999453, 6959707, 6999453, 6959707, 6959707, 7019326, 6959707, 6948489, 6959707 ],
        "1" : [ 10353, 11388, 12527, 10353, 10353, 10353, 12527, 10353, 9412, 10353, 9412, 11388, 10353, 10353, 10353, 10353, 10353, 9412, 11388, 11388, 10353, 10353, 10353, 10353, 11388, 11388, 9412, 9412, 9412, 11388, 10353, 9412, 8556, 10353, 10353, 10353, 10353, 9412, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 9412, 11388, 9412, 10353, 10353, 10353, 9412, 11388, 10353, 9412, 10353, 10353, 10353, 9412, 10353, 11388, 10353, 10353, 12527, 10353, 9412, 10353, 9412, 9412, 9412, 9412, 11388, 9412, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 10353, 9412, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 8556, 10353, 11388, 8556, 9412, 10353, 11388, 11388, 9412, 10353, 10353, 12527, 10353, 10353, 11388, 9412, 9412, 11388, 10353, 10353, 10353, 10353, 9412, 10353, 11388, 10353, 10353, 9412, 10353, 12527, 10353, 11388, 10353, 11388, 10353, 10353, 12527, 11388, 9412, 10353, 11388, 10353, 9412, 10353, 10353, 10353, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 11388, 10353, 10353, 11388, 11388, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 10353, 11388, 10353, 11388, 11388, 10353, 10353, 11388, 10353, 10353, 10353, 11388, 11388, 11388, 11388, 10353, 10353, 10353, 10353, 10353, 9412, 11388, 10353, 9412, 11388, 10353, 11388, 10353, 10353, 9412, 10353, 10353, 10353, 11388, 11388, 11388, 12527, 11388, 10353, 11388, 10353, 11388, 11388 ],
        "3" : [ 8652, 8992, 9308, 8459, 8236, 8591, 8572, 8118, 8569, 8509, 8132, 8285, 8464, 8639, 8406, 8500, 8527, 8870, 8163, 8543, 8415, 8644, 8895, 8542, 8293, 8628, 8355, 8224, 8041, 8649, 8519, 8672, 8722, 8565, 8430, 8146, 8198, 8045, 8385, 8703, 8658, 8701, 8607, 8189, 8562, 8107, 8516, 8822, 8239, 9222, 8463, 8463, 8431, 8572, 8480, 7811, 8369, 8553, 8178, 8194, 8119, 8629, 8697, 8482, 8346, 8790, 8495, 8724, 8623, 8681, 8302, 8408, 8236, 8482, 8224, 8407, 8478, 9069, 8228, 8431, 8340, 8344, 8172, 8396, 8012, 8535, 8613, 8698, 8604, 8388, 8292, 8228, 8282, 8427, 8392, 8533, 8286, 8427, 8431, 8453, 8672, 8651, 8607, 8859, 8119, 8891, 8251, 8346, 8602, 8751, 8440, 8751, 8630, 8455, 8623, 8769, 8180, 8648, 8550, 8619, 8568, 8142, 8670, 8271, 8663, 8410, 8324, 8463, 8586, 8277, 8546, 8501, 8541, 8873, 8301, 8442, 8351, 8559, 8439, 8462, 8622, 8393, 8620, 7949, 8620, 8544, 8027, 8359, 8339, 9003, 8559, 8562, 8372, 8736, 8397, 8231, 8472, 8411, 8582, 8417, 8855, 8351, 8514, 8322, 8543, 8347, 8421, 8218, 8193, 8016, 8694, 8469, 8554, 8492, 9239, 8851, 8053, 8106, 8173, 8450, 8401, 8684, 8613, 8190, 8456, 8415, 8141, 8767, 8220, 8600, 8564, 8326, 8643, 8079, 8075, 8631, 8494, 8344, 8244, 8754 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226731239,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 11880,
        "IOBytes" : {
          "Total" : 5135589077,
          "Details" : {
            "IR" : 1019736016,
            "IW" : 0,
            "SR" : 2734906808,
            "SW" : 1380946253
          }
        }
      }
    },
    "10" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : 787042008,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 27844736,
            "rowCount" : 870148,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Join LeftSemi, (ps_partkey#14L = p_partkey#19L), ShuffleQueryStage 10 "
          },
          "4" : {
            "sign" : 2015365100,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2543296,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (s_suppkey#3L = ps_suppkey#15L) "
          },
          "9" : {
            "sign" : 1851777206,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 28529712,
            "rowCount" : 594369,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Filter isnotnull((0.5 * sum(l_quantity))#60), ShuffleQueryStage 11 "
          },
          "5" : {
            "sign" : -161848625,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3671560,
            "rowCount" : 39739,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_suppkey#3L, s_name#4, s_address#5, s_nationkey#6L], ShuffleQueryStage 0 "
          },
          "10" : {
            "sign" : -4539920,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048584,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#10L], BroadcastQueryStage 6 "
          },
          "6" : {
            "sign" : -13576294,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 8275023945792,
            "rowCount" : 517188996612,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ps_suppkey#15L] "
          },
          "1" : {
            "sign" : 108040294,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1907472,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_name#4, s_address#5] "
          },
          "0" : {
            "sign" : 331164605,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1907472,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [s_name#4 ASC NULLS FIRST], true "
          },
          "2" : {
            "sign" : 128326519,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2543296,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#6L = n_nationkey#10L) "
          },
          "7" : {
            "sign" : -2125005811,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 31031339796720,
            "rowCount" : 517188996612,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((cast(ps_availqty#16 as decimal(24,3)) > (0.5 * sum(l_quantity))#60) AND (l_partkey#30L = ps_partkey#14L)) AND (l_suppkey#31L = ps_suppkey#15L)) "
          },
          "3" : {
            "sign" : 1609333514,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2225384,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_name#4, s_address#5, s_nationkey#6L] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [s_name#4 ASC NULLS FIRST], true\n+- Project [s_name#4, s_address#5]\n   +- Join Inner, (s_nationkey#6L = n_nationkey#10L)\n      :- Project [s_name#4, s_address#5, s_nationkey#6L]\n      :  +- Join LeftSemi, (s_suppkey#3L = ps_suppkey#15L)\n      :     :- LogicalQueryStage Project [s_suppkey#3L, s_name#4, s_address#5, s_nationkey#6L], ShuffleQueryStage 0\n      :     +- Project [ps_suppkey#15L]\n      :        +- Join Inner, (((cast(ps_availqty#16 as decimal(24,3)) > (0.5 * sum(l_quantity))#60) AND (l_partkey#30L = ps_partkey#14L)) AND (l_suppkey#31L = ps_suppkey#15L))\n      :           :- LogicalQueryStage Join LeftSemi, (ps_partkey#14L = p_partkey#19L), ShuffleQueryStage 10\n      :           +- LogicalQueryStage Filter isnotnull((0.5 * sum(l_quantity))#60), ShuffleQueryStage 11\n      +- LogicalQueryStage Project [n_nationkey#10L], BroadcastQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 61094592,
        "inputRowCount" : 1504257
      },
      "PD" : {
        "5" : [ 85319, 87528, 85321, 86730, 85798, 84933, 85060, 86089, 87495, 84446, 85184, 86427, 85581, 84539, 84964, 87485, 85536, 85591, 88548, 86143, 85179, 85275, 86360, 87369, 89008, 85404, 84698, 85956, 86671, 84638, 85147, 84400, 84939, 85687, 82954, 87432, 86233, 87709, 86169, 83735, 85338, 85186, 83017, 85182, 85834, 83444, 84767, 83436, 88909, 86560, 85389, 86997, 85551, 86489, 88085, 83343, 86537, 83657, 88082, 84590, 84122, 86542, 85503, 85897, 84945, 85626, 83424, 85011, 86277, 85826, 84226, 88221, 84972, 86065, 85424, 84598, 86830, 84774, 86990, 86069, 87799, 85967, 86931, 86878, 86243, 86360, 87022, 86959, 85682, 87023, 86547, 83254, 83722, 86952, 85060, 87273, 87703, 86125, 85614, 86717, 87743, 85435, 85849, 86046, 85419, 87728, 87046, 86439, 86389, 86196, 84529, 83245, 86519, 86297, 85085, 86669, 86532, 86823, 85447, 84648, 87721, 87149, 84931, 85166, 84395, 85556, 85363, 88570, 86928, 86122, 86635, 85806, 86881, 85394, 85432, 84208, 86542, 83893, 86431, 84301, 87556, 86031, 87852, 84928, 83986, 85556, 84992, 86866, 86421, 84476, 81912, 86198, 87617, 85657, 83732, 87457, 86241, 87485, 87222, 87528, 86335, 86772, 85730, 85672, 86798, 85305, 86860, 83757, 83477, 83783, 84751, 88383, 86421, 84688, 86332, 85976, 84724, 85075, 85849, 87044, 85338, 87385, 86292, 84362, 89166, 85207, 86608, 86964, 82610, 84820, 85616, 84995, 83886, 89870, 85735, 86252, 84400, 87409, 84739, 84054 ],
        "1" : [ 10353, 11388, 12527, 10353, 10353, 10353, 12527, 10353, 9412, 10353, 9412, 11388, 10353, 10353, 10353, 10353, 10353, 9412, 11388, 11388, 10353, 10353, 10353, 10353, 11388, 11388, 9412, 9412, 9412, 11388, 10353, 9412, 8556, 10353, 10353, 10353, 10353, 9412, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 9412, 11388, 9412, 10353, 10353, 10353, 9412, 11388, 10353, 9412, 10353, 10353, 10353, 9412, 10353, 11388, 10353, 10353, 12527, 10353, 9412, 10353, 9412, 9412, 9412, 9412, 11388, 9412, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 10353, 9412, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 8556, 10353, 11388, 8556, 9412, 10353, 11388, 11388, 9412, 10353, 10353, 12527, 10353, 10353, 11388, 9412, 9412, 11388, 10353, 10353, 10353, 10353, 9412, 10353, 11388, 10353, 10353, 9412, 10353, 12527, 10353, 11388, 10353, 11388, 10353, 10353, 12527, 11388, 9412, 10353, 11388, 10353, 9412, 10353, 10353, 10353, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 11388, 10353, 10353, 11388, 11388, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 10353, 11388, 10353, 11388, 11388, 10353, 10353, 11388, 10353, 10353, 10353, 11388, 11388, 11388, 11388, 10353, 10353, 10353, 10353, 10353, 9412, 11388, 10353, 9412, 11388, 10353, 11388, 10353, 10353, 9412, 10353, 10353, 10353, 11388, 11388, 11388, 12527, 11388, 10353, 11388, 10353, 11388, 11388 ],
        "6" : [ 62276, 63450, 62089, 61832, 61779, 62106, 61906, 61784, 63293, 62775, 62006, 62598, 62252, 61791, 61756, 62050, 62993, 61329, 63420, 61630, 61095, 62842, 63945, 62475, 64141, 61184, 62574, 63260, 63592, 62351, 63049, 61215, 63222, 63196, 60932, 64764, 63841, 63470, 63812, 60301, 61841, 62650, 60093, 62800, 63456, 64022, 59968, 60516, 64899, 63046, 62108, 63314, 63780, 62824, 63021, 61121, 62329, 62252, 63790, 62326, 62224, 61432, 62126, 61742, 61433, 62069, 61157, 60516, 62303, 62474, 61631, 63562, 61966, 62551, 62417, 61783, 63542, 59872, 62109, 62168, 64130, 63037, 63222, 64088, 63019, 62630, 63213, 62429, 63075, 64022, 63698, 60268, 61263, 62454, 62155, 63146, 62971, 61861, 62598, 63122, 63754, 62304, 63237, 61760, 62163, 63000, 62824, 61881, 62524, 62528, 61835, 60636, 62280, 62453, 62986, 63946, 63370, 63068, 63524, 63222, 65095, 62652, 62513, 61732, 62330, 62407, 62748, 63481, 63594, 62913, 61942, 60840, 63997, 60987, 61907, 62106, 63393, 62760, 63969, 62134, 64710, 62622, 65176, 62176, 61338, 61978, 62826, 63544, 63623, 61730, 60588, 63209, 63833, 63294, 61113, 63224, 63319, 61927, 62325, 62925, 63099, 64600, 61530, 61010, 62799, 61383, 62526, 61034, 62500, 59971, 61210, 64330, 62616, 62449, 61881, 62083, 62081, 61887, 63212, 61731, 61735, 63865, 63022, 61159, 64194, 62861, 62577, 60717, 61433, 62378, 61835, 61658, 62152, 65089, 60208, 62926, 62417, 63661, 61621, 61720 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226739022,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 4097,
        "IOBytes" : {
          "Total" : 39917228,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 36088583,
            "SW" : 3828645
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 116434356,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 3651674240,
            "rowCount" : 91291856,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [l_partkey#30L, l_suppkey#31L], [(0.5 * sum(l_quantity#33)) AS (0.5 * sum(l_quantity))#60, l_partkey#30L, l_suppkey#31L] "
          },
          "8" : {
            "sign" : -1219409287,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2240000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (ps_partkey#14L = p_partkey#19L) "
          },
          "4" : {
            "sign" : 928244329,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2543296,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (s_suppkey#3L = ps_suppkey#15L) "
          },
          "15" : {
            "sign" : 1767807213,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 16777216,
            "rowCount" : 217537,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Project [p_partkey#19L], ShuffleQueryStage 5, BroadcastQueryStage 9 "
          },
          "11" : {
            "sign" : 733428492,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3651674240,
            "rowCount" : 91291856,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull((0.5 * sum(l_quantity))#60) "
          },
          "9" : {
            "sign" : -605965217,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ps_partkey#14L, ps_suppkey#15L, ps_availqty#16], ShuffleQueryStage 1 "
          },
          "13" : {
            "sign" : 1511408809,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2921339392,
            "rowCount" : 91291856,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (l_partkey#30L = p_partkey#19L) "
          },
          "16" : {
            "sign" : -4539920,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048584,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#10L], BroadcastQueryStage 6 "
          },
          "5" : {
            "sign" : -161848625,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3671560,
            "rowCount" : 39739,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_suppkey#3L, s_name#4, s_address#5, s_nationkey#6L], ShuffleQueryStage 0 "
          },
          "10" : {
            "sign" : -590499412,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 16777216,
            "rowCount" : 217537,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Project [p_partkey#19L], ShuffleQueryStage 2, BroadcastQueryStage 7 "
          },
          "6" : {
            "sign" : 880503151,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1280000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ps_suppkey#15L] "
          },
          "1" : {
            "sign" : -482574607,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1907472,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_name#4, s_address#5] "
          },
          "14" : {
            "sign" : 2124381943,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2921339392,
            "rowCount" : 91291856,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_partkey#30L, l_suppkey#31L, l_quantity#33], ShuffleQueryStage 3 "
          },
          "0" : {
            "sign" : 298534086,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1907472,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [s_name#4 ASC NULLS FIRST], true "
          },
          "2" : {
            "sign" : 800200640,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2543296,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#6L = n_nationkey#10L) "
          },
          "7" : {
            "sign" : -805047478,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4800000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((cast(ps_availqty#16 as decimal(24,3)) > (0.5 * sum(l_quantity))#60) AND (l_partkey#30L = ps_partkey#14L)) AND (l_suppkey#31L = ps_suppkey#15L)) "
          },
          "3" : {
            "sign" : 1592899295,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2225384,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_name#4, s_address#5, s_nationkey#6L] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Aggregate",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [s_name#4 ASC NULLS FIRST], true\n+- Project [s_name#4, s_address#5]\n   +- Join Inner, (s_nationkey#6L = n_nationkey#10L)\n      :- Project [s_name#4, s_address#5, s_nationkey#6L]\n      :  +- Join LeftSemi, (s_suppkey#3L = ps_suppkey#15L)\n      :     :- LogicalQueryStage Project [s_suppkey#3L, s_name#4, s_address#5, s_nationkey#6L], ShuffleQueryStage 0\n      :     +- Project [ps_suppkey#15L]\n      :        +- Join Inner, (((cast(ps_availqty#16 as decimal(24,3)) > (0.5 * sum(l_quantity))#60) AND (l_partkey#30L = ps_partkey#14L)) AND (l_suppkey#31L = ps_suppkey#15L))\n      :           :- Join LeftSemi, (ps_partkey#14L = p_partkey#19L)\n      :           :  :- LogicalQueryStage Project [ps_partkey#14L, ps_suppkey#15L, ps_availqty#16], ShuffleQueryStage 1\n      :           :  +- LogicalQueryStage LogicalQueryStage Project [p_partkey#19L], ShuffleQueryStage 2, BroadcastQueryStage 7\n      :           +- Filter isnotnull((0.5 * sum(l_quantity))#60)\n      :              +- Aggregate [l_partkey#30L, l_suppkey#31L], [(0.5 * sum(l_quantity#33)) AS (0.5 * sum(l_quantity))#60, l_partkey#30L, l_suppkey#31L]\n      :                 +- Join LeftSemi, (l_partkey#30L = p_partkey#19L)\n      :                    :- LogicalQueryStage Project [l_partkey#30L, l_suppkey#31L, l_quantity#33], ShuffleQueryStage 3\n      :                    +- LogicalQueryStage LogicalQueryStage Project [p_partkey#19L], ShuffleQueryStage 5, BroadcastQueryStage 9\n      +- LogicalQueryStage Project [n_nationkey#10L], BroadcastQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 5519613968,
        "inputRowCount" : 171766670
      },
      "PD" : {
        "2" : [ 6880215, 6919961, 6979580, 6919961, 6979580, 6939834, 6979580, 7039199, 6988235, 6999453, 6999453, 6939834, 7019326, 6999453, 7019326, 6932301, 6959707, 6919961, 6919961, 7059072, 6939834, 6959707, 7019326, 6979580, 6919961, 6939834, 6999453, 6919961, 6999453, 6939834, 6939834, 6999453, 6999453, 6900088, 6959707, 6959707, 6939834, 6999453, 6939834, 6999453, 6999453, 6939834, 6999453, 6939834, 6959707, 6939834, 6900088, 7078945, 6939834, 6919961, 6900088, 7019326, 6912428, 7118691, 6979580, 6999453, 6999453, 6939834, 7059072, 6939834, 6959707, 7019326, 6959707, 6919961, 6919961, 6919961, 6919961, 6919961, 6959707, 6919961, 6900088, 7039199, 6919961, 6959707, 6939834, 6979580, 6900088, 6979580, 6979580, 6900088, 6999453, 6979580, 6979580, 6968362, 6939834, 6959707, 6919961, 6939834, 6919961, 6939834, 6979580, 6919961, 7039199, 6999453, 7019326, 6900088, 6979580, 6959707, 6959707, 6880215, 6999453, 6939834, 6999453, 6919961, 6979580, 6979580, 6900088, 6939834, 6919961, 7019326, 6959707, 6959707, 6959707, 7039199, 6900088, 6999453, 6939834, 6939834, 7059072, 6999453, 6999453, 6900088, 6919961, 6959707, 6919961, 7019326, 6999453, 6900088, 6979580, 6919961, 6959707, 6979580, 6932301, 6919961, 7019326, 6979580, 7019326, 6919961, 6939834, 6999453, 7019326, 6959707, 6919961, 6919961, 7039199, 6959707, 6939834, 7039199, 6959707, 6979580, 6919961, 7019326, 6939834, 6959707, 6959707, 6939834, 6999453, 6900088, 7019326, 7011793, 6979580, 6919961, 7098818, 6939834, 7019326, 6900088, 6900088, 6939834, 6880215, 6999453, 6979580, 6999453, 7019326, 6939834, 7059072, 6979580, 6959707, 6959707, 6959707, 6939834, 6959707, 6939834, 6939834, 7019326, 6932301, 7078945, 6979580, 7019326, 7019326, 6979580, 6919961, 6999453, 6959707, 6999453, 6959707, 6959707, 7019326, 6959707, 6948489, 6959707 ],
        "1" : [ 10353, 11388, 12527, 10353, 10353, 10353, 12527, 10353, 9412, 10353, 9412, 11388, 10353, 10353, 10353, 10353, 10353, 9412, 11388, 11388, 10353, 10353, 10353, 10353, 11388, 11388, 9412, 9412, 9412, 11388, 10353, 9412, 8556, 10353, 10353, 10353, 10353, 9412, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 9412, 11388, 9412, 10353, 10353, 10353, 9412, 11388, 10353, 9412, 10353, 10353, 10353, 9412, 10353, 11388, 10353, 10353, 12527, 10353, 9412, 10353, 9412, 9412, 9412, 9412, 11388, 9412, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 10353, 9412, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 8556, 10353, 11388, 8556, 9412, 10353, 11388, 11388, 9412, 10353, 10353, 12527, 10353, 10353, 11388, 9412, 9412, 11388, 10353, 10353, 10353, 10353, 9412, 10353, 11388, 10353, 10353, 9412, 10353, 12527, 10353, 11388, 10353, 11388, 10353, 10353, 12527, 11388, 9412, 10353, 11388, 10353, 9412, 10353, 10353, 10353, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 11388, 10353, 10353, 11388, 11388, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 10353, 11388, 10353, 11388, 11388, 10353, 10353, 11388, 10353, 10353, 10353, 11388, 11388, 11388, 11388, 10353, 10353, 10353, 10353, 10353, 9412, 11388, 10353, 9412, 11388, 10353, 11388, 10353, 10353, 9412, 10353, 10353, 10353, 11388, 11388, 11388, 12527, 11388, 10353, 11388, 10353, 11388, 11388 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 11,
        "FinishedTasksNum" : 30,
        "FinishedTasksTotalTimeInMs" : 40479.0,
        "FinishedTasksDistributionInMs" : [ 1107.0, 1214.0, 1304.0, 1375.0, 2190.0 ]
      },
      "StartTimeInMs" : 1702226734359,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 8760,
        "IOBytes" : {
          "Total" : 5133973852,
          "Details" : {
            "IR" : 1019736016,
            "IW" : 0,
            "SR" : 2733291583,
            "SW" : 1380946253
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : 802760202,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 40,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(n_nationkey#10L, 42), 1, 38, 0, 0) AS bloomFilter#64], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(n_nationkey#10L, 42), 1, 38, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(n_nationkey#10L, 42), 1, 38, 0, 0) AS bloomFilter#64], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(n_nationkey#10L, 42), 1, 38, 0, 0)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 40,
        "inputRowCount" : 1
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226725582,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 17537,
        "IOBytes" : {
          "Total" : 7774058536,
          "Details" : {
            "IR" : 2306240277,
            "IW" : 0,
            "SR" : 2734906889,
            "SW" : 2732911370
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 745662757,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 3651674240,
            "rowCount" : 91291856,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [l_partkey#30L, l_suppkey#31L], [(0.5 * sum(l_quantity#33)) AS (0.5 * sum(l_quantity))#60, l_partkey#30L, l_suppkey#31L] "
          },
          "8" : {
            "sign" : -325908990,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2240000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (ps_partkey#14L = p_partkey#19L) "
          },
          "4" : {
            "sign" : -168668633,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 91000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (s_suppkey#3L = ps_suppkey#15L) "
          },
          "15" : {
            "sign" : 1779703244,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 320000000,
            "rowCount" : 20000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_partkey#19L], ShuffleQueryStage 5 "
          },
          "11" : {
            "sign" : 1085149389,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3651674240,
            "rowCount" : 91291856,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull((0.5 * sum(l_quantity))#60) "
          },
          "9" : {
            "sign" : -605965217,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2240000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ps_partkey#14L, ps_suppkey#15L, ps_availqty#16], ShuffleQueryStage 1 "
          },
          "13" : {
            "sign" : -663150960,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2921339392,
            "rowCount" : 91291856,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (l_partkey#30L = p_partkey#19L) "
          },
          "16" : {
            "sign" : -4539920,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048584,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#10L], BroadcastQueryStage 6 "
          },
          "5" : {
            "sign" : -161848625,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 91000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_suppkey#3L, s_name#4, s_address#5, s_nationkey#6L], ShuffleQueryStage 0 "
          },
          "10" : {
            "sign" : 1779703151,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 320000000,
            "rowCount" : 20000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_partkey#19L], ShuffleQueryStage 2 "
          },
          "6" : {
            "sign" : -1160338169,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1280000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ps_suppkey#15L] "
          },
          "1" : {
            "sign" : 1382080869,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 75000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_name#4, s_address#5] "
          },
          "14" : {
            "sign" : 2124381943,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2921339392,
            "rowCount" : 91291856,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_partkey#30L, l_suppkey#31L, l_quantity#33], ShuffleQueryStage 3 "
          },
          "0" : {
            "sign" : 1709364024,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 75000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [s_name#4 ASC NULLS FIRST], true "
          },
          "2" : {
            "sign" : -583275406,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 91000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#6L = n_nationkey#10L) "
          },
          "7" : {
            "sign" : 1136882568,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4800000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((cast(ps_availqty#16 as decimal(24,3)) > (0.5 * sum(l_quantity))#60) AND (l_partkey#30L = ps_partkey#14L)) AND (l_suppkey#31L = ps_suppkey#15L)) "
          },
          "3" : {
            "sign" : -2048506697,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 83000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_name#4, s_address#5, s_nationkey#6L] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Aggregate",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [s_name#4 ASC NULLS FIRST], true\n+- Project [s_name#4, s_address#5]\n   +- Join Inner, (s_nationkey#6L = n_nationkey#10L)\n      :- Project [s_name#4, s_address#5, s_nationkey#6L]\n      :  +- Join LeftSemi, (s_suppkey#3L = ps_suppkey#15L)\n      :     :- LogicalQueryStage Project [s_suppkey#3L, s_name#4, s_address#5, s_nationkey#6L], ShuffleQueryStage 0\n      :     +- Project [ps_suppkey#15L]\n      :        +- Join Inner, (((cast(ps_availqty#16 as decimal(24,3)) > (0.5 * sum(l_quantity))#60) AND (l_partkey#30L = ps_partkey#14L)) AND (l_suppkey#31L = ps_suppkey#15L))\n      :           :- Join LeftSemi, (ps_partkey#14L = p_partkey#19L)\n      :           :  :- LogicalQueryStage Project [ps_partkey#14L, ps_suppkey#15L, ps_availqty#16], ShuffleQueryStage 1\n      :           :  +- LogicalQueryStage Project [p_partkey#19L], ShuffleQueryStage 2\n      :           +- Filter isnotnull((0.5 * sum(l_quantity))#60)\n      :              +- Aggregate [l_partkey#30L, l_suppkey#31L], [(0.5 * sum(l_quantity#33)) AS (0.5 * sum(l_quantity))#60, l_partkey#30L, l_suppkey#31L]\n      :                 +- Join LeftSemi, (l_partkey#30L = p_partkey#19L)\n      :                    :- LogicalQueryStage Project [l_partkey#30L, l_suppkey#31L, l_quantity#33], ShuffleQueryStage 3\n      :                    +- LogicalQueryStage Project [p_partkey#19L], ShuffleQueryStage 5\n      +- LogicalQueryStage Project [n_nationkey#10L], BroadcastQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 5893387976,
        "inputRowCount" : 212291857
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 1,
        "FinishedTasksTotalTimeInMs" : 146.0,
        "FinishedTasksDistributionInMs" : [ 146.0, 146.0, 146.0, 146.0, 146.0 ]
      },
      "StartTimeInMs" : 1702226726814,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 16305,
        "IOBytes" : {
          "Total" : 7774058455,
          "Details" : {
            "IR" : 2306240277,
            "IW" : 0,
            "SR" : 2734906808,
            "SW" : 2732911370
          }
        }
      }
    },
    "7" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 2124381943,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2921339392,
            "rowCount" : 91291856,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_partkey#30L, l_suppkey#31L, l_quantity#33], ShuffleQueryStage 3 "
          },
          "8" : {
            "sign" : 787042008,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2240000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Join LeftSemi, (ps_partkey#14L = p_partkey#19L), ShuffleQueryStage 10 "
          },
          "4" : {
            "sign" : 1121681188,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2543296,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (s_suppkey#3L = ps_suppkey#15L) "
          },
          "11" : {
            "sign" : 1511408809,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2921339392,
            "rowCount" : 91291856,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (l_partkey#30L = p_partkey#19L) "
          },
          "9" : {
            "sign" : 733428492,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3651674240,
            "rowCount" : 91291856,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull((0.5 * sum(l_quantity))#60) "
          },
          "13" : {
            "sign" : 1767807213,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 16777216,
            "rowCount" : 217537,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Project [p_partkey#19L], ShuffleQueryStage 5, BroadcastQueryStage 9 "
          },
          "5" : {
            "sign" : -161848625,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3671560,
            "rowCount" : 39739,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_suppkey#3L, s_name#4, s_address#5, s_nationkey#6L], ShuffleQueryStage 0 "
          },
          "10" : {
            "sign" : 116434356,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 3651674240,
            "rowCount" : 91291856,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [l_partkey#30L, l_suppkey#31L], [(0.5 * sum(l_quantity#33)) AS (0.5 * sum(l_quantity))#60, l_partkey#30L, l_suppkey#31L] "
          },
          "6" : {
            "sign" : -2123758800,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1280000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ps_suppkey#15L] "
          },
          "1" : {
            "sign" : 1963670288,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1907472,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_name#4, s_address#5] "
          },
          "14" : {
            "sign" : -4539920,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048584,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#10L], BroadcastQueryStage 6 "
          },
          "0" : {
            "sign" : -1534687691,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1907472,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [s_name#4 ASC NULLS FIRST], true "
          },
          "2" : {
            "sign" : -514932817,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2543296,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#6L = n_nationkey#10L) "
          },
          "7" : {
            "sign" : 1093482181,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4800000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((cast(ps_availqty#16 as decimal(24,3)) > (0.5 * sum(l_quantity))#60) AND (l_partkey#30L = ps_partkey#14L)) AND (l_suppkey#31L = ps_suppkey#15L)) "
          },
          "3" : {
            "sign" : -1307576096,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2225384,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_name#4, s_address#5, s_nationkey#6L] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Aggregate",
          "toId" : 9,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [s_name#4 ASC NULLS FIRST], true\n+- Project [s_name#4, s_address#5]\n   +- Join Inner, (s_nationkey#6L = n_nationkey#10L)\n      :- Project [s_name#4, s_address#5, s_nationkey#6L]\n      :  +- Join LeftSemi, (s_suppkey#3L = ps_suppkey#15L)\n      :     :- LogicalQueryStage Project [s_suppkey#3L, s_name#4, s_address#5, s_nationkey#6L], ShuffleQueryStage 0\n      :     +- Project [ps_suppkey#15L]\n      :        +- Join Inner, (((cast(ps_availqty#16 as decimal(24,3)) > (0.5 * sum(l_quantity))#60) AND (l_partkey#30L = ps_partkey#14L)) AND (l_suppkey#31L = ps_suppkey#15L))\n      :           :- LogicalQueryStage Join LeftSemi, (ps_partkey#14L = p_partkey#19L), ShuffleQueryStage 10\n      :           +- Filter isnotnull((0.5 * sum(l_quantity))#60)\n      :              +- Aggregate [l_partkey#30L, l_suppkey#31L], [(0.5 * sum(l_quantity#33)) AS (0.5 * sum(l_quantity))#60, l_partkey#30L, l_suppkey#31L]\n      :                 +- Join LeftSemi, (l_partkey#30L = p_partkey#19L)\n      :                    :- LogicalQueryStage Project [l_partkey#30L, l_suppkey#31L, l_quantity#33], ShuffleQueryStage 3\n      :                    +- LogicalQueryStage LogicalQueryStage Project [p_partkey#19L], ShuffleQueryStage 5, BroadcastQueryStage 9\n      +- LogicalQueryStage Project [n_nationkey#10L], BroadcastQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 5182836752,
        "inputRowCount" : 171549133
      },
      "PD" : {
        "1" : [ 10353, 11388, 12527, 10353, 10353, 10353, 12527, 10353, 9412, 10353, 9412, 11388, 10353, 10353, 10353, 10353, 10353, 9412, 11388, 11388, 10353, 10353, 10353, 10353, 11388, 11388, 9412, 9412, 9412, 11388, 10353, 9412, 8556, 10353, 10353, 10353, 10353, 9412, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 9412, 11388, 9412, 10353, 10353, 10353, 9412, 11388, 10353, 9412, 10353, 10353, 10353, 9412, 10353, 11388, 10353, 10353, 12527, 10353, 9412, 10353, 9412, 9412, 9412, 9412, 11388, 9412, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 10353, 9412, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 8556, 10353, 11388, 8556, 9412, 10353, 11388, 11388, 9412, 10353, 10353, 12527, 10353, 10353, 11388, 9412, 9412, 11388, 10353, 10353, 10353, 10353, 9412, 10353, 11388, 10353, 10353, 9412, 10353, 12527, 10353, 11388, 10353, 11388, 10353, 10353, 12527, 11388, 9412, 10353, 11388, 10353, 9412, 10353, 10353, 10353, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 11388, 10353, 10353, 11388, 11388, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 10353, 11388, 10353, 11388, 11388, 10353, 10353, 11388, 10353, 10353, 10353, 11388, 11388, 11388, 11388, 10353, 10353, 10353, 10353, 10353, 9412, 11388, 10353, 9412, 11388, 10353, 11388, 10353, 10353, 9412, 10353, 10353, 10353, 11388, 11388, 11388, 12527, 11388, 10353, 11388, 10353, 11388, 11388 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 30,
        "FinishedTasksTotalTimeInMs" : 40479.0,
        "FinishedTasksDistributionInMs" : [ 1107.0, 1214.0, 1304.0, 1375.0, 2190.0 ]
      },
      "StartTimeInMs" : 1702226734427,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 8692,
        "IOBytes" : {
          "Total" : 5133973852,
          "Details" : {
            "IR" : 1019736016,
            "IW" : 0,
            "SR" : 2733291583,
            "SW" : 1380946253
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 745662757,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 3651674240,
            "rowCount" : 91291856,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [l_partkey#30L, l_suppkey#31L], [(0.5 * sum(l_quantity#33)) AS (0.5 * sum(l_quantity))#60, l_partkey#30L, l_suppkey#31L] "
          },
          "8" : {
            "sign" : -325908990,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2240000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (ps_partkey#14L = p_partkey#19L) "
          },
          "4" : {
            "sign" : -168668633,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2543296,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (s_suppkey#3L = ps_suppkey#15L) "
          },
          "15" : {
            "sign" : 1779703244,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 320000000,
            "rowCount" : 20000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_partkey#19L], ShuffleQueryStage 5 "
          },
          "11" : {
            "sign" : 1085149389,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3651674240,
            "rowCount" : 91291856,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull((0.5 * sum(l_quantity))#60) "
          },
          "9" : {
            "sign" : -605965217,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2240000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ps_partkey#14L, ps_suppkey#15L, ps_availqty#16], ShuffleQueryStage 1 "
          },
          "13" : {
            "sign" : -663150960,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2921339392,
            "rowCount" : 91291856,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (l_partkey#30L = p_partkey#19L) "
          },
          "16" : {
            "sign" : -4539920,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048584,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#10L], BroadcastQueryStage 6 "
          },
          "5" : {
            "sign" : -161848625,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3671560,
            "rowCount" : 39739,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_suppkey#3L, s_name#4, s_address#5, s_nationkey#6L], ShuffleQueryStage 0 "
          },
          "10" : {
            "sign" : 1779703151,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 320000000,
            "rowCount" : 20000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_partkey#19L], ShuffleQueryStage 2 "
          },
          "6" : {
            "sign" : -1160338169,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1280000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ps_suppkey#15L] "
          },
          "1" : {
            "sign" : 1382080869,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1907472,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_name#4, s_address#5] "
          },
          "14" : {
            "sign" : 2124381943,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2921339392,
            "rowCount" : 91291856,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_partkey#30L, l_suppkey#31L, l_quantity#33], ShuffleQueryStage 3 "
          },
          "0" : {
            "sign" : 1709364024,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1907472,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [s_name#4 ASC NULLS FIRST], true "
          },
          "2" : {
            "sign" : -583275406,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2543296,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#6L = n_nationkey#10L) "
          },
          "7" : {
            "sign" : 1136882568,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4800000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((cast(ps_availqty#16 as decimal(24,3)) > (0.5 * sum(l_quantity))#60) AND (l_partkey#30L = ps_partkey#14L)) AND (l_suppkey#31L = ps_suppkey#15L)) "
          },
          "3" : {
            "sign" : -2048506697,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2225384,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_name#4, s_address#5, s_nationkey#6L] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Aggregate",
          "toId" : 11,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Filter",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [s_name#4 ASC NULLS FIRST], true\n+- Project [s_name#4, s_address#5]\n   +- Join Inner, (s_nationkey#6L = n_nationkey#10L)\n      :- Project [s_name#4, s_address#5, s_nationkey#6L]\n      :  +- Join LeftSemi, (s_suppkey#3L = ps_suppkey#15L)\n      :     :- LogicalQueryStage Project [s_suppkey#3L, s_name#4, s_address#5, s_nationkey#6L], ShuffleQueryStage 0\n      :     +- Project [ps_suppkey#15L]\n      :        +- Join Inner, (((cast(ps_availqty#16 as decimal(24,3)) > (0.5 * sum(l_quantity))#60) AND (l_partkey#30L = ps_partkey#14L)) AND (l_suppkey#31L = ps_suppkey#15L))\n      :           :- Join LeftSemi, (ps_partkey#14L = p_partkey#19L)\n      :           :  :- LogicalQueryStage Project [ps_partkey#14L, ps_suppkey#15L, ps_availqty#16], ShuffleQueryStage 1\n      :           :  +- LogicalQueryStage Project [p_partkey#19L], ShuffleQueryStage 2\n      :           +- Filter isnotnull((0.5 * sum(l_quantity))#60)\n      :              +- Aggregate [l_partkey#30L, l_suppkey#31L], [(0.5 * sum(l_quantity#33)) AS (0.5 * sum(l_quantity))#60, l_partkey#30L, l_suppkey#31L]\n      :                 +- Join LeftSemi, (l_partkey#30L = p_partkey#19L)\n      :                    :- LogicalQueryStage Project [l_partkey#30L, l_suppkey#31L, l_quantity#33], ShuffleQueryStage 3\n      :                    +- LogicalQueryStage Project [p_partkey#19L], ShuffleQueryStage 5\n      +- LogicalQueryStage Project [n_nationkey#10L], BroadcastQueryStage 6\n"
      },
      "IM" : {
        "inputSizeInBytes" : 5806059536,
        "inputRowCount" : 211331596
      },
      "PD" : {
        "1" : [ 10353, 11388, 12527, 10353, 10353, 10353, 12527, 10353, 9412, 10353, 9412, 11388, 10353, 10353, 10353, 10353, 10353, 9412, 11388, 11388, 10353, 10353, 10353, 10353, 11388, 11388, 9412, 9412, 9412, 11388, 10353, 9412, 8556, 10353, 10353, 10353, 10353, 9412, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 9412, 11388, 9412, 10353, 10353, 10353, 9412, 11388, 10353, 9412, 10353, 10353, 10353, 9412, 10353, 11388, 10353, 10353, 12527, 10353, 9412, 10353, 9412, 9412, 9412, 9412, 11388, 9412, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 10353, 9412, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 8556, 10353, 11388, 8556, 9412, 10353, 11388, 11388, 9412, 10353, 10353, 12527, 10353, 10353, 11388, 9412, 9412, 11388, 10353, 10353, 10353, 10353, 9412, 10353, 11388, 10353, 10353, 9412, 10353, 12527, 10353, 11388, 10353, 11388, 10353, 10353, 12527, 11388, 9412, 10353, 11388, 10353, 9412, 10353, 10353, 10353, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 11388, 10353, 10353, 11388, 11388, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 10353, 11388, 10353, 11388, 11388, 10353, 10353, 11388, 10353, 10353, 10353, 11388, 11388, 11388, 11388, 10353, 10353, 10353, 10353, 10353, 9412, 11388, 10353, 9412, 11388, 10353, 11388, 10353, 10353, 9412, 10353, 10353, 10353, 11388, 11388, 11388, 12527, 11388, 10353, 11388, 10353, 11388, 11388 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 2,
        "FinishedTasksTotalTimeInMs" : 2464.0,
        "FinishedTasksDistributionInMs" : [ 1230.0, 1230.0, 1234.0, 1234.0, 1234.0 ]
      },
      "StartTimeInMs" : 1702226728794,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 14325,
        "IOBytes" : {
          "Total" : 7730898601,
          "Details" : {
            "IR" : 2265075861,
            "IW" : 0,
            "SR" : 2734906808,
            "SW" : 2730915932
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "12" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -161848625,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3671560,
                "rowCount" : 39739
              },
              "compileTime" : {
                "sizeInBytes" : 91000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_suppkey#3L, s_name#4, s_address#5, s_nationkey#6L], ShuffleQueryStage 0 "
          },
          "5" : {
            "sign" : -4539920,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1048584,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 16,
                "rowCount" : 1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#10L], BroadcastQueryStage 6 "
          },
          "1" : {
            "sign" : -503835041,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2543296,
                "rowCount" : 39739
              },
              "compileTime" : {
                "sizeInBytes" : 2543296,
                "rowCount" : 39739
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#6L = n_nationkey#10L) "
          },
          "0" : {
            "sign" : -1691428718,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1907472,
                "rowCount" : 39739
              },
              "compileTime" : {
                "sizeInBytes" : 1907472,
                "rowCount" : 39739
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_name#4, s_address#5] "
          },
          "2" : {
            "sign" : -1998288,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2225384,
                "rowCount" : 39739
              },
              "compileTime" : {
                "sizeInBytes" : 2225384,
                "rowCount" : 39739
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_name#4, s_address#5, s_nationkey#6L] "
          },
          "3" : {
            "sign" : -1121773062,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2543296,
                "rowCount" : 39739
              },
              "compileTime" : {
                "sizeInBytes" : 2543296,
                "rowCount" : 39739
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (s_suppkey#3L = ps_suppkey#15L) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [s_name#4, s_address#5]\n+- Join Inner, (s_nationkey#6L = n_nationkey#10L)\n   :- Project [s_name#4, s_address#5, s_nationkey#6L]\n   :  +- Join LeftSemi, (s_suppkey#3L = ps_suppkey#15L)\n   :     :- LogicalQueryStage Project [s_suppkey#3L, s_name#4, s_address#5, s_nationkey#6L], ShuffleQueryStage 0\n   :     +- LogicalQueryStage Project [ps_suppkey#15L], ShuffleQueryStage 12\n   +- LogicalQueryStage Project [n_nationkey#10L], BroadcastQueryStage 6\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -2104632663,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 3671560,
            "rowCount" : 39739,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [s_suppkey#3L, s_name#4, s_address#5, s_nationkey#6L] Arguments: 0 "
          },
          "5" : {
            "sign" : -332843345,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 24777208,
            "rowCount" : 593088,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [ps_suppkey#15L] Arguments: 13 "
          },
          "6" : {
            "sign" : -1197522227,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048584,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [n_nationkey#10L] Arguments: 6 "
          },
          "1" : {
            "sign" : 1682365153,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 2543296,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [s_nationkey#6L] Right keys [1]: [n_nationkey#10L] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 2138186348,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1907472,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [s_name#4, s_address#5] Input [4]: [s_name#4, s_address#5, s_nationkey#6L, n_nationkey#10L] "
          },
          "2" : {
            "sign" : 424020169,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 2225384,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [s_name#4, s_address#5, s_nationkey#6L] Input [4]: [s_suppkey#3L, s_name#4, s_address#5, s_nationkey#6L] "
          },
          "3" : {
            "sign" : -322158249,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 2543296,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [s_suppkey#3L] Right keys [1]: [ps_suppkey#15L] Join type: LeftSemi Join condition: None "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 3,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "BroadcastQueryStage",
          "toId" : 3,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "BroadcastHashJoin",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [s_name#4, s_address#5]\n+- BroadcastHashJoin [s_nationkey#6L], [n_nationkey#10L], Inner, BuildRight, false\n   :- Project [s_name#4, s_address#5, s_nationkey#6L]\n   :  +- BroadcastHashJoin [s_suppkey#3L], [ps_suppkey#15L], LeftSemi, BuildRight, false\n   :     :- ShuffleQueryStage 0\n   :     :  +- Exchange hashpartitioning(s_suppkey#3L, 200), ENSURE_REQUIREMENTS, [plan_id=264]\n   :     :     +- *(1) Filter (isnotnull(s_nationkey#6L) AND might_contain(Subquery subquery#65, [id=#109], xxhash64(s_nationkey#6L, 42)))\n   :     :        :  +- Subquery subquery#65, [id=#109]\n   :     :        :     +- AdaptiveSparkPlan isFinalPlan=true\n                           +- == Final Plan ==\n                              ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(n_nationkey#10L, 42), 1, 38, 0, 0)], output=[bloomFilter#64])\n                              +- ShuffleQueryStage 0\n                                 +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=406]\n                                    +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(n_nationkey#10L, 42), 1, 38, 0, 0)], output=[buf#71])\n                                       +- *(1) Project [n_nationkey#10L]\n                                          +- *(1) Filter ((isnotnull(n_name#11) AND (n_name#11 = KENYA)) AND isnotnull(n_nationkey#10L))\n                                             +- *(1) ColumnarToRow\n                                                +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#10L,n_name#11] Batched: true, DataFilters: [isnotnull(n_name#11), (n_name#11 = KENYA), isnotnull(n_nationkey#10L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_name), EqualTo(n_name,KENYA), IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n                           +- == Initial Plan ==\n                              ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(n_nationkey#10L, 42), 1, 38, 0, 0)], output=[bloomFilter#64])\n                              +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=107]\n                                 +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(n_nationkey#10L, 42), 1, 38, 0, 0)], output=[buf#71])\n                                    +- Project [n_nationkey#10L]\n                                       +- Filter ((isnotnull(n_name#11) AND (n_name#11 = KENYA)) AND isnotnull(n_nationkey#10L))\n                                          +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#10L,n_name#11] Batched: true, DataFilters: [isnotnull(n_name#11), (n_name#11 = KENYA), isnotnull(n_nationkey#10L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_name), EqualTo(n_name,KENYA), IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n   :     :        +- *(1) ColumnarToRow\n   :     :           +- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#3L,s_name#4,s_address#5,s_nationkey#6L] Batched: true, DataFilters: [isnotnull(s_nationkey#6L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_name:string,s_address:string,s_nationkey:bigint>\n   :     +- BroadcastQueryStage 13\n   :        +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=1356]\n   :           +- AQEShuffleRead local\n   :              +- ShuffleQueryStage 12\n   :                 +- Exchange hashpartitioning(ps_suppkey#15L, 200), ENSURE_REQUIREMENTS, [plan_id=1287]\n   :                    +- *(11) Project [ps_suppkey#15L]\n   :                       +- *(11) SortMergeJoin [ps_partkey#14L, ps_suppkey#15L], [l_partkey#30L, l_suppkey#31L], Inner, (cast(ps_availqty#16 as decimal(24,3)) > (0.5 * sum(l_quantity))#60)\n   :                          :- *(9) Sort [ps_partkey#14L ASC NULLS FIRST, ps_suppkey#15L ASC NULLS FIRST], false, 0\n   :                          :  +- AQEShuffleRead coalesced\n   :                          :     +- ShuffleQueryStage 10\n   :                          :        +- Exchange hashpartitioning(ps_partkey#14L, ps_suppkey#15L, 200), ENSURE_REQUIREMENTS, [plan_id=955]\n   :                          :           +- *(7) BroadcastHashJoin [ps_partkey#14L], [p_partkey#19L], LeftSemi, BuildRight, false\n   :                          :              :- AQEShuffleRead local\n   :                          :              :  +- ShuffleQueryStage 1\n   :                          :              :     +- Exchange hashpartitioning(ps_partkey#14L, 200), ENSURE_REQUIREMENTS, [plan_id=281]\n   :                          :              :        +- *(2) Filter ((isnotnull(ps_availqty#16) AND isnotnull(ps_partkey#14L)) AND isnotnull(ps_suppkey#15L))\n   :                          :              :           +- *(2) ColumnarToRow\n   :                          :              :              +- FileScan parquet spark_catalog.tpch_100.partsupp[ps_partkey#14L,ps_suppkey#15L,ps_availqty#16] Batched: true, DataFilters: [isnotnull(ps_availqty#16), isnotnull(ps_partkey#14L), isnotnull(ps_suppkey#15L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/partsupp], PartitionFilters: [], PushedFilters: [IsNotNull(ps_availqty), IsNotNull(ps_partkey), IsNotNull(ps_suppkey)], ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_availqty:int>\n   :                          :              +- BroadcastQueryStage 7\n   :                          :                 +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=814]\n   :                          :                    +- AQEShuffleRead local\n   :                          :                       +- ShuffleQueryStage 2\n   :                          :                          +- Exchange hashpartitioning(p_partkey#19L, 200), ENSURE_REQUIREMENTS, [plan_id=300]\n   :                          :                             +- *(3) Project [p_partkey#19L]\n   :                          :                                +- *(3) Filter (isnotnull(p_name#20) AND StartsWith(p_name#20, ivory))\n   :                          :                                   +- *(3) ColumnarToRow\n   :                          :                                      +- FileScan parquet spark_catalog.tpch_100.part[p_partkey#19L,p_name#20,p_brand#27] Batched: true, DataFilters: [isnotnull(p_name#20), StartsWith(p_name#20, ivory)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/part], PartitionFilters: [], PushedFilters: [IsNotNull(p_name), StringStartsWith(p_name,ivory)], ReadSchema: struct<p_partkey:bigint,p_name:string>\n   :                          +- *(10) Sort [l_partkey#30L ASC NULLS FIRST, l_suppkey#31L ASC NULLS FIRST], false, 0\n   :                             +- AQEShuffleRead coalesced\n   :                                +- ShuffleQueryStage 11\n   :                                   +- Exchange hashpartitioning(l_partkey#30L, l_suppkey#31L, 200), ENSURE_REQUIREMENTS, [plan_id=1132]\n   :                                      +- *(8) Filter isnotnull((0.5 * sum(l_quantity))#60)\n   :                                         +- *(8) HashAggregate(keys=[l_partkey#30L, l_suppkey#31L], functions=[sum(l_quantity#33)], output=[(0.5 * sum(l_quantity))#60, l_partkey#30L, l_suppkey#31L])\n   :                                            +- *(8) HashAggregate(keys=[l_partkey#30L, l_suppkey#31L], functions=[partial_sum(l_quantity#33)], output=[l_partkey#30L, l_suppkey#31L, sum#68, isEmpty#69])\n   :                                               +- *(8) BroadcastHashJoin [l_partkey#30L], [p_partkey#19L], LeftSemi, BuildRight, false\n   :                                                  :- AQEShuffleRead coalesced\n   :                                                  :  +- ShuffleQueryStage 3\n   :                                                  :     +- Exchange hashpartitioning(l_partkey#30L, 200), ENSURE_REQUIREMENTS, [plan_id=324]\n   :                                                  :        +- *(4) Project [l_partkey#30L, l_suppkey#31L, l_quantity#33]\n   :                                                  :           +- *(4) Filter (isnotnull(l_partkey#30L) AND isnotnull(l_suppkey#31L))\n   :                                                  :              +- *(4) ColumnarToRow\n   :                                                  :                 +- FileScan parquet spark_catalog.tpch_100.lineitem[l_partkey#30L,l_suppkey#31L,l_quantity#33,l_shipdate#44] Batched: true, DataFilters: [isnotnull(l_partkey#30L), isnotnull(l_suppkey#31L)], Format: Parquet, Location: InMemoryFileIndex(366 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem..., PartitionFilters: [isnotnull(l_shipdate#44), (l_shipdate#44 >= 1996-01-01), (l_shipdate#44 < 1997-01-01)], PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey)], ReadSchema: struct<l_partkey:bigint,l_suppkey:bigint,l_quantity:decimal(12,2)>\n   :                                                  +- BroadcastQueryStage 9\n   :                                                     +- ReusedExchange [p_partkey#19L], BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=814]\n   +- BroadcastQueryStage 6\n      +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=380]\n         +- *(6) Project [n_nationkey#10L]\n            +- *(6) Filter ((isnotnull(n_name#11) AND (n_name#11 = KENYA)) AND isnotnull(n_nationkey#10L))\n               +- *(6) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#10L,n_name#11] Batched: true, DataFilters: [isnotnull(n_name#11), (n_name#11 = KENYA), isnotnull(n_nationkey#10L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_name), EqualTo(n_name,KENYA), IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 29497352,
        "inputRowCount" : 632828
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "1" : [ 10353, 11388, 12527, 10353, 10353, 10353, 12527, 10353, 9412, 10353, 9412, 11388, 10353, 10353, 10353, 10353, 10353, 9412, 11388, 11388, 10353, 10353, 10353, 10353, 11388, 11388, 9412, 9412, 9412, 11388, 10353, 9412, 8556, 10353, 10353, 10353, 10353, 9412, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 9412, 11388, 9412, 10353, 10353, 10353, 9412, 11388, 10353, 9412, 10353, 10353, 10353, 9412, 10353, 11388, 10353, 10353, 12527, 10353, 9412, 10353, 9412, 9412, 9412, 9412, 11388, 9412, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 10353, 9412, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 8556, 10353, 11388, 8556, 9412, 10353, 11388, 11388, 9412, 10353, 10353, 12527, 10353, 10353, 11388, 9412, 9412, 11388, 10353, 10353, 10353, 10353, 9412, 10353, 11388, 10353, 10353, 9412, 10353, 12527, 10353, 11388, 10353, 11388, 10353, 10353, 12527, 11388, 9412, 10353, 11388, 10353, 9412, 10353, 10353, 10353, 10353, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 11388, 10353, 10353, 11388, 11388, 10353, 10353, 10353, 11388, 10353, 10353, 10353, 10353, 11388, 10353, 11388, 11388, 10353, 10353, 11388, 10353, 10353, 10353, 11388, 11388, 11388, 11388, 10353, 10353, 10353, 10353, 10353, 9412, 11388, 10353, 9412, 11388, 10353, 11388, 10353, 10353, 9412, 10353, 10353, 10353, 11388, 11388, 11388, 12527, 11388, 10353, 11388, 10353, 11388, 11388 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 12,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 27, 29 ],
      "Objectives" : {
        "DurationInMs" : 640,
        "TotalTasksDurationInMs" : 569,
        "IOBytes" : {
          "Total" : 4772574,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 3990876,
            "SW" : 781698
          }
        }
      }
    },
    "8" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -325908990,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2240000000,
                "rowCount" : 80000000
              },
              "compileTime" : {
                "sizeInBytes" : 2240000000,
                "rowCount" : 80000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (ps_partkey#14L = p_partkey#19L) "
          },
          "1" : {
            "sign" : -605965217,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2560000000,
                "rowCount" : 80000000
              },
              "compileTime" : {
                "sizeInBytes" : 2240000000,
                "rowCount" : 80000000
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ps_partkey#14L, ps_suppkey#15L, ps_availqty#16], ShuffleQueryStage 1 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "LogicalQueryStage",
          "toId" : 0,
          "toName" : "Join",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Join LeftSemi, (ps_partkey#14L = p_partkey#19L)\n:- LogicalQueryStage Project [ps_partkey#14L, ps_suppkey#15L, ps_availqty#16], ShuffleQueryStage 1\n+- LogicalQueryStage Project [p_partkey#19L], ShuffleQueryStage 2\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 697097208,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 2240000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ps_partkey#14L] Right keys [1]: [p_partkey#19L] Join type: LeftSemi Join condition: None "
          },
          "1" : {
            "sign" : -1379370844,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [ps_partkey#14L, ps_suppkey#15L, ps_availqty#16] Arguments: 1 "
          },
          "2" : {
            "sign" : -1778927260,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 16777216,
            "rowCount" : 217537,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [p_partkey#19L] Arguments: 7 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastQueryStage",
          "toId" : 0,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "BroadcastHashJoin [ps_partkey#14L], [p_partkey#19L], LeftSemi, BuildRight, false\n:- ShuffleQueryStage 1\n:  +- Exchange hashpartitioning(ps_partkey#14L, 200), ENSURE_REQUIREMENTS, [plan_id=281]\n:     +- *(2) Filter ((isnotnull(ps_availqty#16) AND isnotnull(ps_partkey#14L)) AND isnotnull(ps_suppkey#15L))\n:        +- *(2) ColumnarToRow\n:           +- FileScan parquet spark_catalog.tpch_100.partsupp[ps_partkey#14L,ps_suppkey#15L,ps_availqty#16] Batched: true, DataFilters: [isnotnull(ps_availqty#16), isnotnull(ps_partkey#14L), isnotnull(ps_suppkey#15L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/partsupp], PartitionFilters: [], PushedFilters: [IsNotNull(ps_availqty), IsNotNull(ps_partkey), IsNotNull(ps_suppkey)], ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_availqty:int>\n+- BroadcastQueryStage 7\n   +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=814]\n      +- AQEShuffleRead local\n         +- ShuffleQueryStage 2\n            +- Exchange hashpartitioning(p_partkey#19L, 200), ENSURE_REQUIREMENTS, [plan_id=300]\n               +- *(3) Project [p_partkey#19L]\n                  +- *(3) Filter (isnotnull(p_name#20) AND StartsWith(p_name#20, ivory))\n                     +- *(3) ColumnarToRow\n                        +- FileScan parquet spark_catalog.tpch_100.part[p_partkey#19L,p_name#20,p_brand#27] Batched: true, DataFilters: [isnotnull(p_name#20), StartsWith(p_name#20, ivory)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/part], PartitionFilters: [], PushedFilters: [IsNotNull(p_name), StringStartsWith(p_name,ivory)], ReadSchema: struct<p_partkey:bigint,p_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2576777216,
        "inputRowCount" : 80217537
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "2" : [ 6880215, 6919961, 6979580, 6919961, 6979580, 6939834, 6979580, 7039199, 6988235, 6999453, 6999453, 6939834, 7019326, 6999453, 7019326, 6932301, 6959707, 6919961, 6919961, 7059072, 6939834, 6959707, 7019326, 6979580, 6919961, 6939834, 6999453, 6919961, 6999453, 6939834, 6939834, 6999453, 6999453, 6900088, 6959707, 6959707, 6939834, 6999453, 6939834, 6999453, 6999453, 6939834, 6999453, 6939834, 6959707, 6939834, 6900088, 7078945, 6939834, 6919961, 6900088, 7019326, 6912428, 7118691, 6979580, 6999453, 6999453, 6939834, 7059072, 6939834, 6959707, 7019326, 6959707, 6919961, 6919961, 6919961, 6919961, 6919961, 6959707, 6919961, 6900088, 7039199, 6919961, 6959707, 6939834, 6979580, 6900088, 6979580, 6979580, 6900088, 6999453, 6979580, 6979580, 6968362, 6939834, 6959707, 6919961, 6939834, 6919961, 6939834, 6979580, 6919961, 7039199, 6999453, 7019326, 6900088, 6979580, 6959707, 6959707, 6880215, 6999453, 6939834, 6999453, 6919961, 6979580, 6979580, 6900088, 6939834, 6919961, 7019326, 6959707, 6959707, 6959707, 7039199, 6900088, 6999453, 6939834, 6939834, 7059072, 6999453, 6999453, 6900088, 6919961, 6959707, 6919961, 7019326, 6999453, 6900088, 6979580, 6919961, 6959707, 6979580, 6932301, 6919961, 7019326, 6979580, 7019326, 6919961, 6939834, 6999453, 7019326, 6959707, 6919961, 6919961, 7039199, 6959707, 6939834, 7039199, 6959707, 6979580, 6919961, 7019326, 6939834, 6959707, 6959707, 6939834, 6999453, 6900088, 7019326, 7011793, 6979580, 6919961, 7098818, 6939834, 7019326, 6900088, 6900088, 6939834, 6880215, 6999453, 6979580, 6999453, 7019326, 6939834, 7059072, 6979580, 6959707, 6959707, 6959707, 6939834, 6959707, 6939834, 6939834, 7019326, 6932301, 7078945, 6979580, 7019326, 7019326, 6979580, 6919961, 6999453, 6959707, 6999453, 6959707, 6959707, 7019326, 6959707, 6948489, 6959707 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 11,
        "FinishedTasksNum" : 30,
        "FinishedTasksTotalTimeInMs" : 40479.0,
        "FinishedTasksDistributionInMs" : [ 1107.0, 1214.0, 1304.0, 1375.0, 2190.0 ]
      },
      "QueryStageOptimizationId" : 8,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 12 ],
      "Objectives" : {
        "DurationInMs" : 2346,
        "TotalTasksDurationInMs" : 22058,
        "IOBytes" : {
          "Total" : 1364716644,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1348354454,
            "SW" : 16362190
          }
        }
      }
    },
    "4" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 359082550,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2240000000,
                "rowCount" : 80000000
              },
              "compileTime" : {
                "sizeInBytes" : 2240000000,
                "rowCount" : 80000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ps_partkey#14L, ps_suppkey#15L, ps_availqty#16] "
          },
          "1" : {
            "sign" : -1854375490,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 13760000000,
                "rowCount" : 80000000
              },
              "compileTime" : {
                "sizeInBytes" : 13760000000,
                "rowCount" : 80000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(ps_availqty#16) AND isnotnull(ps_partkey#14L)) AND isnotnull(ps_suppkey#15L)) "
          },
          "2" : {
            "sign" : 1671317398,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 13760000000,
                "rowCount" : 80000000
              },
              "compileTime" : {
                "sizeInBytes" : 13760000000,
                "rowCount" : 80000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ps_partkey#14L, ps_suppkey#15L, ps_availqty#16, ps_supplycost#17, ps_comment#18], `spark_catalog`.`tpch_100`.`partsupp`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ps_partkey#14L, ps_suppkey#15L, ps_availqty#16]\n+- Filter ((isnotnull(ps_availqty#16) AND isnotnull(ps_partkey#14L)) AND isnotnull(ps_suppkey#15L))\n   +- Relation spark_catalog.tpch_100.partsupp[ps_partkey#14L,ps_suppkey#15L,ps_availqty#16,ps_supplycost#17,ps_comment#18] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1973573854,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 2240000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [ps_partkey#14L, ps_suppkey#15L, ps_availqty#16] Condition : ((isnotnull(ps_availqty#16) AND isnotnull(ps_partkey#14L)) AND isnotnull(ps_suppkey#15L)) "
          },
          "1" : {
            "sign" : 562794678,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 2240000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.partsupp Output [3]: [ps_partkey#14L, ps_suppkey#15L, ps_availqty#16] Batched: true Location: InMemoryFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/partsupp] PushedFilters: [IsNotNull(ps_availqty), IsNotNull(ps_partkey), IsNotNull(ps_suppkey)] ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_availqty:int> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpch_100.partsupp",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter ((isnotnull(ps_availqty#16) AND isnotnull(ps_partkey#14L)) AND isnotnull(ps_suppkey#15L))\n+- FileScan parquet spark_catalog.tpch_100.partsupp[ps_partkey#14L,ps_suppkey#15L,ps_availqty#16] Batched: true, DataFilters: [isnotnull(ps_availqty#16), isnotnull(ps_partkey#14L), isnotnull(ps_suppkey#15L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/partsupp], PartitionFilters: [], PushedFilters: [IsNotNull(ps_availqty), IsNotNull(ps_partkey), IsNotNull(ps_suppkey)], ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_availqty:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2240000000,
        "inputRowCount" : 80000000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 6 ],
      "Objectives" : {
        "DurationInMs" : 4586,
        "TotalTasksDurationInMs" : 45205,
        "IOBytes" : {
          "Total" : 2219754532,
          "Details" : {
            "IR" : 871400078,
            "IW" : 0,
            "SR" : 0,
            "SW" : 1348354454
          }
        }
      }
    },
    "11" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -547503840,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9489408,
                "rowCount" : 593088
              },
              "compileTime" : {
                "sizeInBytes" : 1280000000,
                "rowCount" : 80000000
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ps_suppkey#15L], ShuffleQueryStage 12 "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Project [ps_suppkey#15L], ShuffleQueryStage 12\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -98595823,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 9489408,
            "rowCount" : 593088,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [ps_suppkey#15L] Arguments: 12 "
          }
        },
        "links" : [ ],
        "rawPlan" : "ShuffleQueryStage 12\n+- Exchange hashpartitioning(ps_suppkey#15L, 200), ENSURE_REQUIREMENTS, [plan_id=1287]\n   +- *(11) Project [ps_suppkey#15L]\n      +- *(11) SortMergeJoin [ps_partkey#14L, ps_suppkey#15L], [l_partkey#30L, l_suppkey#31L], Inner, (cast(ps_availqty#16 as decimal(24,3)) > (0.5 * sum(l_quantity))#60)\n         :- *(9) Sort [ps_partkey#14L ASC NULLS FIRST, ps_suppkey#15L ASC NULLS FIRST], false, 0\n         :  +- AQEShuffleRead coalesced\n         :     +- ShuffleQueryStage 10\n         :        +- Exchange hashpartitioning(ps_partkey#14L, ps_suppkey#15L, 200), ENSURE_REQUIREMENTS, [plan_id=955]\n         :           +- *(7) BroadcastHashJoin [ps_partkey#14L], [p_partkey#19L], LeftSemi, BuildRight, false\n         :              :- AQEShuffleRead local\n         :              :  +- ShuffleQueryStage 1\n         :              :     +- Exchange hashpartitioning(ps_partkey#14L, 200), ENSURE_REQUIREMENTS, [plan_id=281]\n         :              :        +- *(2) Filter ((isnotnull(ps_availqty#16) AND isnotnull(ps_partkey#14L)) AND isnotnull(ps_suppkey#15L))\n         :              :           +- *(2) ColumnarToRow\n         :              :              +- FileScan parquet spark_catalog.tpch_100.partsupp[ps_partkey#14L,ps_suppkey#15L,ps_availqty#16] Batched: true, DataFilters: [isnotnull(ps_availqty#16), isnotnull(ps_partkey#14L), isnotnull(ps_suppkey#15L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/partsupp], PartitionFilters: [], PushedFilters: [IsNotNull(ps_availqty), IsNotNull(ps_partkey), IsNotNull(ps_suppkey)], ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_availqty:int>\n         :              +- BroadcastQueryStage 7\n         :                 +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=814]\n         :                    +- AQEShuffleRead local\n         :                       +- ShuffleQueryStage 2\n         :                          +- Exchange hashpartitioning(p_partkey#19L, 200), ENSURE_REQUIREMENTS, [plan_id=300]\n         :                             +- *(3) Project [p_partkey#19L]\n         :                                +- *(3) Filter (isnotnull(p_name#20) AND StartsWith(p_name#20, ivory))\n         :                                   +- *(3) ColumnarToRow\n         :                                      +- FileScan parquet spark_catalog.tpch_100.part[p_partkey#19L,p_name#20,p_brand#27] Batched: true, DataFilters: [isnotnull(p_name#20), StartsWith(p_name#20, ivory)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/part], PartitionFilters: [], PushedFilters: [IsNotNull(p_name), StringStartsWith(p_name,ivory)], ReadSchema: struct<p_partkey:bigint,p_name:string>\n         +- *(10) Sort [l_partkey#30L ASC NULLS FIRST, l_suppkey#31L ASC NULLS FIRST], false, 0\n            +- AQEShuffleRead coalesced\n               +- ShuffleQueryStage 11\n                  +- Exchange hashpartitioning(l_partkey#30L, l_suppkey#31L, 200), ENSURE_REQUIREMENTS, [plan_id=1132]\n                     +- *(8) Filter isnotnull((0.5 * sum(l_quantity))#60)\n                        +- *(8) HashAggregate(keys=[l_partkey#30L, l_suppkey#31L], functions=[sum(l_quantity#33)], output=[(0.5 * sum(l_quantity))#60, l_partkey#30L, l_suppkey#31L])\n                           +- *(8) HashAggregate(keys=[l_partkey#30L, l_suppkey#31L], functions=[partial_sum(l_quantity#33)], output=[l_partkey#30L, l_suppkey#31L, sum#68, isEmpty#69])\n                              +- *(8) BroadcastHashJoin [l_partkey#30L], [p_partkey#19L], LeftSemi, BuildRight, false\n                                 :- AQEShuffleRead coalesced\n                                 :  +- ShuffleQueryStage 3\n                                 :     +- Exchange hashpartitioning(l_partkey#30L, 200), ENSURE_REQUIREMENTS, [plan_id=324]\n                                 :        +- *(4) Project [l_partkey#30L, l_suppkey#31L, l_quantity#33]\n                                 :           +- *(4) Filter (isnotnull(l_partkey#30L) AND isnotnull(l_suppkey#31L))\n                                 :              +- *(4) ColumnarToRow\n                                 :                 +- FileScan parquet spark_catalog.tpch_100.lineitem[l_partkey#30L,l_suppkey#31L,l_quantity#33,l_shipdate#44] Batched: true, DataFilters: [isnotnull(l_partkey#30L), isnotnull(l_suppkey#31L)], Format: Parquet, Location: InMemoryFileIndex(366 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem..., PartitionFilters: [isnotnull(l_shipdate#44), (l_shipdate#44 >= 1996-01-01), (l_shipdate#44 < 1997-01-01)], PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey)], ReadSchema: struct<l_partkey:bigint,l_suppkey:bigint,l_quantity:decimal(12,2)>\n                                 +- BroadcastQueryStage 9\n                                    +- ReusedExchange [p_partkey#19L], BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=814]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 9489408,
        "inputRowCount" : 593088
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "7" : [ 15158, 15158, 16674, 15158, 16674, 16674, 16674, 15158, 16674, 16674, 15158, 16674, 16674, 15158, 15158, 16674, 16674, 15158, 16674, 15158, 15158, 16674, 15158, 15158, 16674, 15158, 15158, 15158, 16674, 16674, 15158, 16674, 15158, 16674, 15158, 15158, 15158, 15158, 16674, 15158, 15158, 16674, 15158, 16674, 16674, 15158, 16674, 16674, 15158, 16674, 16674, 16674, 16674, 15158, 15158, 16674, 15158, 16674, 15158, 15158, 15158, 16674, 15158, 16674, 16674, 16674, 15158, 15158, 15158, 15158, 15158, 16674, 15158, 15158, 15158, 16674, 15158, 15158, 16674, 16674, 15158, 16674, 16674, 16674, 15158, 16674, 16674, 15158, 16674, 15158, 15158, 15158, 16674, 16674, 16674, 16674, 16674, 15158, 16674, 16674, 16674, 16674, 16674, 15158, 16674, 15158, 15158, 15158, 16674, 15158, 15158, 16674, 16674, 15158, 16674, 16674, 16674, 16674, 15158, 15158, 16674, 16674, 16674, 16674, 16674, 15158, 15158, 16674, 16674, 16674, 16674, 15158, 15158, 16674, 15158, 16674, 16674, 16674, 15158, 16674, 16674, 15158, 15158, 15158, 16674, 16674, 16674, 16674, 15158, 15158, 16674, 15158, 15158, 15158, 16674, 15158, 15158, 15158, 15158, 15158, 16674, 15158, 16674, 16674, 16674, 16674, 15158, 16674, 15158, 15158, 16674, 16674, 16674, 15158, 16674, 16674, 16674, 16674, 15158, 16674, 16674, 15158, 15158, 15158, 15158, 15158, 15158, 16674, 16674, 15158, 16674, 16674, 16674, 16674, 16674, 15158, 16674, 16674, 16674, 16674 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 11,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 25 ],
      "Objectives" : {
        "DurationInMs" : 209,
        "TotalTasksDurationInMs" : 202,
        "IOBytes" : {
          "Total" : 3046947,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 3046947,
            "SW" : 0
          }
        }
      }
    },
    "9" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 1779703244,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3480592,
                "rowCount" : 217537
              },
              "compileTime" : {
                "sizeInBytes" : 320000000,
                "rowCount" : 20000000
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_partkey#19L], ShuffleQueryStage 5 "
          },
          "1" : {
            "sign" : 745662757,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3651674240,
                "rowCount" : 91291856
              },
              "compileTime" : {
                "sizeInBytes" : 3651674240,
                "rowCount" : 91291856
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [l_partkey#30L, l_suppkey#31L], [(0.5 * sum(l_quantity#33)) AS (0.5 * sum(l_quantity))#60, l_partkey#30L, l_suppkey#31L] "
          },
          "0" : {
            "sign" : 1085149389,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3651674240,
                "rowCount" : 91291856
              },
              "compileTime" : {
                "sizeInBytes" : 3651674240,
                "rowCount" : 91291856
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull((0.5 * sum(l_quantity))#60) "
          },
          "2" : {
            "sign" : -663150960,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2921339392,
                "rowCount" : 91291856
              },
              "compileTime" : {
                "sizeInBytes" : 2921339392,
                "rowCount" : 91291856
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: LeftSemi, (l_partkey#30L = p_partkey#19L) "
          },
          "3" : {
            "sign" : 2124381943,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2920765536,
                "rowCount" : 91273923
              },
              "compileTime" : {
                "sizeInBytes" : 2921339392,
                "rowCount" : 91291856
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_partkey#30L, l_suppkey#31L, l_quantity#33], ShuffleQueryStage 3 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull((0.5 * sum(l_quantity))#60)\n+- Aggregate [l_partkey#30L, l_suppkey#31L], [(0.5 * sum(l_quantity#33)) AS (0.5 * sum(l_quantity))#60, l_partkey#30L, l_suppkey#31L]\n   +- Join LeftSemi, (l_partkey#30L = p_partkey#19L)\n      :- LogicalQueryStage Project [l_partkey#30L, l_suppkey#31L, l_quantity#33], ShuffleQueryStage 3\n      +- LogicalQueryStage Project [p_partkey#19L], ShuffleQueryStage 5\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 575130257,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 2920765536,
            "rowCount" : 91273923,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [l_partkey#30L, l_suppkey#31L, l_quantity#33] Arguments: 3 "
          },
          "5" : {
            "sign" : -1134176045,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 16777216,
            "rowCount" : 217537,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [p_partkey#19L] Arguments: 9 "
          },
          "1" : {
            "sign" : 1385644293,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 3651674240,
            "rowCount" : 91291856,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [4]: [l_partkey#30L, l_suppkey#31L, sum#68, isEmpty#69] Keys [2]: [l_partkey#30L, l_suppkey#31L] Functions [1]: [sum(l_quantity#33)] Aggregate Attributes [1]: [sum(l_quantity#33)#59] Results [3]: [(0.5 * sum(l_quantity#33)#59) AS (0.5 * sum(l_quantity))#60, l_partkey#30L, l_suppkey#31L] "
          },
          "0" : {
            "sign" : 1315789127,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 3651674240,
            "rowCount" : 91291856,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [(0.5 * sum(l_quantity))#60, l_partkey#30L, l_suppkey#31L] Condition : isnotnull((0.5 * sum(l_quantity))#60) "
          },
          "2" : {
            "sign" : -1310648714,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 3651674240,
            "rowCount" : 91291856,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [3]: [l_partkey#30L, l_suppkey#31L, l_quantity#33] Keys [2]: [l_partkey#30L, l_suppkey#31L] Functions [1]: [partial_sum(l_quantity#33)] Aggregate Attributes [2]: [sum#66, isEmpty#67] Results [4]: [l_partkey#30L, l_suppkey#31L, sum#68, isEmpty#69] "
          },
          "3" : {
            "sign" : 970658985,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 2921339392,
            "rowCount" : 91291856,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [l_partkey#30L] Right keys [1]: [p_partkey#19L] Join type: LeftSemi Join condition: None "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 3,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "BroadcastQueryStage",
          "toId" : 3,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "BroadcastHashJoin",
          "toId" : 2,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "HashAggregate",
          "toId" : 1,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "HashAggregate",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull((0.5 * sum(l_quantity))#60)\n+- HashAggregate(keys=[l_partkey#30L, l_suppkey#31L], functions=[sum(l_quantity#33)], output=[(0.5 * sum(l_quantity))#60, l_partkey#30L, l_suppkey#31L])\n   +- HashAggregate(keys=[l_partkey#30L, l_suppkey#31L], functions=[partial_sum(l_quantity#33)], output=[l_partkey#30L, l_suppkey#31L, sum#68, isEmpty#69])\n      +- BroadcastHashJoin [l_partkey#30L], [p_partkey#19L], LeftSemi, BuildRight, false\n         :- ShuffleQueryStage 3\n         :  +- Exchange hashpartitioning(l_partkey#30L, 200), ENSURE_REQUIREMENTS, [plan_id=324]\n         :     +- *(4) Project [l_partkey#30L, l_suppkey#31L, l_quantity#33]\n         :        +- *(4) Filter (isnotnull(l_partkey#30L) AND isnotnull(l_suppkey#31L))\n         :           +- *(4) ColumnarToRow\n         :              +- FileScan parquet spark_catalog.tpch_100.lineitem[l_partkey#30L,l_suppkey#31L,l_quantity#33,l_shipdate#44] Batched: true, DataFilters: [isnotnull(l_partkey#30L), isnotnull(l_suppkey#31L)], Format: Parquet, Location: InMemoryFileIndex(366 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem..., PartitionFilters: [isnotnull(l_shipdate#44), (l_shipdate#44 >= 1996-01-01), (l_shipdate#44 < 1997-01-01)], PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey)], ReadSchema: struct<l_partkey:bigint,l_suppkey:bigint,l_quantity:decimal(12,2)>\n         +- BroadcastQueryStage 9\n            +- ReusedExchange [p_partkey#19L], BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=814]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2937542752,
        "inputRowCount" : 91491460
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "4" : [ 7158033, 7223729, 7273001, 7273001, 7289425, 7190881, 7223729, 7322273, 7240153, 7273001, 7256577, 7256577, 7273001, 7256577, 7273001, 7207305, 7190881, 7273001, 7289425, 7289425, 7158033, 7333491, 7322273, 7322273, 7202099, 7284219, 7305849, 6993793, 7174457, 7125185, 7190881, 7256577, 7158033, 7125185, 7190881, 7305849, 7174457, 7273001, 7174457, 7256577, 7223729, 7273001, 7284219, 7174457, 7190881, 7273001, 7289425, 7305849, 7075913, 7240153, 7174457, 7305849, 7207305, 7322273, 7256577, 7169251, 7267795, 7158033, 7333491, 7322273, 7240153, 7256577, 7207305, 7158033, 7136403, 7141609, 7207305, 7289425, 7190881, 7223729, 7141609, 7305849, 7223729, 7174457, 7289425, 7256577, 7190881, 7305849, 7223729, 7174457, 7256577, 7240153, 7240153, 7174457, 7223729, 7223729, 7141609, 7223729, 7174457, 7125185, 7256577, 7223729, 7322273, 7305849, 7289425, 7108761, 7240153, 7207305, 7125185, 7190881, 7305849, 7174457, 7305849, 7207305, 7289425, 7289425, 7158033, 7289425, 7223729, 7267795, 7284219, 7256577, 7174457, 7305849, 7190881, 7305849, 7125185, 7273001, 7322273, 7289425, 7305849, 7125185, 7190881, 7240153, 7174457, 7256577, 7289425, 7075913, 7223729, 7223729, 7223729, 7289425, 7092337, 7141609, 7273001, 7158033, 7289425, 7141609, 7322273, 7289425, 7273001, 7273001, 7125185, 7190881, 7273001, 7190881, 7322273, 7240153, 7289425, 7273001, 7256577, 7289425, 7141609, 7218523, 7289425, 7202099, 7223729, 7207305, 7256577, 7256577, 7267795, 7223729, 7273001, 7125185, 7322273, 7141609, 7289425, 7273001, 7158033, 7256577, 7289425, 7256577, 7240153, 7289425, 7289425, 7223729, 7240153, 7207305, 7251371, 7207305, 7043065, 7158033, 7174457, 7256577, 7108761, 7322273, 7289425, 7273001, 7273001, 7256577, 7190881, 7273001, 7207305, 7338697, 7141609, 7207305, 7305849, 7234947, 7207305, 7240153 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 9,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 14 ],
      "Objectives" : {
        "DurationInMs" : 3584,
        "TotalTasksDurationInMs" : 35993,
        "IOBytes" : {
          "Total" : 1360755418,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1348848546,
            "SW" : 11906872
          }
        }
      }
    },
    "13" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1618981605,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1907472,
                "rowCount" : 39739
              },
              "compileTime" : {
                "sizeInBytes" : 1907472,
                "rowCount" : 39739
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [s_name#4 ASC NULLS FIRST], true "
          }
        },
        "links" : [ ],
        "rawPlan" : "Sort [s_name#4 ASC NULLS FIRST], true\n+- Project [s_name#4, s_address#5]\n   +- Join Inner, (s_nationkey#6L = n_nationkey#10L)\n      :- Project [s_name#4, s_address#5, s_nationkey#6L]\n      :  +- Join LeftSemi, (s_suppkey#3L = ps_suppkey#15L)\n      :     :- LogicalQueryStage Project [s_suppkey#3L, s_name#4, s_address#5, s_nationkey#6L], ShuffleQueryStage 0\n      :     +- LogicalQueryStage Project [ps_suppkey#15L], ShuffleQueryStage 12\n      +- LogicalQueryStage Project [n_nationkey#10L], BroadcastQueryStage 6\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -378219192,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : 1907472,
            "rowCount" : 39739,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [s_name#4, s_address#5] Arguments: [s_name#4 ASC NULLS FIRST], true, 0 "
          },
          "1" : {
            "sign" : 1767212843,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 1377296,
            "rowCount" : 18029,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [s_name#4, s_address#5] Arguments: 14 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [s_name#4 ASC NULLS FIRST], true, 0\n+- ShuffleQueryStage 14\n   +- Exchange rangepartitioning(s_name#4 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [plan_id=1417]\n      +- *(12) Project [s_name#4, s_address#5]\n         +- *(12) BroadcastHashJoin [s_nationkey#6L], [n_nationkey#10L], Inner, BuildRight, false\n            :- *(12) Project [s_name#4, s_address#5, s_nationkey#6L]\n            :  +- *(12) BroadcastHashJoin [s_suppkey#3L], [ps_suppkey#15L], LeftSemi, BuildRight, false\n            :     :- AQEShuffleRead local\n            :     :  +- ShuffleQueryStage 0\n            :     :     +- Exchange hashpartitioning(s_suppkey#3L, 200), ENSURE_REQUIREMENTS, [plan_id=264]\n            :     :        +- *(1) Filter (isnotnull(s_nationkey#6L) AND might_contain(Subquery subquery#65, [id=#109], xxhash64(s_nationkey#6L, 42)))\n            :     :           :  +- Subquery subquery#65, [id=#109]\n            :     :           :     +- AdaptiveSparkPlan isFinalPlan=true\n                                       +- == Final Plan ==\n                                          ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(n_nationkey#10L, 42), 1, 38, 0, 0)], output=[bloomFilter#64])\n                                          +- ShuffleQueryStage 0\n                                             +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=406]\n                                                +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(n_nationkey#10L, 42), 1, 38, 0, 0)], output=[buf#71])\n                                                   +- *(1) Project [n_nationkey#10L]\n                                                      +- *(1) Filter ((isnotnull(n_name#11) AND (n_name#11 = KENYA)) AND isnotnull(n_nationkey#10L))\n                                                         +- *(1) ColumnarToRow\n                                                            +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#10L,n_name#11] Batched: true, DataFilters: [isnotnull(n_name#11), (n_name#11 = KENYA), isnotnull(n_nationkey#10L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_name), EqualTo(n_name,KENYA), IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n                                       +- == Initial Plan ==\n                                          ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(n_nationkey#10L, 42), 1, 38, 0, 0)], output=[bloomFilter#64])\n                                          +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=107]\n                                             +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(n_nationkey#10L, 42), 1, 38, 0, 0)], output=[buf#71])\n                                                +- Project [n_nationkey#10L]\n                                                   +- Filter ((isnotnull(n_name#11) AND (n_name#11 = KENYA)) AND isnotnull(n_nationkey#10L))\n                                                      +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#10L,n_name#11] Batched: true, DataFilters: [isnotnull(n_name#11), (n_name#11 = KENYA), isnotnull(n_nationkey#10L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_name), EqualTo(n_name,KENYA), IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n            :     :           +- *(1) ColumnarToRow\n            :     :              +- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#3L,s_name#4,s_address#5,s_nationkey#6L] Batched: true, DataFilters: [isnotnull(s_nationkey#6L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_name:string,s_address:string,s_nationkey:bigint>\n            :     +- BroadcastQueryStage 13\n            :        +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=1356]\n            :           +- AQEShuffleRead local\n            :              +- ShuffleQueryStage 12\n            :                 +- Exchange hashpartitioning(ps_suppkey#15L, 200), ENSURE_REQUIREMENTS, [plan_id=1287]\n            :                    +- *(11) Project [ps_suppkey#15L]\n            :                       +- *(11) SortMergeJoin [ps_partkey#14L, ps_suppkey#15L], [l_partkey#30L, l_suppkey#31L], Inner, (cast(ps_availqty#16 as decimal(24,3)) > (0.5 * sum(l_quantity))#60)\n            :                          :- *(9) Sort [ps_partkey#14L ASC NULLS FIRST, ps_suppkey#15L ASC NULLS FIRST], false, 0\n            :                          :  +- AQEShuffleRead coalesced\n            :                          :     +- ShuffleQueryStage 10\n            :                          :        +- Exchange hashpartitioning(ps_partkey#14L, ps_suppkey#15L, 200), ENSURE_REQUIREMENTS, [plan_id=955]\n            :                          :           +- *(7) BroadcastHashJoin [ps_partkey#14L], [p_partkey#19L], LeftSemi, BuildRight, false\n            :                          :              :- AQEShuffleRead local\n            :                          :              :  +- ShuffleQueryStage 1\n            :                          :              :     +- Exchange hashpartitioning(ps_partkey#14L, 200), ENSURE_REQUIREMENTS, [plan_id=281]\n            :                          :              :        +- *(2) Filter ((isnotnull(ps_availqty#16) AND isnotnull(ps_partkey#14L)) AND isnotnull(ps_suppkey#15L))\n            :                          :              :           +- *(2) ColumnarToRow\n            :                          :              :              +- FileScan parquet spark_catalog.tpch_100.partsupp[ps_partkey#14L,ps_suppkey#15L,ps_availqty#16] Batched: true, DataFilters: [isnotnull(ps_availqty#16), isnotnull(ps_partkey#14L), isnotnull(ps_suppkey#15L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/partsupp], PartitionFilters: [], PushedFilters: [IsNotNull(ps_availqty), IsNotNull(ps_partkey), IsNotNull(ps_suppkey)], ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_availqty:int>\n            :                          :              +- BroadcastQueryStage 7\n            :                          :                 +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=814]\n            :                          :                    +- AQEShuffleRead local\n            :                          :                       +- ShuffleQueryStage 2\n            :                          :                          +- Exchange hashpartitioning(p_partkey#19L, 200), ENSURE_REQUIREMENTS, [plan_id=300]\n            :                          :                             +- *(3) Project [p_partkey#19L]\n            :                          :                                +- *(3) Filter (isnotnull(p_name#20) AND StartsWith(p_name#20, ivory))\n            :                          :                                   +- *(3) ColumnarToRow\n            :                          :                                      +- FileScan parquet spark_catalog.tpch_100.part[p_partkey#19L,p_name#20,p_brand#27] Batched: true, DataFilters: [isnotnull(p_name#20), StartsWith(p_name#20, ivory)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/part], PartitionFilters: [], PushedFilters: [IsNotNull(p_name), StringStartsWith(p_name,ivory)], ReadSchema: struct<p_partkey:bigint,p_name:string>\n            :                          +- *(10) Sort [l_partkey#30L ASC NULLS FIRST, l_suppkey#31L ASC NULLS FIRST], false, 0\n            :                             +- AQEShuffleRead coalesced\n            :                                +- ShuffleQueryStage 11\n            :                                   +- Exchange hashpartitioning(l_partkey#30L, l_suppkey#31L, 200), ENSURE_REQUIREMENTS, [plan_id=1132]\n            :                                      +- *(8) Filter isnotnull((0.5 * sum(l_quantity))#60)\n            :                                         +- *(8) HashAggregate(keys=[l_partkey#30L, l_suppkey#31L], functions=[sum(l_quantity#33)], output=[(0.5 * sum(l_quantity))#60, l_partkey#30L, l_suppkey#31L])\n            :                                            +- *(8) HashAggregate(keys=[l_partkey#30L, l_suppkey#31L], functions=[partial_sum(l_quantity#33)], output=[l_partkey#30L, l_suppkey#31L, sum#68, isEmpty#69])\n            :                                               +- *(8) BroadcastHashJoin [l_partkey#30L], [p_partkey#19L], LeftSemi, BuildRight, false\n            :                                                  :- AQEShuffleRead coalesced\n            :                                                  :  +- ShuffleQueryStage 3\n            :                                                  :     +- Exchange hashpartitioning(l_partkey#30L, 200), ENSURE_REQUIREMENTS, [plan_id=324]\n            :                                                  :        +- *(4) Project [l_partkey#30L, l_suppkey#31L, l_quantity#33]\n            :                                                  :           +- *(4) Filter (isnotnull(l_partkey#30L) AND isnotnull(l_suppkey#31L))\n            :                                                  :              +- *(4) ColumnarToRow\n            :                                                  :                 +- FileScan parquet spark_catalog.tpch_100.lineitem[l_partkey#30L,l_suppkey#31L,l_quantity#33,l_shipdate#44] Batched: true, DataFilters: [isnotnull(l_partkey#30L), isnotnull(l_suppkey#31L)], Format: Parquet, Location: InMemoryFileIndex(366 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem..., PartitionFilters: [isnotnull(l_shipdate#44), (l_shipdate#44 >= 1996-01-01), (l_shipdate#44 < 1997-01-01)], PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey)], ReadSchema: struct<l_partkey:bigint,l_suppkey:bigint,l_quantity:decimal(12,2)>\n            :                                                  +- BroadcastQueryStage 9\n            :                                                     +- ReusedExchange [p_partkey#19L], BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=814]\n            +- BroadcastQueryStage 6\n               +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=380]\n                  +- *(6) Project [n_nationkey#10L]\n                     +- *(6) Filter ((isnotnull(n_name#11) AND (n_name#11 = KENYA)) AND isnotnull(n_nationkey#10L))\n                        +- *(6) ColumnarToRow\n                           +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#10L,n_name#11] Batched: true, DataFilters: [isnotnull(n_name#11), (n_name#11 = KENYA), isnotnull(n_nationkey#10L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_name), EqualTo(n_name,KENYA), IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1377296,
        "inputRowCount" : 18029
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "8" : [ 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 4390, 4390, 3991, 3991, 3991, 3991, 4390, 3991, 3991, 4390, 4390, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 4390, 4390, 4390, 3991, 3991, 4390, 3991, 3991, 3991, 4390, 3991, 3991, 3991, 3991, 3991, 3991, 4390, 3991, 3991, 4390, 3991, 3991, 3991, 3991, 3991, 4390, 4390, 3991, 4390, 4390, 3991, 3991, 3991, 3991, 4390, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 4390, 3991, 3991, 3991, 3991, 4390, 3991, 4390, 3991, 3991, 4390, 3991, 4390, 3991, 3991, 3991, 3991, 4390, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 4390, 3991, 4390, 3991, 3991, 3991, 4390, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 4390, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 4390, 4390, 3991, 3991, 3991, 3991, 4390, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 4390, 3991, 3991, 3991, 4390, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 4390, 3991, 3991, 3991, 3991, 4390, 3991, 3991, 3991, 3991, 3991, 4390, 4390, 4390, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 13,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 32 ],
      "Objectives" : {
        "DurationInMs" : 245,
        "TotalTasksDurationInMs" : 233,
        "IOBytes" : {
          "Total" : 781698,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 781698,
            "SW" : 0
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1254561239,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 320000000,
                "rowCount" : 20000000
              },
              "compileTime" : {
                "sizeInBytes" : 320000000,
                "rowCount" : 20000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [p_partkey#19L] "
          },
          "1" : {
            "sign" : 1967896796,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3960000000,
                "rowCount" : 20000000
              },
              "compileTime" : {
                "sizeInBytes" : 3960000000,
                "rowCount" : 20000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(p_name#20) AND StartsWith(p_name#20, ivory)) "
          },
          "2" : {
            "sign" : 1980427896,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3960000000,
                "rowCount" : 20000000
              },
              "compileTime" : {
                "sizeInBytes" : 3960000000,
                "rowCount" : 20000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [p_partkey#19L, p_name#20, p_mfgr#21, p_type#22, p_size#23, p_container#24, p_retailprice#25, p_comment#26, p_brand#27], `spark_catalog`.`tpch_100`.`part`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [p_partkey#19L]\n+- Filter (isnotnull(p_name#20) AND StartsWith(p_name#20, ivory))\n   +- Relation spark_catalog.tpch_100.part[p_partkey#19L,p_name#20,p_mfgr#21,p_type#22,p_size#23,p_container#24,p_retailprice#25,p_comment#26,p_brand#27] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 219070124,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 320000000,
            "rowCount" : 20000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [p_partkey#19L] Input [3]: [p_partkey#19L, p_name#20, p_brand#27] "
          },
          "1" : {
            "sign" : -1462912801,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 320000000,
            "rowCount" : 20000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [p_partkey#19L, p_name#20, p_brand#27] Condition : (isnotnull(p_name#20) AND StartsWith(p_name#20, ivory)) "
          },
          "2" : {
            "sign" : -594418565,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 320000000,
            "rowCount" : 20000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.part Output [3]: [p_partkey#19L, p_name#20, p_brand#27] Batched: true Location: CatalogFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/part] PushedFilters: [IsNotNull(p_name), StringStartsWith(p_name,ivory)] ReadSchema: struct<p_partkey:bigint,p_name:string> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpch_100.part",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [p_partkey#19L]\n+- Filter (isnotnull(p_name#20) AND StartsWith(p_name#20, ivory))\n   +- FileScan parquet spark_catalog.tpch_100.part[p_partkey#19L,p_name#20,p_brand#27] Batched: true, DataFilters: [isnotnull(p_name#20), StartsWith(p_name#20, ivory)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/part], PartitionFilters: [], PushedFilters: [IsNotNull(p_name), StringStartsWith(p_name,ivory)], ReadSchema: struct<p_partkey:bigint,p_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 320000000,
        "inputRowCount" : 20000000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 7 ],
      "Objectives" : {
        "DurationInMs" : 4510,
        "TotalTasksDurationInMs" : 8120,
        "IOBytes" : {
          "Total" : 375554992,
          "Details" : {
            "IR" : 373939767,
            "IW" : 0,
            "SR" : 0,
            "SW" : 1615225
          }
        }
      }
    },
    "10" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1160338169,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1280000000,
                "rowCount" : 80000000
              },
              "compileTime" : {
                "sizeInBytes" : 1280000000,
                "rowCount" : 80000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ps_suppkey#15L] "
          },
          "1" : {
            "sign" : 1136882568,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4800000000,
                "rowCount" : 80000000
              },
              "compileTime" : {
                "sizeInBytes" : 4800000000,
                "rowCount" : 80000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((cast(ps_availqty#16 as decimal(24,3)) > (0.5 * sum(l_quantity))#60) AND (l_partkey#30L = ps_partkey#14L)) AND (l_suppkey#31L = ps_suppkey#15L)) "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ps_suppkey#15L]\n+- Join Inner, (((cast(ps_availqty#16 as decimal(24,3)) > (0.5 * sum(l_quantity))#60) AND (l_partkey#30L = ps_partkey#14L)) AND (l_suppkey#31L = ps_suppkey#15L))\n   :- Join LeftSemi, (ps_partkey#14L = p_partkey#19L)\n   :  :- LogicalQueryStage Project [ps_partkey#14L, ps_suppkey#15L, ps_availqty#16], ShuffleQueryStage 1\n   :  +- LogicalQueryStage Project [p_partkey#19L], ShuffleQueryStage 2\n   +- Filter isnotnull((0.5 * sum(l_quantity))#60)\n      +- Aggregate [l_partkey#30L, l_suppkey#31L], [(0.5 * sum(l_quantity#33)) AS (0.5 * sum(l_quantity))#60, l_partkey#30L, l_suppkey#31L]\n         +- Join LeftSemi, (l_partkey#30L = p_partkey#19L)\n            :- LogicalQueryStage Project [l_partkey#30L, l_suppkey#31L, l_quantity#33], ShuffleQueryStage 3\n            +- LogicalQueryStage Project [p_partkey#19L], ShuffleQueryStage 5\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -770656750,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [3]: [(0.5 * sum(l_quantity))#60, l_partkey#30L, l_suppkey#31L] Arguments: [l_partkey#30L ASC NULLS FIRST, l_suppkey#31L ASC NULLS FIRST], false, 0 "
          },
          "5" : {
            "sign" : -754088819,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 28529712,
            "rowCount" : 594369,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [(0.5 * sum(l_quantity))#60, l_partkey#30L, l_suppkey#31L] Arguments: 11 "
          },
          "1" : {
            "sign" : -2014849795,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 4800000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [2]: [ps_partkey#14L, ps_suppkey#15L] Right keys [2]: [l_partkey#30L, l_suppkey#31L] Join type: Inner Join condition: (cast(ps_availqty#16 as decimal(24,3)) > (0.5 * sum(l_quantity))#60) "
          },
          "0" : {
            "sign" : -1121271860,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1280000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [ps_suppkey#15L] Input [6]: [ps_partkey#14L, ps_suppkey#15L, ps_availqty#16, (0.5 * sum(l_quantity))#60, l_partkey#30L, l_suppkey#31L] "
          },
          "2" : {
            "sign" : -1319006324,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [3]: [ps_partkey#14L, ps_suppkey#15L, ps_availqty#16] Arguments: [ps_partkey#14L ASC NULLS FIRST, ps_suppkey#15L ASC NULLS FIRST], false, 0 "
          },
          "3" : {
            "sign" : -599164501,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 27844736,
            "rowCount" : 870148,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [ps_partkey#14L, ps_suppkey#15L, ps_availqty#16] Arguments: 10 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "SortMergeJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ps_suppkey#15L]\n+- SortMergeJoin [ps_partkey#14L, ps_suppkey#15L], [l_partkey#30L, l_suppkey#31L], Inner, (cast(ps_availqty#16 as decimal(24,3)) > (0.5 * sum(l_quantity))#60)\n   :- Sort [ps_partkey#14L ASC NULLS FIRST, ps_suppkey#15L ASC NULLS FIRST], false, 0\n   :  +- ShuffleQueryStage 10\n   :     +- Exchange hashpartitioning(ps_partkey#14L, ps_suppkey#15L, 200), ENSURE_REQUIREMENTS, [plan_id=955]\n   :        +- *(7) BroadcastHashJoin [ps_partkey#14L], [p_partkey#19L], LeftSemi, BuildRight, false\n   :           :- AQEShuffleRead local\n   :           :  +- ShuffleQueryStage 1\n   :           :     +- Exchange hashpartitioning(ps_partkey#14L, 200), ENSURE_REQUIREMENTS, [plan_id=281]\n   :           :        +- *(2) Filter ((isnotnull(ps_availqty#16) AND isnotnull(ps_partkey#14L)) AND isnotnull(ps_suppkey#15L))\n   :           :           +- *(2) ColumnarToRow\n   :           :              +- FileScan parquet spark_catalog.tpch_100.partsupp[ps_partkey#14L,ps_suppkey#15L,ps_availqty#16] Batched: true, DataFilters: [isnotnull(ps_availqty#16), isnotnull(ps_partkey#14L), isnotnull(ps_suppkey#15L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/partsupp], PartitionFilters: [], PushedFilters: [IsNotNull(ps_availqty), IsNotNull(ps_partkey), IsNotNull(ps_suppkey)], ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_availqty:int>\n   :           +- BroadcastQueryStage 7\n   :              +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=814]\n   :                 +- AQEShuffleRead local\n   :                    +- ShuffleQueryStage 2\n   :                       +- Exchange hashpartitioning(p_partkey#19L, 200), ENSURE_REQUIREMENTS, [plan_id=300]\n   :                          +- *(3) Project [p_partkey#19L]\n   :                             +- *(3) Filter (isnotnull(p_name#20) AND StartsWith(p_name#20, ivory))\n   :                                +- *(3) ColumnarToRow\n   :                                   +- FileScan parquet spark_catalog.tpch_100.part[p_partkey#19L,p_name#20,p_brand#27] Batched: true, DataFilters: [isnotnull(p_name#20), StartsWith(p_name#20, ivory)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/part], PartitionFilters: [], PushedFilters: [IsNotNull(p_name), StringStartsWith(p_name,ivory)], ReadSchema: struct<p_partkey:bigint,p_name:string>\n   +- Sort [l_partkey#30L ASC NULLS FIRST, l_suppkey#31L ASC NULLS FIRST], false, 0\n      +- ShuffleQueryStage 11\n         +- Exchange hashpartitioning(l_partkey#30L, l_suppkey#31L, 200), ENSURE_REQUIREMENTS, [plan_id=1132]\n            +- *(8) Filter isnotnull((0.5 * sum(l_quantity))#60)\n               +- *(8) HashAggregate(keys=[l_partkey#30L, l_suppkey#31L], functions=[sum(l_quantity#33)], output=[(0.5 * sum(l_quantity))#60, l_partkey#30L, l_suppkey#31L])\n                  +- *(8) HashAggregate(keys=[l_partkey#30L, l_suppkey#31L], functions=[partial_sum(l_quantity#33)], output=[l_partkey#30L, l_suppkey#31L, sum#68, isEmpty#69])\n                     +- *(8) BroadcastHashJoin [l_partkey#30L], [p_partkey#19L], LeftSemi, BuildRight, false\n                        :- AQEShuffleRead coalesced\n                        :  +- ShuffleQueryStage 3\n                        :     +- Exchange hashpartitioning(l_partkey#30L, 200), ENSURE_REQUIREMENTS, [plan_id=324]\n                        :        +- *(4) Project [l_partkey#30L, l_suppkey#31L, l_quantity#33]\n                        :           +- *(4) Filter (isnotnull(l_partkey#30L) AND isnotnull(l_suppkey#31L))\n                        :              +- *(4) ColumnarToRow\n                        :                 +- FileScan parquet spark_catalog.tpch_100.lineitem[l_partkey#30L,l_suppkey#31L,l_quantity#33,l_shipdate#44] Batched: true, DataFilters: [isnotnull(l_partkey#30L), isnotnull(l_suppkey#31L)], Format: Parquet, Location: InMemoryFileIndex(366 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem..., PartitionFilters: [isnotnull(l_shipdate#44), (l_shipdate#44 >= 1996-01-01), (l_shipdate#44 < 1997-01-01)], PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey)], ReadSchema: struct<l_partkey:bigint,l_suppkey:bigint,l_quantity:decimal(12,2)>\n                        +- BroadcastQueryStage 9\n                           +- ReusedExchange [p_partkey#19L], BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=814]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 56374448,
        "inputRowCount" : 1464517
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "5" : [ 85319, 87528, 85321, 86730, 85798, 84933, 85060, 86089, 87495, 84446, 85184, 86427, 85581, 84539, 84964, 87485, 85536, 85591, 88548, 86143, 85179, 85275, 86360, 87369, 89008, 85404, 84698, 85956, 86671, 84638, 85147, 84400, 84939, 85687, 82954, 87432, 86233, 87709, 86169, 83735, 85338, 85186, 83017, 85182, 85834, 83444, 84767, 83436, 88909, 86560, 85389, 86997, 85551, 86489, 88085, 83343, 86537, 83657, 88082, 84590, 84122, 86542, 85503, 85897, 84945, 85626, 83424, 85011, 86277, 85826, 84226, 88221, 84972, 86065, 85424, 84598, 86830, 84774, 86990, 86069, 87799, 85967, 86931, 86878, 86243, 86360, 87022, 86959, 85682, 87023, 86547, 83254, 83722, 86952, 85060, 87273, 87703, 86125, 85614, 86717, 87743, 85435, 85849, 86046, 85419, 87728, 87046, 86439, 86389, 86196, 84529, 83245, 86519, 86297, 85085, 86669, 86532, 86823, 85447, 84648, 87721, 87149, 84931, 85166, 84395, 85556, 85363, 88570, 86928, 86122, 86635, 85806, 86881, 85394, 85432, 84208, 86542, 83893, 86431, 84301, 87556, 86031, 87852, 84928, 83986, 85556, 84992, 86866, 86421, 84476, 81912, 86198, 87617, 85657, 83732, 87457, 86241, 87485, 87222, 87528, 86335, 86772, 85730, 85672, 86798, 85305, 86860, 83757, 83477, 83783, 84751, 88383, 86421, 84688, 86332, 85976, 84724, 85075, 85849, 87044, 85338, 87385, 86292, 84362, 89166, 85207, 86608, 86964, 82610, 84820, 85616, 84995, 83886, 89870, 85735, 86252, 84400, 87409, 84739, 84054 ],
        "6" : [ 62276, 63450, 62089, 61832, 61779, 62106, 61906, 61784, 63293, 62775, 62006, 62598, 62252, 61791, 61756, 62050, 62993, 61329, 63420, 61630, 61095, 62842, 63945, 62475, 64141, 61184, 62574, 63260, 63592, 62351, 63049, 61215, 63222, 63196, 60932, 64764, 63841, 63470, 63812, 60301, 61841, 62650, 60093, 62800, 63456, 64022, 59968, 60516, 64899, 63046, 62108, 63314, 63780, 62824, 63021, 61121, 62329, 62252, 63790, 62326, 62224, 61432, 62126, 61742, 61433, 62069, 61157, 60516, 62303, 62474, 61631, 63562, 61966, 62551, 62417, 61783, 63542, 59872, 62109, 62168, 64130, 63037, 63222, 64088, 63019, 62630, 63213, 62429, 63075, 64022, 63698, 60268, 61263, 62454, 62155, 63146, 62971, 61861, 62598, 63122, 63754, 62304, 63237, 61760, 62163, 63000, 62824, 61881, 62524, 62528, 61835, 60636, 62280, 62453, 62986, 63946, 63370, 63068, 63524, 63222, 65095, 62652, 62513, 61732, 62330, 62407, 62748, 63481, 63594, 62913, 61942, 60840, 63997, 60987, 61907, 62106, 63393, 62760, 63969, 62134, 64710, 62622, 65176, 62176, 61338, 61978, 62826, 63544, 63623, 61730, 60588, 63209, 63833, 63294, 61113, 63224, 63319, 61927, 62325, 62925, 63099, 64600, 61530, 61010, 62799, 61383, 62526, 61034, 62500, 59971, 61210, 64330, 62616, 62449, 61881, 62083, 62081, 61887, 63212, 61731, 61735, 63865, 63022, 61159, 64194, 62861, 62577, 60717, 61433, 62378, 61835, 61658, 62152, 65089, 60208, 62926, 62417, 63661, 61621, 61720 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 10,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 19 ],
      "Objectives" : {
        "DurationInMs" : 2378,
        "TotalTasksDurationInMs" : 2365,
        "IOBytes" : {
          "Total" : 31316009,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 28269062,
            "SW" : 3046947
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1052925677,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2921339392,
                "rowCount" : 91291856
              },
              "compileTime" : {
                "sizeInBytes" : 2921339392,
                "rowCount" : 91291856
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_partkey#30L, l_suppkey#31L, l_quantity#33] "
          },
          "1" : {
            "sign" : -2045429401,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 16980285216,
                "rowCount" : 91291856
              },
              "compileTime" : {
                "sizeInBytes" : 16980285216,
                "rowCount" : 91291856
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(l_shipdate#44) AND (l_shipdate#44 >= 1996-01-01)) AND (l_shipdate#44 < 1997-01-01)) AND isnotnull(l_partkey#30L)) AND isnotnull(l_suppkey#31L)) "
          },
          "2" : {
            "sign" : 1341754624,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 16980285216,
                "rowCount" : 91291856
              },
              "compileTime" : {
                "sizeInBytes" : 16980285216,
                "rowCount" : 91291856
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [l_orderkey#29L, l_partkey#30L, l_suppkey#31L, l_linenumber#32, l_quantity#33, l_extendedprice#34, l_discount#35, l_tax#36, l_returnflag#37, l_linestatus#38, l_commitdate#39, l_receiptdate#40, l_shipinstruct#41, l_shipmode#42, l_comment#43, l_shipdate#44], `spark_catalog`.`tpch_100`.`lineitem`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [l_partkey#30L, l_suppkey#31L, l_quantity#33]\n+- Filter ((((isnotnull(l_shipdate#44) AND (l_shipdate#44 >= 1996-01-01)) AND (l_shipdate#44 < 1997-01-01)) AND isnotnull(l_partkey#30L)) AND isnotnull(l_suppkey#31L))\n   +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#29L,l_partkey#30L,l_suppkey#31L,l_linenumber#32,l_quantity#33,l_extendedprice#34,l_discount#35,l_tax#36,l_returnflag#37,l_linestatus#38,l_commitdate#39,l_receiptdate#40,l_shipinstruct#41,l_shipmode#42,l_comment#43,l_shipdate#44] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1210743415,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 2921339392,
            "rowCount" : 91291856,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [l_partkey#30L, l_suppkey#31L, l_quantity#33] Input [4]: [l_partkey#30L, l_suppkey#31L, l_quantity#33, l_shipdate#44] "
          },
          "1" : {
            "sign" : 39096115,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 2921339392,
            "rowCount" : 91291856,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [l_partkey#30L, l_suppkey#31L, l_quantity#33, l_shipdate#44] Condition : (isnotnull(l_partkey#30L) AND isnotnull(l_suppkey#31L)) "
          },
          "2" : {
            "sign" : -1038982609,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 2921339392,
            "rowCount" : 91291856,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.lineitem Output [4]: [l_partkey#30L, l_suppkey#31L, l_quantity#33, l_shipdate#44] Batched: true Location: InMemoryFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem/l_shipdate=1996-01-01, ... 365 entries] PartitionFilters: [isnotnull(l_shipdate#44), (l_shipdate#44 >= 1996-01-01), (l_shipdate#44 < 1997-01-01)] PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey)] ReadSchema: struct<l_partkey:bigint,l_suppkey:bigint,l_quantity:decimal(12,2)> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpch_100.lineitem",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [l_partkey#30L, l_suppkey#31L, l_quantity#33]\n+- Filter (isnotnull(l_partkey#30L) AND isnotnull(l_suppkey#31L))\n   +- FileScan parquet spark_catalog.tpch_100.lineitem[l_partkey#30L,l_suppkey#31L,l_quantity#33,l_shipdate#44] Batched: true, DataFilters: [isnotnull(l_partkey#30L), isnotnull(l_suppkey#31L)], Format: Parquet, Location: InMemoryFileIndex(366 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem..., PartitionFilters: [isnotnull(l_shipdate#44), (l_shipdate#44 >= 1996-01-01), (l_shipdate#44 < 1997-01-01)], PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey)], ReadSchema: struct<l_partkey:bigint,l_suppkey:bigint,l_quantity:decimal(12,2)>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2921339392,
        "inputRowCount" : 91291856
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 8 ],
      "Objectives" : {
        "DurationInMs" : 8491,
        "TotalTasksDurationInMs" : 56755,
        "IOBytes" : {
          "Total" : 2368584562,
          "Details" : {
            "IR" : 1019736016,
            "IW" : 0,
            "SR" : 0,
            "SW" : 1348848546
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1067296605,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [bloom_filter_agg(xxhash64(n_nationkey#10L, 42), 1, 38, 0, 0) AS bloomFilter#64] "
          }
        },
        "links" : [ ],
        "rawPlan" : "Aggregate [bloom_filter_agg(xxhash64(n_nationkey#10L, 42), 1, 38, 0, 0) AS bloomFilter#64]\n+- Project [n_nationkey#10L]\n   +- Filter ((isnotnull(n_name#11) AND (n_name#11 = KENYA)) AND isnotnull(n_nationkey#10L))\n      +- Relation spark_catalog.tpch_100.nation[n_nationkey#10L,n_name#11,n_regionkey#12L,n_comment#13] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 785986864,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [n_nationkey#10L] Keys: [] Functions [1]: [partial_bloom_filter_agg(xxhash64(n_nationkey#10L, 42), 1, 38, 0, 0)] Aggregate Attributes [1]: [buf#70] Results [1]: [buf#71] "
          },
          "1" : {
            "sign" : -1994836095,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [n_nationkey#10L] Input [2]: [n_nationkey#10L, n_name#11] "
          },
          "2" : {
            "sign" : 717473407,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [n_nationkey#10L, n_name#11] Condition : ((isnotnull(n_name#11) AND (n_name#11 = KENYA)) AND isnotnull(n_nationkey#10L)) "
          },
          "3" : {
            "sign" : -1287463268,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.nation Output [2]: [n_nationkey#10L, n_name#11] Batched: true Location: InMemoryFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation] PushedFilters: [IsNotNull(n_name), EqualTo(n_name,KENYA), IsNotNull(n_nationkey)] ReadSchema: struct<n_nationkey:bigint,n_name:string> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpch_100.nation",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(n_nationkey#10L, 42), 1, 38, 0, 0)], output=[buf#71])\n+- Project [n_nationkey#10L]\n   +- Filter ((isnotnull(n_name#11) AND (n_name#11 = KENYA)) AND isnotnull(n_nationkey#10L))\n      +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#10L,n_name#11] Batched: true, DataFilters: [isnotnull(n_name#11), (n_name#11 = KENYA), isnotnull(n_nationkey#10L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_name), EqualTo(n_name,KENYA), IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 16,
        "inputRowCount" : 1
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 2 ],
      "Objectives" : {
        "DurationInMs" : 1492,
        "TotalTasksDurationInMs" : 1487,
        "IOBytes" : {
          "Total" : 2780,
          "Details" : {
            "IR" : 2780,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1274245449,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 16,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 16,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_nationkey#10L] "
          },
          "1" : {
            "sign" : 1155064459,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 131,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 131,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(n_name#11) AND (n_name#11 = KENYA)) AND isnotnull(n_nationkey#10L)) "
          },
          "2" : {
            "sign" : -1010592050,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3275,
                "rowCount" : 25
              },
              "compileTime" : {
                "sizeInBytes" : 3275,
                "rowCount" : 25
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [n_nationkey#10L, n_name#11, n_regionkey#12L, n_comment#13], `spark_catalog`.`tpch_100`.`nation`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [n_nationkey#10L]\n+- Filter ((isnotnull(n_name#11) AND (n_name#11 = KENYA)) AND isnotnull(n_nationkey#10L))\n   +- Relation spark_catalog.tpch_100.nation[n_nationkey#10L,n_name#11,n_regionkey#12L,n_comment#13] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1994836095,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [n_nationkey#10L] Input [2]: [n_nationkey#10L, n_name#11] "
          },
          "1" : {
            "sign" : 717473407,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [n_nationkey#10L, n_name#11] Condition : ((isnotnull(n_name#11) AND (n_name#11 = KENYA)) AND isnotnull(n_nationkey#10L)) "
          },
          "2" : {
            "sign" : -1287463268,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.nation Output [2]: [n_nationkey#10L, n_name#11] Batched: true Location: InMemoryFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation] PushedFilters: [IsNotNull(n_name), EqualTo(n_name,KENYA), IsNotNull(n_nationkey)] ReadSchema: struct<n_nationkey:bigint,n_name:string> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpch_100.nation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [n_nationkey#10L]\n+- Filter ((isnotnull(n_name#11) AND (n_name#11 = KENYA)) AND isnotnull(n_nationkey#10L))\n   +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#10L,n_name#11] Batched: true, DataFilters: [isnotnull(n_name#11), (n_name#11 = KENYA), isnotnull(n_nationkey#10L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_name), EqualTo(n_name,KENYA), IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 16,
        "inputRowCount" : 1
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 1 ],
      "Objectives" : {
        "DurationInMs" : 1845,
        "TotalTasksDurationInMs" : 1799,
        "IOBytes" : {
          "Total" : 2861,
          "Details" : {
            "IR" : 2780,
            "IW" : 0,
            "SR" : 0,
            "SW" : 81
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 802760202,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 40,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 108,
                "rowCount" : 1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [bloom_filter_agg(xxhash64(n_nationkey#10L, 42), 1, 38, 0, 0) AS bloomFilter#64], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(n_nationkey#10L, 42), 1, 38, 0, 0)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [bloom_filter_agg(xxhash64(n_nationkey#10L, 42), 1, 38, 0, 0) AS bloomFilter#64], ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(n_nationkey#10L, 42), 1, 38, 0, 0)])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -262991192,
            "className" : "org.apache.spark.sql.execution.aggregate.ObjectHashAggregateExec",
            "sizeInBytes" : 40,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) ObjectHashAggregate Input [1]: [buf#71] Keys: [] Functions [1]: [bloom_filter_agg(xxhash64(n_nationkey#10L, 42), 1, 38, 0, 0)] Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(n_nationkey#10L, 42), 1, 38, 0, 0)#63] Results [1]: [bloom_filter_agg(xxhash64(n_nationkey#10L, 42), 1, 38, 0, 0)#63 AS bloomFilter#64] "
          },
          "1" : {
            "sign" : 1636185385,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 108,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [buf#71] Arguments: 0 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "ObjectHashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(n_nationkey#10L, 42), 1, 38, 0, 0)], output=[bloomFilter#64])\n+- ShuffleQueryStage 0\n   +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=406]\n      +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(n_nationkey#10L, 42), 1, 38, 0, 0)], output=[buf#71])\n         +- *(1) Project [n_nationkey#10L]\n            +- *(1) Filter ((isnotnull(n_name#11) AND (n_name#11 = KENYA)) AND isnotnull(n_nationkey#10L))\n               +- *(1) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#10L,n_name#11] Batched: true, DataFilters: [isnotnull(n_name#11), (n_name#11 = KENYA), isnotnull(n_nationkey#10L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_name), EqualTo(n_name,KENYA), IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 40,
        "inputRowCount" : 1
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "0" : [ 88 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 4 ],
      "Objectives" : {
        "DurationInMs" : 887,
        "TotalTasksDurationInMs" : 863,
        "IOBytes" : {
          "Total" : 81,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 81,
            "SW" : 0
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1779703151,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3480592,
                "rowCount" : 217537
              },
              "compileTime" : {
                "sizeInBytes" : 320000000,
                "rowCount" : 20000000
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_partkey#19L], ShuffleQueryStage 2 "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Project [p_partkey#19L], ShuffleQueryStage 2\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1548931579,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 3480592,
            "rowCount" : 217537,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [p_partkey#19L] Arguments: 2 "
          }
        },
        "links" : [ ],
        "rawPlan" : "ShuffleQueryStage 2\n+- Exchange hashpartitioning(p_partkey#19L, 200), ENSURE_REQUIREMENTS, [plan_id=300]\n   +- *(3) Project [p_partkey#19L]\n      +- *(3) Filter (isnotnull(p_name#20) AND StartsWith(p_name#20, ivory))\n         +- *(3) ColumnarToRow\n            +- FileScan parquet spark_catalog.tpch_100.part[p_partkey#19L,p_name#20,p_brand#27] Batched: true, DataFilters: [isnotnull(p_name#20), StartsWith(p_name#20, ivory)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/part], PartitionFilters: [], PushedFilters: [IsNotNull(p_name), StringStartsWith(p_name,ivory)], ReadSchema: struct<p_partkey:bigint,p_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3480592,
        "inputRowCount" : 217537
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "3" : [ 8652, 8992, 9308, 8459, 8236, 8591, 8572, 8118, 8569, 8509, 8132, 8285, 8464, 8639, 8406, 8500, 8527, 8870, 8163, 8543, 8415, 8644, 8895, 8542, 8293, 8628, 8355, 8224, 8041, 8649, 8519, 8672, 8722, 8565, 8430, 8146, 8198, 8045, 8385, 8703, 8658, 8701, 8607, 8189, 8562, 8107, 8516, 8822, 8239, 9222, 8463, 8463, 8431, 8572, 8480, 7811, 8369, 8553, 8178, 8194, 8119, 8629, 8697, 8482, 8346, 8790, 8495, 8724, 8623, 8681, 8302, 8408, 8236, 8482, 8224, 8407, 8478, 9069, 8228, 8431, 8340, 8344, 8172, 8396, 8012, 8535, 8613, 8698, 8604, 8388, 8292, 8228, 8282, 8427, 8392, 8533, 8286, 8427, 8431, 8453, 8672, 8651, 8607, 8859, 8119, 8891, 8251, 8346, 8602, 8751, 8440, 8751, 8630, 8455, 8623, 8769, 8180, 8648, 8550, 8619, 8568, 8142, 8670, 8271, 8663, 8410, 8324, 8463, 8586, 8277, 8546, 8501, 8541, 8873, 8301, 8442, 8351, 8559, 8439, 8462, 8622, 8393, 8620, 7949, 8620, 8544, 8027, 8359, 8339, 9003, 8559, 8562, 8372, 8736, 8397, 8231, 8472, 8411, 8582, 8417, 8855, 8351, 8514, 8322, 8543, 8347, 8421, 8218, 8193, 8016, 8694, 8469, 8554, 8492, 9239, 8851, 8053, 8106, 8173, 8450, 8401, 8684, 8613, 8190, 8456, 8415, 8141, 8767, 8220, 8600, 8564, 8326, 8643, 8079, 8075, 8631, 8494, 8344, 8244, 8754 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 10 ],
      "Objectives" : {
        "DurationInMs" : 2928,
        "TotalTasksDurationInMs" : 477,
        "IOBytes" : {
          "Total" : 1615225,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1615225,
            "SW" : 0
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1503674060,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 91000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 91000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_suppkey#3L, s_name#4, s_address#5, s_nationkey#6L] "
          },
          "1" : {
            "sign" : 1669837583,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 201000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 201000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(s_nationkey#6L) AND might_contain(scalar-subquery#65 [], xxhash64(s_nationkey#6L, 42))) "
          },
          "2" : {
            "sign" : 1086023816,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 201000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 201000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_suppkey#3L, s_name#4, s_address#5, s_nationkey#6L, s_phone#7, s_acctbal#8, s_comment#9], `spark_catalog`.`tpch_100`.`supplier`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [s_suppkey#3L, s_name#4, s_address#5, s_nationkey#6L]\n+- Filter (isnotnull(s_nationkey#6L) AND might_contain(scalar-subquery#65 [], xxhash64(s_nationkey#6L, 42)))\n   :  +- Aggregate [bloom_filter_agg(xxhash64(n_nationkey#10L, 42), 1, 38, 0, 0) AS bloomFilter#64]\n   :     +- Project [n_nationkey#10L]\n   :        +- Filter ((isnotnull(n_name#11) AND (n_name#11 = KENYA)) AND isnotnull(n_nationkey#10L))\n   :           +- Relation spark_catalog.tpch_100.nation[n_nationkey#10L,n_name#11,n_regionkey#12L,n_comment#13] parquet\n   +- Relation spark_catalog.tpch_100.supplier[s_suppkey#3L,s_name#4,s_address#5,s_nationkey#6L,s_phone#7,s_acctbal#8,s_comment#9] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -2090889935,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 91000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [4]: [s_suppkey#3L, s_name#4, s_address#5, s_nationkey#6L] Condition : (isnotnull(s_nationkey#6L) AND might_contain(Subquery subquery#65, [id=#109], xxhash64(s_nationkey#6L, 42))) "
          },
          "1" : {
            "sign" : 2004666252,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 91000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.supplier Output [4]: [s_suppkey#3L, s_name#4, s_address#5, s_nationkey#6L] Batched: true Location: InMemoryFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier] PushedFilters: [IsNotNull(s_nationkey)] ReadSchema: struct<s_suppkey:bigint,s_name:string,s_address:string,s_nationkey:bigint> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpch_100.supplier",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(s_nationkey#6L) AND might_contain(Subquery subquery#65, [id=#109], xxhash64(s_nationkey#6L, 42)))\n:  +- Subquery subquery#65, [id=#109]\n:     +- AdaptiveSparkPlan isFinalPlan=false\n:        +- ObjectHashAggregate(keys=[], functions=[bloom_filter_agg(xxhash64(n_nationkey#10L, 42), 1, 38, 0, 0)], output=[bloomFilter#64])\n:           +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [plan_id=107]\n:              +- ObjectHashAggregate(keys=[], functions=[partial_bloom_filter_agg(xxhash64(n_nationkey#10L, 42), 1, 38, 0, 0)], output=[buf#71])\n:                 +- Project [n_nationkey#10L]\n:                    +- Filter ((isnotnull(n_name#11) AND (n_name#11 = KENYA)) AND isnotnull(n_nationkey#10L))\n:                       +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#10L,n_name#11] Batched: true, DataFilters: [isnotnull(n_name#11), (n_name#11 = KENYA), isnotnull(n_nationkey#10L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_name), EqualTo(n_name,KENYA), IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n+- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#3L,s_name#4,s_address#5,s_nationkey#6L] Batched: true, DataFilters: [isnotnull(s_nationkey#6L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_name:string,s_address:string,s_nationkey:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 91000000,
        "inputRowCount" : 1000000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 5 ],
      "Objectives" : {
        "DurationInMs" : 2203,
        "TotalTasksDurationInMs" : 19266,
        "IOBytes" : {
          "Total" : 43159854,
          "Details" : {
            "IR" : 41164416,
            "IW" : 0,
            "SR" : 0,
            "SW" : 1995438
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702226723206,
  "SQLEndTimeInMs" : 1702226743119,
  "Objectives" : {
    "DurationInMs" : 19913,
    "IOBytes" : {
      "Total" : 7774064177,
      "Details" : {
        "IR" : 2306245837,
        "IW" : 0,
        "SR" : 2734906889,
        "SW" : 2732911451
      }
    }
  }
}
