{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "12" : {
          "sign" : 1907625642,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 201000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_suppkey#5L, s_name#6, s_address#7, s_nationkey#8L, s_phone#9, s_acctbal#10, s_comment#11], `spark_catalog`.`tpch_100`.`supplier`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "8" : {
          "sign" : -673262362,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 26426862748,
          "rowCount" : 600610517,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [s_nationkey#8L, l_orderkey#12L, l_extendedprice#17, l_discount#18, l_shipdate#27] "
        },
        "19" : {
          "sign" : -93185309,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 256,
          "rowCount" : 4,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (((n_name#46 = MOZAMBIQUE) AND (n_name#50 = UNITED KINGDOM)) OR ((n_name#46 = UNITED KINGDOM) AND (n_name#50 = MOZAMBIQUE))) "
        },
        "23" : {
          "sign" : -454435441,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 72,
          "rowCount" : 2,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [n_nationkey#49L, n_name#50] "
        },
        "4" : {
          "sign" : 1181722168,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 99831060,
          "rowCount" : 1188465,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L, n_name#46, n_nationkey#49L, n_name#50] "
        },
        "15" : {
          "sign" : 1604618698,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 33848279814,
          "rowCount" : 181979999,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [l_orderkey#12L, l_partkey#13L, l_suppkey#14L, l_linenumber#15, l_quantity#16, l_extendedprice#17, l_discount#18, l_tax#19, l_returnflag#20, l_linestatus#21, l_commitdate#22, l_receiptdate#23, l_shipinstruct#24, l_shipmode#25, l_comment#26, l_shipdate#27], `spark_catalog`.`tpch_100`.`lineitem`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "11" : {
          "sign" : -2033274478,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 201000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(s_suppkey#5L) AND isnotnull(s_nationkey#8L)) "
        },
        "9" : {
          "sign" : 397911717,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 36036631020,
          "rowCount" : 600610517,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#5L = l_suppkey#14L) "
        },
        "22" : {
          "sign" : -1836771246,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3275,
          "rowCount" : 25,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [n_nationkey#45L, n_name#46, n_regionkey#47L, n_comment#48], `spark_catalog`.`tpch_100`.`nation`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "26" : {
          "sign" : -340085513,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 360000000,
          "rowCount" : 15000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_custkey#37L, c_nationkey#40L] "
        },
        "13" : {
          "sign" : -1199423066,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 8007119956,
          "rowCount" : 181979999,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [l_orderkey#12L, l_suppkey#14L, l_extendedprice#17, l_discount#18, l_shipdate#27] "
        },
        "24" : {
          "sign" : -1547224371,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 262,
          "rowCount" : 2,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(n_nationkey#49L) AND ((n_name#50 = UNITED KINGDOM) OR (n_name#50 = MOZAMBIQUE))) "
        },
        "16" : {
          "sign" : 447258288,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 3600000000,
          "rowCount" : 150000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [o_orderkey#28L, o_custkey#29L] "
        },
        "5" : {
          "sign" : -509098622,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 118846500,
          "rowCount" : 1188465,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#8L = n_nationkey#45L) "
        },
        "10" : {
          "sign" : 264803515,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 24000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [s_suppkey#5L, s_nationkey#8L] "
        },
        "21" : {
          "sign" : 2062240774,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 262,
          "rowCount" : 2,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(n_nationkey#45L) AND ((n_name#46 = MOZAMBIQUE) OR (n_name#46 = UNITED KINGDOM))) "
        },
        "6" : {
          "sign" : -1924477254,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 26462093768,
          "rowCount" : 601411222,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [s_nationkey#8L, l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L] "
        },
        "1" : {
          "sign" : -572929315,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 1213419948,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [supp_nation#0, cust_nation#1, l_year#2], [supp_nation#0, cust_nation#1, l_year#2, sum(volume#3) AS revenue#4] "
        },
        "17" : {
          "sign" : -1767513999,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 24300000000,
          "rowCount" : 150000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(o_orderkey#28L) AND isnotnull(o_custkey#29L)) "
        },
        "25" : {
          "sign" : -1783951601,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3275,
          "rowCount" : 25,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [n_nationkey#49L, n_name#50, n_regionkey#51L, n_comment#52], `spark_catalog`.`tpch_100`.`nation`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "14" : {
          "sign" : 1751475634,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 33848279814,
          "rowCount" : 181979999,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((((isnotnull(l_shipdate#27) AND (l_shipdate#27 >= 1995-01-01)) AND (l_shipdate#27 <= 1996-12-31)) AND isnotnull(l_suppkey#14L)) AND isnotnull(l_orderkey#12L)) "
        },
        "0" : {
          "sign" : 1168521097,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 1213419948,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [supp_nation#0 ASC NULLS FIRST, cust_nation#1 ASC NULLS FIRST, l_year#2 ASC NULLS FIRST], true "
        },
        "20" : {
          "sign" : -683749095,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 72,
          "rowCount" : 2,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [n_nationkey#45L, n_name#46] "
        },
        "27" : {
          "sign" : -1462128824,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3495000000,
          "rowCount" : 15000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(c_custkey#37L) AND isnotnull(c_nationkey#40L)) "
        },
        "2" : {
          "sign" : -1635084663,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1213419948,
          "rowCount" : 17844411,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [n_name#46 AS supp_nation#0, n_name#50 AS cust_nation#1, year(l_shipdate#27) AS l_year#2, (l_extendedprice#17 * (1 - l_discount#18)) AS volume#3] "
        },
        "18" : {
          "sign" : -671952077,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 24300000000,
          "rowCount" : 150000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [o_orderkey#28L, o_custkey#29L, o_orderstatus#30, o_totalprice#31, o_orderpriority#32, o_clerk#33, o_shippriority#34, o_comment#35, o_orderdate#36], `spark_catalog`.`tpch_100`.`orders`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "7" : {
          "sign" : 1850312715,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 36084673320,
          "rowCount" : 601411222,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (o_orderkey#28L = l_orderkey#12L) "
        },
        "3" : {
          "sign" : -343555445,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 1784441100,
          "rowCount" : 17844411,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((c_custkey#37L = o_custkey#29L) AND (c_nationkey#40L = n_nationkey#49L)) "
        },
        "28" : {
          "sign" : -2125873440,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3495000000,
          "rowCount" : 15000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_custkey#37L, c_name#38, c_address#39, c_nationkey#40L, c_phone#41, c_acctbal#42, c_comment#43, c_mktsegment#44], `spark_catalog`.`tpch_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        }
      },
      "links" : [ {
        "fromId" : 12,
        "fromName" : "LogicalRelation",
        "toId" : 11,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "Filter",
        "toId" : 10,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "LogicalRelation",
        "toId" : 14,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Filter",
        "toId" : 13,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Join",
        "toId" : 8,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "LogicalRelation",
        "toId" : 17,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Filter",
        "toId" : 16,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Join",
        "toId" : 6,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Project",
        "toId" : 5,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "LogicalRelation",
        "toId" : 21,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Filter",
        "toId" : 20,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "Project",
        "toId" : 19,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "LogicalRelation",
        "toId" : 24,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "Filter",
        "toId" : 23,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "Project",
        "toId" : 19,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "Join",
        "toId" : 5,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Join",
        "toId" : 4,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Project",
        "toId" : 3,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "LogicalRelation",
        "toId" : 27,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "Filter",
        "toId" : 26,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "Project",
        "toId" : 3,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Join",
        "toId" : 2,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Project",
        "toId" : 1,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "Aggregate",
        "toId" : 0,
        "toName" : "Sort",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "Sort [supp_nation#0 ASC NULLS FIRST, cust_nation#1 ASC NULLS FIRST, l_year#2 ASC NULLS FIRST], true\n+- Aggregate [supp_nation#0, cust_nation#1, l_year#2], [supp_nation#0, cust_nation#1, l_year#2, sum(volume#3) AS revenue#4]\n   +- Project [n_name#46 AS supp_nation#0, n_name#50 AS cust_nation#1, year(l_shipdate#27) AS l_year#2, (l_extendedprice#17 * (1 - l_discount#18)) AS volume#3]\n      +- Join Inner, ((c_custkey#37L = o_custkey#29L) AND (c_nationkey#40L = n_nationkey#49L))\n         :- Project [l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L, n_name#46, n_nationkey#49L, n_name#50]\n         :  +- Join Inner, (s_nationkey#8L = n_nationkey#45L)\n         :     :- Project [s_nationkey#8L, l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L]\n         :     :  +- Join Inner, (o_orderkey#28L = l_orderkey#12L)\n         :     :     :- Project [s_nationkey#8L, l_orderkey#12L, l_extendedprice#17, l_discount#18, l_shipdate#27]\n         :     :     :  +- Join Inner, (s_suppkey#5L = l_suppkey#14L)\n         :     :     :     :- Project [s_suppkey#5L, s_nationkey#8L]\n         :     :     :     :  +- Filter (isnotnull(s_suppkey#5L) AND isnotnull(s_nationkey#8L))\n         :     :     :     :     +- Relation spark_catalog.tpch_100.supplier[s_suppkey#5L,s_name#6,s_address#7,s_nationkey#8L,s_phone#9,s_acctbal#10,s_comment#11] parquet\n         :     :     :     +- Project [l_orderkey#12L, l_suppkey#14L, l_extendedprice#17, l_discount#18, l_shipdate#27]\n         :     :     :        +- Filter ((((isnotnull(l_shipdate#27) AND (l_shipdate#27 >= 1995-01-01)) AND (l_shipdate#27 <= 1996-12-31)) AND isnotnull(l_suppkey#14L)) AND isnotnull(l_orderkey#12L))\n         :     :     :           +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#12L,l_partkey#13L,l_suppkey#14L,l_linenumber#15,l_quantity#16,l_extendedprice#17,l_discount#18,l_tax#19,l_returnflag#20,l_linestatus#21,l_commitdate#22,l_receiptdate#23,l_shipinstruct#24,l_shipmode#25,l_comment#26,l_shipdate#27] parquet\n         :     :     +- Project [o_orderkey#28L, o_custkey#29L]\n         :     :        +- Filter (isnotnull(o_orderkey#28L) AND isnotnull(o_custkey#29L))\n         :     :           +- Relation spark_catalog.tpch_100.orders[o_orderkey#28L,o_custkey#29L,o_orderstatus#30,o_totalprice#31,o_orderpriority#32,o_clerk#33,o_shippriority#34,o_comment#35,o_orderdate#36] parquet\n         :     +- Join Inner, (((n_name#46 = MOZAMBIQUE) AND (n_name#50 = UNITED KINGDOM)) OR ((n_name#46 = UNITED KINGDOM) AND (n_name#50 = MOZAMBIQUE)))\n         :        :- Project [n_nationkey#45L, n_name#46]\n         :        :  +- Filter (isnotnull(n_nationkey#45L) AND ((n_name#46 = MOZAMBIQUE) OR (n_name#46 = UNITED KINGDOM)))\n         :        :     +- Relation spark_catalog.tpch_100.nation[n_nationkey#45L,n_name#46,n_regionkey#47L,n_comment#48] parquet\n         :        +- Project [n_nationkey#49L, n_name#50]\n         :           +- Filter (isnotnull(n_nationkey#49L) AND ((n_name#50 = UNITED KINGDOM) OR (n_name#50 = MOZAMBIQUE)))\n         :              +- Relation spark_catalog.tpch_100.nation[n_nationkey#49L,n_name#50,n_regionkey#51L,n_comment#52] parquet\n         +- Project [c_custkey#37L, c_nationkey#40L]\n            +- Filter (isnotnull(c_custkey#37L) AND isnotnull(c_nationkey#40L))\n               +- Relation spark_catalog.tpch_100.customer[c_custkey#37L,c_name#38,c_address#39,c_nationkey#40L,c_phone#41,c_acctbal#42,c_comment#43,c_mktsegment#44] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 61844286364,
      "inputRowCount" : 347980049
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "8" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -119775529,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 352,
            "rowCount" : 4,
            "isRuntime" : true,
            "predicate" : " (unknown) Sort Arguments: [supp_nation#64 ASC NULLS FIRST, cust_nation#65 ASC NULLS FIRST, l_year#66 ASC NULLS FIRST], true "
          },
          "1" : {
            "sign" : 1428785661,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 352,
            "rowCount" : 4,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [supp_nation#64, cust_nation#65, l_year#66], [supp_nation#64, cust_nation#65, l_year#66, sum(volume#67) AS revenue#68], ShuffleQueryStage 9 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "LogicalQueryStage",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [supp_nation#64 ASC NULLS FIRST, cust_nation#65 ASC NULLS FIRST, l_year#66 ASC NULLS FIRST], true\n+- LogicalQueryStage Aggregate [supp_nation#64, cust_nation#65, l_year#66], [supp_nation#64, cust_nation#65, l_year#66, sum(volume#67) AS revenue#68], ShuffleQueryStage 9\n"
      },
      "IM" : {
        "inputSizeInBytes" : 352,
        "inputRowCount" : 4
      },
      "PD" : {
        "7" : [ 129, 129, 129, 129 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226604222,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 166,
        "IOBytes" : {
          "Total" : 512,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 512,
            "SW" : 0
          }
        }
      }
    },
    "4" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : -1177256444,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 26426862748,
            "rowCount" : 600610517,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_nationkey#8L, l_orderkey#12L, l_extendedprice#17, l_discount#18, l_shipdate#27], ShuffleQueryStage 5 "
          },
          "4" : {
            "sign" : -666542216,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 15135385028400000000,
            "rowCount" : 180183155100000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L, n_name#46, n_nationkey#69L, n_name#70] "
          },
          "11" : {
            "sign" : 608990757,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 360000000,
            "rowCount" : 15000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_custkey#37L, c_nationkey#40L], ShuffleQueryStage 4 "
          },
          "9" : {
            "sign" : 925317735,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3600000000,
            "rowCount" : 150000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [o_orderkey#28L, o_custkey#29L], ShuffleQueryStage 2 "
          },
          "5" : {
            "sign" : -570583592,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 18018315510000000000,
            "rowCount" : 180183155100000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#8L = n_nationkey#45L) "
          },
          "10" : {
            "sign" : 1810527732,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048640,
            "rowCount" : 2,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Join Inner, (((n_name#46 = MOZAMBIQUE) AND (n_name#70 = UNITED KINGDOM)) OR ((n_name#46 = UNITED KINGDOM) AND (n_name#70 = MOZAMBIQUE))), BroadcastQueryStage 6 "
          },
          "6" : {
            "sign" : 1032189573,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3964029412200000000,
            "rowCount" : 90091577550000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_nationkey#8L, l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L] "
          },
          "1" : {
            "sign" : -1897181167,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 183786818202000000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [supp_nation#64, cust_nation#65, l_year#66], [supp_nation#64, cust_nation#65, l_year#66, sum(volume#67) AS revenue#68] "
          },
          "0" : {
            "sign" : -800560809,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 183786818202000000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [supp_nation#64 ASC NULLS FIRST, cust_nation#65 ASC NULLS FIRST, l_year#66 ASC NULLS FIRST], true "
          },
          "2" : {
            "sign" : -1223316081,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 183786818202000000000000000,
            "rowCount" : 2702747326500000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_name#46 AS supp_nation#64, n_name#70 AS cust_nation#65, year(l_shipdate#27) AS l_year#66, (l_extendedprice#17 * (1 - l_discount#18)) AS volume#67] "
          },
          "7" : {
            "sign" : 1407855490,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 5405494653000000000,
            "rowCount" : 90091577550000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (o_orderkey#28L = l_orderkey#12L) "
          },
          "3" : {
            "sign" : -830759945,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 270274732650000000000000000,
            "rowCount" : 2702747326500000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_custkey#37L = o_custkey#29L) AND (c_nationkey#40L = n_nationkey#69L)) "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [supp_nation#64 ASC NULLS FIRST, cust_nation#65 ASC NULLS FIRST, l_year#66 ASC NULLS FIRST], true\n+- Aggregate [supp_nation#64, cust_nation#65, l_year#66], [supp_nation#64, cust_nation#65, l_year#66, sum(volume#67) AS revenue#68]\n   +- Project [n_name#46 AS supp_nation#64, n_name#70 AS cust_nation#65, year(l_shipdate#27) AS l_year#66, (l_extendedprice#17 * (1 - l_discount#18)) AS volume#67]\n      +- Join Inner, ((c_custkey#37L = o_custkey#29L) AND (c_nationkey#40L = n_nationkey#69L))\n         :- Project [l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L, n_name#46, n_nationkey#69L, n_name#70]\n         :  +- Join Inner, (s_nationkey#8L = n_nationkey#45L)\n         :     :- Project [s_nationkey#8L, l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L]\n         :     :  +- Join Inner, (o_orderkey#28L = l_orderkey#12L)\n         :     :     :- LogicalQueryStage Project [s_nationkey#8L, l_orderkey#12L, l_extendedprice#17, l_discount#18, l_shipdate#27], ShuffleQueryStage 5\n         :     :     +- LogicalQueryStage Project [o_orderkey#28L, o_custkey#29L], ShuffleQueryStage 2\n         :     +- LogicalQueryStage Join Inner, (((n_name#46 = MOZAMBIQUE) AND (n_name#70 = UNITED KINGDOM)) OR ((n_name#46 = UNITED KINGDOM) AND (n_name#70 = MOZAMBIQUE))), BroadcastQueryStage 6\n         +- LogicalQueryStage Project [c_custkey#37L, c_nationkey#40L], ShuffleQueryStage 4\n"
      },
      "IM" : {
        "inputSizeInBytes" : 30387911388,
        "inputRowCount" : 765610519
      },
      "PD" : {
        "2" : [ 10756415, 10781702, 10773273, 10781702, 10790131, 10773273, 10739557, 10714270, 10815418, 10764844, 10815418, 10806989, 10756415, 10697412, 10781702, 10806989, 10714270, 10790131, 10806989, 10756415, 10774041, 10823847, 10764844, 10773273, 10764844, 10798560, 10756415, 10849134, 10781702, 10815418, 10806989, 10798560, 10781702, 10739557, 10773273, 10739557, 10756415, 10781702, 10781702, 10790131, 10756415, 10840705, 10739557, 10731128, 10756415, 10832276, 10849134, 10781702, 10731128, 10773273, 10764844, 10798560, 10781702, 10798560, 10739557, 10773273, 10790131, 10764844, 10722699, 10773273, 10756415, 10790131, 10823847, 10739557, 10773273, 10764844, 10840705, 10764844, 10798560, 10722699, 10747986, 10790131, 10823847, 10756415, 10764844, 10798560, 10790131, 10798560, 10806989, 10773273, 10781702, 10747986, 10773273, 10781702, 10773273, 10823847, 10790131, 10705841, 10849134, 10756415, 10781702, 10815418, 10739557, 10773273, 10840705, 10781702, 10764844, 10849134, 10663696, 10739557, 10832276, 10722699, 10739557, 10790131, 10756415, 10790131, 10790131, 10739557, 10739557, 10781702, 10815418, 10722699, 10773273, 10756415, 10764844, 10815418, 10781702, 10823847, 10714270, 10773273, 10840705, 10731128, 10747986, 10722699, 10798560, 10722699, 10815418, 10806989, 10747986, 10731128, 10790131, 10705841, 10764844, 10798560, 10756415, 10764844, 10764844, 10849134, 10781702, 10722699, 10714270, 10739557, 10764844, 10790131, 10815418, 10790131, 10781702, 10714270, 10773273, 10815418, 10731128, 10798560, 10790131, 10773273, 10739557, 10815418, 10832276, 10764844, 10747986, 10764844, 10722699, 10815418, 10823847, 10774041, 10731128, 10697412, 10806989, 10773273, 10806989, 10857563, 10823847, 10806989, 10857563, 10790131, 10857563, 10747986, 10798560, 10747986, 10764844, 10832276, 10773273, 10739557, 10773273, 10747986, 10798560, 10781702, 10832276, 10764844, 10806989, 10840705, 10756415, 10739557, 10756415, 10781702, 10747986, 10739557, 10781702, 10790131, 10781702, 10773273 ],
        "3" : [ 789868, 796834, 796834, 782207, 789173, 774546, 774546, 789173, 781512, 781512, 796834, 781512, 796834, 789173, 796834, 789173, 782207, 789173, 774546, 781512, 796834, 804495, 782207, 796834, 789173, 789173, 774546, 789173, 773851, 796834, 796834, 789173, 789173, 781512, 797529, 789173, 781512, 797529, 796834, 773851, 781512, 773851, 781512, 789173, 773851, 789173, 789173, 781512, 773851, 781512, 789173, 781512, 796834, 781512, 789173, 781512, 804495, 789173, 781512, 796834, 773851, 796834, 781512, 796834, 781512, 789173, 804495, 781512, 773851, 789173, 789173, 781512, 804495, 781512, 804495, 789173, 781512, 781512, 766190, 789173, 789173, 797529, 796834, 789173, 773851, 796834, 789173, 781512, 781512, 774546, 796834, 766190, 781512, 789173, 773851, 796834, 773851, 781512, 789173, 789173, 773851, 774546, 789173, 789173, 796834, 789173, 804495, 789173, 796834, 789173, 789173, 773851, 796834, 789173, 789173, 781512, 789173, 781512, 773851, 789173, 773851, 781512, 789173, 796834, 796834, 789173, 789173, 781512, 804495, 782207, 789173, 773851, 789173, 782207, 781512, 773851, 789173, 781512, 789173, 781512, 796834, 789173, 789868, 781512, 766190, 781512, 789173, 789173, 804495, 781512, 773851, 781512, 796834, 766190, 766190, 773851, 796834, 796834, 781512, 781512, 789173, 796834, 797529, 804495, 789173, 789173, 789173, 804495, 789173, 796834, 789173, 781512, 789173, 781512, 789173, 796834, 789173, 789173, 796834, 796834, 789173, 781512, 781512, 782207, 789173, 796834, 782207, 789173, 782207, 781512, 789173, 781512, 796834, 804495, 796834, 766190, 796834, 789173, 773851, 789173 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226569020,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 35368,
        "IOBytes" : {
          "Total" : 15127797399,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 10638771146,
            "SW" : 4489026253
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : -1177256444,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8750457120,
            "rowCount" : 182301190,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_nationkey#8L, l_orderkey#12L, l_extendedprice#17, l_discount#18, l_shipdate#27], ShuffleQueryStage 5 "
          },
          "4" : {
            "sign" : -666542216,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4593989988000000000,
            "rowCount" : 54690357000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L, n_name#46, n_nationkey#69L, n_name#70] "
          },
          "11" : {
            "sign" : 608990757,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 360000000,
            "rowCount" : 15000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_custkey#37L, c_nationkey#40L], ShuffleQueryStage 4 "
          },
          "9" : {
            "sign" : 925317735,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3600000000,
            "rowCount" : 150000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [o_orderkey#28L, o_custkey#29L], ShuffleQueryStage 2 "
          },
          "5" : {
            "sign" : -570583592,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 5469035700000000000,
            "rowCount" : 54690357000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#8L = n_nationkey#45L) "
          },
          "10" : {
            "sign" : 1810527732,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048640,
            "rowCount" : 2,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Join Inner, (((n_name#46 = MOZAMBIQUE) AND (n_name#70 = UNITED KINGDOM)) OR ((n_name#46 = UNITED KINGDOM) AND (n_name#70 = MOZAMBIQUE))), BroadcastQueryStage 6 "
          },
          "6" : {
            "sign" : 1032189573,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1203187854000000000,
            "rowCount" : 27345178500000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_nationkey#8L, l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L] "
          },
          "1" : {
            "sign" : -1897181167,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 55784164140000000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [supp_nation#64, cust_nation#65, l_year#66], [supp_nation#64, cust_nation#65, l_year#66, sum(volume#67) AS revenue#68] "
          },
          "0" : {
            "sign" : -800560809,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 55784164140000000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [supp_nation#64 ASC NULLS FIRST, cust_nation#65 ASC NULLS FIRST, l_year#66 ASC NULLS FIRST], true "
          },
          "2" : {
            "sign" : -1223316081,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 55784164140000000000000000,
            "rowCount" : 820355355000000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_name#46 AS supp_nation#64, n_name#70 AS cust_nation#65, year(l_shipdate#27) AS l_year#66, (l_extendedprice#17 * (1 - l_discount#18)) AS volume#67] "
          },
          "7" : {
            "sign" : 1407855490,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1640710710000000000,
            "rowCount" : 27345178500000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (o_orderkey#28L = l_orderkey#12L) "
          },
          "3" : {
            "sign" : -830759945,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 82035535500000000000000000,
            "rowCount" : 820355355000000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_custkey#37L = o_custkey#29L) AND (c_nationkey#40L = n_nationkey#69L)) "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [supp_nation#64 ASC NULLS FIRST, cust_nation#65 ASC NULLS FIRST, l_year#66 ASC NULLS FIRST], true\n+- Aggregate [supp_nation#64, cust_nation#65, l_year#66], [supp_nation#64, cust_nation#65, l_year#66, sum(volume#67) AS revenue#68]\n   +- Project [n_name#46 AS supp_nation#64, n_name#70 AS cust_nation#65, year(l_shipdate#27) AS l_year#66, (l_extendedprice#17 * (1 - l_discount#18)) AS volume#67]\n      +- Join Inner, ((c_custkey#37L = o_custkey#29L) AND (c_nationkey#40L = n_nationkey#69L))\n         :- Project [l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L, n_name#46, n_nationkey#69L, n_name#70]\n         :  +- Join Inner, (s_nationkey#8L = n_nationkey#45L)\n         :     :- Project [s_nationkey#8L, l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L]\n         :     :  +- Join Inner, (o_orderkey#28L = l_orderkey#12L)\n         :     :     :- LogicalQueryStage Project [s_nationkey#8L, l_orderkey#12L, l_extendedprice#17, l_discount#18, l_shipdate#27], ShuffleQueryStage 5\n         :     :     +- LogicalQueryStage Project [o_orderkey#28L, o_custkey#29L], ShuffleQueryStage 2\n         :     +- LogicalQueryStage Join Inner, (((n_name#46 = MOZAMBIQUE) AND (n_name#70 = UNITED KINGDOM)) OR ((n_name#46 = UNITED KINGDOM) AND (n_name#70 = MOZAMBIQUE))), BroadcastQueryStage 6\n         +- LogicalQueryStage Project [c_custkey#37L, c_nationkey#40L], ShuffleQueryStage 4\n"
      },
      "IM" : {
        "inputSizeInBytes" : 12711505760,
        "inputRowCount" : 347301192
      },
      "PD" : {
        "2" : [ 10756415, 10781702, 10773273, 10781702, 10790131, 10773273, 10739557, 10714270, 10815418, 10764844, 10815418, 10806989, 10756415, 10697412, 10781702, 10806989, 10714270, 10790131, 10806989, 10756415, 10774041, 10823847, 10764844, 10773273, 10764844, 10798560, 10756415, 10849134, 10781702, 10815418, 10806989, 10798560, 10781702, 10739557, 10773273, 10739557, 10756415, 10781702, 10781702, 10790131, 10756415, 10840705, 10739557, 10731128, 10756415, 10832276, 10849134, 10781702, 10731128, 10773273, 10764844, 10798560, 10781702, 10798560, 10739557, 10773273, 10790131, 10764844, 10722699, 10773273, 10756415, 10790131, 10823847, 10739557, 10773273, 10764844, 10840705, 10764844, 10798560, 10722699, 10747986, 10790131, 10823847, 10756415, 10764844, 10798560, 10790131, 10798560, 10806989, 10773273, 10781702, 10747986, 10773273, 10781702, 10773273, 10823847, 10790131, 10705841, 10849134, 10756415, 10781702, 10815418, 10739557, 10773273, 10840705, 10781702, 10764844, 10849134, 10663696, 10739557, 10832276, 10722699, 10739557, 10790131, 10756415, 10790131, 10790131, 10739557, 10739557, 10781702, 10815418, 10722699, 10773273, 10756415, 10764844, 10815418, 10781702, 10823847, 10714270, 10773273, 10840705, 10731128, 10747986, 10722699, 10798560, 10722699, 10815418, 10806989, 10747986, 10731128, 10790131, 10705841, 10764844, 10798560, 10756415, 10764844, 10764844, 10849134, 10781702, 10722699, 10714270, 10739557, 10764844, 10790131, 10815418, 10790131, 10781702, 10714270, 10773273, 10815418, 10731128, 10798560, 10790131, 10773273, 10739557, 10815418, 10832276, 10764844, 10747986, 10764844, 10722699, 10815418, 10823847, 10774041, 10731128, 10697412, 10806989, 10773273, 10806989, 10857563, 10823847, 10806989, 10857563, 10790131, 10857563, 10747986, 10798560, 10747986, 10764844, 10832276, 10773273, 10739557, 10773273, 10747986, 10798560, 10781702, 10832276, 10764844, 10806989, 10840705, 10756415, 10739557, 10756415, 10781702, 10747986, 10739557, 10781702, 10790131, 10781702, 10773273 ],
        "4" : [ 21374305, 21342299, 21342299, 21406311, 21342299, 21342299, 21374305, 21342299, 21406311, 21374305, 21374305, 21342299, 21374305, 21342299, 21406311, 21406311, 21342299, 21342299, 21342299, 21342299, 21406311, 21342299, 21374305, 21342299, 21342299, 21374305, 21342299, 21374305, 21374305, 21374305, 21374305, 21374305, 21342299, 21374305, 21374305, 21342299, 21374305, 21342299, 21374305, 21374305, 21374305, 21342299, 21374305, 21374305, 21342299, 21406311, 21342299, 21374305, 21438317, 21374305, 21342299, 21406311, 21406311, 21374305, 21342299, 21342299, 21374305, 21438317, 21374305, 21342299, 21374305, 21374305, 21342299, 21374305, 21374305, 21374305, 21406311, 21374305, 21406311, 21374305, 21342299, 21342299, 21342299, 21374305, 21406311, 21438317, 21406311, 21406311, 21342299, 21342299, 21342299, 21342299, 21406311, 21342299, 21342299, 21374305, 21374305, 21342299, 21342299, 21406311, 21342299, 21406311, 21342299, 21342299, 21406311, 21342299, 21342299, 21406311, 21342299, 21342299, 21438317, 21374305, 21374305, 21406311, 21406311, 21406311, 21438317, 21374305, 21406311, 21342299, 21374305, 21342299, 21406311, 21342299, 21342299, 21374305, 21342299, 21374305, 21374305, 21342299, 21342299, 21342299, 21374305, 21374305, 21342299, 21374305, 21374305, 21374305, 21374305, 21374305, 21374305, 21342299, 21374305, 21374305, 21342299, 21374305, 21438317, 21374305, 21342299, 21342299, 21342299, 21374305, 21374305, 21374305, 21406311, 21374305, 21374305, 21342299, 21374305, 21374305, 21342299, 21342299, 21342299, 21438317, 21342299, 21374305, 21470323, 21374305, 21342299, 21342299, 21342299, 21342299, 21374305, 21342299, 21374305, 21342299, 21342299, 21342299, 21374305, 21374305, 21438317, 21406311, 21342299, 21374305, 21406311, 21374305, 21374305, 21342299, 21374305, 21438317, 21342299, 21406311, 21374305, 21438317, 21342299, 21438317, 21406311, 21438317, 21374305, 21342299, 21374305, 21342299, 21374305, 21342299, 21342299, 21342299, 21374305, 21374305, 21342299, 21342299 ],
        "3" : [ 789868, 796834, 796834, 782207, 789173, 774546, 774546, 789173, 781512, 781512, 796834, 781512, 796834, 789173, 796834, 789173, 782207, 789173, 774546, 781512, 796834, 804495, 782207, 796834, 789173, 789173, 774546, 789173, 773851, 796834, 796834, 789173, 789173, 781512, 797529, 789173, 781512, 797529, 796834, 773851, 781512, 773851, 781512, 789173, 773851, 789173, 789173, 781512, 773851, 781512, 789173, 781512, 796834, 781512, 789173, 781512, 804495, 789173, 781512, 796834, 773851, 796834, 781512, 796834, 781512, 789173, 804495, 781512, 773851, 789173, 789173, 781512, 804495, 781512, 804495, 789173, 781512, 781512, 766190, 789173, 789173, 797529, 796834, 789173, 773851, 796834, 789173, 781512, 781512, 774546, 796834, 766190, 781512, 789173, 773851, 796834, 773851, 781512, 789173, 789173, 773851, 774546, 789173, 789173, 796834, 789173, 804495, 789173, 796834, 789173, 789173, 773851, 796834, 789173, 789173, 781512, 789173, 781512, 773851, 789173, 773851, 781512, 789173, 796834, 796834, 789173, 789173, 781512, 804495, 782207, 789173, 773851, 789173, 782207, 781512, 773851, 789173, 781512, 789173, 781512, 796834, 789173, 789868, 781512, 766190, 781512, 789173, 789173, 804495, 781512, 773851, 781512, 796834, 766190, 766190, 773851, 796834, 796834, 781512, 781512, 789173, 796834, 797529, 804495, 789173, 789173, 789173, 804495, 789173, 796834, 789173, 781512, 789173, 781512, 789173, 796834, 789173, 789173, 796834, 796834, 789173, 781512, 781512, 782207, 789173, 796834, 782207, 789173, 782207, 781512, 789173, 781512, 796834, 804495, 796834, 766190, 796834, 789173, 773851, 789173 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226584296,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 20092,
        "IOBytes" : {
          "Total" : 6998671569,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 6677600918,
            "SW" : 321070651
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : -1286033629,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1402326816,
            "rowCount" : 14607571,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L, n_name#46, n_nationkey#69L, n_name#70], ShuffleQueryStage 7 "
          },
          "5" : {
            "sign" : 608990757,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 360000000,
            "rowCount" : 15000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_custkey#37L, c_nationkey#40L], ShuffleQueryStage 4 "
          },
          "1" : {
            "sign" : -430766564,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 14899722420000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [supp_nation#64, cust_nation#65, l_year#66], [supp_nation#64, cust_nation#65, l_year#66, sum(volume#67) AS revenue#68] "
          },
          "0" : {
            "sign" : 26998270,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 14899722420000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [supp_nation#64 ASC NULLS FIRST, cust_nation#65 ASC NULLS FIRST, l_year#66 ASC NULLS FIRST], true "
          },
          "2" : {
            "sign" : 1688328134,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 14899722420000000,
            "rowCount" : 219113565000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_name#46 AS supp_nation#64, n_name#70 AS cust_nation#65, year(l_shipdate#27) AS l_year#66, (l_extendedprice#17 * (1 - l_discount#18)) AS volume#67] "
          },
          "3" : {
            "sign" : 774115446,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 21911356500000000,
            "rowCount" : 219113565000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_custkey#37L = o_custkey#29L) AND (c_nationkey#40L = n_nationkey#69L)) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [supp_nation#64 ASC NULLS FIRST, cust_nation#65 ASC NULLS FIRST, l_year#66 ASC NULLS FIRST], true\n+- Aggregate [supp_nation#64, cust_nation#65, l_year#66], [supp_nation#64, cust_nation#65, l_year#66, sum(volume#67) AS revenue#68]\n   +- Project [n_name#46 AS supp_nation#64, n_name#70 AS cust_nation#65, year(l_shipdate#27) AS l_year#66, (l_extendedprice#17 * (1 - l_discount#18)) AS volume#67]\n      +- Join Inner, ((c_custkey#37L = o_custkey#29L) AND (c_nationkey#40L = n_nationkey#69L))\n         :- LogicalQueryStage Project [l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L, n_name#46, n_nationkey#69L, n_name#70], ShuffleQueryStage 7\n         +- LogicalQueryStage Project [c_custkey#37L, c_nationkey#40L], ShuffleQueryStage 4\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1762326816,
        "inputRowCount" : 29607571
      },
      "PD" : {
        "5" : [ 1675880, 1691946, 1676943, 1672395, 1689813, 1678459, 1683611, 1696494, 1680415, 1678006, 1695129, 1681793, 1685127, 1688612, 1666029, 1680277, 1673307, 1691493, 1683007, 1675729, 1680126, 1696494, 1676490, 1674974, 1676641, 1690430, 1688159, 1684976, 1671791, 1688612, 1691795, 1691493, 1683460, 1684674, 1686341, 1679339, 1690128, 1704376, 1677094, 1667847, 1676641, 1685127, 1674062, 1688008, 1701344, 1673911, 1686492, 1688310, 1671030, 1684976, 1686643, 1675578, 1691040, 1680126, 1685127, 1678006, 1688159, 1696494, 1687247, 1675729, 1683309, 1699828, 1684976, 1688612, 1685580, 1684064, 1684674, 1683309, 1676943, 1686492, 1676031, 1683762, 1701344, 1673911, 1694827, 1694978, 1676641, 1671181, 1669514, 1677396, 1685278, 1683611, 1673458, 1675427, 1678610, 1680126, 1677245, 1675125, 1688159, 1680277, 1680126, 1674213, 1672999, 1685127, 1672244, 1689826, 1697859, 1664362, 1694072, 1673307, 1665727, 1677396, 1670275, 1678761, 1674062, 1668759, 1675729, 1690279, 1696041, 1667545, 1685278, 1667847, 1677081, 1675578, 1680126, 1686492, 1685429, 1675276, 1656329, 1675125, 1688310, 1675125, 1673609, 1694827, 1688763, 1686643, 1675276, 1678157, 1666180, 1685278, 1696645, 1681944, 1673458, 1682095, 1691644, 1673760, 1691342, 1673911, 1683477, 1686945, 1694676, 1669363, 1659801, 1684825, 1691644, 1688008, 1666941, 1686492, 1682095, 1667696, 1670426, 1696511, 1672093, 1670879, 1683158, 1707559, 1695129, 1675578, 1661028, 1675125, 1679824, 1688159, 1680126, 1679365, 1675578, 1669514, 1678761, 1681944, 1680428, 1683762, 1693009, 1675729, 1689977, 1676792, 1664211, 1680428, 1681793, 1683007, 1683460, 1680730, 1680126, 1688159, 1686945, 1677396, 1696343, 1677245, 1673458, 1688159, 1678610, 1703011, 1677396, 1674062, 1674213, 1688159, 1671942, 1698312, 1670564, 1685127, 1674364, 1679975 ],
        "3" : [ 789868, 796834, 796834, 782207, 789173, 774546, 774546, 789173, 781512, 781512, 796834, 781512, 796834, 789173, 796834, 789173, 782207, 789173, 774546, 781512, 796834, 804495, 782207, 796834, 789173, 789173, 774546, 789173, 773851, 796834, 796834, 789173, 789173, 781512, 797529, 789173, 781512, 797529, 796834, 773851, 781512, 773851, 781512, 789173, 773851, 789173, 789173, 781512, 773851, 781512, 789173, 781512, 796834, 781512, 789173, 781512, 804495, 789173, 781512, 796834, 773851, 796834, 781512, 796834, 781512, 789173, 804495, 781512, 773851, 789173, 789173, 781512, 804495, 781512, 804495, 789173, 781512, 781512, 766190, 789173, 789173, 797529, 796834, 789173, 773851, 796834, 789173, 781512, 781512, 774546, 796834, 766190, 781512, 789173, 773851, 796834, 773851, 781512, 789173, 789173, 773851, 774546, 789173, 789173, 796834, 789173, 804495, 789173, 796834, 789173, 789173, 773851, 796834, 789173, 789173, 781512, 789173, 781512, 773851, 789173, 773851, 781512, 789173, 796834, 796834, 789173, 789173, 781512, 804495, 782207, 789173, 773851, 789173, 782207, 781512, 773851, 789173, 781512, 789173, 781512, 796834, 789173, 789868, 781512, 766190, 781512, 789173, 789173, 804495, 781512, 773851, 781512, 796834, 766190, 766190, 773851, 796834, 796834, 781512, 781512, 789173, 796834, 797529, 804495, 789173, 789173, 789173, 804495, 789173, 796834, 789173, 781512, 789173, 781512, 789173, 796834, 789173, 789173, 796834, 796834, 789173, 781512, 781512, 782207, 789173, 796834, 782207, 789173, 782207, 781512, 789173, 781512, 796834, 804495, 796834, 766190, 796834, 789173, 773851, 789173 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226598501,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 5887,
        "IOBytes" : {
          "Total" : 469219122,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 469214402,
            "SW" : 4720
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 925317735,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3600000000,
            "rowCount" : 150000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [o_orderkey#28L, o_custkey#29L], ShuffleQueryStage 2 "
          },
          "8" : {
            "sign" : -1237852209,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 8021252360000000,
            "rowCount" : 182301190000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_nationkey#8L, l_orderkey#12L, l_extendedprice#17, l_discount#18, l_shipdate#27] "
          },
          "4" : {
            "sign" : 842334114,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9187979976000000000000000,
            "rowCount" : 109380714000000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L, n_name#46, n_nationkey#69L, n_name#70] "
          },
          "15" : {
            "sign" : 2062240774,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 262,
            "rowCount" : 2,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(n_nationkey#45L) AND ((n_name#46 = MOZAMBIQUE) OR (n_name#46 = UNITED KINGDOM))) "
          },
          "11" : {
            "sign" : 156944457,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8750457120,
            "rowCount" : 182301190,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_orderkey#12L, l_suppkey#14L, l_extendedprice#17, l_discount#18, l_shipdate#27], ShuffleQueryStage 1 "
          },
          "9" : {
            "sign" : -1676692498,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 10938071400000000,
            "rowCount" : 182301190000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#5L = l_suppkey#14L) "
          },
          "13" : {
            "sign" : 1922319159,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 256,
            "rowCount" : 4,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((n_name#46 = MOZAMBIQUE) AND (n_name#70 = UNITED KINGDOM)) OR ((n_name#46 = UNITED KINGDOM) AND (n_name#70 = MOZAMBIQUE))) "
          },
          "16" : {
            "sign" : -1836771246,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3275,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [n_nationkey#45L, n_name#46, n_regionkey#47L, n_comment#48], `spark_catalog`.`tpch_100`.`nation`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "5" : {
            "sign" : -417857126,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 10938071400000000000000000,
            "rowCount" : 109380714000000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#8L = n_nationkey#45L) "
          },
          "10" : {
            "sign" : -1334624383,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_suppkey#5L, s_nationkey#8L], ShuffleQueryStage 0 "
          },
          "6" : {
            "sign" : -1557785816,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1203187854000000000000000,
            "rowCount" : 27345178500000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_nationkey#8L, l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L] "
          },
          "1" : {
            "sign" : -790111407,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 10231230224,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [supp_nation#64, cust_nation#65, l_year#66], [supp_nation#64, cust_nation#65, l_year#66, sum(volume#67) AS revenue#68] "
          },
          "17" : {
            "sign" : -1667050785,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 80,
            "rowCount" : 2,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#69L, n_name#70], BroadcastQueryStage 3 "
          },
          "14" : {
            "sign" : -683749095,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 72,
            "rowCount" : 2,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_nationkey#45L, n_name#46] "
          },
          "0" : {
            "sign" : 1036134843,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 10231230224,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [supp_nation#64 ASC NULLS FIRST, cust_nation#65 ASC NULLS FIRST, l_year#66 ASC NULLS FIRST], true "
          },
          "2" : {
            "sign" : -493014397,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 10231230224,
            "rowCount" : 150459268,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_name#46 AS supp_nation#64, n_name#70 AS cust_nation#65, year(l_shipdate#27) AS l_year#66, (l_extendedprice#17 * (1 - l_discount#18)) AS volume#67] "
          },
          "18" : {
            "sign" : 608990757,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 360000000,
            "rowCount" : 15000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_custkey#37L, c_nationkey#40L], ShuffleQueryStage 4 "
          },
          "7" : {
            "sign" : -1292277177,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1640710710000000000000000,
            "rowCount" : 27345178500000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (o_orderkey#28L = l_orderkey#12L) "
          },
          "3" : {
            "sign" : 419502263,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 15045926800,
            "rowCount" : 150459268,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_custkey#37L = o_custkey#29L) AND (c_nationkey#40L = n_nationkey#69L)) "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalRelation",
          "toId" : 15,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Filter",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [supp_nation#64 ASC NULLS FIRST, cust_nation#65 ASC NULLS FIRST, l_year#66 ASC NULLS FIRST], true\n+- Aggregate [supp_nation#64, cust_nation#65, l_year#66], [supp_nation#64, cust_nation#65, l_year#66, sum(volume#67) AS revenue#68]\n   +- Project [n_name#46 AS supp_nation#64, n_name#70 AS cust_nation#65, year(l_shipdate#27) AS l_year#66, (l_extendedprice#17 * (1 - l_discount#18)) AS volume#67]\n      +- Join Inner, ((c_custkey#37L = o_custkey#29L) AND (c_nationkey#40L = n_nationkey#69L))\n         :- Project [l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L, n_name#46, n_nationkey#69L, n_name#70]\n         :  +- Join Inner, (s_nationkey#8L = n_nationkey#45L)\n         :     :- Project [s_nationkey#8L, l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L]\n         :     :  +- Join Inner, (o_orderkey#28L = l_orderkey#12L)\n         :     :     :- Project [s_nationkey#8L, l_orderkey#12L, l_extendedprice#17, l_discount#18, l_shipdate#27]\n         :     :     :  +- Join Inner, (s_suppkey#5L = l_suppkey#14L)\n         :     :     :     :- LogicalQueryStage Project [s_suppkey#5L, s_nationkey#8L], ShuffleQueryStage 0\n         :     :     :     +- LogicalQueryStage Project [l_orderkey#12L, l_suppkey#14L, l_extendedprice#17, l_discount#18, l_shipdate#27], ShuffleQueryStage 1\n         :     :     +- LogicalQueryStage Project [o_orderkey#28L, o_custkey#29L], ShuffleQueryStage 2\n         :     +- Join Inner, (((n_name#46 = MOZAMBIQUE) AND (n_name#70 = UNITED KINGDOM)) OR ((n_name#46 = UNITED KINGDOM) AND (n_name#70 = MOZAMBIQUE)))\n         :        :- Project [n_nationkey#45L, n_name#46]\n         :        :  +- Filter (isnotnull(n_nationkey#45L) AND ((n_name#46 = MOZAMBIQUE) OR (n_name#46 = UNITED KINGDOM)))\n         :        :     +- Relation spark_catalog.tpch_100.nation[n_nationkey#45L,n_name#46,n_regionkey#47L,n_comment#48] parquet\n         :        +- LogicalQueryStage Project [n_nationkey#69L, n_name#70], BroadcastQueryStage 3\n         +- LogicalQueryStage Project [c_custkey#37L, c_nationkey#40L], ShuffleQueryStage 4\n"
      },
      "IM" : {
        "inputSizeInBytes" : 12734460475,
        "inputRowCount" : 348301217
      },
      "PD" : {
        "1" : [ 19601972, 20520954, 21458748, 21266380, 21386610, 21458748, 20953782, 21488550, 21098058, 20996640, 21218288, 21482794, 21290426, 19751482, 21482794, 21170196, 21482794, 20641184, 21290426, 21482794, 20857598, 21338518, 21434702, 20251214, 21458748, 21194242, 21410656, 21482794, 19799574, 21194242, 19601972, 21482794, 21049966, 21338518, 20328586, 21410656, 21285192, 19962662, 21482794, 20737368, 20809506, 21362564, 20563812, 21074012, 20881644, 19847666, 21482794, 20136218, 21434702, 21482794, 21266380, 21410656, 21314472, 21434702, 21458748, 21482794, 21362564, 21410656, 20208356, 19679344, 20905690, 20833552, 19991942, 21242334, 21362564, 21482794, 21482794, 19986708, 19607206, 20713322, 20208356, 21266380, 20737368, 21218288, 21242334, 20400724, 21140916, 21410656, 21194242, 20689276, 21482794, 19577926, 20876410, 20833552, 20977828, 21434702, 21482794, 21410656, 20713322, 20756180, 21098058, 20376678, 21001874, 21482794, 21122104, 21025920, 21362564, 21386610, 21482794, 21386610, 21458748, 21482794, 21290426, 21074012, 21458748, 20929736, 20905690, 20256448, 21458748, 21482794, 20155030, 20136218, 20058846, 21314472, 21314472, 21482794, 20347398, 21194242, 21410656, 20785460, 20520954, 20472862, 21410656, 21170196, 21482794, 20496908, 21242334, 21482794, 21381376, 20780226, 21194242, 21482794, 20905690, 21482794, 20088126, 21122104, 21482794, 20448816, 21074012, 20953782, 21482794, 21482794, 21122104, 21001874, 21410656, 20659996, 20756180, 21482794, 21290426, 20472862, 21482794, 20641184, 20082892, 19607206, 20857598, 21482794, 21458748, 20641184, 21434702, 21098058, 21410656, 19770294, 21386610, 21314472, 21482794, 21458748, 20112172, 21434702, 21049966, 19607206, 21482794, 20587858, 20881644, 21242334, 20737368, 21285192, 21482794, 21482794, 20034800, 21477560, 20665230, 21194242, 19553880, 20352632, 20058846, 21194242, 21266380, 21266380, 21434702, 20569046, 21482794, 20617138, 20996640, 21482794, 21049966, 19679344, 21482794, 21386610, 21338518, 21309238 ],
        "0" : [ 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 52331, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 52331, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 52331, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 52331, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 57565, 57565, 52331, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 52331, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226561678,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 42710,
        "IOBytes" : {
          "Total" : 19111902491,
          "Details" : {
            "IR" : 1795534635,
            "IW" : 0,
            "SR" : 10638771146,
            "SW" : 6677596710
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : -1177256444,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 26426862748,
            "rowCount" : 600610517,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_nationkey#8L, l_orderkey#12L, l_extendedprice#17, l_discount#18, l_shipdate#27], ShuffleQueryStage 5 "
          },
          "4" : {
            "sign" : -666542216,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 101037085296,
            "rowCount" : 1202822444,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L, n_name#46, n_nationkey#69L, n_name#70] "
          },
          "11" : {
            "sign" : 608990757,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 360000000,
            "rowCount" : 15000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_custkey#37L, c_nationkey#40L], ShuffleQueryStage 4 "
          },
          "9" : {
            "sign" : 925317735,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3600000000,
            "rowCount" : 150000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [o_orderkey#28L, o_custkey#29L], ShuffleQueryStage 2 "
          },
          "5" : {
            "sign" : -570583592,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 120282244400,
            "rowCount" : 1202822444,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#8L = n_nationkey#45L) "
          },
          "10" : {
            "sign" : 1810527732,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048640,
            "rowCount" : 2,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Join Inner, (((n_name#46 = MOZAMBIQUE) AND (n_name#70 = UNITED KINGDOM)) OR ((n_name#46 = UNITED KINGDOM) AND (n_name#70 = MOZAMBIQUE))), BroadcastQueryStage 6 "
          },
          "6" : {
            "sign" : 1032189573,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 26462093768,
            "rowCount" : 601411222,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_nationkey#8L, l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L] "
          },
          "1" : {
            "sign" : -1897181167,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 10231230224,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [supp_nation#64, cust_nation#65, l_year#66], [supp_nation#64, cust_nation#65, l_year#66, sum(volume#67) AS revenue#68] "
          },
          "0" : {
            "sign" : -800560809,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 10231230224,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [supp_nation#64 ASC NULLS FIRST, cust_nation#65 ASC NULLS FIRST, l_year#66 ASC NULLS FIRST], true "
          },
          "2" : {
            "sign" : -1223316081,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 10231230224,
            "rowCount" : 150459268,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_name#46 AS supp_nation#64, n_name#70 AS cust_nation#65, year(l_shipdate#27) AS l_year#66, (l_extendedprice#17 * (1 - l_discount#18)) AS volume#67] "
          },
          "7" : {
            "sign" : 1407855490,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 36084673320,
            "rowCount" : 601411222,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (o_orderkey#28L = l_orderkey#12L) "
          },
          "3" : {
            "sign" : -830759945,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 15045926800,
            "rowCount" : 150459268,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_custkey#37L = o_custkey#29L) AND (c_nationkey#40L = n_nationkey#69L)) "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [supp_nation#64 ASC NULLS FIRST, cust_nation#65 ASC NULLS FIRST, l_year#66 ASC NULLS FIRST], true\n+- Aggregate [supp_nation#64, cust_nation#65, l_year#66], [supp_nation#64, cust_nation#65, l_year#66, sum(volume#67) AS revenue#68]\n   +- Project [n_name#46 AS supp_nation#64, n_name#70 AS cust_nation#65, year(l_shipdate#27) AS l_year#66, (l_extendedprice#17 * (1 - l_discount#18)) AS volume#67]\n      +- Join Inner, ((c_custkey#37L = o_custkey#29L) AND (c_nationkey#40L = n_nationkey#69L))\n         :- Project [l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L, n_name#46, n_nationkey#69L, n_name#70]\n         :  +- Join Inner, (s_nationkey#8L = n_nationkey#45L)\n         :     :- Project [s_nationkey#8L, l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L]\n         :     :  +- Join Inner, (o_orderkey#28L = l_orderkey#12L)\n         :     :     :- LogicalQueryStage Project [s_nationkey#8L, l_orderkey#12L, l_extendedprice#17, l_discount#18, l_shipdate#27], ShuffleQueryStage 5\n         :     :     +- LogicalQueryStage Project [o_orderkey#28L, o_custkey#29L], ShuffleQueryStage 2\n         :     +- LogicalQueryStage Join Inner, (((n_name#46 = MOZAMBIQUE) AND (n_name#70 = UNITED KINGDOM)) OR ((n_name#46 = UNITED KINGDOM) AND (n_name#70 = MOZAMBIQUE))), BroadcastQueryStage 6\n         +- LogicalQueryStage Project [c_custkey#37L, c_nationkey#40L], ShuffleQueryStage 4\n"
      },
      "IM" : {
        "inputSizeInBytes" : 30387911388,
        "inputRowCount" : 765610519
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 128,
        "FinishedTasksTotalTimeInMs" : 108164.0,
        "FinishedTasksDistributionInMs" : [ 19.0, 768.0, 863.0, 960.0, 1438.0 ]
      },
      "StartTimeInMs" : 1702226568645,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 35743,
        "IOBytes" : {
          "Total" : 19111899711,
          "Details" : {
            "IR" : 1795531855,
            "IW" : 0,
            "SR" : 10638771146,
            "SW" : 6677596710
          }
        }
      }
    },
    "7" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : 2048821401,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 3072,
            "rowCount" : 32,
            "isRuntime" : true,
            "predicate" : " (unknown) Sort Arguments: [supp_nation#64 ASC NULLS FIRST, cust_nation#65 ASC NULLS FIRST, l_year#66 ASC NULLS FIRST], true "
          },
          "1" : {
            "sign" : -587399745,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3072,
            "rowCount" : 32,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [supp_nation#64, cust_nation#65, l_year#66], [supp_nation#64, cust_nation#65, l_year#66, sum(volume#67) AS revenue#68], HashAggregate(keys=[supp_nation#64, cust_nation#65, l_year#66], functions=[sum(volume#67)]) "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "LogicalQueryStage",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [supp_nation#64 ASC NULLS FIRST, cust_nation#65 ASC NULLS FIRST, l_year#66 ASC NULLS FIRST], true\n+- LogicalQueryStage Aggregate [supp_nation#64, cust_nation#65, l_year#66], [supp_nation#64, cust_nation#65, l_year#66, sum(volume#67) AS revenue#68], HashAggregate(keys=[supp_nation#64, cust_nation#65, l_year#66], functions=[sum(volume#67)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3072,
        "inputRowCount" : 32
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226603807,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 581,
        "IOBytes" : {
          "Total" : 9440,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 8928,
            "SW" : 512
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : -1177256444,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 26426862748,
            "rowCount" : 600610517,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_nationkey#8L, l_orderkey#12L, l_extendedprice#17, l_discount#18, l_shipdate#27], ShuffleQueryStage 5 "
          },
          "4" : {
            "sign" : -666542216,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 15135385028400000000,
            "rowCount" : 180183155100000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L, n_name#46, n_nationkey#69L, n_name#70] "
          },
          "11" : {
            "sign" : 608990757,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 360000000,
            "rowCount" : 15000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_custkey#37L, c_nationkey#40L], ShuffleQueryStage 4 "
          },
          "9" : {
            "sign" : 925317735,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3600000000,
            "rowCount" : 150000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [o_orderkey#28L, o_custkey#29L], ShuffleQueryStage 2 "
          },
          "5" : {
            "sign" : -570583592,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 18018315510000000000,
            "rowCount" : 180183155100000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#8L = n_nationkey#45L) "
          },
          "10" : {
            "sign" : 1810527732,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048640,
            "rowCount" : 2,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Join Inner, (((n_name#46 = MOZAMBIQUE) AND (n_name#70 = UNITED KINGDOM)) OR ((n_name#46 = UNITED KINGDOM) AND (n_name#70 = MOZAMBIQUE))), BroadcastQueryStage 6 "
          },
          "6" : {
            "sign" : 1032189573,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3964029412200000000,
            "rowCount" : 90091577550000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_nationkey#8L, l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L] "
          },
          "1" : {
            "sign" : -1897181167,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 183786818202000000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [supp_nation#64, cust_nation#65, l_year#66], [supp_nation#64, cust_nation#65, l_year#66, sum(volume#67) AS revenue#68] "
          },
          "0" : {
            "sign" : -800560809,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 183786818202000000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [supp_nation#64 ASC NULLS FIRST, cust_nation#65 ASC NULLS FIRST, l_year#66 ASC NULLS FIRST], true "
          },
          "2" : {
            "sign" : -1223316081,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 183786818202000000000000000,
            "rowCount" : 2702747326500000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_name#46 AS supp_nation#64, n_name#70 AS cust_nation#65, year(l_shipdate#27) AS l_year#66, (l_extendedprice#17 * (1 - l_discount#18)) AS volume#67] "
          },
          "7" : {
            "sign" : 1407855490,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 5405494653000000000,
            "rowCount" : 90091577550000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (o_orderkey#28L = l_orderkey#12L) "
          },
          "3" : {
            "sign" : -830759945,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 270274732650000000000000000,
            "rowCount" : 2702747326500000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_custkey#37L = o_custkey#29L) AND (c_nationkey#40L = n_nationkey#69L)) "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [supp_nation#64 ASC NULLS FIRST, cust_nation#65 ASC NULLS FIRST, l_year#66 ASC NULLS FIRST], true\n+- Aggregate [supp_nation#64, cust_nation#65, l_year#66], [supp_nation#64, cust_nation#65, l_year#66, sum(volume#67) AS revenue#68]\n   +- Project [n_name#46 AS supp_nation#64, n_name#70 AS cust_nation#65, year(l_shipdate#27) AS l_year#66, (l_extendedprice#17 * (1 - l_discount#18)) AS volume#67]\n      +- Join Inner, ((c_custkey#37L = o_custkey#29L) AND (c_nationkey#40L = n_nationkey#69L))\n         :- Project [l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L, n_name#46, n_nationkey#69L, n_name#70]\n         :  +- Join Inner, (s_nationkey#8L = n_nationkey#45L)\n         :     :- Project [s_nationkey#8L, l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L]\n         :     :  +- Join Inner, (o_orderkey#28L = l_orderkey#12L)\n         :     :     :- LogicalQueryStage Project [s_nationkey#8L, l_orderkey#12L, l_extendedprice#17, l_discount#18, l_shipdate#27], ShuffleQueryStage 5\n         :     :     +- LogicalQueryStage Project [o_orderkey#28L, o_custkey#29L], ShuffleQueryStage 2\n         :     +- LogicalQueryStage Join Inner, (((n_name#46 = MOZAMBIQUE) AND (n_name#70 = UNITED KINGDOM)) OR ((n_name#46 = UNITED KINGDOM) AND (n_name#70 = MOZAMBIQUE))), BroadcastQueryStage 6\n         +- LogicalQueryStage Project [c_custkey#37L, c_nationkey#40L], ShuffleQueryStage 4\n"
      },
      "IM" : {
        "inputSizeInBytes" : 30387911388,
        "inputRowCount" : 765610519
      },
      "PD" : {
        "2" : [ 10756415, 10781702, 10773273, 10781702, 10790131, 10773273, 10739557, 10714270, 10815418, 10764844, 10815418, 10806989, 10756415, 10697412, 10781702, 10806989, 10714270, 10790131, 10806989, 10756415, 10774041, 10823847, 10764844, 10773273, 10764844, 10798560, 10756415, 10849134, 10781702, 10815418, 10806989, 10798560, 10781702, 10739557, 10773273, 10739557, 10756415, 10781702, 10781702, 10790131, 10756415, 10840705, 10739557, 10731128, 10756415, 10832276, 10849134, 10781702, 10731128, 10773273, 10764844, 10798560, 10781702, 10798560, 10739557, 10773273, 10790131, 10764844, 10722699, 10773273, 10756415, 10790131, 10823847, 10739557, 10773273, 10764844, 10840705, 10764844, 10798560, 10722699, 10747986, 10790131, 10823847, 10756415, 10764844, 10798560, 10790131, 10798560, 10806989, 10773273, 10781702, 10747986, 10773273, 10781702, 10773273, 10823847, 10790131, 10705841, 10849134, 10756415, 10781702, 10815418, 10739557, 10773273, 10840705, 10781702, 10764844, 10849134, 10663696, 10739557, 10832276, 10722699, 10739557, 10790131, 10756415, 10790131, 10790131, 10739557, 10739557, 10781702, 10815418, 10722699, 10773273, 10756415, 10764844, 10815418, 10781702, 10823847, 10714270, 10773273, 10840705, 10731128, 10747986, 10722699, 10798560, 10722699, 10815418, 10806989, 10747986, 10731128, 10790131, 10705841, 10764844, 10798560, 10756415, 10764844, 10764844, 10849134, 10781702, 10722699, 10714270, 10739557, 10764844, 10790131, 10815418, 10790131, 10781702, 10714270, 10773273, 10815418, 10731128, 10798560, 10790131, 10773273, 10739557, 10815418, 10832276, 10764844, 10747986, 10764844, 10722699, 10815418, 10823847, 10774041, 10731128, 10697412, 10806989, 10773273, 10806989, 10857563, 10823847, 10806989, 10857563, 10790131, 10857563, 10747986, 10798560, 10747986, 10764844, 10832276, 10773273, 10739557, 10773273, 10747986, 10798560, 10781702, 10832276, 10764844, 10806989, 10840705, 10756415, 10739557, 10756415, 10781702, 10747986, 10739557, 10781702, 10790131, 10781702, 10773273 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 8,
        "FinishedTasksTotalTimeInMs" : 1906.0,
        "FinishedTasksDistributionInMs" : [ 19.0, 97.0, 124.0, 579.0, 652.0 ]
      },
      "StartTimeInMs" : 1702226568763,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 35625,
        "IOBytes" : {
          "Total" : 15362304105,
          "Details" : {
            "IR" : 86367163,
            "IW" : 0,
            "SR" : 10638771146,
            "SW" : 4637165796
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "8" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -248462235,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1213419948,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 1213419948,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [supp_nation#64, cust_nation#65, l_year#66], [supp_nation#64, cust_nation#65, l_year#66, sum(volume#67) AS revenue#68] "
          },
          "1" : {
            "sign" : 1316774137,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1213419948,
                "rowCount" : 17844411
              },
              "compileTime" : {
                "sizeInBytes" : 1213419948,
                "rowCount" : 17844411
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_name#46 AS supp_nation#64, n_name#70 AS cust_nation#65, year(l_shipdate#27) AS l_year#66, (l_extendedprice#17 * (1 - l_discount#18)) AS volume#67] "
          },
          "2" : {
            "sign" : -26840065,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1784441100,
                "rowCount" : 17844411
              },
              "compileTime" : {
                "sizeInBytes" : 1784441100,
                "rowCount" : 17844411
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_custkey#37L = o_custkey#29L) AND (c_nationkey#40L = n_nationkey#69L)) "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [supp_nation#64, cust_nation#65, l_year#66], [supp_nation#64, cust_nation#65, l_year#66, sum(volume#67) AS revenue#68]\n+- Project [n_name#46 AS supp_nation#64, n_name#70 AS cust_nation#65, year(l_shipdate#27) AS l_year#66, (l_extendedprice#17 * (1 - l_discount#18)) AS volume#67]\n   +- Join Inner, ((c_custkey#37L = o_custkey#29L) AND (c_nationkey#40L = n_nationkey#69L))\n      :- Project [l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L, n_name#46, n_nationkey#69L, n_name#70]\n      :  +- Join Inner, (s_nationkey#8L = n_nationkey#45L)\n      :     :- Project [s_nationkey#8L, l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L]\n      :     :  +- Join Inner, (o_orderkey#28L = l_orderkey#12L)\n      :     :     :- Project [s_nationkey#8L, l_orderkey#12L, l_extendedprice#17, l_discount#18, l_shipdate#27]\n      :     :     :  +- Join Inner, (s_suppkey#5L = l_suppkey#14L)\n      :     :     :     :- Project [s_suppkey#5L, s_nationkey#8L]\n      :     :     :     :  +- Filter (isnotnull(s_suppkey#5L) AND isnotnull(s_nationkey#8L))\n      :     :     :     :     +- Relation spark_catalog.tpch_100.supplier[s_suppkey#5L,s_name#6,s_address#7,s_nationkey#8L,s_phone#9,s_acctbal#10,s_comment#11] parquet\n      :     :     :     +- Project [l_orderkey#12L, l_suppkey#14L, l_extendedprice#17, l_discount#18, l_shipdate#27]\n      :     :     :        +- Filter ((((isnotnull(l_shipdate#27) AND (l_shipdate#27 >= 1995-01-01)) AND (l_shipdate#27 <= 1996-12-31)) AND isnotnull(l_suppkey#14L)) AND isnotnull(l_orderkey#12L))\n      :     :     :           +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#12L,l_partkey#13L,l_suppkey#14L,l_linenumber#15,l_quantity#16,l_extendedprice#17,l_discount#18,l_tax#19,l_returnflag#20,l_linestatus#21,l_commitdate#22,l_receiptdate#23,l_shipinstruct#24,l_shipmode#25,l_comment#26,l_shipdate#27] parquet\n      :     :     +- Project [o_orderkey#28L, o_custkey#29L]\n      :     :        +- Filter (isnotnull(o_orderkey#28L) AND isnotnull(o_custkey#29L))\n      :     :           +- Relation spark_catalog.tpch_100.orders[o_orderkey#28L,o_custkey#29L,o_orderstatus#30,o_totalprice#31,o_orderpriority#32,o_clerk#33,o_shippriority#34,o_comment#35,o_orderdate#36] parquet\n      :     +- Join Inner, (((n_name#46 = MOZAMBIQUE) AND (n_name#70 = UNITED KINGDOM)) OR ((n_name#46 = UNITED KINGDOM) AND (n_name#70 = MOZAMBIQUE)))\n      :        :- Project [n_nationkey#45L, n_name#46]\n      :        :  +- Filter (isnotnull(n_nationkey#45L) AND ((n_name#46 = MOZAMBIQUE) OR (n_name#46 = UNITED KINGDOM)))\n      :        :     +- Relation spark_catalog.tpch_100.nation[n_nationkey#45L,n_name#46,n_regionkey#47L,n_comment#48] parquet\n      :        +- Project [n_nationkey#69L, n_name#70]\n      :           +- Filter (isnotnull(n_nationkey#69L) AND ((n_name#70 = UNITED KINGDOM) OR (n_name#70 = MOZAMBIQUE)))\n      :              +- Relation spark_catalog.tpch_100.nation[n_nationkey#69L,n_name#70,n_regionkey#71L,n_comment#72] parquet\n      +- Project [c_custkey#37L, c_nationkey#40L]\n         +- Filter (isnotnull(c_custkey#37L) AND isnotnull(c_nationkey#40L))\n            +- Relation spark_catalog.tpch_100.customer[c_custkey#37L,c_name#38,c_address#39,c_nationkey#40L,c_phone#41,c_acctbal#42,c_comment#43,c_mktsegment#44] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 660732543,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 1402326816,
            "rowCount" : 14607571,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [7]: [l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L, n_name#46, n_nationkey#69L, n_name#70] Arguments: 7 "
          },
          "5" : {
            "sign" : -1033419477,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [c_custkey#37L, c_nationkey#40L] Arguments: [c_custkey#37L ASC NULLS FIRST, c_nationkey#40L ASC NULLS FIRST], false, 0 "
          },
          "6" : {
            "sign" : 1308787652,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 360000000,
            "rowCount" : 15000000,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [c_custkey#37L, c_nationkey#40L] Arguments: 4 "
          },
          "1" : {
            "sign" : 1622750114,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1213419948,
            "rowCount" : 17844411,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [n_name#46 AS supp_nation#64, n_name#70 AS cust_nation#65, year(l_shipdate#27) AS l_year#66, (l_extendedprice#17 * (1 - l_discount#18)) AS volume#67] Input [9]: [l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L, n_name#46, n_nationkey#69L, n_name#70, c_custkey#37L, c_nationkey#40L] "
          },
          "0" : {
            "sign" : -591573700,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 1213419948,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [4]: [supp_nation#64, cust_nation#65, l_year#66, volume#67] Keys [3]: [supp_nation#64, cust_nation#65, l_year#66] Functions [1]: [partial_sum(volume#67)] Aggregate Attributes [2]: [sum#79, isEmpty#80] Results [5]: [supp_nation#64, cust_nation#65, l_year#66, sum#81, isEmpty#82] "
          },
          "2" : {
            "sign" : -103225002,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 1784441100,
            "rowCount" : 17844411,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [2]: [o_custkey#29L, n_nationkey#69L] Right keys [2]: [c_custkey#37L, c_nationkey#40L] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : 757488417,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [7]: [l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L, n_name#46, n_nationkey#69L, n_name#70] Arguments: [o_custkey#29L ASC NULLS FIRST, n_nationkey#69L ASC NULLS FIRST], false, 0 "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "ShuffleQueryStage",
          "toId" : 5,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "SortMergeJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[supp_nation#64, cust_nation#65, l_year#66], functions=[partial_sum(volume#67)], output=[supp_nation#64, cust_nation#65, l_year#66, sum#81, isEmpty#82])\n+- Project [n_name#46 AS supp_nation#64, n_name#70 AS cust_nation#65, year(l_shipdate#27) AS l_year#66, (l_extendedprice#17 * (1 - l_discount#18)) AS volume#67]\n   +- SortMergeJoin [o_custkey#29L, n_nationkey#69L], [c_custkey#37L, c_nationkey#40L], Inner\n      :- Sort [o_custkey#29L ASC NULLS FIRST, n_nationkey#69L ASC NULLS FIRST], false, 0\n      :  +- ShuffleQueryStage 7\n      :     +- Exchange hashpartitioning(o_custkey#29L, n_nationkey#69L, 200), ENSURE_REQUIREMENTS, [plan_id=799]\n      :        +- *(12) Project [l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L, n_name#46, n_nationkey#69L, n_name#70]\n      :           +- *(12) BroadcastHashJoin [s_nationkey#8L], [n_nationkey#45L], Inner, BuildRight, false\n      :              :- *(12) Project [s_nationkey#8L, l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L]\n      :              :  +- *(12) SortMergeJoin [l_orderkey#12L], [o_orderkey#28L], Inner\n      :              :     :- *(10) Sort [l_orderkey#12L ASC NULLS FIRST], false, 0\n      :              :     :  +- AQEShuffleRead coalesced\n      :              :     :     +- ShuffleQueryStage 5\n      :              :     :        +- Exchange hashpartitioning(l_orderkey#12L, 200), ENSURE_REQUIREMENTS, [plan_id=478]\n      :              :     :           +- *(8) Project [s_nationkey#8L, l_orderkey#12L, l_extendedprice#17, l_discount#18, l_shipdate#27]\n      :              :     :              +- *(8) SortMergeJoin [s_suppkey#5L], [l_suppkey#14L], Inner\n      :              :     :                 :- *(6) Sort [s_suppkey#5L ASC NULLS FIRST], false, 0\n      :              :     :                 :  +- AQEShuffleRead coalesced\n      :              :     :                 :     +- ShuffleQueryStage 0\n      :              :     :                 :        +- Exchange hashpartitioning(s_suppkey#5L, 200), ENSURE_REQUIREMENTS, [plan_id=227]\n      :              :     :                 :           +- *(1) Filter (isnotnull(s_suppkey#5L) AND isnotnull(s_nationkey#8L))\n      :              :     :                 :              +- *(1) ColumnarToRow\n      :              :     :                 :                 +- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#5L,s_nationkey#8L] Batched: true, DataFilters: [isnotnull(s_suppkey#5L), isnotnull(s_nationkey#8L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>\n      :              :     :                 +- *(7) Sort [l_suppkey#14L ASC NULLS FIRST], false, 0\n      :              :     :                    +- AQEShuffleRead coalesced\n      :              :     :                       +- ShuffleQueryStage 1\n      :              :     :                          +- Exchange hashpartitioning(l_suppkey#14L, 200), ENSURE_REQUIREMENTS, [plan_id=244]\n      :              :     :                             +- *(2) Filter (isnotnull(l_suppkey#14L) AND isnotnull(l_orderkey#12L))\n      :              :     :                                +- *(2) ColumnarToRow\n      :              :     :                                   +- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#12L,l_suppkey#14L,l_extendedprice#17,l_discount#18,l_shipdate#27] Batched: true, DataFilters: [isnotnull(l_suppkey#14L), isnotnull(l_orderkey#12L)], Format: Parquet, Location: InMemoryFileIndex(731 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem..., PartitionFilters: [isnotnull(l_shipdate#27), (l_shipdate#27 >= 1995-01-01), (l_shipdate#27 <= 1996-12-31)], PushedFilters: [IsNotNull(l_suppkey), IsNotNull(l_orderkey)], ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2)>\n      :              :     +- *(11) Sort [o_orderkey#28L ASC NULLS FIRST], false, 0\n      :              :        +- AQEShuffleRead coalesced\n      :              :           +- ShuffleQueryStage 2\n      :              :              +- Exchange hashpartitioning(o_orderkey#28L, 200), ENSURE_REQUIREMENTS, [plan_id=267]\n      :              :                 +- *(3) Project [o_orderkey#28L, o_custkey#29L]\n      :              :                    +- *(3) Filter (isnotnull(o_orderkey#28L) AND isnotnull(o_custkey#29L))\n      :              :                       +- *(3) ColumnarToRow\n      :              :                          +- FileScan parquet spark_catalog.tpch_100.orders[o_orderkey#28L,o_custkey#29L,o_orderdate#36] Batched: true, DataFilters: [isnotnull(o_orderkey#28L), isnotnull(o_custkey#29L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/orders], PartitionFilters: [], PushedFilters: [IsNotNull(o_orderkey), IsNotNull(o_custkey)], ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint>\n      :              +- BroadcastQueryStage 6\n      :                 +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=512]\n      :                    +- *(9) BroadcastNestedLoopJoin BuildRight, Inner, (((n_name#46 = MOZAMBIQUE) AND (n_name#70 = UNITED KINGDOM)) OR ((n_name#46 = UNITED KINGDOM) AND (n_name#70 = MOZAMBIQUE)))\n      :                       :- *(9) Filter (isnotnull(n_nationkey#45L) AND ((n_name#46 = MOZAMBIQUE) OR (n_name#46 = UNITED KINGDOM)))\n      :                       :  +- *(9) ColumnarToRow\n      :                       :     +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#45L,n_name#46] Batched: true, DataFilters: [isnotnull(n_nationkey#45L), ((n_name#46 = MOZAMBIQUE) OR (n_name#46 = UNITED KINGDOM))], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), Or(EqualTo(n_name,MOZAMBIQUE),EqualTo(n_name,UNITED KINGDOM))], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n      :                       +- BroadcastQueryStage 3\n      :                          +- BroadcastExchange IdentityBroadcastMode, [plan_id=288]\n      :                             +- *(4) Filter (isnotnull(n_nationkey#69L) AND ((n_name#70 = UNITED KINGDOM) OR (n_name#70 = MOZAMBIQUE)))\n      :                                +- *(4) ColumnarToRow\n      :                                   +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#69L,n_name#70] Batched: true, DataFilters: [isnotnull(n_nationkey#69L), ((n_name#70 = UNITED KINGDOM) OR (n_name#70 = MOZAMBIQUE))], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), Or(EqualTo(n_name,UNITED KINGDOM),EqualTo(n_name,MOZAMBIQUE))], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n      +- Sort [c_custkey#37L ASC NULLS FIRST, c_nationkey#40L ASC NULLS FIRST], false, 0\n         +- ShuffleQueryStage 4\n            +- Exchange hashpartitioning(c_custkey#37L, c_nationkey#40L, 200), ENSURE_REQUIREMENTS, [plan_id=311]\n               +- *(5) Project [c_custkey#37L, c_nationkey#40L]\n                  +- *(5) Filter (isnotnull(c_custkey#37L) AND isnotnull(c_nationkey#40L))\n                     +- *(5) ColumnarToRow\n                        +- FileScan parquet spark_catalog.tpch_100.customer[c_custkey#37L,c_nationkey#40L,c_mktsegment#44] Batched: true, DataFilters: [isnotnull(c_custkey#37L), isnotnull(c_nationkey#40L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)], ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1762326816,
        "inputRowCount" : 29607571
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "5" : [ 1675880, 1691946, 1676943, 1672395, 1689813, 1678459, 1683611, 1696494, 1680415, 1678006, 1695129, 1681793, 1685127, 1688612, 1666029, 1680277, 1673307, 1691493, 1683007, 1675729, 1680126, 1696494, 1676490, 1674974, 1676641, 1690430, 1688159, 1684976, 1671791, 1688612, 1691795, 1691493, 1683460, 1684674, 1686341, 1679339, 1690128, 1704376, 1677094, 1667847, 1676641, 1685127, 1674062, 1688008, 1701344, 1673911, 1686492, 1688310, 1671030, 1684976, 1686643, 1675578, 1691040, 1680126, 1685127, 1678006, 1688159, 1696494, 1687247, 1675729, 1683309, 1699828, 1684976, 1688612, 1685580, 1684064, 1684674, 1683309, 1676943, 1686492, 1676031, 1683762, 1701344, 1673911, 1694827, 1694978, 1676641, 1671181, 1669514, 1677396, 1685278, 1683611, 1673458, 1675427, 1678610, 1680126, 1677245, 1675125, 1688159, 1680277, 1680126, 1674213, 1672999, 1685127, 1672244, 1689826, 1697859, 1664362, 1694072, 1673307, 1665727, 1677396, 1670275, 1678761, 1674062, 1668759, 1675729, 1690279, 1696041, 1667545, 1685278, 1667847, 1677081, 1675578, 1680126, 1686492, 1685429, 1675276, 1656329, 1675125, 1688310, 1675125, 1673609, 1694827, 1688763, 1686643, 1675276, 1678157, 1666180, 1685278, 1696645, 1681944, 1673458, 1682095, 1691644, 1673760, 1691342, 1673911, 1683477, 1686945, 1694676, 1669363, 1659801, 1684825, 1691644, 1688008, 1666941, 1686492, 1682095, 1667696, 1670426, 1696511, 1672093, 1670879, 1683158, 1707559, 1695129, 1675578, 1661028, 1675125, 1679824, 1688159, 1680126, 1679365, 1675578, 1669514, 1678761, 1681944, 1680428, 1683762, 1693009, 1675729, 1689977, 1676792, 1664211, 1680428, 1681793, 1683007, 1683460, 1680730, 1680126, 1688159, 1686945, 1677396, 1696343, 1677245, 1673458, 1688159, 1678610, 1703011, 1677396, 1674062, 1674213, 1688159, 1671942, 1698312, 1670564, 1685127, 1674364, 1679975 ],
        "3" : [ 789868, 796834, 796834, 782207, 789173, 774546, 774546, 789173, 781512, 781512, 796834, 781512, 796834, 789173, 796834, 789173, 782207, 789173, 774546, 781512, 796834, 804495, 782207, 796834, 789173, 789173, 774546, 789173, 773851, 796834, 796834, 789173, 789173, 781512, 797529, 789173, 781512, 797529, 796834, 773851, 781512, 773851, 781512, 789173, 773851, 789173, 789173, 781512, 773851, 781512, 789173, 781512, 796834, 781512, 789173, 781512, 804495, 789173, 781512, 796834, 773851, 796834, 781512, 796834, 781512, 789173, 804495, 781512, 773851, 789173, 789173, 781512, 804495, 781512, 804495, 789173, 781512, 781512, 766190, 789173, 789173, 797529, 796834, 789173, 773851, 796834, 789173, 781512, 781512, 774546, 796834, 766190, 781512, 789173, 773851, 796834, 773851, 781512, 789173, 789173, 773851, 774546, 789173, 789173, 796834, 789173, 804495, 789173, 796834, 789173, 789173, 773851, 796834, 789173, 789173, 781512, 789173, 781512, 773851, 789173, 773851, 781512, 789173, 796834, 796834, 789173, 789173, 781512, 804495, 782207, 789173, 773851, 789173, 782207, 781512, 773851, 789173, 781512, 789173, 781512, 796834, 789173, 789868, 781512, 766190, 781512, 789173, 789173, 804495, 781512, 773851, 781512, 796834, 766190, 766190, 773851, 796834, 796834, 781512, 781512, 789173, 796834, 797529, 804495, 789173, 789173, 789173, 804495, 789173, 796834, 789173, 781512, 789173, 781512, 789173, 796834, 789173, 789173, 796834, 796834, 789173, 781512, 781512, 782207, 789173, 796834, 782207, 789173, 782207, 781512, 789173, 781512, 796834, 804495, 796834, 766190, 796834, 789173, 773851, 789173 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 8,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 22 ],
      "Objectives" : {
        "DurationInMs" : 5113,
        "TotalTasksDurationInMs" : 36659,
        "IOBytes" : {
          "Total" : 469209682,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 469205474,
            "SW" : 4208
          }
        }
      }
    },
    "4" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -340085513,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 360000000,
                "rowCount" : 15000000
              },
              "compileTime" : {
                "sizeInBytes" : 360000000,
                "rowCount" : 15000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_custkey#37L, c_nationkey#40L] "
          },
          "1" : {
            "sign" : -1462128824,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3495000000,
                "rowCount" : 15000000
              },
              "compileTime" : {
                "sizeInBytes" : 3495000000,
                "rowCount" : 15000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_custkey#37L) AND isnotnull(c_nationkey#40L)) "
          },
          "2" : {
            "sign" : -2125873440,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3495000000,
                "rowCount" : 15000000
              },
              "compileTime" : {
                "sizeInBytes" : 3495000000,
                "rowCount" : 15000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_custkey#37L, c_name#38, c_address#39, c_nationkey#40L, c_phone#41, c_acctbal#42, c_comment#43, c_mktsegment#44], `spark_catalog`.`tpch_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [c_custkey#37L, c_nationkey#40L]\n+- Filter (isnotnull(c_custkey#37L) AND isnotnull(c_nationkey#40L))\n   +- Relation spark_catalog.tpch_100.customer[c_custkey#37L,c_name#38,c_address#39,c_nationkey#40L,c_phone#41,c_acctbal#42,c_comment#43,c_mktsegment#44] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 2005873147,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 360000000,
            "rowCount" : 15000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [c_custkey#37L, c_nationkey#40L] Input [3]: [c_custkey#37L, c_nationkey#40L, c_mktsegment#44] "
          },
          "1" : {
            "sign" : -533944886,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 360000000,
            "rowCount" : 15000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [c_custkey#37L, c_nationkey#40L, c_mktsegment#44] Condition : (isnotnull(c_custkey#37L) AND isnotnull(c_nationkey#40L)) "
          },
          "2" : {
            "sign" : 567929138,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 360000000,
            "rowCount" : 15000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.customer Output [3]: [c_custkey#37L, c_nationkey#40L, c_mktsegment#44] Batched: true Location: CatalogFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/customer] PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)] ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpch_100.customer",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [c_custkey#37L, c_nationkey#40L]\n+- Filter (isnotnull(c_custkey#37L) AND isnotnull(c_nationkey#40L))\n   +- FileScan parquet spark_catalog.tpch_100.customer[c_custkey#37L,c_nationkey#40L,c_mktsegment#44] Batched: true, DataFilters: [isnotnull(c_custkey#37L), isnotnull(c_nationkey#40L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)], ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 360000000,
        "inputRowCount" : 15000000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 6 ],
      "Objectives" : {
        "DurationInMs" : 7372,
        "TotalTasksDurationInMs" : 6806,
        "IOBytes" : {
          "Total" : 234506706,
          "Details" : {
            "IR" : 86367163,
            "IW" : 0,
            "SR" : 0,
            "SW" : 148139543
          }
        }
      }
    },
    "9" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -587399745,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3072,
                "rowCount" : 32
              },
              "compileTime" : {
                "sizeInBytes" : 1213419948,
                "rowCount" : -1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [supp_nation#64, cust_nation#65, l_year#66], [supp_nation#64, cust_nation#65, l_year#66, sum(volume#67) AS revenue#68], HashAggregate(keys=[supp_nation#64, cust_nation#65, l_year#66], functions=[sum(volume#67)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [supp_nation#64, cust_nation#65, l_year#66], [supp_nation#64, cust_nation#65, l_year#66, sum(volume#67) AS revenue#68], HashAggregate(keys=[supp_nation#64, cust_nation#65, l_year#66], functions=[sum(volume#67)])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1805513418,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 3072,
            "rowCount" : 32,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [5]: [supp_nation#64, cust_nation#65, l_year#66, sum#81, isEmpty#82] Keys [3]: [supp_nation#64, cust_nation#65, l_year#66] Functions [1]: [sum(volume#67)] Aggregate Attributes [1]: [sum(volume#67)#74] Results [4]: [supp_nation#64, cust_nation#65, l_year#66, sum(volume#67)#74 AS revenue#68] "
          },
          "1" : {
            "sign" : 412459648,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 1213419948,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [5]: [supp_nation#64, cust_nation#65, l_year#66, sum#81, isEmpty#82] Arguments: 8 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[supp_nation#64, cust_nation#65, l_year#66], functions=[sum(volume#67)], output=[supp_nation#64, cust_nation#65, l_year#66, revenue#68])\n+- ShuffleQueryStage 8\n   +- Exchange hashpartitioning(supp_nation#64, cust_nation#65, l_year#66, 200), ENSURE_REQUIREMENTS, [plan_id=896]\n      +- *(15) HashAggregate(keys=[supp_nation#64, cust_nation#65, l_year#66], functions=[partial_sum(volume#67)], output=[supp_nation#64, cust_nation#65, l_year#66, sum#81, isEmpty#82])\n         +- *(15) Project [n_name#46 AS supp_nation#64, n_name#70 AS cust_nation#65, year(l_shipdate#27) AS l_year#66, (l_extendedprice#17 * (1 - l_discount#18)) AS volume#67]\n            +- *(15) SortMergeJoin [o_custkey#29L, n_nationkey#69L], [c_custkey#37L, c_nationkey#40L], Inner\n               :- *(13) Sort [o_custkey#29L ASC NULLS FIRST, n_nationkey#69L ASC NULLS FIRST], false, 0\n               :  +- AQEShuffleRead coalesced\n               :     +- ShuffleQueryStage 7\n               :        +- Exchange hashpartitioning(o_custkey#29L, n_nationkey#69L, 200), ENSURE_REQUIREMENTS, [plan_id=799]\n               :           +- *(12) Project [l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L, n_name#46, n_nationkey#69L, n_name#70]\n               :              +- *(12) BroadcastHashJoin [s_nationkey#8L], [n_nationkey#45L], Inner, BuildRight, false\n               :                 :- *(12) Project [s_nationkey#8L, l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L]\n               :                 :  +- *(12) SortMergeJoin [l_orderkey#12L], [o_orderkey#28L], Inner\n               :                 :     :- *(10) Sort [l_orderkey#12L ASC NULLS FIRST], false, 0\n               :                 :     :  +- AQEShuffleRead coalesced\n               :                 :     :     +- ShuffleQueryStage 5\n               :                 :     :        +- Exchange hashpartitioning(l_orderkey#12L, 200), ENSURE_REQUIREMENTS, [plan_id=478]\n               :                 :     :           +- *(8) Project [s_nationkey#8L, l_orderkey#12L, l_extendedprice#17, l_discount#18, l_shipdate#27]\n               :                 :     :              +- *(8) SortMergeJoin [s_suppkey#5L], [l_suppkey#14L], Inner\n               :                 :     :                 :- *(6) Sort [s_suppkey#5L ASC NULLS FIRST], false, 0\n               :                 :     :                 :  +- AQEShuffleRead coalesced\n               :                 :     :                 :     +- ShuffleQueryStage 0\n               :                 :     :                 :        +- Exchange hashpartitioning(s_suppkey#5L, 200), ENSURE_REQUIREMENTS, [plan_id=227]\n               :                 :     :                 :           +- *(1) Filter (isnotnull(s_suppkey#5L) AND isnotnull(s_nationkey#8L))\n               :                 :     :                 :              +- *(1) ColumnarToRow\n               :                 :     :                 :                 +- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#5L,s_nationkey#8L] Batched: true, DataFilters: [isnotnull(s_suppkey#5L), isnotnull(s_nationkey#8L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>\n               :                 :     :                 +- *(7) Sort [l_suppkey#14L ASC NULLS FIRST], false, 0\n               :                 :     :                    +- AQEShuffleRead coalesced\n               :                 :     :                       +- ShuffleQueryStage 1\n               :                 :     :                          +- Exchange hashpartitioning(l_suppkey#14L, 200), ENSURE_REQUIREMENTS, [plan_id=244]\n               :                 :     :                             +- *(2) Filter (isnotnull(l_suppkey#14L) AND isnotnull(l_orderkey#12L))\n               :                 :     :                                +- *(2) ColumnarToRow\n               :                 :     :                                   +- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#12L,l_suppkey#14L,l_extendedprice#17,l_discount#18,l_shipdate#27] Batched: true, DataFilters: [isnotnull(l_suppkey#14L), isnotnull(l_orderkey#12L)], Format: Parquet, Location: InMemoryFileIndex(731 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem..., PartitionFilters: [isnotnull(l_shipdate#27), (l_shipdate#27 >= 1995-01-01), (l_shipdate#27 <= 1996-12-31)], PushedFilters: [IsNotNull(l_suppkey), IsNotNull(l_orderkey)], ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2)>\n               :                 :     +- *(11) Sort [o_orderkey#28L ASC NULLS FIRST], false, 0\n               :                 :        +- AQEShuffleRead coalesced\n               :                 :           +- ShuffleQueryStage 2\n               :                 :              +- Exchange hashpartitioning(o_orderkey#28L, 200), ENSURE_REQUIREMENTS, [plan_id=267]\n               :                 :                 +- *(3) Project [o_orderkey#28L, o_custkey#29L]\n               :                 :                    +- *(3) Filter (isnotnull(o_orderkey#28L) AND isnotnull(o_custkey#29L))\n               :                 :                       +- *(3) ColumnarToRow\n               :                 :                          +- FileScan parquet spark_catalog.tpch_100.orders[o_orderkey#28L,o_custkey#29L,o_orderdate#36] Batched: true, DataFilters: [isnotnull(o_orderkey#28L), isnotnull(o_custkey#29L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/orders], PartitionFilters: [], PushedFilters: [IsNotNull(o_orderkey), IsNotNull(o_custkey)], ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint>\n               :                 +- BroadcastQueryStage 6\n               :                    +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=512]\n               :                       +- *(9) BroadcastNestedLoopJoin BuildRight, Inner, (((n_name#46 = MOZAMBIQUE) AND (n_name#70 = UNITED KINGDOM)) OR ((n_name#46 = UNITED KINGDOM) AND (n_name#70 = MOZAMBIQUE)))\n               :                          :- *(9) Filter (isnotnull(n_nationkey#45L) AND ((n_name#46 = MOZAMBIQUE) OR (n_name#46 = UNITED KINGDOM)))\n               :                          :  +- *(9) ColumnarToRow\n               :                          :     +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#45L,n_name#46] Batched: true, DataFilters: [isnotnull(n_nationkey#45L), ((n_name#46 = MOZAMBIQUE) OR (n_name#46 = UNITED KINGDOM))], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), Or(EqualTo(n_name,MOZAMBIQUE),EqualTo(n_name,UNITED KINGDOM))], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n               :                          +- BroadcastQueryStage 3\n               :                             +- BroadcastExchange IdentityBroadcastMode, [plan_id=288]\n               :                                +- *(4) Filter (isnotnull(n_nationkey#69L) AND ((n_name#70 = UNITED KINGDOM) OR (n_name#70 = MOZAMBIQUE)))\n               :                                   +- *(4) ColumnarToRow\n               :                                      +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#69L,n_name#70] Batched: true, DataFilters: [isnotnull(n_nationkey#69L), ((n_name#70 = UNITED KINGDOM) OR (n_name#70 = MOZAMBIQUE))], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), Or(EqualTo(n_name,UNITED KINGDOM),EqualTo(n_name,MOZAMBIQUE))], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n               +- *(14) Sort [c_custkey#37L ASC NULLS FIRST, c_nationkey#40L ASC NULLS FIRST], false, 0\n                  +- AQEShuffleRead coalesced\n                     +- ShuffleQueryStage 4\n                        +- Exchange hashpartitioning(c_custkey#37L, c_nationkey#40L, 200), ENSURE_REQUIREMENTS, [plan_id=311]\n                           +- *(5) Project [c_custkey#37L, c_nationkey#40L]\n                              +- *(5) Filter (isnotnull(c_custkey#37L) AND isnotnull(c_nationkey#40L))\n                                 +- *(5) ColumnarToRow\n                                    +- FileScan parquet spark_catalog.tpch_100.customer[c_custkey#37L,c_nationkey#40L,c_mktsegment#44] Batched: true, DataFilters: [isnotnull(c_custkey#37L), isnotnull(c_nationkey#40L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)], ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3072,
        "inputRowCount" : 32
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "6" : [ 0, 0, 0, 0, 0, 1136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 9,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 30, 38 ],
      "Objectives" : {
        "DurationInMs" : 303,
        "TotalTasksDurationInMs" : 267,
        "IOBytes" : {
          "Total" : 8928,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 8416,
            "SW" : 512
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1604581481,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 256,
                "rowCount" : 4
              },
              "compileTime" : {
                "sizeInBytes" : 256,
                "rowCount" : 4
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (((n_name#46 = MOZAMBIQUE) AND (n_name#70 = UNITED KINGDOM)) OR ((n_name#46 = UNITED KINGDOM) AND (n_name#70 = MOZAMBIQUE))) "
          }
        },
        "links" : [ ],
        "rawPlan" : "Join Inner, (((n_name#46 = MOZAMBIQUE) AND (n_name#70 = UNITED KINGDOM)) OR ((n_name#46 = UNITED KINGDOM) AND (n_name#70 = MOZAMBIQUE)))\n:- Project [n_nationkey#45L, n_name#46]\n:  +- Filter (isnotnull(n_nationkey#45L) AND ((n_name#46 = MOZAMBIQUE) OR (n_name#46 = UNITED KINGDOM)))\n:     +- Relation spark_catalog.tpch_100.nation[n_nationkey#45L,n_name#46,n_regionkey#47L,n_comment#48] parquet\n+- Project [n_nationkey#69L, n_name#70]\n   +- Filter (isnotnull(n_nationkey#69L) AND ((n_name#70 = UNITED KINGDOM) OR (n_name#70 = MOZAMBIQUE)))\n      +- Relation spark_catalog.tpch_100.nation[n_nationkey#69L,n_name#70,n_regionkey#71L,n_comment#72] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -684247888,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastNestedLoopJoinExec",
            "sizeInBytes" : 256,
            "rowCount" : 4,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastNestedLoopJoin Join type: Inner Join condition: (((n_name#46 = MOZAMBIQUE) AND (n_name#70 = UNITED KINGDOM)) OR ((n_name#46 = UNITED KINGDOM) AND (n_name#70 = MOZAMBIQUE))) "
          },
          "1" : {
            "sign" : 2006201326,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 72,
            "rowCount" : 2,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [n_nationkey#45L, n_name#46] Condition : (isnotnull(n_nationkey#45L) AND ((n_name#46 = MOZAMBIQUE) OR (n_name#46 = UNITED KINGDOM))) "
          },
          "2" : {
            "sign" : -1984923102,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 72,
            "rowCount" : 2,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.nation Output [2]: [n_nationkey#45L, n_name#46] Batched: true Location: InMemoryFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation] PushedFilters: [IsNotNull(n_nationkey), Or(EqualTo(n_name,MOZAMBIQUE),EqualTo(n_name,UNITED KINGDOM))] ReadSchema: struct<n_nationkey:bigint,n_name:string> "
          },
          "3" : {
            "sign" : -1206524259,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 80,
            "rowCount" : 2,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [n_nationkey#69L, n_name#70] Arguments: 3 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpch_100.nation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "BroadcastNestedLoopJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "BroadcastQueryStage",
          "toId" : 0,
          "toName" : "BroadcastNestedLoopJoin",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "BroadcastNestedLoopJoin BuildRight, Inner, (((n_name#46 = MOZAMBIQUE) AND (n_name#70 = UNITED KINGDOM)) OR ((n_name#46 = UNITED KINGDOM) AND (n_name#70 = MOZAMBIQUE)))\n:- Filter (isnotnull(n_nationkey#45L) AND ((n_name#46 = MOZAMBIQUE) OR (n_name#46 = UNITED KINGDOM)))\n:  +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#45L,n_name#46] Batched: true, DataFilters: [isnotnull(n_nationkey#45L), ((n_name#46 = MOZAMBIQUE) OR (n_name#46 = UNITED KINGDOM))], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), Or(EqualTo(n_name,MOZAMBIQUE),EqualTo(n_name,UNITED KINGDOM))], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n+- BroadcastQueryStage 3\n   +- BroadcastExchange IdentityBroadcastMode, [plan_id=288]\n      +- *(4) Filter (isnotnull(n_nationkey#69L) AND ((n_name#70 = UNITED KINGDOM) OR (n_name#70 = MOZAMBIQUE)))\n         +- *(4) ColumnarToRow\n            +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#69L,n_name#70] Batched: true, DataFilters: [isnotnull(n_nationkey#69L), ((n_name#70 = UNITED KINGDOM) OR (n_name#70 = MOZAMBIQUE))], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), Or(EqualTo(n_name,UNITED KINGDOM),EqualTo(n_name,MOZAMBIQUE))], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 152,
        "inputRowCount" : 4
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 7 ],
      "Objectives" : {
        "DurationInMs" : 6771,
        "TotalTasksDurationInMs" : 173,
        "IOBytes" : {
          "Total" : 2780,
          "Details" : {
            "IR" : 2780,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "10" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 338769793,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1213419948,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 1213419948,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [supp_nation#64 ASC NULLS FIRST, cust_nation#65 ASC NULLS FIRST, l_year#66 ASC NULLS FIRST], true "
          }
        },
        "links" : [ ],
        "rawPlan" : "Sort [supp_nation#64 ASC NULLS FIRST, cust_nation#65 ASC NULLS FIRST, l_year#66 ASC NULLS FIRST], true\n+- Aggregate [supp_nation#64, cust_nation#65, l_year#66], [supp_nation#64, cust_nation#65, l_year#66, sum(volume#67) AS revenue#68]\n   +- Project [n_name#46 AS supp_nation#64, n_name#70 AS cust_nation#65, year(l_shipdate#27) AS l_year#66, (l_extendedprice#17 * (1 - l_discount#18)) AS volume#67]\n      +- Join Inner, ((c_custkey#37L = o_custkey#29L) AND (c_nationkey#40L = n_nationkey#69L))\n         :- Project [l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L, n_name#46, n_nationkey#69L, n_name#70]\n         :  +- Join Inner, (s_nationkey#8L = n_nationkey#45L)\n         :     :- Project [s_nationkey#8L, l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L]\n         :     :  +- Join Inner, (o_orderkey#28L = l_orderkey#12L)\n         :     :     :- Project [s_nationkey#8L, l_orderkey#12L, l_extendedprice#17, l_discount#18, l_shipdate#27]\n         :     :     :  +- Join Inner, (s_suppkey#5L = l_suppkey#14L)\n         :     :     :     :- Project [s_suppkey#5L, s_nationkey#8L]\n         :     :     :     :  +- Filter (isnotnull(s_suppkey#5L) AND isnotnull(s_nationkey#8L))\n         :     :     :     :     +- Relation spark_catalog.tpch_100.supplier[s_suppkey#5L,s_name#6,s_address#7,s_nationkey#8L,s_phone#9,s_acctbal#10,s_comment#11] parquet\n         :     :     :     +- Project [l_orderkey#12L, l_suppkey#14L, l_extendedprice#17, l_discount#18, l_shipdate#27]\n         :     :     :        +- Filter ((((isnotnull(l_shipdate#27) AND (l_shipdate#27 >= 1995-01-01)) AND (l_shipdate#27 <= 1996-12-31)) AND isnotnull(l_suppkey#14L)) AND isnotnull(l_orderkey#12L))\n         :     :     :           +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#12L,l_partkey#13L,l_suppkey#14L,l_linenumber#15,l_quantity#16,l_extendedprice#17,l_discount#18,l_tax#19,l_returnflag#20,l_linestatus#21,l_commitdate#22,l_receiptdate#23,l_shipinstruct#24,l_shipmode#25,l_comment#26,l_shipdate#27] parquet\n         :     :     +- Project [o_orderkey#28L, o_custkey#29L]\n         :     :        +- Filter (isnotnull(o_orderkey#28L) AND isnotnull(o_custkey#29L))\n         :     :           +- Relation spark_catalog.tpch_100.orders[o_orderkey#28L,o_custkey#29L,o_orderstatus#30,o_totalprice#31,o_orderpriority#32,o_clerk#33,o_shippriority#34,o_comment#35,o_orderdate#36] parquet\n         :     +- Join Inner, (((n_name#46 = MOZAMBIQUE) AND (n_name#70 = UNITED KINGDOM)) OR ((n_name#46 = UNITED KINGDOM) AND (n_name#70 = MOZAMBIQUE)))\n         :        :- Project [n_nationkey#45L, n_name#46]\n         :        :  +- Filter (isnotnull(n_nationkey#45L) AND ((n_name#46 = MOZAMBIQUE) OR (n_name#46 = UNITED KINGDOM)))\n         :        :     +- Relation spark_catalog.tpch_100.nation[n_nationkey#45L,n_name#46,n_regionkey#47L,n_comment#48] parquet\n         :        +- Project [n_nationkey#69L, n_name#70]\n         :           +- Filter (isnotnull(n_nationkey#69L) AND ((n_name#70 = UNITED KINGDOM) OR (n_name#70 = MOZAMBIQUE)))\n         :              +- Relation spark_catalog.tpch_100.nation[n_nationkey#69L,n_name#70,n_regionkey#71L,n_comment#72] parquet\n         +- Project [c_custkey#37L, c_nationkey#40L]\n            +- Filter (isnotnull(c_custkey#37L) AND isnotnull(c_nationkey#40L))\n               +- Relation spark_catalog.tpch_100.customer[c_custkey#37L,c_name#38,c_address#39,c_nationkey#40L,c_phone#41,c_acctbal#42,c_comment#43,c_mktsegment#44] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 929028383,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : 1213419948,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [4]: [supp_nation#64, cust_nation#65, l_year#66, revenue#68] Arguments: [supp_nation#64 ASC NULLS FIRST, cust_nation#65 ASC NULLS FIRST, l_year#66 ASC NULLS FIRST], true, 0 "
          },
          "1" : {
            "sign" : 1885489873,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 352,
            "rowCount" : 4,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [supp_nation#64, cust_nation#65, l_year#66, revenue#68] Arguments: 9 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [supp_nation#64 ASC NULLS FIRST, cust_nation#65 ASC NULLS FIRST, l_year#66 ASC NULLS FIRST], true, 0\n+- ShuffleQueryStage 9\n   +- Exchange rangepartitioning(supp_nation#64 ASC NULLS FIRST, cust_nation#65 ASC NULLS FIRST, l_year#66 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [plan_id=938]\n      +- *(16) HashAggregate(keys=[supp_nation#64, cust_nation#65, l_year#66], functions=[sum(volume#67)], output=[supp_nation#64, cust_nation#65, l_year#66, revenue#68])\n         +- AQEShuffleRead coalesced\n            +- ShuffleQueryStage 8\n               +- Exchange hashpartitioning(supp_nation#64, cust_nation#65, l_year#66, 200), ENSURE_REQUIREMENTS, [plan_id=896]\n                  +- *(15) HashAggregate(keys=[supp_nation#64, cust_nation#65, l_year#66], functions=[partial_sum(volume#67)], output=[supp_nation#64, cust_nation#65, l_year#66, sum#81, isEmpty#82])\n                     +- *(15) Project [n_name#46 AS supp_nation#64, n_name#70 AS cust_nation#65, year(l_shipdate#27) AS l_year#66, (l_extendedprice#17 * (1 - l_discount#18)) AS volume#67]\n                        +- *(15) SortMergeJoin [o_custkey#29L, n_nationkey#69L], [c_custkey#37L, c_nationkey#40L], Inner\n                           :- *(13) Sort [o_custkey#29L ASC NULLS FIRST, n_nationkey#69L ASC NULLS FIRST], false, 0\n                           :  +- AQEShuffleRead coalesced\n                           :     +- ShuffleQueryStage 7\n                           :        +- Exchange hashpartitioning(o_custkey#29L, n_nationkey#69L, 200), ENSURE_REQUIREMENTS, [plan_id=799]\n                           :           +- *(12) Project [l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L, n_name#46, n_nationkey#69L, n_name#70]\n                           :              +- *(12) BroadcastHashJoin [s_nationkey#8L], [n_nationkey#45L], Inner, BuildRight, false\n                           :                 :- *(12) Project [s_nationkey#8L, l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L]\n                           :                 :  +- *(12) SortMergeJoin [l_orderkey#12L], [o_orderkey#28L], Inner\n                           :                 :     :- *(10) Sort [l_orderkey#12L ASC NULLS FIRST], false, 0\n                           :                 :     :  +- AQEShuffleRead coalesced\n                           :                 :     :     +- ShuffleQueryStage 5\n                           :                 :     :        +- Exchange hashpartitioning(l_orderkey#12L, 200), ENSURE_REQUIREMENTS, [plan_id=478]\n                           :                 :     :           +- *(8) Project [s_nationkey#8L, l_orderkey#12L, l_extendedprice#17, l_discount#18, l_shipdate#27]\n                           :                 :     :              +- *(8) SortMergeJoin [s_suppkey#5L], [l_suppkey#14L], Inner\n                           :                 :     :                 :- *(6) Sort [s_suppkey#5L ASC NULLS FIRST], false, 0\n                           :                 :     :                 :  +- AQEShuffleRead coalesced\n                           :                 :     :                 :     +- ShuffleQueryStage 0\n                           :                 :     :                 :        +- Exchange hashpartitioning(s_suppkey#5L, 200), ENSURE_REQUIREMENTS, [plan_id=227]\n                           :                 :     :                 :           +- *(1) Filter (isnotnull(s_suppkey#5L) AND isnotnull(s_nationkey#8L))\n                           :                 :     :                 :              +- *(1) ColumnarToRow\n                           :                 :     :                 :                 +- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#5L,s_nationkey#8L] Batched: true, DataFilters: [isnotnull(s_suppkey#5L), isnotnull(s_nationkey#8L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>\n                           :                 :     :                 +- *(7) Sort [l_suppkey#14L ASC NULLS FIRST], false, 0\n                           :                 :     :                    +- AQEShuffleRead coalesced\n                           :                 :     :                       +- ShuffleQueryStage 1\n                           :                 :     :                          +- Exchange hashpartitioning(l_suppkey#14L, 200), ENSURE_REQUIREMENTS, [plan_id=244]\n                           :                 :     :                             +- *(2) Filter (isnotnull(l_suppkey#14L) AND isnotnull(l_orderkey#12L))\n                           :                 :     :                                +- *(2) ColumnarToRow\n                           :                 :     :                                   +- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#12L,l_suppkey#14L,l_extendedprice#17,l_discount#18,l_shipdate#27] Batched: true, DataFilters: [isnotnull(l_suppkey#14L), isnotnull(l_orderkey#12L)], Format: Parquet, Location: InMemoryFileIndex(731 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem..., PartitionFilters: [isnotnull(l_shipdate#27), (l_shipdate#27 >= 1995-01-01), (l_shipdate#27 <= 1996-12-31)], PushedFilters: [IsNotNull(l_suppkey), IsNotNull(l_orderkey)], ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2)>\n                           :                 :     +- *(11) Sort [o_orderkey#28L ASC NULLS FIRST], false, 0\n                           :                 :        +- AQEShuffleRead coalesced\n                           :                 :           +- ShuffleQueryStage 2\n                           :                 :              +- Exchange hashpartitioning(o_orderkey#28L, 200), ENSURE_REQUIREMENTS, [plan_id=267]\n                           :                 :                 +- *(3) Project [o_orderkey#28L, o_custkey#29L]\n                           :                 :                    +- *(3) Filter (isnotnull(o_orderkey#28L) AND isnotnull(o_custkey#29L))\n                           :                 :                       +- *(3) ColumnarToRow\n                           :                 :                          +- FileScan parquet spark_catalog.tpch_100.orders[o_orderkey#28L,o_custkey#29L,o_orderdate#36] Batched: true, DataFilters: [isnotnull(o_orderkey#28L), isnotnull(o_custkey#29L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/orders], PartitionFilters: [], PushedFilters: [IsNotNull(o_orderkey), IsNotNull(o_custkey)], ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint>\n                           :                 +- BroadcastQueryStage 6\n                           :                    +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=512]\n                           :                       +- *(9) BroadcastNestedLoopJoin BuildRight, Inner, (((n_name#46 = MOZAMBIQUE) AND (n_name#70 = UNITED KINGDOM)) OR ((n_name#46 = UNITED KINGDOM) AND (n_name#70 = MOZAMBIQUE)))\n                           :                          :- *(9) Filter (isnotnull(n_nationkey#45L) AND ((n_name#46 = MOZAMBIQUE) OR (n_name#46 = UNITED KINGDOM)))\n                           :                          :  +- *(9) ColumnarToRow\n                           :                          :     +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#45L,n_name#46] Batched: true, DataFilters: [isnotnull(n_nationkey#45L), ((n_name#46 = MOZAMBIQUE) OR (n_name#46 = UNITED KINGDOM))], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), Or(EqualTo(n_name,MOZAMBIQUE),EqualTo(n_name,UNITED KINGDOM))], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n                           :                          +- BroadcastQueryStage 3\n                           :                             +- BroadcastExchange IdentityBroadcastMode, [plan_id=288]\n                           :                                +- *(4) Filter (isnotnull(n_nationkey#69L) AND ((n_name#70 = UNITED KINGDOM) OR (n_name#70 = MOZAMBIQUE)))\n                           :                                   +- *(4) ColumnarToRow\n                           :                                      +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#69L,n_name#70] Batched: true, DataFilters: [isnotnull(n_nationkey#69L), ((n_name#70 = UNITED KINGDOM) OR (n_name#70 = MOZAMBIQUE))], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), Or(EqualTo(n_name,UNITED KINGDOM),EqualTo(n_name,MOZAMBIQUE))], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n                           +- *(14) Sort [c_custkey#37L ASC NULLS FIRST, c_nationkey#40L ASC NULLS FIRST], false, 0\n                              +- AQEShuffleRead coalesced\n                                 +- ShuffleQueryStage 4\n                                    +- Exchange hashpartitioning(c_custkey#37L, c_nationkey#40L, 200), ENSURE_REQUIREMENTS, [plan_id=311]\n                                       +- *(5) Project [c_custkey#37L, c_nationkey#40L]\n                                          +- *(5) Filter (isnotnull(c_custkey#37L) AND isnotnull(c_nationkey#40L))\n                                             +- *(5) ColumnarToRow\n                                                +- FileScan parquet spark_catalog.tpch_100.customer[c_custkey#37L,c_nationkey#40L,c_mktsegment#44] Batched: true, DataFilters: [isnotnull(c_custkey#37L), isnotnull(c_nationkey#40L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)], ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 352,
        "inputRowCount" : 4
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "7" : [ 129, 129, 129, 129 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 10,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 47 ],
      "Objectives" : {
        "DurationInMs" : 83,
        "TotalTasksDurationInMs" : 75,
        "IOBytes" : {
          "Total" : 512,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 512,
            "SW" : 0
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -673262362,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 26426862748,
                "rowCount" : 600610517
              },
              "compileTime" : {
                "sizeInBytes" : 26426862748,
                "rowCount" : 600610517
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_nationkey#8L, l_orderkey#12L, l_extendedprice#17, l_discount#18, l_shipdate#27] "
          },
          "1" : {
            "sign" : 397911717,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 36036631020,
                "rowCount" : 600610517
              },
              "compileTime" : {
                "sizeInBytes" : 36036631020,
                "rowCount" : 600610517
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#5L = l_suppkey#14L) "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [s_nationkey#8L, l_orderkey#12L, l_extendedprice#17, l_discount#18, l_shipdate#27]\n+- Join Inner, (s_suppkey#5L = l_suppkey#14L)\n   :- Project [s_suppkey#5L, s_nationkey#8L]\n   :  +- Filter (isnotnull(s_suppkey#5L) AND isnotnull(s_nationkey#8L))\n   :     +- Relation spark_catalog.tpch_100.supplier[s_suppkey#5L,s_name#6,s_address#7,s_nationkey#8L,s_phone#9,s_acctbal#10,s_comment#11] parquet\n   +- Project [l_orderkey#12L, l_suppkey#14L, l_extendedprice#17, l_discount#18, l_shipdate#27]\n      +- Filter ((((isnotnull(l_shipdate#27) AND (l_shipdate#27 >= 1995-01-01)) AND (l_shipdate#27 <= 1996-12-31)) AND isnotnull(l_suppkey#14L)) AND isnotnull(l_orderkey#12L))\n         +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#12L,l_partkey#13L,l_suppkey#14L,l_linenumber#15,l_quantity#16,l_extendedprice#17,l_discount#18,l_tax#19,l_returnflag#20,l_linestatus#21,l_commitdate#22,l_receiptdate#23,l_shipinstruct#24,l_shipmode#25,l_comment#26,l_shipdate#27] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 1054460259,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [5]: [l_orderkey#12L, l_suppkey#14L, l_extendedprice#17, l_discount#18, l_shipdate#27] Arguments: [l_suppkey#14L ASC NULLS FIRST], false, 0 "
          },
          "5" : {
            "sign" : -1130133627,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 8750457120,
            "rowCount" : 182301190,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [5]: [l_orderkey#12L, l_suppkey#14L, l_extendedprice#17, l_discount#18, l_shipdate#27] Arguments: 1 "
          },
          "1" : {
            "sign" : -299394325,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 36036631020,
            "rowCount" : 600610517,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [s_suppkey#5L] Right keys [1]: [l_suppkey#14L] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : -1813725978,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 26426862748,
            "rowCount" : 600610517,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [s_nationkey#8L, l_orderkey#12L, l_extendedprice#17, l_discount#18, l_shipdate#27] Input [7]: [s_suppkey#5L, s_nationkey#8L, l_orderkey#12L, l_suppkey#14L, l_extendedprice#17, l_discount#18, l_shipdate#27] "
          },
          "2" : {
            "sign" : 2082152246,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [s_suppkey#5L, s_nationkey#8L] Arguments: [s_suppkey#5L ASC NULLS FIRST], false, 0 "
          },
          "3" : {
            "sign" : -1948745135,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [s_suppkey#5L, s_nationkey#8L] Arguments: 0 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "SortMergeJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [s_nationkey#8L, l_orderkey#12L, l_extendedprice#17, l_discount#18, l_shipdate#27]\n+- SortMergeJoin [s_suppkey#5L], [l_suppkey#14L], Inner\n   :- Sort [s_suppkey#5L ASC NULLS FIRST], false, 0\n   :  +- ShuffleQueryStage 0\n   :     +- Exchange hashpartitioning(s_suppkey#5L, 200), ENSURE_REQUIREMENTS, [plan_id=227]\n   :        +- *(1) Filter (isnotnull(s_suppkey#5L) AND isnotnull(s_nationkey#8L))\n   :           +- *(1) ColumnarToRow\n   :              +- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#5L,s_nationkey#8L] Batched: true, DataFilters: [isnotnull(s_suppkey#5L), isnotnull(s_nationkey#8L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>\n   +- Sort [l_suppkey#14L ASC NULLS FIRST], false, 0\n      +- ShuffleQueryStage 1\n         +- Exchange hashpartitioning(l_suppkey#14L, 200), ENSURE_REQUIREMENTS, [plan_id=244]\n            +- *(2) Filter (isnotnull(l_suppkey#14L) AND isnotnull(l_orderkey#12L))\n               +- *(2) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#12L,l_suppkey#14L,l_extendedprice#17,l_discount#18,l_shipdate#27] Batched: true, DataFilters: [isnotnull(l_suppkey#14L), isnotnull(l_orderkey#12L)], Format: Parquet, Location: InMemoryFileIndex(731 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem..., PartitionFilters: [isnotnull(l_shipdate#27), (l_shipdate#27 >= 1995-01-01), (l_shipdate#27 <= 1996-12-31)], PushedFilters: [IsNotNull(l_suppkey), IsNotNull(l_orderkey)], ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2)>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 8774457120,
        "inputRowCount" : 183301190
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "1" : [ 19601972, 20520954, 21458748, 21266380, 21386610, 21458748, 20953782, 21488550, 21098058, 20996640, 21218288, 21482794, 21290426, 19751482, 21482794, 21170196, 21482794, 20641184, 21290426, 21482794, 20857598, 21338518, 21434702, 20251214, 21458748, 21194242, 21410656, 21482794, 19799574, 21194242, 19601972, 21482794, 21049966, 21338518, 20328586, 21410656, 21285192, 19962662, 21482794, 20737368, 20809506, 21362564, 20563812, 21074012, 20881644, 19847666, 21482794, 20136218, 21434702, 21482794, 21266380, 21410656, 21314472, 21434702, 21458748, 21482794, 21362564, 21410656, 20208356, 19679344, 20905690, 20833552, 19991942, 21242334, 21362564, 21482794, 21482794, 19986708, 19607206, 20713322, 20208356, 21266380, 20737368, 21218288, 21242334, 20400724, 21140916, 21410656, 21194242, 20689276, 21482794, 19577926, 20876410, 20833552, 20977828, 21434702, 21482794, 21410656, 20713322, 20756180, 21098058, 20376678, 21001874, 21482794, 21122104, 21025920, 21362564, 21386610, 21482794, 21386610, 21458748, 21482794, 21290426, 21074012, 21458748, 20929736, 20905690, 20256448, 21458748, 21482794, 20155030, 20136218, 20058846, 21314472, 21314472, 21482794, 20347398, 21194242, 21410656, 20785460, 20520954, 20472862, 21410656, 21170196, 21482794, 20496908, 21242334, 21482794, 21381376, 20780226, 21194242, 21482794, 20905690, 21482794, 20088126, 21122104, 21482794, 20448816, 21074012, 20953782, 21482794, 21482794, 21122104, 21001874, 21410656, 20659996, 20756180, 21482794, 21290426, 20472862, 21482794, 20641184, 20082892, 19607206, 20857598, 21482794, 21458748, 20641184, 21434702, 21098058, 21410656, 19770294, 21386610, 21314472, 21482794, 21458748, 20112172, 21434702, 21049966, 19607206, 21482794, 20587858, 20881644, 21242334, 20737368, 21285192, 21482794, 21482794, 20034800, 21477560, 20665230, 21194242, 19553880, 20352632, 20058846, 21194242, 21266380, 21266380, 21434702, 20569046, 21482794, 20617138, 20996640, 21482794, 21049966, 19679344, 21482794, 21386610, 21338518, 21309238 ],
        "0" : [ 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 52331, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 52331, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 52331, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 52331, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 57565, 57565, 52331, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 52331, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 10 ],
      "Objectives" : {
        "DurationInMs" : 22392,
        "TotalTasksDurationInMs" : 221602,
        "IOBytes" : {
          "Total" : 8129125830,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 3961170228,
            "SW" : 4167955602
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 264803515,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 24000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 24000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_suppkey#5L, s_nationkey#8L] "
          },
          "1" : {
            "sign" : -2033274478,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 201000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 201000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(s_suppkey#5L) AND isnotnull(s_nationkey#8L)) "
          },
          "2" : {
            "sign" : 1907625642,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 201000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 201000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_suppkey#5L, s_name#6, s_address#7, s_nationkey#8L, s_phone#9, s_acctbal#10, s_comment#11], `spark_catalog`.`tpch_100`.`supplier`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [s_suppkey#5L, s_nationkey#8L]\n+- Filter (isnotnull(s_suppkey#5L) AND isnotnull(s_nationkey#8L))\n   +- Relation spark_catalog.tpch_100.supplier[s_suppkey#5L,s_name#6,s_address#7,s_nationkey#8L,s_phone#9,s_acctbal#10,s_comment#11] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1584857713,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [s_suppkey#5L, s_nationkey#8L] Condition : (isnotnull(s_suppkey#5L) AND isnotnull(s_nationkey#8L)) "
          },
          "1" : {
            "sign" : -1047736743,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.supplier Output [2]: [s_suppkey#5L, s_nationkey#8L] Batched: true Location: InMemoryFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier] PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)] ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpch_100.supplier",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(s_suppkey#5L) AND isnotnull(s_nationkey#8L))\n+- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#5L,s_nationkey#8L] Batched: true, DataFilters: [isnotnull(s_suppkey#5L), isnotnull(s_nationkey#8L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 24000000,
        "inputRowCount" : 1000000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 1 ],
      "Objectives" : {
        "DurationInMs" : 2829,
        "TotalTasksDurationInMs" : 27645,
        "IOBytes" : {
          "Total" : 16319432,
          "Details" : {
            "IR" : 5700125,
            "IW" : 0,
            "SR" : 0,
            "SW" : 10619307
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 342675209,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 72,
                "rowCount" : 2
              },
              "compileTime" : {
                "sizeInBytes" : 72,
                "rowCount" : 2
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_nationkey#69L, n_name#70] "
          },
          "1" : {
            "sign" : 392740111,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 262,
                "rowCount" : 2
              },
              "compileTime" : {
                "sizeInBytes" : 262,
                "rowCount" : 2
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(n_nationkey#69L) AND ((n_name#70 = UNITED KINGDOM) OR (n_name#70 = MOZAMBIQUE))) "
          },
          "2" : {
            "sign" : 498240203,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3275,
                "rowCount" : 25
              },
              "compileTime" : {
                "sizeInBytes" : 3275,
                "rowCount" : 25
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [n_nationkey#69L, n_name#70, n_regionkey#71L, n_comment#72], `spark_catalog`.`tpch_100`.`nation`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [n_nationkey#69L, n_name#70]\n+- Filter (isnotnull(n_nationkey#69L) AND ((n_name#70 = UNITED KINGDOM) OR (n_name#70 = MOZAMBIQUE)))\n   +- Relation spark_catalog.tpch_100.nation[n_nationkey#69L,n_name#70,n_regionkey#71L,n_comment#72] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1130543599,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 72,
            "rowCount" : 2,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [n_nationkey#69L, n_name#70] Condition : (isnotnull(n_nationkey#69L) AND ((n_name#70 = UNITED KINGDOM) OR (n_name#70 = MOZAMBIQUE))) "
          },
          "1" : {
            "sign" : 1052016819,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 72,
            "rowCount" : 2,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.nation Output [2]: [n_nationkey#69L, n_name#70] Batched: true Location: InMemoryFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation] PushedFilters: [IsNotNull(n_nationkey), Or(EqualTo(n_name,UNITED KINGDOM),EqualTo(n_name,MOZAMBIQUE))] ReadSchema: struct<n_nationkey:bigint,n_name:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpch_100.nation",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(n_nationkey#69L) AND ((n_name#70 = UNITED KINGDOM) OR (n_name#70 = MOZAMBIQUE)))\n+- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#69L,n_name#70] Batched: true, DataFilters: [isnotnull(n_nationkey#69L), ((n_name#70 = UNITED KINGDOM) OR (n_name#70 = MOZAMBIQUE))], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), Or(EqualTo(n_name,UNITED KINGDOM),EqualTo(n_name,MOZAMBIQUE))], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 72,
        "inputRowCount" : 2
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 2 ],
      "Objectives" : {
        "DurationInMs" : 1971,
        "TotalTasksDurationInMs" : 506,
        "IOBytes" : {
          "Total" : 2780,
          "Details" : {
            "IR" : 2780,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1199423066,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 8007119956,
                "rowCount" : 181979999
              },
              "compileTime" : {
                "sizeInBytes" : 8007119956,
                "rowCount" : 181979999
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_orderkey#12L, l_suppkey#14L, l_extendedprice#17, l_discount#18, l_shipdate#27] "
          },
          "1" : {
            "sign" : 1751475634,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 33848279814,
                "rowCount" : 181979999
              },
              "compileTime" : {
                "sizeInBytes" : 33848279814,
                "rowCount" : 181979999
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(l_shipdate#27) AND (l_shipdate#27 >= 1995-01-01)) AND (l_shipdate#27 <= 1996-12-31)) AND isnotnull(l_suppkey#14L)) AND isnotnull(l_orderkey#12L)) "
          },
          "2" : {
            "sign" : 1604618698,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 33848279814,
                "rowCount" : 181979999
              },
              "compileTime" : {
                "sizeInBytes" : 33848279814,
                "rowCount" : 181979999
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [l_orderkey#12L, l_partkey#13L, l_suppkey#14L, l_linenumber#15, l_quantity#16, l_extendedprice#17, l_discount#18, l_tax#19, l_returnflag#20, l_linestatus#21, l_commitdate#22, l_receiptdate#23, l_shipinstruct#24, l_shipmode#25, l_comment#26, l_shipdate#27], `spark_catalog`.`tpch_100`.`lineitem`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [l_orderkey#12L, l_suppkey#14L, l_extendedprice#17, l_discount#18, l_shipdate#27]\n+- Filter ((((isnotnull(l_shipdate#27) AND (l_shipdate#27 >= 1995-01-01)) AND (l_shipdate#27 <= 1996-12-31)) AND isnotnull(l_suppkey#14L)) AND isnotnull(l_orderkey#12L))\n   +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#12L,l_partkey#13L,l_suppkey#14L,l_linenumber#15,l_quantity#16,l_extendedprice#17,l_discount#18,l_tax#19,l_returnflag#20,l_linestatus#21,l_commitdate#22,l_receiptdate#23,l_shipinstruct#24,l_shipmode#25,l_comment#26,l_shipdate#27] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -513548604,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 8007119956,
            "rowCount" : 181979999,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [5]: [l_orderkey#12L, l_suppkey#14L, l_extendedprice#17, l_discount#18, l_shipdate#27] Condition : (isnotnull(l_suppkey#14L) AND isnotnull(l_orderkey#12L)) "
          },
          "1" : {
            "sign" : 701603508,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 8007119956,
            "rowCount" : 181979999,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.lineitem Output [5]: [l_orderkey#12L, l_suppkey#14L, l_extendedprice#17, l_discount#18, l_shipdate#27] Batched: true Location: InMemoryFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem/l_shipdate=1995-01-01, ... 730 entries] PartitionFilters: [isnotnull(l_shipdate#27), (l_shipdate#27 >= 1995-01-01), (l_shipdate#27 <= 1996-12-31)] PushedFilters: [IsNotNull(l_suppkey), IsNotNull(l_orderkey)] ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2)> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpch_100.lineitem",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(l_suppkey#14L) AND isnotnull(l_orderkey#12L))\n+- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#12L,l_suppkey#14L,l_extendedprice#17,l_discount#18,l_shipdate#27] Batched: true, DataFilters: [isnotnull(l_suppkey#14L), isnotnull(l_orderkey#12L)], Format: Parquet, Location: InMemoryFileIndex(731 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem..., PartitionFilters: [isnotnull(l_shipdate#27), (l_shipdate#27 >= 1995-01-01), (l_shipdate#27 <= 1996-12-31)], PushedFilters: [IsNotNull(l_suppkey), IsNotNull(l_orderkey)], ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2)>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 8007119956,
        "inputRowCount" : 181979999
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 14758,
        "TotalTasksDurationInMs" : 194468,
        "IOBytes" : {
          "Total" : 6984107696,
          "Details" : {
            "IR" : 3033556775,
            "IW" : 0,
            "SR" : 0,
            "SW" : 3950550921
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 124821314,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 99831060,
                "rowCount" : 1188465
              },
              "compileTime" : {
                "sizeInBytes" : 99831060,
                "rowCount" : 1188465
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L, n_name#46, n_nationkey#69L, n_name#70] "
          },
          "1" : {
            "sign" : -1248328132,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 118846500,
                "rowCount" : 1188465
              },
              "compileTime" : {
                "sizeInBytes" : 118846500,
                "rowCount" : 1188465
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#8L = n_nationkey#45L) "
          },
          "2" : {
            "sign" : -1924477254,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 26462093768,
                "rowCount" : 601411222
              },
              "compileTime" : {
                "sizeInBytes" : 26462093768,
                "rowCount" : 601411222
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_nationkey#8L, l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L] "
          },
          "3" : {
            "sign" : 1850312715,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 36084673320,
                "rowCount" : 601411222
              },
              "compileTime" : {
                "sizeInBytes" : 36084673320,
                "rowCount" : 601411222
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (o_orderkey#28L = l_orderkey#12L) "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L, n_name#46, n_nationkey#69L, n_name#70]\n+- Join Inner, (s_nationkey#8L = n_nationkey#45L)\n   :- Project [s_nationkey#8L, l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L]\n   :  +- Join Inner, (o_orderkey#28L = l_orderkey#12L)\n   :     :- Project [s_nationkey#8L, l_orderkey#12L, l_extendedprice#17, l_discount#18, l_shipdate#27]\n   :     :  +- Join Inner, (s_suppkey#5L = l_suppkey#14L)\n   :     :     :- Project [s_suppkey#5L, s_nationkey#8L]\n   :     :     :  +- Filter (isnotnull(s_suppkey#5L) AND isnotnull(s_nationkey#8L))\n   :     :     :     +- Relation spark_catalog.tpch_100.supplier[s_suppkey#5L,s_name#6,s_address#7,s_nationkey#8L,s_phone#9,s_acctbal#10,s_comment#11] parquet\n   :     :     +- Project [l_orderkey#12L, l_suppkey#14L, l_extendedprice#17, l_discount#18, l_shipdate#27]\n   :     :        +- Filter ((((isnotnull(l_shipdate#27) AND (l_shipdate#27 >= 1995-01-01)) AND (l_shipdate#27 <= 1996-12-31)) AND isnotnull(l_suppkey#14L)) AND isnotnull(l_orderkey#12L))\n   :     :           +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#12L,l_partkey#13L,l_suppkey#14L,l_linenumber#15,l_quantity#16,l_extendedprice#17,l_discount#18,l_tax#19,l_returnflag#20,l_linestatus#21,l_commitdate#22,l_receiptdate#23,l_shipinstruct#24,l_shipmode#25,l_comment#26,l_shipdate#27] parquet\n   :     +- Project [o_orderkey#28L, o_custkey#29L]\n   :        +- Filter (isnotnull(o_orderkey#28L) AND isnotnull(o_custkey#29L))\n   :           +- Relation spark_catalog.tpch_100.orders[o_orderkey#28L,o_custkey#29L,o_orderstatus#30,o_totalprice#31,o_orderpriority#32,o_clerk#33,o_shippriority#34,o_comment#35,o_orderdate#36] parquet\n   +- Join Inner, (((n_name#46 = MOZAMBIQUE) AND (n_name#70 = UNITED KINGDOM)) OR ((n_name#46 = UNITED KINGDOM) AND (n_name#70 = MOZAMBIQUE)))\n      :- Project [n_nationkey#45L, n_name#46]\n      :  +- Filter (isnotnull(n_nationkey#45L) AND ((n_name#46 = MOZAMBIQUE) OR (n_name#46 = UNITED KINGDOM)))\n      :     +- Relation spark_catalog.tpch_100.nation[n_nationkey#45L,n_name#46,n_regionkey#47L,n_comment#48] parquet\n      +- Project [n_nationkey#69L, n_name#70]\n         +- Filter (isnotnull(n_nationkey#69L) AND ((n_name#70 = UNITED KINGDOM) OR (n_name#70 = MOZAMBIQUE)))\n            +- Relation spark_catalog.tpch_100.nation[n_nationkey#69L,n_name#70,n_regionkey#71L,n_comment#72] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : -1031903237,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048640,
            "rowCount" : 2,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [4]: [n_nationkey#45L, n_name#46, n_nationkey#69L, n_name#70] Arguments: 6 "
          },
          "4" : {
            "sign" : 1724136609,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [5]: [s_nationkey#8L, l_orderkey#12L, l_extendedprice#17, l_discount#18, l_shipdate#27] Arguments: [l_orderkey#12L ASC NULLS FIRST], false, 0 "
          },
          "5" : {
            "sign" : 684084909,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 8750457120,
            "rowCount" : 182301190,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [5]: [s_nationkey#8L, l_orderkey#12L, l_extendedprice#17, l_discount#18, l_shipdate#27] Arguments: 5 "
          },
          "6" : {
            "sign" : 1925542218,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [o_orderkey#28L, o_custkey#29L] Arguments: [o_orderkey#28L ASC NULLS FIRST], false, 0 "
          },
          "1" : {
            "sign" : 1740104991,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 118846500,
            "rowCount" : 1188465,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [s_nationkey#8L] Right keys [1]: [n_nationkey#45L] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 345188009,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 99831060,
            "rowCount" : 1188465,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [7]: [l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L, n_name#46, n_nationkey#69L, n_name#70] Input [9]: [s_nationkey#8L, l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L, n_nationkey#45L, n_name#46, n_nationkey#69L, n_name#70] "
          },
          "2" : {
            "sign" : 2025215575,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 26462093768,
            "rowCount" : 601411222,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [s_nationkey#8L, l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L] Input [7]: [s_nationkey#8L, l_orderkey#12L, l_extendedprice#17, l_discount#18, l_shipdate#27, o_orderkey#28L, o_custkey#29L] "
          },
          "7" : {
            "sign" : 2020293182,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 3600000000,
            "rowCount" : 150000000,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [o_orderkey#28L, o_custkey#29L] Arguments: 2 "
          },
          "3" : {
            "sign" : -1616925526,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 36084673320,
            "rowCount" : 601411222,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [l_orderkey#12L] Right keys [1]: [o_orderkey#28L] Join type: Inner Join condition: None "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Sort",
          "toId" : 3,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "ShuffleQueryStage",
          "toId" : 6,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Sort",
          "toId" : 3,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "SortMergeJoin",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L, n_name#46, n_nationkey#69L, n_name#70]\n+- BroadcastHashJoin [s_nationkey#8L], [n_nationkey#45L], Inner, BuildRight, false\n   :- Project [s_nationkey#8L, l_extendedprice#17, l_discount#18, l_shipdate#27, o_custkey#29L]\n   :  +- SortMergeJoin [l_orderkey#12L], [o_orderkey#28L], Inner\n   :     :- Sort [l_orderkey#12L ASC NULLS FIRST], false, 0\n   :     :  +- ShuffleQueryStage 5\n   :     :     +- Exchange hashpartitioning(l_orderkey#12L, 200), ENSURE_REQUIREMENTS, [plan_id=478]\n   :     :        +- *(8) Project [s_nationkey#8L, l_orderkey#12L, l_extendedprice#17, l_discount#18, l_shipdate#27]\n   :     :           +- *(8) SortMergeJoin [s_suppkey#5L], [l_suppkey#14L], Inner\n   :     :              :- *(6) Sort [s_suppkey#5L ASC NULLS FIRST], false, 0\n   :     :              :  +- AQEShuffleRead coalesced\n   :     :              :     +- ShuffleQueryStage 0\n   :     :              :        +- Exchange hashpartitioning(s_suppkey#5L, 200), ENSURE_REQUIREMENTS, [plan_id=227]\n   :     :              :           +- *(1) Filter (isnotnull(s_suppkey#5L) AND isnotnull(s_nationkey#8L))\n   :     :              :              +- *(1) ColumnarToRow\n   :     :              :                 +- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#5L,s_nationkey#8L] Batched: true, DataFilters: [isnotnull(s_suppkey#5L), isnotnull(s_nationkey#8L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>\n   :     :              +- *(7) Sort [l_suppkey#14L ASC NULLS FIRST], false, 0\n   :     :                 +- AQEShuffleRead coalesced\n   :     :                    +- ShuffleQueryStage 1\n   :     :                       +- Exchange hashpartitioning(l_suppkey#14L, 200), ENSURE_REQUIREMENTS, [plan_id=244]\n   :     :                          +- *(2) Filter (isnotnull(l_suppkey#14L) AND isnotnull(l_orderkey#12L))\n   :     :                             +- *(2) ColumnarToRow\n   :     :                                +- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#12L,l_suppkey#14L,l_extendedprice#17,l_discount#18,l_shipdate#27] Batched: true, DataFilters: [isnotnull(l_suppkey#14L), isnotnull(l_orderkey#12L)], Format: Parquet, Location: InMemoryFileIndex(731 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem..., PartitionFilters: [isnotnull(l_shipdate#27), (l_shipdate#27 >= 1995-01-01), (l_shipdate#27 <= 1996-12-31)], PushedFilters: [IsNotNull(l_suppkey), IsNotNull(l_orderkey)], ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2)>\n   :     +- Sort [o_orderkey#28L ASC NULLS FIRST], false, 0\n   :        +- ShuffleQueryStage 2\n   :           +- Exchange hashpartitioning(o_orderkey#28L, 200), ENSURE_REQUIREMENTS, [plan_id=267]\n   :              +- *(3) Project [o_orderkey#28L, o_custkey#29L]\n   :                 +- *(3) Filter (isnotnull(o_orderkey#28L) AND isnotnull(o_custkey#29L))\n   :                    +- *(3) ColumnarToRow\n   :                       +- FileScan parquet spark_catalog.tpch_100.orders[o_orderkey#28L,o_custkey#29L,o_orderdate#36] Batched: true, DataFilters: [isnotnull(o_orderkey#28L), isnotnull(o_custkey#29L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/orders], PartitionFilters: [], PushedFilters: [IsNotNull(o_orderkey), IsNotNull(o_custkey)], ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint>\n   +- BroadcastQueryStage 6\n      +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=512]\n         +- *(9) BroadcastNestedLoopJoin BuildRight, Inner, (((n_name#46 = MOZAMBIQUE) AND (n_name#70 = UNITED KINGDOM)) OR ((n_name#46 = UNITED KINGDOM) AND (n_name#70 = MOZAMBIQUE)))\n            :- *(9) Filter (isnotnull(n_nationkey#45L) AND ((n_name#46 = MOZAMBIQUE) OR (n_name#46 = UNITED KINGDOM)))\n            :  +- *(9) ColumnarToRow\n            :     +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#45L,n_name#46] Batched: true, DataFilters: [isnotnull(n_nationkey#45L), ((n_name#46 = MOZAMBIQUE) OR (n_name#46 = UNITED KINGDOM))], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), Or(EqualTo(n_name,MOZAMBIQUE),EqualTo(n_name,UNITED KINGDOM))], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n            +- BroadcastQueryStage 3\n               +- BroadcastExchange IdentityBroadcastMode, [plan_id=288]\n                  +- *(4) Filter (isnotnull(n_nationkey#69L) AND ((n_name#70 = UNITED KINGDOM) OR (n_name#70 = MOZAMBIQUE)))\n                     +- *(4) ColumnarToRow\n                        +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#69L,n_name#70] Batched: true, DataFilters: [isnotnull(n_nationkey#69L), ((n_name#70 = UNITED KINGDOM) OR (n_name#70 = MOZAMBIQUE))], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), Or(EqualTo(n_name,UNITED KINGDOM),EqualTo(n_name,MOZAMBIQUE))], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 12351505760,
        "inputRowCount" : 332301192
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "2" : [ 10756415, 10781702, 10773273, 10781702, 10790131, 10773273, 10739557, 10714270, 10815418, 10764844, 10815418, 10806989, 10756415, 10697412, 10781702, 10806989, 10714270, 10790131, 10806989, 10756415, 10774041, 10823847, 10764844, 10773273, 10764844, 10798560, 10756415, 10849134, 10781702, 10815418, 10806989, 10798560, 10781702, 10739557, 10773273, 10739557, 10756415, 10781702, 10781702, 10790131, 10756415, 10840705, 10739557, 10731128, 10756415, 10832276, 10849134, 10781702, 10731128, 10773273, 10764844, 10798560, 10781702, 10798560, 10739557, 10773273, 10790131, 10764844, 10722699, 10773273, 10756415, 10790131, 10823847, 10739557, 10773273, 10764844, 10840705, 10764844, 10798560, 10722699, 10747986, 10790131, 10823847, 10756415, 10764844, 10798560, 10790131, 10798560, 10806989, 10773273, 10781702, 10747986, 10773273, 10781702, 10773273, 10823847, 10790131, 10705841, 10849134, 10756415, 10781702, 10815418, 10739557, 10773273, 10840705, 10781702, 10764844, 10849134, 10663696, 10739557, 10832276, 10722699, 10739557, 10790131, 10756415, 10790131, 10790131, 10739557, 10739557, 10781702, 10815418, 10722699, 10773273, 10756415, 10764844, 10815418, 10781702, 10823847, 10714270, 10773273, 10840705, 10731128, 10747986, 10722699, 10798560, 10722699, 10815418, 10806989, 10747986, 10731128, 10790131, 10705841, 10764844, 10798560, 10756415, 10764844, 10764844, 10849134, 10781702, 10722699, 10714270, 10739557, 10764844, 10790131, 10815418, 10790131, 10781702, 10714270, 10773273, 10815418, 10731128, 10798560, 10790131, 10773273, 10739557, 10815418, 10832276, 10764844, 10747986, 10764844, 10722699, 10815418, 10823847, 10774041, 10731128, 10697412, 10806989, 10773273, 10806989, 10857563, 10823847, 10806989, 10857563, 10790131, 10857563, 10747986, 10798560, 10747986, 10764844, 10832276, 10773273, 10739557, 10773273, 10747986, 10798560, 10781702, 10832276, 10764844, 10806989, 10840705, 10756415, 10739557, 10756415, 10781702, 10747986, 10739557, 10781702, 10790131, 10781702, 10773273 ],
        "4" : [ 21374305, 21342299, 21342299, 21406311, 21342299, 21342299, 21374305, 21342299, 21406311, 21374305, 21374305, 21342299, 21374305, 21342299, 21406311, 21406311, 21342299, 21342299, 21342299, 21342299, 21406311, 21342299, 21374305, 21342299, 21342299, 21374305, 21342299, 21374305, 21374305, 21374305, 21374305, 21374305, 21342299, 21374305, 21374305, 21342299, 21374305, 21342299, 21374305, 21374305, 21374305, 21342299, 21374305, 21374305, 21342299, 21406311, 21342299, 21374305, 21438317, 21374305, 21342299, 21406311, 21406311, 21374305, 21342299, 21342299, 21374305, 21438317, 21374305, 21342299, 21374305, 21374305, 21342299, 21374305, 21374305, 21374305, 21406311, 21374305, 21406311, 21374305, 21342299, 21342299, 21342299, 21374305, 21406311, 21438317, 21406311, 21406311, 21342299, 21342299, 21342299, 21342299, 21406311, 21342299, 21342299, 21374305, 21374305, 21342299, 21342299, 21406311, 21342299, 21406311, 21342299, 21342299, 21406311, 21342299, 21342299, 21406311, 21342299, 21342299, 21438317, 21374305, 21374305, 21406311, 21406311, 21406311, 21438317, 21374305, 21406311, 21342299, 21374305, 21342299, 21406311, 21342299, 21342299, 21374305, 21342299, 21374305, 21374305, 21342299, 21342299, 21342299, 21374305, 21374305, 21342299, 21374305, 21374305, 21374305, 21374305, 21374305, 21374305, 21342299, 21374305, 21374305, 21342299, 21374305, 21438317, 21374305, 21342299, 21342299, 21342299, 21374305, 21374305, 21374305, 21406311, 21374305, 21374305, 21342299, 21374305, 21374305, 21342299, 21342299, 21342299, 21438317, 21342299, 21374305, 21470323, 21374305, 21342299, 21342299, 21342299, 21342299, 21374305, 21342299, 21374305, 21342299, 21342299, 21342299, 21374305, 21374305, 21438317, 21406311, 21342299, 21374305, 21406311, 21374305, 21374305, 21342299, 21374305, 21438317, 21342299, 21406311, 21374305, 21438317, 21342299, 21438317, 21406311, 21438317, 21374305, 21342299, 21374305, 21342299, 21374305, 21342299, 21342299, 21342299, 21374305, 21374305, 21342299, 21342299 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 15 ],
      "Objectives" : {
        "DurationInMs" : 14074,
        "TotalTasksDurationInMs" : 208102,
        "IOBytes" : {
          "Total" : 6529452447,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 6208386516,
            "SW" : 321065931
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 447258288,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3600000000,
                "rowCount" : 150000000
              },
              "compileTime" : {
                "sizeInBytes" : 3600000000,
                "rowCount" : 150000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [o_orderkey#28L, o_custkey#29L] "
          },
          "1" : {
            "sign" : -1767513999,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 24300000000,
                "rowCount" : 150000000
              },
              "compileTime" : {
                "sizeInBytes" : 24300000000,
                "rowCount" : 150000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(o_orderkey#28L) AND isnotnull(o_custkey#29L)) "
          },
          "2" : {
            "sign" : -671952077,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 24300000000,
                "rowCount" : 150000000
              },
              "compileTime" : {
                "sizeInBytes" : 24300000000,
                "rowCount" : 150000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [o_orderkey#28L, o_custkey#29L, o_orderstatus#30, o_totalprice#31, o_orderpriority#32, o_clerk#33, o_shippriority#34, o_comment#35, o_orderdate#36], `spark_catalog`.`tpch_100`.`orders`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [o_orderkey#28L, o_custkey#29L]\n+- Filter (isnotnull(o_orderkey#28L) AND isnotnull(o_custkey#29L))\n   +- Relation spark_catalog.tpch_100.orders[o_orderkey#28L,o_custkey#29L,o_orderstatus#30,o_totalprice#31,o_orderpriority#32,o_clerk#33,o_shippriority#34,o_comment#35,o_orderdate#36] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1895803619,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 3600000000,
            "rowCount" : 150000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [o_orderkey#28L, o_custkey#29L] Input [3]: [o_orderkey#28L, o_custkey#29L, o_orderdate#36] "
          },
          "1" : {
            "sign" : 472609124,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 3600000000,
            "rowCount" : 150000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [o_orderkey#28L, o_custkey#29L, o_orderdate#36] Condition : (isnotnull(o_orderkey#28L) AND isnotnull(o_custkey#29L)) "
          },
          "2" : {
            "sign" : 247586214,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 3600000000,
            "rowCount" : 150000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.orders Output [3]: [o_orderkey#28L, o_custkey#29L, o_orderdate#36] Batched: true Location: CatalogFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/orders] PushedFilters: [IsNotNull(o_orderkey), IsNotNull(o_custkey)] ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpch_100.orders",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [o_orderkey#28L, o_custkey#29L]\n+- Filter (isnotnull(o_orderkey#28L) AND isnotnull(o_custkey#29L))\n   +- FileScan parquet spark_catalog.tpch_100.orders[o_orderkey#28L,o_custkey#29L,o_orderdate#36] Batched: true, DataFilters: [isnotnull(o_orderkey#28L), isnotnull(o_custkey#29L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/orders], PartitionFilters: [], PushedFilters: [IsNotNull(o_orderkey), IsNotNull(o_custkey)], ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3600000000,
        "inputRowCount" : 150000000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 5 ],
      "Objectives" : {
        "DurationInMs" : 7202,
        "TotalTasksDurationInMs" : 107916,
        "IOBytes" : {
          "Total" : 3749595606,
          "Details" : {
            "IR" : 1709164692,
            "IW" : 0,
            "SR" : 0,
            "SW" : 2040430914
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702226543645,
  "SQLEndTimeInMs" : 1702226604388,
  "Objectives" : {
    "DurationInMs" : 60743,
    "IOBytes" : {
      "Total" : 26112332399,
      "Details" : {
        "IR" : 4834794315,
        "IW" : 0,
        "SR" : 10638771146,
        "SW" : 10638766938
      }
    }
  }
}
