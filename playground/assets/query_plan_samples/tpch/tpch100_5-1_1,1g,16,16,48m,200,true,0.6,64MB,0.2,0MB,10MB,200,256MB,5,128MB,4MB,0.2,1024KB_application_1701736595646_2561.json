{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "12" : {
          "sign" : -1721060374,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 111607049772,
          "rowCount" : 600037902,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [l_orderkey#18L, l_partkey#19L, l_suppkey#20L, l_linenumber#21, l_quantity#22, l_extendedprice#23, l_discount#24, l_tax#25, l_returnflag#26, l_linestatus#27, l_commitdate#28, l_receiptdate#29, l_shipinstruct#30, l_shipmode#31, l_comment#32, l_shipdate#33], `spark_catalog`.`tpch_100`.`lineitem`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "8" : {
          "sign" : -160279320,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 24024420680,
          "rowCount" : 600610517,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [l_orderkey#18L, l_extendedprice#23, l_discount#24, s_nationkey#37L] "
        },
        "19" : {
          "sign" : 552224994,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 900,
          "rowCount" : 25,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [n_nationkey#41L, n_name#42] "
        },
        "23" : {
          "sign" : -1014178102,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3275,
          "rowCount" : 25,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [n_nationkey#41L, n_name#42, n_regionkey#43L, n_comment#44], `spark_catalog`.`tpch_100`.`nation`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "4" : {
          "sign" : 582670406,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 71307900,
          "rowCount" : 1188465,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L, n_name#42] "
        },
        "15" : {
          "sign" : 1172598457,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 201000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_suppkey#34L, s_name#35, s_address#36, s_nationkey#37L, s_phone#38, s_acctbal#39, s_comment#40], `spark_catalog`.`tpch_100`.`supplier`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "11" : {
          "sign" : 1055493239,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 111607049772,
          "rowCount" : 600037902,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(l_orderkey#18L) AND isnotnull(l_suppkey#20L)) "
        },
        "9" : {
          "sign" : -1647234210,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 33634188952,
          "rowCount" : 600610517,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (l_suppkey#20L = s_suppkey#34L) "
        },
        "22" : {
          "sign" : -221658939,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3275,
          "rowCount" : 25,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(n_nationkey#41L) AND isnotnull(n_regionkey#43L)) "
        },
        "26" : {
          "sign" : -1954411271,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 565,
          "rowCount" : 5,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [r_regionkey#45L, r_name#46, r_comment#47], `spark_catalog`.`tpch_100`.`region`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "13" : {
          "sign" : 1285637712,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 24000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [s_suppkey#34L, s_nationkey#37L] "
        },
        "24" : {
          "sign" : -1980557806,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 16,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [r_regionkey#45L] "
        },
        "16" : {
          "sign" : -1722559968,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 546141744,
          "rowCount" : 22755906,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [o_orderkey#9L, o_custkey#10L] "
        },
        "5" : {
          "sign" : -176834795,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 80815620,
          "rowCount" : 1188465,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#37L = n_nationkey#41L) "
        },
        "10" : {
          "sign" : 251358091,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 24001516080,
          "rowCount" : 600037902,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [l_orderkey#18L, l_suppkey#20L, l_extendedprice#23, l_discount#24] "
        },
        "21" : {
          "sign" : 348012422,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1100,
          "rowCount" : 25,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [n_nationkey#41L, n_name#42, n_regionkey#43L] "
        },
        "6" : {
          "sign" : -481735712,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 24056448880,
          "rowCount" : 601411222,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L] "
        },
        "1" : {
          "sign" : 796779915,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 1100,
          "rowCount" : 25,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [n_name#42], [n_name#42, sum((l_extendedprice#23 * (1 - l_discount#24))) AS revenue#0] "
        },
        "17" : {
          "sign" : 68999042,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3686456772,
          "rowCount" : 22755906,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((((isnotnull(o_orderdate#17) AND (o_orderdate#17 >= 1993-01-01)) AND (o_orderdate#17 < 1994-01-01)) AND isnotnull(o_custkey#10L)) AND isnotnull(o_orderkey#9L)) "
        },
        "25" : {
          "sign" : 461235267,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 113,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(r_name#46) AND (r_name#46 = AMERICA)) AND isnotnull(r_regionkey#45L)) "
        },
        "14" : {
          "sign" : 2013430661,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 201000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(s_suppkey#34L) AND isnotnull(s_nationkey#37L)) "
        },
        "0" : {
          "sign" : 1134100177,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 1100,
          "rowCount" : 25,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [revenue#0 DESC NULLS LAST], true "
        },
        "20" : {
          "sign" : 2089846731,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 1300,
          "rowCount" : 25,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (n_regionkey#43L = r_regionkey#45L) "
        },
        "27" : {
          "sign" : 1516489058,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 360000000,
          "rowCount" : 15000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_custkey#1L, c_nationkey#4L] "
        },
        "2" : {
          "sign" : -1120870161,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 6620207792,
          "rowCount" : 150459268,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [l_extendedprice#23, l_discount#24, n_name#42] "
        },
        "18" : {
          "sign" : -1044726289,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3686456772,
          "rowCount" : 22755906,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [o_orderkey#9L, o_custkey#10L, o_orderstatus#11, o_totalprice#12, o_orderpriority#13, o_clerk#14, o_shippriority#15, o_comment#16, o_orderdate#17], `spark_catalog`.`tpch_100`.`orders`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "7" : {
          "sign" : 2039886460,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 33679028432,
          "rowCount" : 601411222,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (l_orderkey#18L = o_orderkey#9L) "
        },
        "29" : {
          "sign" : -240052685,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3495000000,
          "rowCount" : 15000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_custkey#1L, c_name#2, c_address#3, c_nationkey#4L, c_phone#5, c_acctbal#6, c_comment#7, c_mktsegment#8], `spark_catalog`.`tpch_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "3" : {
          "sign" : -863926079,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 11434904368,
          "rowCount" : 150459268,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((c_custkey#1L = o_custkey#10L) AND (c_nationkey#4L = s_nationkey#37L)) "
        },
        "28" : {
          "sign" : -1539888860,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3495000000,
          "rowCount" : 15000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(c_custkey#1L) AND isnotnull(c_nationkey#4L)) "
        }
      },
      "links" : [ {
        "fromId" : 12,
        "fromName" : "LogicalRelation",
        "toId" : 11,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "Filter",
        "toId" : 10,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "LogicalRelation",
        "toId" : 14,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Filter",
        "toId" : 13,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Join",
        "toId" : 8,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "LogicalRelation",
        "toId" : 17,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Filter",
        "toId" : 16,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Join",
        "toId" : 6,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Project",
        "toId" : 5,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "LogicalRelation",
        "toId" : 22,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "Filter",
        "toId" : 21,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Project",
        "toId" : 20,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "LogicalRelation",
        "toId" : 25,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "Filter",
        "toId" : 24,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "Project",
        "toId" : 20,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "Join",
        "toId" : 19,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "Project",
        "toId" : 5,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Join",
        "toId" : 4,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Project",
        "toId" : 3,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 29,
        "fromName" : "LogicalRelation",
        "toId" : 28,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "Filter",
        "toId" : 27,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "Project",
        "toId" : 3,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Join",
        "toId" : 2,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Project",
        "toId" : 1,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "Aggregate",
        "toId" : 0,
        "toName" : "Sort",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "Sort [revenue#0 DESC NULLS LAST], true\n+- Aggregate [n_name#42], [n_name#42, sum((l_extendedprice#23 * (1 - l_discount#24))) AS revenue#0]\n   +- Project [l_extendedprice#23, l_discount#24, n_name#42]\n      +- Join Inner, ((c_custkey#1L = o_custkey#10L) AND (c_nationkey#4L = s_nationkey#37L))\n         :- Project [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L, n_name#42]\n         :  +- Join Inner, (s_nationkey#37L = n_nationkey#41L)\n         :     :- Project [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L]\n         :     :  +- Join Inner, (l_orderkey#18L = o_orderkey#9L)\n         :     :     :- Project [l_orderkey#18L, l_extendedprice#23, l_discount#24, s_nationkey#37L]\n         :     :     :  +- Join Inner, (l_suppkey#20L = s_suppkey#34L)\n         :     :     :     :- Project [l_orderkey#18L, l_suppkey#20L, l_extendedprice#23, l_discount#24]\n         :     :     :     :  +- Filter (isnotnull(l_orderkey#18L) AND isnotnull(l_suppkey#20L))\n         :     :     :     :     +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#18L,l_partkey#19L,l_suppkey#20L,l_linenumber#21,l_quantity#22,l_extendedprice#23,l_discount#24,l_tax#25,l_returnflag#26,l_linestatus#27,l_commitdate#28,l_receiptdate#29,l_shipinstruct#30,l_shipmode#31,l_comment#32,l_shipdate#33] parquet\n         :     :     :     +- Project [s_suppkey#34L, s_nationkey#37L]\n         :     :     :        +- Filter (isnotnull(s_suppkey#34L) AND isnotnull(s_nationkey#37L))\n         :     :     :           +- Relation spark_catalog.tpch_100.supplier[s_suppkey#34L,s_name#35,s_address#36,s_nationkey#37L,s_phone#38,s_acctbal#39,s_comment#40] parquet\n         :     :     +- Project [o_orderkey#9L, o_custkey#10L]\n         :     :        +- Filter ((((isnotnull(o_orderdate#17) AND (o_orderdate#17 >= 1993-01-01)) AND (o_orderdate#17 < 1994-01-01)) AND isnotnull(o_custkey#10L)) AND isnotnull(o_orderkey#9L))\n         :     :           +- Relation spark_catalog.tpch_100.orders[o_orderkey#9L,o_custkey#10L,o_orderstatus#11,o_totalprice#12,o_orderpriority#13,o_clerk#14,o_shippriority#15,o_comment#16,o_orderdate#17] parquet\n         :     +- Project [n_nationkey#41L, n_name#42]\n         :        +- Join Inner, (n_regionkey#43L = r_regionkey#45L)\n         :           :- Project [n_nationkey#41L, n_name#42, n_regionkey#43L]\n         :           :  +- Filter (isnotnull(n_nationkey#41L) AND isnotnull(n_regionkey#43L))\n         :           :     +- Relation spark_catalog.tpch_100.nation[n_nationkey#41L,n_name#42,n_regionkey#43L,n_comment#44] parquet\n         :           +- Project [r_regionkey#45L]\n         :              +- Filter ((isnotnull(r_name#46) AND (r_name#46 = AMERICA)) AND isnotnull(r_regionkey#45L))\n         :                 +- Relation spark_catalog.tpch_100.region[r_regionkey#45L,r_name#46,r_comment#47] parquet\n         +- Project [c_custkey#1L, c_nationkey#4L]\n            +- Filter (isnotnull(c_custkey#1L) AND isnotnull(c_nationkey#4L))\n               +- Relation spark_catalog.tpch_100.customer[c_custkey#1L,c_name#2,c_address#3,c_nationkey#4L,c_phone#5,c_acctbal#6,c_comment#7,c_mktsegment#8] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 118989510384,
      "inputRowCount" : 638793838
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "8" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : 2102546684,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1076451544,
            "rowCount" : 18184067,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L, n_name#42], ShuffleQueryStage 7 "
          },
          "5" : {
            "sign" : 1203066116,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 360000000,
            "rowCount" : 15000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_custkey#1L, c_nationkey#4L], ShuffleQueryStage 4 "
          },
          "1" : {
            "sign" : -1414680531,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 12001484220000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [n_name#42], [n_name#42, sum((l_extendedprice#23 * (1 - l_discount#24))) AS revenue#57] "
          },
          "0" : {
            "sign" : 692960411,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 12001484220000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [revenue#57 DESC NULLS LAST], true "
          },
          "2" : {
            "sign" : -1225664793,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 12001484220000000,
            "rowCount" : 272761005000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#23, l_discount#24, n_name#42] "
          },
          "3" : {
            "sign" : -1072046349,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 20729836380000000,
            "rowCount" : 272761005000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_custkey#1L = o_custkey#10L) AND (c_nationkey#4L = s_nationkey#37L)) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [revenue#57 DESC NULLS LAST], true\n+- Aggregate [n_name#42], [n_name#42, sum((l_extendedprice#23 * (1 - l_discount#24))) AS revenue#57]\n   +- Project [l_extendedprice#23, l_discount#24, n_name#42]\n      +- Join Inner, ((c_custkey#1L = o_custkey#10L) AND (c_nationkey#4L = s_nationkey#37L))\n         :- LogicalQueryStage Project [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L, n_name#42], ShuffleQueryStage 7\n         +- LogicalQueryStage Project [c_custkey#1L, c_nationkey#4L], ShuffleQueryStage 4\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1436451544,
        "inputRowCount" : 33184067
      },
      "PD" : {
        "5" : [ 2200252, 2217248, 2183068, 2186287, 2193017, 2204625, 2209785, 2215495, 2188347, 2186683, 2204833, 2191472, 2204798, 2197043, 2200871, 2193750, 2201926, 2208423, 2191576, 2208542, 2197766, 2200579, 2191135, 2188669, 2205021, 2204843, 2198182, 2192413, 2198058, 2198499, 2193522, 2194369, 2192715, 2201693, 2196637, 2190645, 2194973, 2203481, 2203451, 2199321, 2200282, 2197350, 2203377, 2189392, 2198088, 2195998, 2188461, 2186579, 2212286, 2195151, 2190823, 2214336, 2195518, 2189704, 2204506, 2192809, 2201401, 2203243, 2195716, 2195265, 2192903, 2180349, 2197662, 2205135, 2178215, 2205041, 2204179, 2188233, 2179418, 2203159, 2182439, 2198811, 2195602, 2193948, 2198415, 2210008, 2208730, 2184301, 2194359, 2188045, 2201495, 2193636, 2198509, 2195602, 2206076, 2213717, 2206160, 2197766, 2195067, 2204214, 2189496, 2206274, 2194389, 2190239, 2195904, 2209067, 2182345, 2202510, 2215183, 2192715, 2204709, 2199628, 2192611, 2197890, 2196939, 2213613, 2198192, 2198999, 2190496, 2201822, 2197890, 2191170, 2202857, 2197355, 2196929, 2188149, 2207111, 2198925, 2205729, 2196657, 2200222, 2188149, 2192254, 2204392, 2188659, 2186881, 2194963, 2188451, 2196959, 2191848, 2192893, 2197692, 2187634, 2203674, 2191878, 2199846, 2200475, 2199529, 2217441, 2185564, 2187614, 2211048, 2190823, 2189298, 2193195, 2201411, 2202426, 2197078, 2180651, 2198108, 2200044, 2196657, 2198831, 2212598, 2191764, 2200574, 2174892, 2209889, 2200995, 2209800, 2202332, 2189694, 2190605, 2193596, 2191452, 2190303, 2190278, 2206482, 2210394, 2191680, 2217030, 2186465, 2208428, 2179117, 2192685, 2182909, 2204600, 2205531, 2208230, 2192809, 2213727, 2195894, 2184905, 2204278, 2175333, 2189684, 2197063, 2204194, 2191511, 2193606, 2189996, 2191650, 2194671, 2190417, 2193027, 2193334, 2197474, 2199509, 2202332, 2192309 ],
        "3" : [ 789868, 796834, 796834, 782207, 789173, 774546, 774546, 789173, 781512, 781512, 796834, 781512, 796834, 789173, 796834, 789173, 782207, 789173, 774546, 781512, 796834, 804495, 782207, 796834, 789173, 789173, 774546, 789173, 773851, 796834, 796834, 789173, 789173, 781512, 797529, 789173, 781512, 797529, 796834, 773851, 781512, 773851, 781512, 789173, 773851, 789173, 789173, 781512, 773851, 781512, 789173, 781512, 796834, 781512, 789173, 781512, 804495, 789173, 781512, 796834, 773851, 796834, 781512, 796834, 781512, 789173, 804495, 781512, 773851, 789173, 789173, 781512, 804495, 781512, 804495, 789173, 781512, 781512, 766190, 789173, 789173, 797529, 796834, 789173, 773851, 796834, 789173, 781512, 781512, 774546, 796834, 766190, 781512, 789173, 773851, 796834, 773851, 781512, 789173, 789173, 773851, 774546, 789173, 789173, 796834, 789173, 804495, 789173, 796834, 789173, 789173, 773851, 796834, 789173, 789173, 781512, 789173, 781512, 773851, 789173, 773851, 781512, 789173, 796834, 796834, 789173, 789173, 781512, 804495, 782207, 789173, 773851, 789173, 782207, 781512, 773851, 789173, 781512, 789173, 781512, 796834, 789173, 789868, 781512, 766190, 781512, 789173, 789173, 804495, 781512, 773851, 781512, 796834, 766190, 766190, 773851, 796834, 796834, 781512, 781512, 789173, 796834, 797529, 804495, 789173, 789173, 789173, 804495, 789173, 796834, 789173, 781512, 789173, 781512, 789173, 796834, 789173, 789173, 796834, 796834, 789173, 781512, 781512, 782207, 789173, 796834, 782207, 789173, 782207, 781512, 789173, 781512, 796834, 804495, 796834, 766190, 796834, 789173, 773851, 789173 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226639684,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 4877,
        "IOBytes" : {
          "Total" : 566953817,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 566948538,
            "SW" : 5279
          }
        }
      }
    },
    "4" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : 257167554,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 24024420680,
            "rowCount" : 600610517,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_orderkey#18L, l_extendedprice#23, l_discount#24, s_nationkey#37L], ShuffleQueryStage 6 "
          },
          "4" : {
            "sign" : -2041471194,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 71307900,
            "rowCount" : 1188465,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L, n_name#42] "
          },
          "11" : {
            "sign" : 1203066116,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 360000000,
            "rowCount" : 15000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_custkey#1L, c_nationkey#4L], ShuffleQueryStage 4 "
          },
          "9" : {
            "sign" : 1328089514,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 546036480,
            "rowCount" : 22751520,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [o_orderkey#9L, o_custkey#10L], ShuffleQueryStage 2 "
          },
          "5" : {
            "sign" : 31598333,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 80815620,
            "rowCount" : 1188465,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#37L = n_nationkey#41L) "
          },
          "10" : {
            "sign" : 1472951198,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 900,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#41L, n_name#42], BroadcastQueryStage 5 "
          },
          "6" : {
            "sign" : 1005998698,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 546592087589433600,
            "rowCount" : 13664802189735840,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L] "
          },
          "1" : {
            "sign" : 1494680925,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 1100,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [n_name#42], [n_name#42, sum((l_extendedprice#23 * (1 - l_discount#24))) AS revenue#57] "
          },
          "0" : {
            "sign" : 2070876333,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1100,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [revenue#57 DESC NULLS LAST], true "
          },
          "2" : {
            "sign" : 611015481,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 31375472750952,
            "rowCount" : 713078926158,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#23, l_discount#24, n_name#42] "
          },
          "7" : {
            "sign" : -1701929306,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 765228922625207040,
            "rowCount" : 13664802189735840,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (l_orderkey#18L = o_orderkey#9L) "
          },
          "3" : {
            "sign" : -845316637,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 54193998388008,
            "rowCount" : 713078926158,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_custkey#1L = o_custkey#10L) AND (c_nationkey#4L = s_nationkey#37L)) "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [revenue#57 DESC NULLS LAST], true\n+- Aggregate [n_name#42], [n_name#42, sum((l_extendedprice#23 * (1 - l_discount#24))) AS revenue#57]\n   +- Project [l_extendedprice#23, l_discount#24, n_name#42]\n      +- Join Inner, ((c_custkey#1L = o_custkey#10L) AND (c_nationkey#4L = s_nationkey#37L))\n         :- Project [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L, n_name#42]\n         :  +- Join Inner, (s_nationkey#37L = n_nationkey#41L)\n         :     :- Project [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L]\n         :     :  +- Join Inner, (l_orderkey#18L = o_orderkey#9L)\n         :     :     :- LogicalQueryStage Project [l_orderkey#18L, l_extendedprice#23, l_discount#24, s_nationkey#37L], ShuffleQueryStage 6\n         :     :     +- LogicalQueryStage Project [o_orderkey#9L, o_custkey#10L], ShuffleQueryStage 2\n         :     +- LogicalQueryStage Project [n_nationkey#41L, n_name#42], BroadcastQueryStage 5\n         +- LogicalQueryStage Project [c_custkey#1L, c_nationkey#4L], ShuffleQueryStage 4\n"
      },
      "IM" : {
        "inputSizeInBytes" : 24930458060,
        "inputRowCount" : 638362062
      },
      "PD" : {
        "2" : [ 1645502, 1620215, 1628644, 1653931, 1637073, 1637073, 1645502, 1620215, 1645502, 1645502, 1653931, 1620215, 1628644, 1637073, 1645502, 1645502, 1645502, 1637073, 1637073, 1653931, 1637073, 1628644, 1628644, 1637073, 1670789, 1628644, 1628644, 1637073, 1653931, 1633823, 1645502, 1637073, 1628644, 1620215, 1645502, 1653931, 1637073, 1645502, 1620215, 1620215, 1637073, 1645502, 1603357, 1620215, 1620215, 1653931, 1662360, 1628644, 1620215, 1645502, 1645502, 1653931, 1628644, 1620215, 1637073, 1628644, 1637073, 1603357, 1650681, 1620215, 1653931, 1662360, 1637073, 1637073, 1645502, 1628644, 1645502, 1637073, 1653931, 1653931, 1611786, 1653931, 1653931, 1637073, 1620215, 1620215, 1662360, 1620215, 1637073, 1628644, 1653931, 1653931, 1637073, 1637073, 1637073, 1670789, 1628644, 1620215, 1645502, 1642252, 1645502, 1620215, 1653931, 1637073, 1637073, 1637073, 1650681, 1637073, 1620215, 1637073, 1645502, 1620215, 1611786, 1620215, 1633823, 1637073, 1620215, 1628644, 1653931, 1611786, 1628644, 1611786, 1637073, 1633823, 1628644, 1628644, 1645502, 1620215, 1637073, 1645502, 1645502, 1620215, 1670789, 1628644, 1637073, 1628644, 1645502, 1637073, 1628644, 1653931, 1653931, 1637073, 1653931, 1653931, 1637073, 1625394, 1645502, 1645502, 1653931, 1642252, 1645502, 1645502, 1628644, 1611786, 1653931, 1645502, 1645502, 1620215, 1625394, 1628644, 1645502, 1653931, 1653931, 1637073, 1628644, 1637073, 1653931, 1611786, 1628644, 1628644, 1620215, 1670789, 1628644, 1645502, 1637073, 1628644, 1637073, 1637073, 1662360, 1637073, 1653931, 1628644, 1620215, 1637073, 1637073, 1645502, 1637073, 1645502, 1645502, 1662360, 1653931, 1620215, 1645502, 1653931, 1645502, 1645502, 1645502, 1620215, 1637073, 1645502, 1620215, 1645502, 1645502, 1633823, 1637073, 1637073, 1653931, 1637073, 1620215, 1611786 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 10,
        "FinishedTasksNum" : 7,
        "FinishedTasksTotalTimeInMs" : 860.0,
        "FinishedTasksDistributionInMs" : [ 13.0, 14.0, 65.0, 91.0, 537.0 ]
      },
      "StartTimeInMs" : 1702226582143,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 62418,
        "IOBytes" : {
          "Total" : 37777663692,
          "Details" : {
            "IR" : 86370049,
            "IW" : 0,
            "SR" : 25703212839,
            "SW" : 11988080804
          }
        }
      }
    },
    "9" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -1504165987,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 2960,
            "rowCount" : 50,
            "isRuntime" : true,
            "predicate" : " (unknown) Sort Arguments: [revenue#57 DESC NULLS LAST], true "
          },
          "1" : {
            "sign" : -1870241627,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2960,
            "rowCount" : 50,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [n_name#42], [n_name#42, sum((l_extendedprice#23 * (1 - l_discount#24))) AS revenue#57], HashAggregate(keys=[n_name#42], functions=[sum((l_extendedprice#23 * (1 - l_discount#24)))]) "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "LogicalQueryStage",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [revenue#57 DESC NULLS LAST], true\n+- LogicalQueryStage Aggregate [n_name#42], [n_name#42, sum((l_extendedprice#23 * (1 - l_discount#24))) AS revenue#57], HashAggregate(keys=[n_name#42], functions=[sum((l_extendedprice#23 * (1 - l_discount#24)))])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2960,
        "inputRowCount" : 50
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226644016,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 545,
        "IOBytes" : {
          "Total" : 10558,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 10093,
            "SW" : 465
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : 257167554,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 24024420680,
            "rowCount" : 600610517,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_orderkey#18L, l_extendedprice#23, l_discount#24, s_nationkey#37L], ShuffleQueryStage 6 "
          },
          "4" : {
            "sign" : -2041471194,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4099440656920752000,
            "rowCount" : 68324010948679200,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L, n_name#42] "
          },
          "11" : {
            "sign" : 1203066116,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 360000000,
            "rowCount" : 15000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_custkey#1L, c_nationkey#4L], ShuffleQueryStage 4 "
          },
          "9" : {
            "sign" : 1328089514,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 546036480,
            "rowCount" : 22751520,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [o_orderkey#9L, o_custkey#10L], ShuffleQueryStage 2 "
          },
          "5" : {
            "sign" : 31598333,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4646032744510185600,
            "rowCount" : 68324010948679200,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#37L = n_nationkey#41L) "
          },
          "10" : {
            "sign" : 1472951198,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048768,
            "rowCount" : 5,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#41L, n_name#42], BroadcastQueryStage 5 "
          },
          "6" : {
            "sign" : 1005998698,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 546592087589433600,
            "rowCount" : 13664802189735840,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L] "
          },
          "1" : {
            "sign" : 1494680925,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 31375472750952,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [n_name#42], [n_name#42, sum((l_extendedprice#23 * (1 - l_discount#24))) AS revenue#57] "
          },
          "0" : {
            "sign" : 2070876333,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 31375472750952,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [revenue#57 DESC NULLS LAST], true "
          },
          "2" : {
            "sign" : 611015481,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 31375472750952,
            "rowCount" : 713078926158,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#23, l_discount#24, n_name#42] "
          },
          "7" : {
            "sign" : -1701929306,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 765228922625207040,
            "rowCount" : 13664802189735840,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (l_orderkey#18L = o_orderkey#9L) "
          },
          "3" : {
            "sign" : -845316637,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 54193998388008,
            "rowCount" : 713078926158,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_custkey#1L = o_custkey#10L) AND (c_nationkey#4L = s_nationkey#37L)) "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [revenue#57 DESC NULLS LAST], true\n+- Aggregate [n_name#42], [n_name#42, sum((l_extendedprice#23 * (1 - l_discount#24))) AS revenue#57]\n   +- Project [l_extendedprice#23, l_discount#24, n_name#42]\n      +- Join Inner, ((c_custkey#1L = o_custkey#10L) AND (c_nationkey#4L = s_nationkey#37L))\n         :- Project [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L, n_name#42]\n         :  +- Join Inner, (s_nationkey#37L = n_nationkey#41L)\n         :     :- Project [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L]\n         :     :  +- Join Inner, (l_orderkey#18L = o_orderkey#9L)\n         :     :     :- LogicalQueryStage Project [l_orderkey#18L, l_extendedprice#23, l_discount#24, s_nationkey#37L], ShuffleQueryStage 6\n         :     :     +- LogicalQueryStage Project [o_orderkey#9L, o_custkey#10L], ShuffleQueryStage 2\n         :     +- LogicalQueryStage Project [n_nationkey#41L, n_name#42], BroadcastQueryStage 5\n         +- LogicalQueryStage Project [c_custkey#1L, c_nationkey#4L], ShuffleQueryStage 4\n"
      },
      "IM" : {
        "inputSizeInBytes" : 24931505928,
        "inputRowCount" : 638362042
      },
      "PD" : {
        "2" : [ 1645502, 1620215, 1628644, 1653931, 1637073, 1637073, 1645502, 1620215, 1645502, 1645502, 1653931, 1620215, 1628644, 1637073, 1645502, 1645502, 1645502, 1637073, 1637073, 1653931, 1637073, 1628644, 1628644, 1637073, 1670789, 1628644, 1628644, 1637073, 1653931, 1633823, 1645502, 1637073, 1628644, 1620215, 1645502, 1653931, 1637073, 1645502, 1620215, 1620215, 1637073, 1645502, 1603357, 1620215, 1620215, 1653931, 1662360, 1628644, 1620215, 1645502, 1645502, 1653931, 1628644, 1620215, 1637073, 1628644, 1637073, 1603357, 1650681, 1620215, 1653931, 1662360, 1637073, 1637073, 1645502, 1628644, 1645502, 1637073, 1653931, 1653931, 1611786, 1653931, 1653931, 1637073, 1620215, 1620215, 1662360, 1620215, 1637073, 1628644, 1653931, 1653931, 1637073, 1637073, 1637073, 1670789, 1628644, 1620215, 1645502, 1642252, 1645502, 1620215, 1653931, 1637073, 1637073, 1637073, 1650681, 1637073, 1620215, 1637073, 1645502, 1620215, 1611786, 1620215, 1633823, 1637073, 1620215, 1628644, 1653931, 1611786, 1628644, 1611786, 1637073, 1633823, 1628644, 1628644, 1645502, 1620215, 1637073, 1645502, 1645502, 1620215, 1670789, 1628644, 1637073, 1628644, 1645502, 1637073, 1628644, 1653931, 1653931, 1637073, 1653931, 1653931, 1637073, 1625394, 1645502, 1645502, 1653931, 1642252, 1645502, 1645502, 1628644, 1611786, 1653931, 1645502, 1645502, 1620215, 1625394, 1628644, 1645502, 1653931, 1653931, 1637073, 1628644, 1637073, 1653931, 1611786, 1628644, 1628644, 1620215, 1670789, 1628644, 1645502, 1637073, 1628644, 1637073, 1637073, 1662360, 1637073, 1653931, 1628644, 1620215, 1637073, 1637073, 1645502, 1637073, 1645502, 1645502, 1662360, 1653931, 1620215, 1645502, 1653931, 1645502, 1645502, 1645502, 1620215, 1637073, 1645502, 1620215, 1645502, 1645502, 1633823, 1637073, 1637073, 1653931, 1637073, 1620215, 1611786 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 7,
        "FinishedTasksTotalTimeInMs" : 860.0,
        "FinishedTasksDistributionInMs" : [ 13.0, 14.0, 65.0, 91.0, 537.0 ]
      },
      "StartTimeInMs" : 1702226582181,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 62380,
        "IOBytes" : {
          "Total" : 37777660806,
          "Details" : {
            "IR" : 86367163,
            "IW" : 0,
            "SR" : 25703212839,
            "SW" : 11988080804
          }
        }
      }
    },
    "10" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -1102410103,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 256,
            "rowCount" : 5,
            "isRuntime" : true,
            "predicate" : " (unknown) Sort Arguments: [revenue#57 DESC NULLS LAST], true "
          },
          "1" : {
            "sign" : -1542101887,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 256,
            "rowCount" : 5,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [n_name#42], [n_name#42, sum((l_extendedprice#23 * (1 - l_discount#24))) AS revenue#57], ShuffleQueryStage 9 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "LogicalQueryStage",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [revenue#57 DESC NULLS LAST], true\n+- LogicalQueryStage Aggregate [n_name#42], [n_name#42, sum((l_extendedprice#23 * (1 - l_discount#24))) AS revenue#57], ShuffleQueryStage 9\n"
      },
      "IM" : {
        "inputSizeInBytes" : 256,
        "inputRowCount" : 5
      },
      "PD" : {
        "7" : [ 88, 88, 97, 106, 97 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226644403,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 158,
        "IOBytes" : {
          "Total" : 465,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 465,
            "SW" : 0
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : 257167554,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 24024420680,
            "rowCount" : 600610517,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_orderkey#18L, l_extendedprice#23, l_discount#24, s_nationkey#37L], ShuffleQueryStage 6 "
          },
          "4" : {
            "sign" : -2041471194,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4099440656920752000,
            "rowCount" : 68324010948679200,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L, n_name#42] "
          },
          "11" : {
            "sign" : 1203066116,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 360000000,
            "rowCount" : 15000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_custkey#1L, c_nationkey#4L], ShuffleQueryStage 4 "
          },
          "9" : {
            "sign" : 1328089514,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 546036480,
            "rowCount" : 22751520,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [o_orderkey#9L, o_custkey#10L], ShuffleQueryStage 2 "
          },
          "5" : {
            "sign" : 31598333,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4646032744510185600,
            "rowCount" : 68324010948679200,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#37L = n_nationkey#41L) "
          },
          "10" : {
            "sign" : 1472951198,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048768,
            "rowCount" : 5,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#41L, n_name#42], BroadcastQueryStage 5 "
          },
          "6" : {
            "sign" : 1005998698,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 546592087589433600,
            "rowCount" : 13664802189735840,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L] "
          },
          "1" : {
            "sign" : 1494680925,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 45093847226128272000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [n_name#42], [n_name#42, sum((l_extendedprice#23 * (1 - l_discount#24))) AS revenue#57] "
          },
          "0" : {
            "sign" : 2070876333,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 45093847226128272000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [revenue#57 DESC NULLS LAST], true "
          },
          "2" : {
            "sign" : 611015481,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 45093847226128272000000000,
            "rowCount" : 1024860164230188000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#23, l_discount#24, n_name#42] "
          },
          "7" : {
            "sign" : -1701929306,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 765228922625207040,
            "rowCount" : 13664802189735840,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (l_orderkey#18L = o_orderkey#9L) "
          },
          "3" : {
            "sign" : -845316637,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 77889372481494288000000000,
            "rowCount" : 1024860164230188000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_custkey#1L = o_custkey#10L) AND (c_nationkey#4L = s_nationkey#37L)) "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [revenue#57 DESC NULLS LAST], true\n+- Aggregate [n_name#42], [n_name#42, sum((l_extendedprice#23 * (1 - l_discount#24))) AS revenue#57]\n   +- Project [l_extendedprice#23, l_discount#24, n_name#42]\n      +- Join Inner, ((c_custkey#1L = o_custkey#10L) AND (c_nationkey#4L = s_nationkey#37L))\n         :- Project [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L, n_name#42]\n         :  +- Join Inner, (s_nationkey#37L = n_nationkey#41L)\n         :     :- Project [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L]\n         :     :  +- Join Inner, (l_orderkey#18L = o_orderkey#9L)\n         :     :     :- LogicalQueryStage Project [l_orderkey#18L, l_extendedprice#23, l_discount#24, s_nationkey#37L], ShuffleQueryStage 6\n         :     :     +- LogicalQueryStage Project [o_orderkey#9L, o_custkey#10L], ShuffleQueryStage 2\n         :     +- LogicalQueryStage Project [n_nationkey#41L, n_name#42], BroadcastQueryStage 5\n         +- LogicalQueryStage Project [c_custkey#1L, c_nationkey#4L], ShuffleQueryStage 4\n"
      },
      "IM" : {
        "inputSizeInBytes" : 24931505928,
        "inputRowCount" : 638362042
      },
      "PD" : {
        "2" : [ 1645502, 1620215, 1628644, 1653931, 1637073, 1637073, 1645502, 1620215, 1645502, 1645502, 1653931, 1620215, 1628644, 1637073, 1645502, 1645502, 1645502, 1637073, 1637073, 1653931, 1637073, 1628644, 1628644, 1637073, 1670789, 1628644, 1628644, 1637073, 1653931, 1633823, 1645502, 1637073, 1628644, 1620215, 1645502, 1653931, 1637073, 1645502, 1620215, 1620215, 1637073, 1645502, 1603357, 1620215, 1620215, 1653931, 1662360, 1628644, 1620215, 1645502, 1645502, 1653931, 1628644, 1620215, 1637073, 1628644, 1637073, 1603357, 1650681, 1620215, 1653931, 1662360, 1637073, 1637073, 1645502, 1628644, 1645502, 1637073, 1653931, 1653931, 1611786, 1653931, 1653931, 1637073, 1620215, 1620215, 1662360, 1620215, 1637073, 1628644, 1653931, 1653931, 1637073, 1637073, 1637073, 1670789, 1628644, 1620215, 1645502, 1642252, 1645502, 1620215, 1653931, 1637073, 1637073, 1637073, 1650681, 1637073, 1620215, 1637073, 1645502, 1620215, 1611786, 1620215, 1633823, 1637073, 1620215, 1628644, 1653931, 1611786, 1628644, 1611786, 1637073, 1633823, 1628644, 1628644, 1645502, 1620215, 1637073, 1645502, 1645502, 1620215, 1670789, 1628644, 1637073, 1628644, 1645502, 1637073, 1628644, 1653931, 1653931, 1637073, 1653931, 1653931, 1637073, 1625394, 1645502, 1645502, 1653931, 1642252, 1645502, 1645502, 1628644, 1611786, 1653931, 1645502, 1645502, 1620215, 1625394, 1628644, 1645502, 1653931, 1653931, 1637073, 1628644, 1637073, 1653931, 1611786, 1628644, 1628644, 1620215, 1670789, 1628644, 1645502, 1637073, 1628644, 1637073, 1637073, 1662360, 1637073, 1653931, 1628644, 1620215, 1637073, 1637073, 1645502, 1637073, 1645502, 1645502, 1662360, 1653931, 1620215, 1645502, 1653931, 1645502, 1645502, 1645502, 1620215, 1637073, 1645502, 1620215, 1645502, 1645502, 1633823, 1637073, 1637073, 1653931, 1637073, 1620215, 1611786 ],
        "3" : [ 789868, 796834, 796834, 782207, 789173, 774546, 774546, 789173, 781512, 781512, 796834, 781512, 796834, 789173, 796834, 789173, 782207, 789173, 774546, 781512, 796834, 804495, 782207, 796834, 789173, 789173, 774546, 789173, 773851, 796834, 796834, 789173, 789173, 781512, 797529, 789173, 781512, 797529, 796834, 773851, 781512, 773851, 781512, 789173, 773851, 789173, 789173, 781512, 773851, 781512, 789173, 781512, 796834, 781512, 789173, 781512, 804495, 789173, 781512, 796834, 773851, 796834, 781512, 796834, 781512, 789173, 804495, 781512, 773851, 789173, 789173, 781512, 804495, 781512, 804495, 789173, 781512, 781512, 766190, 789173, 789173, 797529, 796834, 789173, 773851, 796834, 789173, 781512, 781512, 774546, 796834, 766190, 781512, 789173, 773851, 796834, 773851, 781512, 789173, 789173, 773851, 774546, 789173, 789173, 796834, 789173, 804495, 789173, 796834, 789173, 789173, 773851, 796834, 789173, 789173, 781512, 789173, 781512, 773851, 789173, 773851, 781512, 789173, 796834, 796834, 789173, 789173, 781512, 804495, 782207, 789173, 773851, 789173, 782207, 781512, 773851, 789173, 781512, 789173, 781512, 796834, 789173, 789868, 781512, 766190, 781512, 789173, 789173, 804495, 781512, 773851, 781512, 796834, 766190, 766190, 773851, 796834, 796834, 781512, 781512, 789173, 796834, 797529, 804495, 789173, 789173, 789173, 804495, 789173, 796834, 789173, 781512, 789173, 781512, 789173, 796834, 789173, 789173, 796834, 796834, 789173, 781512, 781512, 782207, 789173, 796834, 782207, 789173, 782207, 781512, 789173, 781512, 796834, 804495, 796834, 766190, 796834, 789173, 773851, 789173 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226582764,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 61797,
        "IOBytes" : {
          "Total" : 37543154100,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 25703212839,
            "SW" : 11839941261
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1328089514,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 546141744,
            "rowCount" : 22755906,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [o_orderkey#9L, o_custkey#10L], ShuffleQueryStage 2 "
          },
          "8" : {
            "sign" : -1225236507,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24024420680,
            "rowCount" : 600610517,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_orderkey#18L, l_extendedprice#23, l_discount#24, s_nationkey#37L] "
          },
          "19" : {
            "sign" : 1203066116,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 360000000,
            "rowCount" : 15000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_custkey#1L, c_nationkey#4L], ShuffleQueryStage 4 "
          },
          "4" : {
            "sign" : -83830067,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 71307900,
            "rowCount" : 1188465,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L, n_name#42] "
          },
          "15" : {
            "sign" : 348012422,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1100,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_nationkey#41L, n_name#42, n_regionkey#43L] "
          },
          "11" : {
            "sign" : -447412508,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_suppkey#34L, s_nationkey#37L], ShuffleQueryStage 1 "
          },
          "9" : {
            "sign" : -476992181,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 33634188952,
            "rowCount" : 600610517,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (l_suppkey#20L = s_suppkey#34L) "
          },
          "13" : {
            "sign" : -346900626,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 900,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_nationkey#41L, n_name#42] "
          },
          "16" : {
            "sign" : -221658939,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3275,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(n_nationkey#41L) AND isnotnull(n_regionkey#43L)) "
          },
          "5" : {
            "sign" : 1607746126,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 80815620,
            "rowCount" : 1188465,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#37L = n_nationkey#41L) "
          },
          "10" : {
            "sign" : 711382530,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 24001516080,
            "rowCount" : 600037902,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_orderkey#18L, l_suppkey#20L, l_extendedprice#23, l_discount#24], ShuffleQueryStage 0 "
          },
          "6" : {
            "sign" : 761247655,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24056448880,
            "rowCount" : 601411222,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L] "
          },
          "1" : {
            "sign" : 1291244256,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 1100,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [n_name#42], [n_name#42, sum((l_extendedprice#23 * (1 - l_discount#24))) AS revenue#57] "
          },
          "17" : {
            "sign" : -1014178102,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3275,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [n_nationkey#41L, n_name#42, n_regionkey#43L, n_comment#44], `spark_catalog`.`tpch_100`.`nation`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "14" : {
            "sign" : 1344244099,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1300,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (n_regionkey#43L = r_regionkey#45L) "
          },
          "0" : {
            "sign" : -1077225016,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1100,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [revenue#57 DESC NULLS LAST], true "
          },
          "2" : {
            "sign" : 1878328148,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6620207792,
            "rowCount" : 150459268,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#23, l_discount#24, n_name#42] "
          },
          "18" : {
            "sign" : 971950750,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048584,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [r_regionkey#45L], BroadcastQueryStage 3 "
          },
          "7" : {
            "sign" : 774762583,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 33679028432,
            "rowCount" : 601411222,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (l_orderkey#18L = o_orderkey#9L) "
          },
          "3" : {
            "sign" : 1375842790,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 11434904368,
            "rowCount" : 150459268,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_custkey#1L = o_custkey#10L) AND (c_nationkey#4L = s_nationkey#37L)) "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalRelation",
          "toId" : 16,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Filter",
          "toId" : 15,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Project",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 14,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Join",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [revenue#57 DESC NULLS LAST], true\n+- Aggregate [n_name#42], [n_name#42, sum((l_extendedprice#23 * (1 - l_discount#24))) AS revenue#57]\n   +- Project [l_extendedprice#23, l_discount#24, n_name#42]\n      +- Join Inner, ((c_custkey#1L = o_custkey#10L) AND (c_nationkey#4L = s_nationkey#37L))\n         :- Project [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L, n_name#42]\n         :  +- Join Inner, (s_nationkey#37L = n_nationkey#41L)\n         :     :- Project [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L]\n         :     :  +- Join Inner, (l_orderkey#18L = o_orderkey#9L)\n         :     :     :- Project [l_orderkey#18L, l_extendedprice#23, l_discount#24, s_nationkey#37L]\n         :     :     :  +- Join Inner, (l_suppkey#20L = s_suppkey#34L)\n         :     :     :     :- LogicalQueryStage Project [l_orderkey#18L, l_suppkey#20L, l_extendedprice#23, l_discount#24], ShuffleQueryStage 0\n         :     :     :     +- LogicalQueryStage Project [s_suppkey#34L, s_nationkey#37L], ShuffleQueryStage 1\n         :     :     +- LogicalQueryStage Project [o_orderkey#9L, o_custkey#10L], ShuffleQueryStage 2\n         :     +- Project [n_nationkey#41L, n_name#42]\n         :        +- Join Inner, (n_regionkey#43L = r_regionkey#45L)\n         :           :- Project [n_nationkey#41L, n_name#42, n_regionkey#43L]\n         :           :  +- Filter (isnotnull(n_nationkey#41L) AND isnotnull(n_regionkey#43L))\n         :           :     +- Relation spark_catalog.tpch_100.nation[n_nationkey#41L,n_name#42,n_regionkey#43L,n_comment#44] parquet\n         :           +- LogicalQueryStage Project [r_regionkey#45L], BroadcastQueryStage 3\n         +- LogicalQueryStage Project [c_custkey#1L, c_nationkey#4L], ShuffleQueryStage 4\n"
      },
      "IM" : {
        "inputSizeInBytes" : 24932709683,
        "inputRowCount" : 638793834
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226551345,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 93216,
        "IOBytes" : {
          "Total" : 61743137263,
          "Details" : {
            "IR" : 10336716399,
            "IW" : 0,
            "SR" : 25703212839,
            "SW" : 25703208025
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1328089514,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 546141744,
            "rowCount" : 22755906,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [o_orderkey#9L, o_custkey#10L], ShuffleQueryStage 2 "
          },
          "8" : {
            "sign" : -1225236507,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24001516080000000,
            "rowCount" : 600037902000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_orderkey#18L, l_extendedprice#23, l_discount#24, s_nationkey#37L] "
          },
          "4" : {
            "sign" : -61422787,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 902116833000,
            "rowCount" : 15035280550,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L, n_name#42] "
          },
          "11" : {
            "sign" : -447412508,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_suppkey#34L, s_nationkey#37L], ShuffleQueryStage 1 "
          },
          "9" : {
            "sign" : -476992181,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 33602122512000000,
            "rowCount" : 600037902000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (l_suppkey#20L = s_suppkey#34L) "
          },
          "13" : {
            "sign" : 1472951198,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 900,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#41L, n_name#42], BroadcastQueryStage 5 "
          },
          "5" : {
            "sign" : 2096041264,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1022399077400,
            "rowCount" : 15035280550,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#37L = n_nationkey#41L) "
          },
          "10" : {
            "sign" : 711382530,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 24001516080,
            "rowCount" : 600037902,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_orderkey#18L, l_suppkey#20L, l_extendedprice#23, l_discount#24], ShuffleQueryStage 0 "
          },
          "6" : {
            "sign" : 761247655,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24056448880,
            "rowCount" : 601411222,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L] "
          },
          "1" : {
            "sign" : 819547188,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 44,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [n_name#42], [n_name#42, sum((l_extendedprice#23 * (1 - l_discount#24))) AS revenue#57] "
          },
          "14" : {
            "sign" : 1203066116,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 360000000,
            "rowCount" : 15000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_custkey#1L, c_nationkey#4L], ShuffleQueryStage 4 "
          },
          "0" : {
            "sign" : -352157026,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 44,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [revenue#57 DESC NULLS LAST], true "
          },
          "2" : {
            "sign" : 278098538,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6620207792,
            "rowCount" : 150459268,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#23, l_discount#24, n_name#42] "
          },
          "7" : {
            "sign" : 774762583,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 33679028432,
            "rowCount" : 601411222,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (l_orderkey#18L = o_orderkey#9L) "
          },
          "3" : {
            "sign" : 972836014,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 11434904368,
            "rowCount" : 150459268,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_custkey#1L = o_custkey#10L) AND (c_nationkey#4L = s_nationkey#37L)) "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [revenue#57 DESC NULLS LAST], true\n+- Aggregate [n_name#42], [n_name#42, sum((l_extendedprice#23 * (1 - l_discount#24))) AS revenue#57]\n   +- Project [l_extendedprice#23, l_discount#24, n_name#42]\n      +- Join Inner, ((c_custkey#1L = o_custkey#10L) AND (c_nationkey#4L = s_nationkey#37L))\n         :- Project [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L, n_name#42]\n         :  +- Join Inner, (s_nationkey#37L = n_nationkey#41L)\n         :     :- Project [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L]\n         :     :  +- Join Inner, (l_orderkey#18L = o_orderkey#9L)\n         :     :     :- Project [l_orderkey#18L, l_extendedprice#23, l_discount#24, s_nationkey#37L]\n         :     :     :  +- Join Inner, (l_suppkey#20L = s_suppkey#34L)\n         :     :     :     :- LogicalQueryStage Project [l_orderkey#18L, l_suppkey#20L, l_extendedprice#23, l_discount#24], ShuffleQueryStage 0\n         :     :     :     +- LogicalQueryStage Project [s_suppkey#34L, s_nationkey#37L], ShuffleQueryStage 1\n         :     :     +- LogicalQueryStage Project [o_orderkey#9L, o_custkey#10L], ShuffleQueryStage 2\n         :     +- LogicalQueryStage Project [n_nationkey#41L, n_name#42], BroadcastQueryStage 5\n         +- LogicalQueryStage Project [c_custkey#1L, c_nationkey#4L], ShuffleQueryStage 4\n"
      },
      "IM" : {
        "inputSizeInBytes" : 24931658724,
        "inputRowCount" : 638793833
      },
      "PD" : {
        "1" : [ 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 52331, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 52331, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 52331, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 52331, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 57565, 57565, 52331, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 52331, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 260,
        "FinishedTasksTotalTimeInMs" : 451771.0,
        "FinishedTasksDistributionInMs" : [ 81.0, 1398.0, 1527.0, 1706.0, 6242.0 ]
      },
      "StartTimeInMs" : 1702226580447,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 64114,
        "IOBytes" : {
          "Total" : 61726817831,
          "Details" : {
            "IR" : 10331016274,
            "IW" : 0,
            "SR" : 25703212839,
            "SW" : 25692588718
          }
        }
      }
    },
    "7" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : 257167554,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 24001516080,
            "rowCount" : 600037902,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_orderkey#18L, l_extendedprice#23, l_discount#24, s_nationkey#37L], ShuffleQueryStage 6 "
          },
          "4" : {
            "sign" : -2041471194,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4095532298433312000,
            "rowCount" : 68258871640555200,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L, n_name#42] "
          },
          "11" : {
            "sign" : 1203066116,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 360000000,
            "rowCount" : 15000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_custkey#1L, c_nationkey#4L], ShuffleQueryStage 4 "
          },
          "9" : {
            "sign" : 1328089514,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 546036480,
            "rowCount" : 22751520,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [o_orderkey#9L, o_custkey#10L], ShuffleQueryStage 2 "
          },
          "5" : {
            "sign" : 31598333,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4641603271557753600,
            "rowCount" : 68258871640555200,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#37L = n_nationkey#41L) "
          },
          "10" : {
            "sign" : 1472951198,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048768,
            "rowCount" : 5,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#41L, n_name#42], BroadcastQueryStage 5 "
          },
          "6" : {
            "sign" : 1005998698,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 546070973124441600,
            "rowCount" : 13651774328111040,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L] "
          },
          "1" : {
            "sign" : 1494680925,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 45050855282766432000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [n_name#42], [n_name#42, sum((l_extendedprice#23 * (1 - l_discount#24))) AS revenue#57] "
          },
          "0" : {
            "sign" : 2070876333,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 45050855282766432000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [revenue#57 DESC NULLS LAST], true "
          },
          "2" : {
            "sign" : 611015481,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 45050855282766432000000000,
            "rowCount" : 1023883074608328000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#23, l_discount#24, n_name#42] "
          },
          "7" : {
            "sign" : -1701929306,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 764499362374218240,
            "rowCount" : 13651774328111040,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (l_orderkey#18L = o_orderkey#9L) "
          },
          "3" : {
            "sign" : -845316637,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 77815113670232928000000000,
            "rowCount" : 1023883074608328000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_custkey#1L = o_custkey#10L) AND (c_nationkey#4L = s_nationkey#37L)) "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [revenue#57 DESC NULLS LAST], true\n+- Aggregate [n_name#42], [n_name#42, sum((l_extendedprice#23 * (1 - l_discount#24))) AS revenue#57]\n   +- Project [l_extendedprice#23, l_discount#24, n_name#42]\n      +- Join Inner, ((c_custkey#1L = o_custkey#10L) AND (c_nationkey#4L = s_nationkey#37L))\n         :- Project [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L, n_name#42]\n         :  +- Join Inner, (s_nationkey#37L = n_nationkey#41L)\n         :     :- Project [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L]\n         :     :  +- Join Inner, (l_orderkey#18L = o_orderkey#9L)\n         :     :     :- LogicalQueryStage Project [l_orderkey#18L, l_extendedprice#23, l_discount#24, s_nationkey#37L], ShuffleQueryStage 6\n         :     :     +- LogicalQueryStage Project [o_orderkey#9L, o_custkey#10L], ShuffleQueryStage 2\n         :     +- LogicalQueryStage Project [n_nationkey#41L, n_name#42], BroadcastQueryStage 5\n         +- LogicalQueryStage Project [c_custkey#1L, c_nationkey#4L], ShuffleQueryStage 4\n"
      },
      "IM" : {
        "inputSizeInBytes" : 24908601328,
        "inputRowCount" : 637789427
      },
      "PD" : {
        "2" : [ 1645502, 1620215, 1628644, 1653931, 1637073, 1637073, 1645502, 1620215, 1645502, 1645502, 1653931, 1620215, 1628644, 1637073, 1645502, 1645502, 1645502, 1637073, 1637073, 1653931, 1637073, 1628644, 1628644, 1637073, 1670789, 1628644, 1628644, 1637073, 1653931, 1633823, 1645502, 1637073, 1628644, 1620215, 1645502, 1653931, 1637073, 1645502, 1620215, 1620215, 1637073, 1645502, 1603357, 1620215, 1620215, 1653931, 1662360, 1628644, 1620215, 1645502, 1645502, 1653931, 1628644, 1620215, 1637073, 1628644, 1637073, 1603357, 1650681, 1620215, 1653931, 1662360, 1637073, 1637073, 1645502, 1628644, 1645502, 1637073, 1653931, 1653931, 1611786, 1653931, 1653931, 1637073, 1620215, 1620215, 1662360, 1620215, 1637073, 1628644, 1653931, 1653931, 1637073, 1637073, 1637073, 1670789, 1628644, 1620215, 1645502, 1642252, 1645502, 1620215, 1653931, 1637073, 1637073, 1637073, 1650681, 1637073, 1620215, 1637073, 1645502, 1620215, 1611786, 1620215, 1633823, 1637073, 1620215, 1628644, 1653931, 1611786, 1628644, 1611786, 1637073, 1633823, 1628644, 1628644, 1645502, 1620215, 1637073, 1645502, 1645502, 1620215, 1670789, 1628644, 1637073, 1628644, 1645502, 1637073, 1628644, 1653931, 1653931, 1637073, 1653931, 1653931, 1637073, 1625394, 1645502, 1645502, 1653931, 1642252, 1645502, 1645502, 1628644, 1611786, 1653931, 1645502, 1645502, 1620215, 1625394, 1628644, 1645502, 1653931, 1653931, 1637073, 1628644, 1637073, 1653931, 1611786, 1628644, 1628644, 1620215, 1670789, 1628644, 1645502, 1637073, 1628644, 1637073, 1637073, 1662360, 1637073, 1653931, 1628644, 1620215, 1637073, 1637073, 1645502, 1637073, 1645502, 1645502, 1662360, 1653931, 1620215, 1645502, 1653931, 1645502, 1645502, 1645502, 1620215, 1637073, 1645502, 1620215, 1645502, 1645502, 1633823, 1637073, 1637073, 1653931, 1637073, 1620215, 1611786 ],
        "4" : [ 58890304, 59006688, 58890304, 58977592, 58686632, 59064880, 58744824, 58832112, 58919400, 58744824, 58919400, 58773920, 58803016, 58861208, 58773920, 59123072, 58773920, 58919400, 58773920, 58919400, 58919400, 59093976, 58832112, 58773920, 58919400, 58861208, 58890304, 58948496, 58773920, 58686632, 58861208, 58773920, 58890304, 59035784, 58948496, 58890304, 58890304, 58832112, 58803016, 58773920, 58861208, 58919400, 58948496, 58744824, 58890304, 58861208, 58890304, 58890304, 58832112, 58861208, 58977592, 58919400, 59035784, 58919400, 58832112, 58686632, 58977592, 58977592, 58919400, 58861208, 58919400, 58948496, 59035784, 58832112, 58715728, 58890304, 59006688, 58890304, 58919400, 58890304, 58773920, 58948496, 59006688, 58803016, 58744824, 59035784, 58832112, 58890304, 59006688, 58977592, 59006688, 58948496, 58773920, 58773920, 58832112, 59093976, 58890304, 58832112, 58890304, 59064880, 58803016, 58832112, 58715728, 58803016, 58890304, 59035784, 58890304, 59064880, 58744824, 58715728, 58832112, 58948496, 58832112, 58832112, 58773920, 58832112, 58977592, 58832112, 58773920, 58832112, 58744824, 58744824, 58861208, 58715728, 58861208, 58977592, 58832112, 58803016, 58832112, 58861208, 58919400, 58832112, 58715728, 58832112, 58861208, 58832112, 58861208, 58861208, 58832112, 58861208, 58890304, 58803016, 59035784, 58948496, 58861208, 58977592, 58948496, 59035784, 58861208, 58715728, 58890304, 58803016, 58977592, 58890304, 58890304, 59035784, 58773920, 58744824, 58919400, 58773920, 58715728, 58948496, 58861208, 58861208, 59006688, 58861208, 59006688, 58803016, 58919400, 58803016, 58628440, 58948496, 58919400, 58948496, 58919400, 58657536, 58803016, 58977592, 58890304, 58773920, 58919400, 58919400, 59006688, 59006688, 59035784, 58773920, 58715728, 58919400, 59064880, 59123072, 58715728, 58919400, 58861208, 58832112, 58919400, 59064880, 59268552, 59035784, 59006688, 59152168, 59006688, 58948496, 58803016, 58861208, 59035784, 59093976, 58861208, 58919400, 58919400, 58803016 ],
        "3" : [ 789868, 796834, 796834, 782207, 789173, 774546, 774546, 789173, 781512, 781512, 796834, 781512, 796834, 789173, 796834, 789173, 782207, 789173, 774546, 781512, 796834, 804495, 782207, 796834, 789173, 789173, 774546, 789173, 773851, 796834, 796834, 789173, 789173, 781512, 797529, 789173, 781512, 797529, 796834, 773851, 781512, 773851, 781512, 789173, 773851, 789173, 789173, 781512, 773851, 781512, 789173, 781512, 796834, 781512, 789173, 781512, 804495, 789173, 781512, 796834, 773851, 796834, 781512, 796834, 781512, 789173, 804495, 781512, 773851, 789173, 789173, 781512, 804495, 781512, 804495, 789173, 781512, 781512, 766190, 789173, 789173, 797529, 796834, 789173, 773851, 796834, 789173, 781512, 781512, 774546, 796834, 766190, 781512, 789173, 773851, 796834, 773851, 781512, 789173, 789173, 773851, 774546, 789173, 789173, 796834, 789173, 804495, 789173, 796834, 789173, 789173, 773851, 796834, 789173, 789173, 781512, 789173, 781512, 773851, 789173, 773851, 781512, 789173, 796834, 796834, 789173, 789173, 781512, 804495, 782207, 789173, 773851, 789173, 782207, 781512, 773851, 789173, 781512, 789173, 781512, 796834, 789173, 789868, 781512, 766190, 781512, 789173, 789173, 804495, 781512, 773851, 781512, 796834, 766190, 766190, 773851, 796834, 796834, 781512, 781512, 789173, 796834, 797529, 804495, 789173, 789173, 789173, 804495, 789173, 796834, 789173, 781512, 789173, 781512, 789173, 796834, 789173, 789173, 796834, 796834, 789173, 781512, 781512, 782207, 789173, 796834, 782207, 789173, 782207, 781512, 789173, 781512, 796834, 804495, 796834, 766190, 796834, 789173, 773851, 789173 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226618124,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 26437,
        "IOBytes" : {
          "Total" : 12716500570,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 12297696389,
            "SW" : 418804181
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1328089514,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 546141744,
            "rowCount" : 22755906,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [o_orderkey#9L, o_custkey#10L], ShuffleQueryStage 2 "
          },
          "8" : {
            "sign" : -1225236507,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24001516080000000,
            "rowCount" : 600037902000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_orderkey#18L, l_extendedprice#23, l_discount#24, s_nationkey#37L] "
          },
          "4" : {
            "sign" : -61422787,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 20481609141523818000000000,
            "rowCount" : 341360152358730300000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L, n_name#42] "
          },
          "11" : {
            "sign" : -447412508,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_suppkey#34L, s_nationkey#37L], ShuffleQueryStage 1 "
          },
          "9" : {
            "sign" : -476992181,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 33602122512000000,
            "rowCount" : 600037902000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (l_suppkey#20L = s_suppkey#34L) "
          },
          "13" : {
            "sign" : 1472951198,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 900,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#41L, n_name#42], BroadcastQueryStage 5 "
          },
          "5" : {
            "sign" : 2096041264,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 23212490360393660400000000,
            "rowCount" : 341360152358730300000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#37L = n_nationkey#41L) "
          },
          "10" : {
            "sign" : 711382530,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 24001516080,
            "rowCount" : 600037902,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_orderkey#18L, l_suppkey#20L, l_extendedprice#23, l_discount#24], ShuffleQueryStage 0 "
          },
          "6" : {
            "sign" : 761247655,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 546176243773968480000000,
            "rowCount" : 13654406094349212000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L] "
          },
          "1" : {
            "sign" : 819547188,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 44,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [n_name#42], [n_name#42, sum((l_extendedprice#23 * (1 - l_discount#24))) AS revenue#57] "
          },
          "14" : {
            "sign" : 1203066116,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 360000000,
            "rowCount" : 15000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_custkey#1L, c_nationkey#4L], ShuffleQueryStage 4 "
          },
          "0" : {
            "sign" : -352157026,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 44,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [revenue#57 DESC NULLS LAST], true "
          },
          "2" : {
            "sign" : 278098538,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 6620207792,
            "rowCount" : 150459268,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#23, l_discount#24, n_name#42] "
          },
          "7" : {
            "sign" : 774762583,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 764646741283555872000000,
            "rowCount" : 13654406094349212000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (l_orderkey#18L = o_orderkey#9L) "
          },
          "3" : {
            "sign" : 972836014,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 11434904368,
            "rowCount" : 150459268,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_custkey#1L = o_custkey#10L) AND (c_nationkey#4L = s_nationkey#37L)) "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [revenue#57 DESC NULLS LAST], true\n+- Aggregate [n_name#42], [n_name#42, sum((l_extendedprice#23 * (1 - l_discount#24))) AS revenue#57]\n   +- Project [l_extendedprice#23, l_discount#24, n_name#42]\n      +- Join Inner, ((c_custkey#1L = o_custkey#10L) AND (c_nationkey#4L = s_nationkey#37L))\n         :- Project [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L, n_name#42]\n         :  +- Join Inner, (s_nationkey#37L = n_nationkey#41L)\n         :     :- Project [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L]\n         :     :  +- Join Inner, (l_orderkey#18L = o_orderkey#9L)\n         :     :     :- Project [l_orderkey#18L, l_extendedprice#23, l_discount#24, s_nationkey#37L]\n         :     :     :  +- Join Inner, (l_suppkey#20L = s_suppkey#34L)\n         :     :     :     :- LogicalQueryStage Project [l_orderkey#18L, l_suppkey#20L, l_extendedprice#23, l_discount#24], ShuffleQueryStage 0\n         :     :     :     +- LogicalQueryStage Project [s_suppkey#34L, s_nationkey#37L], ShuffleQueryStage 1\n         :     :     +- LogicalQueryStage Project [o_orderkey#9L, o_custkey#10L], ShuffleQueryStage 2\n         :     +- LogicalQueryStage Project [n_nationkey#41L, n_name#42], BroadcastQueryStage 5\n         +- LogicalQueryStage Project [c_custkey#1L, c_nationkey#4L], ShuffleQueryStage 4\n"
      },
      "IM" : {
        "inputSizeInBytes" : 24931658724,
        "inputRowCount" : 638793833
      },
      "PD" : {
        "1" : [ 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 52331, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 52331, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 52331, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 52331, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 57565, 57565, 52331, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 52331, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565 ],
        "0" : [ 69617055, 70632226, 70693376, 70678793, 70693193, 70757454, 70673608, 70714071, 70673723, 70658016, 70693376, 70741591, 70669330, 70412260, 70715236, 70673503, 70748397, 70672427, 70693481, 71278457, 70669550, 70715584, 70672593, 70628990, 70717326, 70678550, 70693280, 70720047, 70501962, 70661169, 70223562, 70719827, 70693193, 70715053, 70654399, 70678550, 70678445, 70603902, 70995513, 70678550, 70667227, 70693376, 70652921, 70672794, 70672689, 70541589, 70715341, 70574448, 70700305, 70743873, 70693376, 70648863, 70678262, 70693596, 70743873, 70726861, 70693280, 70719932, 70647052, 70476444, 70634526, 70687437, 70602424, 70661274, 70693376, 70845306, 70741792, 70488173, 70179183, 70667852, 70667332, 70678550, 70628171, 70687725, 70715236, 70628770, 70693376, 70700525, 70678445, 70669550, 70739282, 69587148, 70626269, 70693481, 70658572, 70714291, 70739387, 70715341, 70658920, 70678665, 70673608, 70571043, 70678445, 70842681, 70673608, 70628770, 70698036, 70693596, 70775068, 70693114, 70693724, 70938135, 70672689, 70693481, 70719932, 70647354, 70648547, 70582484, 70717326, 70821041, 70628674, 70667852, 70560311, 70694654, 70658920, 70944114, 70654303, 70678445, 70678445, 70675309, 70658476, 70672909, 70715140, 70672689, 70909407, 70637773, 70672427, 70724351, 70687968, 70658792, 70648863, 70789902, 70649677, 70816335, 70603806, 70678445, 70715456, 70596962, 70678349, 70681975, 70842419, 70717642, 70687620, 70678793, 70715584, 70678349, 70672794, 70806103, 70673176, 70635013, 70715584, 70672794, 70584029, 69592291, 70647354, 70719932, 70739099, 70648863, 70678262, 70678665, 70693376, 70431496, 70672991, 70693280, 70739282, 70693193, 70556852, 70693280, 70693596, 70217583, 70816230, 70652816, 70693481, 70678349, 70672689, 70672689, 70891097, 70816134, 70454588, 70715341, 70640610, 70646343, 69827608, 70614054, 70521272, 70688107, 70663478, 70673608, 70709480, 70658572, 70765550, 70667651, 70693376, 70890992, 70704896, 70370514, 70693596, 70695036, 70693863, 70687968 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 15,
        "FinishedTasksTotalTimeInMs" : 10788.0,
        "FinishedTasksDistributionInMs" : [ 14.0, 91.0, 875.0, 1061.0, 1320.0 ]
      },
      "StartTimeInMs" : 1702226581967,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 62594,
        "IOBytes" : {
          "Total" : 38346516369,
          "Details" : {
            "IR" : 345611955,
            "IW" : 0,
            "SR" : 25703212839,
            "SW" : 12297691575
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "8" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 300842683,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1100,
                "rowCount" : 25
              },
              "compileTime" : {
                "sizeInBytes" : 1100,
                "rowCount" : 25
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [n_name#42], [n_name#42, sum((l_extendedprice#23 * (1 - l_discount#24))) AS revenue#57] "
          },
          "1" : {
            "sign" : -1120870161,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 6620207792,
                "rowCount" : 150459268
              },
              "compileTime" : {
                "sizeInBytes" : 6620207792,
                "rowCount" : 150459268
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#23, l_discount#24, n_name#42] "
          },
          "2" : {
            "sign" : -863926079,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 11434904368,
                "rowCount" : 150459268
              },
              "compileTime" : {
                "sizeInBytes" : 11434904368,
                "rowCount" : 150459268
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((c_custkey#1L = o_custkey#10L) AND (c_nationkey#4L = s_nationkey#37L)) "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [n_name#42], [n_name#42, sum((l_extendedprice#23 * (1 - l_discount#24))) AS revenue#57]\n+- Project [l_extendedprice#23, l_discount#24, n_name#42]\n   +- Join Inner, ((c_custkey#1L = o_custkey#10L) AND (c_nationkey#4L = s_nationkey#37L))\n      :- Project [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L, n_name#42]\n      :  +- Join Inner, (s_nationkey#37L = n_nationkey#41L)\n      :     :- Project [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L]\n      :     :  +- Join Inner, (l_orderkey#18L = o_orderkey#9L)\n      :     :     :- Project [l_orderkey#18L, l_extendedprice#23, l_discount#24, s_nationkey#37L]\n      :     :     :  +- Join Inner, (l_suppkey#20L = s_suppkey#34L)\n      :     :     :     :- Project [l_orderkey#18L, l_suppkey#20L, l_extendedprice#23, l_discount#24]\n      :     :     :     :  +- Filter (isnotnull(l_orderkey#18L) AND isnotnull(l_suppkey#20L))\n      :     :     :     :     +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#18L,l_partkey#19L,l_suppkey#20L,l_linenumber#21,l_quantity#22,l_extendedprice#23,l_discount#24,l_tax#25,l_returnflag#26,l_linestatus#27,l_commitdate#28,l_receiptdate#29,l_shipinstruct#30,l_shipmode#31,l_comment#32,l_shipdate#33] parquet\n      :     :     :     +- Project [s_suppkey#34L, s_nationkey#37L]\n      :     :     :        +- Filter (isnotnull(s_suppkey#34L) AND isnotnull(s_nationkey#37L))\n      :     :     :           +- Relation spark_catalog.tpch_100.supplier[s_suppkey#34L,s_name#35,s_address#36,s_nationkey#37L,s_phone#38,s_acctbal#39,s_comment#40] parquet\n      :     :     +- Project [o_orderkey#9L, o_custkey#10L]\n      :     :        +- Filter ((((isnotnull(o_orderdate#17) AND (o_orderdate#17 >= 1993-01-01)) AND (o_orderdate#17 < 1994-01-01)) AND isnotnull(o_custkey#10L)) AND isnotnull(o_orderkey#9L))\n      :     :           +- Relation spark_catalog.tpch_100.orders[o_orderkey#9L,o_custkey#10L,o_orderstatus#11,o_totalprice#12,o_orderpriority#13,o_clerk#14,o_shippriority#15,o_comment#16,o_orderdate#17] parquet\n      :     +- Project [n_nationkey#41L, n_name#42]\n      :        +- Join Inner, (n_regionkey#43L = r_regionkey#45L)\n      :           :- Project [n_nationkey#41L, n_name#42, n_regionkey#43L]\n      :           :  +- Filter (isnotnull(n_nationkey#41L) AND isnotnull(n_regionkey#43L))\n      :           :     +- Relation spark_catalog.tpch_100.nation[n_nationkey#41L,n_name#42,n_regionkey#43L,n_comment#44] parquet\n      :           +- Project [r_regionkey#45L]\n      :              +- Filter ((isnotnull(r_name#46) AND (r_name#46 = AMERICA)) AND isnotnull(r_regionkey#45L))\n      :                 +- Relation spark_catalog.tpch_100.region[r_regionkey#45L,r_name#46,r_comment#47] parquet\n      +- Project [c_custkey#1L, c_nationkey#4L]\n         +- Filter (isnotnull(c_custkey#1L) AND isnotnull(c_nationkey#4L))\n            +- Relation spark_catalog.tpch_100.customer[c_custkey#1L,c_name#2,c_address#3,c_nationkey#4L,c_phone#5,c_acctbal#6,c_comment#7,c_mktsegment#8] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 2014043698,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 1076451544,
            "rowCount" : 18184067,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [5]: [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L, n_name#42] Arguments: 7 "
          },
          "5" : {
            "sign" : 1908795446,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [c_custkey#1L, c_nationkey#4L] Arguments: [c_custkey#1L ASC NULLS FIRST, c_nationkey#4L ASC NULLS FIRST], false, 0 "
          },
          "6" : {
            "sign" : -48654986,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 360000000,
            "rowCount" : 15000000,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [c_custkey#1L, c_nationkey#4L] Arguments: 4 "
          },
          "1" : {
            "sign" : -284288835,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 6620207792,
            "rowCount" : 150459268,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [l_extendedprice#23, l_discount#24, n_name#42] Input [7]: [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L, n_name#42, c_custkey#1L, c_nationkey#4L] "
          },
          "0" : {
            "sign" : 77912315,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 1100,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [3]: [l_extendedprice#23, l_discount#24, n_name#42] Keys [1]: [n_name#42] Functions [1]: [partial_sum((l_extendedprice#23 * (1 - l_discount#24)))] Aggregate Attributes [2]: [sum#61, isEmpty#62] Results [3]: [n_name#42, sum#63, isEmpty#64] "
          },
          "2" : {
            "sign" : -1768516755,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 11434904368,
            "rowCount" : 150459268,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [2]: [o_custkey#10L, s_nationkey#37L] Right keys [2]: [c_custkey#1L, c_nationkey#4L] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : -391201182,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [5]: [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L, n_name#42] Arguments: [o_custkey#10L ASC NULLS FIRST, s_nationkey#37L ASC NULLS FIRST], false, 0 "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "ShuffleQueryStage",
          "toId" : 5,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "SortMergeJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[n_name#42], functions=[partial_sum((l_extendedprice#23 * (1 - l_discount#24)))], output=[n_name#42, sum#63, isEmpty#64])\n+- Project [l_extendedprice#23, l_discount#24, n_name#42]\n   +- SortMergeJoin [o_custkey#10L, s_nationkey#37L], [c_custkey#1L, c_nationkey#4L], Inner\n      :- Sort [o_custkey#10L ASC NULLS FIRST, s_nationkey#37L ASC NULLS FIRST], false, 0\n      :  +- ShuffleQueryStage 7\n      :     +- Exchange hashpartitioning(o_custkey#10L, s_nationkey#37L, 200), ENSURE_REQUIREMENTS, [plan_id=981]\n      :        +- *(12) Project [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L, n_name#42]\n      :           +- *(12) BroadcastHashJoin [s_nationkey#37L], [n_nationkey#41L], Inner, BuildRight, false\n      :              :- *(12) Project [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L]\n      :              :  +- *(12) SortMergeJoin [l_orderkey#18L], [o_orderkey#9L], Inner\n      :              :     :- *(10) Sort [l_orderkey#18L ASC NULLS FIRST], false, 0\n      :              :     :  +- ShuffleQueryStage 6\n      :              :     :     +- Exchange hashpartitioning(l_orderkey#18L, 200), ENSURE_REQUIREMENTS, [plan_id=692]\n      :              :     :        +- *(9) Project [l_orderkey#18L, l_extendedprice#23, l_discount#24, s_nationkey#37L]\n      :              :     :           +- *(9) SortMergeJoin [l_suppkey#20L], [s_suppkey#34L], Inner\n      :              :     :              :- *(7) Sort [l_suppkey#20L ASC NULLS FIRST], false, 0\n      :              :     :              :  +- ShuffleQueryStage 0\n      :              :     :              :     +- Exchange hashpartitioning(l_suppkey#20L, 200), ENSURE_REQUIREMENTS, [plan_id=241]\n      :              :     :              :        +- *(1) Project [l_orderkey#18L, l_suppkey#20L, l_extendedprice#23, l_discount#24]\n      :              :     :              :           +- *(1) Filter (isnotnull(l_orderkey#18L) AND isnotnull(l_suppkey#20L))\n      :              :     :              :              +- *(1) ColumnarToRow\n      :              :     :              :                 +- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#18L,l_suppkey#20L,l_extendedprice#23,l_discount#24,l_shipdate#33] Batched: true, DataFilters: [isnotnull(l_orderkey#18L), isnotnull(l_suppkey#20L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem], PartitionFilters: [], PushedFilters: [IsNotNull(l_orderkey), IsNotNull(l_suppkey)], ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2)>\n      :              :     :              +- *(8) Sort [s_suppkey#34L ASC NULLS FIRST], false, 0\n      :              :     :                 +- ShuffleQueryStage 1\n      :              :     :                    +- Exchange hashpartitioning(s_suppkey#34L, 200), ENSURE_REQUIREMENTS, [plan_id=260]\n      :              :     :                       +- *(2) Filter (isnotnull(s_suppkey#34L) AND isnotnull(s_nationkey#37L))\n      :              :     :                          +- *(2) ColumnarToRow\n      :              :     :                             +- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#34L,s_nationkey#37L] Batched: true, DataFilters: [isnotnull(s_suppkey#34L), isnotnull(s_nationkey#37L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>\n      :              :     +- *(11) Sort [o_orderkey#9L ASC NULLS FIRST], false, 0\n      :              :        +- ShuffleQueryStage 2\n      :              :           +- Exchange hashpartitioning(o_orderkey#9L, 200), ENSURE_REQUIREMENTS, [plan_id=283]\n      :              :              +- *(3) Project [o_orderkey#9L, o_custkey#10L]\n      :              :                 +- *(3) Filter (isnotnull(o_custkey#10L) AND isnotnull(o_orderkey#9L))\n      :              :                    +- *(3) ColumnarToRow\n      :              :                       +- FileScan parquet spark_catalog.tpch_100.orders[o_orderkey#9L,o_custkey#10L,o_orderdate#17] Batched: true, DataFilters: [isnotnull(o_custkey#10L), isnotnull(o_orderkey#9L)], Format: Parquet, Location: InMemoryFileIndex(365 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/orders/o..., PartitionFilters: [isnotnull(o_orderdate#17), (o_orderdate#17 >= 1993-01-01), (o_orderdate#17 < 1994-01-01)], PushedFilters: [IsNotNull(o_custkey), IsNotNull(o_orderkey)], ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint>\n      :              +- BroadcastQueryStage 5\n      :                 +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=499]\n      :                    +- *(6) Project [n_nationkey#41L, n_name#42]\n      :                       +- *(6) BroadcastHashJoin [n_regionkey#43L], [r_regionkey#45L], Inner, BuildRight, false\n      :                          :- *(6) Filter (isnotnull(n_nationkey#41L) AND isnotnull(n_regionkey#43L))\n      :                          :  +- *(6) ColumnarToRow\n      :                          :     +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#41L,n_name#42,n_regionkey#43L] Batched: true, DataFilters: [isnotnull(n_nationkey#41L), isnotnull(n_regionkey#43L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string,n_regionkey:bigint>\n      :                          +- BroadcastQueryStage 3\n      :                             +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=306]\n      :                                +- *(4) Project [r_regionkey#45L]\n      :                                   +- *(4) Filter ((isnotnull(r_name#46) AND (r_name#46 = AMERICA)) AND isnotnull(r_regionkey#45L))\n      :                                      +- *(4) ColumnarToRow\n      :                                         +- FileScan parquet spark_catalog.tpch_100.region[r_regionkey#45L,r_name#46] Batched: true, DataFilters: [isnotnull(r_name#46), (r_name#46 = AMERICA), isnotnull(r_regionkey#45L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/region], PartitionFilters: [], PushedFilters: [IsNotNull(r_name), EqualTo(r_name,AMERICA), IsNotNull(r_regionkey)], ReadSchema: struct<r_regionkey:bigint,r_name:string>\n      +- Sort [c_custkey#1L ASC NULLS FIRST, c_nationkey#4L ASC NULLS FIRST], false, 0\n         +- ShuffleQueryStage 4\n            +- Exchange hashpartitioning(c_custkey#1L, c_nationkey#4L, 200), ENSURE_REQUIREMENTS, [plan_id=332]\n               +- *(5) Project [c_custkey#1L, c_nationkey#4L]\n                  +- *(5) Filter (isnotnull(c_custkey#1L) AND isnotnull(c_nationkey#4L))\n                     +- *(5) ColumnarToRow\n                        +- FileScan parquet spark_catalog.tpch_100.customer[c_custkey#1L,c_nationkey#4L,c_mktsegment#8] Batched: true, DataFilters: [isnotnull(c_custkey#1L), isnotnull(c_nationkey#4L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)], ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1436451544,
        "inputRowCount" : 33184067
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "5" : [ 2200252, 2217248, 2183068, 2186287, 2193017, 2204625, 2209785, 2215495, 2188347, 2186683, 2204833, 2191472, 2204798, 2197043, 2200871, 2193750, 2201926, 2208423, 2191576, 2208542, 2197766, 2200579, 2191135, 2188669, 2205021, 2204843, 2198182, 2192413, 2198058, 2198499, 2193522, 2194369, 2192715, 2201693, 2196637, 2190645, 2194973, 2203481, 2203451, 2199321, 2200282, 2197350, 2203377, 2189392, 2198088, 2195998, 2188461, 2186579, 2212286, 2195151, 2190823, 2214336, 2195518, 2189704, 2204506, 2192809, 2201401, 2203243, 2195716, 2195265, 2192903, 2180349, 2197662, 2205135, 2178215, 2205041, 2204179, 2188233, 2179418, 2203159, 2182439, 2198811, 2195602, 2193948, 2198415, 2210008, 2208730, 2184301, 2194359, 2188045, 2201495, 2193636, 2198509, 2195602, 2206076, 2213717, 2206160, 2197766, 2195067, 2204214, 2189496, 2206274, 2194389, 2190239, 2195904, 2209067, 2182345, 2202510, 2215183, 2192715, 2204709, 2199628, 2192611, 2197890, 2196939, 2213613, 2198192, 2198999, 2190496, 2201822, 2197890, 2191170, 2202857, 2197355, 2196929, 2188149, 2207111, 2198925, 2205729, 2196657, 2200222, 2188149, 2192254, 2204392, 2188659, 2186881, 2194963, 2188451, 2196959, 2191848, 2192893, 2197692, 2187634, 2203674, 2191878, 2199846, 2200475, 2199529, 2217441, 2185564, 2187614, 2211048, 2190823, 2189298, 2193195, 2201411, 2202426, 2197078, 2180651, 2198108, 2200044, 2196657, 2198831, 2212598, 2191764, 2200574, 2174892, 2209889, 2200995, 2209800, 2202332, 2189694, 2190605, 2193596, 2191452, 2190303, 2190278, 2206482, 2210394, 2191680, 2217030, 2186465, 2208428, 2179117, 2192685, 2182909, 2204600, 2205531, 2208230, 2192809, 2213727, 2195894, 2184905, 2204278, 2175333, 2189684, 2197063, 2204194, 2191511, 2193606, 2189996, 2191650, 2194671, 2190417, 2193027, 2193334, 2197474, 2199509, 2202332, 2192309 ],
        "3" : [ 789868, 796834, 796834, 782207, 789173, 774546, 774546, 789173, 781512, 781512, 796834, 781512, 796834, 789173, 796834, 789173, 782207, 789173, 774546, 781512, 796834, 804495, 782207, 796834, 789173, 789173, 774546, 789173, 773851, 796834, 796834, 789173, 789173, 781512, 797529, 789173, 781512, 797529, 796834, 773851, 781512, 773851, 781512, 789173, 773851, 789173, 789173, 781512, 773851, 781512, 789173, 781512, 796834, 781512, 789173, 781512, 804495, 789173, 781512, 796834, 773851, 796834, 781512, 796834, 781512, 789173, 804495, 781512, 773851, 789173, 789173, 781512, 804495, 781512, 804495, 789173, 781512, 781512, 766190, 789173, 789173, 797529, 796834, 789173, 773851, 796834, 789173, 781512, 781512, 774546, 796834, 766190, 781512, 789173, 773851, 796834, 773851, 781512, 789173, 789173, 773851, 774546, 789173, 789173, 796834, 789173, 804495, 789173, 796834, 789173, 789173, 773851, 796834, 789173, 789173, 781512, 789173, 781512, 773851, 789173, 773851, 781512, 789173, 796834, 796834, 789173, 789173, 781512, 804495, 782207, 789173, 773851, 789173, 782207, 781512, 773851, 789173, 781512, 789173, 781512, 796834, 789173, 789868, 781512, 766190, 781512, 789173, 789173, 804495, 781512, 773851, 781512, 796834, 766190, 766190, 773851, 796834, 796834, 781512, 781512, 789173, 796834, 797529, 804495, 789173, 789173, 789173, 804495, 789173, 796834, 789173, 781512, 789173, 781512, 789173, 796834, 789173, 789173, 796834, 796834, 789173, 781512, 781512, 782207, 789173, 796834, 782207, 789173, 782207, 781512, 789173, 781512, 796834, 804495, 796834, 766190, 796834, 789173, 773851, 789173 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 8,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 22 ],
      "Objectives" : {
        "DurationInMs" : 4100,
        "TotalTasksDurationInMs" : 34473,
        "IOBytes" : {
          "Total" : 566943259,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 566938445,
            "SW" : 4814
          }
        }
      }
    },
    "4" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1516489058,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 360000000,
                "rowCount" : 15000000
              },
              "compileTime" : {
                "sizeInBytes" : 360000000,
                "rowCount" : 15000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_custkey#1L, c_nationkey#4L] "
          },
          "1" : {
            "sign" : -1539888860,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3495000000,
                "rowCount" : 15000000
              },
              "compileTime" : {
                "sizeInBytes" : 3495000000,
                "rowCount" : 15000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_custkey#1L) AND isnotnull(c_nationkey#4L)) "
          },
          "2" : {
            "sign" : -240052685,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3495000000,
                "rowCount" : 15000000
              },
              "compileTime" : {
                "sizeInBytes" : 3495000000,
                "rowCount" : 15000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_custkey#1L, c_name#2, c_address#3, c_nationkey#4L, c_phone#5, c_acctbal#6, c_comment#7, c_mktsegment#8], `spark_catalog`.`tpch_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [c_custkey#1L, c_nationkey#4L]\n+- Filter (isnotnull(c_custkey#1L) AND isnotnull(c_nationkey#4L))\n   +- Relation spark_catalog.tpch_100.customer[c_custkey#1L,c_name#2,c_address#3,c_nationkey#4L,c_phone#5,c_acctbal#6,c_comment#7,c_mktsegment#8] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 753497311,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 360000000,
            "rowCount" : 15000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [c_custkey#1L, c_nationkey#4L] Input [3]: [c_custkey#1L, c_nationkey#4L, c_mktsegment#8] "
          },
          "1" : {
            "sign" : -1802806367,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 360000000,
            "rowCount" : 15000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [c_custkey#1L, c_nationkey#4L, c_mktsegment#8] Condition : (isnotnull(c_custkey#1L) AND isnotnull(c_nationkey#4L)) "
          },
          "2" : {
            "sign" : 22564144,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 360000000,
            "rowCount" : 15000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.customer Output [3]: [c_custkey#1L, c_nationkey#4L, c_mktsegment#8] Batched: true Location: CatalogFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/customer] PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)] ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpch_100.customer",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [c_custkey#1L, c_nationkey#4L]\n+- Filter (isnotnull(c_custkey#1L) AND isnotnull(c_nationkey#4L))\n   +- FileScan parquet spark_catalog.tpch_100.customer[c_custkey#1L,c_nationkey#4L,c_mktsegment#8] Batched: true, DataFilters: [isnotnull(c_custkey#1L), isnotnull(c_nationkey#4L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)], ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 360000000,
        "inputRowCount" : 15000000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 6 ],
      "Objectives" : {
        "DurationInMs" : 31483,
        "TotalTasksDurationInMs" : 6299,
        "IOBytes" : {
          "Total" : 234506706,
          "Details" : {
            "IR" : 86367163,
            "IW" : 0,
            "SR" : 0,
            "SW" : 148139543
          }
        }
      }
    },
    "9" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1870241627,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2960,
                "rowCount" : 50
              },
              "compileTime" : {
                "sizeInBytes" : 1100,
                "rowCount" : 25
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [n_name#42], [n_name#42, sum((l_extendedprice#23 * (1 - l_discount#24))) AS revenue#57], HashAggregate(keys=[n_name#42], functions=[sum((l_extendedprice#23 * (1 - l_discount#24)))]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [n_name#42], [n_name#42, sum((l_extendedprice#23 * (1 - l_discount#24))) AS revenue#57], HashAggregate(keys=[n_name#42], functions=[sum((l_extendedprice#23 * (1 - l_discount#24)))])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 2118832484,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 2960,
            "rowCount" : 50,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [3]: [n_name#42, sum#63, isEmpty#64] Keys [1]: [n_name#42] Functions [1]: [sum((l_extendedprice#23 * (1 - l_discount#24)))] Aggregate Attributes [1]: [sum((l_extendedprice#23 * (1 - l_discount#24)))#58] Results [2]: [n_name#42, sum((l_extendedprice#23 * (1 - l_discount#24)))#58 AS revenue#57] "
          },
          "1" : {
            "sign" : 1835470750,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 1100,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [n_name#42, sum#63, isEmpty#64] Arguments: 8 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[n_name#42], functions=[sum((l_extendedprice#23 * (1 - l_discount#24)))], output=[n_name#42, revenue#57])\n+- ShuffleQueryStage 8\n   +- Exchange hashpartitioning(n_name#42, 200), ENSURE_REQUIREMENTS, [plan_id=1076]\n      +- *(15) HashAggregate(keys=[n_name#42], functions=[partial_sum((l_extendedprice#23 * (1 - l_discount#24)))], output=[n_name#42, sum#63, isEmpty#64])\n         +- *(15) Project [l_extendedprice#23, l_discount#24, n_name#42]\n            +- *(15) SortMergeJoin [o_custkey#10L, s_nationkey#37L], [c_custkey#1L, c_nationkey#4L], Inner\n               :- *(13) Sort [o_custkey#10L ASC NULLS FIRST, s_nationkey#37L ASC NULLS FIRST], false, 0\n               :  +- AQEShuffleRead coalesced\n               :     +- ShuffleQueryStage 7\n               :        +- Exchange hashpartitioning(o_custkey#10L, s_nationkey#37L, 200), ENSURE_REQUIREMENTS, [plan_id=981]\n               :           +- *(12) Project [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L, n_name#42]\n               :              +- *(12) BroadcastHashJoin [s_nationkey#37L], [n_nationkey#41L], Inner, BuildRight, false\n               :                 :- *(12) Project [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L]\n               :                 :  +- *(12) SortMergeJoin [l_orderkey#18L], [o_orderkey#9L], Inner\n               :                 :     :- *(10) Sort [l_orderkey#18L ASC NULLS FIRST], false, 0\n               :                 :     :  +- ShuffleQueryStage 6\n               :                 :     :     +- Exchange hashpartitioning(l_orderkey#18L, 200), ENSURE_REQUIREMENTS, [plan_id=692]\n               :                 :     :        +- *(9) Project [l_orderkey#18L, l_extendedprice#23, l_discount#24, s_nationkey#37L]\n               :                 :     :           +- *(9) SortMergeJoin [l_suppkey#20L], [s_suppkey#34L], Inner\n               :                 :     :              :- *(7) Sort [l_suppkey#20L ASC NULLS FIRST], false, 0\n               :                 :     :              :  +- ShuffleQueryStage 0\n               :                 :     :              :     +- Exchange hashpartitioning(l_suppkey#20L, 200), ENSURE_REQUIREMENTS, [plan_id=241]\n               :                 :     :              :        +- *(1) Project [l_orderkey#18L, l_suppkey#20L, l_extendedprice#23, l_discount#24]\n               :                 :     :              :           +- *(1) Filter (isnotnull(l_orderkey#18L) AND isnotnull(l_suppkey#20L))\n               :                 :     :              :              +- *(1) ColumnarToRow\n               :                 :     :              :                 +- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#18L,l_suppkey#20L,l_extendedprice#23,l_discount#24,l_shipdate#33] Batched: true, DataFilters: [isnotnull(l_orderkey#18L), isnotnull(l_suppkey#20L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem], PartitionFilters: [], PushedFilters: [IsNotNull(l_orderkey), IsNotNull(l_suppkey)], ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2)>\n               :                 :     :              +- *(8) Sort [s_suppkey#34L ASC NULLS FIRST], false, 0\n               :                 :     :                 +- ShuffleQueryStage 1\n               :                 :     :                    +- Exchange hashpartitioning(s_suppkey#34L, 200), ENSURE_REQUIREMENTS, [plan_id=260]\n               :                 :     :                       +- *(2) Filter (isnotnull(s_suppkey#34L) AND isnotnull(s_nationkey#37L))\n               :                 :     :                          +- *(2) ColumnarToRow\n               :                 :     :                             +- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#34L,s_nationkey#37L] Batched: true, DataFilters: [isnotnull(s_suppkey#34L), isnotnull(s_nationkey#37L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>\n               :                 :     +- *(11) Sort [o_orderkey#9L ASC NULLS FIRST], false, 0\n               :                 :        +- ShuffleQueryStage 2\n               :                 :           +- Exchange hashpartitioning(o_orderkey#9L, 200), ENSURE_REQUIREMENTS, [plan_id=283]\n               :                 :              +- *(3) Project [o_orderkey#9L, o_custkey#10L]\n               :                 :                 +- *(3) Filter (isnotnull(o_custkey#10L) AND isnotnull(o_orderkey#9L))\n               :                 :                    +- *(3) ColumnarToRow\n               :                 :                       +- FileScan parquet spark_catalog.tpch_100.orders[o_orderkey#9L,o_custkey#10L,o_orderdate#17] Batched: true, DataFilters: [isnotnull(o_custkey#10L), isnotnull(o_orderkey#9L)], Format: Parquet, Location: InMemoryFileIndex(365 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/orders/o..., PartitionFilters: [isnotnull(o_orderdate#17), (o_orderdate#17 >= 1993-01-01), (o_orderdate#17 < 1994-01-01)], PushedFilters: [IsNotNull(o_custkey), IsNotNull(o_orderkey)], ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint>\n               :                 +- BroadcastQueryStage 5\n               :                    +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=499]\n               :                       +- *(6) Project [n_nationkey#41L, n_name#42]\n               :                          +- *(6) BroadcastHashJoin [n_regionkey#43L], [r_regionkey#45L], Inner, BuildRight, false\n               :                             :- *(6) Filter (isnotnull(n_nationkey#41L) AND isnotnull(n_regionkey#43L))\n               :                             :  +- *(6) ColumnarToRow\n               :                             :     +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#41L,n_name#42,n_regionkey#43L] Batched: true, DataFilters: [isnotnull(n_nationkey#41L), isnotnull(n_regionkey#43L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string,n_regionkey:bigint>\n               :                             +- BroadcastQueryStage 3\n               :                                +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=306]\n               :                                   +- *(4) Project [r_regionkey#45L]\n               :                                      +- *(4) Filter ((isnotnull(r_name#46) AND (r_name#46 = AMERICA)) AND isnotnull(r_regionkey#45L))\n               :                                         +- *(4) ColumnarToRow\n               :                                            +- FileScan parquet spark_catalog.tpch_100.region[r_regionkey#45L,r_name#46] Batched: true, DataFilters: [isnotnull(r_name#46), (r_name#46 = AMERICA), isnotnull(r_regionkey#45L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/region], PartitionFilters: [], PushedFilters: [IsNotNull(r_name), EqualTo(r_name,AMERICA), IsNotNull(r_regionkey)], ReadSchema: struct<r_regionkey:bigint,r_name:string>\n               +- *(14) Sort [c_custkey#1L ASC NULLS FIRST, c_nationkey#4L ASC NULLS FIRST], false, 0\n                  +- AQEShuffleRead coalesced\n                     +- ShuffleQueryStage 4\n                        +- Exchange hashpartitioning(c_custkey#1L, c_nationkey#4L, 200), ENSURE_REQUIREMENTS, [plan_id=332]\n                           +- *(5) Project [c_custkey#1L, c_nationkey#4L]\n                              +- *(5) Filter (isnotnull(c_custkey#1L) AND isnotnull(c_nationkey#4L))\n                                 +- *(5) ColumnarToRow\n                                    +- FileScan parquet spark_catalog.tpch_100.customer[c_custkey#1L,c_nationkey#4L,c_mktsegment#8] Batched: true, DataFilters: [isnotnull(c_custkey#1L), isnotnull(c_nationkey#4L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)], ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2960,
        "inputRowCount" : 50
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "6" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 970, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1060, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1060, 0, 0, 0, 0, 970, 0, 0, 0, 0, 0, 970, 0 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 9,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 30, 38 ],
      "Objectives" : {
        "DurationInMs" : 275,
        "TotalTasksDurationInMs" : 244,
        "IOBytes" : {
          "Total" : 10093,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 9628,
            "SW" : 465
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -1014178102,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3275,
                "rowCount" : 25
              },
              "compileTime" : {
                "sizeInBytes" : 3275,
                "rowCount" : 25
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [n_nationkey#41L, n_name#42, n_regionkey#43L, n_comment#44], `spark_catalog`.`tpch_100`.`nation`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : 2089846731,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1300,
                "rowCount" : 25
              },
              "compileTime" : {
                "sizeInBytes" : 1300,
                "rowCount" : 25
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (n_regionkey#43L = r_regionkey#45L) "
          },
          "0" : {
            "sign" : 552224994,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 900,
                "rowCount" : 25
              },
              "compileTime" : {
                "sizeInBytes" : 900,
                "rowCount" : 25
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_nationkey#41L, n_name#42] "
          },
          "2" : {
            "sign" : 348012422,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1100,
                "rowCount" : 25
              },
              "compileTime" : {
                "sizeInBytes" : 1100,
                "rowCount" : 25
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_nationkey#41L, n_name#42, n_regionkey#43L] "
          },
          "3" : {
            "sign" : -221658939,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3275,
                "rowCount" : 25
              },
              "compileTime" : {
                "sizeInBytes" : 3275,
                "rowCount" : 25
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(n_nationkey#41L) AND isnotnull(n_regionkey#43L)) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [n_nationkey#41L, n_name#42]\n+- Join Inner, (n_regionkey#43L = r_regionkey#45L)\n   :- Project [n_nationkey#41L, n_name#42, n_regionkey#43L]\n   :  +- Filter (isnotnull(n_nationkey#41L) AND isnotnull(n_regionkey#43L))\n   :     +- Relation spark_catalog.tpch_100.nation[n_nationkey#41L,n_name#42,n_regionkey#43L,n_comment#44] parquet\n   +- Project [r_regionkey#45L]\n      +- Filter ((isnotnull(r_name#46) AND (r_name#46 = AMERICA)) AND isnotnull(r_regionkey#45L))\n         +- Relation spark_catalog.tpch_100.region[r_regionkey#45L,r_name#46,r_comment#47] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -1050047436,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048584,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [r_regionkey#45L] Arguments: 3 "
          },
          "1" : {
            "sign" : -1866602773,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 1300,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [n_regionkey#43L] Right keys [1]: [r_regionkey#45L] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : -803863342,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 900,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [n_nationkey#41L, n_name#42] Input [4]: [n_nationkey#41L, n_name#42, n_regionkey#43L, r_regionkey#45L] "
          },
          "2" : {
            "sign" : 272472926,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 1100,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [n_nationkey#41L, n_name#42, n_regionkey#43L] Condition : (isnotnull(n_nationkey#41L) AND isnotnull(n_regionkey#43L)) "
          },
          "3" : {
            "sign" : -2093736135,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 1100,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.nation Output [3]: [n_nationkey#41L, n_name#42, n_regionkey#43L] Batched: true Location: InMemoryFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation] PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)] ReadSchema: struct<n_nationkey:bigint,n_name:string,n_regionkey:bigint> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpch_100.nation",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [n_nationkey#41L, n_name#42]\n+- BroadcastHashJoin [n_regionkey#43L], [r_regionkey#45L], Inner, BuildRight, false\n   :- Filter (isnotnull(n_nationkey#41L) AND isnotnull(n_regionkey#43L))\n   :  +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#41L,n_name#42,n_regionkey#43L] Batched: true, DataFilters: [isnotnull(n_nationkey#41L), isnotnull(n_regionkey#43L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string,n_regionkey:bigint>\n   +- BroadcastQueryStage 3\n      +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=306]\n         +- *(4) Project [r_regionkey#45L]\n            +- *(4) Filter ((isnotnull(r_name#46) AND (r_name#46 = AMERICA)) AND isnotnull(r_regionkey#45L))\n               +- *(4) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpch_100.region[r_regionkey#45L,r_name#46] Batched: true, DataFilters: [isnotnull(r_name#46), (r_name#46 = AMERICA), isnotnull(r_regionkey#45L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/region], PartitionFilters: [], PushedFilters: [IsNotNull(r_name), EqualTo(r_name,AMERICA), IsNotNull(r_regionkey)], ReadSchema: struct<r_regionkey:bigint,r_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1049684,
        "inputRowCount" : 26
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 7 ],
      "Objectives" : {
        "DurationInMs" : 30702,
        "TotalTasksDurationInMs" : 108,
        "IOBytes" : {
          "Total" : 2886,
          "Details" : {
            "IR" : 2886,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "10" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -509200285,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1100,
                "rowCount" : 25
              },
              "compileTime" : {
                "sizeInBytes" : 1100,
                "rowCount" : 25
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [revenue#57 DESC NULLS LAST], true "
          }
        },
        "links" : [ ],
        "rawPlan" : "Sort [revenue#57 DESC NULLS LAST], true\n+- Aggregate [n_name#42], [n_name#42, sum((l_extendedprice#23 * (1 - l_discount#24))) AS revenue#57]\n   +- Project [l_extendedprice#23, l_discount#24, n_name#42]\n      +- Join Inner, ((c_custkey#1L = o_custkey#10L) AND (c_nationkey#4L = s_nationkey#37L))\n         :- Project [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L, n_name#42]\n         :  +- Join Inner, (s_nationkey#37L = n_nationkey#41L)\n         :     :- Project [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L]\n         :     :  +- Join Inner, (l_orderkey#18L = o_orderkey#9L)\n         :     :     :- Project [l_orderkey#18L, l_extendedprice#23, l_discount#24, s_nationkey#37L]\n         :     :     :  +- Join Inner, (l_suppkey#20L = s_suppkey#34L)\n         :     :     :     :- Project [l_orderkey#18L, l_suppkey#20L, l_extendedprice#23, l_discount#24]\n         :     :     :     :  +- Filter (isnotnull(l_orderkey#18L) AND isnotnull(l_suppkey#20L))\n         :     :     :     :     +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#18L,l_partkey#19L,l_suppkey#20L,l_linenumber#21,l_quantity#22,l_extendedprice#23,l_discount#24,l_tax#25,l_returnflag#26,l_linestatus#27,l_commitdate#28,l_receiptdate#29,l_shipinstruct#30,l_shipmode#31,l_comment#32,l_shipdate#33] parquet\n         :     :     :     +- Project [s_suppkey#34L, s_nationkey#37L]\n         :     :     :        +- Filter (isnotnull(s_suppkey#34L) AND isnotnull(s_nationkey#37L))\n         :     :     :           +- Relation spark_catalog.tpch_100.supplier[s_suppkey#34L,s_name#35,s_address#36,s_nationkey#37L,s_phone#38,s_acctbal#39,s_comment#40] parquet\n         :     :     +- Project [o_orderkey#9L, o_custkey#10L]\n         :     :        +- Filter ((((isnotnull(o_orderdate#17) AND (o_orderdate#17 >= 1993-01-01)) AND (o_orderdate#17 < 1994-01-01)) AND isnotnull(o_custkey#10L)) AND isnotnull(o_orderkey#9L))\n         :     :           +- Relation spark_catalog.tpch_100.orders[o_orderkey#9L,o_custkey#10L,o_orderstatus#11,o_totalprice#12,o_orderpriority#13,o_clerk#14,o_shippriority#15,o_comment#16,o_orderdate#17] parquet\n         :     +- Project [n_nationkey#41L, n_name#42]\n         :        +- Join Inner, (n_regionkey#43L = r_regionkey#45L)\n         :           :- Project [n_nationkey#41L, n_name#42, n_regionkey#43L]\n         :           :  +- Filter (isnotnull(n_nationkey#41L) AND isnotnull(n_regionkey#43L))\n         :           :     +- Relation spark_catalog.tpch_100.nation[n_nationkey#41L,n_name#42,n_regionkey#43L,n_comment#44] parquet\n         :           +- Project [r_regionkey#45L]\n         :              +- Filter ((isnotnull(r_name#46) AND (r_name#46 = AMERICA)) AND isnotnull(r_regionkey#45L))\n         :                 +- Relation spark_catalog.tpch_100.region[r_regionkey#45L,r_name#46,r_comment#47] parquet\n         +- Project [c_custkey#1L, c_nationkey#4L]\n            +- Filter (isnotnull(c_custkey#1L) AND isnotnull(c_nationkey#4L))\n               +- Relation spark_catalog.tpch_100.customer[c_custkey#1L,c_name#2,c_address#3,c_nationkey#4L,c_phone#5,c_acctbal#6,c_comment#7,c_mktsegment#8] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1613293262,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : 1100,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [n_name#42, revenue#57] Arguments: [revenue#57 DESC NULLS LAST], true, 0 "
          },
          "1" : {
            "sign" : 1997852,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 256,
            "rowCount" : 5,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [n_name#42, revenue#57] Arguments: 9 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [revenue#57 DESC NULLS LAST], true, 0\n+- ShuffleQueryStage 9\n   +- Exchange rangepartitioning(revenue#57 DESC NULLS LAST, 200), ENSURE_REQUIREMENTS, [plan_id=1118]\n      +- *(16) HashAggregate(keys=[n_name#42], functions=[sum((l_extendedprice#23 * (1 - l_discount#24)))], output=[n_name#42, revenue#57])\n         +- AQEShuffleRead coalesced\n            +- ShuffleQueryStage 8\n               +- Exchange hashpartitioning(n_name#42, 200), ENSURE_REQUIREMENTS, [plan_id=1076]\n                  +- *(15) HashAggregate(keys=[n_name#42], functions=[partial_sum((l_extendedprice#23 * (1 - l_discount#24)))], output=[n_name#42, sum#63, isEmpty#64])\n                     +- *(15) Project [l_extendedprice#23, l_discount#24, n_name#42]\n                        +- *(15) SortMergeJoin [o_custkey#10L, s_nationkey#37L], [c_custkey#1L, c_nationkey#4L], Inner\n                           :- *(13) Sort [o_custkey#10L ASC NULLS FIRST, s_nationkey#37L ASC NULLS FIRST], false, 0\n                           :  +- AQEShuffleRead coalesced\n                           :     +- ShuffleQueryStage 7\n                           :        +- Exchange hashpartitioning(o_custkey#10L, s_nationkey#37L, 200), ENSURE_REQUIREMENTS, [plan_id=981]\n                           :           +- *(12) Project [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L, n_name#42]\n                           :              +- *(12) BroadcastHashJoin [s_nationkey#37L], [n_nationkey#41L], Inner, BuildRight, false\n                           :                 :- *(12) Project [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L]\n                           :                 :  +- *(12) SortMergeJoin [l_orderkey#18L], [o_orderkey#9L], Inner\n                           :                 :     :- *(10) Sort [l_orderkey#18L ASC NULLS FIRST], false, 0\n                           :                 :     :  +- ShuffleQueryStage 6\n                           :                 :     :     +- Exchange hashpartitioning(l_orderkey#18L, 200), ENSURE_REQUIREMENTS, [plan_id=692]\n                           :                 :     :        +- *(9) Project [l_orderkey#18L, l_extendedprice#23, l_discount#24, s_nationkey#37L]\n                           :                 :     :           +- *(9) SortMergeJoin [l_suppkey#20L], [s_suppkey#34L], Inner\n                           :                 :     :              :- *(7) Sort [l_suppkey#20L ASC NULLS FIRST], false, 0\n                           :                 :     :              :  +- ShuffleQueryStage 0\n                           :                 :     :              :     +- Exchange hashpartitioning(l_suppkey#20L, 200), ENSURE_REQUIREMENTS, [plan_id=241]\n                           :                 :     :              :        +- *(1) Project [l_orderkey#18L, l_suppkey#20L, l_extendedprice#23, l_discount#24]\n                           :                 :     :              :           +- *(1) Filter (isnotnull(l_orderkey#18L) AND isnotnull(l_suppkey#20L))\n                           :                 :     :              :              +- *(1) ColumnarToRow\n                           :                 :     :              :                 +- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#18L,l_suppkey#20L,l_extendedprice#23,l_discount#24,l_shipdate#33] Batched: true, DataFilters: [isnotnull(l_orderkey#18L), isnotnull(l_suppkey#20L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem], PartitionFilters: [], PushedFilters: [IsNotNull(l_orderkey), IsNotNull(l_suppkey)], ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2)>\n                           :                 :     :              +- *(8) Sort [s_suppkey#34L ASC NULLS FIRST], false, 0\n                           :                 :     :                 +- ShuffleQueryStage 1\n                           :                 :     :                    +- Exchange hashpartitioning(s_suppkey#34L, 200), ENSURE_REQUIREMENTS, [plan_id=260]\n                           :                 :     :                       +- *(2) Filter (isnotnull(s_suppkey#34L) AND isnotnull(s_nationkey#37L))\n                           :                 :     :                          +- *(2) ColumnarToRow\n                           :                 :     :                             +- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#34L,s_nationkey#37L] Batched: true, DataFilters: [isnotnull(s_suppkey#34L), isnotnull(s_nationkey#37L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>\n                           :                 :     +- *(11) Sort [o_orderkey#9L ASC NULLS FIRST], false, 0\n                           :                 :        +- ShuffleQueryStage 2\n                           :                 :           +- Exchange hashpartitioning(o_orderkey#9L, 200), ENSURE_REQUIREMENTS, [plan_id=283]\n                           :                 :              +- *(3) Project [o_orderkey#9L, o_custkey#10L]\n                           :                 :                 +- *(3) Filter (isnotnull(o_custkey#10L) AND isnotnull(o_orderkey#9L))\n                           :                 :                    +- *(3) ColumnarToRow\n                           :                 :                       +- FileScan parquet spark_catalog.tpch_100.orders[o_orderkey#9L,o_custkey#10L,o_orderdate#17] Batched: true, DataFilters: [isnotnull(o_custkey#10L), isnotnull(o_orderkey#9L)], Format: Parquet, Location: InMemoryFileIndex(365 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/orders/o..., PartitionFilters: [isnotnull(o_orderdate#17), (o_orderdate#17 >= 1993-01-01), (o_orderdate#17 < 1994-01-01)], PushedFilters: [IsNotNull(o_custkey), IsNotNull(o_orderkey)], ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint>\n                           :                 +- BroadcastQueryStage 5\n                           :                    +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=499]\n                           :                       +- *(6) Project [n_nationkey#41L, n_name#42]\n                           :                          +- *(6) BroadcastHashJoin [n_regionkey#43L], [r_regionkey#45L], Inner, BuildRight, false\n                           :                             :- *(6) Filter (isnotnull(n_nationkey#41L) AND isnotnull(n_regionkey#43L))\n                           :                             :  +- *(6) ColumnarToRow\n                           :                             :     +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#41L,n_name#42,n_regionkey#43L] Batched: true, DataFilters: [isnotnull(n_nationkey#41L), isnotnull(n_regionkey#43L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string,n_regionkey:bigint>\n                           :                             +- BroadcastQueryStage 3\n                           :                                +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=306]\n                           :                                   +- *(4) Project [r_regionkey#45L]\n                           :                                      +- *(4) Filter ((isnotnull(r_name#46) AND (r_name#46 = AMERICA)) AND isnotnull(r_regionkey#45L))\n                           :                                         +- *(4) ColumnarToRow\n                           :                                            +- FileScan parquet spark_catalog.tpch_100.region[r_regionkey#45L,r_name#46] Batched: true, DataFilters: [isnotnull(r_name#46), (r_name#46 = AMERICA), isnotnull(r_regionkey#45L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/region], PartitionFilters: [], PushedFilters: [IsNotNull(r_name), EqualTo(r_name,AMERICA), IsNotNull(r_regionkey)], ReadSchema: struct<r_regionkey:bigint,r_name:string>\n                           +- *(14) Sort [c_custkey#1L ASC NULLS FIRST, c_nationkey#4L ASC NULLS FIRST], false, 0\n                              +- AQEShuffleRead coalesced\n                                 +- ShuffleQueryStage 4\n                                    +- Exchange hashpartitioning(c_custkey#1L, c_nationkey#4L, 200), ENSURE_REQUIREMENTS, [plan_id=332]\n                                       +- *(5) Project [c_custkey#1L, c_nationkey#4L]\n                                          +- *(5) Filter (isnotnull(c_custkey#1L) AND isnotnull(c_nationkey#4L))\n                                             +- *(5) ColumnarToRow\n                                                +- FileScan parquet spark_catalog.tpch_100.customer[c_custkey#1L,c_nationkey#4L,c_mktsegment#8] Batched: true, DataFilters: [isnotnull(c_custkey#1L), isnotnull(c_nationkey#4L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)], ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 256,
        "inputRowCount" : 5
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "7" : [ 88, 88, 97, 106, 97 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 10,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 47 ],
      "Objectives" : {
        "DurationInMs" : 77,
        "TotalTasksDurationInMs" : 69,
        "IOBytes" : {
          "Total" : 465,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 465,
            "SW" : 0
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -160279320,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 24024420680,
                "rowCount" : 600610517
              },
              "compileTime" : {
                "sizeInBytes" : 24024420680,
                "rowCount" : 600610517
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_orderkey#18L, l_extendedprice#23, l_discount#24, s_nationkey#37L] "
          },
          "1" : {
            "sign" : -1647234210,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 33634188952,
                "rowCount" : 600610517
              },
              "compileTime" : {
                "sizeInBytes" : 33634188952,
                "rowCount" : 600610517
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (l_suppkey#20L = s_suppkey#34L) "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [l_orderkey#18L, l_extendedprice#23, l_discount#24, s_nationkey#37L]\n+- Join Inner, (l_suppkey#20L = s_suppkey#34L)\n   :- Project [l_orderkey#18L, l_suppkey#20L, l_extendedprice#23, l_discount#24]\n   :  +- Filter (isnotnull(l_orderkey#18L) AND isnotnull(l_suppkey#20L))\n   :     +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#18L,l_partkey#19L,l_suppkey#20L,l_linenumber#21,l_quantity#22,l_extendedprice#23,l_discount#24,l_tax#25,l_returnflag#26,l_linestatus#27,l_commitdate#28,l_receiptdate#29,l_shipinstruct#30,l_shipmode#31,l_comment#32,l_shipdate#33] parquet\n   +- Project [s_suppkey#34L, s_nationkey#37L]\n      +- Filter (isnotnull(s_suppkey#34L) AND isnotnull(s_nationkey#37L))\n         +- Relation spark_catalog.tpch_100.supplier[s_suppkey#34L,s_name#35,s_address#36,s_nationkey#37L,s_phone#38,s_acctbal#39,s_comment#40] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 281729230,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [s_suppkey#34L, s_nationkey#37L] Arguments: [s_suppkey#34L ASC NULLS FIRST], false, 0 "
          },
          "5" : {
            "sign" : -963935839,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [s_suppkey#34L, s_nationkey#37L] Arguments: 1 "
          },
          "1" : {
            "sign" : 1089821824,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 33634188952,
            "rowCount" : 600610517,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [l_suppkey#20L] Right keys [1]: [s_suppkey#34L] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 803103578,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 24024420680,
            "rowCount" : 600610517,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [l_orderkey#18L, l_extendedprice#23, l_discount#24, s_nationkey#37L] Input [6]: [l_orderkey#18L, l_suppkey#20L, l_extendedprice#23, l_discount#24, s_suppkey#34L, s_nationkey#37L] "
          },
          "2" : {
            "sign" : 1242051295,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [4]: [l_orderkey#18L, l_suppkey#20L, l_extendedprice#23, l_discount#24] Arguments: [l_suppkey#20L ASC NULLS FIRST], false, 0 "
          },
          "3" : {
            "sign" : 791898542,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 24001516080,
            "rowCount" : 600037902,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [l_orderkey#18L, l_suppkey#20L, l_extendedprice#23, l_discount#24] Arguments: 0 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "SortMergeJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [l_orderkey#18L, l_extendedprice#23, l_discount#24, s_nationkey#37L]\n+- SortMergeJoin [l_suppkey#20L], [s_suppkey#34L], Inner\n   :- Sort [l_suppkey#20L ASC NULLS FIRST], false, 0\n   :  +- ShuffleQueryStage 0\n   :     +- Exchange hashpartitioning(l_suppkey#20L, 200), ENSURE_REQUIREMENTS, [plan_id=241]\n   :        +- *(1) Project [l_orderkey#18L, l_suppkey#20L, l_extendedprice#23, l_discount#24]\n   :           +- *(1) Filter (isnotnull(l_orderkey#18L) AND isnotnull(l_suppkey#20L))\n   :              +- *(1) ColumnarToRow\n   :                 +- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#18L,l_suppkey#20L,l_extendedprice#23,l_discount#24,l_shipdate#33] Batched: true, DataFilters: [isnotnull(l_orderkey#18L), isnotnull(l_suppkey#20L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem], PartitionFilters: [], PushedFilters: [IsNotNull(l_orderkey), IsNotNull(l_suppkey)], ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2)>\n   +- Sort [s_suppkey#34L ASC NULLS FIRST], false, 0\n      +- ShuffleQueryStage 1\n         +- Exchange hashpartitioning(s_suppkey#34L, 200), ENSURE_REQUIREMENTS, [plan_id=260]\n            +- *(2) Filter (isnotnull(s_suppkey#34L) AND isnotnull(s_nationkey#37L))\n               +- *(2) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#34L,s_nationkey#37L] Batched: true, DataFilters: [isnotnull(s_suppkey#34L), isnotnull(s_nationkey#37L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 24025516080,
        "inputRowCount" : 601037902
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "1" : [ 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 52331, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 52331, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 52331, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 52331, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 57565, 57565, 52331, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 52331, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565 ],
        "0" : [ 69617055, 70632226, 70693376, 70678793, 70693193, 70757454, 70673608, 70714071, 70673723, 70658016, 70693376, 70741591, 70669330, 70412260, 70715236, 70673503, 70748397, 70672427, 70693481, 71278457, 70669550, 70715584, 70672593, 70628990, 70717326, 70678550, 70693280, 70720047, 70501962, 70661169, 70223562, 70719827, 70693193, 70715053, 70654399, 70678550, 70678445, 70603902, 70995513, 70678550, 70667227, 70693376, 70652921, 70672794, 70672689, 70541589, 70715341, 70574448, 70700305, 70743873, 70693376, 70648863, 70678262, 70693596, 70743873, 70726861, 70693280, 70719932, 70647052, 70476444, 70634526, 70687437, 70602424, 70661274, 70693376, 70845306, 70741792, 70488173, 70179183, 70667852, 70667332, 70678550, 70628171, 70687725, 70715236, 70628770, 70693376, 70700525, 70678445, 70669550, 70739282, 69587148, 70626269, 70693481, 70658572, 70714291, 70739387, 70715341, 70658920, 70678665, 70673608, 70571043, 70678445, 70842681, 70673608, 70628770, 70698036, 70693596, 70775068, 70693114, 70693724, 70938135, 70672689, 70693481, 70719932, 70647354, 70648547, 70582484, 70717326, 70821041, 70628674, 70667852, 70560311, 70694654, 70658920, 70944114, 70654303, 70678445, 70678445, 70675309, 70658476, 70672909, 70715140, 70672689, 70909407, 70637773, 70672427, 70724351, 70687968, 70658792, 70648863, 70789902, 70649677, 70816335, 70603806, 70678445, 70715456, 70596962, 70678349, 70681975, 70842419, 70717642, 70687620, 70678793, 70715584, 70678349, 70672794, 70806103, 70673176, 70635013, 70715584, 70672794, 70584029, 69592291, 70647354, 70719932, 70739099, 70648863, 70678262, 70678665, 70693376, 70431496, 70672991, 70693280, 70739282, 70693193, 70556852, 70693280, 70693596, 70217583, 70816230, 70652816, 70693481, 70678349, 70672689, 70672689, 70891097, 70816134, 70454588, 70715341, 70640610, 70646343, 69827608, 70614054, 70521272, 70688107, 70663478, 70673608, 70709480, 70658572, 70765550, 70667651, 70693376, 70890992, 70704896, 70370514, 70693596, 70695036, 70693863, 70687968 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 17,
        "FinishedTasksTotalTimeInMs" : 11624.0,
        "FinishedTasksDistributionInMs" : [ 13.0, 91.0, 872.0, 1037.0, 1320.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 10 ],
      "Objectives" : {
        "DurationInMs" : 35959,
        "TotalTasksDurationInMs" : 554088,
        "IOBytes" : {
          "Total" : 24826653530,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 13405516450,
            "SW" : 11421137080
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 251358091,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 24001516080,
                "rowCount" : 600037902
              },
              "compileTime" : {
                "sizeInBytes" : 24001516080,
                "rowCount" : 600037902
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_orderkey#18L, l_suppkey#20L, l_extendedprice#23, l_discount#24] "
          },
          "1" : {
            "sign" : 1055493239,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 111607049772,
                "rowCount" : 600037902
              },
              "compileTime" : {
                "sizeInBytes" : 111607049772,
                "rowCount" : 600037902
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(l_orderkey#18L) AND isnotnull(l_suppkey#20L)) "
          },
          "2" : {
            "sign" : -1721060374,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 111607049772,
                "rowCount" : 600037902
              },
              "compileTime" : {
                "sizeInBytes" : 111607049772,
                "rowCount" : 600037902
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [l_orderkey#18L, l_partkey#19L, l_suppkey#20L, l_linenumber#21, l_quantity#22, l_extendedprice#23, l_discount#24, l_tax#25, l_returnflag#26, l_linestatus#27, l_commitdate#28, l_receiptdate#29, l_shipinstruct#30, l_shipmode#31, l_comment#32, l_shipdate#33], `spark_catalog`.`tpch_100`.`lineitem`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [l_orderkey#18L, l_suppkey#20L, l_extendedprice#23, l_discount#24]\n+- Filter (isnotnull(l_orderkey#18L) AND isnotnull(l_suppkey#20L))\n   +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#18L,l_partkey#19L,l_suppkey#20L,l_linenumber#21,l_quantity#22,l_extendedprice#23,l_discount#24,l_tax#25,l_returnflag#26,l_linestatus#27,l_commitdate#28,l_receiptdate#29,l_shipinstruct#30,l_shipmode#31,l_comment#32,l_shipdate#33] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -209495104,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 24001516080,
            "rowCount" : 600037902,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [l_orderkey#18L, l_suppkey#20L, l_extendedprice#23, l_discount#24] Input [5]: [l_orderkey#18L, l_suppkey#20L, l_extendedprice#23, l_discount#24, l_shipdate#33] "
          },
          "1" : {
            "sign" : 622108588,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 24001516080,
            "rowCount" : 600037902,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [5]: [l_orderkey#18L, l_suppkey#20L, l_extendedprice#23, l_discount#24, l_shipdate#33] Condition : (isnotnull(l_orderkey#18L) AND isnotnull(l_suppkey#20L)) "
          },
          "2" : {
            "sign" : 1244098015,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 24001516080,
            "rowCount" : 600037902,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.lineitem Output [5]: [l_orderkey#18L, l_suppkey#20L, l_extendedprice#23, l_discount#24, l_shipdate#33] Batched: true Location: CatalogFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem] PushedFilters: [IsNotNull(l_orderkey), IsNotNull(l_suppkey)] ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2)> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpch_100.lineitem",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [l_orderkey#18L, l_suppkey#20L, l_extendedprice#23, l_discount#24]\n+- Filter (isnotnull(l_orderkey#18L) AND isnotnull(l_suppkey#20L))\n   +- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#18L,l_suppkey#20L,l_extendedprice#23,l_discount#24,l_shipdate#33] Batched: true, DataFilters: [isnotnull(l_orderkey#18L), isnotnull(l_suppkey#20L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem], PartitionFilters: [], PushedFilters: [IsNotNull(l_orderkey), IsNotNull(l_suppkey)], ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2)>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 24001516080,
        "inputRowCount" : 600037902
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 30844,
        "TotalTasksDurationInMs" : 473985,
        "IOBytes" : {
          "Total" : 23380301462,
          "Details" : {
            "IR" : 9985404319,
            "IW" : 0,
            "SR" : 0,
            "SW" : 13394897143
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1980557806,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 16,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 16,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [r_regionkey#45L] "
          },
          "1" : {
            "sign" : 461235267,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 113,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 113,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(r_name#46) AND (r_name#46 = AMERICA)) AND isnotnull(r_regionkey#45L)) "
          },
          "2" : {
            "sign" : -1954411271,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 565,
                "rowCount" : 5
              },
              "compileTime" : {
                "sizeInBytes" : 565,
                "rowCount" : 5
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [r_regionkey#45L, r_name#46, r_comment#47], `spark_catalog`.`tpch_100`.`region`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [r_regionkey#45L]\n+- Filter ((isnotnull(r_name#46) AND (r_name#46 = AMERICA)) AND isnotnull(r_regionkey#45L))\n   +- Relation spark_catalog.tpch_100.region[r_regionkey#45L,r_name#46,r_comment#47] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -679668421,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [r_regionkey#45L] Input [2]: [r_regionkey#45L, r_name#46] "
          },
          "1" : {
            "sign" : 415460266,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [r_regionkey#45L, r_name#46] Condition : ((isnotnull(r_name#46) AND (r_name#46 = AMERICA)) AND isnotnull(r_regionkey#45L)) "
          },
          "2" : {
            "sign" : 1542568116,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.region Output [2]: [r_regionkey#45L, r_name#46] Batched: true Location: InMemoryFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/region] PushedFilters: [IsNotNull(r_name), EqualTo(r_name,AMERICA), IsNotNull(r_regionkey)] ReadSchema: struct<r_regionkey:bigint,r_name:string> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpch_100.region",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [r_regionkey#45L]\n+- Filter ((isnotnull(r_name#46) AND (r_name#46 = AMERICA)) AND isnotnull(r_regionkey#45L))\n   +- FileScan parquet spark_catalog.tpch_100.region[r_regionkey#45L,r_name#46] Batched: true, DataFilters: [isnotnull(r_name#46), (r_name#46 = AMERICA), isnotnull(r_regionkey#45L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/region], PartitionFilters: [], PushedFilters: [IsNotNull(r_name), EqualTo(r_name,AMERICA), IsNotNull(r_regionkey)], ReadSchema: struct<r_regionkey:bigint,r_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 16,
        "inputRowCount" : 1
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 1 ],
      "Objectives" : {
        "DurationInMs" : 2133,
        "TotalTasksDurationInMs" : 2120,
        "IOBytes" : {
          "Total" : 1996,
          "Details" : {
            "IR" : 1996,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1285637712,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 24000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 24000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_suppkey#34L, s_nationkey#37L] "
          },
          "1" : {
            "sign" : 2013430661,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 201000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 201000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(s_suppkey#34L) AND isnotnull(s_nationkey#37L)) "
          },
          "2" : {
            "sign" : 1172598457,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 201000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 201000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_suppkey#34L, s_name#35, s_address#36, s_nationkey#37L, s_phone#38, s_acctbal#39, s_comment#40], `spark_catalog`.`tpch_100`.`supplier`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [s_suppkey#34L, s_nationkey#37L]\n+- Filter (isnotnull(s_suppkey#34L) AND isnotnull(s_nationkey#37L))\n   +- Relation spark_catalog.tpch_100.supplier[s_suppkey#34L,s_name#35,s_address#36,s_nationkey#37L,s_phone#38,s_acctbal#39,s_comment#40] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1601550611,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [s_suppkey#34L, s_nationkey#37L] Condition : (isnotnull(s_suppkey#34L) AND isnotnull(s_nationkey#37L)) "
          },
          "1" : {
            "sign" : -1963632825,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.supplier Output [2]: [s_suppkey#34L, s_nationkey#37L] Batched: true Location: InMemoryFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier] PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)] ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpch_100.supplier",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(s_suppkey#34L) AND isnotnull(s_nationkey#37L))\n+- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#34L,s_nationkey#37L] Batched: true, DataFilters: [isnotnull(s_suppkey#34L), isnotnull(s_nationkey#37L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 24000000,
        "inputRowCount" : 1000000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 4 ],
      "Objectives" : {
        "DurationInMs" : 29283,
        "TotalTasksDurationInMs" : 1137,
        "IOBytes" : {
          "Total" : 16319432,
          "Details" : {
            "IR" : 5700125,
            "IW" : 0,
            "SR" : 0,
            "SW" : 10619307
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 582670406,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 71307900,
                "rowCount" : 1188465
              },
              "compileTime" : {
                "sizeInBytes" : 71307900,
                "rowCount" : 1188465
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L, n_name#42] "
          },
          "1" : {
            "sign" : -176834795,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 80815620,
                "rowCount" : 1188465
              },
              "compileTime" : {
                "sizeInBytes" : 80815620,
                "rowCount" : 1188465
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#37L = n_nationkey#41L) "
          },
          "2" : {
            "sign" : -481735712,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 24056448880,
                "rowCount" : 601411222
              },
              "compileTime" : {
                "sizeInBytes" : 24056448880,
                "rowCount" : 601411222
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L] "
          },
          "3" : {
            "sign" : 2039886460,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 33679028432,
                "rowCount" : 601411222
              },
              "compileTime" : {
                "sizeInBytes" : 33679028432,
                "rowCount" : 601411222
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (l_orderkey#18L = o_orderkey#9L) "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L, n_name#42]\n+- Join Inner, (s_nationkey#37L = n_nationkey#41L)\n   :- Project [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L]\n   :  +- Join Inner, (l_orderkey#18L = o_orderkey#9L)\n   :     :- Project [l_orderkey#18L, l_extendedprice#23, l_discount#24, s_nationkey#37L]\n   :     :  +- Join Inner, (l_suppkey#20L = s_suppkey#34L)\n   :     :     :- Project [l_orderkey#18L, l_suppkey#20L, l_extendedprice#23, l_discount#24]\n   :     :     :  +- Filter (isnotnull(l_orderkey#18L) AND isnotnull(l_suppkey#20L))\n   :     :     :     +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#18L,l_partkey#19L,l_suppkey#20L,l_linenumber#21,l_quantity#22,l_extendedprice#23,l_discount#24,l_tax#25,l_returnflag#26,l_linestatus#27,l_commitdate#28,l_receiptdate#29,l_shipinstruct#30,l_shipmode#31,l_comment#32,l_shipdate#33] parquet\n   :     :     +- Project [s_suppkey#34L, s_nationkey#37L]\n   :     :        +- Filter (isnotnull(s_suppkey#34L) AND isnotnull(s_nationkey#37L))\n   :     :           +- Relation spark_catalog.tpch_100.supplier[s_suppkey#34L,s_name#35,s_address#36,s_nationkey#37L,s_phone#38,s_acctbal#39,s_comment#40] parquet\n   :     +- Project [o_orderkey#9L, o_custkey#10L]\n   :        +- Filter ((((isnotnull(o_orderdate#17) AND (o_orderdate#17 >= 1993-01-01)) AND (o_orderdate#17 < 1994-01-01)) AND isnotnull(o_custkey#10L)) AND isnotnull(o_orderkey#9L))\n   :           +- Relation spark_catalog.tpch_100.orders[o_orderkey#9L,o_custkey#10L,o_orderstatus#11,o_totalprice#12,o_orderpriority#13,o_clerk#14,o_shippriority#15,o_comment#16,o_orderdate#17] parquet\n   +- Project [n_nationkey#41L, n_name#42]\n      +- Join Inner, (n_regionkey#43L = r_regionkey#45L)\n         :- Project [n_nationkey#41L, n_name#42, n_regionkey#43L]\n         :  +- Filter (isnotnull(n_nationkey#41L) AND isnotnull(n_regionkey#43L))\n         :     +- Relation spark_catalog.tpch_100.nation[n_nationkey#41L,n_name#42,n_regionkey#43L,n_comment#44] parquet\n         +- Project [r_regionkey#45L]\n            +- Filter ((isnotnull(r_name#46) AND (r_name#46 = AMERICA)) AND isnotnull(r_regionkey#45L))\n               +- Relation spark_catalog.tpch_100.region[r_regionkey#45L,r_name#46,r_comment#47] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : -1560316267,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048768,
            "rowCount" : 5,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [n_nationkey#41L, n_name#42] Arguments: 5 "
          },
          "4" : {
            "sign" : -182140306,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [4]: [l_orderkey#18L, l_extendedprice#23, l_discount#24, s_nationkey#37L] Arguments: [l_orderkey#18L ASC NULLS FIRST], false, 0 "
          },
          "5" : {
            "sign" : 1253027752,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 24001516080,
            "rowCount" : 600037902,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [l_orderkey#18L, l_extendedprice#23, l_discount#24, s_nationkey#37L] Arguments: 6 "
          },
          "6" : {
            "sign" : -404102026,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [o_orderkey#9L, o_custkey#10L] Arguments: [o_orderkey#9L ASC NULLS FIRST], false, 0 "
          },
          "1" : {
            "sign" : -1383238458,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 80815620,
            "rowCount" : 1188465,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [s_nationkey#37L] Right keys [1]: [n_nationkey#41L] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : -1071386235,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 71307900,
            "rowCount" : 1188465,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L, n_name#42] Input [6]: [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L, n_nationkey#41L, n_name#42] "
          },
          "2" : {
            "sign" : -1000433942,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 24056448880,
            "rowCount" : 601411222,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L] Input [6]: [l_orderkey#18L, l_extendedprice#23, l_discount#24, s_nationkey#37L, o_orderkey#9L, o_custkey#10L] "
          },
          "7" : {
            "sign" : -216190897,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 546036480,
            "rowCount" : 22751520,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [o_orderkey#9L, o_custkey#10L] Arguments: 2 "
          },
          "3" : {
            "sign" : -1603669612,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 33679028432,
            "rowCount" : 601411222,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [l_orderkey#18L] Right keys [1]: [o_orderkey#9L] Join type: Inner Join condition: None "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Sort",
          "toId" : 3,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "ShuffleQueryStage",
          "toId" : 6,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Sort",
          "toId" : 3,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "SortMergeJoin",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L, n_name#42]\n+- BroadcastHashJoin [s_nationkey#37L], [n_nationkey#41L], Inner, BuildRight, false\n   :- Project [l_extendedprice#23, l_discount#24, s_nationkey#37L, o_custkey#10L]\n   :  +- SortMergeJoin [l_orderkey#18L], [o_orderkey#9L], Inner\n   :     :- Sort [l_orderkey#18L ASC NULLS FIRST], false, 0\n   :     :  +- ShuffleQueryStage 6\n   :     :     +- Exchange hashpartitioning(l_orderkey#18L, 200), ENSURE_REQUIREMENTS, [plan_id=692]\n   :     :        +- *(9) Project [l_orderkey#18L, l_extendedprice#23, l_discount#24, s_nationkey#37L]\n   :     :           +- *(9) SortMergeJoin [l_suppkey#20L], [s_suppkey#34L], Inner\n   :     :              :- *(7) Sort [l_suppkey#20L ASC NULLS FIRST], false, 0\n   :     :              :  +- ShuffleQueryStage 0\n   :     :              :     +- Exchange hashpartitioning(l_suppkey#20L, 200), ENSURE_REQUIREMENTS, [plan_id=241]\n   :     :              :        +- *(1) Project [l_orderkey#18L, l_suppkey#20L, l_extendedprice#23, l_discount#24]\n   :     :              :           +- *(1) Filter (isnotnull(l_orderkey#18L) AND isnotnull(l_suppkey#20L))\n   :     :              :              +- *(1) ColumnarToRow\n   :     :              :                 +- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#18L,l_suppkey#20L,l_extendedprice#23,l_discount#24,l_shipdate#33] Batched: true, DataFilters: [isnotnull(l_orderkey#18L), isnotnull(l_suppkey#20L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem], PartitionFilters: [], PushedFilters: [IsNotNull(l_orderkey), IsNotNull(l_suppkey)], ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2)>\n   :     :              +- *(8) Sort [s_suppkey#34L ASC NULLS FIRST], false, 0\n   :     :                 +- ShuffleQueryStage 1\n   :     :                    +- Exchange hashpartitioning(s_suppkey#34L, 200), ENSURE_REQUIREMENTS, [plan_id=260]\n   :     :                       +- *(2) Filter (isnotnull(s_suppkey#34L) AND isnotnull(s_nationkey#37L))\n   :     :                          +- *(2) ColumnarToRow\n   :     :                             +- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#34L,s_nationkey#37L] Batched: true, DataFilters: [isnotnull(s_suppkey#34L), isnotnull(s_nationkey#37L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>\n   :     +- Sort [o_orderkey#9L ASC NULLS FIRST], false, 0\n   :        +- ShuffleQueryStage 2\n   :           +- Exchange hashpartitioning(o_orderkey#9L, 200), ENSURE_REQUIREMENTS, [plan_id=283]\n   :              +- *(3) Project [o_orderkey#9L, o_custkey#10L]\n   :                 +- *(3) Filter (isnotnull(o_custkey#10L) AND isnotnull(o_orderkey#9L))\n   :                    +- *(3) ColumnarToRow\n   :                       +- FileScan parquet spark_catalog.tpch_100.orders[o_orderkey#9L,o_custkey#10L,o_orderdate#17] Batched: true, DataFilters: [isnotnull(o_custkey#10L), isnotnull(o_orderkey#9L)], Format: Parquet, Location: InMemoryFileIndex(365 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/orders/o..., PartitionFilters: [isnotnull(o_orderdate#17), (o_orderdate#17 >= 1993-01-01), (o_orderdate#17 < 1994-01-01)], PushedFilters: [IsNotNull(o_custkey), IsNotNull(o_orderkey)], ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint>\n   +- BroadcastQueryStage 5\n      +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=499]\n         +- *(6) Project [n_nationkey#41L, n_name#42]\n            +- *(6) BroadcastHashJoin [n_regionkey#43L], [r_regionkey#45L], Inner, BuildRight, false\n               :- *(6) Filter (isnotnull(n_nationkey#41L) AND isnotnull(n_regionkey#43L))\n               :  +- *(6) ColumnarToRow\n               :     +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#41L,n_name#42,n_regionkey#43L] Batched: true, DataFilters: [isnotnull(n_nationkey#41L), isnotnull(n_regionkey#43L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string,n_regionkey:bigint>\n               +- BroadcastQueryStage 3\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=306]\n                     +- *(4) Project [r_regionkey#45L]\n                        +- *(4) Filter ((isnotnull(r_name#46) AND (r_name#46 = AMERICA)) AND isnotnull(r_regionkey#45L))\n                           +- *(4) ColumnarToRow\n                              +- FileScan parquet spark_catalog.tpch_100.region[r_regionkey#45L,r_name#46] Batched: true, DataFilters: [isnotnull(r_name#46), (r_name#46 = AMERICA), isnotnull(r_regionkey#45L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/region], PartitionFilters: [], PushedFilters: [IsNotNull(r_name), EqualTo(r_name,AMERICA), IsNotNull(r_regionkey)], ReadSchema: struct<r_regionkey:bigint,r_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 24548601328,
        "inputRowCount" : 622789427
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "2" : [ 1645502, 1620215, 1628644, 1653931, 1637073, 1637073, 1645502, 1620215, 1645502, 1645502, 1653931, 1620215, 1628644, 1637073, 1645502, 1645502, 1645502, 1637073, 1637073, 1653931, 1637073, 1628644, 1628644, 1637073, 1670789, 1628644, 1628644, 1637073, 1653931, 1633823, 1645502, 1637073, 1628644, 1620215, 1645502, 1653931, 1637073, 1645502, 1620215, 1620215, 1637073, 1645502, 1603357, 1620215, 1620215, 1653931, 1662360, 1628644, 1620215, 1645502, 1645502, 1653931, 1628644, 1620215, 1637073, 1628644, 1637073, 1603357, 1650681, 1620215, 1653931, 1662360, 1637073, 1637073, 1645502, 1628644, 1645502, 1637073, 1653931, 1653931, 1611786, 1653931, 1653931, 1637073, 1620215, 1620215, 1662360, 1620215, 1637073, 1628644, 1653931, 1653931, 1637073, 1637073, 1637073, 1670789, 1628644, 1620215, 1645502, 1642252, 1645502, 1620215, 1653931, 1637073, 1637073, 1637073, 1650681, 1637073, 1620215, 1637073, 1645502, 1620215, 1611786, 1620215, 1633823, 1637073, 1620215, 1628644, 1653931, 1611786, 1628644, 1611786, 1637073, 1633823, 1628644, 1628644, 1645502, 1620215, 1637073, 1645502, 1645502, 1620215, 1670789, 1628644, 1637073, 1628644, 1645502, 1637073, 1628644, 1653931, 1653931, 1637073, 1653931, 1653931, 1637073, 1625394, 1645502, 1645502, 1653931, 1642252, 1645502, 1645502, 1628644, 1611786, 1653931, 1645502, 1645502, 1620215, 1625394, 1628644, 1645502, 1653931, 1653931, 1637073, 1628644, 1637073, 1653931, 1611786, 1628644, 1628644, 1620215, 1670789, 1628644, 1645502, 1637073, 1628644, 1637073, 1637073, 1662360, 1637073, 1653931, 1628644, 1620215, 1637073, 1637073, 1645502, 1637073, 1645502, 1645502, 1662360, 1653931, 1620215, 1645502, 1653931, 1645502, 1645502, 1645502, 1620215, 1637073, 1645502, 1620215, 1645502, 1645502, 1633823, 1637073, 1637073, 1653931, 1637073, 1620215, 1611786 ],
        "4" : [ 58890304, 59006688, 58890304, 58977592, 58686632, 59064880, 58744824, 58832112, 58919400, 58744824, 58919400, 58773920, 58803016, 58861208, 58773920, 59123072, 58773920, 58919400, 58773920, 58919400, 58919400, 59093976, 58832112, 58773920, 58919400, 58861208, 58890304, 58948496, 58773920, 58686632, 58861208, 58773920, 58890304, 59035784, 58948496, 58890304, 58890304, 58832112, 58803016, 58773920, 58861208, 58919400, 58948496, 58744824, 58890304, 58861208, 58890304, 58890304, 58832112, 58861208, 58977592, 58919400, 59035784, 58919400, 58832112, 58686632, 58977592, 58977592, 58919400, 58861208, 58919400, 58948496, 59035784, 58832112, 58715728, 58890304, 59006688, 58890304, 58919400, 58890304, 58773920, 58948496, 59006688, 58803016, 58744824, 59035784, 58832112, 58890304, 59006688, 58977592, 59006688, 58948496, 58773920, 58773920, 58832112, 59093976, 58890304, 58832112, 58890304, 59064880, 58803016, 58832112, 58715728, 58803016, 58890304, 59035784, 58890304, 59064880, 58744824, 58715728, 58832112, 58948496, 58832112, 58832112, 58773920, 58832112, 58977592, 58832112, 58773920, 58832112, 58744824, 58744824, 58861208, 58715728, 58861208, 58977592, 58832112, 58803016, 58832112, 58861208, 58919400, 58832112, 58715728, 58832112, 58861208, 58832112, 58861208, 58861208, 58832112, 58861208, 58890304, 58803016, 59035784, 58948496, 58861208, 58977592, 58948496, 59035784, 58861208, 58715728, 58890304, 58803016, 58977592, 58890304, 58890304, 59035784, 58773920, 58744824, 58919400, 58773920, 58715728, 58948496, 58861208, 58861208, 59006688, 58861208, 59006688, 58803016, 58919400, 58803016, 58628440, 58948496, 58919400, 58948496, 58919400, 58657536, 58803016, 58977592, 58890304, 58773920, 58919400, 58919400, 59006688, 59006688, 59035784, 58773920, 58715728, 58919400, 59064880, 59123072, 58715728, 58919400, 58861208, 58832112, 58919400, 59064880, 59268552, 59035784, 59006688, 59152168, 59006688, 58948496, 58803016, 58861208, 59035784, 59093976, 58861208, 58919400, 58919400, 58803016 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 15 ],
      "Objectives" : {
        "DurationInMs" : 21431,
        "TotalTasksDurationInMs" : 316389,
        "IOBytes" : {
          "Total" : 12149546753,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 11730747851,
            "SW" : 418798902
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1722559968,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 546141744,
                "rowCount" : 22755906
              },
              "compileTime" : {
                "sizeInBytes" : 546141744,
                "rowCount" : 22755906
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [o_orderkey#9L, o_custkey#10L] "
          },
          "1" : {
            "sign" : 68999042,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3686456772,
                "rowCount" : 22755906
              },
              "compileTime" : {
                "sizeInBytes" : 3686456772,
                "rowCount" : 22755906
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(o_orderdate#17) AND (o_orderdate#17 >= 1993-01-01)) AND (o_orderdate#17 < 1994-01-01)) AND isnotnull(o_custkey#10L)) AND isnotnull(o_orderkey#9L)) "
          },
          "2" : {
            "sign" : -1044726289,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3686456772,
                "rowCount" : 22755906
              },
              "compileTime" : {
                "sizeInBytes" : 3686456772,
                "rowCount" : 22755906
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [o_orderkey#9L, o_custkey#10L, o_orderstatus#11, o_totalprice#12, o_orderpriority#13, o_clerk#14, o_shippriority#15, o_comment#16, o_orderdate#17], `spark_catalog`.`tpch_100`.`orders`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [o_orderkey#9L, o_custkey#10L]\n+- Filter ((((isnotnull(o_orderdate#17) AND (o_orderdate#17 >= 1993-01-01)) AND (o_orderdate#17 < 1994-01-01)) AND isnotnull(o_custkey#10L)) AND isnotnull(o_orderkey#9L))\n   +- Relation spark_catalog.tpch_100.orders[o_orderkey#9L,o_custkey#10L,o_orderstatus#11,o_totalprice#12,o_orderpriority#13,o_clerk#14,o_shippriority#15,o_comment#16,o_orderdate#17] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1745675533,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 546141744,
            "rowCount" : 22755906,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [o_orderkey#9L, o_custkey#10L] Input [3]: [o_orderkey#9L, o_custkey#10L, o_orderdate#17] "
          },
          "1" : {
            "sign" : -1893803863,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 546141744,
            "rowCount" : 22755906,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [o_orderkey#9L, o_custkey#10L, o_orderdate#17] Condition : (isnotnull(o_custkey#10L) AND isnotnull(o_orderkey#9L)) "
          },
          "2" : {
            "sign" : 1662196940,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 546141744,
            "rowCount" : 22755906,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.orders Output [3]: [o_orderkey#9L, o_custkey#10L, o_orderdate#17] Batched: true Location: InMemoryFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/orders/o_orderdate=1993-01-01, ... 364 entries] PartitionFilters: [isnotnull(o_orderdate#17), (o_orderdate#17 >= 1993-01-01), (o_orderdate#17 < 1994-01-01)] PushedFilters: [IsNotNull(o_custkey), IsNotNull(o_orderkey)] ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpch_100.orders",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [o_orderkey#9L, o_custkey#10L]\n+- Filter (isnotnull(o_custkey#10L) AND isnotnull(o_orderkey#9L))\n   +- FileScan parquet spark_catalog.tpch_100.orders[o_orderkey#9L,o_custkey#10L,o_orderdate#17] Batched: true, DataFilters: [isnotnull(o_custkey#10L), isnotnull(o_orderkey#9L)], Format: Parquet, Location: InMemoryFileIndex(365 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/orders/o..., PartitionFilters: [isnotnull(o_orderdate#17), (o_orderdate#17 >= 1993-01-01), (o_orderdate#17 < 1994-01-01)], PushedFilters: [IsNotNull(o_custkey), IsNotNull(o_orderkey)], ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 546141744,
        "inputRowCount" : 22755906
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 5 ],
      "Objectives" : {
        "DurationInMs" : 30896,
        "TotalTasksDurationInMs" : 17669,
        "IOBytes" : {
          "Total" : 568852677,
          "Details" : {
            "IR" : 259241906,
            "IW" : 0,
            "SR" : 0,
            "SW" : 309610771
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702226545498,
  "SQLEndTimeInMs" : 1702226644561,
  "Objectives" : {
    "DurationInMs" : 99063,
    "IOBytes" : {
      "Total" : 61743139259,
      "Details" : {
        "IR" : 10336718395,
        "IW" : 0,
        "SR" : 25703212839,
        "SW" : 25703208025
      }
    }
  }
}
