{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "34" : {
          "sign" : 596393343,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 16,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [r_regionkey#57L] "
        },
        "12" : {
          "sign" : 997493028,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2091504,
          "rowCount" : 130719,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [p_partkey#4L] "
        },
        "8" : {
          "sign" : -607158267,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 24024420680,
          "rowCount" : 600610517,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [l_orderkey#20L, l_extendedprice#25, l_discount#26, s_nationkey#16L] "
        },
        "19" : {
          "sign" : 1264449009,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 201000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(s_suppkey#13L) AND isnotnull(s_nationkey#16L)) "
        },
        "23" : {
          "sign" : -1726241958,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 7368661530,
          "rowCount" : 45485565,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [o_orderkey#36L, o_custkey#37L, o_orderstatus#38, o_totalprice#39, o_orderpriority#40, o_clerk#41, o_shippriority#42, o_comment#43, o_orderdate#44], `spark_catalog`.`tpch_100`.`orders`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "4" : {
          "sign" : 986163545,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 66554040,
          "rowCount" : 1188465,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [l_extendedprice#25, l_discount#26, o_custkey#37L, o_orderdate#44, n_name#61] "
        },
        "15" : {
          "sign" : -394941954,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 28801819296,
          "rowCount" : 600037902,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_extendedprice#25, l_discount#26] "
        },
        "11" : {
          "sign" : 1355054294,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 33632643352,
          "rowCount" : 600582917,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (p_partkey#4L = l_partkey#21L) "
        },
        "9" : {
          "sign" : -665507079,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 33634188952,
          "rowCount" : 600610517,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#13L = l_suppkey#22L) "
        },
        "33" : {
          "sign" : -284378772,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3275,
          "rowCount" : 25,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [n_nationkey#53L, n_name#54, n_regionkey#55L, n_comment#56], `spark_catalog`.`tpch_100`.`nation`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "22" : {
          "sign" : -1502207342,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 7368661530,
          "rowCount" : 45485565,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((((isnotnull(o_orderdate#44) AND (o_orderdate#44 >= 1995-01-01)) AND (o_orderdate#44 <= 1996-12-31)) AND isnotnull(o_orderkey#36L)) AND isnotnull(o_custkey#37L)) "
        },
        "26" : {
          "sign" : -1747563484,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3275,
          "rowCount" : 25,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [n_nationkey#60L, n_name#61, n_regionkey#62L, n_comment#63], `spark_catalog`.`tpch_100`.`nation`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "37" : {
          "sign" : 413238535,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 360000000,
          "rowCount" : 15000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_custkey#45L, c_nationkey#48L] "
        },
        "13" : {
          "sign" : 240082787,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 25882362,
          "rowCount" : 130719,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(p_type#7) AND (p_type#7 = PROMO POLISHED TIN)) AND isnotnull(p_partkey#4L)) "
        },
        "24" : {
          "sign" : 195526954,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 900,
          "rowCount" : 25,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [n_nationkey#60L, n_name#61] "
        },
        "35" : {
          "sign" : -452929127,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 113,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(r_name#58) AND (r_name#58 = AFRICA)) AND isnotnull(r_regionkey#57L)) "
        },
        "16" : {
          "sign" : 47884328,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 111607049772,
          "rowCount" : 600037902,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(l_partkey#21L) AND (isnotnull(l_suppkey#22L) AND isnotnull(l_orderkey#20L))) "
        },
        "5" : {
          "sign" : -1473178080,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 85569480,
          "rowCount" : 1188465,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#16L = n_nationkey#60L) "
        },
        "10" : {
          "sign" : -2117771651,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 24023316680,
          "rowCount" : 600582917,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [l_orderkey#20L, l_suppkey#22L, l_extendedprice#25, l_discount#26] "
        },
        "21" : {
          "sign" : 1347160626,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1273595820,
          "rowCount" : 45485565,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [o_orderkey#36L, o_custkey#37L, o_orderdate#44] "
        },
        "32" : {
          "sign" : 916787015,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3275,
          "rowCount" : 25,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(n_nationkey#53L) AND isnotnull(n_regionkey#55L)) "
        },
        "6" : {
          "sign" : -1861886017,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 26462093768,
          "rowCount" : 601411222,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [l_extendedprice#25, l_discount#26, s_nationkey#16L, o_custkey#37L, o_orderdate#44] "
        },
        "36" : {
          "sign" : 2065775226,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 565,
          "rowCount" : 5,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [r_regionkey#57L, r_name#58, r_comment#59], `spark_catalog`.`tpch_100`.`region`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "1" : {
          "sign" : 819565685,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 4212859504,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [o_year#0], [o_year#0, (sum(CASE WHEN (nation#2 = MOZAMBIQUE) THEN volume#1 ELSE 0.0000 END) / sum(volume#1)) AS mkt_share#3] "
        },
        "39" : {
          "sign" : 1833644048,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3495000000,
          "rowCount" : 15000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_custkey#45L, c_name#46, c_address#47, c_nationkey#48L, c_phone#49, c_acctbal#50, c_comment#51, c_mktsegment#52], `spark_catalog`.`tpch_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "17" : {
          "sign" : 559913504,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 111607049772,
          "rowCount" : 600037902,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_linenumber#23, l_quantity#24, l_extendedprice#25, l_discount#26, l_tax#27, l_returnflag#28, l_linestatus#29, l_commitdate#30, l_receiptdate#31, l_shipinstruct#32, l_shipmode#33, l_comment#34, l_shipdate#35], `spark_catalog`.`tpch_100`.`lineitem`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "25" : {
          "sign" : 623065693,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3275,
          "rowCount" : 25,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(n_nationkey#60L) "
        },
        "14" : {
          "sign" : -879419419,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3960000000,
          "rowCount" : 20000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [p_partkey#4L, p_name#5, p_mfgr#6, p_type#7, p_size#8, p_container#9, p_retailprice#10, p_comment#11, p_brand#12], `spark_catalog`.`tpch_100`.`part`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "31" : {
          "sign" : -1664105579,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 600,
          "rowCount" : 25,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [n_nationkey#53L, n_regionkey#55L] "
        },
        "0" : {
          "sign" : -1118265376,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 4212859504,
          "rowCount" : -1,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [o_year#0 ASC NULLS FIRST], true "
        },
        "20" : {
          "sign" : 741471493,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 201000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_suppkey#13L, s_name#14, s_address#15, s_nationkey#16L, s_phone#17, s_acctbal#18, s_comment#19], `spark_catalog`.`tpch_100`.`supplier`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "27" : {
          "sign" : -112553462,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 285510576,
          "rowCount" : 17844411,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [c_custkey#45L] "
        },
        "2" : {
          "sign" : -1510301439,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 7222044864,
          "rowCount" : 150459268,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [year(o_orderdate#44) AS o_year#0, (l_extendedprice#25 * (1 - l_discount#26)) AS volume#1, n_name#61 AS nation#2] "
        },
        "38" : {
          "sign" : -970090419,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3495000000,
          "rowCount" : 15000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(c_custkey#45L) AND isnotnull(c_nationkey#48L)) "
        },
        "18" : {
          "sign" : -188402084,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 24000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [s_suppkey#13L, s_nationkey#16L] "
        },
        "30" : {
          "sign" : 417694477,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 800,
          "rowCount" : 25,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (n_regionkey#55L = r_regionkey#57L) "
        },
        "7" : {
          "sign" : 627786562,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 36084673320,
          "rowCount" : 601411222,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (l_orderkey#20L = o_orderkey#36L) "
        },
        "29" : {
          "sign" : 834681040,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 400,
          "rowCount" : 25,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [n_nationkey#53L] "
        },
        "3" : {
          "sign" : -1351707897,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 9629393152,
          "rowCount" : 150459268,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (o_custkey#37L = c_custkey#45L) "
        },
        "28" : {
          "sign" : 592178299,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 571021152,
          "rowCount" : 17844411,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (c_nationkey#48L = n_nationkey#53L) "
        }
      },
      "links" : [ {
        "fromId" : 14,
        "fromName" : "LogicalRelation",
        "toId" : 13,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Filter",
        "toId" : 12,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 12,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "LogicalRelation",
        "toId" : 16,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "Filter",
        "toId" : 15,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "Project",
        "toId" : 11,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 11,
        "fromName" : "Join",
        "toId" : 10,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "LogicalRelation",
        "toId" : 19,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "Filter",
        "toId" : 18,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "Project",
        "toId" : 9,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Join",
        "toId" : 8,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "LogicalRelation",
        "toId" : 22,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "Filter",
        "toId" : 21,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Project",
        "toId" : 7,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Join",
        "toId" : 6,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Project",
        "toId" : 5,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "LogicalRelation",
        "toId" : 25,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "Filter",
        "toId" : 24,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "Project",
        "toId" : 5,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Join",
        "toId" : 4,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Project",
        "toId" : 3,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 33,
        "fromName" : "LogicalRelation",
        "toId" : 32,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 32,
        "fromName" : "Filter",
        "toId" : 31,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 31,
        "fromName" : "Project",
        "toId" : 30,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 36,
        "fromName" : "LogicalRelation",
        "toId" : 35,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 35,
        "fromName" : "Filter",
        "toId" : 34,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 34,
        "fromName" : "Project",
        "toId" : 30,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 30,
        "fromName" : "Join",
        "toId" : 29,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 29,
        "fromName" : "Project",
        "toId" : 28,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 39,
        "fromName" : "LogicalRelation",
        "toId" : 38,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 38,
        "fromName" : "Filter",
        "toId" : 37,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 37,
        "fromName" : "Project",
        "toId" : 28,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "Join",
        "toId" : 27,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "Project",
        "toId" : 3,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Join",
        "toId" : 2,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Project",
        "toId" : 1,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "Aggregate",
        "toId" : 0,
        "toName" : "Sort",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "Sort [o_year#0 ASC NULLS FIRST], true\n+- Aggregate [o_year#0], [o_year#0, (sum(CASE WHEN (nation#2 = MOZAMBIQUE) THEN volume#1 ELSE 0.0000 END) / sum(volume#1)) AS mkt_share#3]\n   +- Project [year(o_orderdate#44) AS o_year#0, (l_extendedprice#25 * (1 - l_discount#26)) AS volume#1, n_name#61 AS nation#2]\n      +- Join Inner, (o_custkey#37L = c_custkey#45L)\n         :- Project [l_extendedprice#25, l_discount#26, o_custkey#37L, o_orderdate#44, n_name#61]\n         :  +- Join Inner, (s_nationkey#16L = n_nationkey#60L)\n         :     :- Project [l_extendedprice#25, l_discount#26, s_nationkey#16L, o_custkey#37L, o_orderdate#44]\n         :     :  +- Join Inner, (l_orderkey#20L = o_orderkey#36L)\n         :     :     :- Project [l_orderkey#20L, l_extendedprice#25, l_discount#26, s_nationkey#16L]\n         :     :     :  +- Join Inner, (s_suppkey#13L = l_suppkey#22L)\n         :     :     :     :- Project [l_orderkey#20L, l_suppkey#22L, l_extendedprice#25, l_discount#26]\n         :     :     :     :  +- Join Inner, (p_partkey#4L = l_partkey#21L)\n         :     :     :     :     :- Project [p_partkey#4L]\n         :     :     :     :     :  +- Filter ((isnotnull(p_type#7) AND (p_type#7 = PROMO POLISHED TIN)) AND isnotnull(p_partkey#4L))\n         :     :     :     :     :     +- Relation spark_catalog.tpch_100.part[p_partkey#4L,p_name#5,p_mfgr#6,p_type#7,p_size#8,p_container#9,p_retailprice#10,p_comment#11,p_brand#12] parquet\n         :     :     :     :     +- Project [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_extendedprice#25, l_discount#26]\n         :     :     :     :        +- Filter (isnotnull(l_partkey#21L) AND (isnotnull(l_suppkey#22L) AND isnotnull(l_orderkey#20L)))\n         :     :     :     :           +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#20L,l_partkey#21L,l_suppkey#22L,l_linenumber#23,l_quantity#24,l_extendedprice#25,l_discount#26,l_tax#27,l_returnflag#28,l_linestatus#29,l_commitdate#30,l_receiptdate#31,l_shipinstruct#32,l_shipmode#33,l_comment#34,l_shipdate#35] parquet\n         :     :     :     +- Project [s_suppkey#13L, s_nationkey#16L]\n         :     :     :        +- Filter (isnotnull(s_suppkey#13L) AND isnotnull(s_nationkey#16L))\n         :     :     :           +- Relation spark_catalog.tpch_100.supplier[s_suppkey#13L,s_name#14,s_address#15,s_nationkey#16L,s_phone#17,s_acctbal#18,s_comment#19] parquet\n         :     :     +- Project [o_orderkey#36L, o_custkey#37L, o_orderdate#44]\n         :     :        +- Filter ((((isnotnull(o_orderdate#44) AND (o_orderdate#44 >= 1995-01-01)) AND (o_orderdate#44 <= 1996-12-31)) AND isnotnull(o_orderkey#36L)) AND isnotnull(o_custkey#37L))\n         :     :           +- Relation spark_catalog.tpch_100.orders[o_orderkey#36L,o_custkey#37L,o_orderstatus#38,o_totalprice#39,o_orderpriority#40,o_clerk#41,o_shippriority#42,o_comment#43,o_orderdate#44] parquet\n         :     +- Project [n_nationkey#60L, n_name#61]\n         :        +- Filter isnotnull(n_nationkey#60L)\n         :           +- Relation spark_catalog.tpch_100.nation[n_nationkey#60L,n_name#61,n_regionkey#62L,n_comment#63] parquet\n         +- Project [c_custkey#45L]\n            +- Join Inner, (c_nationkey#48L = n_nationkey#53L)\n               :- Project [n_nationkey#53L]\n               :  +- Join Inner, (n_regionkey#55L = r_regionkey#57L)\n               :     :- Project [n_nationkey#53L, n_regionkey#55L]\n               :     :  +- Filter (isnotnull(n_nationkey#53L) AND isnotnull(n_regionkey#55L))\n               :     :     +- Relation spark_catalog.tpch_100.nation[n_nationkey#53L,n_name#54,n_regionkey#55L,n_comment#56] parquet\n               :     +- Project [r_regionkey#57L]\n               :        +- Filter ((isnotnull(r_name#58) AND (r_name#58 = AFRICA)) AND isnotnull(r_regionkey#57L))\n               :           +- Relation spark_catalog.tpch_100.region[r_regionkey#57L,r_name#58,r_comment#59] parquet\n               +- Project [c_custkey#45L, c_nationkey#48L]\n                  +- Filter (isnotnull(c_custkey#45L) AND isnotnull(c_nationkey#48L))\n                     +- Relation spark_catalog.tpch_100.customer[c_custkey#45L,c_name#46,c_address#47,c_nationkey#48L,c_phone#49,c_acctbal#50,c_comment#51,c_mktsegment#52] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 126631718417,
      "inputRowCount" : 681523522
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "8" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : -1247054056,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 159926600,
            "rowCount" : 3998165,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_orderkey#20L, l_extendedprice#25, l_discount#26, s_nationkey#16L], ShuffleQueryStage 8 "
          },
          "4" : {
            "sign" : -490039098,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 255100813190944000,
            "rowCount" : 4555371664124000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#25, l_discount#26, o_custkey#37L, o_orderdate#44, n_name#81] "
          },
          "11" : {
            "sign" : -1172897552,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 47971536,
            "rowCount" : 2998221,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_custkey#45L], ShuffleQueryStage 7 "
          },
          "9" : {
            "sign" : 1294784956,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1458387968,
            "rowCount" : 45574624,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [o_orderkey#36L, o_custkey#37L, o_orderdate#44], ShuffleQueryStage 2 "
          },
          "5" : {
            "sign" : -1882575625,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 327986759816928000,
            "rowCount" : 4555371664124000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#16L = n_nationkey#80L) "
          },
          "10" : {
            "sign" : -35150934,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048776,
            "rowCount" : 25,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#80L, n_name#81], BroadcastQueryStage 3 "
          },
          "6" : {
            "sign" : -2027940930,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 8017454128858240,
            "rowCount" : 182214866564960,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#25, l_discount#26, s_nationkey#16L, o_custkey#37L, o_orderdate#44] "
          },
          "1" : {
            "sign" : -1550566765,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 382424307613082655312000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [o_year#76], [o_year#76, (sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END) / sum(volume#77)) AS mkt_share#79] "
          },
          "0" : {
            "sign" : -175914295,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 382424307613082655312000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [o_year#76 ASC NULLS FIRST], true "
          },
          "2" : {
            "sign" : -1769090979,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 655584527336713123392000,
            "rowCount" : 13658010986181523404000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [year(o_orderdate#44) AS o_year#76, (l_extendedprice#25 * (1 - l_discount#26)) AS volume#77, n_name#81 AS nation#78] "
          },
          "7" : {
            "sign" : -366057061,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 10932891993897600,
            "rowCount" : 182214866564960,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (l_orderkey#20L = o_orderkey#36L) "
          },
          "3" : {
            "sign" : 1792311378,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 874112703115617497856000,
            "rowCount" : 13658010986181523404000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (o_custkey#37L = c_custkey#45L) "
          }
        },
        "links" : [ {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [o_year#76 ASC NULLS FIRST], true\n+- Aggregate [o_year#76], [o_year#76, (sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END) / sum(volume#77)) AS mkt_share#79]\n   +- Project [year(o_orderdate#44) AS o_year#76, (l_extendedprice#25 * (1 - l_discount#26)) AS volume#77, n_name#81 AS nation#78]\n      +- Join Inner, (o_custkey#37L = c_custkey#45L)\n         :- Project [l_extendedprice#25, l_discount#26, o_custkey#37L, o_orderdate#44, n_name#81]\n         :  +- Join Inner, (s_nationkey#16L = n_nationkey#80L)\n         :     :- Project [l_extendedprice#25, l_discount#26, s_nationkey#16L, o_custkey#37L, o_orderdate#44]\n         :     :  +- Join Inner, (l_orderkey#20L = o_orderkey#36L)\n         :     :     :- LogicalQueryStage Project [l_orderkey#20L, l_extendedprice#25, l_discount#26, s_nationkey#16L], ShuffleQueryStage 8\n         :     :     +- LogicalQueryStage Project [o_orderkey#36L, o_custkey#37L, o_orderdate#44], ShuffleQueryStage 2\n         :     +- LogicalQueryStage Project [n_nationkey#80L, n_name#81], BroadcastQueryStage 3\n         +- LogicalQueryStage Project [c_custkey#45L], ShuffleQueryStage 7\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1667334880,
        "inputRowCount" : 52571035
      },
      "PD" : {
        "4" : [ 421126, 421126, 421126, 421126, 404702, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 404702, 421126, 421126, 404702, 421126, 421126, 421126, 421126, 421126, 421126, 404702, 421126, 421126, 421126, 421126, 421126, 404702, 421126, 421126, 421126, 421126, 421126, 421126, 404702, 421126, 421126, 421126, 421126, 404702, 421126, 445172, 404702, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 404702, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 404702, 421126, 421126, 404702, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 404702, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 404702, 445172, 421126, 421126, 421126, 421126, 404702, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 404702, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 404702, 421126, 421126, 421126, 421126, 404702, 421126, 421126, 421126, 445172, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126 ],
        "1" : [ 3253351, 3287067, 3287067, 3261780, 3261780, 3278638, 3270209, 3237349, 3278638, 3287067, 3303925, 3287067, 3312354, 3296352, 3279494, 3295496, 3261780, 3279494, 3303925, 3295496, 3303925, 3296352, 3270209, 3278638, 3278638, 3303925, 3254207, 3303925, 3278638, 3279494, 3313210, 3295496, 3303147, 3271065, 3279494, 3303925, 3279494, 3295496, 3287067, 3278638, 3313210, 3261780, 3303925, 3294718, 3253351, 3270209, 3320783, 3278638, 3295496, 3304781, 3279494, 3303925, 3321639, 3261780, 3271065, 3303925, 3271065, 3321639, 3287923, 3287067, 3261780, 3287923, 3303925, 3312354, 3278638, 3312354, 3287067, 3287067, 3295496, 3287067, 3245778, 3287067, 3254207, 3312354, 3295496, 3270209, 3295496, 3287067, 3296352, 3304781, 3261780, 3286289, 3303925, 3270209, 3271065, 3253351, 3296352, 3244922, 3287923, 3287067, 3244922, 3320783, 3287067, 3304781, 3295496, 3270209, 3244922, 3312354, 3278638, 3270209, 3278638, 3262636, 3245778, 3296352, 3270209, 3253351, 3270209, 3279494, 3278638, 3270209, 3287067, 3261780, 3287067, 3304781, 3312354, 3278638, 3262636, 3278638, 3253351, 3303925, 3287923, 3278638, 3295496, 3278638, 3279494, 3296352, 3270209, 3303925, 3296352, 3278638, 3278638, 3261780, 3295496, 3287923, 3278638, 3245778, 3270209, 3287067, 3295496, 3278638, 3287923, 3278638, 3295496, 3278638, 3304781, 3320783, 3287067, 3261780, 3261780, 3330068, 3271065, 3245778, 3295496, 3304781, 3295496, 3261002, 3338497, 3295496, 3262636, 3245778, 3253351, 3270209, 3254207, 3287067, 3303925, 3236493, 3287923, 3312354, 3262636, 3295496, 3270209, 3313210, 3321639, 3303925, 3303925, 3278638, 3312354, 3270209, 3303925, 3295496, 3237349, 3295496, 3278638, 3303925, 3287067, 3329212, 3269431, 3296352, 3303925, 3295496, 3287067, 3304781, 3253351, 3303925, 3287923, 3253351, 3287067, 3295496, 3287067, 3279494 ],
        "3" : [ 83304, 84004, 82448, 82448, 81670, 82526, 81670, 85879, 83304, 82448, 83226, 84082, 84082, 82448, 84860, 80892, 81670, 82448, 82448, 83226, 84004, 83226, 83226, 82448, 81670, 82526, 84160, 80892, 84245, 82448, 81670, 82448, 81670, 81670, 84238, 83226, 83226, 82448, 83226, 81670, 85023, 84245, 84860, 84082, 82448, 82448, 83226, 84004, 83226, 83226, 85023, 82448, 80114, 82448, 81670, 83226, 84082, 81670, 84938, 83226, 81670, 83226, 82448, 82526, 82448, 85716, 83226, 85560, 81670, 83226, 82448, 84160, 82448, 84004, 83226, 83226, 84938, 82526, 81670, 83226, 83226, 81670, 82448, 84082, 81670, 81670, 81670, 81748, 82448, 82448, 82448, 81670, 84004, 83304, 83226, 86657, 84860, 82448, 82526, 84082, 84082, 82448, 84004, 81670, 84082, 83304, 80892, 84082, 82448, 82448, 81670, 81670, 84004, 83226, 84082, 81670, 83226, 84860, 86494, 83304, 83304, 83467, 81670, 82526, 84004, 83304, 83304, 83226, 84004, 83304, 84004, 83304, 81741, 82448, 82448, 81670, 82448, 81670, 82448, 83304, 83226, 83304, 81741, 82448, 85023, 82448, 82448, 81670, 82448, 83304, 85023, 82526, 81670, 82448, 85101, 81670, 82448, 83226, 83304, 83304, 83226, 82448, 84245, 81670, 82448, 82448, 81670, 83226, 82448, 81670, 82448, 82448, 81670, 83226, 84004, 82448, 81670, 84082, 82526, 83304, 81670, 80963, 83304, 84004, 81670, 81670, 83382, 82448, 84860, 84004, 82448, 83304, 82526, 83226, 81670, 82597, 81670, 82448, 84004, 82448 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226611533,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 7664,
        "IOBytes" : {
          "Total" : 784041996,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 751136051,
            "SW" : 32905945
          }
        }
      }
    },
    "4" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 867191651,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 12582912,
            "rowCount" : 133297,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_partkey#4L], BroadcastQueryStage 0 "
          },
          "8" : {
            "sign" : -1165075842,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3199330088915760000000,
            "rowCount" : 79983252222894000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_orderkey#20L, l_extendedprice#25, l_discount#26, s_nationkey#16L] "
          },
          "19" : {
            "sign" : -1194773712,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 285510576,
            "rowCount" : 17844411,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_custkey#45L] "
          },
          "23" : {
            "sign" : -970090419,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3495000000,
            "rowCount" : 15000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_custkey#45L) AND isnotnull(c_nationkey#48L)) "
          },
          "4" : {
            "sign" : -1806515472,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 841975710800,
            "rowCount" : 15035280550,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#25, l_discount#26, o_custkey#37L, o_orderdate#44, n_name#81] "
          },
          "15" : {
            "sign" : 559913504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 111607049772,
            "rowCount" : 600037902,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_linenumber#23, l_quantity#24, l_extendedprice#25, l_discount#26, l_tax#27, l_returnflag#28, l_linestatus#29, l_commitdate#30, l_receiptdate#31, l_shipinstruct#32, l_shipmode#33, l_comment#34, l_shipdate#35], `spark_catalog`.`tpch_100`.`lineitem`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "11" : {
            "sign" : -1205556787,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4479062124482064,
            "rowCount" : 79983252222894,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (p_partkey#4L = l_partkey#21L) "
          },
          "9" : {
            "sign" : -902830090,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4479062124482064000000,
            "rowCount" : 79983252222894000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#13L = l_suppkey#22L) "
          },
          "22" : {
            "sign" : 413238535,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 360000000,
            "rowCount" : 15000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_custkey#45L, c_nationkey#48L] "
          },
          "13" : {
            "sign" : -394941954,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 28801819296,
            "rowCount" : 600037902,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_extendedprice#25, l_discount#26] "
          },
          "24" : {
            "sign" : 1833644048,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3495000000,
            "rowCount" : 15000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_custkey#45L, c_name#46, c_address#47, c_nationkey#48L, c_phone#49, c_acctbal#50, c_comment#51, c_mktsegment#52], `spark_catalog`.`tpch_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "16" : {
            "sign" : -1953890044,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_suppkey#13L, s_nationkey#16L], ShuffleQueryStage 1 "
          },
          "5" : {
            "sign" : -357389391,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1082540199600,
            "rowCount" : 15035280550,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#16L = n_nationkey#80L) "
          },
          "10" : {
            "sign" : -1477224248,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3199330088915760,
            "rowCount" : 79983252222894,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_orderkey#20L, l_suppkey#22L, l_extendedprice#25, l_discount#26] "
          },
          "21" : {
            "sign" : 1861355920,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 400,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#53L], BroadcastQueryStage 5 "
          },
          "6" : {
            "sign" : -1975390976,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 26462093768,
            "rowCount" : 601411222,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#25, l_discount#26, s_nationkey#16L, o_custkey#37L, o_orderdate#44] "
          },
          "1" : {
            "sign" : 1250164797,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 4212859504,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [o_year#76], [o_year#76, (sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END) / sum(volume#77)) AS mkt_share#79] "
          },
          "17" : {
            "sign" : 1294784956,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1273595820,
            "rowCount" : 45485565,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [o_orderkey#36L, o_custkey#37L, o_orderdate#44], ShuffleQueryStage 2 "
          },
          "14" : {
            "sign" : 47884328,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 111607049772,
            "rowCount" : 600037902,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(l_partkey#21L) AND (isnotnull(l_suppkey#22L) AND isnotnull(l_orderkey#20L))) "
          },
          "0" : {
            "sign" : -1420018889,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 4212859504,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [o_year#76 ASC NULLS FIRST], true "
          },
          "20" : {
            "sign" : 816741027,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 571021152,
            "rowCount" : 17844411,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_nationkey#48L = n_nationkey#53L) "
          },
          "2" : {
            "sign" : -719448885,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 7222044864,
            "rowCount" : 150459268,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [year(o_orderdate#44) AS o_year#76, (l_extendedprice#25 * (1 - l_discount#26)) AS volume#77, n_name#81 AS nation#78] "
          },
          "18" : {
            "sign" : -35150934,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048776,
            "rowCount" : 25,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#80L, n_name#81], BroadcastQueryStage 3 "
          },
          "7" : {
            "sign" : 2052764729,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 36084673320,
            "rowCount" : 601411222,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (l_orderkey#20L = o_orderkey#36L) "
          },
          "3" : {
            "sign" : 374078366,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 9629393152,
            "rowCount" : 150459268,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (o_custkey#37L = c_custkey#45L) "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalRelation",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 20,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalRelation",
          "toId" : 23,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Filter",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 20,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Join",
          "toId" : 19,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [o_year#76 ASC NULLS FIRST], true\n+- Aggregate [o_year#76], [o_year#76, (sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END) / sum(volume#77)) AS mkt_share#79]\n   +- Project [year(o_orderdate#44) AS o_year#76, (l_extendedprice#25 * (1 - l_discount#26)) AS volume#77, n_name#81 AS nation#78]\n      +- Join Inner, (o_custkey#37L = c_custkey#45L)\n         :- Project [l_extendedprice#25, l_discount#26, o_custkey#37L, o_orderdate#44, n_name#81]\n         :  +- Join Inner, (s_nationkey#16L = n_nationkey#80L)\n         :     :- Project [l_extendedprice#25, l_discount#26, s_nationkey#16L, o_custkey#37L, o_orderdate#44]\n         :     :  +- Join Inner, (l_orderkey#20L = o_orderkey#36L)\n         :     :     :- Project [l_orderkey#20L, l_extendedprice#25, l_discount#26, s_nationkey#16L]\n         :     :     :  +- Join Inner, (s_suppkey#13L = l_suppkey#22L)\n         :     :     :     :- Project [l_orderkey#20L, l_suppkey#22L, l_extendedprice#25, l_discount#26]\n         :     :     :     :  +- Join Inner, (p_partkey#4L = l_partkey#21L)\n         :     :     :     :     :- LogicalQueryStage Project [p_partkey#4L], BroadcastQueryStage 0\n         :     :     :     :     +- Project [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_extendedprice#25, l_discount#26]\n         :     :     :     :        +- Filter (isnotnull(l_partkey#21L) AND (isnotnull(l_suppkey#22L) AND isnotnull(l_orderkey#20L)))\n         :     :     :     :           +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#20L,l_partkey#21L,l_suppkey#22L,l_linenumber#23,l_quantity#24,l_extendedprice#25,l_discount#26,l_tax#27,l_returnflag#28,l_linestatus#29,l_commitdate#30,l_receiptdate#31,l_shipinstruct#32,l_shipmode#33,l_comment#34,l_shipdate#35] parquet\n         :     :     :     +- LogicalQueryStage Project [s_suppkey#13L, s_nationkey#16L], ShuffleQueryStage 1\n         :     :     +- LogicalQueryStage Project [o_orderkey#36L, o_custkey#37L, o_orderdate#44], ShuffleQueryStage 2\n         :     +- LogicalQueryStage Project [n_nationkey#80L, n_name#81], BroadcastQueryStage 3\n         +- Project [c_custkey#45L]\n            +- Join Inner, (c_nationkey#48L = n_nationkey#53L)\n               :- LogicalQueryStage Project [n_nationkey#53L], BroadcastQueryStage 5\n               +- Project [c_custkey#45L, c_nationkey#48L]\n                  +- Filter (isnotnull(c_custkey#45L) AND isnotnull(c_nationkey#48L))\n                     +- Relation spark_catalog.tpch_100.customer[c_custkey#45L,c_name#46,c_address#47,c_nationkey#48L,c_phone#49,c_acctbal#50,c_comment#51,c_mktsegment#52] parquet\n"
      },
      "IM" : {
        "inputSizeInBytes" : 116413277680,
        "inputRowCount" : 661656814
      },
      "PD" : {
        "0" : [ 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 52331, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 52331, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 52331, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 52331, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 57565, 57565, 52331, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 52331, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226586226,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 32971,
        "IOBytes" : {
          "Total" : 15569962128,
          "Details" : {
            "IR" : 13861134065,
            "IW" : 0,
            "SR" : 859723791,
            "SW" : 849104272
          }
        }
      }
    },
    "11" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : -1614164790,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 80,
            "rowCount" : 2,
            "isRuntime" : true,
            "predicate" : " (unknown) Sort Arguments: [o_year#76 ASC NULLS FIRST], true "
          },
          "1" : {
            "sign" : 798791040,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 80,
            "rowCount" : 2,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [o_year#76], [o_year#76, (sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END) / sum(volume#77)) AS mkt_share#79], ShuffleQueryStage 11 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "LogicalQueryStage",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [o_year#76 ASC NULLS FIRST], true\n+- LogicalQueryStage Aggregate [o_year#76], [o_year#76, (sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END) / sum(volume#77)) AS mkt_share#79], ShuffleQueryStage 11\n"
      },
      "IM" : {
        "inputSizeInBytes" : 80,
        "inputRowCount" : 2
      },
      "PD" : {
        "7" : [ 80, 80 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226619021,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 176,
        "IOBytes" : {
          "Total" : 156,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 156,
            "SW" : 0
          }
        }
      }
    },
    "9" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : -68864836,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 70393016,
            "rowCount" : 1215421,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_extendedprice#25, l_discount#26, o_custkey#37L, o_orderdate#44, n_name#81], ShuffleQueryStage 9 "
          },
          "5" : {
            "sign" : -1172897552,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 47971536,
            "rowCount" : 2998221,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_custkey#45L], ShuffleQueryStage 7 "
          },
          "1" : {
            "sign" : -233211739,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 102034821449148,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [o_year#76], [o_year#76, (sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END) / sum(volume#77)) AS mkt_share#79] "
          },
          "0" : {
            "sign" : -1420335533,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 102034821449148,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [o_year#76 ASC NULLS FIRST], true "
          },
          "2" : {
            "sign" : 2049804647,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 174916836769968,
            "rowCount" : 3644100766041,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [year(o_orderdate#44) AS o_year#76, (l_extendedprice#25 * (1 - l_discount#26)) AS volume#77, n_name#81 AS nation#78] "
          },
          "3" : {
            "sign" : 995199012,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 233222449026624,
            "rowCount" : 3644100766041,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (o_custkey#37L = c_custkey#45L) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [o_year#76 ASC NULLS FIRST], true\n+- Aggregate [o_year#76], [o_year#76, (sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END) / sum(volume#77)) AS mkt_share#79]\n   +- Project [year(o_orderdate#44) AS o_year#76, (l_extendedprice#25 * (1 - l_discount#26)) AS volume#77, n_name#81 AS nation#78]\n      +- Join Inner, (o_custkey#37L = c_custkey#45L)\n         :- LogicalQueryStage Project [l_extendedprice#25, l_discount#26, o_custkey#37L, o_orderdate#44, n_name#81], ShuffleQueryStage 9\n         +- LogicalQueryStage Project [c_custkey#45L], ShuffleQueryStage 7\n"
      },
      "IM" : {
        "inputSizeInBytes" : 118364552,
        "inputRowCount" : 4213642
      },
      "PD" : {
        "5" : [ 174988, 170578, 176796, 170783, 166030, 171908, 177696, 169062, 170392, 174632, 176010, 171956, 175055, 176504, 173539, 173677, 171956, 170254, 173286, 176180, 166598, 172299, 171818, 173677, 173902, 175193, 176504, 173915, 176148, 171921, 167751, 175856, 170392, 167546, 173623, 174940, 168568, 178087, 176180, 172978, 176180, 177882, 170783, 172978, 170578, 177834, 171818, 167222, 171446, 170254, 175193, 167546, 178087, 170392, 171956, 170440, 176366, 176010, 176504, 173437, 167889, 177696, 175055, 168924, 178238, 173286, 171908, 170921, 172978, 174850, 169062, 174802, 166373, 173148, 167889, 172023, 168738, 167546, 174988, 173472, 173539, 171770, 177696, 174802, 167408, 167623, 169200, 170783, 175055, 170783, 170222, 169129, 177882, 170302, 176934, 171818, 175055, 170254, 174850, 176571, 170084, 173286, 173286, 172524, 170392, 176180, 176148, 170440, 169801, 177834, 167684, 177372, 172962, 174664, 170440, 176366, 172161, 174988, 179754, 174850, 170254, 175055, 165812, 172161, 169129, 174494, 173472, 176571, 174988, 173815, 170360, 170254, 169946, 172386, 172386, 178225, 170222, 174664, 167976, 170507, 173472, 171818, 173539, 173286, 175280, 169267, 171462, 173764, 170084, 171956, 171908, 174850, 176571, 174664, 170716, 166373, 170867, 172524, 177882, 170068, 170254, 174802, 169267, 173334, 176010, 171956, 175126, 167684, 177526, 170254, 174802, 175280, 170440, 175856, 172161, 165812, 171770, 172386, 169062, 178225, 169653, 169062, 165330, 174988, 170084, 179603, 173539, 175126, 171632, 174802, 176571, 173610, 170716, 173562, 173286, 171770, 174850, 173472, 173334, 175055 ],
        "3" : [ 83304, 84004, 82448, 82448, 81670, 82526, 81670, 85879, 83304, 82448, 83226, 84082, 84082, 82448, 84860, 80892, 81670, 82448, 82448, 83226, 84004, 83226, 83226, 82448, 81670, 82526, 84160, 80892, 84245, 82448, 81670, 82448, 81670, 81670, 84238, 83226, 83226, 82448, 83226, 81670, 85023, 84245, 84860, 84082, 82448, 82448, 83226, 84004, 83226, 83226, 85023, 82448, 80114, 82448, 81670, 83226, 84082, 81670, 84938, 83226, 81670, 83226, 82448, 82526, 82448, 85716, 83226, 85560, 81670, 83226, 82448, 84160, 82448, 84004, 83226, 83226, 84938, 82526, 81670, 83226, 83226, 81670, 82448, 84082, 81670, 81670, 81670, 81748, 82448, 82448, 82448, 81670, 84004, 83304, 83226, 86657, 84860, 82448, 82526, 84082, 84082, 82448, 84004, 81670, 84082, 83304, 80892, 84082, 82448, 82448, 81670, 81670, 84004, 83226, 84082, 81670, 83226, 84860, 86494, 83304, 83304, 83467, 81670, 82526, 84004, 83304, 83304, 83226, 84004, 83304, 84004, 83304, 81741, 82448, 82448, 81670, 82448, 81670, 82448, 83304, 83226, 83304, 81741, 82448, 85023, 82448, 82448, 81670, 82448, 83304, 85023, 82526, 81670, 82448, 85101, 81670, 82448, 83226, 83304, 83304, 83226, 82448, 84245, 81670, 82448, 82448, 81670, 83226, 82448, 81670, 82448, 82448, 81670, 83226, 84004, 82448, 81670, 84082, 82526, 83304, 81670, 80963, 83304, 84004, 81670, 81670, 83382, 82448, 84860, 84004, 82448, 83304, 82526, 83226, 81670, 82597, 81670, 82448, 84004, 82448 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226615296,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 3901,
        "IOBytes" : {
          "Total" : 48795645,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 48795277,
            "SW" : 368
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1294784956,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1458387968,
            "rowCount" : 45574624,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [o_orderkey#36L, o_custkey#37L, o_orderdate#44], ShuffleQueryStage 2 "
          },
          "8" : {
            "sign" : -28375415,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24023316680000000,
            "rowCount" : 600582917000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_orderkey#20L, l_extendedprice#25, l_discount#26, s_nationkey#16L] "
          },
          "19" : {
            "sign" : 1833644048,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3495000000,
            "rowCount" : 15000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_custkey#45L, c_name#46, c_address#47, c_nationkey#48L, c_phone#49, c_acctbal#50, c_comment#51, c_mktsegment#52], `spark_catalog`.`tpch_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "4" : {
            "sign" : -1893415167,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 38319876872337491200000000,
            "rowCount" : 684283515577455200000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#25, l_discount#26, o_custkey#37L, o_orderdate#44, n_name#81] "
          },
          "15" : {
            "sign" : 816741027,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2400000000,
            "rowCount" : 75000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_nationkey#48L = n_nationkey#53L) "
          },
          "11" : {
            "sign" : -1953890044,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_suppkey#13L, s_nationkey#16L], ShuffleQueryStage 1 "
          },
          "9" : {
            "sign" : -1094250919,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 33632643352000000,
            "rowCount" : 600582917000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#13L = l_suppkey#22L) "
          },
          "13" : {
            "sign" : -35150934,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048776,
            "rowCount" : 25,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#80L, n_name#81], BroadcastQueryStage 3 "
          },
          "16" : {
            "sign" : 1861355920,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048712,
            "rowCount" : 5,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#53L], BroadcastQueryStage 5 "
          },
          "5" : {
            "sign" : -1707933076,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 49268413121576774400000000,
            "rowCount" : 684283515577455200000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#16L = n_nationkey#80L) "
          },
          "10" : {
            "sign" : 1696157969,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 24023316680,
            "rowCount" : 600582917,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_orderkey#20L, l_suppkey#22L, l_extendedprice#25, l_discount#26], ShuffleQueryStage 6 "
          },
          "6" : {
            "sign" : 106781011,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1204338987416321152000000,
            "rowCount" : 27371340623098208000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#25, l_discount#26, s_nationkey#16L, o_custkey#37L, o_orderdate#44] "
          },
          "1" : {
            "sign" : 1026767820,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 1436995382712655920000000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [o_year#76], [o_year#76, (sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END) / sum(volume#77)) AS mkt_share#79] "
          },
          "17" : {
            "sign" : 413238535,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 360000000,
            "rowCount" : 15000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_custkey#45L, c_nationkey#48L] "
          },
          "14" : {
            "sign" : -1194773712,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1200000000,
            "rowCount" : 75000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_custkey#45L] "
          },
          "0" : {
            "sign" : -321544696,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1436995382712655920000000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [o_year#76 ASC NULLS FIRST], true "
          },
          "2" : {
            "sign" : -498406692,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2463420656078838720000000000000000,
            "rowCount" : 51321263668309140000000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [year(o_orderdate#44) AS o_year#76, (l_extendedprice#25 * (1 - l_discount#26)) AS volume#77, n_name#81 AS nation#78] "
          },
          "18" : {
            "sign" : -970090419,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3495000000,
            "rowCount" : 15000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_custkey#45L) AND isnotnull(c_nationkey#48L)) "
          },
          "7" : {
            "sign" : -2121098816,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1642280437385892480000000,
            "rowCount" : 27371340623098208000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (l_orderkey#20L = o_orderkey#36L) "
          },
          "3" : {
            "sign" : 105641035,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3284560874771784960000000000000000,
            "rowCount" : 51321263668309140000000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (o_custkey#37L = c_custkey#45L) "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalRelation",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Filter",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [o_year#76 ASC NULLS FIRST], true\n+- Aggregate [o_year#76], [o_year#76, (sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END) / sum(volume#77)) AS mkt_share#79]\n   +- Project [year(o_orderdate#44) AS o_year#76, (l_extendedprice#25 * (1 - l_discount#26)) AS volume#77, n_name#81 AS nation#78]\n      +- Join Inner, (o_custkey#37L = c_custkey#45L)\n         :- Project [l_extendedprice#25, l_discount#26, o_custkey#37L, o_orderdate#44, n_name#81]\n         :  +- Join Inner, (s_nationkey#16L = n_nationkey#80L)\n         :     :- Project [l_extendedprice#25, l_discount#26, s_nationkey#16L, o_custkey#37L, o_orderdate#44]\n         :     :  +- Join Inner, (l_orderkey#20L = o_orderkey#36L)\n         :     :     :- Project [l_orderkey#20L, l_extendedprice#25, l_discount#26, s_nationkey#16L]\n         :     :     :  +- Join Inner, (s_suppkey#13L = l_suppkey#22L)\n         :     :     :     :- LogicalQueryStage Project [l_orderkey#20L, l_suppkey#22L, l_extendedprice#25, l_discount#26], ShuffleQueryStage 6\n         :     :     :     +- LogicalQueryStage Project [s_suppkey#13L, s_nationkey#16L], ShuffleQueryStage 1\n         :     :     +- LogicalQueryStage Project [o_orderkey#36L, o_custkey#37L, o_orderdate#44], ShuffleQueryStage 2\n         :     +- LogicalQueryStage Project [n_nationkey#80L, n_name#81], BroadcastQueryStage 3\n         +- Project [c_custkey#45L]\n            +- Join Inner, (c_nationkey#48L = n_nationkey#53L)\n               :- LogicalQueryStage Project [n_nationkey#53L], BroadcastQueryStage 5\n               +- Project [c_custkey#45L, c_nationkey#48L]\n                  +- Filter (isnotnull(c_custkey#45L) AND isnotnull(c_nationkey#48L))\n                     +- Relation spark_catalog.tpch_100.customer[c_custkey#45L,c_name#46,c_address#47,c_nationkey#48L,c_phone#49,c_acctbal#50,c_comment#51,c_mktsegment#52] parquet\n"
      },
      "IM" : {
        "inputSizeInBytes" : 29002802136,
        "inputRowCount" : 662157571
      },
      "PD" : {
        "1" : [ 3253351, 3287067, 3287067, 3261780, 3261780, 3278638, 3270209, 3237349, 3278638, 3287067, 3303925, 3287067, 3312354, 3296352, 3279494, 3295496, 3261780, 3279494, 3303925, 3295496, 3303925, 3296352, 3270209, 3278638, 3278638, 3303925, 3254207, 3303925, 3278638, 3279494, 3313210, 3295496, 3303147, 3271065, 3279494, 3303925, 3279494, 3295496, 3287067, 3278638, 3313210, 3261780, 3303925, 3294718, 3253351, 3270209, 3320783, 3278638, 3295496, 3304781, 3279494, 3303925, 3321639, 3261780, 3271065, 3303925, 3271065, 3321639, 3287923, 3287067, 3261780, 3287923, 3303925, 3312354, 3278638, 3312354, 3287067, 3287067, 3295496, 3287067, 3245778, 3287067, 3254207, 3312354, 3295496, 3270209, 3295496, 3287067, 3296352, 3304781, 3261780, 3286289, 3303925, 3270209, 3271065, 3253351, 3296352, 3244922, 3287923, 3287067, 3244922, 3320783, 3287067, 3304781, 3295496, 3270209, 3244922, 3312354, 3278638, 3270209, 3278638, 3262636, 3245778, 3296352, 3270209, 3253351, 3270209, 3279494, 3278638, 3270209, 3287067, 3261780, 3287067, 3304781, 3312354, 3278638, 3262636, 3278638, 3253351, 3303925, 3287923, 3278638, 3295496, 3278638, 3279494, 3296352, 3270209, 3303925, 3296352, 3278638, 3278638, 3261780, 3295496, 3287923, 3278638, 3245778, 3270209, 3287067, 3295496, 3278638, 3287923, 3278638, 3295496, 3278638, 3304781, 3320783, 3287067, 3261780, 3261780, 3330068, 3271065, 3245778, 3295496, 3304781, 3295496, 3261002, 3338497, 3295496, 3262636, 3245778, 3253351, 3270209, 3254207, 3287067, 3303925, 3236493, 3287923, 3312354, 3262636, 3295496, 3270209, 3313210, 3321639, 3303925, 3303925, 3278638, 3312354, 3270209, 3303925, 3295496, 3237349, 3295496, 3278638, 3303925, 3287067, 3329212, 3269431, 3296352, 3303925, 3295496, 3287067, 3304781, 3253351, 3303925, 3287923, 3253351, 3287067, 3295496, 3287067, 3279494 ],
        "0" : [ 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 52331, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 52331, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 52331, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 52331, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 57565, 57565, 52331, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 52331, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226593045,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 26152,
        "IOBytes" : {
          "Total" : 14428802413,
          "Details" : {
            "IR" : 13341837728,
            "IW" : 0,
            "SR" : 859723791,
            "SW" : 227240894
          }
        }
      }
    },
    "10" : {
      "LQP" : {
        "operators" : {
          "0" : {
            "sign" : 391625485,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 160,
            "rowCount" : 2,
            "isRuntime" : true,
            "predicate" : " (unknown) Sort Arguments: [o_year#76 ASC NULLS FIRST], true "
          },
          "1" : {
            "sign" : 2124527511,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 160,
            "rowCount" : 2,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [o_year#76], [o_year#76, (sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END) / sum(volume#77)) AS mkt_share#79], HashAggregate(keys=[o_year#76], functions=[sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END), sum(volume#77)]) "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "LogicalQueryStage",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [o_year#76 ASC NULLS FIRST], true\n+- LogicalQueryStage Aggregate [o_year#76], [o_year#76, (sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END) / sum(volume#77)) AS mkt_share#79], HashAggregate(keys=[o_year#76], functions=[sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END), sum(volume#77)])\n"
      },
      "IM" : {
        "inputSizeInBytes" : 160,
        "inputRowCount" : 2
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226618524,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 673,
        "IOBytes" : {
          "Total" : 736,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 580,
            "SW" : 156
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1294784956,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1458387968,
            "rowCount" : 45574624,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [o_orderkey#36L, o_custkey#37L, o_orderdate#44], ShuffleQueryStage 2 "
          },
          "8" : {
            "sign" : -28375415,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24023316680000000,
            "rowCount" : 600582917000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_orderkey#20L, l_extendedprice#25, l_discount#26, s_nationkey#16L] "
          },
          "4" : {
            "sign" : -1893415167,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 38319876872337491200000000,
            "rowCount" : 684283515577455200000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#25, l_discount#26, o_custkey#37L, o_orderdate#44, n_name#81] "
          },
          "11" : {
            "sign" : -1953890044,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_suppkey#13L, s_nationkey#16L], ShuffleQueryStage 1 "
          },
          "9" : {
            "sign" : -1094250919,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 33632643352000000,
            "rowCount" : 600582917000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#13L = l_suppkey#22L) "
          },
          "13" : {
            "sign" : -35150934,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048776,
            "rowCount" : 25,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#80L, n_name#81], BroadcastQueryStage 3 "
          },
          "5" : {
            "sign" : -1707933076,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 49268413121576774400000000,
            "rowCount" : 684283515577455200000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#16L = n_nationkey#80L) "
          },
          "10" : {
            "sign" : 1696157969,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 24023316680,
            "rowCount" : 600582917,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_orderkey#20L, l_suppkey#22L, l_extendedprice#25, l_discount#26], ShuffleQueryStage 6 "
          },
          "6" : {
            "sign" : 106781011,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1204338987416321152000000,
            "rowCount" : 27371340623098208000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#25, l_discount#26, s_nationkey#16L, o_custkey#37L, o_orderdate#44] "
          },
          "1" : {
            "sign" : 1014521910,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 57445729778028292601577600000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [o_year#76], [o_year#76, (sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END) / sum(volume#77)) AS mkt_share#79] "
          },
          "14" : {
            "sign" : -1172897552,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 47971536,
            "rowCount" : 2998221,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_custkey#45L], ShuffleQueryStage 7 "
          },
          "0" : {
            "sign" : 1601684296,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 57445729778028292601577600000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [o_year#76 ASC NULLS FIRST], true "
          },
          "2" : {
            "sign" : -2098010276,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 98478393905191358745561600000000,
            "rowCount" : 2051633206358153307199200000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [year(o_orderdate#44) AS o_year#76, (l_extendedprice#25 * (1 - l_discount#26)) AS volume#77, n_name#81 AS nation#78] "
          },
          "7" : {
            "sign" : -2121098816,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1642280437385892480000000,
            "rowCount" : 27371340623098208000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (l_orderkey#20L = o_orderkey#36L) "
          },
          "3" : {
            "sign" : 1040609047,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 131304525206921811660748800000000,
            "rowCount" : 2051633206358153307199200000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (o_custkey#37L = c_custkey#45L) "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [o_year#76 ASC NULLS FIRST], true\n+- Aggregate [o_year#76], [o_year#76, (sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END) / sum(volume#77)) AS mkt_share#79]\n   +- Project [year(o_orderdate#44) AS o_year#76, (l_extendedprice#25 * (1 - l_discount#26)) AS volume#77, n_name#81 AS nation#78]\n      +- Join Inner, (o_custkey#37L = c_custkey#45L)\n         :- Project [l_extendedprice#25, l_discount#26, o_custkey#37L, o_orderdate#44, n_name#81]\n         :  +- Join Inner, (s_nationkey#16L = n_nationkey#80L)\n         :     :- Project [l_extendedprice#25, l_discount#26, s_nationkey#16L, o_custkey#37L, o_orderdate#44]\n         :     :  +- Join Inner, (l_orderkey#20L = o_orderkey#36L)\n         :     :     :- Project [l_orderkey#20L, l_extendedprice#25, l_discount#26, s_nationkey#16L]\n         :     :     :  +- Join Inner, (s_suppkey#13L = l_suppkey#22L)\n         :     :     :     :- LogicalQueryStage Project [l_orderkey#20L, l_suppkey#22L, l_extendedprice#25, l_discount#26], ShuffleQueryStage 6\n         :     :     :     +- LogicalQueryStage Project [s_suppkey#13L, s_nationkey#16L], ShuffleQueryStage 1\n         :     :     +- LogicalQueryStage Project [o_orderkey#36L, o_custkey#37L, o_orderdate#44], ShuffleQueryStage 2\n         :     +- LogicalQueryStage Project [n_nationkey#80L, n_name#81], BroadcastQueryStage 3\n         +- LogicalQueryStage Project [c_custkey#45L], ShuffleQueryStage 7\n"
      },
      "IM" : {
        "inputSizeInBytes" : 25554724960,
        "inputRowCount" : 650155787
      },
      "PD" : {
        "1" : [ 3253351, 3287067, 3287067, 3261780, 3261780, 3278638, 3270209, 3237349, 3278638, 3287067, 3303925, 3287067, 3312354, 3296352, 3279494, 3295496, 3261780, 3279494, 3303925, 3295496, 3303925, 3296352, 3270209, 3278638, 3278638, 3303925, 3254207, 3303925, 3278638, 3279494, 3313210, 3295496, 3303147, 3271065, 3279494, 3303925, 3279494, 3295496, 3287067, 3278638, 3313210, 3261780, 3303925, 3294718, 3253351, 3270209, 3320783, 3278638, 3295496, 3304781, 3279494, 3303925, 3321639, 3261780, 3271065, 3303925, 3271065, 3321639, 3287923, 3287067, 3261780, 3287923, 3303925, 3312354, 3278638, 3312354, 3287067, 3287067, 3295496, 3287067, 3245778, 3287067, 3254207, 3312354, 3295496, 3270209, 3295496, 3287067, 3296352, 3304781, 3261780, 3286289, 3303925, 3270209, 3271065, 3253351, 3296352, 3244922, 3287923, 3287067, 3244922, 3320783, 3287067, 3304781, 3295496, 3270209, 3244922, 3312354, 3278638, 3270209, 3278638, 3262636, 3245778, 3296352, 3270209, 3253351, 3270209, 3279494, 3278638, 3270209, 3287067, 3261780, 3287067, 3304781, 3312354, 3278638, 3262636, 3278638, 3253351, 3303925, 3287923, 3278638, 3295496, 3278638, 3279494, 3296352, 3270209, 3303925, 3296352, 3278638, 3278638, 3261780, 3295496, 3287923, 3278638, 3245778, 3270209, 3287067, 3295496, 3278638, 3287923, 3278638, 3295496, 3278638, 3304781, 3320783, 3287067, 3261780, 3261780, 3330068, 3271065, 3245778, 3295496, 3304781, 3295496, 3261002, 3338497, 3295496, 3262636, 3245778, 3253351, 3270209, 3254207, 3287067, 3303925, 3236493, 3287923, 3312354, 3262636, 3295496, 3270209, 3313210, 3321639, 3303925, 3303925, 3278638, 3312354, 3270209, 3303925, 3295496, 3237349, 3295496, 3278638, 3303925, 3287067, 3329212, 3269431, 3296352, 3303925, 3295496, 3287067, 3304781, 3253351, 3303925, 3287923, 3253351, 3287067, 3295496, 3287067, 3279494 ],
        "3" : [ 83304, 84004, 82448, 82448, 81670, 82526, 81670, 85879, 83304, 82448, 83226, 84082, 84082, 82448, 84860, 80892, 81670, 82448, 82448, 83226, 84004, 83226, 83226, 82448, 81670, 82526, 84160, 80892, 84245, 82448, 81670, 82448, 81670, 81670, 84238, 83226, 83226, 82448, 83226, 81670, 85023, 84245, 84860, 84082, 82448, 82448, 83226, 84004, 83226, 83226, 85023, 82448, 80114, 82448, 81670, 83226, 84082, 81670, 84938, 83226, 81670, 83226, 82448, 82526, 82448, 85716, 83226, 85560, 81670, 83226, 82448, 84160, 82448, 84004, 83226, 83226, 84938, 82526, 81670, 83226, 83226, 81670, 82448, 84082, 81670, 81670, 81670, 81748, 82448, 82448, 82448, 81670, 84004, 83304, 83226, 86657, 84860, 82448, 82526, 84082, 84082, 82448, 84004, 81670, 84082, 83304, 80892, 84082, 82448, 82448, 81670, 81670, 84004, 83226, 84082, 81670, 83226, 84860, 86494, 83304, 83304, 83467, 81670, 82526, 84004, 83304, 83304, 83226, 84004, 83304, 84004, 83304, 81741, 82448, 82448, 81670, 82448, 81670, 82448, 83304, 83226, 83304, 81741, 82448, 85023, 82448, 82448, 81670, 82448, 83304, 85023, 82526, 81670, 82448, 85101, 81670, 82448, 83226, 83304, 83304, 83226, 82448, 84245, 81670, 82448, 82448, 81670, 83226, 82448, 81670, 82448, 82448, 81670, 83226, 84004, 82448, 81670, 84082, 82526, 83304, 81670, 80963, 83304, 84004, 81670, 81670, 83382, 82448, 84860, 84004, 82448, 83304, 82526, 83226, 81670, 82597, 81670, 82448, 84004, 82448 ],
        "0" : [ 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 52331, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 52331, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 52331, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 52331, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 57565, 57565, 52331, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 52331, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226606578,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 12619,
        "IOBytes" : {
          "Total" : 973107132,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 859723791,
            "SW" : 113383341
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 867191651,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2091504,
            "rowCount" : 130719,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_partkey#4L], BroadcastQueryStage 0 "
          },
          "8" : {
            "sign" : -1165075842,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24024420680,
            "rowCount" : 600610517,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_orderkey#20L, l_extendedprice#25, l_discount#26, s_nationkey#16L] "
          },
          "19" : {
            "sign" : -1099913973,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 285510576,
            "rowCount" : 17844411,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_custkey#45L] "
          },
          "23" : {
            "sign" : -1664105579,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 600,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_nationkey#53L, n_regionkey#55L] "
          },
          "4" : {
            "sign" : -1806515472,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 841975710800,
            "rowCount" : 15035280550,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#25, l_discount#26, o_custkey#37L, o_orderdate#44, n_name#81] "
          },
          "15" : {
            "sign" : 559913504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 111607049772,
            "rowCount" : 600037902,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_linenumber#23, l_quantity#24, l_extendedprice#25, l_discount#26, l_tax#27, l_returnflag#28, l_linestatus#29, l_commitdate#30, l_receiptdate#31, l_shipinstruct#32, l_shipmode#33, l_comment#34, l_shipdate#35], `spark_catalog`.`tpch_100`.`lineitem`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "11" : {
            "sign" : -1205556787,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 33632643352,
            "rowCount" : 600582917,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (p_partkey#4L = l_partkey#21L) "
          },
          "9" : {
            "sign" : -902830090,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 33634188952,
            "rowCount" : 600610517,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#13L = l_suppkey#22L) "
          },
          "22" : {
            "sign" : -1180107610,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 800,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (n_regionkey#55L = r_regionkey#57L) "
          },
          "26" : {
            "sign" : -1654525026,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [r_regionkey#57L], BroadcastQueryStage 4 "
          },
          "13" : {
            "sign" : -394941954,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 28801819296,
            "rowCount" : 600037902,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_extendedprice#25, l_discount#26] "
          },
          "24" : {
            "sign" : 916787015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3275,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(n_nationkey#53L) AND isnotnull(n_regionkey#55L)) "
          },
          "16" : {
            "sign" : -1953890044,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_suppkey#13L, s_nationkey#16L], ShuffleQueryStage 1 "
          },
          "5" : {
            "sign" : -357389391,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1082540199600,
            "rowCount" : 15035280550,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#16L = n_nationkey#80L) "
          },
          "10" : {
            "sign" : -1477224248,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24023316680,
            "rowCount" : 600582917,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_orderkey#20L, l_suppkey#22L, l_extendedprice#25, l_discount#26] "
          },
          "21" : {
            "sign" : -1996783059,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 400,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_nationkey#53L] "
          },
          "6" : {
            "sign" : -1975390976,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 26462093768,
            "rowCount" : 601411222,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#25, l_discount#26, s_nationkey#16L, o_custkey#37L, o_orderdate#44] "
          },
          "1" : {
            "sign" : 1179590980,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 4212859504,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [o_year#76], [o_year#76, (sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END) / sum(volume#77)) AS mkt_share#79] "
          },
          "17" : {
            "sign" : 1294784956,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1273595820,
            "rowCount" : 45485565,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [o_orderkey#36L, o_custkey#37L, o_orderdate#44], ShuffleQueryStage 2 "
          },
          "25" : {
            "sign" : -284378772,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3275,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [n_nationkey#53L, n_name#54, n_regionkey#55L, n_comment#56], `spark_catalog`.`tpch_100`.`nation`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "14" : {
            "sign" : 47884328,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 111607049772,
            "rowCount" : 600037902,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(l_partkey#21L) AND (isnotnull(l_suppkey#22L) AND isnotnull(l_orderkey#20L))) "
          },
          "0" : {
            "sign" : 254467428,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 4212859504,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [o_year#76 ASC NULLS FIRST], true "
          },
          "20" : {
            "sign" : 1612467882,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 571021152,
            "rowCount" : 17844411,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_nationkey#48L = n_nationkey#53L) "
          },
          "27" : {
            "sign" : 413238535,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 360000000,
            "rowCount" : 15000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_custkey#45L, c_nationkey#48L] "
          },
          "2" : {
            "sign" : -808107120,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 7222044864,
            "rowCount" : 150459268,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [year(o_orderdate#44) AS o_year#76, (l_extendedprice#25 * (1 - l_discount#26)) AS volume#77, n_name#81 AS nation#78] "
          },
          "18" : {
            "sign" : -35150934,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048776,
            "rowCount" : 25,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#80L, n_name#81], BroadcastQueryStage 3 "
          },
          "7" : {
            "sign" : 2052764729,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 36084673320,
            "rowCount" : 601411222,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (l_orderkey#20L = o_orderkey#36L) "
          },
          "29" : {
            "sign" : 1833644048,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3495000000,
            "rowCount" : 15000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_custkey#45L, c_name#46, c_address#47, c_nationkey#48L, c_phone#49, c_acctbal#50, c_comment#51, c_mktsegment#52], `spark_catalog`.`tpch_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : -559935771,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 9629393152,
            "rowCount" : 150459268,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (o_custkey#37L = c_custkey#45L) "
          },
          "28" : {
            "sign" : -970090419,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3495000000,
            "rowCount" : 15000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_custkey#45L) AND isnotnull(c_nationkey#48L)) "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalRelation",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "LogicalRelation",
          "toId" : 24,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Filter",
          "toId" : 23,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Project",
          "toId" : 22,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "LogicalQueryStage",
          "toId" : 22,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Join",
          "toId" : 21,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Project",
          "toId" : 20,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalRelation",
          "toId" : 28,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Filter",
          "toId" : 27,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Project",
          "toId" : 20,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Join",
          "toId" : 19,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [o_year#76 ASC NULLS FIRST], true\n+- Aggregate [o_year#76], [o_year#76, (sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END) / sum(volume#77)) AS mkt_share#79]\n   +- Project [year(o_orderdate#44) AS o_year#76, (l_extendedprice#25 * (1 - l_discount#26)) AS volume#77, n_name#81 AS nation#78]\n      +- Join Inner, (o_custkey#37L = c_custkey#45L)\n         :- Project [l_extendedprice#25, l_discount#26, o_custkey#37L, o_orderdate#44, n_name#81]\n         :  +- Join Inner, (s_nationkey#16L = n_nationkey#80L)\n         :     :- Project [l_extendedprice#25, l_discount#26, s_nationkey#16L, o_custkey#37L, o_orderdate#44]\n         :     :  +- Join Inner, (l_orderkey#20L = o_orderkey#36L)\n         :     :     :- Project [l_orderkey#20L, l_extendedprice#25, l_discount#26, s_nationkey#16L]\n         :     :     :  +- Join Inner, (s_suppkey#13L = l_suppkey#22L)\n         :     :     :     :- Project [l_orderkey#20L, l_suppkey#22L, l_extendedprice#25, l_discount#26]\n         :     :     :     :  +- Join Inner, (p_partkey#4L = l_partkey#21L)\n         :     :     :     :     :- LogicalQueryStage Project [p_partkey#4L], BroadcastQueryStage 0\n         :     :     :     :     +- Project [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_extendedprice#25, l_discount#26]\n         :     :     :     :        +- Filter (isnotnull(l_partkey#21L) AND (isnotnull(l_suppkey#22L) AND isnotnull(l_orderkey#20L)))\n         :     :     :     :           +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#20L,l_partkey#21L,l_suppkey#22L,l_linenumber#23,l_quantity#24,l_extendedprice#25,l_discount#26,l_tax#27,l_returnflag#28,l_linestatus#29,l_commitdate#30,l_receiptdate#31,l_shipinstruct#32,l_shipmode#33,l_comment#34,l_shipdate#35] parquet\n         :     :     :     +- LogicalQueryStage Project [s_suppkey#13L, s_nationkey#16L], ShuffleQueryStage 1\n         :     :     +- LogicalQueryStage Project [o_orderkey#36L, o_custkey#37L, o_orderdate#44], ShuffleQueryStage 2\n         :     +- LogicalQueryStage Project [n_nationkey#80L, n_name#81], BroadcastQueryStage 3\n         +- Project [c_custkey#45L]\n            +- Join Inner, (c_nationkey#48L = n_nationkey#53L)\n               :- Project [n_nationkey#53L]\n               :  +- Join Inner, (n_regionkey#55L = r_regionkey#57L)\n               :     :- Project [n_nationkey#53L, n_regionkey#55L]\n               :     :  +- Filter (isnotnull(n_nationkey#53L) AND isnotnull(n_regionkey#55L))\n               :     :     +- Relation spark_catalog.tpch_100.nation[n_nationkey#53L,n_name#54,n_regionkey#55L,n_comment#56] parquet\n               :     +- LogicalQueryStage Project [r_regionkey#57L], BroadcastQueryStage 4\n               +- Project [c_custkey#45L, c_nationkey#48L]\n                  +- Filter (isnotnull(c_custkey#45L) AND isnotnull(c_nationkey#48L))\n                     +- Relation spark_catalog.tpch_100.customer[c_custkey#45L,c_name#46,c_address#47,c_nationkey#48L,c_phone#49,c_acctbal#50,c_comment#51,c_mktsegment#52] parquet\n"
      },
      "IM" : {
        "inputSizeInBytes" : 116402789163,
        "inputRowCount" : 661654237
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 15,
        "FinishedTasksTotalTimeInMs" : 22886.0,
        "FinishedTasksDistributionInMs" : [ 1369.0, 1428.0, 1520.0, 1639.0, 1666.0 ]
      },
      "StartTimeInMs" : 1702226585554,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 33643,
        "IOBytes" : {
          "Total" : 15712800658,
          "Details" : {
            "IR" : 13993353288,
            "IW" : 0,
            "SR" : 859723791,
            "SW" : 859723579
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 867191651,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2091504,
            "rowCount" : 130719,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_partkey#4L], BroadcastQueryStage 0 "
          },
          "8" : {
            "sign" : -1165075842,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24024420680,
            "rowCount" : 600610517,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_orderkey#20L, l_extendedprice#25, l_discount#26, s_nationkey#16L] "
          },
          "19" : {
            "sign" : -1099913973,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 285510576,
            "rowCount" : 17844411,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_custkey#45L] "
          },
          "23" : {
            "sign" : -1664105579,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 600,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_nationkey#53L, n_regionkey#55L] "
          },
          "4" : {
            "sign" : -1806515472,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 841975710800,
            "rowCount" : 15035280550,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#25, l_discount#26, o_custkey#37L, o_orderdate#44, n_name#81] "
          },
          "15" : {
            "sign" : 559913504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 111607049772,
            "rowCount" : 600037902,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_linenumber#23, l_quantity#24, l_extendedprice#25, l_discount#26, l_tax#27, l_returnflag#28, l_linestatus#29, l_commitdate#30, l_receiptdate#31, l_shipinstruct#32, l_shipmode#33, l_comment#34, l_shipdate#35], `spark_catalog`.`tpch_100`.`lineitem`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "11" : {
            "sign" : -1205556787,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 33632643352,
            "rowCount" : 600582917,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (p_partkey#4L = l_partkey#21L) "
          },
          "9" : {
            "sign" : -902830090,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 33634188952,
            "rowCount" : 600610517,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#13L = l_suppkey#22L) "
          },
          "22" : {
            "sign" : -1180107610,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 800,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (n_regionkey#55L = r_regionkey#57L) "
          },
          "26" : {
            "sign" : -1654525026,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048584,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [r_regionkey#57L], BroadcastQueryStage 4 "
          },
          "13" : {
            "sign" : -394941954,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 28801819296,
            "rowCount" : 600037902,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_extendedprice#25, l_discount#26] "
          },
          "24" : {
            "sign" : 916787015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3275,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(n_nationkey#53L) AND isnotnull(n_regionkey#55L)) "
          },
          "16" : {
            "sign" : -1953890044,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_suppkey#13L, s_nationkey#16L], ShuffleQueryStage 1 "
          },
          "5" : {
            "sign" : -357389391,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1082540199600,
            "rowCount" : 15035280550,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#16L = n_nationkey#80L) "
          },
          "10" : {
            "sign" : -1477224248,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24023316680,
            "rowCount" : 600582917,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_orderkey#20L, l_suppkey#22L, l_extendedprice#25, l_discount#26] "
          },
          "21" : {
            "sign" : -1996783059,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 400,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_nationkey#53L] "
          },
          "6" : {
            "sign" : -1975390976,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 26462093768,
            "rowCount" : 601411222,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#25, l_discount#26, s_nationkey#16L, o_custkey#37L, o_orderdate#44] "
          },
          "1" : {
            "sign" : 1179590980,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 4212859504,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [o_year#76], [o_year#76, (sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END) / sum(volume#77)) AS mkt_share#79] "
          },
          "17" : {
            "sign" : 1294784956,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1273595820,
            "rowCount" : 45485565,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [o_orderkey#36L, o_custkey#37L, o_orderdate#44], ShuffleQueryStage 2 "
          },
          "25" : {
            "sign" : -284378772,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3275,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [n_nationkey#53L, n_name#54, n_regionkey#55L, n_comment#56], `spark_catalog`.`tpch_100`.`nation`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "14" : {
            "sign" : 47884328,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 111607049772,
            "rowCount" : 600037902,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(l_partkey#21L) AND (isnotnull(l_suppkey#22L) AND isnotnull(l_orderkey#20L))) "
          },
          "0" : {
            "sign" : 254467428,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 4212859504,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [o_year#76 ASC NULLS FIRST], true "
          },
          "20" : {
            "sign" : 1612467882,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 571021152,
            "rowCount" : 17844411,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_nationkey#48L = n_nationkey#53L) "
          },
          "27" : {
            "sign" : 413238535,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 360000000,
            "rowCount" : 15000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_custkey#45L, c_nationkey#48L] "
          },
          "2" : {
            "sign" : -808107120,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 7222044864,
            "rowCount" : 150459268,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [year(o_orderdate#44) AS o_year#76, (l_extendedprice#25 * (1 - l_discount#26)) AS volume#77, n_name#81 AS nation#78] "
          },
          "18" : {
            "sign" : -35150934,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048776,
            "rowCount" : 25,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#80L, n_name#81], BroadcastQueryStage 3 "
          },
          "7" : {
            "sign" : 2052764729,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 36084673320,
            "rowCount" : 601411222,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (l_orderkey#20L = o_orderkey#36L) "
          },
          "29" : {
            "sign" : 1833644048,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3495000000,
            "rowCount" : 15000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_custkey#45L, c_name#46, c_address#47, c_nationkey#48L, c_phone#49, c_acctbal#50, c_comment#51, c_mktsegment#52], `spark_catalog`.`tpch_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "3" : {
            "sign" : -559935771,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 9629393152,
            "rowCount" : 150459268,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (o_custkey#37L = c_custkey#45L) "
          },
          "28" : {
            "sign" : -970090419,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3495000000,
            "rowCount" : 15000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_custkey#45L) AND isnotnull(c_nationkey#48L)) "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalRelation",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "LogicalRelation",
          "toId" : 24,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "Filter",
          "toId" : 23,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Project",
          "toId" : 22,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "LogicalQueryStage",
          "toId" : 22,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Join",
          "toId" : 21,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "Project",
          "toId" : 20,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "LogicalRelation",
          "toId" : 28,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Filter",
          "toId" : 27,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Project",
          "toId" : 20,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Join",
          "toId" : 19,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [o_year#76 ASC NULLS FIRST], true\n+- Aggregate [o_year#76], [o_year#76, (sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END) / sum(volume#77)) AS mkt_share#79]\n   +- Project [year(o_orderdate#44) AS o_year#76, (l_extendedprice#25 * (1 - l_discount#26)) AS volume#77, n_name#81 AS nation#78]\n      +- Join Inner, (o_custkey#37L = c_custkey#45L)\n         :- Project [l_extendedprice#25, l_discount#26, o_custkey#37L, o_orderdate#44, n_name#81]\n         :  +- Join Inner, (s_nationkey#16L = n_nationkey#80L)\n         :     :- Project [l_extendedprice#25, l_discount#26, s_nationkey#16L, o_custkey#37L, o_orderdate#44]\n         :     :  +- Join Inner, (l_orderkey#20L = o_orderkey#36L)\n         :     :     :- Project [l_orderkey#20L, l_extendedprice#25, l_discount#26, s_nationkey#16L]\n         :     :     :  +- Join Inner, (s_suppkey#13L = l_suppkey#22L)\n         :     :     :     :- Project [l_orderkey#20L, l_suppkey#22L, l_extendedprice#25, l_discount#26]\n         :     :     :     :  +- Join Inner, (p_partkey#4L = l_partkey#21L)\n         :     :     :     :     :- LogicalQueryStage Project [p_partkey#4L], BroadcastQueryStage 0\n         :     :     :     :     +- Project [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_extendedprice#25, l_discount#26]\n         :     :     :     :        +- Filter (isnotnull(l_partkey#21L) AND (isnotnull(l_suppkey#22L) AND isnotnull(l_orderkey#20L)))\n         :     :     :     :           +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#20L,l_partkey#21L,l_suppkey#22L,l_linenumber#23,l_quantity#24,l_extendedprice#25,l_discount#26,l_tax#27,l_returnflag#28,l_linestatus#29,l_commitdate#30,l_receiptdate#31,l_shipinstruct#32,l_shipmode#33,l_comment#34,l_shipdate#35] parquet\n         :     :     :     +- LogicalQueryStage Project [s_suppkey#13L, s_nationkey#16L], ShuffleQueryStage 1\n         :     :     +- LogicalQueryStage Project [o_orderkey#36L, o_custkey#37L, o_orderdate#44], ShuffleQueryStage 2\n         :     +- LogicalQueryStage Project [n_nationkey#80L, n_name#81], BroadcastQueryStage 3\n         +- Project [c_custkey#45L]\n            +- Join Inner, (c_nationkey#48L = n_nationkey#53L)\n               :- Project [n_nationkey#53L]\n               :  +- Join Inner, (n_regionkey#55L = r_regionkey#57L)\n               :     :- Project [n_nationkey#53L, n_regionkey#55L]\n               :     :  +- Filter (isnotnull(n_nationkey#53L) AND isnotnull(n_regionkey#55L))\n               :     :     +- Relation spark_catalog.tpch_100.nation[n_nationkey#53L,n_name#54,n_regionkey#55L,n_comment#56] parquet\n               :     +- LogicalQueryStage Project [r_regionkey#57L], BroadcastQueryStage 4\n               +- Project [c_custkey#45L, c_nationkey#48L]\n                  +- Filter (isnotnull(c_custkey#45L) AND isnotnull(c_nationkey#48L))\n                     +- Relation spark_catalog.tpch_100.customer[c_custkey#45L,c_name#46,c_address#47,c_nationkey#48L,c_phone#49,c_acctbal#50,c_comment#51,c_mktsegment#52] parquet\n"
      },
      "IM" : {
        "inputSizeInBytes" : 116403837731,
        "inputRowCount" : 661654237
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 35,
        "FinishedTasksTotalTimeInMs" : 31510.0,
        "FinishedTasksDistributionInMs" : [ 119.0, 191.0, 760.0, 1502.0, 1666.0 ]
      },
      "StartTimeInMs" : 1702226586009,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 33188,
        "IOBytes" : {
          "Total" : 15712798662,
          "Details" : {
            "IR" : 13993351292,
            "IW" : 0,
            "SR" : 859723791,
            "SW" : 859723579
          }
        }
      }
    },
    "7" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1294784956,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1458387968,
            "rowCount" : 45574624,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [o_orderkey#36L, o_custkey#37L, o_orderdate#44], ShuffleQueryStage 2 "
          },
          "8" : {
            "sign" : -28375415,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 159926600000000,
            "rowCount" : 3998165000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_orderkey#20L, l_extendedprice#25, l_discount#26, s_nationkey#16L] "
          },
          "4" : {
            "sign" : -1893415167,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 255100813190944000000000,
            "rowCount" : 4555371664124000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#25, l_discount#26, o_custkey#37L, o_orderdate#44, n_name#81] "
          },
          "11" : {
            "sign" : -1953890044,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_suppkey#13L, s_nationkey#16L], ShuffleQueryStage 1 "
          },
          "9" : {
            "sign" : -1094250919,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 223897240000000,
            "rowCount" : 3998165000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#13L = l_suppkey#22L) "
          },
          "13" : {
            "sign" : -35150934,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048776,
            "rowCount" : 25,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#80L, n_name#81], BroadcastQueryStage 3 "
          },
          "5" : {
            "sign" : -1707933076,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 327986759816928000000000,
            "rowCount" : 4555371664124000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#16L = n_nationkey#80L) "
          },
          "10" : {
            "sign" : 1696157969,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 159926600,
            "rowCount" : 3998165,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [l_orderkey#20L, l_suppkey#22L, l_extendedprice#25, l_discount#26], ShuffleQueryStage 6 "
          },
          "6" : {
            "sign" : 106781011,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 8017454128858240000000,
            "rowCount" : 182214866564960000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#25, l_discount#26, s_nationkey#16L, o_custkey#37L, o_orderdate#44] "
          },
          "1" : {
            "sign" : 1014521910,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 382424307613082655312000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [o_year#76], [o_year#76, (sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END) / sum(volume#77)) AS mkt_share#79] "
          },
          "14" : {
            "sign" : -1172897552,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 47971536,
            "rowCount" : 2998221,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [c_custkey#45L], ShuffleQueryStage 7 "
          },
          "0" : {
            "sign" : 1601684296,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 382424307613082655312000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [o_year#76 ASC NULLS FIRST], true "
          },
          "2" : {
            "sign" : -2098010276,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 655584527336713123392000000000,
            "rowCount" : 13658010986181523404000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [year(o_orderdate#44) AS o_year#76, (l_extendedprice#25 * (1 - l_discount#26)) AS volume#77, n_name#81 AS nation#78] "
          },
          "7" : {
            "sign" : -2121098816,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 10932891993897600000000,
            "rowCount" : 182214866564960000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (l_orderkey#20L = o_orderkey#36L) "
          },
          "3" : {
            "sign" : 1040609047,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 874112703115617497856000000000,
            "rowCount" : 13658010986181523404000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (o_custkey#37L = c_custkey#45L) "
          }
        },
        "links" : [ {
          "fromId" : 10,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [o_year#76 ASC NULLS FIRST], true\n+- Aggregate [o_year#76], [o_year#76, (sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END) / sum(volume#77)) AS mkt_share#79]\n   +- Project [year(o_orderdate#44) AS o_year#76, (l_extendedprice#25 * (1 - l_discount#26)) AS volume#77, n_name#81 AS nation#78]\n      +- Join Inner, (o_custkey#37L = c_custkey#45L)\n         :- Project [l_extendedprice#25, l_discount#26, o_custkey#37L, o_orderdate#44, n_name#81]\n         :  +- Join Inner, (s_nationkey#16L = n_nationkey#80L)\n         :     :- Project [l_extendedprice#25, l_discount#26, s_nationkey#16L, o_custkey#37L, o_orderdate#44]\n         :     :  +- Join Inner, (l_orderkey#20L = o_orderkey#36L)\n         :     :     :- Project [l_orderkey#20L, l_extendedprice#25, l_discount#26, s_nationkey#16L]\n         :     :     :  +- Join Inner, (s_suppkey#13L = l_suppkey#22L)\n         :     :     :     :- LogicalQueryStage Project [l_orderkey#20L, l_suppkey#22L, l_extendedprice#25, l_discount#26], ShuffleQueryStage 6\n         :     :     :     +- LogicalQueryStage Project [s_suppkey#13L, s_nationkey#16L], ShuffleQueryStage 1\n         :     :     +- LogicalQueryStage Project [o_orderkey#36L, o_custkey#37L, o_orderdate#44], ShuffleQueryStage 2\n         :     +- LogicalQueryStage Project [n_nationkey#80L, n_name#81], BroadcastQueryStage 3\n         +- LogicalQueryStage Project [c_custkey#45L], ShuffleQueryStage 7\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1691334880,
        "inputRowCount" : 53571035
      },
      "PD" : {
        "2" : [ 495360, 498930, 519646, 501874, 528750, 513456, 502854, 517810, 505876, 523004, 517760, 527782, 512642, 502298, 516340, 524910, 514845, 520208, 516965, 558579, 522899, 518380, 509817, 506399, 531585, 517758, 526380, 521670, 507375, 520764, 506127, 506226, 522752, 504152, 504671, 533185, 506219, 515031, 501342, 496777, 509139, 524842, 517032, 522190, 511504, 504659, 513327, 505887, 509180, 525827, 511659, 502137, 515204, 516354, 533983, 527491, 526213, 503791, 500808, 511189, 505093, 509262, 499982, 512165, 516192, 521166, 525011, 509291, 520294, 510653, 518827, 512885, 520142, 517286, 505162, 529688, 523659, 520983, 515219, 499734, 523724, 501274, 517810, 512741, 500398, 515881, 530703, 514011, 500016, 507104, 504748, 512986, 524358, 514246, 501801, 502409, 510677, 512908, 506133, 519417, 532734, 517296, 509221, 513788, 520896, 514234, 499260, 501466, 518090, 527525, 512502, 517146, 503445, 522278, 508003, 517248, 497057, 505185, 519565, 508031, 509844, 505172, 521677, 513519, 556035, 518335, 514156, 520014, 503740, 504171, 489905, 544192, 518325, 519287, 502761, 526403, 541600, 522933, 504160, 509625, 541889, 542202, 506840, 529549, 526390, 512924, 509202, 515770, 511487, 506384, 530995, 534971, 509782, 511932, 492069, 516653, 520584, 505003, 537365, 502718, 507402, 504776, 519063, 517496, 535128, 504452, 495760, 517533, 523243, 516940, 486414, 498880, 508977, 516170, 511768, 502824, 510959, 512760, 503513, 510851, 514423, 507336, 493143, 501382, 482029, 491532, 514347, 506236, 506190, 489787, 517109, 489025, 507723, 554255, 499494, 501992, 520755, 530049, 505011, 523389 ],
        "1" : [ 3253351, 3287067, 3287067, 3261780, 3261780, 3278638, 3270209, 3237349, 3278638, 3287067, 3303925, 3287067, 3312354, 3296352, 3279494, 3295496, 3261780, 3279494, 3303925, 3295496, 3303925, 3296352, 3270209, 3278638, 3278638, 3303925, 3254207, 3303925, 3278638, 3279494, 3313210, 3295496, 3303147, 3271065, 3279494, 3303925, 3279494, 3295496, 3287067, 3278638, 3313210, 3261780, 3303925, 3294718, 3253351, 3270209, 3320783, 3278638, 3295496, 3304781, 3279494, 3303925, 3321639, 3261780, 3271065, 3303925, 3271065, 3321639, 3287923, 3287067, 3261780, 3287923, 3303925, 3312354, 3278638, 3312354, 3287067, 3287067, 3295496, 3287067, 3245778, 3287067, 3254207, 3312354, 3295496, 3270209, 3295496, 3287067, 3296352, 3304781, 3261780, 3286289, 3303925, 3270209, 3271065, 3253351, 3296352, 3244922, 3287923, 3287067, 3244922, 3320783, 3287067, 3304781, 3295496, 3270209, 3244922, 3312354, 3278638, 3270209, 3278638, 3262636, 3245778, 3296352, 3270209, 3253351, 3270209, 3279494, 3278638, 3270209, 3287067, 3261780, 3287067, 3304781, 3312354, 3278638, 3262636, 3278638, 3253351, 3303925, 3287923, 3278638, 3295496, 3278638, 3279494, 3296352, 3270209, 3303925, 3296352, 3278638, 3278638, 3261780, 3295496, 3287923, 3278638, 3245778, 3270209, 3287067, 3295496, 3278638, 3287923, 3278638, 3295496, 3278638, 3304781, 3320783, 3287067, 3261780, 3261780, 3330068, 3271065, 3245778, 3295496, 3304781, 3295496, 3261002, 3338497, 3295496, 3262636, 3245778, 3253351, 3270209, 3254207, 3287067, 3303925, 3236493, 3287923, 3312354, 3262636, 3295496, 3270209, 3313210, 3321639, 3303925, 3303925, 3278638, 3312354, 3270209, 3303925, 3295496, 3237349, 3295496, 3278638, 3303925, 3287067, 3329212, 3269431, 3296352, 3303925, 3295496, 3287067, 3304781, 3253351, 3303925, 3287923, 3253351, 3287067, 3295496, 3287067, 3279494 ],
        "3" : [ 83304, 84004, 82448, 82448, 81670, 82526, 81670, 85879, 83304, 82448, 83226, 84082, 84082, 82448, 84860, 80892, 81670, 82448, 82448, 83226, 84004, 83226, 83226, 82448, 81670, 82526, 84160, 80892, 84245, 82448, 81670, 82448, 81670, 81670, 84238, 83226, 83226, 82448, 83226, 81670, 85023, 84245, 84860, 84082, 82448, 82448, 83226, 84004, 83226, 83226, 85023, 82448, 80114, 82448, 81670, 83226, 84082, 81670, 84938, 83226, 81670, 83226, 82448, 82526, 82448, 85716, 83226, 85560, 81670, 83226, 82448, 84160, 82448, 84004, 83226, 83226, 84938, 82526, 81670, 83226, 83226, 81670, 82448, 84082, 81670, 81670, 81670, 81748, 82448, 82448, 82448, 81670, 84004, 83304, 83226, 86657, 84860, 82448, 82526, 84082, 84082, 82448, 84004, 81670, 84082, 83304, 80892, 84082, 82448, 82448, 81670, 81670, 84004, 83226, 84082, 81670, 83226, 84860, 86494, 83304, 83304, 83467, 81670, 82526, 84004, 83304, 83304, 83226, 84004, 83304, 84004, 83304, 81741, 82448, 82448, 81670, 82448, 81670, 82448, 83304, 83226, 83304, 81741, 82448, 85023, 82448, 82448, 81670, 82448, 83304, 85023, 82526, 81670, 82448, 85101, 81670, 82448, 83226, 83304, 83304, 83226, 82448, 84245, 81670, 82448, 82448, 81670, 83226, 82448, 81670, 82448, 82448, 81670, 83226, 84004, 82448, 81670, 84082, 82526, 83304, 81670, 80963, 83304, 84004, 81670, 81670, 83382, 82448, 84860, 84004, 82448, 83304, 82526, 83226, 81670, 82597, 81670, 82448, 84004, 82448 ],
        "0" : [ 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 52331, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 52331, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 52331, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 52331, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 57565, 57565, 52331, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 52331, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226606594,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 12603,
        "IOBytes" : {
          "Total" : 973107132,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 859723791,
            "SW" : 113383341
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 867191651,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2091504,
            "rowCount" : 130719,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_partkey#4L], BroadcastQueryStage 0 "
          },
          "8" : {
            "sign" : -1165075842,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24023316680000000,
            "rowCount" : 600582917000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_orderkey#20L, l_extendedprice#25, l_discount#26, s_nationkey#16L] "
          },
          "19" : {
            "sign" : -1194773712,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 285510576,
            "rowCount" : 17844411,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_custkey#45L] "
          },
          "23" : {
            "sign" : -970090419,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3495000000,
            "rowCount" : 15000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_custkey#45L) AND isnotnull(c_nationkey#48L)) "
          },
          "4" : {
            "sign" : -1806515472,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 841975710800,
            "rowCount" : 15035280550,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#25, l_discount#26, o_custkey#37L, o_orderdate#44, n_name#81] "
          },
          "15" : {
            "sign" : 559913504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 111607049772,
            "rowCount" : 600037902,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_linenumber#23, l_quantity#24, l_extendedprice#25, l_discount#26, l_tax#27, l_returnflag#28, l_linestatus#29, l_commitdate#30, l_receiptdate#31, l_shipinstruct#32, l_shipmode#33, l_comment#34, l_shipdate#35], `spark_catalog`.`tpch_100`.`lineitem`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "11" : {
            "sign" : -1205556787,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 33632643352,
            "rowCount" : 600582917,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (p_partkey#4L = l_partkey#21L) "
          },
          "9" : {
            "sign" : -902830090,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 33632643352000000,
            "rowCount" : 600582917000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#13L = l_suppkey#22L) "
          },
          "22" : {
            "sign" : 413238535,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 360000000,
            "rowCount" : 15000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_custkey#45L, c_nationkey#48L] "
          },
          "13" : {
            "sign" : -394941954,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 28801819296,
            "rowCount" : 600037902,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_extendedprice#25, l_discount#26] "
          },
          "24" : {
            "sign" : 1833644048,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3495000000,
            "rowCount" : 15000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_custkey#45L, c_name#46, c_address#47, c_nationkey#48L, c_phone#49, c_acctbal#50, c_comment#51, c_mktsegment#52], `spark_catalog`.`tpch_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "16" : {
            "sign" : -1953890044,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_suppkey#13L, s_nationkey#16L], ShuffleQueryStage 1 "
          },
          "5" : {
            "sign" : -357389391,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1082540199600,
            "rowCount" : 15035280550,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#16L = n_nationkey#80L) "
          },
          "10" : {
            "sign" : -1477224248,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24023316680,
            "rowCount" : 600582917,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_orderkey#20L, l_suppkey#22L, l_extendedprice#25, l_discount#26] "
          },
          "21" : {
            "sign" : 1861355920,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 400,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#53L], BroadcastQueryStage 5 "
          },
          "6" : {
            "sign" : -1975390976,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 26462093768,
            "rowCount" : 601411222,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#25, l_discount#26, s_nationkey#16L, o_custkey#37L, o_orderdate#44] "
          },
          "1" : {
            "sign" : 1250164797,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 4212859504,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [o_year#76], [o_year#76, (sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END) / sum(volume#77)) AS mkt_share#79] "
          },
          "17" : {
            "sign" : 1294784956,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1273595820,
            "rowCount" : 45485565,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [o_orderkey#36L, o_custkey#37L, o_orderdate#44], ShuffleQueryStage 2 "
          },
          "14" : {
            "sign" : 47884328,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 111607049772,
            "rowCount" : 600037902,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(l_partkey#21L) AND (isnotnull(l_suppkey#22L) AND isnotnull(l_orderkey#20L))) "
          },
          "0" : {
            "sign" : -1420018889,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 4212859504,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [o_year#76 ASC NULLS FIRST], true "
          },
          "20" : {
            "sign" : 816741027,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 571021152,
            "rowCount" : 17844411,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_nationkey#48L = n_nationkey#53L) "
          },
          "2" : {
            "sign" : -719448885,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 7222044864,
            "rowCount" : 150459268,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [year(o_orderdate#44) AS o_year#76, (l_extendedprice#25 * (1 - l_discount#26)) AS volume#77, n_name#81 AS nation#78] "
          },
          "18" : {
            "sign" : -35150934,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048776,
            "rowCount" : 25,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#80L, n_name#81], BroadcastQueryStage 3 "
          },
          "7" : {
            "sign" : 2052764729,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 36084673320,
            "rowCount" : 601411222,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (l_orderkey#20L = o_orderkey#36L) "
          },
          "3" : {
            "sign" : 374078366,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 9629393152,
            "rowCount" : 150459268,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (o_custkey#37L = c_custkey#45L) "
          }
        },
        "links" : [ {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalRelation",
          "toId" : 14,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Filter",
          "toId" : 13,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Join",
          "toId" : 10,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Project",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 9,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "Join",
          "toId" : 8,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Project",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 7,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Join",
          "toId" : 6,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Project",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "LogicalQueryStage",
          "toId" : 5,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Join",
          "toId" : 4,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 20,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalRelation",
          "toId" : 23,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Filter",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 20,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "Join",
          "toId" : 19,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Project",
          "toId" : 3,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Aggregate",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [o_year#76 ASC NULLS FIRST], true\n+- Aggregate [o_year#76], [o_year#76, (sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END) / sum(volume#77)) AS mkt_share#79]\n   +- Project [year(o_orderdate#44) AS o_year#76, (l_extendedprice#25 * (1 - l_discount#26)) AS volume#77, n_name#81 AS nation#78]\n      +- Join Inner, (o_custkey#37L = c_custkey#45L)\n         :- Project [l_extendedprice#25, l_discount#26, o_custkey#37L, o_orderdate#44, n_name#81]\n         :  +- Join Inner, (s_nationkey#16L = n_nationkey#80L)\n         :     :- Project [l_extendedprice#25, l_discount#26, s_nationkey#16L, o_custkey#37L, o_orderdate#44]\n         :     :  +- Join Inner, (l_orderkey#20L = o_orderkey#36L)\n         :     :     :- Project [l_orderkey#20L, l_extendedprice#25, l_discount#26, s_nationkey#16L]\n         :     :     :  +- Join Inner, (s_suppkey#13L = l_suppkey#22L)\n         :     :     :     :- Project [l_orderkey#20L, l_suppkey#22L, l_extendedprice#25, l_discount#26]\n         :     :     :     :  +- Join Inner, (p_partkey#4L = l_partkey#21L)\n         :     :     :     :     :- LogicalQueryStage Project [p_partkey#4L], BroadcastQueryStage 0\n         :     :     :     :     +- Project [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_extendedprice#25, l_discount#26]\n         :     :     :     :        +- Filter (isnotnull(l_partkey#21L) AND (isnotnull(l_suppkey#22L) AND isnotnull(l_orderkey#20L)))\n         :     :     :     :           +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#20L,l_partkey#21L,l_suppkey#22L,l_linenumber#23,l_quantity#24,l_extendedprice#25,l_discount#26,l_tax#27,l_returnflag#28,l_linestatus#29,l_commitdate#30,l_receiptdate#31,l_shipinstruct#32,l_shipmode#33,l_comment#34,l_shipdate#35] parquet\n         :     :     :     +- LogicalQueryStage Project [s_suppkey#13L, s_nationkey#16L], ShuffleQueryStage 1\n         :     :     +- LogicalQueryStage Project [o_orderkey#36L, o_custkey#37L, o_orderdate#44], ShuffleQueryStage 2\n         :     +- LogicalQueryStage Project [n_nationkey#80L, n_name#81], BroadcastQueryStage 3\n         +- Project [c_custkey#45L]\n            +- Join Inner, (c_nationkey#48L = n_nationkey#53L)\n               :- LogicalQueryStage Project [n_nationkey#53L], BroadcastQueryStage 5\n               +- Project [c_custkey#45L, c_nationkey#48L]\n                  +- Filter (isnotnull(c_custkey#45L) AND isnotnull(c_nationkey#48L))\n                     +- Relation spark_catalog.tpch_100.customer[c_custkey#45L,c_name#46,c_address#47,c_nationkey#48L,c_phone#49,c_acctbal#50,c_comment#51,c_mktsegment#52] parquet\n"
      },
      "IM" : {
        "inputSizeInBytes" : 116402786272,
        "inputRowCount" : 661654236
      },
      "PD" : {
        "0" : [ 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 52331, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 52331, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 52331, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 52331, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 57565, 57565, 52331, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 52331, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226586172,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 33025,
        "IOBytes" : {
          "Total" : 15569962128,
          "Details" : {
            "IR" : 13861134065,
            "IW" : 0,
            "SR" : 859723791,
            "SW" : 849104272
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "12" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1798519172,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4212859504,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 4212859504,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [o_year#76 ASC NULLS FIRST], true "
          }
        },
        "links" : [ ],
        "rawPlan" : "Sort [o_year#76 ASC NULLS FIRST], true\n+- Aggregate [o_year#76], [o_year#76, (sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END) / sum(volume#77)) AS mkt_share#79]\n   +- Project [year(o_orderdate#44) AS o_year#76, (l_extendedprice#25 * (1 - l_discount#26)) AS volume#77, n_name#81 AS nation#78]\n      +- Join Inner, (o_custkey#37L = c_custkey#45L)\n         :- Project [l_extendedprice#25, l_discount#26, o_custkey#37L, o_orderdate#44, n_name#81]\n         :  +- Join Inner, (s_nationkey#16L = n_nationkey#80L)\n         :     :- Project [l_extendedprice#25, l_discount#26, s_nationkey#16L, o_custkey#37L, o_orderdate#44]\n         :     :  +- Join Inner, (l_orderkey#20L = o_orderkey#36L)\n         :     :     :- Project [l_orderkey#20L, l_extendedprice#25, l_discount#26, s_nationkey#16L]\n         :     :     :  +- Join Inner, (s_suppkey#13L = l_suppkey#22L)\n         :     :     :     :- Project [l_orderkey#20L, l_suppkey#22L, l_extendedprice#25, l_discount#26]\n         :     :     :     :  +- Join Inner, (p_partkey#4L = l_partkey#21L)\n         :     :     :     :     :- Project [p_partkey#4L]\n         :     :     :     :     :  +- Filter ((isnotnull(p_type#7) AND (p_type#7 = PROMO POLISHED TIN)) AND isnotnull(p_partkey#4L))\n         :     :     :     :     :     +- Relation spark_catalog.tpch_100.part[p_partkey#4L,p_name#5,p_mfgr#6,p_type#7,p_size#8,p_container#9,p_retailprice#10,p_comment#11,p_brand#12] parquet\n         :     :     :     :     +- Project [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_extendedprice#25, l_discount#26]\n         :     :     :     :        +- Filter (isnotnull(l_partkey#21L) AND (isnotnull(l_suppkey#22L) AND isnotnull(l_orderkey#20L)))\n         :     :     :     :           +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#20L,l_partkey#21L,l_suppkey#22L,l_linenumber#23,l_quantity#24,l_extendedprice#25,l_discount#26,l_tax#27,l_returnflag#28,l_linestatus#29,l_commitdate#30,l_receiptdate#31,l_shipinstruct#32,l_shipmode#33,l_comment#34,l_shipdate#35] parquet\n         :     :     :     +- Project [s_suppkey#13L, s_nationkey#16L]\n         :     :     :        +- Filter (isnotnull(s_suppkey#13L) AND isnotnull(s_nationkey#16L))\n         :     :     :           +- Relation spark_catalog.tpch_100.supplier[s_suppkey#13L,s_name#14,s_address#15,s_nationkey#16L,s_phone#17,s_acctbal#18,s_comment#19] parquet\n         :     :     +- Project [o_orderkey#36L, o_custkey#37L, o_orderdate#44]\n         :     :        +- Filter ((((isnotnull(o_orderdate#44) AND (o_orderdate#44 >= 1995-01-01)) AND (o_orderdate#44 <= 1996-12-31)) AND isnotnull(o_orderkey#36L)) AND isnotnull(o_custkey#37L))\n         :     :           +- Relation spark_catalog.tpch_100.orders[o_orderkey#36L,o_custkey#37L,o_orderstatus#38,o_totalprice#39,o_orderpriority#40,o_clerk#41,o_shippriority#42,o_comment#43,o_orderdate#44] parquet\n         :     +- Project [n_nationkey#80L, n_name#81]\n         :        +- Filter isnotnull(n_nationkey#80L)\n         :           +- Relation spark_catalog.tpch_100.nation[n_nationkey#80L,n_name#81,n_regionkey#82L,n_comment#83] parquet\n         +- Project [c_custkey#45L]\n            +- Join Inner, (c_nationkey#48L = n_nationkey#53L)\n               :- Project [n_nationkey#53L]\n               :  +- Join Inner, (n_regionkey#55L = r_regionkey#57L)\n               :     :- Project [n_nationkey#53L, n_regionkey#55L]\n               :     :  +- Filter (isnotnull(n_nationkey#53L) AND isnotnull(n_regionkey#55L))\n               :     :     +- Relation spark_catalog.tpch_100.nation[n_nationkey#53L,n_name#54,n_regionkey#55L,n_comment#56] parquet\n               :     +- Project [r_regionkey#57L]\n               :        +- Filter ((isnotnull(r_name#58) AND (r_name#58 = AFRICA)) AND isnotnull(r_regionkey#57L))\n               :           +- Relation spark_catalog.tpch_100.region[r_regionkey#57L,r_name#58,r_comment#59] parquet\n               +- Project [c_custkey#45L, c_nationkey#48L]\n                  +- Filter (isnotnull(c_custkey#45L) AND isnotnull(c_nationkey#48L))\n                     +- Relation spark_catalog.tpch_100.customer[c_custkey#45L,c_name#46,c_address#47,c_nationkey#48L,c_phone#49,c_acctbal#50,c_comment#51,c_mktsegment#52] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1194915126,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : 4212859504,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [o_year#76, mkt_share#79] Arguments: [o_year#76 ASC NULLS FIRST], true, 0 "
          },
          "1" : {
            "sign" : -483846212,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 80,
            "rowCount" : 2,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [o_year#76, mkt_share#79] Arguments: 11 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "Sort",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Sort [o_year#76 ASC NULLS FIRST], true, 0\n+- ShuffleQueryStage 11\n   +- Exchange rangepartitioning(o_year#76 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [plan_id=1584]\n      +- *(18) HashAggregate(keys=[o_year#76], functions=[sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END), sum(volume#77)], output=[o_year#76, mkt_share#79])\n         +- AQEShuffleRead coalesced\n            +- ShuffleQueryStage 10\n               +- Exchange hashpartitioning(o_year#76, 200), ENSURE_REQUIREMENTS, [plan_id=1542]\n                  +- *(17) HashAggregate(keys=[o_year#76], functions=[partial_sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END), partial_sum(volume#77)], output=[o_year#76, sum#93, isEmpty#94, sum#95, isEmpty#96])\n                     +- *(17) Project [year(o_orderdate#44) AS o_year#76, (l_extendedprice#25 * (1 - l_discount#26)) AS volume#77, n_name#81 AS nation#78]\n                        +- *(17) SortMergeJoin [o_custkey#37L], [c_custkey#45L], Inner\n                           :- *(15) Sort [o_custkey#37L ASC NULLS FIRST], false, 0\n                           :  +- AQEShuffleRead coalesced\n                           :     +- ShuffleQueryStage 9\n                           :        +- Exchange hashpartitioning(o_custkey#37L, 200), ENSURE_REQUIREMENTS, [plan_id=1445]\n                           :           +- *(14) Project [l_extendedprice#25, l_discount#26, o_custkey#37L, o_orderdate#44, n_name#81]\n                           :              +- *(14) BroadcastHashJoin [s_nationkey#16L], [n_nationkey#80L], Inner, BuildRight, false\n                           :                 :- *(14) Project [l_extendedprice#25, l_discount#26, s_nationkey#16L, o_custkey#37L, o_orderdate#44]\n                           :                 :  +- *(14) SortMergeJoin [l_orderkey#20L], [o_orderkey#36L], Inner\n                           :                 :     :- *(12) Sort [l_orderkey#20L ASC NULLS FIRST], false, 0\n                           :                 :     :  +- AQEShuffleRead coalesced\n                           :                 :     :     +- ShuffleQueryStage 8\n                           :                 :     :        +- Exchange hashpartitioning(l_orderkey#20L, 200), ENSURE_REQUIREMENTS, [plan_id=1307]\n                           :                 :     :           +- *(11) Project [l_orderkey#20L, l_extendedprice#25, l_discount#26, s_nationkey#16L]\n                           :                 :     :              +- *(11) SortMergeJoin [l_suppkey#22L], [s_suppkey#13L], Inner\n                           :                 :     :                 :- *(9) Sort [l_suppkey#22L ASC NULLS FIRST], false, 0\n                           :                 :     :                 :  +- AQEShuffleRead coalesced\n                           :                 :     :                 :     +- ShuffleQueryStage 6\n                           :                 :     :                 :        +- Exchange hashpartitioning(l_suppkey#22L, 200), ENSURE_REQUIREMENTS, [plan_id=950]\n                           :                 :     :                 :           +- *(7) Project [l_orderkey#20L, l_suppkey#22L, l_extendedprice#25, l_discount#26]\n                           :                 :     :                 :              +- *(7) BroadcastHashJoin [p_partkey#4L], [l_partkey#21L], Inner, BuildLeft, false\n                           :                 :     :                 :                 :- BroadcastQueryStage 0\n                           :                 :     :                 :                 :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=299]\n                           :                 :     :                 :                 :     +- *(1) Project [p_partkey#4L]\n                           :                 :     :                 :                 :        +- *(1) Filter ((isnotnull(p_type#7) AND (p_type#7 = PROMO POLISHED TIN)) AND isnotnull(p_partkey#4L))\n                           :                 :     :                 :                 :           +- *(1) ColumnarToRow\n                           :                 :     :                 :                 :              +- FileScan parquet spark_catalog.tpch_100.part[p_partkey#4L,p_type#7,p_brand#12] Batched: true, DataFilters: [isnotnull(p_type#7), (p_type#7 = PROMO POLISHED TIN), isnotnull(p_partkey#4L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/part], PartitionFilters: [], PushedFilters: [IsNotNull(p_type), EqualTo(p_type,PROMO POLISHED TIN), IsNotNull(p_partkey)], ReadSchema: struct<p_partkey:bigint,p_type:string>\n                           :                 :     :                 :                 +- *(7) Project [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_extendedprice#25, l_discount#26]\n                           :                 :     :                 :                    +- *(7) Filter ((isnotnull(l_partkey#21L) AND isnotnull(l_suppkey#22L)) AND isnotnull(l_orderkey#20L))\n                           :                 :     :                 :                       +- *(7) ColumnarToRow\n                           :                 :     :                 :                          +- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#20L,l_partkey#21L,l_suppkey#22L,l_extendedprice#25,l_discount#26,l_shipdate#35] Batched: true, DataFilters: [isnotnull(l_partkey#21L), isnotnull(l_suppkey#22L), isnotnull(l_orderkey#20L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem], PartitionFilters: [], PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey), IsNotNull(l_orderkey)], ReadSchema: struct<l_orderkey:bigint,l_partkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discou...\n                           :                 :     :                 +- *(10) Sort [s_suppkey#13L ASC NULLS FIRST], false, 0\n                           :                 :     :                    +- AQEShuffleRead coalesced\n                           :                 :     :                       +- ShuffleQueryStage 1\n                           :                 :     :                          +- Exchange hashpartitioning(s_suppkey#13L, 200), ENSURE_REQUIREMENTS, [plan_id=320]\n                           :                 :     :                             +- *(2) Filter (isnotnull(s_suppkey#13L) AND isnotnull(s_nationkey#16L))\n                           :                 :     :                                +- *(2) ColumnarToRow\n                           :                 :     :                                   +- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#13L,s_nationkey#16L] Batched: true, DataFilters: [isnotnull(s_suppkey#13L), isnotnull(s_nationkey#16L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>\n                           :                 :     +- *(13) Sort [o_orderkey#36L ASC NULLS FIRST], false, 0\n                           :                 :        +- AQEShuffleRead coalesced\n                           :                 :           +- ShuffleQueryStage 2\n                           :                 :              +- Exchange hashpartitioning(o_orderkey#36L, 200), ENSURE_REQUIREMENTS, [plan_id=341]\n                           :                 :                 +- *(3) Filter (isnotnull(o_orderkey#36L) AND isnotnull(o_custkey#37L))\n                           :                 :                    +- *(3) ColumnarToRow\n                           :                 :                       +- FileScan parquet spark_catalog.tpch_100.orders[o_orderkey#36L,o_custkey#37L,o_orderdate#44] Batched: true, DataFilters: [isnotnull(o_orderkey#36L), isnotnull(o_custkey#37L)], Format: Parquet, Location: InMemoryFileIndex(731 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/orders/o..., PartitionFilters: [isnotnull(o_orderdate#44), (o_orderdate#44 >= 1995-01-01), (o_orderdate#44 <= 1996-12-31)], PushedFilters: [IsNotNull(o_orderkey), IsNotNull(o_custkey)], ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint>\n                           :                 +- BroadcastQueryStage 3\n                           :                    +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=360]\n                           :                       +- *(4) Filter isnotnull(n_nationkey#80L)\n                           :                          +- *(4) ColumnarToRow\n                           :                             +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#80L,n_name#81] Batched: true, DataFilters: [isnotnull(n_nationkey#80L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n                           +- *(16) Sort [c_custkey#45L ASC NULLS FIRST], false, 0\n                              +- AQEShuffleRead coalesced\n                                 +- ShuffleQueryStage 7\n                                    +- Exchange hashpartitioning(c_custkey#45L, 200), ENSURE_REQUIREMENTS, [plan_id=1113]\n                                       +- *(8) Project [c_custkey#45L]\n                                          +- *(8) BroadcastHashJoin [n_nationkey#53L], [c_nationkey#48L], Inner, BuildLeft, false\n                                             :- BroadcastQueryStage 5\n                                             :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=706]\n                                             :     +- *(6) Project [n_nationkey#53L]\n                                             :        +- *(6) BroadcastHashJoin [n_regionkey#55L], [r_regionkey#57L], Inner, BuildRight, false\n                                             :           :- *(6) Filter (isnotnull(n_nationkey#53L) AND isnotnull(n_regionkey#55L))\n                                             :           :  +- *(6) ColumnarToRow\n                                             :           :     +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#53L,n_regionkey#55L] Batched: true, DataFilters: [isnotnull(n_nationkey#53L), isnotnull(n_regionkey#55L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)], ReadSchema: struct<n_nationkey:bigint,n_regionkey:bigint>\n                                             :           +- BroadcastQueryStage 4\n                                             :              +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=381]\n                                             :                 +- *(5) Project [r_regionkey#57L]\n                                             :                    +- *(5) Filter ((isnotnull(r_name#58) AND (r_name#58 = AFRICA)) AND isnotnull(r_regionkey#57L))\n                                             :                       +- *(5) ColumnarToRow\n                                             :                          +- FileScan parquet spark_catalog.tpch_100.region[r_regionkey#57L,r_name#58] Batched: true, DataFilters: [isnotnull(r_name#58), (r_name#58 = AFRICA), isnotnull(r_regionkey#57L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/region], PartitionFilters: [], PushedFilters: [IsNotNull(r_name), EqualTo(r_name,AFRICA), IsNotNull(r_regionkey)], ReadSchema: struct<r_regionkey:bigint,r_name:string>\n                                             +- *(8) Project [c_custkey#45L, c_nationkey#48L]\n                                                +- *(8) Filter (isnotnull(c_custkey#45L) AND isnotnull(c_nationkey#48L))\n                                                   +- *(8) ColumnarToRow\n                                                      +- FileScan parquet spark_catalog.tpch_100.customer[c_custkey#45L,c_nationkey#48L,c_mktsegment#52] Batched: true, DataFilters: [isnotnull(c_custkey#45L), isnotnull(c_nationkey#48L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)], ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 80,
        "inputRowCount" : 2
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "7" : [ 80, 80 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 12,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 49 ],
      "Objectives" : {
        "DurationInMs" : 48,
        "TotalTasksDurationInMs" : 40,
        "IOBytes" : {
          "Total" : 156,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 156,
            "SW" : 0
          }
        }
      }
    },
    "8" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -607158267,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 24024420680,
                "rowCount" : 600610517
              },
              "compileTime" : {
                "sizeInBytes" : 24024420680,
                "rowCount" : 600610517
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_orderkey#20L, l_extendedprice#25, l_discount#26, s_nationkey#16L] "
          },
          "1" : {
            "sign" : -665507079,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 33634188952,
                "rowCount" : 600610517
              },
              "compileTime" : {
                "sizeInBytes" : 33634188952,
                "rowCount" : 600610517
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#13L = l_suppkey#22L) "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [l_orderkey#20L, l_extendedprice#25, l_discount#26, s_nationkey#16L]\n+- Join Inner, (s_suppkey#13L = l_suppkey#22L)\n   :- Project [l_orderkey#20L, l_suppkey#22L, l_extendedprice#25, l_discount#26]\n   :  +- Join Inner, (p_partkey#4L = l_partkey#21L)\n   :     :- Project [p_partkey#4L]\n   :     :  +- Filter ((isnotnull(p_type#7) AND (p_type#7 = PROMO POLISHED TIN)) AND isnotnull(p_partkey#4L))\n   :     :     +- Relation spark_catalog.tpch_100.part[p_partkey#4L,p_name#5,p_mfgr#6,p_type#7,p_size#8,p_container#9,p_retailprice#10,p_comment#11,p_brand#12] parquet\n   :     +- Project [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_extendedprice#25, l_discount#26]\n   :        +- Filter (isnotnull(l_partkey#21L) AND (isnotnull(l_suppkey#22L) AND isnotnull(l_orderkey#20L)))\n   :           +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#20L,l_partkey#21L,l_suppkey#22L,l_linenumber#23,l_quantity#24,l_extendedprice#25,l_discount#26,l_tax#27,l_returnflag#28,l_linestatus#29,l_commitdate#30,l_receiptdate#31,l_shipinstruct#32,l_shipmode#33,l_comment#34,l_shipdate#35] parquet\n   +- Project [s_suppkey#13L, s_nationkey#16L]\n      +- Filter (isnotnull(s_suppkey#13L) AND isnotnull(s_nationkey#16L))\n         +- Relation spark_catalog.tpch_100.supplier[s_suppkey#13L,s_name#14,s_address#15,s_nationkey#16L,s_phone#17,s_acctbal#18,s_comment#19] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 71784003,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [2]: [s_suppkey#13L, s_nationkey#16L] Arguments: [s_suppkey#13L ASC NULLS FIRST], false, 0 "
          },
          "5" : {
            "sign" : -948770109,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [s_suppkey#13L, s_nationkey#16L] Arguments: 1 "
          },
          "1" : {
            "sign" : -1387771455,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 33634188952,
            "rowCount" : 600610517,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [l_suppkey#22L] Right keys [1]: [s_suppkey#13L] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : -2038138657,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 24024420680,
            "rowCount" : 600610517,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [l_orderkey#20L, l_extendedprice#25, l_discount#26, s_nationkey#16L] Input [6]: [l_orderkey#20L, l_suppkey#22L, l_extendedprice#25, l_discount#26, s_suppkey#13L, s_nationkey#16L] "
          },
          "2" : {
            "sign" : 2025737118,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [4]: [l_orderkey#20L, l_suppkey#22L, l_extendedprice#25, l_discount#26] Arguments: [l_suppkey#22L ASC NULLS FIRST], false, 0 "
          },
          "3" : {
            "sign" : 1676702523,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 159926600,
            "rowCount" : 3998165,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [l_orderkey#20L, l_suppkey#22L, l_extendedprice#25, l_discount#26] Arguments: 6 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "SortMergeJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [l_orderkey#20L, l_extendedprice#25, l_discount#26, s_nationkey#16L]\n+- SortMergeJoin [l_suppkey#22L], [s_suppkey#13L], Inner\n   :- Sort [l_suppkey#22L ASC NULLS FIRST], false, 0\n   :  +- ShuffleQueryStage 6\n   :     +- Exchange hashpartitioning(l_suppkey#22L, 200), ENSURE_REQUIREMENTS, [plan_id=950]\n   :        +- *(7) Project [l_orderkey#20L, l_suppkey#22L, l_extendedprice#25, l_discount#26]\n   :           +- *(7) BroadcastHashJoin [p_partkey#4L], [l_partkey#21L], Inner, BuildLeft, false\n   :              :- BroadcastQueryStage 0\n   :              :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=299]\n   :              :     +- *(1) Project [p_partkey#4L]\n   :              :        +- *(1) Filter ((isnotnull(p_type#7) AND (p_type#7 = PROMO POLISHED TIN)) AND isnotnull(p_partkey#4L))\n   :              :           +- *(1) ColumnarToRow\n   :              :              +- FileScan parquet spark_catalog.tpch_100.part[p_partkey#4L,p_type#7,p_brand#12] Batched: true, DataFilters: [isnotnull(p_type#7), (p_type#7 = PROMO POLISHED TIN), isnotnull(p_partkey#4L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/part], PartitionFilters: [], PushedFilters: [IsNotNull(p_type), EqualTo(p_type,PROMO POLISHED TIN), IsNotNull(p_partkey)], ReadSchema: struct<p_partkey:bigint,p_type:string>\n   :              +- *(7) Project [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_extendedprice#25, l_discount#26]\n   :                 +- *(7) Filter ((isnotnull(l_partkey#21L) AND isnotnull(l_suppkey#22L)) AND isnotnull(l_orderkey#20L))\n   :                    +- *(7) ColumnarToRow\n   :                       +- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#20L,l_partkey#21L,l_suppkey#22L,l_extendedprice#25,l_discount#26,l_shipdate#35] Batched: true, DataFilters: [isnotnull(l_partkey#21L), isnotnull(l_suppkey#22L), isnotnull(l_orderkey#20L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem], PartitionFilters: [], PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey), IsNotNull(l_orderkey)], ReadSchema: struct<l_orderkey:bigint,l_partkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discou...\n   +- Sort [s_suppkey#13L ASC NULLS FIRST], false, 0\n      +- ShuffleQueryStage 1\n         +- Exchange hashpartitioning(s_suppkey#13L, 200), ENSURE_REQUIREMENTS, [plan_id=320]\n            +- *(2) Filter (isnotnull(s_suppkey#13L) AND isnotnull(s_nationkey#16L))\n               +- *(2) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#13L,s_nationkey#16L] Batched: true, DataFilters: [isnotnull(s_suppkey#13L), isnotnull(s_nationkey#16L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 183926600,
        "inputRowCount" : 4998165
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "2" : [ 495360, 498930, 519646, 501874, 528750, 513456, 502854, 517810, 505876, 523004, 517760, 527782, 512642, 502298, 516340, 524910, 514845, 520208, 516965, 558579, 522899, 518380, 509817, 506399, 531585, 517758, 526380, 521670, 507375, 520764, 506127, 506226, 522752, 504152, 504671, 533185, 506219, 515031, 501342, 496777, 509139, 524842, 517032, 522190, 511504, 504659, 513327, 505887, 509180, 525827, 511659, 502137, 515204, 516354, 533983, 527491, 526213, 503791, 500808, 511189, 505093, 509262, 499982, 512165, 516192, 521166, 525011, 509291, 520294, 510653, 518827, 512885, 520142, 517286, 505162, 529688, 523659, 520983, 515219, 499734, 523724, 501274, 517810, 512741, 500398, 515881, 530703, 514011, 500016, 507104, 504748, 512986, 524358, 514246, 501801, 502409, 510677, 512908, 506133, 519417, 532734, 517296, 509221, 513788, 520896, 514234, 499260, 501466, 518090, 527525, 512502, 517146, 503445, 522278, 508003, 517248, 497057, 505185, 519565, 508031, 509844, 505172, 521677, 513519, 556035, 518335, 514156, 520014, 503740, 504171, 489905, 544192, 518325, 519287, 502761, 526403, 541600, 522933, 504160, 509625, 541889, 542202, 506840, 529549, 526390, 512924, 509202, 515770, 511487, 506384, 530995, 534971, 509782, 511932, 492069, 516653, 520584, 505003, 537365, 502718, 507402, 504776, 519063, 517496, 535128, 504452, 495760, 517533, 523243, 516940, 486414, 498880, 508977, 516170, 511768, 502824, 510959, 512760, 503513, 510851, 514423, 507336, 493143, 501382, 482029, 491532, 514347, 506236, 506190, 489787, 517109, 489025, 507723, 554255, 499494, 501992, 520755, 530049, 505011, 523389 ],
        "0" : [ 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 52331, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 52331, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 52331, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 52331, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 57565, 57565, 52331, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 52331, 57565, 52331, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 57565, 52331, 57565, 57565, 57565, 57565 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 8,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 12 ],
      "Objectives" : {
        "DurationInMs" : 4744,
        "TotalTasksDurationInMs" : 7788,
        "IOBytes" : {
          "Total" : 189065136,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 108587740,
            "SW" : 80477396
          }
        }
      }
    },
    "4" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1347160626,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1273595820,
                "rowCount" : 45485565
              },
              "compileTime" : {
                "sizeInBytes" : 1273595820,
                "rowCount" : 45485565
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [o_orderkey#36L, o_custkey#37L, o_orderdate#44] "
          },
          "1" : {
            "sign" : -1502207342,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7368661530,
                "rowCount" : 45485565
              },
              "compileTime" : {
                "sizeInBytes" : 7368661530,
                "rowCount" : 45485565
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((((isnotnull(o_orderdate#44) AND (o_orderdate#44 >= 1995-01-01)) AND (o_orderdate#44 <= 1996-12-31)) AND isnotnull(o_orderkey#36L)) AND isnotnull(o_custkey#37L)) "
          },
          "2" : {
            "sign" : -1726241958,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7368661530,
                "rowCount" : 45485565
              },
              "compileTime" : {
                "sizeInBytes" : 7368661530,
                "rowCount" : 45485565
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [o_orderkey#36L, o_custkey#37L, o_orderstatus#38, o_totalprice#39, o_orderpriority#40, o_clerk#41, o_shippriority#42, o_comment#43, o_orderdate#44], `spark_catalog`.`tpch_100`.`orders`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [o_orderkey#36L, o_custkey#37L, o_orderdate#44]\n+- Filter ((((isnotnull(o_orderdate#44) AND (o_orderdate#44 >= 1995-01-01)) AND (o_orderdate#44 <= 1996-12-31)) AND isnotnull(o_orderkey#36L)) AND isnotnull(o_custkey#37L))\n   +- Relation spark_catalog.tpch_100.orders[o_orderkey#36L,o_custkey#37L,o_orderstatus#38,o_totalprice#39,o_orderpriority#40,o_clerk#41,o_shippriority#42,o_comment#43,o_orderdate#44] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1961401901,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 1273595820,
            "rowCount" : 45485565,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [o_orderkey#36L, o_custkey#37L, o_orderdate#44] Condition : (isnotnull(o_orderkey#36L) AND isnotnull(o_custkey#37L)) "
          },
          "1" : {
            "sign" : -1351641201,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 1273595820,
            "rowCount" : 45485565,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.orders Output [3]: [o_orderkey#36L, o_custkey#37L, o_orderdate#44] Batched: true Location: InMemoryFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/orders/o_orderdate=1995-01-01, ... 730 entries] PartitionFilters: [isnotnull(o_orderdate#44), (o_orderdate#44 >= 1995-01-01), (o_orderdate#44 <= 1996-12-31)] PushedFilters: [IsNotNull(o_orderkey), IsNotNull(o_custkey)] ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpch_100.orders",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(o_orderkey#36L) AND isnotnull(o_custkey#37L))\n+- FileScan parquet spark_catalog.tpch_100.orders[o_orderkey#36L,o_custkey#37L,o_orderdate#44] Batched: true, DataFilters: [isnotnull(o_orderkey#36L), isnotnull(o_custkey#37L)], Format: Parquet, Location: InMemoryFileIndex(731 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/orders/o..., PartitionFilters: [isnotnull(o_orderdate#44), (o_orderdate#44 >= 1995-01-01), (o_orderdate#44 <= 1996-12-31)], PushedFilters: [IsNotNull(o_orderkey), IsNotNull(o_custkey)], ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1273595820,
        "inputRowCount" : 45485565
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 5 ],
      "Objectives" : {
        "DurationInMs" : 8559,
        "TotalTasksDurationInMs" : 62026,
        "IOBytes" : {
          "Total" : 1141157120,
          "Details" : {
            "IR" : 519293742,
            "IW" : 0,
            "SR" : 0,
            "SW" : 621863378
          }
        }
      }
    },
    "11" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 2124527511,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 160,
                "rowCount" : 2
              },
              "compileTime" : {
                "sizeInBytes" : 4212859504,
                "rowCount" : -1
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [o_year#76], [o_year#76, (sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END) / sum(volume#77)) AS mkt_share#79], HashAggregate(keys=[o_year#76], functions=[sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END), sum(volume#77)]) "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Aggregate [o_year#76], [o_year#76, (sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END) / sum(volume#77)) AS mkt_share#79], HashAggregate(keys=[o_year#76], functions=[sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END), sum(volume#77)])\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -760913398,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 160,
            "rowCount" : 2,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [5]: [o_year#76, sum#93, isEmpty#94, sum#95, isEmpty#96] Keys [1]: [o_year#76] Functions [2]: [sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END), sum(volume#77)] Aggregate Attributes [2]: [sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END)#86, sum(volume#77)#85] Results [2]: [o_year#76, (sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END)#86 / sum(volume#77)#85) AS mkt_share#79] "
          },
          "1" : {
            "sign" : 302088932,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 4212859504,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [5]: [o_year#76, sum#93, isEmpty#94, sum#95, isEmpty#96] Arguments: 10 "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "ShuffleQueryStage",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[o_year#76], functions=[sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END), sum(volume#77)], output=[o_year#76, mkt_share#79])\n+- ShuffleQueryStage 10\n   +- Exchange hashpartitioning(o_year#76, 200), ENSURE_REQUIREMENTS, [plan_id=1542]\n      +- *(17) HashAggregate(keys=[o_year#76], functions=[partial_sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END), partial_sum(volume#77)], output=[o_year#76, sum#93, isEmpty#94, sum#95, isEmpty#96])\n         +- *(17) Project [year(o_orderdate#44) AS o_year#76, (l_extendedprice#25 * (1 - l_discount#26)) AS volume#77, n_name#81 AS nation#78]\n            +- *(17) SortMergeJoin [o_custkey#37L], [c_custkey#45L], Inner\n               :- *(15) Sort [o_custkey#37L ASC NULLS FIRST], false, 0\n               :  +- AQEShuffleRead coalesced\n               :     +- ShuffleQueryStage 9\n               :        +- Exchange hashpartitioning(o_custkey#37L, 200), ENSURE_REQUIREMENTS, [plan_id=1445]\n               :           +- *(14) Project [l_extendedprice#25, l_discount#26, o_custkey#37L, o_orderdate#44, n_name#81]\n               :              +- *(14) BroadcastHashJoin [s_nationkey#16L], [n_nationkey#80L], Inner, BuildRight, false\n               :                 :- *(14) Project [l_extendedprice#25, l_discount#26, s_nationkey#16L, o_custkey#37L, o_orderdate#44]\n               :                 :  +- *(14) SortMergeJoin [l_orderkey#20L], [o_orderkey#36L], Inner\n               :                 :     :- *(12) Sort [l_orderkey#20L ASC NULLS FIRST], false, 0\n               :                 :     :  +- AQEShuffleRead coalesced\n               :                 :     :     +- ShuffleQueryStage 8\n               :                 :     :        +- Exchange hashpartitioning(l_orderkey#20L, 200), ENSURE_REQUIREMENTS, [plan_id=1307]\n               :                 :     :           +- *(11) Project [l_orderkey#20L, l_extendedprice#25, l_discount#26, s_nationkey#16L]\n               :                 :     :              +- *(11) SortMergeJoin [l_suppkey#22L], [s_suppkey#13L], Inner\n               :                 :     :                 :- *(9) Sort [l_suppkey#22L ASC NULLS FIRST], false, 0\n               :                 :     :                 :  +- AQEShuffleRead coalesced\n               :                 :     :                 :     +- ShuffleQueryStage 6\n               :                 :     :                 :        +- Exchange hashpartitioning(l_suppkey#22L, 200), ENSURE_REQUIREMENTS, [plan_id=950]\n               :                 :     :                 :           +- *(7) Project [l_orderkey#20L, l_suppkey#22L, l_extendedprice#25, l_discount#26]\n               :                 :     :                 :              +- *(7) BroadcastHashJoin [p_partkey#4L], [l_partkey#21L], Inner, BuildLeft, false\n               :                 :     :                 :                 :- BroadcastQueryStage 0\n               :                 :     :                 :                 :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=299]\n               :                 :     :                 :                 :     +- *(1) Project [p_partkey#4L]\n               :                 :     :                 :                 :        +- *(1) Filter ((isnotnull(p_type#7) AND (p_type#7 = PROMO POLISHED TIN)) AND isnotnull(p_partkey#4L))\n               :                 :     :                 :                 :           +- *(1) ColumnarToRow\n               :                 :     :                 :                 :              +- FileScan parquet spark_catalog.tpch_100.part[p_partkey#4L,p_type#7,p_brand#12] Batched: true, DataFilters: [isnotnull(p_type#7), (p_type#7 = PROMO POLISHED TIN), isnotnull(p_partkey#4L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/part], PartitionFilters: [], PushedFilters: [IsNotNull(p_type), EqualTo(p_type,PROMO POLISHED TIN), IsNotNull(p_partkey)], ReadSchema: struct<p_partkey:bigint,p_type:string>\n               :                 :     :                 :                 +- *(7) Project [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_extendedprice#25, l_discount#26]\n               :                 :     :                 :                    +- *(7) Filter ((isnotnull(l_partkey#21L) AND isnotnull(l_suppkey#22L)) AND isnotnull(l_orderkey#20L))\n               :                 :     :                 :                       +- *(7) ColumnarToRow\n               :                 :     :                 :                          +- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#20L,l_partkey#21L,l_suppkey#22L,l_extendedprice#25,l_discount#26,l_shipdate#35] Batched: true, DataFilters: [isnotnull(l_partkey#21L), isnotnull(l_suppkey#22L), isnotnull(l_orderkey#20L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem], PartitionFilters: [], PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey), IsNotNull(l_orderkey)], ReadSchema: struct<l_orderkey:bigint,l_partkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discou...\n               :                 :     :                 +- *(10) Sort [s_suppkey#13L ASC NULLS FIRST], false, 0\n               :                 :     :                    +- AQEShuffleRead coalesced\n               :                 :     :                       +- ShuffleQueryStage 1\n               :                 :     :                          +- Exchange hashpartitioning(s_suppkey#13L, 200), ENSURE_REQUIREMENTS, [plan_id=320]\n               :                 :     :                             +- *(2) Filter (isnotnull(s_suppkey#13L) AND isnotnull(s_nationkey#16L))\n               :                 :     :                                +- *(2) ColumnarToRow\n               :                 :     :                                   +- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#13L,s_nationkey#16L] Batched: true, DataFilters: [isnotnull(s_suppkey#13L), isnotnull(s_nationkey#16L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>\n               :                 :     +- *(13) Sort [o_orderkey#36L ASC NULLS FIRST], false, 0\n               :                 :        +- AQEShuffleRead coalesced\n               :                 :           +- ShuffleQueryStage 2\n               :                 :              +- Exchange hashpartitioning(o_orderkey#36L, 200), ENSURE_REQUIREMENTS, [plan_id=341]\n               :                 :                 +- *(3) Filter (isnotnull(o_orderkey#36L) AND isnotnull(o_custkey#37L))\n               :                 :                    +- *(3) ColumnarToRow\n               :                 :                       +- FileScan parquet spark_catalog.tpch_100.orders[o_orderkey#36L,o_custkey#37L,o_orderdate#44] Batched: true, DataFilters: [isnotnull(o_orderkey#36L), isnotnull(o_custkey#37L)], Format: Parquet, Location: InMemoryFileIndex(731 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/orders/o..., PartitionFilters: [isnotnull(o_orderdate#44), (o_orderdate#44 >= 1995-01-01), (o_orderdate#44 <= 1996-12-31)], PushedFilters: [IsNotNull(o_orderkey), IsNotNull(o_custkey)], ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint>\n               :                 +- BroadcastQueryStage 3\n               :                    +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=360]\n               :                       +- *(4) Filter isnotnull(n_nationkey#80L)\n               :                          +- *(4) ColumnarToRow\n               :                             +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#80L,n_name#81] Batched: true, DataFilters: [isnotnull(n_nationkey#80L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n               +- *(16) Sort [c_custkey#45L ASC NULLS FIRST], false, 0\n                  +- AQEShuffleRead coalesced\n                     +- ShuffleQueryStage 7\n                        +- Exchange hashpartitioning(c_custkey#45L, 200), ENSURE_REQUIREMENTS, [plan_id=1113]\n                           +- *(8) Project [c_custkey#45L]\n                              +- *(8) BroadcastHashJoin [n_nationkey#53L], [c_nationkey#48L], Inner, BuildLeft, false\n                                 :- BroadcastQueryStage 5\n                                 :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=706]\n                                 :     +- *(6) Project [n_nationkey#53L]\n                                 :        +- *(6) BroadcastHashJoin [n_regionkey#55L], [r_regionkey#57L], Inner, BuildRight, false\n                                 :           :- *(6) Filter (isnotnull(n_nationkey#53L) AND isnotnull(n_regionkey#55L))\n                                 :           :  +- *(6) ColumnarToRow\n                                 :           :     +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#53L,n_regionkey#55L] Batched: true, DataFilters: [isnotnull(n_nationkey#53L), isnotnull(n_regionkey#55L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)], ReadSchema: struct<n_nationkey:bigint,n_regionkey:bigint>\n                                 :           +- BroadcastQueryStage 4\n                                 :              +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=381]\n                                 :                 +- *(5) Project [r_regionkey#57L]\n                                 :                    +- *(5) Filter ((isnotnull(r_name#58) AND (r_name#58 = AFRICA)) AND isnotnull(r_regionkey#57L))\n                                 :                       +- *(5) ColumnarToRow\n                                 :                          +- FileScan parquet spark_catalog.tpch_100.region[r_regionkey#57L,r_name#58] Batched: true, DataFilters: [isnotnull(r_name#58), (r_name#58 = AFRICA), isnotnull(r_regionkey#57L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/region], PartitionFilters: [], PushedFilters: [IsNotNull(r_name), EqualTo(r_name,AFRICA), IsNotNull(r_regionkey)], ReadSchema: struct<r_regionkey:bigint,r_name:string>\n                                 +- *(8) Project [c_custkey#45L, c_nationkey#48L]\n                                    +- *(8) Filter (isnotnull(c_custkey#45L) AND isnotnull(c_nationkey#48L))\n                                       +- *(8) ColumnarToRow\n                                          +- FileScan parquet spark_catalog.tpch_100.customer[c_custkey#45L,c_nationkey#48L,c_mktsegment#52] Batched: true, DataFilters: [isnotnull(c_custkey#45L), isnotnull(c_nationkey#48L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)], ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 160,
        "inputRowCount" : 2
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "6" : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 11,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 32, 40 ],
      "Objectives" : {
        "DurationInMs" : 375,
        "TotalTasksDurationInMs" : 345,
        "IOBytes" : {
          "Total" : 580,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 424,
            "SW" : 156
          }
        }
      }
    },
    "9" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 542531915,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 66554040,
                "rowCount" : 1188465
              },
              "compileTime" : {
                "sizeInBytes" : 66554040,
                "rowCount" : 1188465
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#25, l_discount#26, o_custkey#37L, o_orderdate#44, n_name#81] "
          },
          "1" : {
            "sign" : -1982892580,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 85569480,
                "rowCount" : 1188465
              },
              "compileTime" : {
                "sizeInBytes" : 85569480,
                "rowCount" : 1188465
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#16L = n_nationkey#80L) "
          },
          "2" : {
            "sign" : -1861886017,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 26462093768,
                "rowCount" : 601411222
              },
              "compileTime" : {
                "sizeInBytes" : 26462093768,
                "rowCount" : 601411222
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_extendedprice#25, l_discount#26, s_nationkey#16L, o_custkey#37L, o_orderdate#44] "
          },
          "3" : {
            "sign" : 627786562,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 36084673320,
                "rowCount" : 601411222
              },
              "compileTime" : {
                "sizeInBytes" : 36084673320,
                "rowCount" : 601411222
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (l_orderkey#20L = o_orderkey#36L) "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Join",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [l_extendedprice#25, l_discount#26, o_custkey#37L, o_orderdate#44, n_name#81]\n+- Join Inner, (s_nationkey#16L = n_nationkey#80L)\n   :- Project [l_extendedprice#25, l_discount#26, s_nationkey#16L, o_custkey#37L, o_orderdate#44]\n   :  +- Join Inner, (l_orderkey#20L = o_orderkey#36L)\n   :     :- Project [l_orderkey#20L, l_extendedprice#25, l_discount#26, s_nationkey#16L]\n   :     :  +- Join Inner, (s_suppkey#13L = l_suppkey#22L)\n   :     :     :- Project [l_orderkey#20L, l_suppkey#22L, l_extendedprice#25, l_discount#26]\n   :     :     :  +- Join Inner, (p_partkey#4L = l_partkey#21L)\n   :     :     :     :- Project [p_partkey#4L]\n   :     :     :     :  +- Filter ((isnotnull(p_type#7) AND (p_type#7 = PROMO POLISHED TIN)) AND isnotnull(p_partkey#4L))\n   :     :     :     :     +- Relation spark_catalog.tpch_100.part[p_partkey#4L,p_name#5,p_mfgr#6,p_type#7,p_size#8,p_container#9,p_retailprice#10,p_comment#11,p_brand#12] parquet\n   :     :     :     +- Project [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_extendedprice#25, l_discount#26]\n   :     :     :        +- Filter (isnotnull(l_partkey#21L) AND (isnotnull(l_suppkey#22L) AND isnotnull(l_orderkey#20L)))\n   :     :     :           +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#20L,l_partkey#21L,l_suppkey#22L,l_linenumber#23,l_quantity#24,l_extendedprice#25,l_discount#26,l_tax#27,l_returnflag#28,l_linestatus#29,l_commitdate#30,l_receiptdate#31,l_shipinstruct#32,l_shipmode#33,l_comment#34,l_shipdate#35] parquet\n   :     :     +- Project [s_suppkey#13L, s_nationkey#16L]\n   :     :        +- Filter (isnotnull(s_suppkey#13L) AND isnotnull(s_nationkey#16L))\n   :     :           +- Relation spark_catalog.tpch_100.supplier[s_suppkey#13L,s_name#14,s_address#15,s_nationkey#16L,s_phone#17,s_acctbal#18,s_comment#19] parquet\n   :     +- Project [o_orderkey#36L, o_custkey#37L, o_orderdate#44]\n   :        +- Filter ((((isnotnull(o_orderdate#44) AND (o_orderdate#44 >= 1995-01-01)) AND (o_orderdate#44 <= 1996-12-31)) AND isnotnull(o_orderkey#36L)) AND isnotnull(o_custkey#37L))\n   :           +- Relation spark_catalog.tpch_100.orders[o_orderkey#36L,o_custkey#37L,o_orderstatus#38,o_totalprice#39,o_orderpriority#40,o_clerk#41,o_shippriority#42,o_comment#43,o_orderdate#44] parquet\n   +- Project [n_nationkey#80L, n_name#81]\n      +- Filter isnotnull(n_nationkey#80L)\n         +- Relation spark_catalog.tpch_100.nation[n_nationkey#80L,n_name#81,n_regionkey#82L,n_comment#83] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "8" : {
            "sign" : -478973705,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048776,
            "rowCount" : 25,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [n_nationkey#80L, n_name#81] Arguments: 3 "
          },
          "4" : {
            "sign" : 458947640,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [4]: [l_orderkey#20L, l_extendedprice#25, l_discount#26, s_nationkey#16L] Arguments: [l_orderkey#20L ASC NULLS FIRST], false, 0 "
          },
          "5" : {
            "sign" : -1736034155,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 159926600,
            "rowCount" : 3998165,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [4]: [l_orderkey#20L, l_extendedprice#25, l_discount#26, s_nationkey#16L] Arguments: 8 "
          },
          "6" : {
            "sign" : -429001069,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [3]: [o_orderkey#36L, o_custkey#37L, o_orderdate#44] Arguments: [o_orderkey#36L ASC NULLS FIRST], false, 0 "
          },
          "1" : {
            "sign" : -1487632259,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 85569480,
            "rowCount" : 1188465,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [s_nationkey#16L] Right keys [1]: [n_nationkey#80L] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 1581772232,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 66554040,
            "rowCount" : 1188465,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [l_extendedprice#25, l_discount#26, o_custkey#37L, o_orderdate#44, n_name#81] Input [7]: [l_extendedprice#25, l_discount#26, s_nationkey#16L, o_custkey#37L, o_orderdate#44, n_nationkey#80L, n_name#81] "
          },
          "2" : {
            "sign" : -242453447,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 26462093768,
            "rowCount" : 601411222,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [l_extendedprice#25, l_discount#26, s_nationkey#16L, o_custkey#37L, o_orderdate#44] Input [7]: [l_orderkey#20L, l_extendedprice#25, l_discount#26, s_nationkey#16L, o_orderkey#36L, o_custkey#37L, o_orderdate#44] "
          },
          "7" : {
            "sign" : -1037262368,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 1458387968,
            "rowCount" : 45574624,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [o_orderkey#36L, o_custkey#37L, o_orderdate#44] Arguments: 2 "
          },
          "3" : {
            "sign" : 1320922448,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 36084673320,
            "rowCount" : 601411222,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [l_orderkey#20L] Right keys [1]: [o_orderkey#36L] Join type: Inner Join condition: None "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Sort",
          "toId" : 3,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "ShuffleQueryStage",
          "toId" : 6,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Sort",
          "toId" : 3,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "SortMergeJoin",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [l_extendedprice#25, l_discount#26, o_custkey#37L, o_orderdate#44, n_name#81]\n+- BroadcastHashJoin [s_nationkey#16L], [n_nationkey#80L], Inner, BuildRight, false\n   :- Project [l_extendedprice#25, l_discount#26, s_nationkey#16L, o_custkey#37L, o_orderdate#44]\n   :  +- SortMergeJoin [l_orderkey#20L], [o_orderkey#36L], Inner\n   :     :- Sort [l_orderkey#20L ASC NULLS FIRST], false, 0\n   :     :  +- ShuffleQueryStage 8\n   :     :     +- Exchange hashpartitioning(l_orderkey#20L, 200), ENSURE_REQUIREMENTS, [plan_id=1307]\n   :     :        +- *(11) Project [l_orderkey#20L, l_extendedprice#25, l_discount#26, s_nationkey#16L]\n   :     :           +- *(11) SortMergeJoin [l_suppkey#22L], [s_suppkey#13L], Inner\n   :     :              :- *(9) Sort [l_suppkey#22L ASC NULLS FIRST], false, 0\n   :     :              :  +- AQEShuffleRead coalesced\n   :     :              :     +- ShuffleQueryStage 6\n   :     :              :        +- Exchange hashpartitioning(l_suppkey#22L, 200), ENSURE_REQUIREMENTS, [plan_id=950]\n   :     :              :           +- *(7) Project [l_orderkey#20L, l_suppkey#22L, l_extendedprice#25, l_discount#26]\n   :     :              :              +- *(7) BroadcastHashJoin [p_partkey#4L], [l_partkey#21L], Inner, BuildLeft, false\n   :     :              :                 :- BroadcastQueryStage 0\n   :     :              :                 :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=299]\n   :     :              :                 :     +- *(1) Project [p_partkey#4L]\n   :     :              :                 :        +- *(1) Filter ((isnotnull(p_type#7) AND (p_type#7 = PROMO POLISHED TIN)) AND isnotnull(p_partkey#4L))\n   :     :              :                 :           +- *(1) ColumnarToRow\n   :     :              :                 :              +- FileScan parquet spark_catalog.tpch_100.part[p_partkey#4L,p_type#7,p_brand#12] Batched: true, DataFilters: [isnotnull(p_type#7), (p_type#7 = PROMO POLISHED TIN), isnotnull(p_partkey#4L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/part], PartitionFilters: [], PushedFilters: [IsNotNull(p_type), EqualTo(p_type,PROMO POLISHED TIN), IsNotNull(p_partkey)], ReadSchema: struct<p_partkey:bigint,p_type:string>\n   :     :              :                 +- *(7) Project [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_extendedprice#25, l_discount#26]\n   :     :              :                    +- *(7) Filter ((isnotnull(l_partkey#21L) AND isnotnull(l_suppkey#22L)) AND isnotnull(l_orderkey#20L))\n   :     :              :                       +- *(7) ColumnarToRow\n   :     :              :                          +- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#20L,l_partkey#21L,l_suppkey#22L,l_extendedprice#25,l_discount#26,l_shipdate#35] Batched: true, DataFilters: [isnotnull(l_partkey#21L), isnotnull(l_suppkey#22L), isnotnull(l_orderkey#20L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem], PartitionFilters: [], PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey), IsNotNull(l_orderkey)], ReadSchema: struct<l_orderkey:bigint,l_partkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discou...\n   :     :              +- *(10) Sort [s_suppkey#13L ASC NULLS FIRST], false, 0\n   :     :                 +- AQEShuffleRead coalesced\n   :     :                    +- ShuffleQueryStage 1\n   :     :                       +- Exchange hashpartitioning(s_suppkey#13L, 200), ENSURE_REQUIREMENTS, [plan_id=320]\n   :     :                          +- *(2) Filter (isnotnull(s_suppkey#13L) AND isnotnull(s_nationkey#16L))\n   :     :                             +- *(2) ColumnarToRow\n   :     :                                +- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#13L,s_nationkey#16L] Batched: true, DataFilters: [isnotnull(s_suppkey#13L), isnotnull(s_nationkey#16L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>\n   :     +- Sort [o_orderkey#36L ASC NULLS FIRST], false, 0\n   :        +- ShuffleQueryStage 2\n   :           +- Exchange hashpartitioning(o_orderkey#36L, 200), ENSURE_REQUIREMENTS, [plan_id=341]\n   :              +- *(3) Filter (isnotnull(o_orderkey#36L) AND isnotnull(o_custkey#37L))\n   :                 +- *(3) ColumnarToRow\n   :                    +- FileScan parquet spark_catalog.tpch_100.orders[o_orderkey#36L,o_custkey#37L,o_orderdate#44] Batched: true, DataFilters: [isnotnull(o_orderkey#36L), isnotnull(o_custkey#37L)], Format: Parquet, Location: InMemoryFileIndex(731 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/orders/o..., PartitionFilters: [isnotnull(o_orderdate#44), (o_orderdate#44 >= 1995-01-01), (o_orderdate#44 <= 1996-12-31)], PushedFilters: [IsNotNull(o_orderkey), IsNotNull(o_custkey)], ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint>\n   +- BroadcastQueryStage 3\n      +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=360]\n         +- *(4) Filter isnotnull(n_nationkey#80L)\n            +- *(4) ColumnarToRow\n               +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#80L,n_name#81] Batched: true, DataFilters: [isnotnull(n_nationkey#80L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1619363344,
        "inputRowCount" : 49572814
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "4" : [ 421126, 421126, 421126, 421126, 404702, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 404702, 421126, 421126, 404702, 421126, 421126, 421126, 421126, 421126, 421126, 404702, 421126, 421126, 421126, 421126, 421126, 404702, 421126, 421126, 421126, 421126, 421126, 421126, 404702, 421126, 421126, 421126, 421126, 404702, 421126, 445172, 404702, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 404702, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 404702, 421126, 421126, 404702, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 404702, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 404702, 445172, 421126, 421126, 421126, 421126, 404702, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 404702, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 404702, 421126, 421126, 421126, 421126, 404702, 421126, 421126, 421126, 445172, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126, 421126 ],
        "1" : [ 3253351, 3287067, 3287067, 3261780, 3261780, 3278638, 3270209, 3237349, 3278638, 3287067, 3303925, 3287067, 3312354, 3296352, 3279494, 3295496, 3261780, 3279494, 3303925, 3295496, 3303925, 3296352, 3270209, 3278638, 3278638, 3303925, 3254207, 3303925, 3278638, 3279494, 3313210, 3295496, 3303147, 3271065, 3279494, 3303925, 3279494, 3295496, 3287067, 3278638, 3313210, 3261780, 3303925, 3294718, 3253351, 3270209, 3320783, 3278638, 3295496, 3304781, 3279494, 3303925, 3321639, 3261780, 3271065, 3303925, 3271065, 3321639, 3287923, 3287067, 3261780, 3287923, 3303925, 3312354, 3278638, 3312354, 3287067, 3287067, 3295496, 3287067, 3245778, 3287067, 3254207, 3312354, 3295496, 3270209, 3295496, 3287067, 3296352, 3304781, 3261780, 3286289, 3303925, 3270209, 3271065, 3253351, 3296352, 3244922, 3287923, 3287067, 3244922, 3320783, 3287067, 3304781, 3295496, 3270209, 3244922, 3312354, 3278638, 3270209, 3278638, 3262636, 3245778, 3296352, 3270209, 3253351, 3270209, 3279494, 3278638, 3270209, 3287067, 3261780, 3287067, 3304781, 3312354, 3278638, 3262636, 3278638, 3253351, 3303925, 3287923, 3278638, 3295496, 3278638, 3279494, 3296352, 3270209, 3303925, 3296352, 3278638, 3278638, 3261780, 3295496, 3287923, 3278638, 3245778, 3270209, 3287067, 3295496, 3278638, 3287923, 3278638, 3295496, 3278638, 3304781, 3320783, 3287067, 3261780, 3261780, 3330068, 3271065, 3245778, 3295496, 3304781, 3295496, 3261002, 3338497, 3295496, 3262636, 3245778, 3253351, 3270209, 3254207, 3287067, 3303925, 3236493, 3287923, 3312354, 3262636, 3295496, 3270209, 3313210, 3321639, 3303925, 3303925, 3278638, 3312354, 3270209, 3303925, 3295496, 3237349, 3295496, 3278638, 3303925, 3287067, 3329212, 3269431, 3296352, 3303925, 3295496, 3287067, 3304781, 3253351, 3303925, 3287923, 3253351, 3287067, 3295496, 3287067, 3279494 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 9,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 17 ],
      "Objectives" : {
        "DurationInMs" : 3658,
        "TotalTasksDurationInMs" : 32343,
        "IOBytes" : {
          "Total" : 735246351,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 702340774,
            "SW" : 32905577
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -284378772,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3275,
                "rowCount" : 25
              },
              "compileTime" : {
                "sizeInBytes" : 3275,
                "rowCount" : 25
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [n_nationkey#53L, n_name#54, n_regionkey#55L, n_comment#56], `spark_catalog`.`tpch_100`.`nation`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : 417694477,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 800,
                "rowCount" : 25
              },
              "compileTime" : {
                "sizeInBytes" : 800,
                "rowCount" : 25
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (n_regionkey#55L = r_regionkey#57L) "
          },
          "0" : {
            "sign" : 834681040,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 400,
                "rowCount" : 25
              },
              "compileTime" : {
                "sizeInBytes" : 400,
                "rowCount" : 25
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_nationkey#53L] "
          },
          "2" : {
            "sign" : -1664105579,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 600,
                "rowCount" : 25
              },
              "compileTime" : {
                "sizeInBytes" : 600,
                "rowCount" : 25
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_nationkey#53L, n_regionkey#55L] "
          },
          "3" : {
            "sign" : 916787015,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3275,
                "rowCount" : 25
              },
              "compileTime" : {
                "sizeInBytes" : 3275,
                "rowCount" : 25
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(n_nationkey#53L) AND isnotnull(n_regionkey#55L)) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [n_nationkey#53L]\n+- Join Inner, (n_regionkey#55L = r_regionkey#57L)\n   :- Project [n_nationkey#53L, n_regionkey#55L]\n   :  +- Filter (isnotnull(n_nationkey#53L) AND isnotnull(n_regionkey#55L))\n   :     +- Relation spark_catalog.tpch_100.nation[n_nationkey#53L,n_name#54,n_regionkey#55L,n_comment#56] parquet\n   +- Project [r_regionkey#57L]\n      +- Filter ((isnotnull(r_name#58) AND (r_name#58 = AFRICA)) AND isnotnull(r_regionkey#57L))\n         +- Relation spark_catalog.tpch_100.region[r_regionkey#57L,r_name#58,r_comment#59] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 1109945908,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048584,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [r_regionkey#57L] Arguments: 4 "
          },
          "1" : {
            "sign" : 1206595099,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 800,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [n_regionkey#55L] Right keys [1]: [r_regionkey#57L] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : -1287707228,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 400,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [n_nationkey#53L] Input [3]: [n_nationkey#53L, n_regionkey#55L, r_regionkey#57L] "
          },
          "2" : {
            "sign" : -1844312252,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 600,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [n_nationkey#53L, n_regionkey#55L] Condition : (isnotnull(n_nationkey#53L) AND isnotnull(n_regionkey#55L)) "
          },
          "3" : {
            "sign" : 607669247,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 600,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.nation Output [2]: [n_nationkey#53L, n_regionkey#55L] Batched: true Location: InMemoryFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation] PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)] ReadSchema: struct<n_nationkey:bigint,n_regionkey:bigint> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpch_100.nation",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [n_nationkey#53L]\n+- BroadcastHashJoin [n_regionkey#55L], [r_regionkey#57L], Inner, BuildRight, false\n   :- Filter (isnotnull(n_nationkey#53L) AND isnotnull(n_regionkey#55L))\n   :  +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#53L,n_regionkey#55L] Batched: true, DataFilters: [isnotnull(n_nationkey#53L), isnotnull(n_regionkey#55L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)], ReadSchema: struct<n_nationkey:bigint,n_regionkey:bigint>\n   +- BroadcastQueryStage 4\n      +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=381]\n         +- *(5) Project [r_regionkey#57L]\n            +- *(5) Filter ((isnotnull(r_name#58) AND (r_name#58 = AFRICA)) AND isnotnull(r_regionkey#57L))\n               +- *(5) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpch_100.region[r_regionkey#57L,r_name#58] Batched: true, DataFilters: [isnotnull(r_name#58), (r_name#58 = AFRICA), isnotnull(r_regionkey#57L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/region], PartitionFilters: [], PushedFilters: [IsNotNull(r_name), EqualTo(r_name,AFRICA), IsNotNull(r_regionkey)], ReadSchema: struct<r_regionkey:bigint,r_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1049184,
        "inputRowCount" : 26
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 35,
        "FinishedTasksTotalTimeInMs" : 31510.0,
        "FinishedTasksDistributionInMs" : [ 119.0, 191.0, 760.0, 1502.0, 1666.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 6 ],
      "Objectives" : {
        "DurationInMs" : 3322,
        "TotalTasksDurationInMs" : 136,
        "IOBytes" : {
          "Total" : 2595,
          "Details" : {
            "IR" : 2595,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "10" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1387640608,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4212859504,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 4212859504,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [o_year#76], [o_year#76, (sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END) / sum(volume#77)) AS mkt_share#79] "
          },
          "1" : {
            "sign" : 1805623336,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 7222044864,
                "rowCount" : 150459268
              },
              "compileTime" : {
                "sizeInBytes" : 7222044864,
                "rowCount" : 150459268
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [year(o_orderdate#44) AS o_year#76, (l_extendedprice#25 * (1 - l_discount#26)) AS volume#77, n_name#81 AS nation#78] "
          },
          "2" : {
            "sign" : -276371711,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9629393152,
                "rowCount" : 150459268
              },
              "compileTime" : {
                "sizeInBytes" : 9629393152,
                "rowCount" : 150459268
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (o_custkey#37L = c_custkey#45L) "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [o_year#76], [o_year#76, (sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END) / sum(volume#77)) AS mkt_share#79]\n+- Project [year(o_orderdate#44) AS o_year#76, (l_extendedprice#25 * (1 - l_discount#26)) AS volume#77, n_name#81 AS nation#78]\n   +- Join Inner, (o_custkey#37L = c_custkey#45L)\n      :- Project [l_extendedprice#25, l_discount#26, o_custkey#37L, o_orderdate#44, n_name#81]\n      :  +- Join Inner, (s_nationkey#16L = n_nationkey#80L)\n      :     :- Project [l_extendedprice#25, l_discount#26, s_nationkey#16L, o_custkey#37L, o_orderdate#44]\n      :     :  +- Join Inner, (l_orderkey#20L = o_orderkey#36L)\n      :     :     :- Project [l_orderkey#20L, l_extendedprice#25, l_discount#26, s_nationkey#16L]\n      :     :     :  +- Join Inner, (s_suppkey#13L = l_suppkey#22L)\n      :     :     :     :- Project [l_orderkey#20L, l_suppkey#22L, l_extendedprice#25, l_discount#26]\n      :     :     :     :  +- Join Inner, (p_partkey#4L = l_partkey#21L)\n      :     :     :     :     :- Project [p_partkey#4L]\n      :     :     :     :     :  +- Filter ((isnotnull(p_type#7) AND (p_type#7 = PROMO POLISHED TIN)) AND isnotnull(p_partkey#4L))\n      :     :     :     :     :     +- Relation spark_catalog.tpch_100.part[p_partkey#4L,p_name#5,p_mfgr#6,p_type#7,p_size#8,p_container#9,p_retailprice#10,p_comment#11,p_brand#12] parquet\n      :     :     :     :     +- Project [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_extendedprice#25, l_discount#26]\n      :     :     :     :        +- Filter (isnotnull(l_partkey#21L) AND (isnotnull(l_suppkey#22L) AND isnotnull(l_orderkey#20L)))\n      :     :     :     :           +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#20L,l_partkey#21L,l_suppkey#22L,l_linenumber#23,l_quantity#24,l_extendedprice#25,l_discount#26,l_tax#27,l_returnflag#28,l_linestatus#29,l_commitdate#30,l_receiptdate#31,l_shipinstruct#32,l_shipmode#33,l_comment#34,l_shipdate#35] parquet\n      :     :     :     +- Project [s_suppkey#13L, s_nationkey#16L]\n      :     :     :        +- Filter (isnotnull(s_suppkey#13L) AND isnotnull(s_nationkey#16L))\n      :     :     :           +- Relation spark_catalog.tpch_100.supplier[s_suppkey#13L,s_name#14,s_address#15,s_nationkey#16L,s_phone#17,s_acctbal#18,s_comment#19] parquet\n      :     :     +- Project [o_orderkey#36L, o_custkey#37L, o_orderdate#44]\n      :     :        +- Filter ((((isnotnull(o_orderdate#44) AND (o_orderdate#44 >= 1995-01-01)) AND (o_orderdate#44 <= 1996-12-31)) AND isnotnull(o_orderkey#36L)) AND isnotnull(o_custkey#37L))\n      :     :           +- Relation spark_catalog.tpch_100.orders[o_orderkey#36L,o_custkey#37L,o_orderstatus#38,o_totalprice#39,o_orderpriority#40,o_clerk#41,o_shippriority#42,o_comment#43,o_orderdate#44] parquet\n      :     +- Project [n_nationkey#80L, n_name#81]\n      :        +- Filter isnotnull(n_nationkey#80L)\n      :           +- Relation spark_catalog.tpch_100.nation[n_nationkey#80L,n_name#81,n_regionkey#82L,n_comment#83] parquet\n      +- Project [c_custkey#45L]\n         +- Join Inner, (c_nationkey#48L = n_nationkey#53L)\n            :- Project [n_nationkey#53L]\n            :  +- Join Inner, (n_regionkey#55L = r_regionkey#57L)\n            :     :- Project [n_nationkey#53L, n_regionkey#55L]\n            :     :  +- Filter (isnotnull(n_nationkey#53L) AND isnotnull(n_regionkey#55L))\n            :     :     +- Relation spark_catalog.tpch_100.nation[n_nationkey#53L,n_name#54,n_regionkey#55L,n_comment#56] parquet\n            :     +- Project [r_regionkey#57L]\n            :        +- Filter ((isnotnull(r_name#58) AND (r_name#58 = AFRICA)) AND isnotnull(r_regionkey#57L))\n            :           +- Relation spark_catalog.tpch_100.region[r_regionkey#57L,r_name#58,r_comment#59] parquet\n            +- Project [c_custkey#45L, c_nationkey#48L]\n               +- Filter (isnotnull(c_custkey#45L) AND isnotnull(c_nationkey#48L))\n                  +- Relation spark_catalog.tpch_100.customer[c_custkey#45L,c_name#46,c_address#47,c_nationkey#48L,c_phone#49,c_acctbal#50,c_comment#51,c_mktsegment#52] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 1338415059,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 70393016,
            "rowCount" : 1215421,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [5]: [l_extendedprice#25, l_discount#26, o_custkey#37L, o_orderdate#44, n_name#81] Arguments: 9 "
          },
          "5" : {
            "sign" : 1194712870,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [1]: [c_custkey#45L] Arguments: [c_custkey#45L ASC NULLS FIRST], false, 0 "
          },
          "6" : {
            "sign" : -72296106,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 47971536,
            "rowCount" : 2998221,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [c_custkey#45L] Arguments: 7 "
          },
          "1" : {
            "sign" : -715950045,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 7222044864,
            "rowCount" : 150459268,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [year(o_orderdate#44) AS o_year#76, (l_extendedprice#25 * (1 - l_discount#26)) AS volume#77, n_name#81 AS nation#78] Input [6]: [l_extendedprice#25, l_discount#26, o_custkey#37L, o_orderdate#44, n_name#81, c_custkey#45L] "
          },
          "0" : {
            "sign" : 1467615062,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 4212859504,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [3]: [o_year#76, volume#77, nation#78] Keys [1]: [o_year#76] Functions [2]: [partial_sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END), partial_sum(volume#77)] Aggregate Attributes [4]: [sum#89, isEmpty#90, sum#91, isEmpty#92] Results [5]: [o_year#76, sum#93, isEmpty#94, sum#95, isEmpty#96] "
          },
          "2" : {
            "sign" : -1479713398,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 9629393152,
            "rowCount" : 150459268,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [o_custkey#37L] Right keys [1]: [c_custkey#45L] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : 2145991438,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [5]: [l_extendedprice#25, l_discount#26, o_custkey#37L, o_orderdate#44, n_name#81] Arguments: [o_custkey#37L ASC NULLS FIRST], false, 0 "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "ShuffleQueryStage",
          "toId" : 5,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "SortMergeJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[o_year#76], functions=[partial_sum(CASE WHEN (nation#78 = MOZAMBIQUE) THEN volume#77 ELSE 0.0000 END), partial_sum(volume#77)], output=[o_year#76, sum#93, isEmpty#94, sum#95, isEmpty#96])\n+- Project [year(o_orderdate#44) AS o_year#76, (l_extendedprice#25 * (1 - l_discount#26)) AS volume#77, n_name#81 AS nation#78]\n   +- SortMergeJoin [o_custkey#37L], [c_custkey#45L], Inner\n      :- Sort [o_custkey#37L ASC NULLS FIRST], false, 0\n      :  +- ShuffleQueryStage 9\n      :     +- Exchange hashpartitioning(o_custkey#37L, 200), ENSURE_REQUIREMENTS, [plan_id=1445]\n      :        +- *(14) Project [l_extendedprice#25, l_discount#26, o_custkey#37L, o_orderdate#44, n_name#81]\n      :           +- *(14) BroadcastHashJoin [s_nationkey#16L], [n_nationkey#80L], Inner, BuildRight, false\n      :              :- *(14) Project [l_extendedprice#25, l_discount#26, s_nationkey#16L, o_custkey#37L, o_orderdate#44]\n      :              :  +- *(14) SortMergeJoin [l_orderkey#20L], [o_orderkey#36L], Inner\n      :              :     :- *(12) Sort [l_orderkey#20L ASC NULLS FIRST], false, 0\n      :              :     :  +- AQEShuffleRead coalesced\n      :              :     :     +- ShuffleQueryStage 8\n      :              :     :        +- Exchange hashpartitioning(l_orderkey#20L, 200), ENSURE_REQUIREMENTS, [plan_id=1307]\n      :              :     :           +- *(11) Project [l_orderkey#20L, l_extendedprice#25, l_discount#26, s_nationkey#16L]\n      :              :     :              +- *(11) SortMergeJoin [l_suppkey#22L], [s_suppkey#13L], Inner\n      :              :     :                 :- *(9) Sort [l_suppkey#22L ASC NULLS FIRST], false, 0\n      :              :     :                 :  +- AQEShuffleRead coalesced\n      :              :     :                 :     +- ShuffleQueryStage 6\n      :              :     :                 :        +- Exchange hashpartitioning(l_suppkey#22L, 200), ENSURE_REQUIREMENTS, [plan_id=950]\n      :              :     :                 :           +- *(7) Project [l_orderkey#20L, l_suppkey#22L, l_extendedprice#25, l_discount#26]\n      :              :     :                 :              +- *(7) BroadcastHashJoin [p_partkey#4L], [l_partkey#21L], Inner, BuildLeft, false\n      :              :     :                 :                 :- BroadcastQueryStage 0\n      :              :     :                 :                 :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=299]\n      :              :     :                 :                 :     +- *(1) Project [p_partkey#4L]\n      :              :     :                 :                 :        +- *(1) Filter ((isnotnull(p_type#7) AND (p_type#7 = PROMO POLISHED TIN)) AND isnotnull(p_partkey#4L))\n      :              :     :                 :                 :           +- *(1) ColumnarToRow\n      :              :     :                 :                 :              +- FileScan parquet spark_catalog.tpch_100.part[p_partkey#4L,p_type#7,p_brand#12] Batched: true, DataFilters: [isnotnull(p_type#7), (p_type#7 = PROMO POLISHED TIN), isnotnull(p_partkey#4L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/part], PartitionFilters: [], PushedFilters: [IsNotNull(p_type), EqualTo(p_type,PROMO POLISHED TIN), IsNotNull(p_partkey)], ReadSchema: struct<p_partkey:bigint,p_type:string>\n      :              :     :                 :                 +- *(7) Project [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_extendedprice#25, l_discount#26]\n      :              :     :                 :                    +- *(7) Filter ((isnotnull(l_partkey#21L) AND isnotnull(l_suppkey#22L)) AND isnotnull(l_orderkey#20L))\n      :              :     :                 :                       +- *(7) ColumnarToRow\n      :              :     :                 :                          +- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#20L,l_partkey#21L,l_suppkey#22L,l_extendedprice#25,l_discount#26,l_shipdate#35] Batched: true, DataFilters: [isnotnull(l_partkey#21L), isnotnull(l_suppkey#22L), isnotnull(l_orderkey#20L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem], PartitionFilters: [], PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey), IsNotNull(l_orderkey)], ReadSchema: struct<l_orderkey:bigint,l_partkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discou...\n      :              :     :                 +- *(10) Sort [s_suppkey#13L ASC NULLS FIRST], false, 0\n      :              :     :                    +- AQEShuffleRead coalesced\n      :              :     :                       +- ShuffleQueryStage 1\n      :              :     :                          +- Exchange hashpartitioning(s_suppkey#13L, 200), ENSURE_REQUIREMENTS, [plan_id=320]\n      :              :     :                             +- *(2) Filter (isnotnull(s_suppkey#13L) AND isnotnull(s_nationkey#16L))\n      :              :     :                                +- *(2) ColumnarToRow\n      :              :     :                                   +- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#13L,s_nationkey#16L] Batched: true, DataFilters: [isnotnull(s_suppkey#13L), isnotnull(s_nationkey#16L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>\n      :              :     +- *(13) Sort [o_orderkey#36L ASC NULLS FIRST], false, 0\n      :              :        +- AQEShuffleRead coalesced\n      :              :           +- ShuffleQueryStage 2\n      :              :              +- Exchange hashpartitioning(o_orderkey#36L, 200), ENSURE_REQUIREMENTS, [plan_id=341]\n      :              :                 +- *(3) Filter (isnotnull(o_orderkey#36L) AND isnotnull(o_custkey#37L))\n      :              :                    +- *(3) ColumnarToRow\n      :              :                       +- FileScan parquet spark_catalog.tpch_100.orders[o_orderkey#36L,o_custkey#37L,o_orderdate#44] Batched: true, DataFilters: [isnotnull(o_orderkey#36L), isnotnull(o_custkey#37L)], Format: Parquet, Location: InMemoryFileIndex(731 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/orders/o..., PartitionFilters: [isnotnull(o_orderdate#44), (o_orderdate#44 >= 1995-01-01), (o_orderdate#44 <= 1996-12-31)], PushedFilters: [IsNotNull(o_orderkey), IsNotNull(o_custkey)], ReadSchema: struct<o_orderkey:bigint,o_custkey:bigint>\n      :              +- BroadcastQueryStage 3\n      :                 +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=360]\n      :                    +- *(4) Filter isnotnull(n_nationkey#80L)\n      :                       +- *(4) ColumnarToRow\n      :                          +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#80L,n_name#81] Batched: true, DataFilters: [isnotnull(n_nationkey#80L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n      +- Sort [c_custkey#45L ASC NULLS FIRST], false, 0\n         +- ShuffleQueryStage 7\n            +- Exchange hashpartitioning(c_custkey#45L, 200), ENSURE_REQUIREMENTS, [plan_id=1113]\n               +- *(8) Project [c_custkey#45L]\n                  +- *(8) BroadcastHashJoin [n_nationkey#53L], [c_nationkey#48L], Inner, BuildLeft, false\n                     :- BroadcastQueryStage 5\n                     :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=706]\n                     :     +- *(6) Project [n_nationkey#53L]\n                     :        +- *(6) BroadcastHashJoin [n_regionkey#55L], [r_regionkey#57L], Inner, BuildRight, false\n                     :           :- *(6) Filter (isnotnull(n_nationkey#53L) AND isnotnull(n_regionkey#55L))\n                     :           :  +- *(6) ColumnarToRow\n                     :           :     +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#53L,n_regionkey#55L] Batched: true, DataFilters: [isnotnull(n_nationkey#53L), isnotnull(n_regionkey#55L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)], ReadSchema: struct<n_nationkey:bigint,n_regionkey:bigint>\n                     :           +- BroadcastQueryStage 4\n                     :              +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=381]\n                     :                 +- *(5) Project [r_regionkey#57L]\n                     :                    +- *(5) Filter ((isnotnull(r_name#58) AND (r_name#58 = AFRICA)) AND isnotnull(r_regionkey#57L))\n                     :                       +- *(5) ColumnarToRow\n                     :                          +- FileScan parquet spark_catalog.tpch_100.region[r_regionkey#57L,r_name#58] Batched: true, DataFilters: [isnotnull(r_name#58), (r_name#58 = AFRICA), isnotnull(r_regionkey#57L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/region], PartitionFilters: [], PushedFilters: [IsNotNull(r_name), EqualTo(r_name,AFRICA), IsNotNull(r_regionkey)], ReadSchema: struct<r_regionkey:bigint,r_name:string>\n                     +- *(8) Project [c_custkey#45L, c_nationkey#48L]\n                        +- *(8) Filter (isnotnull(c_custkey#45L) AND isnotnull(c_nationkey#48L))\n                           +- *(8) ColumnarToRow\n                              +- FileScan parquet spark_catalog.tpch_100.customer[c_custkey#45L,c_nationkey#48L,c_mktsegment#52] Batched: true, DataFilters: [isnotnull(c_custkey#45L), isnotnull(c_nationkey#48L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)], ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 118364552,
        "inputRowCount" : 4213642
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "5" : [ 174988, 170578, 176796, 170783, 166030, 171908, 177696, 169062, 170392, 174632, 176010, 171956, 175055, 176504, 173539, 173677, 171956, 170254, 173286, 176180, 166598, 172299, 171818, 173677, 173902, 175193, 176504, 173915, 176148, 171921, 167751, 175856, 170392, 167546, 173623, 174940, 168568, 178087, 176180, 172978, 176180, 177882, 170783, 172978, 170578, 177834, 171818, 167222, 171446, 170254, 175193, 167546, 178087, 170392, 171956, 170440, 176366, 176010, 176504, 173437, 167889, 177696, 175055, 168924, 178238, 173286, 171908, 170921, 172978, 174850, 169062, 174802, 166373, 173148, 167889, 172023, 168738, 167546, 174988, 173472, 173539, 171770, 177696, 174802, 167408, 167623, 169200, 170783, 175055, 170783, 170222, 169129, 177882, 170302, 176934, 171818, 175055, 170254, 174850, 176571, 170084, 173286, 173286, 172524, 170392, 176180, 176148, 170440, 169801, 177834, 167684, 177372, 172962, 174664, 170440, 176366, 172161, 174988, 179754, 174850, 170254, 175055, 165812, 172161, 169129, 174494, 173472, 176571, 174988, 173815, 170360, 170254, 169946, 172386, 172386, 178225, 170222, 174664, 167976, 170507, 173472, 171818, 173539, 173286, 175280, 169267, 171462, 173764, 170084, 171956, 171908, 174850, 176571, 174664, 170716, 166373, 170867, 172524, 177882, 170068, 170254, 174802, 169267, 173334, 176010, 171956, 175126, 167684, 177526, 170254, 174802, 175280, 170440, 175856, 172161, 165812, 171770, 172386, 169062, 178225, 169653, 169062, 165330, 174988, 170084, 179603, 173539, 175126, 171632, 174802, 176571, 173610, 170716, 173562, 173286, 171770, 174850, 173472, 173334, 175055 ],
        "3" : [ 83304, 84004, 82448, 82448, 81670, 82526, 81670, 85879, 83304, 82448, 83226, 84082, 84082, 82448, 84860, 80892, 81670, 82448, 82448, 83226, 84004, 83226, 83226, 82448, 81670, 82526, 84160, 80892, 84245, 82448, 81670, 82448, 81670, 81670, 84238, 83226, 83226, 82448, 83226, 81670, 85023, 84245, 84860, 84082, 82448, 82448, 83226, 84004, 83226, 83226, 85023, 82448, 80114, 82448, 81670, 83226, 84082, 81670, 84938, 83226, 81670, 83226, 82448, 82526, 82448, 85716, 83226, 85560, 81670, 83226, 82448, 84160, 82448, 84004, 83226, 83226, 84938, 82526, 81670, 83226, 83226, 81670, 82448, 84082, 81670, 81670, 81670, 81748, 82448, 82448, 82448, 81670, 84004, 83304, 83226, 86657, 84860, 82448, 82526, 84082, 84082, 82448, 84004, 81670, 84082, 83304, 80892, 84082, 82448, 82448, 81670, 81670, 84004, 83226, 84082, 81670, 83226, 84860, 86494, 83304, 83304, 83467, 81670, 82526, 84004, 83304, 83304, 83226, 84004, 83304, 84004, 83304, 81741, 82448, 82448, 81670, 82448, 81670, 82448, 83304, 83226, 83304, 81741, 82448, 85023, 82448, 82448, 81670, 82448, 83304, 85023, 82526, 81670, 82448, 85101, 81670, 82448, 83226, 83304, 83304, 83226, 82448, 84245, 81670, 82448, 82448, 81670, 83226, 82448, 81670, 82448, 82448, 81670, 83226, 84004, 82448, 81670, 84082, 82526, 83304, 81670, 80963, 83304, 84004, 81670, 81670, 83382, 82448, 84860, 84004, 82448, 83304, 82526, 83226, 81670, 82597, 81670, 82448, 84004, 82448 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 10,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 24 ],
      "Objectives" : {
        "DurationInMs" : 3043,
        "TotalTasksDurationInMs" : 3034,
        "IOBytes" : {
          "Total" : 48794909,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 48794697,
            "SW" : 212
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 559913504,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 111607049772,
                "rowCount" : 600037902
              },
              "compileTime" : {
                "sizeInBytes" : 111607049772,
                "rowCount" : 600037902
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_linenumber#23, l_quantity#24, l_extendedprice#25, l_discount#26, l_tax#27, l_returnflag#28, l_linestatus#29, l_commitdate#30, l_receiptdate#31, l_shipinstruct#32, l_shipmode#33, l_comment#34, l_shipdate#35], `spark_catalog`.`tpch_100`.`lineitem`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : 1355054294,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 33632643352,
                "rowCount" : 600582917
              },
              "compileTime" : {
                "sizeInBytes" : 33632643352,
                "rowCount" : 600582917
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (p_partkey#4L = l_partkey#21L) "
          },
          "0" : {
            "sign" : -2117771651,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 24023316680,
                "rowCount" : 600582917
              },
              "compileTime" : {
                "sizeInBytes" : 24023316680,
                "rowCount" : 600582917
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_orderkey#20L, l_suppkey#22L, l_extendedprice#25, l_discount#26] "
          },
          "2" : {
            "sign" : -394941954,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 28801819296,
                "rowCount" : 600037902
              },
              "compileTime" : {
                "sizeInBytes" : 28801819296,
                "rowCount" : 600037902
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_extendedprice#25, l_discount#26] "
          },
          "3" : {
            "sign" : 47884328,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 111607049772,
                "rowCount" : 600037902
              },
              "compileTime" : {
                "sizeInBytes" : 111607049772,
                "rowCount" : 600037902
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(l_partkey#21L) AND (isnotnull(l_suppkey#22L) AND isnotnull(l_orderkey#20L))) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [l_orderkey#20L, l_suppkey#22L, l_extendedprice#25, l_discount#26]\n+- Join Inner, (p_partkey#4L = l_partkey#21L)\n   :- Project [p_partkey#4L]\n   :  +- Filter ((isnotnull(p_type#7) AND (p_type#7 = PROMO POLISHED TIN)) AND isnotnull(p_partkey#4L))\n   :     +- Relation spark_catalog.tpch_100.part[p_partkey#4L,p_name#5,p_mfgr#6,p_type#7,p_size#8,p_container#9,p_retailprice#10,p_comment#11,p_brand#12] parquet\n   +- Project [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_extendedprice#25, l_discount#26]\n      +- Filter (isnotnull(l_partkey#21L) AND (isnotnull(l_suppkey#22L) AND isnotnull(l_orderkey#20L)))\n         +- Relation spark_catalog.tpch_100.lineitem[l_orderkey#20L,l_partkey#21L,l_suppkey#22L,l_linenumber#23,l_quantity#24,l_extendedprice#25,l_discount#26,l_tax#27,l_returnflag#28,l_linestatus#29,l_commitdate#30,l_receiptdate#31,l_shipinstruct#32,l_shipmode#33,l_comment#34,l_shipdate#35] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -1751872805,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 28801819296,
            "rowCount" : 600037902,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [6]: [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_extendedprice#25, l_discount#26, l_shipdate#35] Condition : ((isnotnull(l_partkey#21L) AND isnotnull(l_suppkey#22L)) AND isnotnull(l_orderkey#20L)) "
          },
          "5" : {
            "sign" : 1719693903,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 28801819296,
            "rowCount" : 600037902,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.lineitem Output [6]: [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_extendedprice#25, l_discount#26, l_shipdate#35] Batched: true Location: CatalogFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem] PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey), IsNotNull(l_orderkey)] ReadSchema: struct<l_orderkey:bigint,l_partkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discount:decimal(12,2)> "
          },
          "1" : {
            "sign" : -1296540457,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 33632643352,
            "rowCount" : 600582917,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [p_partkey#4L] Right keys [1]: [l_partkey#21L] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : -2025492882,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 24023316680,
            "rowCount" : 600582917,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [4]: [l_orderkey#20L, l_suppkey#22L, l_extendedprice#25, l_discount#26] Input [6]: [p_partkey#4L, l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_extendedprice#25, l_discount#26] "
          },
          "2" : {
            "sign" : 1006527571,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 12582912,
            "rowCount" : 133297,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [p_partkey#4L] Arguments: 0 "
          },
          "3" : {
            "sign" : -394284387,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 28801819296,
            "rowCount" : 600037902,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [5]: [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_extendedprice#25, l_discount#26] Input [6]: [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_extendedprice#25, l_discount#26, l_shipdate#35] "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Scan parquet spark_catalog.tpch_100.lineitem",
          "toId" : 4,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Filter",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [l_orderkey#20L, l_suppkey#22L, l_extendedprice#25, l_discount#26]\n+- BroadcastHashJoin [p_partkey#4L], [l_partkey#21L], Inner, BuildLeft, false\n   :- BroadcastQueryStage 0\n   :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=299]\n   :     +- *(1) Project [p_partkey#4L]\n   :        +- *(1) Filter ((isnotnull(p_type#7) AND (p_type#7 = PROMO POLISHED TIN)) AND isnotnull(p_partkey#4L))\n   :           +- *(1) ColumnarToRow\n   :              +- FileScan parquet spark_catalog.tpch_100.part[p_partkey#4L,p_type#7,p_brand#12] Batched: true, DataFilters: [isnotnull(p_type#7), (p_type#7 = PROMO POLISHED TIN), isnotnull(p_partkey#4L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/part], PartitionFilters: [], PushedFilters: [IsNotNull(p_type), EqualTo(p_type,PROMO POLISHED TIN), IsNotNull(p_partkey)], ReadSchema: struct<p_partkey:bigint,p_type:string>\n   +- Project [l_orderkey#20L, l_partkey#21L, l_suppkey#22L, l_extendedprice#25, l_discount#26]\n      +- Filter ((isnotnull(l_partkey#21L) AND isnotnull(l_suppkey#22L)) AND isnotnull(l_orderkey#20L))\n         +- FileScan parquet spark_catalog.tpch_100.lineitem[l_orderkey#20L,l_partkey#21L,l_suppkey#22L,l_extendedprice#25,l_discount#26,l_shipdate#35] Batched: true, DataFilters: [isnotnull(l_partkey#21L), isnotnull(l_suppkey#22L), isnotnull(l_orderkey#20L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/lineitem], PartitionFilters: [], PushedFilters: [IsNotNull(l_partkey), IsNotNull(l_suppkey), IsNotNull(l_orderkey)], ReadSchema: struct<l_orderkey:bigint,l_partkey:bigint,l_suppkey:bigint,l_extendedprice:decimal(12,2),l_discou...\n"
      },
      "IM" : {
        "inputSizeInBytes" : 28814402208,
        "inputRowCount" : 600171199
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 8 ],
      "Objectives" : {
        "DurationInMs" : 13539,
        "TotalTasksDurationInMs" : 200012,
        "IOBytes" : {
          "Total" : 13353438998,
          "Details" : {
            "IR" : 13255470565,
            "IW" : 0,
            "SR" : 0,
            "SW" : 97968433
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -168257888,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 900,
                "rowCount" : 25
              },
              "compileTime" : {
                "sizeInBytes" : 900,
                "rowCount" : 25
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_nationkey#80L, n_name#81] "
          },
          "1" : {
            "sign" : 1257894555,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3275,
                "rowCount" : 25
              },
              "compileTime" : {
                "sizeInBytes" : 3275,
                "rowCount" : 25
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(n_nationkey#80L) "
          },
          "2" : {
            "sign" : 534628320,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3275,
                "rowCount" : 25
              },
              "compileTime" : {
                "sizeInBytes" : 3275,
                "rowCount" : 25
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [n_nationkey#80L, n_name#81, n_regionkey#82L, n_comment#83], `spark_catalog`.`tpch_100`.`nation`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [n_nationkey#80L, n_name#81]\n+- Filter isnotnull(n_nationkey#80L)\n   +- Relation spark_catalog.tpch_100.nation[n_nationkey#80L,n_name#81,n_regionkey#82L,n_comment#83] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1072884636,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 900,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [n_nationkey#80L, n_name#81] Condition : isnotnull(n_nationkey#80L) "
          },
          "1" : {
            "sign" : -1035116191,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 900,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.nation Output [2]: [n_nationkey#80L, n_name#81] Batched: true Location: InMemoryFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation] PushedFilters: [IsNotNull(n_nationkey)] ReadSchema: struct<n_nationkey:bigint,n_name:string> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpch_100.nation",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter isnotnull(n_nationkey#80L)\n+- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#80L,n_name#81] Batched: true, DataFilters: [isnotnull(n_nationkey#80L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 900,
        "inputRowCount" : 25
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 2 ],
      "Objectives" : {
        "DurationInMs" : 1834,
        "TotalTasksDurationInMs" : 478,
        "IOBytes" : {
          "Total" : 2751,
          "Details" : {
            "IR" : 2751,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 997493028,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2091504,
                "rowCount" : 130719
              },
              "compileTime" : {
                "sizeInBytes" : 2091504,
                "rowCount" : 130719
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [p_partkey#4L] "
          },
          "1" : {
            "sign" : 240082787,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 25882362,
                "rowCount" : 130719
              },
              "compileTime" : {
                "sizeInBytes" : 25882362,
                "rowCount" : 130719
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(p_type#7) AND (p_type#7 = PROMO POLISHED TIN)) AND isnotnull(p_partkey#4L)) "
          },
          "2" : {
            "sign" : -879419419,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3960000000,
                "rowCount" : 20000000
              },
              "compileTime" : {
                "sizeInBytes" : 3960000000,
                "rowCount" : 20000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [p_partkey#4L, p_name#5, p_mfgr#6, p_type#7, p_size#8, p_container#9, p_retailprice#10, p_comment#11, p_brand#12], `spark_catalog`.`tpch_100`.`part`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [p_partkey#4L]\n+- Filter ((isnotnull(p_type#7) AND (p_type#7 = PROMO POLISHED TIN)) AND isnotnull(p_partkey#4L))\n   +- Relation spark_catalog.tpch_100.part[p_partkey#4L,p_name#5,p_mfgr#6,p_type#7,p_size#8,p_container#9,p_retailprice#10,p_comment#11,p_brand#12] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1869639775,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 2091504,
            "rowCount" : 130719,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [p_partkey#4L] Input [3]: [p_partkey#4L, p_type#7, p_brand#12] "
          },
          "1" : {
            "sign" : -1777590078,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 2091504,
            "rowCount" : 130719,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [p_partkey#4L, p_type#7, p_brand#12] Condition : ((isnotnull(p_type#7) AND (p_type#7 = PROMO POLISHED TIN)) AND isnotnull(p_partkey#4L)) "
          },
          "2" : {
            "sign" : -1313099392,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 2091504,
            "rowCount" : 130719,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.part Output [3]: [p_partkey#4L, p_type#7, p_brand#12] Batched: true Location: CatalogFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/part] PushedFilters: [IsNotNull(p_type), EqualTo(p_type,PROMO POLISHED TIN), IsNotNull(p_partkey)] ReadSchema: struct<p_partkey:bigint,p_type:string> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpch_100.part",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [p_partkey#4L]\n+- Filter ((isnotnull(p_type#7) AND (p_type#7 = PROMO POLISHED TIN)) AND isnotnull(p_partkey#4L))\n   +- FileScan parquet spark_catalog.tpch_100.part[p_partkey#4L,p_type#7,p_brand#12] Batched: true, DataFilters: [isnotnull(p_type#7), (p_type#7 = PROMO POLISHED TIN), isnotnull(p_partkey#4L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/part], PartitionFilters: [], PushedFilters: [IsNotNull(p_type), EqualTo(p_type,PROMO POLISHED TIN), IsNotNull(p_partkey)], ReadSchema: struct<p_partkey:bigint,p_type:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2091504,
        "inputRowCount" : 130719
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 2482,
        "TotalTasksDurationInMs" : 12106,
        "IOBytes" : {
          "Total" : 126517102,
          "Details" : {
            "IR" : 126517102,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 596393343,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 16,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 16,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [r_regionkey#57L] "
          },
          "1" : {
            "sign" : -452929127,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 113,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 113,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(r_name#58) AND (r_name#58 = AFRICA)) AND isnotnull(r_regionkey#57L)) "
          },
          "2" : {
            "sign" : 2065775226,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 565,
                "rowCount" : 5
              },
              "compileTime" : {
                "sizeInBytes" : 565,
                "rowCount" : 5
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [r_regionkey#57L, r_name#58, r_comment#59], `spark_catalog`.`tpch_100`.`region`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [r_regionkey#57L]\n+- Filter ((isnotnull(r_name#58) AND (r_name#58 = AFRICA)) AND isnotnull(r_regionkey#57L))\n   +- Relation spark_catalog.tpch_100.region[r_regionkey#57L,r_name#58,r_comment#59] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -2069729022,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [r_regionkey#57L] Input [2]: [r_regionkey#57L, r_name#58] "
          },
          "1" : {
            "sign" : 90116776,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [r_regionkey#57L, r_name#58] Condition : ((isnotnull(r_name#58) AND (r_name#58 = AFRICA)) AND isnotnull(r_regionkey#57L)) "
          },
          "2" : {
            "sign" : 1130956839,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.region Output [2]: [r_regionkey#57L, r_name#58] Batched: true Location: InMemoryFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/region] PushedFilters: [IsNotNull(r_name), EqualTo(r_name,AFRICA), IsNotNull(r_regionkey)] ReadSchema: struct<r_regionkey:bigint,r_name:string> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpch_100.region",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [r_regionkey#57L]\n+- Filter ((isnotnull(r_name#58) AND (r_name#58 = AFRICA)) AND isnotnull(r_regionkey#57L))\n   +- FileScan parquet spark_catalog.tpch_100.region[r_regionkey#57L,r_name#58] Batched: true, DataFilters: [isnotnull(r_name#58), (r_name#58 = AFRICA), isnotnull(r_regionkey#57L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/region], PartitionFilters: [], PushedFilters: [IsNotNull(r_name), EqualTo(r_name,AFRICA), IsNotNull(r_regionkey)], ReadSchema: struct<r_regionkey:bigint,r_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 16,
        "inputRowCount" : 1
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 4 ],
      "Objectives" : {
        "DurationInMs" : 2323,
        "TotalTasksDurationInMs" : 85,
        "IOBytes" : {
          "Total" : 1996,
          "Details" : {
            "IR" : 1996,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 1833644048,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3495000000,
                "rowCount" : 15000000
              },
              "compileTime" : {
                "sizeInBytes" : 3495000000,
                "rowCount" : 15000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [c_custkey#45L, c_name#46, c_address#47, c_nationkey#48L, c_phone#49, c_acctbal#50, c_comment#51, c_mktsegment#52], `spark_catalog`.`tpch_100`.`customer`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : 592178299,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 571021152,
                "rowCount" : 17844411
              },
              "compileTime" : {
                "sizeInBytes" : 571021152,
                "rowCount" : 17844411
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (c_nationkey#48L = n_nationkey#53L) "
          },
          "0" : {
            "sign" : -112553462,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 285510576,
                "rowCount" : 17844411
              },
              "compileTime" : {
                "sizeInBytes" : 285510576,
                "rowCount" : 17844411
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_custkey#45L] "
          },
          "2" : {
            "sign" : 413238535,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 360000000,
                "rowCount" : 15000000
              },
              "compileTime" : {
                "sizeInBytes" : 360000000,
                "rowCount" : 15000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [c_custkey#45L, c_nationkey#48L] "
          },
          "3" : {
            "sign" : -970090419,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3495000000,
                "rowCount" : 15000000
              },
              "compileTime" : {
                "sizeInBytes" : 3495000000,
                "rowCount" : 15000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(c_custkey#45L) AND isnotnull(c_nationkey#48L)) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [c_custkey#45L]\n+- Join Inner, (c_nationkey#48L = n_nationkey#53L)\n   :- Project [n_nationkey#53L]\n   :  +- Join Inner, (n_regionkey#55L = r_regionkey#57L)\n   :     :- Project [n_nationkey#53L, n_regionkey#55L]\n   :     :  +- Filter (isnotnull(n_nationkey#53L) AND isnotnull(n_regionkey#55L))\n   :     :     +- Relation spark_catalog.tpch_100.nation[n_nationkey#53L,n_name#54,n_regionkey#55L,n_comment#56] parquet\n   :     +- Project [r_regionkey#57L]\n   :        +- Filter ((isnotnull(r_name#58) AND (r_name#58 = AFRICA)) AND isnotnull(r_regionkey#57L))\n   :           +- Relation spark_catalog.tpch_100.region[r_regionkey#57L,r_name#58,r_comment#59] parquet\n   +- Project [c_custkey#45L, c_nationkey#48L]\n      +- Filter (isnotnull(c_custkey#45L) AND isnotnull(c_nationkey#48L))\n         +- Relation spark_catalog.tpch_100.customer[c_custkey#45L,c_name#46,c_address#47,c_nationkey#48L,c_phone#49,c_acctbal#50,c_comment#51,c_mktsegment#52] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 1573027554,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 360000000,
            "rowCount" : 15000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [c_custkey#45L, c_nationkey#48L, c_mktsegment#52] Condition : (isnotnull(c_custkey#45L) AND isnotnull(c_nationkey#48L)) "
          },
          "5" : {
            "sign" : -505902209,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 360000000,
            "rowCount" : 15000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.customer Output [3]: [c_custkey#45L, c_nationkey#48L, c_mktsegment#52] Batched: true Location: CatalogFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/customer] PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)] ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint> "
          },
          "1" : {
            "sign" : -1359931631,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 571021152,
            "rowCount" : 17844411,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [n_nationkey#53L] Right keys [1]: [c_nationkey#48L] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 1880860226,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 285510576,
            "rowCount" : 17844411,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [c_custkey#45L] Input [3]: [n_nationkey#53L, c_custkey#45L, c_nationkey#48L] "
          },
          "2" : {
            "sign" : 1688171280,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048712,
            "rowCount" : 5,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [n_nationkey#53L] Arguments: 5 "
          },
          "3" : {
            "sign" : -483143320,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 360000000,
            "rowCount" : 15000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [c_custkey#45L, c_nationkey#48L] Input [3]: [c_custkey#45L, c_nationkey#48L, c_mktsegment#52] "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Scan parquet spark_catalog.tpch_100.customer",
          "toId" : 4,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Filter",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [c_custkey#45L]\n+- BroadcastHashJoin [n_nationkey#53L], [c_nationkey#48L], Inner, BuildLeft, false\n   :- BroadcastQueryStage 5\n   :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=706]\n   :     +- *(6) Project [n_nationkey#53L]\n   :        +- *(6) BroadcastHashJoin [n_regionkey#55L], [r_regionkey#57L], Inner, BuildRight, false\n   :           :- *(6) Filter (isnotnull(n_nationkey#53L) AND isnotnull(n_regionkey#55L))\n   :           :  +- *(6) ColumnarToRow\n   :           :     +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#53L,n_regionkey#55L] Batched: true, DataFilters: [isnotnull(n_nationkey#53L), isnotnull(n_regionkey#55L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)], ReadSchema: struct<n_nationkey:bigint,n_regionkey:bigint>\n   :           +- BroadcastQueryStage 4\n   :              +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=381]\n   :                 +- *(5) Project [r_regionkey#57L]\n   :                    +- *(5) Filter ((isnotnull(r_name#58) AND (r_name#58 = AFRICA)) AND isnotnull(r_regionkey#57L))\n   :                       +- *(5) ColumnarToRow\n   :                          +- FileScan parquet spark_catalog.tpch_100.region[r_regionkey#57L,r_name#58] Batched: true, DataFilters: [isnotnull(r_name#58), (r_name#58 = AFRICA), isnotnull(r_regionkey#57L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/region], PartitionFilters: [], PushedFilters: [IsNotNull(r_name), EqualTo(r_name,AFRICA), IsNotNull(r_regionkey)], ReadSchema: struct<r_regionkey:bigint,r_name:string>\n   +- Project [c_custkey#45L, c_nationkey#48L]\n      +- Filter (isnotnull(c_custkey#45L) AND isnotnull(c_nationkey#48L))\n         +- FileScan parquet spark_catalog.tpch_100.customer[c_custkey#45L,c_nationkey#48L,c_mktsegment#52] Batched: true, DataFilters: [isnotnull(c_custkey#45L), isnotnull(c_nationkey#48L)], Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/customer], PartitionFilters: [], PushedFilters: [IsNotNull(c_custkey), IsNotNull(c_nationkey)], ReadSchema: struct<c_custkey:bigint,c_nationkey:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 361048712,
        "inputRowCount" : 15000005
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 9 ],
      "Objectives" : {
        "DurationInMs" : 13393,
        "TotalTasksDurationInMs" : 4727,
        "IOBytes" : {
          "Total" : 102256283,
          "Details" : {
            "IR" : 86367163,
            "IW" : 0,
            "SR" : 0,
            "SW" : 15889120
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -188402084,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 24000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 24000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_suppkey#13L, s_nationkey#16L] "
          },
          "1" : {
            "sign" : 1264449009,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 201000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 201000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(s_suppkey#13L) AND isnotnull(s_nationkey#16L)) "
          },
          "2" : {
            "sign" : 741471493,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 201000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 201000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_suppkey#13L, s_name#14, s_address#15, s_nationkey#16L, s_phone#17, s_acctbal#18, s_comment#19], `spark_catalog`.`tpch_100`.`supplier`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [s_suppkey#13L, s_nationkey#16L]\n+- Filter (isnotnull(s_suppkey#13L) AND isnotnull(s_nationkey#16L))\n   +- Relation spark_catalog.tpch_100.supplier[s_suppkey#13L,s_name#14,s_address#15,s_nationkey#16L,s_phone#17,s_acctbal#18,s_comment#19] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1095008337,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [s_suppkey#13L, s_nationkey#16L] Condition : (isnotnull(s_suppkey#13L) AND isnotnull(s_nationkey#16L)) "
          },
          "1" : {
            "sign" : -380356157,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.supplier Output [2]: [s_suppkey#13L, s_nationkey#16L] Batched: true Location: InMemoryFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier] PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)] ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpch_100.supplier",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(s_suppkey#13L) AND isnotnull(s_nationkey#16L))\n+- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#13L,s_nationkey#16L] Batched: true, DataFilters: [isnotnull(s_suppkey#13L), isnotnull(s_nationkey#16L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 24000000,
        "inputRowCount" : 1000000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 1 ],
      "Objectives" : {
        "DurationInMs" : 2546,
        "TotalTasksDurationInMs" : 25400,
        "IOBytes" : {
          "Total" : 16319432,
          "Details" : {
            "IR" : 5700125,
            "IW" : 0,
            "SR" : 0,
            "SW" : 10619307
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702226582987,
  "SQLEndTimeInMs" : 1702226619197,
  "Objectives" : {
    "DurationInMs" : 36210,
    "IOBytes" : {
      "Total" : 15712803409,
      "Details" : {
        "IR" : 13993356039,
        "IW" : 0,
        "SR" : 859723791,
        "SW" : 859723579
      }
    }
  }
}
