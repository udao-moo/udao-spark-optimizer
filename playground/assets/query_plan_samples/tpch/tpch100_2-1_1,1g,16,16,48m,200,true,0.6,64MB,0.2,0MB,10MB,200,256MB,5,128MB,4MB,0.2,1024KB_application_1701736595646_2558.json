{
  "CompileTimeLQP" : {
    "LQP" : {
      "operators" : {
        "45" : {
          "sign" : 454443118,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 201000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(s_suppkey#10L) AND isnotnull(s_nationkey#13L)) "
        },
        "34" : {
          "sign" : -810493053,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 13760000000,
          "rowCount" : 80000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ps_partkey#17L, ps_suppkey#18L, ps_availqty#19, ps_supplycost#20, ps_comment#21], `spark_catalog`.`tpch_100`.`partsupp`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "12" : {
          "sign" : -1474439777,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 446761968,
          "rowCount" : 18615082,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: isnotnull(min(ps_supplycost)#34) "
        },
        "8" : {
          "sign" : -1886079506,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 31968556,
          "rowCount" : 551182,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (p_partkey#1L = ps_partkey#36L) "
        },
        "19" : {
          "sign" : -161488744,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 800,
          "rowCount" : 25,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (n_regionkey#50L = r_regionkey#52L) "
        },
        "23" : {
          "sign" : 81312190,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 16,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [r_regionkey#52L] "
        },
        "4" : {
          "sign" : 354410661,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 20420940600,
          "rowCount" : 80082120,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#10L = ps_suppkey#18L) "
        },
        "40" : {
          "sign" : 667403019,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3275,
          "rowCount" : 25,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(n_nationkey#22L) AND isnotnull(n_regionkey#24L)) "
        },
        "15" : {
          "sign" : 589194733,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 3203284800,
          "rowCount" : 80082120,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#41L = ps_suppkey#37L) "
        },
        "11" : {
          "sign" : 597011287,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3960000000,
          "rowCount" : 20000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [p_partkey#1L, p_name#2, p_mfgr#3, p_type#4, p_size#5, p_container#6, p_retailprice#7, p_comment#8, p_brand#9], `spark_catalog`.`tpch_100`.`part`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "9" : {
          "sign" : -954680567,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 23149644,
          "rowCount" : 551182,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [p_partkey#1L, p_mfgr#3] "
        },
        "44" : {
          "sign" : -2097235748,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 565,
          "rowCount" : 5,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [r_regionkey#26L, r_name#27, r_comment#28], `spark_catalog`.`tpch_100`.`region`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "33" : {
          "sign" : 298215303,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 13760000000,
          "rowCount" : 80000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(ps_partkey#17L) AND (isnotnull(ps_supplycost#20) AND isnotnull(ps_suppkey#18L))) "
        },
        "22" : {
          "sign" : -1132970398,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3275,
          "rowCount" : 25,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [n_nationkey#48L, n_name#49, n_regionkey#50L, n_comment#51], `spark_catalog`.`tpch_100`.`nation`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "26" : {
          "sign" : 1090934807,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 24000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [s_suppkey#41L, s_nationkey#44L] "
        },
        "37" : {
          "sign" : -1226742924,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 900,
          "rowCount" : 25,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [n_nationkey#22L, n_name#23] "
        },
        "13" : {
          "sign" : 181972115,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
          "sizeInBytes" : 446761968,
          "rowCount" : 18615082,
          "isRuntime" : false,
          "predicate" : " (unknown) Aggregate Arguments: [ps_partkey#36L], [min(ps_supplycost#39) AS min(ps_supplycost)#34, ps_partkey#36L] "
        },
        "46" : {
          "sign" : -1689576478,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 201000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_suppkey#10L, s_name#11, s_address#12, s_nationkey#13L, s_phone#14, s_acctbal#15, s_comment#16], `spark_catalog`.`tpch_100`.`supplier`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "24" : {
          "sign" : 1611187285,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 113,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(r_name#53) AND (r_name#53 = ASIA)) AND isnotnull(r_regionkey#52L)) "
        },
        "35" : {
          "sign" : 585396446,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 253143045,
          "rowCount" : 1188465,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16] "
        },
        "16" : {
          "sign" : -2093426594,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 19015440,
          "rowCount" : 1188465,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [s_suppkey#41L] "
        },
        "5" : {
          "sign" : -1769240830,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 4003172850,
          "rowCount" : 80063457,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [p_partkey#1L, p_mfgr#3, ps_suppkey#18L] "
        },
        "10" : {
          "sign" : -1208981842,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 109134036,
          "rowCount" : 551182,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (((isnotnull(p_size#5) AND isnotnull(p_type#4)) AND ((p_size#5 = 38) AND EndsWith(p_type#4, STEEL))) AND isnotnull(p_partkey#1L)) "
        },
        "21" : {
          "sign" : -1672715566,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 3275,
          "rowCount" : 25,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(n_nationkey#48L) AND isnotnull(n_regionkey#50L)) "
        },
        "43" : {
          "sign" : 2058259793,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 113,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: ((isnotnull(r_name#27) AND (r_name#27 = ASIA)) AND isnotnull(r_regionkey#26L)) "
        },
        "32" : {
          "sign" : -768377307,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2560000000,
          "rowCount" : 80000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ps_partkey#17L, ps_suppkey#18L, ps_supplycost#20] "
        },
        "6" : {
          "sign" : 1833239722,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 5924695818,
          "rowCount" : 80063457,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, ((p_partkey#1L = ps_partkey#17L) AND (ps_supplycost#20 = min(ps_supplycost)#34)) "
        },
        "36" : {
          "sign" : 967393224,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 272158485,
          "rowCount" : 1188465,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#13L = n_nationkey#22L) "
        },
        "1" : {
          "sign" : -1939765673,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
          "sizeInBytes" : 19139626680,
          "rowCount" : 80082120,
          "isRuntime" : false,
          "predicate" : " (unknown) LocalLimit Arguments: 100 "
        },
        "39" : {
          "sign" : -404929387,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1100,
          "rowCount" : 25,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [n_nationkey#22L, n_name#23, n_regionkey#24L] "
        },
        "17" : {
          "sign" : -1781710976,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 38030880,
          "rowCount" : 1188465,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#44L = n_nationkey#48L) "
        },
        "25" : {
          "sign" : -1536805995,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 565,
          "rowCount" : 5,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [r_regionkey#52L, r_name#53, r_comment#54], `spark_catalog`.`tpch_100`.`region`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "14" : {
          "sign" : 2028389115,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 1921970880,
          "rowCount" : 80082120,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ps_partkey#36L, ps_supplycost#39] "
        },
        "31" : {
          "sign" : -1221742165,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 13760000000,
          "rowCount" : 80000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ps_partkey#36L, ps_suppkey#37L, ps_availqty#38, ps_supplycost#39, ps_comment#40], `spark_catalog`.`tpch_100`.`partsupp`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "42" : {
          "sign" : 1086441833,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 16,
          "rowCount" : 1,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [r_regionkey#26L] "
        },
        "0" : {
          "sign" : -165754132,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
          "sizeInBytes" : 14400,
          "rowCount" : 100,
          "isRuntime" : false,
          "predicate" : " (unknown) GlobalLimit Arguments: 100 "
        },
        "20" : {
          "sign" : -1341776661,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 600,
          "rowCount" : 25,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [n_nationkey#48L, n_regionkey#50L] "
        },
        "27" : {
          "sign" : 1496479692,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 201000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(s_suppkey#41L) AND isnotnull(s_nationkey#44L)) "
        },
        "2" : {
          "sign" : -457585386,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
          "sizeInBytes" : 19139626680,
          "rowCount" : 80082120,
          "isRuntime" : false,
          "predicate" : " (unknown) Sort Arguments: [s_acctbal#15 DESC NULLS LAST, n_name#23 ASC NULLS FIRST, s_name#11 ASC NULLS FIRST, p_partkey#1L ASC NULLS FIRST], true "
        },
        "38" : {
          "sign" : -1091961347,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
          "sizeInBytes" : 1300,
          "rowCount" : 25,
          "isRuntime" : false,
          "predicate" : " (unknown) Join Arguments: Inner, (n_regionkey#24L = r_regionkey#26L) "
        },
        "18" : {
          "sign" : -818093291,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 400,
          "rowCount" : 25,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [n_nationkey#48L] "
        },
        "30" : {
          "sign" : -1357142421,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
          "sizeInBytes" : 13760000000,
          "rowCount" : 80000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Filter Arguments: (isnotnull(ps_suppkey#37L) AND isnotnull(ps_partkey#36L)) "
        },
        "7" : {
          "sign" : -1169314938,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 27559100,
          "rowCount" : 551182,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [p_partkey#1L, p_mfgr#3, min(ps_supplycost)#34] "
        },
        "29" : {
          "sign" : -1893226881,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 2560000000,
          "rowCount" : 80000000,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [ps_partkey#36L, ps_suppkey#37L, ps_supplycost#39] "
        },
        "41" : {
          "sign" : -280792720,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 3275,
          "rowCount" : 25,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [n_nationkey#22L, n_name#23, n_regionkey#24L, n_comment#25], `spark_catalog`.`tpch_100`.`nation`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        },
        "3" : {
          "sign" : -238183418,
          "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
          "sizeInBytes" : 19139626680,
          "rowCount" : 80082120,
          "isRuntime" : false,
          "predicate" : " (unknown) Project Arguments: [s_acctbal#15, s_name#11, n_name#23, p_partkey#1L, p_mfgr#3, s_address#12, s_phone#14, s_comment#16] "
        },
        "28" : {
          "sign" : -1394495616,
          "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
          "sizeInBytes" : 201000000,
          "rowCount" : 1000000,
          "isRuntime" : false,
          "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_suppkey#41L, s_name#42, s_address#43, s_nationkey#44L, s_phone#45, s_acctbal#46, s_comment#47], `spark_catalog`.`tpch_100`.`supplier`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
        }
      },
      "links" : [ {
        "fromId" : 11,
        "fromName" : "LogicalRelation",
        "toId" : 10,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 10,
        "fromName" : "Filter",
        "toId" : 9,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 9,
        "fromName" : "Project",
        "toId" : 8,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 22,
        "fromName" : "LogicalRelation",
        "toId" : 21,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 21,
        "fromName" : "Filter",
        "toId" : 20,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 20,
        "fromName" : "Project",
        "toId" : 19,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 25,
        "fromName" : "LogicalRelation",
        "toId" : 24,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 24,
        "fromName" : "Filter",
        "toId" : 23,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 23,
        "fromName" : "Project",
        "toId" : 19,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 19,
        "fromName" : "Join",
        "toId" : 18,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 18,
        "fromName" : "Project",
        "toId" : 17,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 28,
        "fromName" : "LogicalRelation",
        "toId" : 27,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 27,
        "fromName" : "Filter",
        "toId" : 26,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 26,
        "fromName" : "Project",
        "toId" : 17,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 17,
        "fromName" : "Join",
        "toId" : 16,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 16,
        "fromName" : "Project",
        "toId" : 15,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 31,
        "fromName" : "LogicalRelation",
        "toId" : 30,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 30,
        "fromName" : "Filter",
        "toId" : 29,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 29,
        "fromName" : "Project",
        "toId" : 15,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 15,
        "fromName" : "Join",
        "toId" : 14,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 14,
        "fromName" : "Project",
        "toId" : 13,
        "toName" : "Aggregate",
        "linkType" : "Operator"
      }, {
        "fromId" : 13,
        "fromName" : "Aggregate",
        "toId" : 12,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 12,
        "fromName" : "Filter",
        "toId" : 8,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 8,
        "fromName" : "Join",
        "toId" : 7,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 7,
        "fromName" : "Project",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 34,
        "fromName" : "LogicalRelation",
        "toId" : 33,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 33,
        "fromName" : "Filter",
        "toId" : 32,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 32,
        "fromName" : "Project",
        "toId" : 6,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 6,
        "fromName" : "Join",
        "toId" : 5,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 5,
        "fromName" : "Project",
        "toId" : 4,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 41,
        "fromName" : "LogicalRelation",
        "toId" : 40,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 40,
        "fromName" : "Filter",
        "toId" : 39,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 39,
        "fromName" : "Project",
        "toId" : 38,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 44,
        "fromName" : "LogicalRelation",
        "toId" : 43,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 43,
        "fromName" : "Filter",
        "toId" : 42,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 42,
        "fromName" : "Project",
        "toId" : 38,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 38,
        "fromName" : "Join",
        "toId" : 37,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 37,
        "fromName" : "Project",
        "toId" : 36,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 46,
        "fromName" : "LogicalRelation",
        "toId" : 45,
        "toName" : "Filter",
        "linkType" : "Operator"
      }, {
        "fromId" : 45,
        "fromName" : "Filter",
        "toId" : 36,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 36,
        "fromName" : "Join",
        "toId" : 35,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 35,
        "fromName" : "Project",
        "toId" : 4,
        "toName" : "Join",
        "linkType" : "Operator"
      }, {
        "fromId" : 4,
        "fromName" : "Join",
        "toId" : 3,
        "toName" : "Project",
        "linkType" : "Operator"
      }, {
        "fromId" : 3,
        "fromName" : "Project",
        "toId" : 2,
        "toName" : "Sort",
        "linkType" : "Operator"
      }, {
        "fromId" : 2,
        "fromName" : "Sort",
        "toId" : 1,
        "toName" : "LocalLimit",
        "linkType" : "Operator"
      }, {
        "fromId" : 1,
        "fromName" : "LocalLimit",
        "toId" : 0,
        "toName" : "GlobalLimit",
        "linkType" : "Operator"
      } ],
      "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [s_acctbal#15 DESC NULLS LAST, n_name#23 ASC NULLS FIRST, s_name#11 ASC NULLS FIRST, p_partkey#1L ASC NULLS FIRST], true\n      +- Project [s_acctbal#15, s_name#11, n_name#23, p_partkey#1L, p_mfgr#3, s_address#12, s_phone#14, s_comment#16]\n         +- Join Inner, (s_suppkey#10L = ps_suppkey#18L)\n            :- Project [p_partkey#1L, p_mfgr#3, ps_suppkey#18L]\n            :  +- Join Inner, ((p_partkey#1L = ps_partkey#17L) AND (ps_supplycost#20 = min(ps_supplycost)#34))\n            :     :- Project [p_partkey#1L, p_mfgr#3, min(ps_supplycost)#34]\n            :     :  +- Join Inner, (p_partkey#1L = ps_partkey#36L)\n            :     :     :- Project [p_partkey#1L, p_mfgr#3]\n            :     :     :  +- Filter (((isnotnull(p_size#5) AND isnotnull(p_type#4)) AND ((p_size#5 = 38) AND EndsWith(p_type#4, STEEL))) AND isnotnull(p_partkey#1L))\n            :     :     :     +- Relation spark_catalog.tpch_100.part[p_partkey#1L,p_name#2,p_mfgr#3,p_type#4,p_size#5,p_container#6,p_retailprice#7,p_comment#8,p_brand#9] parquet\n            :     :     +- Filter isnotnull(min(ps_supplycost)#34)\n            :     :        +- Aggregate [ps_partkey#36L], [min(ps_supplycost#39) AS min(ps_supplycost)#34, ps_partkey#36L]\n            :     :           +- Project [ps_partkey#36L, ps_supplycost#39]\n            :     :              +- Join Inner, (s_suppkey#41L = ps_suppkey#37L)\n            :     :                 :- Project [s_suppkey#41L]\n            :     :                 :  +- Join Inner, (s_nationkey#44L = n_nationkey#48L)\n            :     :                 :     :- Project [n_nationkey#48L]\n            :     :                 :     :  +- Join Inner, (n_regionkey#50L = r_regionkey#52L)\n            :     :                 :     :     :- Project [n_nationkey#48L, n_regionkey#50L]\n            :     :                 :     :     :  +- Filter (isnotnull(n_nationkey#48L) AND isnotnull(n_regionkey#50L))\n            :     :                 :     :     :     +- Relation spark_catalog.tpch_100.nation[n_nationkey#48L,n_name#49,n_regionkey#50L,n_comment#51] parquet\n            :     :                 :     :     +- Project [r_regionkey#52L]\n            :     :                 :     :        +- Filter ((isnotnull(r_name#53) AND (r_name#53 = ASIA)) AND isnotnull(r_regionkey#52L))\n            :     :                 :     :           +- Relation spark_catalog.tpch_100.region[r_regionkey#52L,r_name#53,r_comment#54] parquet\n            :     :                 :     +- Project [s_suppkey#41L, s_nationkey#44L]\n            :     :                 :        +- Filter (isnotnull(s_suppkey#41L) AND isnotnull(s_nationkey#44L))\n            :     :                 :           +- Relation spark_catalog.tpch_100.supplier[s_suppkey#41L,s_name#42,s_address#43,s_nationkey#44L,s_phone#45,s_acctbal#46,s_comment#47] parquet\n            :     :                 +- Project [ps_partkey#36L, ps_suppkey#37L, ps_supplycost#39]\n            :     :                    +- Filter (isnotnull(ps_suppkey#37L) AND isnotnull(ps_partkey#36L))\n            :     :                       +- Relation spark_catalog.tpch_100.partsupp[ps_partkey#36L,ps_suppkey#37L,ps_availqty#38,ps_supplycost#39,ps_comment#40] parquet\n            :     +- Project [ps_partkey#17L, ps_suppkey#18L, ps_supplycost#20]\n            :        +- Filter (isnotnull(ps_partkey#17L) AND (isnotnull(ps_supplycost#20) AND isnotnull(ps_suppkey#18L)))\n            :           +- Relation spark_catalog.tpch_100.partsupp[ps_partkey#17L,ps_suppkey#18L,ps_availqty#19,ps_supplycost#20,ps_comment#21] parquet\n            +- Project [n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16]\n               +- Join Inner, (s_nationkey#13L = n_nationkey#22L)\n                  :- Project [n_nationkey#22L, n_name#23]\n                  :  +- Join Inner, (n_regionkey#24L = r_regionkey#26L)\n                  :     :- Project [n_nationkey#22L, n_name#23, n_regionkey#24L]\n                  :     :  +- Filter (isnotnull(n_nationkey#22L) AND isnotnull(n_regionkey#24L))\n                  :     :     +- Relation spark_catalog.tpch_100.nation[n_nationkey#22L,n_name#23,n_regionkey#24L,n_comment#25] parquet\n                  :     +- Project [r_regionkey#26L]\n                  :        +- Filter ((isnotnull(r_name#27) AND (r_name#27 = ASIA)) AND isnotnull(r_regionkey#26L))\n                  :           +- Relation spark_catalog.tpch_100.region[r_regionkey#26L,r_name#27,r_comment#28] parquet\n                  +- Filter (isnotnull(s_suppkey#10L) AND isnotnull(s_nationkey#13L))\n                     +- Relation spark_catalog.tpch_100.supplier[s_suppkey#10L,s_name#11,s_address#12,s_nationkey#13L,s_phone#14,s_acctbal#15,s_comment#16] parquet\n"
    },
    "IM" : {
      "inputSizeInBytes" : 31882007680,
      "inputRowCount" : 182000060
    },
    "PD" : { },
    "Configuration" : {
      "theta_c" : [ {
        "spark.executor.memory" : "1g"
      }, {
        "spark.executor.cores" : "1"
      }, {
        "spark.executor.instances" : "16"
      }, {
        "spark.default.parallelism" : "16"
      }, {
        "spark.reducer.maxSizeInFlight" : "48m"
      }, {
        "spark.shuffle.sort.bypassMergeThreshold" : "200"
      }, {
        "spark.shuffle.compress" : "true"
      }, {
        "spark.memory.fraction" : "0.6"
      } ],
      "theta_p" : [ {
        "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
      }, {
        "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
      }, {
        "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
      }, {
        "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
      }, {
        "spark.sql.shuffle.partitions" : "200"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
      }, {
        "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
      }, {
        "spark.sql.files.maxPartitionBytes" : "128MB"
      }, {
        "spark.sql.files.openCostInBytes" : "4MB"
      } ],
      "theta_s" : [ {
        "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
      }, {
        "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
      } ]
    }
  },
  "RuntimeLQPs" : {
    "12" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : 1706252396,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1508186491680,
            "rowCount" : 9426165573,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#10L = ps_suppkey#18L) "
          },
          "5" : {
            "sign" : -860872088,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2263536,
            "rowCount" : 47157,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_partkey#1L, p_mfgr#3, ps_suppkey#18L], ShuffleQueryStage 13 "
          },
          "6" : {
            "sign" : 1323085775,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 41605872,
            "rowCount" : 199889,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16], ShuffleQueryStage 9 "
          },
          "1" : {
            "sign" : -1463391620,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 1357367842512,
            "rowCount" : 9426165573,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -1719287181,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 14400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -212734627,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1357367842512,
            "rowCount" : 9426165573,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [s_acctbal#15 DESC NULLS LAST, n_name#23 ASC NULLS FIRST, s_name#11 ASC NULLS FIRST, p_partkey#1L ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : -1100520917,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1357367842512,
            "rowCount" : 9426165573,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_acctbal#15, s_name#11, n_name#23, p_partkey#1L, p_mfgr#3, s_address#12, s_phone#14, s_comment#16] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [s_acctbal#15 DESC NULLS LAST, n_name#23 ASC NULLS FIRST, s_name#11 ASC NULLS FIRST, p_partkey#1L ASC NULLS FIRST], true\n      +- Project [s_acctbal#15, s_name#11, n_name#23, p_partkey#1L, p_mfgr#3, s_address#12, s_phone#14, s_comment#16]\n         +- Join Inner, (s_suppkey#10L = ps_suppkey#18L)\n            :- LogicalQueryStage Project [p_partkey#1L, p_mfgr#3, ps_suppkey#18L], ShuffleQueryStage 13\n            +- LogicalQueryStage Project [n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16], ShuffleQueryStage 9\n"
      },
      "IM" : {
        "inputSizeInBytes" : 43869408,
        "inputRowCount" : 247046
      },
      "PD" : {
        "3" : [ 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 112177, 123395, 112177, 123395, 123395, 123395, 123395, 112177, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 135735, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 123395, 112177, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 135735, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 135735, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 112177, 123395, 123395, 112177, 123395, 112177, 112177, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395 ],
        "6" : [ 7402, 6904, 6704, 6988, 6938, 7238, 6192, 6950, 6908, 6592, 7157, 7107, 7367, 6624, 6689, 6882, 6990, 6938, 6532, 6960, 6775, 7369, 6982, 6701, 6758, 6815, 7771, 7088, 7011, 7397, 6791, 6935, 7658, 6814, 7391, 6353, 6487, 6450, 7488, 6700, 7047, 6701, 6824, 7229, 6800, 6935, 7385, 6354, 7038, 6825, 7595, 7127, 6873, 6690, 6828, 6809, 7259, 6734, 6626, 7131, 6639, 6973, 6468, 7491, 6641, 6634, 6915, 6437, 7001, 7194, 7189, 6806, 6882, 7026, 7439, 6765, 6587, 7069, 6874, 7084, 6668, 7064, 6492, 6681, 6929, 6565, 6854, 7301, 6840, 6284, 7206, 7155, 7225, 6539, 7037, 7478, 7444, 6799, 7735, 7158, 7871, 7458, 6764, 7367, 7450, 7154, 8097, 7122, 7375, 7248, 6975, 6718, 7253, 7094, 7059, 7138, 6417, 7332, 7090, 7510, 6844, 6708, 6984, 6685, 6739, 6972, 7006, 7229, 6955, 7263, 7559, 6731, 6644, 6804, 7023, 7320, 7011, 6800, 7099, 7050, 7012, 7221, 6647, 6632, 7530, 6926, 7118, 7218, 7476, 7300, 7039, 7256, 6484, 6626, 7461, 7264, 6888, 7366, 6809, 7266, 7493, 6342, 7008, 6473, 6870, 6470, 6522, 6501, 6815, 6817, 7283, 7115, 6776, 6356, 6896, 6825, 7219, 7028, 6628, 6961, 6947, 7305, 6995, 7289, 6818, 7169, 7307, 7153, 7385, 6286, 6572, 7325, 6805, 7792, 7643, 6860, 6797, 7120, 7219, 6713 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226566425,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 687,
        "IOBytes" : {
          "Total" : 24598061,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 24598061,
            "SW" : 0
          }
        }
      }
    },
    "8" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -1761984705,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ps_partkey#17L, ps_suppkey#18L, ps_supplycost#20], ShuffleQueryStage 3 "
          },
          "8" : {
            "sign" : -1439576615,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 80530636800000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (p_partkey#1L = ps_partkey#66L) "
          },
          "4" : {
            "sign" : -1967516711,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4696224218703858581429827143214944370944,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#10L = ps_suppkey#18L) "
          },
          "11" : {
            "sign" : -1647533693,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 9600000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ps_partkey#66L], [min(ps_supplycost#69) AS min(ps_supplycost)#65, ps_partkey#66L], HashAggregate(keys=[ps_partkey#66L], functions=[min(ps_supplycost#69)]) "
          },
          "9" : {
            "sign" : -544691481,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8388608,
            "rowCount" : 80479,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Project [p_partkey#1L, p_mfgr#3], ShuffleQueryStage 0, BroadcastQueryStage 8 "
          },
          "13" : {
            "sign" : 1323085775,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 41605872,
            "rowCount" : 199889,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16], ShuffleQueryStage 9 "
          },
          "5" : {
            "sign" : -1344762349,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 112874072647819004524885985882352,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [p_partkey#1L, p_mfgr#3, ps_suppkey#18L] "
          },
          "10" : {
            "sign" : -1217191163,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 9600000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(min(ps_supplycost)#65) "
          },
          "6" : {
            "sign" : -411340671,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 174441748637538461538460160000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((p_partkey#1L = ps_partkey#17L) AND (ps_supplycost#20 = min(ps_supplycost)#65)) "
          },
          "1" : {
            "sign" : -1080819463,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 4226601796833472723286844428893449933849,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 294418784,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 14400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 730536970,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 4226601796833472723286844428893449933849,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [s_acctbal#15 DESC NULLS LAST, n_name#23 ASC NULLS FIRST, s_name#11 ASC NULLS FIRST, p_partkey#1L ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 25172235,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 68141308061538461538461,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [p_partkey#1L, p_mfgr#3, min(ps_supplycost)#65] "
          },
          "3" : {
            "sign" : -630620886,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4226601796833472723286844428893449933849,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_acctbal#15, s_name#11, n_name#23, p_partkey#1L, p_mfgr#3, s_address#12, s_phone#14, s_comment#16] "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [s_acctbal#15 DESC NULLS LAST, n_name#23 ASC NULLS FIRST, s_name#11 ASC NULLS FIRST, p_partkey#1L ASC NULLS FIRST], true\n      +- Project [s_acctbal#15, s_name#11, n_name#23, p_partkey#1L, p_mfgr#3, s_address#12, s_phone#14, s_comment#16]\n         +- Join Inner, (s_suppkey#10L = ps_suppkey#18L)\n            :- Project [p_partkey#1L, p_mfgr#3, ps_suppkey#18L]\n            :  +- Join Inner, ((p_partkey#1L = ps_partkey#17L) AND (ps_supplycost#20 = min(ps_supplycost)#65))\n            :     :- Project [p_partkey#1L, p_mfgr#3, min(ps_supplycost)#65]\n            :     :  +- Join Inner, (p_partkey#1L = ps_partkey#66L)\n            :     :     :- LogicalQueryStage LogicalQueryStage Project [p_partkey#1L, p_mfgr#3], ShuffleQueryStage 0, BroadcastQueryStage 8\n            :     :     +- Filter isnotnull(min(ps_supplycost)#65)\n            :     :        +- LogicalQueryStage Aggregate [ps_partkey#66L], [min(ps_supplycost#69) AS min(ps_supplycost)#65, ps_partkey#66L], HashAggregate(keys=[ps_partkey#66L], functions=[min(ps_supplycost#69)])\n            :     +- LogicalQueryStage Project [ps_partkey#17L, ps_suppkey#18L, ps_supplycost#20], ShuffleQueryStage 3\n            +- LogicalQueryStage Project [n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16], ShuffleQueryStage 9\n"
      },
      "IM" : {
        "inputSizeInBytes" : 9600002609994480,
        "inputRowCount" : 80280368
      },
      "PD" : {
        "3" : [ 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 112177, 123395, 112177, 123395, 123395, 123395, 123395, 112177, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 135735, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 123395, 112177, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 135735, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 135735, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 112177, 123395, 123395, 112177, 123395, 112177, 112177, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 34,
        "FinishedTasksTotalTimeInMs" : 53968.0,
        "FinishedTasksDistributionInMs" : [ 800.0, 1348.0, 1430.0, 1622.0, 3214.0 ]
      },
      "StartTimeInMs" : 1702226555130,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 11982,
        "IOBytes" : {
          "Total" : 5820846245,
          "Details" : {
            "IR" : 1089236947,
            "IW" : 0,
            "SR" : 3090449374,
            "SW" : 1641159924
          }
        }
      }
    },
    "4" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1076459106,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2281852800000000,
            "rowCount" : 95077200000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ps_partkey#66L, ps_supplycost#69] "
          },
          "8" : {
            "sign" : -947209457,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2281852803219160,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (p_partkey#1L = ps_partkey#66L) "
          },
          "19" : {
            "sign" : 953547453,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 201000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_suppkey#71L, s_name#72, s_address#73, s_nationkey#74L, s_phone#75, s_acctbal#76, s_comment#77], `spark_catalog`.`tpch_100`.`supplier`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "23" : {
            "sign" : 1787826314,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1145000000,
            "rowCount" : 5000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#13L = n_nationkey#22L) "
          },
          "4" : {
            "sign" : 1435796076,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3406201182833948356517646495000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#10L = ps_suppkey#18L) "
          },
          "15" : {
            "sign" : -1418722620,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 38030880,
            "rowCount" : 1188465,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#74L = n_nationkey#78L) "
          },
          "11" : {
            "sign" : 1036307449,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 2281852800000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ps_partkey#66L], [min(ps_supplycost#69) AS min(ps_supplycost)#65, ps_partkey#66L] "
          },
          "9" : {
            "sign" : -544691481,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3219160,
            "rowCount" : 80479,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Project [p_partkey#1L, p_mfgr#3], ShuffleQueryStage 0, BroadcastQueryStage 8 "
          },
          "22" : {
            "sign" : 52125162,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1065000000,
            "rowCount" : 5000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16] "
          },
          "26" : {
            "sign" : -1689576478,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 201000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_suppkey#10L, s_name#11, s_address#12, s_nationkey#13L, s_phone#14, s_acctbal#15, s_comment#16], `spark_catalog`.`tpch_100`.`supplier`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "13" : {
            "sign" : 715450708,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3803088000000000,
            "rowCount" : 95077200000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#71L = ps_suppkey#67L) "
          },
          "24" : {
            "sign" : -1236053098,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048688,
            "rowCount" : 5,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#22L, n_name#23], BroadcastQueryStage 7 "
          },
          "16" : {
            "sign" : 1864985650,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 400,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#78L], BroadcastQueryStage 6 "
          },
          "5" : {
            "sign" : 397811203,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3198310969797134607058823,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [p_partkey#1L, p_mfgr#3, ps_suppkey#18L] "
          },
          "10" : {
            "sign" : 1530991581,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 2281852800000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(min(ps_supplycost)#65) "
          },
          "21" : {
            "sign" : -1761984705,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ps_partkey#17L, ps_suppkey#18L, ps_supplycost#20], ShuffleQueryStage 3 "
          },
          "6" : {
            "sign" : 621419017,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4942844226050117120000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((p_partkey#1L = ps_partkey#17L) AND (ps_supplycost#20 = min(ps_supplycost)#65)) "
          },
          "1" : {
            "sign" : 1731334912,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 3065581064550553520865881845500000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -1566196204,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_suppkey#71L, s_nationkey#74L] "
          },
          "25" : {
            "sign" : 454443118,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 201000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(s_suppkey#10L) AND isnotnull(s_nationkey#13L)) "
          },
          "14" : {
            "sign" : 350145127,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 19015440,
            "rowCount" : 1188465,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_suppkey#71L] "
          },
          "0" : {
            "sign" : 161124915,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 14400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 2055423279,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ps_partkey#66L, ps_suppkey#67L, ps_supplycost#69], ShuffleQueryStage 2 "
          },
          "2" : {
            "sign" : 546229533,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 3065581064550553520865881845500000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [s_acctbal#15 DESC NULLS LAST, n_name#23 ASC NULLS FIRST, s_name#11 ASC NULLS FIRST, p_partkey#1L ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 836858537,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 201000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(s_suppkey#71L) AND isnotnull(s_nationkey#74L)) "
          },
          "7" : {
            "sign" : 1589376727,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1930798525800827,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [p_partkey#1L, p_mfgr#3, min(ps_supplycost)#65] "
          },
          "3" : {
            "sign" : 612635503,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3065581064550553520865881845500000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_acctbal#15, s_name#11, n_name#23, p_partkey#1L, p_mfgr#3, s_address#12, s_phone#14, s_comment#16] "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalRelation",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Filter",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Aggregate",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalQueryStage",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "LogicalRelation",
          "toId" : 25,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Filter",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Join",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [s_acctbal#15 DESC NULLS LAST, n_name#23 ASC NULLS FIRST, s_name#11 ASC NULLS FIRST, p_partkey#1L ASC NULLS FIRST], true\n      +- Project [s_acctbal#15, s_name#11, n_name#23, p_partkey#1L, p_mfgr#3, s_address#12, s_phone#14, s_comment#16]\n         +- Join Inner, (s_suppkey#10L = ps_suppkey#18L)\n            :- Project [p_partkey#1L, p_mfgr#3, ps_suppkey#18L]\n            :  +- Join Inner, ((p_partkey#1L = ps_partkey#17L) AND (ps_supplycost#20 = min(ps_supplycost)#65))\n            :     :- Project [p_partkey#1L, p_mfgr#3, min(ps_supplycost)#65]\n            :     :  +- Join Inner, (p_partkey#1L = ps_partkey#66L)\n            :     :     :- LogicalQueryStage LogicalQueryStage Project [p_partkey#1L, p_mfgr#3], ShuffleQueryStage 0, BroadcastQueryStage 8\n            :     :     +- Filter isnotnull(min(ps_supplycost)#65)\n            :     :        +- Aggregate [ps_partkey#66L], [min(ps_supplycost#69) AS min(ps_supplycost)#65, ps_partkey#66L]\n            :     :           +- Project [ps_partkey#66L, ps_supplycost#69]\n            :     :              +- Join Inner, (s_suppkey#71L = ps_suppkey#67L)\n            :     :                 :- Project [s_suppkey#71L]\n            :     :                 :  +- Join Inner, (s_nationkey#74L = n_nationkey#78L)\n            :     :                 :     :- LogicalQueryStage Project [n_nationkey#78L], BroadcastQueryStage 6\n            :     :                 :     +- Project [s_suppkey#71L, s_nationkey#74L]\n            :     :                 :        +- Filter (isnotnull(s_suppkey#71L) AND isnotnull(s_nationkey#74L))\n            :     :                 :           +- Relation spark_catalog.tpch_100.supplier[s_suppkey#71L,s_name#72,s_address#73,s_nationkey#74L,s_phone#75,s_acctbal#76,s_comment#77] parquet\n            :     :                 +- LogicalQueryStage Project [ps_partkey#66L, ps_suppkey#67L, ps_supplycost#69], ShuffleQueryStage 2\n            :     +- LogicalQueryStage Project [ps_partkey#17L, ps_suppkey#18L, ps_supplycost#20], ShuffleQueryStage 3\n            +- Project [n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16]\n               +- Join Inner, (s_nationkey#13L = n_nationkey#22L)\n                  :- LogicalQueryStage Project [n_nationkey#22L, n_name#23], BroadcastQueryStage 7\n                  +- Filter (isnotnull(s_suppkey#10L) AND isnotnull(s_nationkey#13L))\n                     +- Relation spark_catalog.tpch_100.supplier[s_suppkey#10L,s_name#11,s_address#12,s_nationkey#13L,s_phone#14,s_acctbal#15,s_comment#16] parquet\n"
      },
      "IM" : {
        "inputSizeInBytes" : 5526268248,
        "inputRowCount" : 162080509
      },
      "PD" : {
        "1" : [ 7357167, 7555897, 7555897, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7536024, 7568237, 7568237, 7568237, 7436659, 7568237, 7555897, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7536024, 7568237, 7496278, 7568237, 7568237, 7568237, 7548364, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7536024, 7516151, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7496278, 7568237, 7568237, 7536024, 7568237, 7568237, 7568237, 7568237, 7548364, 7456532, 7568237, 7555897, 7568237, 7555897, 7555897, 7568237, 7555897, 7555897, 7568237, 7568237, 7568237, 7568237, 7337294, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7536024, 7536024, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7548364, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7555897, 7568237, 7555897, 7568237, 7396913, 7555897, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7516151, 7568237, 7568237, 7568237, 7568237, 7536024, 7568237, 7568237, 7416786, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7516151, 7568237, 7568237, 7568237, 7436659, 7555897, 7516151, 7568237, 7555897, 7568237, 7568237, 7548364, 7568237, 7568237, 7568237, 7568237, 7568237, 7516151, 7568237, 7568237, 7568237, 7555897 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 13,
        "FinishedTasksNum" : 24,
        "FinishedTasksTotalTimeInMs" : 40248.0,
        "FinishedTasksDistributionInMs" : [ 1232.0, 1358.0, 1430.0, 1834.0, 3214.0 ]
      },
      "StartTimeInMs" : 1702226553697,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 13415,
        "IOBytes" : {
          "Total" : 5933997763,
          "Details" : {
            "IR" : 1177066642,
            "IW" : 0,
            "SR" : 3091475579,
            "SW" : 1665455542
          }
        }
      }
    },
    "11" : {
      "LQP" : {
        "operators" : {
          "8" : {
            "sign" : -1761984705,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ps_partkey#17L, ps_suppkey#18L, ps_supplycost#20], ShuffleQueryStage 3 "
          },
          "4" : {
            "sign" : -1737491983,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 120654919334400000000,
            "rowCount" : 754093245840000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#10L = ps_suppkey#18L) "
          },
          "9" : {
            "sign" : 1323085775,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 41605872,
            "rowCount" : 199889,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16], ShuffleQueryStage 9 "
          },
          "5" : {
            "sign" : -1435508727,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 165992640000000,
            "rowCount" : 3772560000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [p_partkey#1L, p_mfgr#3, ps_suppkey#18L] "
          },
          "6" : {
            "sign" : -353749689,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 256534080000000,
            "rowCount" : 3772560000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((p_partkey#1L = ps_partkey#17L) AND (ps_supplycost#20 = min(ps_supplycost)#65)) "
          },
          "1" : {
            "sign" : 1260605869,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 108589427400960000000,
            "rowCount" : 754093245840000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 530601034,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 14400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 333143648,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 108589427400960000000,
            "rowCount" : 754093245840000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [s_acctbal#15 DESC NULLS LAST, n_name#23 ASC NULLS FIRST, s_name#11 ASC NULLS FIRST, p_partkey#1L ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : -798283797,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 35651584,
            "rowCount" : 47157,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_partkey#1L, p_mfgr#3, min(ps_supplycost)#65], BroadcastQueryStage 12 "
          },
          "3" : {
            "sign" : -1364282980,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 108589427400960000000,
            "rowCount" : 754093245840000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_acctbal#15, s_name#11, n_name#23, p_partkey#1L, p_mfgr#3, s_address#12, s_phone#14, s_comment#16] "
          }
        },
        "links" : [ {
          "fromId" : 7,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [s_acctbal#15 DESC NULLS LAST, n_name#23 ASC NULLS FIRST, s_name#11 ASC NULLS FIRST, p_partkey#1L ASC NULLS FIRST], true\n      +- Project [s_acctbal#15, s_name#11, n_name#23, p_partkey#1L, p_mfgr#3, s_address#12, s_phone#14, s_comment#16]\n         +- Join Inner, (s_suppkey#10L = ps_suppkey#18L)\n            :- Project [p_partkey#1L, p_mfgr#3, ps_suppkey#18L]\n            :  +- Join Inner, ((p_partkey#1L = ps_partkey#17L) AND (ps_supplycost#20 = min(ps_supplycost)#65))\n            :     :- LogicalQueryStage Project [p_partkey#1L, p_mfgr#3, min(ps_supplycost)#65], BroadcastQueryStage 12\n            :     +- LogicalQueryStage Project [ps_partkey#17L, ps_suppkey#18L, ps_supplycost#20], ShuffleQueryStage 3\n            +- LogicalQueryStage Project [n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16], ShuffleQueryStage 9\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2637257456,
        "inputRowCount" : 80247046
      },
      "PD" : {
        "2" : [ 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237 ],
        "3" : [ 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 112177, 123395, 112177, 123395, 123395, 123395, 123395, 112177, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 135735, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 123395, 112177, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 135735, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 135735, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 112177, 123395, 123395, 112177, 123395, 112177, 112177, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226563985,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 3127,
        "IOBytes" : {
          "Total" : 1462905450,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1461570000,
            "SW" : 1335450
          }
        }
      }
    },
    "9" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -1761984705,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ps_partkey#17L, ps_suppkey#18L, ps_supplycost#20], ShuffleQueryStage 3 "
          },
          "8" : {
            "sign" : -1439576615,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 80530636800000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (p_partkey#1L = ps_partkey#66L) "
          },
          "4" : {
            "sign" : -1967516711,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4696224218703858581429827143214944370944,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#10L = ps_suppkey#18L) "
          },
          "11" : {
            "sign" : -1647533693,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 9600000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ps_partkey#66L], [min(ps_supplycost#69) AS min(ps_supplycost)#65, ps_partkey#66L], HashAggregate(keys=[ps_partkey#66L], functions=[min(ps_supplycost#69)]) "
          },
          "9" : {
            "sign" : -544691481,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8388608,
            "rowCount" : 80479,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Project [p_partkey#1L, p_mfgr#3], ShuffleQueryStage 0, BroadcastQueryStage 8 "
          },
          "13" : {
            "sign" : 1323085775,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 41605872,
            "rowCount" : 199889,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16], ShuffleQueryStage 9 "
          },
          "5" : {
            "sign" : -1344762349,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 112874072647819004524885985882352,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [p_partkey#1L, p_mfgr#3, ps_suppkey#18L] "
          },
          "10" : {
            "sign" : -1217191163,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 9600000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(min(ps_supplycost)#65) "
          },
          "6" : {
            "sign" : -411340671,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 174441748637538461538460160000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((p_partkey#1L = ps_partkey#17L) AND (ps_supplycost#20 = min(ps_supplycost)#65)) "
          },
          "1" : {
            "sign" : -1080819463,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 4226601796833472723286844428893449933849,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 294418784,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 14400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 730536970,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 4226601796833472723286844428893449933849,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [s_acctbal#15 DESC NULLS LAST, n_name#23 ASC NULLS FIRST, s_name#11 ASC NULLS FIRST, p_partkey#1L ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 25172235,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 68141308061538461538461,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [p_partkey#1L, p_mfgr#3, min(ps_supplycost)#65] "
          },
          "3" : {
            "sign" : -630620886,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4226601796833472723286844428893449933849,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_acctbal#15, s_name#11, n_name#23, p_partkey#1L, p_mfgr#3, s_address#12, s_phone#14, s_comment#16] "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [s_acctbal#15 DESC NULLS LAST, n_name#23 ASC NULLS FIRST, s_name#11 ASC NULLS FIRST, p_partkey#1L ASC NULLS FIRST], true\n      +- Project [s_acctbal#15, s_name#11, n_name#23, p_partkey#1L, p_mfgr#3, s_address#12, s_phone#14, s_comment#16]\n         +- Join Inner, (s_suppkey#10L = ps_suppkey#18L)\n            :- Project [p_partkey#1L, p_mfgr#3, ps_suppkey#18L]\n            :  +- Join Inner, ((p_partkey#1L = ps_partkey#17L) AND (ps_supplycost#20 = min(ps_supplycost)#65))\n            :     :- Project [p_partkey#1L, p_mfgr#3, min(ps_supplycost)#65]\n            :     :  +- Join Inner, (p_partkey#1L = ps_partkey#66L)\n            :     :     :- LogicalQueryStage LogicalQueryStage Project [p_partkey#1L, p_mfgr#3], ShuffleQueryStage 0, BroadcastQueryStage 8\n            :     :     +- Filter isnotnull(min(ps_supplycost)#65)\n            :     :        +- LogicalQueryStage Aggregate [ps_partkey#66L], [min(ps_supplycost#69) AS min(ps_supplycost)#65, ps_partkey#66L], HashAggregate(keys=[ps_partkey#66L], functions=[min(ps_supplycost#69)])\n            :     +- LogicalQueryStage Project [ps_partkey#17L, ps_suppkey#18L, ps_supplycost#20], ShuffleQueryStage 3\n            +- LogicalQueryStage Project [n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16], ShuffleQueryStage 9\n"
      },
      "IM" : {
        "inputSizeInBytes" : 9600002609994480,
        "inputRowCount" : 80280368
      },
      "PD" : {
        "2" : [ 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237 ],
        "3" : [ 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 112177, 123395, 112177, 123395, 123395, 123395, 123395, 112177, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 135735, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 123395, 112177, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 135735, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 135735, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 112177, 123395, 123395, 112177, 123395, 112177, 112177, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226555364,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 11748,
        "IOBytes" : {
          "Total" : 3294637359,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 3090449374,
            "SW" : 204187985
          }
        }
      }
    },
    "13" : {
      "LQP" : {
        "operators" : {
          "4" : {
            "sign" : 1764288427,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1508186491680,
            "rowCount" : 9426165573,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#10L = ps_suppkey#18L) "
          },
          "5" : {
            "sign" : -2006885465,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 6291456,
            "rowCount" : 47157,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Project [p_partkey#1L, p_mfgr#3, ps_suppkey#18L], ShuffleQueryStage 13, BroadcastQueryStage 14 "
          },
          "6" : {
            "sign" : 1323085775,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 41605872,
            "rowCount" : 199889,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16], ShuffleQueryStage 9 "
          },
          "1" : {
            "sign" : 1805310621,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 1357367842512,
            "rowCount" : 9426165573,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -772124046,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 14400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1887945756,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 1357367842512,
            "rowCount" : 9426165573,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [s_acctbal#15 DESC NULLS LAST, n_name#23 ASC NULLS FIRST, s_name#11 ASC NULLS FIRST, p_partkey#1L ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : 1296630860,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1357367842512,
            "rowCount" : 9426165573,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_acctbal#15, s_name#11, n_name#23, p_partkey#1L, p_mfgr#3, s_address#12, s_phone#14, s_comment#16] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [s_acctbal#15 DESC NULLS LAST, n_name#23 ASC NULLS FIRST, s_name#11 ASC NULLS FIRST, p_partkey#1L ASC NULLS FIRST], true\n      +- Project [s_acctbal#15, s_name#11, n_name#23, p_partkey#1L, p_mfgr#3, s_address#12, s_phone#14, s_comment#16]\n         +- Join Inner, (s_suppkey#10L = ps_suppkey#18L)\n            :- LogicalQueryStage LogicalQueryStage Project [p_partkey#1L, p_mfgr#3, ps_suppkey#18L], ShuffleQueryStage 13, BroadcastQueryStage 14\n            +- LogicalQueryStage Project [n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16], ShuffleQueryStage 9\n"
      },
      "IM" : {
        "inputSizeInBytes" : 47897328,
        "inputRowCount" : 247046
      },
      "PD" : {
        "3" : [ 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 112177, 123395, 112177, 123395, 123395, 123395, 123395, 112177, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 135735, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 123395, 112177, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 135735, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 135735, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 112177, 123395, 123395, 112177, 123395, 112177, 112177, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226566713,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 399,
        "IOBytes" : {
          "Total" : 23262611,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 23262611,
            "SW" : 0
          }
        }
      }
    },
    "5" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1076459106,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9600000000000000,
            "rowCount" : 400000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ps_partkey#66L, ps_supplycost#69] "
          },
          "8" : {
            "sign" : -947209457,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 9600000003219160,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (p_partkey#1L = ps_partkey#66L) "
          },
          "19" : {
            "sign" : 953547453,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 201000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_suppkey#71L, s_name#72, s_address#73, s_nationkey#74L, s_phone#75, s_acctbal#76, s_comment#77], `spark_catalog`.`tpch_100`.`supplier`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "4" : {
            "sign" : 1647590239,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 14330254484443360121223528660000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#10L = ps_suppkey#18L) "
          },
          "15" : {
            "sign" : -1418722620,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 160000000,
            "rowCount" : 5000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#74L = n_nationkey#78L) "
          },
          "11" : {
            "sign" : 1036307449,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 9600000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ps_partkey#66L], [min(ps_supplycost#69) AS min(ps_supplycost)#65, ps_partkey#66L] "
          },
          "9" : {
            "sign" : -544691481,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3219160,
            "rowCount" : 80479,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Project [p_partkey#1L, p_mfgr#3], ShuffleQueryStage 0, BroadcastQueryStage 8 "
          },
          "22" : {
            "sign" : 1323085775,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1065000000,
            "rowCount" : 5000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16], ShuffleQueryStage 9 "
          },
          "13" : {
            "sign" : 715450708,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 16000000000000000,
            "rowCount" : 400000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#71L = ps_suppkey#67L) "
          },
          "16" : {
            "sign" : 1864985650,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048688,
            "rowCount" : 5,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#78L], BroadcastQueryStage 6 "
          },
          "5" : {
            "sign" : 397811203,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 13455638013561840489411764,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [p_partkey#1L, p_mfgr#3, ps_suppkey#18L] "
          },
          "10" : {
            "sign" : 1530991581,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 9600000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(min(ps_supplycost)#65) "
          },
          "21" : {
            "sign" : -1761984705,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ps_partkey#17L, ps_suppkey#18L, ps_supplycost#20], ShuffleQueryStage 3 "
          },
          "6" : {
            "sign" : 621419017,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 20795076930050117120000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((p_partkey#1L = ps_partkey#17L) AND (ps_supplycost#20 = min(ps_supplycost)#65)) "
          },
          "1" : {
            "sign" : -75206043,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 12897229035999024109101175794000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -1566196204,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_suppkey#71L, s_nationkey#74L] "
          },
          "14" : {
            "sign" : 350145127,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 80000000,
            "rowCount" : 5000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_suppkey#71L] "
          },
          "0" : {
            "sign" : -1281683034,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 14400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 2055423279,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ps_partkey#66L, ps_suppkey#67L, ps_supplycost#69], ShuffleQueryStage 2 "
          },
          "2" : {
            "sign" : 1059401936,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 12897229035999024109101175794000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [s_acctbal#15 DESC NULLS LAST, n_name#23 ASC NULLS FIRST, s_name#11 ASC NULLS FIRST, p_partkey#1L ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 836858537,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 201000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(s_suppkey#71L) AND isnotnull(s_nationkey#74L)) "
          },
          "7" : {
            "sign" : 1589376727,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 8123076925800827,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [p_partkey#1L, p_mfgr#3, min(ps_supplycost)#65] "
          },
          "3" : {
            "sign" : -1525750764,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 12897229035999024109101175794000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_acctbal#15, s_name#11, n_name#23, p_partkey#1L, p_mfgr#3, s_address#12, s_phone#14, s_comment#16] "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalRelation",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Filter",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Aggregate",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [s_acctbal#15 DESC NULLS LAST, n_name#23 ASC NULLS FIRST, s_name#11 ASC NULLS FIRST, p_partkey#1L ASC NULLS FIRST], true\n      +- Project [s_acctbal#15, s_name#11, n_name#23, p_partkey#1L, p_mfgr#3, s_address#12, s_phone#14, s_comment#16]\n         +- Join Inner, (s_suppkey#10L = ps_suppkey#18L)\n            :- Project [p_partkey#1L, p_mfgr#3, ps_suppkey#18L]\n            :  +- Join Inner, ((p_partkey#1L = ps_partkey#17L) AND (ps_supplycost#20 = min(ps_supplycost)#65))\n            :     :- Project [p_partkey#1L, p_mfgr#3, min(ps_supplycost)#65]\n            :     :  +- Join Inner, (p_partkey#1L = ps_partkey#66L)\n            :     :     :- LogicalQueryStage LogicalQueryStage Project [p_partkey#1L, p_mfgr#3], ShuffleQueryStage 0, BroadcastQueryStage 8\n            :     :     +- Filter isnotnull(min(ps_supplycost)#65)\n            :     :        +- Aggregate [ps_partkey#66L], [min(ps_supplycost#69) AS min(ps_supplycost)#65, ps_partkey#66L]\n            :     :           +- Project [ps_partkey#66L, ps_supplycost#69]\n            :     :              +- Join Inner, (s_suppkey#71L = ps_suppkey#67L)\n            :     :                 :- Project [s_suppkey#71L]\n            :     :                 :  +- Join Inner, (s_nationkey#74L = n_nationkey#78L)\n            :     :                 :     :- LogicalQueryStage Project [n_nationkey#78L], BroadcastQueryStage 6\n            :     :                 :     +- Project [s_suppkey#71L, s_nationkey#74L]\n            :     :                 :        +- Filter (isnotnull(s_suppkey#71L) AND isnotnull(s_nationkey#74L))\n            :     :                 :           +- Relation spark_catalog.tpch_100.supplier[s_suppkey#71L,s_name#72,s_address#73,s_nationkey#74L,s_phone#75,s_acctbal#76,s_comment#77] parquet\n            :     :                 +- LogicalQueryStage Project [ps_partkey#66L, ps_suppkey#67L, ps_supplycost#69], ShuffleQueryStage 2\n            :     +- LogicalQueryStage Project [ps_partkey#17L, ps_suppkey#18L, ps_supplycost#20], ShuffleQueryStage 3\n            +- LogicalQueryStage Project [n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16], ShuffleQueryStage 9\n"
      },
      "IM" : {
        "inputSizeInBytes" : 6390267848,
        "inputRowCount" : 166080484
      },
      "PD" : {
        "1" : [ 7357167, 7555897, 7555897, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7536024, 7568237, 7568237, 7568237, 7436659, 7568237, 7555897, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7536024, 7568237, 7496278, 7568237, 7568237, 7568237, 7548364, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7536024, 7516151, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7496278, 7568237, 7568237, 7536024, 7568237, 7568237, 7568237, 7568237, 7548364, 7456532, 7568237, 7555897, 7568237, 7555897, 7555897, 7568237, 7555897, 7555897, 7568237, 7568237, 7568237, 7568237, 7337294, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7536024, 7536024, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7548364, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7555897, 7568237, 7555897, 7568237, 7396913, 7555897, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7516151, 7568237, 7568237, 7568237, 7568237, 7536024, 7568237, 7568237, 7416786, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7516151, 7568237, 7568237, 7568237, 7436659, 7555897, 7516151, 7568237, 7555897, 7568237, 7568237, 7548364, 7568237, 7568237, 7568237, 7568237, 7568237, 7516151, 7568237, 7568237, 7568237, 7555897 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 28,
        "FinishedTasksTotalTimeInMs" : 46301.0,
        "FinishedTasksDistributionInMs" : [ 1232.0, 1366.0, 1432.0, 1821.0, 3214.0 ]
      },
      "StartTimeInMs" : 1702226553846,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 13266,
        "IOBytes" : {
          "Total" : 5933995168,
          "Details" : {
            "IR" : 1177064047,
            "IW" : 0,
            "SR" : 3091475579,
            "SW" : 1665455542
          }
        }
      }
    },
    "10" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : -1761984705,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ps_partkey#17L, ps_suppkey#18L, ps_supplycost#20], ShuffleQueryStage 3 "
          },
          "8" : {
            "sign" : -1439576615,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 66121257641348,
            "rowCount" : 1271562646949,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (p_partkey#1L = ps_partkey#66L) "
          },
          "4" : {
            "sign" : -1967516711,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3253393739980654860800000000,
            "rowCount" : 20333710874879092880000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#10L = ps_suppkey#18L) "
          },
          "11" : {
            "sign" : -1647533693,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 379198344,
            "rowCount" : 15799931,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Aggregate [ps_partkey#66L], [min(ps_supplycost#69) AS min(ps_supplycost)#65, ps_partkey#66L], HashAggregate(keys=[ps_partkey#66L], functions=[min(ps_supplycost#69)]) "
          },
          "9" : {
            "sign" : -544691481,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8388608,
            "rowCount" : 80479,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Project [p_partkey#1L, p_mfgr#3], ShuffleQueryStage 0, BroadcastQueryStage 8 "
          },
          "13" : {
            "sign" : 1323085775,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 41605872,
            "rowCount" : 199889,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16], ShuffleQueryStage 9 "
          },
          "5" : {
            "sign" : -1344762349,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4475900517260480000000,
            "rowCount" : 101725011755920000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [p_partkey#1L, p_mfgr#3, ps_suppkey#18L] "
          },
          "10" : {
            "sign" : -1217191163,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 379198344,
            "rowCount" : 15799931,
            "isRuntime" : true,
            "predicate" : " (unknown) Filter Arguments: isnotnull(min(ps_supplycost)#65) "
          },
          "6" : {
            "sign" : -411340671,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 6917300799402560000000,
            "rowCount" : 101725011755920000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((p_partkey#1L = ps_partkey#17L) AND (ps_supplycost#20 = min(ps_supplycost)#65)) "
          },
          "1" : {
            "sign" : -1080819463,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 2928054365982589374720000000,
            "rowCount" : 20333710874879092880000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : 294418784,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 14400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 730536970,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 2928054365982589374720000000,
            "rowCount" : 20333710874879092880000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [s_acctbal#15 DESC NULLS LAST, n_name#23 ASC NULLS FIRST, s_name#11 ASC NULLS FIRST, p_partkey#1L ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 25172235,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 55948756465756,
            "rowCount" : 1271562646949,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [p_partkey#1L, p_mfgr#3, min(ps_supplycost)#65] "
          },
          "3" : {
            "sign" : -630620886,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2928054365982589374720000000,
            "rowCount" : 20333710874879092880000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_acctbal#15, s_name#11, n_name#23, p_partkey#1L, p_mfgr#3, s_address#12, s_phone#14, s_comment#16] "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "LogicalQueryStage",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [s_acctbal#15 DESC NULLS LAST, n_name#23 ASC NULLS FIRST, s_name#11 ASC NULLS FIRST, p_partkey#1L ASC NULLS FIRST], true\n      +- Project [s_acctbal#15, s_name#11, n_name#23, p_partkey#1L, p_mfgr#3, s_address#12, s_phone#14, s_comment#16]\n         +- Join Inner, (s_suppkey#10L = ps_suppkey#18L)\n            :- Project [p_partkey#1L, p_mfgr#3, ps_suppkey#18L]\n            :  +- Join Inner, ((p_partkey#1L = ps_partkey#17L) AND (ps_supplycost#20 = min(ps_supplycost)#65))\n            :     :- Project [p_partkey#1L, p_mfgr#3, min(ps_supplycost)#65]\n            :     :  +- Join Inner, (p_partkey#1L = ps_partkey#66L)\n            :     :     :- LogicalQueryStage LogicalQueryStage Project [p_partkey#1L, p_mfgr#3], ShuffleQueryStage 0, BroadcastQueryStage 8\n            :     :     +- Filter isnotnull(min(ps_supplycost)#65)\n            :     :        +- LogicalQueryStage Aggregate [ps_partkey#66L], [min(ps_supplycost#69) AS min(ps_supplycost)#65, ps_partkey#66L], HashAggregate(keys=[ps_partkey#66L], functions=[min(ps_supplycost#69)])\n            :     +- LogicalQueryStage Project [ps_partkey#17L, ps_suppkey#18L, ps_supplycost#20], ShuffleQueryStage 3\n            +- LogicalQueryStage Project [n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16], ShuffleQueryStage 9\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2989192824,
        "inputRowCount" : 96080299
      },
      "PD" : {
        "2" : [ 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237 ],
        "3" : [ 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 112177, 123395, 112177, 123395, 123395, 123395, 123395, 112177, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 135735, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 123395, 112177, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 135735, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 135735, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 112177, 123395, 123395, 112177, 123395, 112177, 112177, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226560309,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 6803,
        "IOBytes" : {
          "Total" : 1665757985,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1664422535,
            "SW" : 1335450
          }
        }
      }
    },
    "6" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1493414863,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 9600000000000000,
            "rowCount" : 400000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ps_partkey#66L, ps_supplycost#69] "
          },
          "8" : {
            "sign" : 1459331878,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 9600000008388608,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (p_partkey#1L = ps_partkey#66L) "
          },
          "4" : {
            "sign" : -2091425212,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 14330254492159976484141176220000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#10L = ps_suppkey#18L) "
          },
          "15" : {
            "sign" : 2055423279,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ps_partkey#66L, ps_suppkey#67L, ps_supplycost#69], ShuffleQueryStage 2 "
          },
          "11" : {
            "sign" : -1826355696,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 9600000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ps_partkey#66L], [min(ps_supplycost#69) AS min(ps_supplycost)#65, ps_partkey#66L] "
          },
          "9" : {
            "sign" : -544691481,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8388608,
            "rowCount" : 80479,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Project [p_partkey#1L, p_mfgr#3], ShuffleQueryStage 0, BroadcastQueryStage 8 "
          },
          "13" : {
            "sign" : -1270597397,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 16000000000000000,
            "rowCount" : 400000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#71L = ps_suppkey#67L) "
          },
          "16" : {
            "sign" : -1761984705,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ps_partkey#17L, ps_suppkey#18L, ps_supplycost#20], ShuffleQueryStage 3 "
          },
          "5" : {
            "sign" : -313508746,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 13455638020807489656470588,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [p_partkey#1L, p_mfgr#3, ps_suppkey#18L] "
          },
          "10" : {
            "sign" : 2099541044,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 9600000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(min(ps_supplycost)#65) "
          },
          "6" : {
            "sign" : 1235584096,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 20795076941247938560000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((p_partkey#1L = ps_partkey#17L) AND (ps_supplycost#20 = min(ps_supplycost)#65)) "
          },
          "1" : {
            "sign" : -1673438846,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 12897229042943978835727058598000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : 1323085775,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1065000000,
            "rowCount" : 5000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16], ShuffleQueryStage 9 "
          },
          "14" : {
            "sign" : 991424918,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 80000000,
            "rowCount" : 5000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_suppkey#71L], ShuffleQueryStage 10 "
          },
          "0" : {
            "sign" : 1401459339,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 14400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1683993717,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 12897229042943978835727058598000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [s_acctbal#15 DESC NULLS LAST, n_name#23 ASC NULLS FIRST, s_name#11 ASC NULLS FIRST, p_partkey#1L ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 946177146,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 8123076930174976,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [p_partkey#1L, p_mfgr#3, min(ps_supplycost)#65] "
          },
          "3" : {
            "sign" : 280292915,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 12897229042943978835727058598000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_acctbal#15, s_name#11, n_name#23, p_partkey#1L, p_mfgr#3, s_address#12, s_phone#14, s_comment#16] "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Aggregate",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [s_acctbal#15 DESC NULLS LAST, n_name#23 ASC NULLS FIRST, s_name#11 ASC NULLS FIRST, p_partkey#1L ASC NULLS FIRST], true\n      +- Project [s_acctbal#15, s_name#11, n_name#23, p_partkey#1L, p_mfgr#3, s_address#12, s_phone#14, s_comment#16]\n         +- Join Inner, (s_suppkey#10L = ps_suppkey#18L)\n            :- Project [p_partkey#1L, p_mfgr#3, ps_suppkey#18L]\n            :  +- Join Inner, ((p_partkey#1L = ps_partkey#17L) AND (ps_supplycost#20 = min(ps_supplycost)#65))\n            :     :- Project [p_partkey#1L, p_mfgr#3, min(ps_supplycost)#65]\n            :     :  +- Join Inner, (p_partkey#1L = ps_partkey#66L)\n            :     :     :- LogicalQueryStage LogicalQueryStage Project [p_partkey#1L, p_mfgr#3], ShuffleQueryStage 0, BroadcastQueryStage 8\n            :     :     +- Filter isnotnull(min(ps_supplycost)#65)\n            :     :        +- Aggregate [ps_partkey#66L], [min(ps_supplycost#69) AS min(ps_supplycost)#65, ps_partkey#66L]\n            :     :           +- Project [ps_partkey#66L, ps_supplycost#69]\n            :     :              +- Join Inner, (s_suppkey#71L = ps_suppkey#67L)\n            :     :                 :- LogicalQueryStage Project [s_suppkey#71L], ShuffleQueryStage 10\n            :     :                 +- LogicalQueryStage Project [ps_partkey#66L, ps_suppkey#67L, ps_supplycost#69], ShuffleQueryStage 2\n            :     +- LogicalQueryStage Project [ps_partkey#17L, ps_suppkey#18L, ps_supplycost#20], ShuffleQueryStage 3\n            +- LogicalQueryStage Project [n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16], ShuffleQueryStage 9\n"
      },
      "IM" : {
        "inputSizeInBytes" : 6273388608,
        "inputRowCount" : 170080479
      },
      "PD" : {
        "1" : [ 7357167, 7555897, 7555897, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7536024, 7568237, 7568237, 7568237, 7436659, 7568237, 7555897, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7536024, 7568237, 7496278, 7568237, 7568237, 7568237, 7548364, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7536024, 7516151, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7496278, 7568237, 7568237, 7536024, 7568237, 7568237, 7568237, 7568237, 7548364, 7456532, 7568237, 7555897, 7568237, 7555897, 7555897, 7568237, 7555897, 7555897, 7568237, 7568237, 7568237, 7568237, 7337294, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7536024, 7536024, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7548364, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7555897, 7568237, 7555897, 7568237, 7396913, 7555897, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7516151, 7568237, 7568237, 7568237, 7568237, 7536024, 7568237, 7568237, 7416786, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7516151, 7568237, 7568237, 7568237, 7436659, 7555897, 7516151, 7568237, 7555897, 7568237, 7568237, 7548364, 7568237, 7568237, 7568237, 7568237, 7568237, 7516151, 7568237, 7568237, 7568237, 7555897 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 44,
        "FinishedTasksTotalTimeInMs" : 48544.0,
        "FinishedTasksDistributionInMs" : [ 36.0, 246.0, 1358.0, 1534.0, 3214.0 ]
      },
      "StartTimeInMs" : 1702226554163,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 12949,
        "IOBytes" : {
          "Total" : 5932968963,
          "Details" : {
            "IR" : 1177064047,
            "IW" : 0,
            "SR" : 3090449374,
            "SW" : 1665455542
          }
        }
      }
    },
    "1" : {
      "LQP" : {
        "operators" : {
          "34" : {
            "sign" : -1851929377,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048584,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [r_regionkey#26L], BroadcastQueryStage 5 "
          },
          "12" : {
            "sign" : 922487533,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1921970880,
            "rowCount" : 80082120,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ps_partkey#66L, ps_supplycost#69] "
          },
          "8" : {
            "sign" : -2032549484,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 31968556,
            "rowCount" : 551182,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (p_partkey#1L = ps_partkey#66L) "
          },
          "19" : {
            "sign" : -1197528884,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3275,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(n_nationkey#78L) AND isnotnull(n_regionkey#80L)) "
          },
          "23" : {
            "sign" : 836858537,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 201000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(s_suppkey#71L) AND isnotnull(s_nationkey#74L)) "
          },
          "4" : {
            "sign" : -2050106919,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 20420940600,
            "rowCount" : 80082120,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#10L = ps_suppkey#18L) "
          },
          "15" : {
            "sign" : -1305263,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 38030880,
            "rowCount" : 1188465,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#74L = n_nationkey#78L) "
          },
          "11" : {
            "sign" : -262620174,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 446761968,
            "rowCount" : 18615082,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ps_partkey#66L], [min(ps_supplycost#69) AS min(ps_supplycost)#65, ps_partkey#66L] "
          },
          "9" : {
            "sign" : 789996657,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 23149644,
            "rowCount" : 551182,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_partkey#1L, p_mfgr#3], ShuffleQueryStage 0 "
          },
          "33" : {
            "sign" : -280792720,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3275,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [n_nationkey#22L, n_name#23, n_regionkey#24L, n_comment#25], `spark_catalog`.`tpch_100`.`nation`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "22" : {
            "sign" : -1566196204,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_suppkey#71L, s_nationkey#74L] "
          },
          "26" : {
            "sign" : -1761984705,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ps_partkey#17L, ps_suppkey#18L, ps_supplycost#20], ShuffleQueryStage 3 "
          },
          "13" : {
            "sign" : -334017331,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3203284800,
            "rowCount" : 80082120,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#71L = ps_suppkey#67L) "
          },
          "24" : {
            "sign" : 953547453,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 201000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_suppkey#71L, s_name#72, s_address#73, s_nationkey#74L, s_phone#75, s_acctbal#76, s_comment#77], `spark_catalog`.`tpch_100`.`supplier`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "35" : {
            "sign" : 454443118,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 201000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(s_suppkey#10L) AND isnotnull(s_nationkey#13L)) "
          },
          "16" : {
            "sign" : 1481848261,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 400,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_nationkey#78L] "
          },
          "5" : {
            "sign" : -361028682,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 4003172850,
            "rowCount" : 80063457,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [p_partkey#1L, p_mfgr#3, ps_suppkey#18L] "
          },
          "10" : {
            "sign" : 566598546,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 446761968,
            "rowCount" : 18615082,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(min(ps_supplycost)#65) "
          },
          "21" : {
            "sign" : 1363129753,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1048584,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [r_regionkey#82L], BroadcastQueryStage 1 "
          },
          "32" : {
            "sign" : 667403019,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 3275,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(n_nationkey#22L) AND isnotnull(n_regionkey#24L)) "
          },
          "6" : {
            "sign" : 844771812,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 5924695818,
            "rowCount" : 80063457,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((p_partkey#1L = ps_partkey#17L) AND (ps_supplycost#20 = min(ps_supplycost)#65)) "
          },
          "36" : {
            "sign" : -1689576478,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 201000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_suppkey#10L, s_name#11, s_address#12, s_nationkey#13L, s_phone#14, s_acctbal#15, s_comment#16], `spark_catalog`.`tpch_100`.`supplier`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : 573494195,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 19139626680,
            "rowCount" : 80082120,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : 1612479627,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 800,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (n_regionkey#80L = r_regionkey#82L) "
          },
          "25" : {
            "sign" : 2055423279,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ps_partkey#66L, ps_suppkey#67L, ps_supplycost#69], ShuffleQueryStage 2 "
          },
          "14" : {
            "sign" : -885331212,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 19015440,
            "rowCount" : 1188465,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_suppkey#71L] "
          },
          "31" : {
            "sign" : -404929387,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1100,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_nationkey#22L, n_name#23, n_regionkey#24L] "
          },
          "0" : {
            "sign" : -2005357216,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 14400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 142833660,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 3275,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [n_nationkey#78L, n_name#79, n_regionkey#80L, n_comment#81], `spark_catalog`.`tpch_100`.`nation`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "27" : {
            "sign" : 1311392162,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 253143045,
            "rowCount" : 1188465,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16] "
          },
          "2" : {
            "sign" : -1450500214,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 19139626680,
            "rowCount" : 80082120,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [s_acctbal#15 DESC NULLS LAST, n_name#23 ASC NULLS FIRST, s_name#11 ASC NULLS FIRST, p_partkey#1L ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 176593861,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 600,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_nationkey#78L, n_regionkey#80L] "
          },
          "30" : {
            "sign" : 410364301,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 1300,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (n_regionkey#24L = r_regionkey#26L) "
          },
          "7" : {
            "sign" : 649961176,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 27559100,
            "rowCount" : 551182,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [p_partkey#1L, p_mfgr#3, min(ps_supplycost)#65] "
          },
          "29" : {
            "sign" : -1729879244,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 900,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_nationkey#22L, n_name#23] "
          },
          "3" : {
            "sign" : -316829214,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 19139626680,
            "rowCount" : 80082120,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_acctbal#15, s_name#11, n_name#23, p_partkey#1L, p_mfgr#3, s_address#12, s_phone#14, s_comment#16] "
          },
          "28" : {
            "sign" : 865547030,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 272158485,
            "rowCount" : 1188465,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#13L = n_nationkey#22L) "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalRelation",
          "toId" : 19,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "Filter",
          "toId" : 18,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Project",
          "toId" : 17,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 17,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Join",
          "toId" : 16,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalRelation",
          "toId" : 23,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Filter",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Aggregate",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 33,
          "fromName" : "LogicalRelation",
          "toId" : 32,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 32,
          "fromName" : "Filter",
          "toId" : 31,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 31,
          "fromName" : "Project",
          "toId" : 30,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 34,
          "fromName" : "LogicalQueryStage",
          "toId" : 30,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 30,
          "fromName" : "Join",
          "toId" : 29,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 29,
          "fromName" : "Project",
          "toId" : 28,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 36,
          "fromName" : "LogicalRelation",
          "toId" : 35,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 35,
          "fromName" : "Filter",
          "toId" : 28,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 28,
          "fromName" : "Join",
          "toId" : 27,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 27,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [s_acctbal#15 DESC NULLS LAST, n_name#23 ASC NULLS FIRST, s_name#11 ASC NULLS FIRST, p_partkey#1L ASC NULLS FIRST], true\n      +- Project [s_acctbal#15, s_name#11, n_name#23, p_partkey#1L, p_mfgr#3, s_address#12, s_phone#14, s_comment#16]\n         +- Join Inner, (s_suppkey#10L = ps_suppkey#18L)\n            :- Project [p_partkey#1L, p_mfgr#3, ps_suppkey#18L]\n            :  +- Join Inner, ((p_partkey#1L = ps_partkey#17L) AND (ps_supplycost#20 = min(ps_supplycost)#65))\n            :     :- Project [p_partkey#1L, p_mfgr#3, min(ps_supplycost)#65]\n            :     :  +- Join Inner, (p_partkey#1L = ps_partkey#66L)\n            :     :     :- LogicalQueryStage Project [p_partkey#1L, p_mfgr#3], ShuffleQueryStage 0\n            :     :     +- Filter isnotnull(min(ps_supplycost)#65)\n            :     :        +- Aggregate [ps_partkey#66L], [min(ps_supplycost#69) AS min(ps_supplycost)#65, ps_partkey#66L]\n            :     :           +- Project [ps_partkey#66L, ps_supplycost#69]\n            :     :              +- Join Inner, (s_suppkey#71L = ps_suppkey#67L)\n            :     :                 :- Project [s_suppkey#71L]\n            :     :                 :  +- Join Inner, (s_nationkey#74L = n_nationkey#78L)\n            :     :                 :     :- Project [n_nationkey#78L]\n            :     :                 :     :  +- Join Inner, (n_regionkey#80L = r_regionkey#82L)\n            :     :                 :     :     :- Project [n_nationkey#78L, n_regionkey#80L]\n            :     :                 :     :     :  +- Filter (isnotnull(n_nationkey#78L) AND isnotnull(n_regionkey#80L))\n            :     :                 :     :     :     +- Relation spark_catalog.tpch_100.nation[n_nationkey#78L,n_name#79,n_regionkey#80L,n_comment#81] parquet\n            :     :                 :     :     +- LogicalQueryStage Project [r_regionkey#82L], BroadcastQueryStage 1\n            :     :                 :     +- Project [s_suppkey#71L, s_nationkey#74L]\n            :     :                 :        +- Filter (isnotnull(s_suppkey#71L) AND isnotnull(s_nationkey#74L))\n            :     :                 :           +- Relation spark_catalog.tpch_100.supplier[s_suppkey#71L,s_name#72,s_address#73,s_nationkey#74L,s_phone#75,s_acctbal#76,s_comment#77] parquet\n            :     :                 +- LogicalQueryStage Project [ps_partkey#66L, ps_suppkey#67L, ps_supplycost#69], ShuffleQueryStage 2\n            :     +- LogicalQueryStage Project [ps_partkey#17L, ps_suppkey#18L, ps_supplycost#20], ShuffleQueryStage 3\n            +- Project [n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16]\n               +- Join Inner, (s_nationkey#13L = n_nationkey#22L)\n                  :- Project [n_nationkey#22L, n_name#23]\n                  :  +- Join Inner, (n_regionkey#24L = r_regionkey#26L)\n                  :     :- Project [n_nationkey#22L, n_name#23, n_regionkey#24L]\n                  :     :  +- Filter (isnotnull(n_nationkey#22L) AND isnotnull(n_regionkey#24L))\n                  :     :     +- Relation spark_catalog.tpch_100.nation[n_nationkey#22L,n_name#23,n_regionkey#24L,n_comment#25] parquet\n                  :     +- LogicalQueryStage Project [r_regionkey#26L], BroadcastQueryStage 5\n                  +- Filter (isnotnull(s_suppkey#10L) AND isnotnull(s_nationkey#13L))\n                     +- Relation spark_catalog.tpch_100.supplier[s_suppkey#10L,s_name#11,s_address#12,s_nationkey#13L,s_phone#14,s_acctbal#15,s_comment#16] parquet\n"
      },
      "IM" : {
        "inputSizeInBytes" : 5547253362,
        "inputRowCount" : 162551234
      },
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 22,
        "FinishedTasksTotalTimeInMs" : 70076.0,
        "FinishedTasksDistributionInMs" : [ 225.0, 465.0, 4846.0, 5163.0, 5496.0 ]
      },
      "StartTimeInMs" : 1702226547292,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 19820,
        "IOBytes" : {
          "Total" : 8590867991,
          "Details" : {
            "IR" : 2407916833,
            "IW" : 0,
            "SR" : 3091475579,
            "SW" : 3091475579
          }
        }
      }
    },
    "2" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1076459106,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1921970880,
            "rowCount" : 80082120,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ps_partkey#66L, ps_supplycost#69] "
          },
          "8" : {
            "sign" : -186176997,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4184908,
            "rowCount" : 80479,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (p_partkey#1L = ps_partkey#66L) "
          },
          "19" : {
            "sign" : 953547453,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 201000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_suppkey#71L, s_name#72, s_address#73, s_nationkey#74L, s_phone#75, s_acctbal#76, s_comment#77], `spark_catalog`.`tpch_100`.`supplier`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "23" : {
            "sign" : 1787826314,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 272158485,
            "rowCount" : 1188465,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#13L = n_nationkey#22L) "
          },
          "4" : {
            "sign" : -1085484852,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 19940447880,
            "rowCount" : 80082120,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#10L = ps_suppkey#18L) "
          },
          "15" : {
            "sign" : -1418722620,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 38030880,
            "rowCount" : 1188465,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#74L = n_nationkey#78L) "
          },
          "11" : {
            "sign" : 1036307449,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 446761968,
            "rowCount" : 18615082,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ps_partkey#66L], [min(ps_supplycost#69) AS min(ps_supplycost)#65, ps_partkey#66L] "
          },
          "9" : {
            "sign" : 789996657,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3219160,
            "rowCount" : 80479,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_partkey#1L, p_mfgr#3], ShuffleQueryStage 0 "
          },
          "22" : {
            "sign" : 52125162,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 253143045,
            "rowCount" : 1188465,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16] "
          },
          "26" : {
            "sign" : -1689576478,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 201000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_suppkey#10L, s_name#11, s_address#12, s_nationkey#13L, s_phone#14, s_acctbal#15, s_comment#16], `spark_catalog`.`tpch_100`.`supplier`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "13" : {
            "sign" : 715450708,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3203284800,
            "rowCount" : 80082120,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#71L = ps_suppkey#67L) "
          },
          "24" : {
            "sign" : -1236053098,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 900,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#22L, n_name#23], BroadcastQueryStage 7 "
          },
          "16" : {
            "sign" : 1864985650,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 400,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#78L], BroadcastQueryStage 6 "
          },
          "5" : {
            "sign" : -496367647,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 283286080000000,
            "rowCount" : 6438320000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [p_partkey#1L, p_mfgr#3, ps_suppkey#18L] "
          },
          "10" : {
            "sign" : 1530991581,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 446761968,
            "rowCount" : 18615082,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(min(ps_supplycost)#65) "
          },
          "21" : {
            "sign" : -1761984705,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ps_partkey#17L, ps_suppkey#18L, ps_supplycost#20], ShuffleQueryStage 3 "
          },
          "6" : {
            "sign" : 976565859,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 437805760000000,
            "rowCount" : 6438320000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((p_partkey#1L = ps_partkey#17L) AND (ps_supplycost#20 = min(ps_supplycost)#65)) "
          },
          "1" : {
            "sign" : -227094396,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 18659133960,
            "rowCount" : 80082120,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -1566196204,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_suppkey#71L, s_nationkey#74L] "
          },
          "25" : {
            "sign" : 454443118,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 201000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(s_suppkey#10L) AND isnotnull(s_nationkey#13L)) "
          },
          "14" : {
            "sign" : 350145127,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 19015440,
            "rowCount" : 1188465,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_suppkey#71L] "
          },
          "0" : {
            "sign" : 1547578405,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 14400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 2055423279,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ps_partkey#66L, ps_suppkey#67L, ps_supplycost#69], ShuffleQueryStage 2 "
          },
          "2" : {
            "sign" : 1065971835,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 18659133960,
            "rowCount" : 80082120,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [s_acctbal#15 DESC NULLS LAST, n_name#23 ASC NULLS FIRST, s_name#11 ASC NULLS FIRST, p_partkey#1L ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 836858537,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 201000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(s_suppkey#71L) AND isnotnull(s_nationkey#74L)) "
          },
          "7" : {
            "sign" : -1181366825,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3541076,
            "rowCount" : 80479,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [p_partkey#1L, p_mfgr#3, min(ps_supplycost)#65] "
          },
          "3" : {
            "sign" : 201624245,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 18659133960,
            "rowCount" : 80082120,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_acctbal#15, s_name#11, n_name#23, p_partkey#1L, p_mfgr#3, s_address#12, s_phone#14, s_comment#16] "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalRelation",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Filter",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Aggregate",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalQueryStage",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "LogicalRelation",
          "toId" : 25,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Filter",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Join",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [s_acctbal#15 DESC NULLS LAST, n_name#23 ASC NULLS FIRST, s_name#11 ASC NULLS FIRST, p_partkey#1L ASC NULLS FIRST], true\n      +- Project [s_acctbal#15, s_name#11, n_name#23, p_partkey#1L, p_mfgr#3, s_address#12, s_phone#14, s_comment#16]\n         +- Join Inner, (s_suppkey#10L = ps_suppkey#18L)\n            :- Project [p_partkey#1L, p_mfgr#3, ps_suppkey#18L]\n            :  +- Join Inner, ((p_partkey#1L = ps_partkey#17L) AND (ps_supplycost#20 = min(ps_supplycost)#65))\n            :     :- Project [p_partkey#1L, p_mfgr#3, min(ps_supplycost)#65]\n            :     :  +- Join Inner, (p_partkey#1L = ps_partkey#66L)\n            :     :     :- LogicalQueryStage Project [p_partkey#1L, p_mfgr#3], ShuffleQueryStage 0\n            :     :     +- Filter isnotnull(min(ps_supplycost)#65)\n            :     :        +- Aggregate [ps_partkey#66L], [min(ps_supplycost#69) AS min(ps_supplycost)#65, ps_partkey#66L]\n            :     :           +- Project [ps_partkey#66L, ps_supplycost#69]\n            :     :              +- Join Inner, (s_suppkey#71L = ps_suppkey#67L)\n            :     :                 :- Project [s_suppkey#71L]\n            :     :                 :  +- Join Inner, (s_nationkey#74L = n_nationkey#78L)\n            :     :                 :     :- LogicalQueryStage Project [n_nationkey#78L], BroadcastQueryStage 6\n            :     :                 :     +- Project [s_suppkey#71L, s_nationkey#74L]\n            :     :                 :        +- Filter (isnotnull(s_suppkey#71L) AND isnotnull(s_nationkey#74L))\n            :     :                 :           +- Relation spark_catalog.tpch_100.supplier[s_suppkey#71L,s_name#72,s_address#73,s_nationkey#74L,s_phone#75,s_acctbal#76,s_comment#77] parquet\n            :     :                 +- LogicalQueryStage Project [ps_partkey#66L, ps_suppkey#67L, ps_supplycost#69], ShuffleQueryStage 2\n            :     +- LogicalQueryStage Project [ps_partkey#17L, ps_suppkey#18L, ps_supplycost#20], ShuffleQueryStage 3\n            +- Project [n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16]\n               +- Join Inner, (s_nationkey#13L = n_nationkey#22L)\n                  :- LogicalQueryStage Project [n_nationkey#22L, n_name#23], BroadcastQueryStage 7\n                  +- Filter (isnotnull(s_suppkey#10L) AND isnotnull(s_nationkey#13L))\n                     +- Relation spark_catalog.tpch_100.supplier[s_suppkey#10L,s_name#11,s_address#12,s_nationkey#13L,s_phone#14,s_acctbal#15,s_comment#16] parquet\n"
      },
      "IM" : {
        "inputSizeInBytes" : 5525220460,
        "inputRowCount" : 162080529
      },
      "PD" : {
        "0" : [ 5527, 5307, 5517, 5415, 5291, 5327, 5123, 5431, 5196, 5526, 5179, 5299, 5329, 5121, 5260, 5681, 5408, 5416, 5442, 5301, 5362, 5075, 5380, 5528, 5080, 5430, 5333, 5277, 5394, 5359, 5316, 5334, 5478, 5077, 5146, 5416, 5560, 5543, 4964, 5207, 5477, 5271, 5446, 5207, 5403, 5442, 5565, 5132, 5189, 5499, 5348, 5455, 5142, 5481, 5675, 5418, 5382, 5088, 5290, 5662, 5397, 5284, 5456, 5302, 5451, 5318, 5309, 5501, 5211, 5301, 5291, 5359, 5265, 5545, 5420, 5466, 5401, 5123, 5451, 5423, 5327, 5524, 5117, 5192, 5570, 5208, 5343, 5449, 5277, 5292, 5398, 5586, 5672, 5160, 5144, 5506, 5519, 5474, 4915, 5086, 5471, 5374, 5439, 5484, 5175, 5354, 5284, 5138, 5177, 5397, 5407, 5380, 5390, 5163, 5615, 5328, 5423, 5382, 5250, 5271, 5347, 5278, 4884, 5546, 5292, 5425, 5442, 5456, 5243, 5396, 5528, 5539, 5557, 5247, 5349, 5437, 5532, 5308, 5224, 5550, 5477, 5434, 5479, 5589, 5540, 5606, 5303, 5336, 5456, 5281, 5501, 5480, 5175, 5479, 5447, 5466, 5566, 5294, 5223, 5433, 5356, 5634, 5077, 5396, 5307, 5287, 5306, 5700, 5217, 5510, 5387, 5025, 5703, 5451, 5622, 5291, 5536, 5601, 5400, 5165, 5036, 5388, 5346, 5326, 5407, 5526, 5110, 5254, 5278, 5171, 5117, 5501, 5637, 5111, 5613, 5353, 5473, 5225, 5491, 5579 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226548030,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 19082,
        "IOBytes" : {
          "Total" : 8448150623,
          "Details" : {
            "IR" : 2266225670,
            "IW" : 0,
            "SR" : 3091475579,
            "SW" : 3090449374
          }
        }
      }
    },
    "7" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1493414863,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 383786880000000,
            "rowCount" : 15991120000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ps_partkey#66L, ps_supplycost#69] "
          },
          "8" : {
            "sign" : 1459331878,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 383786888388608,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (p_partkey#1L = ps_partkey#66L) "
          },
          "4" : {
            "sign" : -2091425212,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 572892060058038882635294055000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#10L = ps_suppkey#18L) "
          },
          "15" : {
            "sign" : 2055423279,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ps_partkey#66L, ps_suppkey#67L, ps_supplycost#69], ShuffleQueryStage 2 "
          },
          "11" : {
            "sign" : -1826355696,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 383786880000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ps_partkey#66L], [min(ps_supplycost#69) AS min(ps_supplycost)#65, ps_partkey#66L] "
          },
          "9" : {
            "sign" : -544691481,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 8388608,
            "rowCount" : 80479,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Project [p_partkey#1L, p_mfgr#3], ShuffleQueryStage 0, BroadcastQueryStage 8 "
          },
          "13" : {
            "sign" : -1270597397,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 639644800000000,
            "rowCount" : 15991120000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#71L = ps_suppkey#67L) "
          },
          "16" : {
            "sign" : -1761984705,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ps_partkey#17L, ps_suppkey#18L, ps_supplycost#20], ShuffleQueryStage 3 "
          },
          "5" : {
            "sign" : -313508746,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 537926816955905054117647,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [p_partkey#1L, p_mfgr#3, ps_suppkey#18L] "
          },
          "10" : {
            "sign" : 2099541044,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 383786880000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(min(ps_supplycost)#65) "
          },
          "6" : {
            "sign" : 1235584096,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 831341444386398720000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((p_partkey#1L = ps_partkey#17L) AND (ps_supplycost#20 = min(ps_supplycost)#65)) "
          },
          "1" : {
            "sign" : -1673438846,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 515602854052234994371764649500000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : 1323085775,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 1065000000,
            "rowCount" : 5000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16], ShuffleQueryStage 9 "
          },
          "14" : {
            "sign" : 991424918,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3198224,
            "rowCount" : 199889,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [s_suppkey#71L], ShuffleQueryStage 10 "
          },
          "0" : {
            "sign" : 1401459339,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 14400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : 1683993717,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 515602854052234994371764649500000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [s_acctbal#15 DESC NULLS LAST, n_name#23 ASC NULLS FIRST, s_name#11 ASC NULLS FIRST, p_partkey#1L ASC NULLS FIRST], true "
          },
          "7" : {
            "sign" : 946177146,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 324742751713437,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [p_partkey#1L, p_mfgr#3, min(ps_supplycost)#65] "
          },
          "3" : {
            "sign" : 280292915,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 515602854052234994371764649500000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_acctbal#15, s_name#11, n_name#23, p_partkey#1L, p_mfgr#3, s_address#12, s_phone#14, s_comment#16] "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Aggregate",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [s_acctbal#15 DESC NULLS LAST, n_name#23 ASC NULLS FIRST, s_name#11 ASC NULLS FIRST, p_partkey#1L ASC NULLS FIRST], true\n      +- Project [s_acctbal#15, s_name#11, n_name#23, p_partkey#1L, p_mfgr#3, s_address#12, s_phone#14, s_comment#16]\n         +- Join Inner, (s_suppkey#10L = ps_suppkey#18L)\n            :- Project [p_partkey#1L, p_mfgr#3, ps_suppkey#18L]\n            :  +- Join Inner, ((p_partkey#1L = ps_partkey#17L) AND (ps_supplycost#20 = min(ps_supplycost)#65))\n            :     :- Project [p_partkey#1L, p_mfgr#3, min(ps_supplycost)#65]\n            :     :  +- Join Inner, (p_partkey#1L = ps_partkey#66L)\n            :     :     :- LogicalQueryStage LogicalQueryStage Project [p_partkey#1L, p_mfgr#3], ShuffleQueryStage 0, BroadcastQueryStage 8\n            :     :     +- Filter isnotnull(min(ps_supplycost)#65)\n            :     :        +- Aggregate [ps_partkey#66L], [min(ps_supplycost#69) AS min(ps_supplycost)#65, ps_partkey#66L]\n            :     :           +- Project [ps_partkey#66L, ps_supplycost#69]\n            :     :              +- Join Inner, (s_suppkey#71L = ps_suppkey#67L)\n            :     :                 :- LogicalQueryStage Project [s_suppkey#71L], ShuffleQueryStage 10\n            :     :                 +- LogicalQueryStage Project [ps_partkey#66L, ps_suppkey#67L, ps_supplycost#69], ShuffleQueryStage 2\n            :     +- LogicalQueryStage Project [ps_partkey#17L, ps_suppkey#18L, ps_supplycost#20], ShuffleQueryStage 3\n            +- LogicalQueryStage Project [n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16], ShuffleQueryStage 9\n"
      },
      "IM" : {
        "inputSizeInBytes" : 6196586832,
        "inputRowCount" : 165280368
      },
      "PD" : {
        "4" : [ 5313, 5313, 5844, 5313, 5313, 5313, 5313, 5313, 5844, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5844, 5313, 5313, 5313, 4830, 5313, 5313, 5313, 5313, 5313, 5844, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5844, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5844, 5844, 5313, 5313, 5844, 5313, 5313, 5313, 5844, 5313, 5844, 5313, 5313, 5844, 5313, 5313, 5313, 5844, 5313, 5844, 5844, 5313, 5313, 5844, 5313, 5313, 5313, 5313, 5844, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5844, 5313, 5313, 5313, 5313, 5313, 5313, 5844, 5313, 5313, 5313, 5313, 5313, 5844, 5313, 5844, 5844, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5844, 5313, 5313, 5313, 5313, 5844, 5844, 5313, 5313, 5313, 5844, 5844, 5313, 5313, 5844, 5313, 5313, 5844, 5844, 5313, 5844, 5313, 5313, 5313, 5844, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5844, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 4830, 5313, 5844, 5313, 5313, 4830, 5844, 5313, 5313, 5313, 5313, 5313, 5844, 5313, 5313, 5844, 5313, 5313, 5313, 5313, 5844, 5313, 5313, 5313, 5313, 5844, 5313 ],
        "1" : [ 7357167, 7555897, 7555897, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7536024, 7568237, 7568237, 7568237, 7436659, 7568237, 7555897, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7536024, 7568237, 7496278, 7568237, 7568237, 7568237, 7548364, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7536024, 7516151, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7496278, 7568237, 7568237, 7536024, 7568237, 7568237, 7568237, 7568237, 7548364, 7456532, 7568237, 7555897, 7568237, 7555897, 7555897, 7568237, 7555897, 7555897, 7568237, 7568237, 7568237, 7568237, 7337294, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7536024, 7536024, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7548364, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7555897, 7568237, 7555897, 7568237, 7396913, 7555897, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7516151, 7568237, 7568237, 7568237, 7568237, 7536024, 7568237, 7568237, 7416786, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7516151, 7568237, 7568237, 7568237, 7436659, 7555897, 7516151, 7568237, 7555897, 7568237, 7568237, 7548364, 7568237, 7568237, 7568237, 7568237, 7568237, 7516151, 7568237, 7568237, 7568237, 7555897 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 5,
        "FinishedTasksNum" : 46,
        "FinishedTasksTotalTimeInMs" : 51991.0,
        "FinishedTasksDistributionInMs" : [ 36.0, 264.0, 1358.0, 1534.0, 3214.0 ]
      },
      "StartTimeInMs" : 1702226554488,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 12624,
        "IOBytes" : {
          "Total" : 5926235831,
          "Details" : {
            "IR" : 1171363922,
            "IW" : 0,
            "SR" : 3090449374,
            "SW" : 1664422535
          }
        }
      }
    },
    "3" : {
      "LQP" : {
        "operators" : {
          "12" : {
            "sign" : 1076459106,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 2281852800000000,
            "rowCount" : 95077200000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ps_partkey#66L, ps_supplycost#69] "
          },
          "8" : {
            "sign" : -947209457,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 2281852803219160,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (p_partkey#1L = ps_partkey#66L) "
          },
          "19" : {
            "sign" : 953547453,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 201000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_suppkey#71L, s_name#72, s_address#73, s_nationkey#74L, s_phone#75, s_acctbal#76, s_comment#77], `spark_catalog`.`tpch_100`.`supplier`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "23" : {
            "sign" : 1787826314,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 272158485,
            "rowCount" : 1188465,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#13L = n_nationkey#22L) "
          },
          "4" : {
            "sign" : 1435796076,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 809630177751349686705748948336035,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#10L = ps_suppkey#18L) "
          },
          "15" : {
            "sign" : -1418722620,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 38030880,
            "rowCount" : 1188465,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#74L = n_nationkey#78L) "
          },
          "11" : {
            "sign" : 1036307449,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "sizeInBytes" : 2281852800000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ps_partkey#66L], [min(ps_supplycost#69) AS min(ps_supplycost)#65, ps_partkey#66L] "
          },
          "9" : {
            "sign" : -544691481,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 3219160,
            "rowCount" : 80479,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: LogicalQueryStage Project [p_partkey#1L, p_mfgr#3], ShuffleQueryStage 0, BroadcastQueryStage 8 "
          },
          "22" : {
            "sign" : 52125162,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 253143045,
            "rowCount" : 1188465,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16] "
          },
          "26" : {
            "sign" : -1689576478,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "sizeInBytes" : 201000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_suppkey#10L, s_name#11, s_address#12, s_nationkey#13L, s_phone#14, s_acctbal#15, s_comment#16], `spark_catalog`.`tpch_100`.`supplier`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "13" : {
            "sign" : 715450708,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 3803088000000000,
            "rowCount" : 95077200000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#71L = ps_suppkey#67L) "
          },
          "24" : {
            "sign" : -1236053098,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 900,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#22L, n_name#23], BroadcastQueryStage 7 "
          },
          "16" : {
            "sign" : 1864985650,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 400,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#78L], BroadcastQueryStage 6 "
          },
          "5" : {
            "sign" : 397811203,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 3198310969797134607058823,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [p_partkey#1L, p_mfgr#3, ps_suppkey#18L] "
          },
          "10" : {
            "sign" : 1530991581,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 2281852800000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(min(ps_supplycost)#65) "
          },
          "21" : {
            "sign" : -1761984705,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ps_partkey#17L, ps_suppkey#18L, ps_supplycost#20], ShuffleQueryStage 3 "
          },
          "6" : {
            "sign" : 621419017,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "sizeInBytes" : 4942844226050117120000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((p_partkey#1L = ps_partkey#17L) AND (ps_supplycost#20 = min(ps_supplycost)#65)) "
          },
          "1" : {
            "sign" : 1731334912,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "sizeInBytes" : 728667159976214718035174053502431,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "17" : {
            "sign" : -1566196204,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_suppkey#71L, s_nationkey#74L] "
          },
          "25" : {
            "sign" : 454443118,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 201000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(s_suppkey#10L) AND isnotnull(s_nationkey#13L)) "
          },
          "14" : {
            "sign" : 350145127,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 19015440,
            "rowCount" : 1188465,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_suppkey#71L] "
          },
          "0" : {
            "sign" : 161124915,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "sizeInBytes" : 14400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "20" : {
            "sign" : 2055423279,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ps_partkey#66L, ps_suppkey#67L, ps_supplycost#69], ShuffleQueryStage 2 "
          },
          "2" : {
            "sign" : 546229533,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "sizeInBytes" : 728667159976214718035174053502431,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [s_acctbal#15 DESC NULLS LAST, n_name#23 ASC NULLS FIRST, s_name#11 ASC NULLS FIRST, p_partkey#1L ASC NULLS FIRST], true "
          },
          "18" : {
            "sign" : 836858537,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "sizeInBytes" : 201000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(s_suppkey#71L) AND isnotnull(s_nationkey#74L)) "
          },
          "7" : {
            "sign" : 1589376727,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 1930798525800827,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [p_partkey#1L, p_mfgr#3, min(ps_supplycost)#65] "
          },
          "3" : {
            "sign" : 612635503,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "sizeInBytes" : 728667159976214718035174053502431,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_acctbal#15, s_name#11, n_name#23, p_partkey#1L, p_mfgr#3, s_address#12, s_phone#14, s_comment#16] "
          }
        },
        "links" : [ {
          "fromId" : 9,
          "fromName" : "LogicalQueryStage",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 16,
          "fromName" : "LogicalQueryStage",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 19,
          "fromName" : "LogicalRelation",
          "toId" : 18,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 18,
          "fromName" : "Filter",
          "toId" : 17,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 17,
          "fromName" : "Project",
          "toId" : 15,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 15,
          "fromName" : "Join",
          "toId" : 14,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 14,
          "fromName" : "Project",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 20,
          "fromName" : "LogicalQueryStage",
          "toId" : 13,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 13,
          "fromName" : "Join",
          "toId" : 12,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 12,
          "fromName" : "Project",
          "toId" : 11,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 11,
          "fromName" : "Aggregate",
          "toId" : 10,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 10,
          "fromName" : "Filter",
          "toId" : 8,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 8,
          "fromName" : "Join",
          "toId" : 7,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 7,
          "fromName" : "Project",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 21,
          "fromName" : "LogicalQueryStage",
          "toId" : 6,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "Join",
          "toId" : 5,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 24,
          "fromName" : "LogicalQueryStage",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 26,
          "fromName" : "LogicalRelation",
          "toId" : 25,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 25,
          "fromName" : "Filter",
          "toId" : 23,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 23,
          "fromName" : "Join",
          "toId" : 22,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 22,
          "fromName" : "Project",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [s_acctbal#15 DESC NULLS LAST, n_name#23 ASC NULLS FIRST, s_name#11 ASC NULLS FIRST, p_partkey#1L ASC NULLS FIRST], true\n      +- Project [s_acctbal#15, s_name#11, n_name#23, p_partkey#1L, p_mfgr#3, s_address#12, s_phone#14, s_comment#16]\n         +- Join Inner, (s_suppkey#10L = ps_suppkey#18L)\n            :- Project [p_partkey#1L, p_mfgr#3, ps_suppkey#18L]\n            :  +- Join Inner, ((p_partkey#1L = ps_partkey#17L) AND (ps_supplycost#20 = min(ps_supplycost)#65))\n            :     :- Project [p_partkey#1L, p_mfgr#3, min(ps_supplycost)#65]\n            :     :  +- Join Inner, (p_partkey#1L = ps_partkey#66L)\n            :     :     :- LogicalQueryStage LogicalQueryStage Project [p_partkey#1L, p_mfgr#3], ShuffleQueryStage 0, BroadcastQueryStage 8\n            :     :     +- Filter isnotnull(min(ps_supplycost)#65)\n            :     :        +- Aggregate [ps_partkey#66L], [min(ps_supplycost#69) AS min(ps_supplycost)#65, ps_partkey#66L]\n            :     :           +- Project [ps_partkey#66L, ps_supplycost#69]\n            :     :              +- Join Inner, (s_suppkey#71L = ps_suppkey#67L)\n            :     :                 :- Project [s_suppkey#71L]\n            :     :                 :  +- Join Inner, (s_nationkey#74L = n_nationkey#78L)\n            :     :                 :     :- LogicalQueryStage Project [n_nationkey#78L], BroadcastQueryStage 6\n            :     :                 :     +- Project [s_suppkey#71L, s_nationkey#74L]\n            :     :                 :        +- Filter (isnotnull(s_suppkey#71L) AND isnotnull(s_nationkey#74L))\n            :     :                 :           +- Relation spark_catalog.tpch_100.supplier[s_suppkey#71L,s_name#72,s_address#73,s_nationkey#74L,s_phone#75,s_acctbal#76,s_comment#77] parquet\n            :     :                 +- LogicalQueryStage Project [ps_partkey#66L, ps_suppkey#67L, ps_supplycost#69], ShuffleQueryStage 2\n            :     +- LogicalQueryStage Project [ps_partkey#17L, ps_suppkey#18L, ps_supplycost#20], ShuffleQueryStage 3\n            +- Project [n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16]\n               +- Join Inner, (s_nationkey#13L = n_nationkey#22L)\n                  :- LogicalQueryStage Project [n_nationkey#22L, n_name#23], BroadcastQueryStage 7\n                  +- Filter (isnotnull(s_suppkey#10L) AND isnotnull(s_nationkey#13L))\n                     +- Relation spark_catalog.tpch_100.supplier[s_suppkey#10L,s_name#11,s_address#12,s_nationkey#13L,s_phone#14,s_acctbal#15,s_comment#16] parquet\n"
      },
      "IM" : {
        "inputSizeInBytes" : 5525220460,
        "inputRowCount" : 162080529
      },
      "PD" : {
        "1" : [ 7357167, 7555897, 7555897, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7536024, 7568237, 7568237, 7568237, 7436659, 7568237, 7555897, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7536024, 7568237, 7496278, 7568237, 7568237, 7568237, 7548364, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7536024, 7516151, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7496278, 7568237, 7568237, 7536024, 7568237, 7568237, 7568237, 7568237, 7548364, 7456532, 7568237, 7555897, 7568237, 7555897, 7555897, 7568237, 7555897, 7555897, 7568237, 7568237, 7568237, 7568237, 7337294, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7536024, 7536024, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7548364, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7555897, 7568237, 7555897, 7568237, 7396913, 7555897, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7516151, 7568237, 7568237, 7568237, 7568237, 7536024, 7568237, 7568237, 7416786, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7516151, 7568237, 7568237, 7568237, 7436659, 7555897, 7516151, 7568237, 7555897, 7568237, 7568237, 7548364, 7568237, 7568237, 7568237, 7568237, 7568237, 7516151, 7568237, 7568237, 7568237, 7555897 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "StartTimeInMs" : 1702226551278,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "Objectives" : {
        "DurationInMs" : 15834,
        "IOBytes" : {
          "Total" : 5934000649,
          "Details" : {
            "IR" : 1177069528,
            "IW" : 0,
            "SR" : 3091475579,
            "SW" : 1665455542
          }
        }
      }
    }
  },
  "RuntimeQSs" : {
    "12" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -860872088,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2263536,
                "rowCount" : 47157
              },
              "compileTime" : {
                "sizeInBytes" : 283286080000000,
                "rowCount" : 6438320000000
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_partkey#1L, p_mfgr#3, ps_suppkey#18L], ShuffleQueryStage 13 "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Project [p_partkey#1L, p_mfgr#3, ps_suppkey#18L], ShuffleQueryStage 13\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -863883619,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 2263536,
            "rowCount" : 47157,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [p_partkey#1L, p_mfgr#3, ps_suppkey#18L] Arguments: 13 "
          }
        },
        "links" : [ ],
        "rawPlan" : "ShuffleQueryStage 13\n+- Exchange hashpartitioning(ps_suppkey#18L, 200), ENSURE_REQUIREMENTS, [plan_id=1746]\n   +- *(14) Project [p_partkey#1L, p_mfgr#3, ps_suppkey#18L]\n      +- *(14) BroadcastHashJoin [p_partkey#1L, min(ps_supplycost)#65], [ps_partkey#17L, ps_supplycost#20], Inner, BuildLeft, false\n         :- BroadcastQueryStage 12\n         :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true], input[2, decimal(12,2), true]),false), [plan_id=1680]\n         :     +- *(13) Project [p_partkey#1L, p_mfgr#3, min(ps_supplycost)#65]\n         :        +- *(13) BroadcastHashJoin [p_partkey#1L], [ps_partkey#66L], Inner, BuildLeft, false\n         :           :- BroadcastQueryStage 8\n         :           :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=879]\n         :           :     +- AQEShuffleRead local\n         :           :        +- ShuffleQueryStage 0\n         :           :           +- Exchange hashpartitioning(p_partkey#1L, 200), ENSURE_REQUIREMENTS, [plan_id=309]\n         :           :              +- *(1) Project [p_partkey#1L, p_mfgr#3]\n         :           :                 +- *(1) Filter ((((isnotnull(p_size#5) AND isnotnull(p_type#4)) AND (p_size#5 = 38)) AND EndsWith(p_type#4, STEEL)) AND isnotnull(p_partkey#1L))\n         :           :                    +- *(1) ColumnarToRow\n         :           :                       +- FileScan parquet spark_catalog.tpch_100.part[p_partkey#1L,p_mfgr#3,p_type#4,p_size#5,p_brand#9] Batched: true, DataFilters: [isnotnull(p_size#5), isnotnull(p_type#4), (p_size#5 = 38), EndsWith(p_type#4, STEEL), isnotnull(..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/part], PartitionFilters: [], PushedFilters: [IsNotNull(p_size), IsNotNull(p_type), EqualTo(p_size,38), StringEndsWith(p_type,STEEL), IsNotNul..., ReadSchema: struct<p_partkey:bigint,p_mfgr:string,p_type:string,p_size:int>\n         :           +- *(13) Filter isnotnull(min(ps_supplycost)#65)\n         :              +- *(13) HashAggregate(keys=[ps_partkey#66L], functions=[min(ps_supplycost#69)], output=[min(ps_supplycost)#65, ps_partkey#66L])\n         :                 +- AQEShuffleRead coalesced\n         :                    +- ShuffleQueryStage 11\n         :                       +- Exchange hashpartitioning(ps_partkey#66L, 200), ENSURE_REQUIREMENTS, [plan_id=1485]\n         :                          +- *(12) HashAggregate(keys=[ps_partkey#66L], functions=[partial_min(ps_supplycost#69)], output=[ps_partkey#66L, min#94])\n         :                             +- *(12) Project [ps_partkey#66L, ps_supplycost#69]\n         :                                +- *(12) SortMergeJoin [s_suppkey#71L], [ps_suppkey#67L], Inner\n         :                                   :- *(10) Sort [s_suppkey#71L ASC NULLS FIRST], false, 0\n         :                                   :  +- AQEShuffleRead coalesced\n         :                                   :     +- ShuffleQueryStage 10\n         :                                   :        +- Exchange hashpartitioning(s_suppkey#71L, 200), ENSURE_REQUIREMENTS, [plan_id=1271]\n         :                                   :           +- *(9) Project [s_suppkey#71L]\n         :                                   :              +- *(9) BroadcastHashJoin [n_nationkey#78L], [s_nationkey#74L], Inner, BuildLeft, false\n         :                                   :                 :- BroadcastQueryStage 6\n         :                                   :                 :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=656]\n         :                                   :                 :     +- *(6) Project [n_nationkey#78L]\n         :                                   :                 :        +- *(6) BroadcastHashJoin [n_regionkey#80L], [r_regionkey#82L], Inner, BuildRight, false\n         :                                   :                 :           :- *(6) Filter (isnotnull(n_nationkey#78L) AND isnotnull(n_regionkey#80L))\n         :                                   :                 :           :  +- *(6) ColumnarToRow\n         :                                   :                 :           :     +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#78L,n_regionkey#80L] Batched: true, DataFilters: [isnotnull(n_nationkey#78L), isnotnull(n_regionkey#80L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)], ReadSchema: struct<n_nationkey:bigint,n_regionkey:bigint>\n         :                                   :                 :           +- BroadcastQueryStage 1\n         :                                   :                 :              +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=330]\n         :                                   :                 :                 +- *(2) Project [r_regionkey#82L]\n         :                                   :                 :                    +- *(2) Filter ((isnotnull(r_name#83) AND (r_name#83 = ASIA)) AND isnotnull(r_regionkey#82L))\n         :                                   :                 :                       +- *(2) ColumnarToRow\n         :                                   :                 :                          +- FileScan parquet spark_catalog.tpch_100.region[r_regionkey#82L,r_name#83] Batched: true, DataFilters: [isnotnull(r_name#83), (r_name#83 = ASIA), isnotnull(r_regionkey#82L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/region], PartitionFilters: [], PushedFilters: [IsNotNull(r_name), EqualTo(r_name,ASIA), IsNotNull(r_regionkey)], ReadSchema: struct<r_regionkey:bigint,r_name:string>\n         :                                   :                 +- *(9) Filter (isnotnull(s_suppkey#71L) AND isnotnull(s_nationkey#74L))\n         :                                   :                    +- *(9) ColumnarToRow\n         :                                   :                       +- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#71L,s_nationkey#74L] Batched: true, DataFilters: [isnotnull(s_suppkey#71L), isnotnull(s_nationkey#74L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>\n         :                                   +- *(11) Sort [ps_suppkey#67L ASC NULLS FIRST], false, 0\n         :                                      +- AQEShuffleRead coalesced\n         :                                         +- ShuffleQueryStage 2\n         :                                            +- Exchange hashpartitioning(ps_suppkey#67L, 200), ENSURE_REQUIREMENTS, [plan_id=354]\n         :                                               +- *(3) Filter (isnotnull(ps_suppkey#67L) AND isnotnull(ps_partkey#66L))\n         :                                                  +- *(3) ColumnarToRow\n         :                                                     +- FileScan parquet spark_catalog.tpch_100.partsupp[ps_partkey#66L,ps_suppkey#67L,ps_supplycost#69] Batched: true, DataFilters: [isnotnull(ps_suppkey#67L), isnotnull(ps_partkey#66L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/partsupp], PartitionFilters: [], PushedFilters: [IsNotNull(ps_suppkey), IsNotNull(ps_partkey)], ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_supplycost:decimal(12,2)>\n         +- AQEShuffleRead local\n            +- ShuffleQueryStage 3\n               +- Exchange hashpartitioning(ps_partkey#17L, ps_supplycost#20, 200), ENSURE_REQUIREMENTS, [plan_id=382]\n                  +- *(4) Filter ((isnotnull(ps_partkey#17L) AND isnotnull(ps_supplycost#20)) AND isnotnull(ps_suppkey#18L))\n                     +- *(4) ColumnarToRow\n                        +- FileScan parquet spark_catalog.tpch_100.partsupp[ps_partkey#17L,ps_suppkey#18L,ps_supplycost#20] Batched: true, DataFilters: [isnotnull(ps_partkey#17L), isnotnull(ps_supplycost#20), isnotnull(ps_suppkey#18L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/partsupp], PartitionFilters: [], PushedFilters: [IsNotNull(ps_partkey), IsNotNull(ps_supplycost), IsNotNull(ps_suppkey)], ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_supplycost:decimal(12,2)>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2263536,
        "inputRowCount" : 47157
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "6" : [ 7402, 6904, 6704, 6988, 6938, 7238, 6192, 6950, 6908, 6592, 7157, 7107, 7367, 6624, 6689, 6882, 6990, 6938, 6532, 6960, 6775, 7369, 6982, 6701, 6758, 6815, 7771, 7088, 7011, 7397, 6791, 6935, 7658, 6814, 7391, 6353, 6487, 6450, 7488, 6700, 7047, 6701, 6824, 7229, 6800, 6935, 7385, 6354, 7038, 6825, 7595, 7127, 6873, 6690, 6828, 6809, 7259, 6734, 6626, 7131, 6639, 6973, 6468, 7491, 6641, 6634, 6915, 6437, 7001, 7194, 7189, 6806, 6882, 7026, 7439, 6765, 6587, 7069, 6874, 7084, 6668, 7064, 6492, 6681, 6929, 6565, 6854, 7301, 6840, 6284, 7206, 7155, 7225, 6539, 7037, 7478, 7444, 6799, 7735, 7158, 7871, 7458, 6764, 7367, 7450, 7154, 8097, 7122, 7375, 7248, 6975, 6718, 7253, 7094, 7059, 7138, 6417, 7332, 7090, 7510, 6844, 6708, 6984, 6685, 6739, 6972, 7006, 7229, 6955, 7263, 7559, 6731, 6644, 6804, 7023, 7320, 7011, 6800, 7099, 7050, 7012, 7221, 6647, 6632, 7530, 6926, 7118, 7218, 7476, 7300, 7039, 7256, 6484, 6626, 7461, 7264, 6888, 7366, 6809, 7266, 7493, 6342, 7008, 6473, 6870, 6470, 6522, 6501, 6815, 6817, 7283, 7115, 6776, 6356, 6896, 6825, 7219, 7028, 6628, 6961, 6947, 7305, 6995, 7289, 6818, 7169, 7307, 7153, 7385, 6286, 6572, 7325, 6805, 7792, 7643, 6860, 6797, 7120, 7219, 6713 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 12,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 21 ],
      "Objectives" : {
        "DurationInMs" : 214,
        "TotalTasksDurationInMs" : 208,
        "IOBytes" : {
          "Total" : 1335450,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1335450,
            "SW" : 0
          }
        }
      }
    },
    "8" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 836858537,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 201000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 201000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(s_suppkey#71L) AND isnotnull(s_nationkey#74L)) "
          },
          "5" : {
            "sign" : 953547453,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 201000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 201000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_suppkey#71L, s_name#72, s_address#73, s_nationkey#74L, s_phone#75, s_acctbal#76, s_comment#77], `spark_catalog`.`tpch_100`.`supplier`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : -1418722620,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 160000000,
                "rowCount" : 5000000
              },
              "compileTime" : {
                "sizeInBytes" : 160000000,
                "rowCount" : 5000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#74L = n_nationkey#78L) "
          },
          "0" : {
            "sign" : 350145127,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 80000000,
                "rowCount" : 5000000
              },
              "compileTime" : {
                "sizeInBytes" : 80000000,
                "rowCount" : 5000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_suppkey#71L] "
          },
          "2" : {
            "sign" : 1864985650,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1048688,
                "rowCount" : 5
              },
              "compileTime" : {
                "sizeInBytes" : 400,
                "rowCount" : 25
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#78L], BroadcastQueryStage 6 "
          },
          "3" : {
            "sign" : -1566196204,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 24000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 24000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_suppkey#71L, s_nationkey#74L] "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalQueryStage",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "LogicalRelation",
          "toId" : 4,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Filter",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [s_suppkey#71L]\n+- Join Inner, (s_nationkey#74L = n_nationkey#78L)\n   :- LogicalQueryStage Project [n_nationkey#78L], BroadcastQueryStage 6\n   +- Project [s_suppkey#71L, s_nationkey#74L]\n      +- Filter (isnotnull(s_suppkey#71L) AND isnotnull(s_nationkey#74L))\n         +- Relation spark_catalog.tpch_100.supplier[s_suppkey#71L,s_name#72,s_address#73,s_nationkey#74L,s_phone#75,s_acctbal#76,s_comment#77] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 994790115,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.supplier Output [2]: [s_suppkey#71L, s_nationkey#74L] Batched: true Location: InMemoryFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier] PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)] ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint> "
          },
          "1" : {
            "sign" : -2119879165,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 160000000,
            "rowCount" : 5000000,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [n_nationkey#78L] Right keys [1]: [s_nationkey#74L] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 202862350,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 80000000,
            "rowCount" : 5000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [s_suppkey#71L] Input [3]: [n_nationkey#78L, s_suppkey#71L, s_nationkey#74L] "
          },
          "2" : {
            "sign" : -2048473421,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048688,
            "rowCount" : 5,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [n_nationkey#78L] Arguments: 6 "
          },
          "3" : {
            "sign" : 1326729167,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 24000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [s_suppkey#71L, s_nationkey#74L] Condition : (isnotnull(s_suppkey#71L) AND isnotnull(s_nationkey#74L)) "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Scan parquet spark_catalog.tpch_100.supplier",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [s_suppkey#71L]\n+- BroadcastHashJoin [n_nationkey#78L], [s_nationkey#74L], Inner, BuildLeft, false\n   :- BroadcastQueryStage 6\n   :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=656]\n   :     +- *(6) Project [n_nationkey#78L]\n   :        +- *(6) BroadcastHashJoin [n_regionkey#80L], [r_regionkey#82L], Inner, BuildRight, false\n   :           :- *(6) Filter (isnotnull(n_nationkey#78L) AND isnotnull(n_regionkey#80L))\n   :           :  +- *(6) ColumnarToRow\n   :           :     +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#78L,n_regionkey#80L] Batched: true, DataFilters: [isnotnull(n_nationkey#78L), isnotnull(n_regionkey#80L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)], ReadSchema: struct<n_nationkey:bigint,n_regionkey:bigint>\n   :           +- BroadcastQueryStage 1\n   :              +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=330]\n   :                 +- *(2) Project [r_regionkey#82L]\n   :                    +- *(2) Filter ((isnotnull(r_name#83) AND (r_name#83 = ASIA)) AND isnotnull(r_regionkey#82L))\n   :                       +- *(2) ColumnarToRow\n   :                          +- FileScan parquet spark_catalog.tpch_100.region[r_regionkey#82L,r_name#83] Batched: true, DataFilters: [isnotnull(r_name#83), (r_name#83 = ASIA), isnotnull(r_regionkey#82L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/region], PartitionFilters: [], PushedFilters: [IsNotNull(r_name), EqualTo(r_name,ASIA), IsNotNull(r_regionkey)], ReadSchema: struct<r_regionkey:bigint,r_name:string>\n   +- Filter (isnotnull(s_suppkey#71L) AND isnotnull(s_nationkey#74L))\n      +- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#71L,s_nationkey#74L] Batched: true, DataFilters: [isnotnull(s_suppkey#71L), isnotnull(s_nationkey#74L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 25048688,
        "inputRowCount" : 1000005
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 28,
        "FinishedTasksTotalTimeInMs" : 46301.0,
        "FinishedTasksDistributionInMs" : [ 1232.0, 1366.0, 1432.0, 1821.0, 3214.0 ]
      },
      "QueryStageOptimizationId" : 8,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 9 ],
      "Objectives" : {
        "DurationInMs" : 564,
        "TotalTasksDurationInMs" : 1628,
        "IOBytes" : {
          "Total" : 6733132,
          "Details" : {
            "IR" : 5700125,
            "IW" : 0,
            "SR" : 0,
            "SW" : 1033007
          }
        }
      }
    },
    "4" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 142833660,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3275,
                "rowCount" : 25
              },
              "compileTime" : {
                "sizeInBytes" : 3275,
                "rowCount" : 25
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [n_nationkey#78L, n_name#79, n_regionkey#80L, n_comment#81], `spark_catalog`.`tpch_100`.`nation`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : -2059072293,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 800,
                "rowCount" : 25
              },
              "compileTime" : {
                "sizeInBytes" : 800,
                "rowCount" : 25
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (n_regionkey#80L = r_regionkey#82L) "
          },
          "0" : {
            "sign" : 1994305051,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 400,
                "rowCount" : 25
              },
              "compileTime" : {
                "sizeInBytes" : 400,
                "rowCount" : 25
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_nationkey#78L] "
          },
          "2" : {
            "sign" : 176593861,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 600,
                "rowCount" : 25
              },
              "compileTime" : {
                "sizeInBytes" : 600,
                "rowCount" : 25
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_nationkey#78L, n_regionkey#80L] "
          },
          "3" : {
            "sign" : -1197528884,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3275,
                "rowCount" : 25
              },
              "compileTime" : {
                "sizeInBytes" : 3275,
                "rowCount" : 25
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(n_nationkey#78L) AND isnotnull(n_regionkey#80L)) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [n_nationkey#78L]\n+- Join Inner, (n_regionkey#80L = r_regionkey#82L)\n   :- Project [n_nationkey#78L, n_regionkey#80L]\n   :  +- Filter (isnotnull(n_nationkey#78L) AND isnotnull(n_regionkey#80L))\n   :     +- Relation spark_catalog.tpch_100.nation[n_nationkey#78L,n_name#79,n_regionkey#80L,n_comment#81] parquet\n   +- Project [r_regionkey#82L]\n      +- Filter ((isnotnull(r_name#83) AND (r_name#83 = ASIA)) AND isnotnull(r_regionkey#82L))\n         +- Relation spark_catalog.tpch_100.region[r_regionkey#82L,r_name#83,r_comment#84] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 784220338,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048584,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [r_regionkey#82L] Arguments: 1 "
          },
          "1" : {
            "sign" : -1132970416,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 800,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [n_regionkey#80L] Right keys [1]: [r_regionkey#82L] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : -1980178672,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 400,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [n_nationkey#78L] Input [3]: [n_nationkey#78L, n_regionkey#80L, r_regionkey#82L] "
          },
          "2" : {
            "sign" : -1957996871,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 600,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [n_nationkey#78L, n_regionkey#80L] Condition : (isnotnull(n_nationkey#78L) AND isnotnull(n_regionkey#80L)) "
          },
          "3" : {
            "sign" : 2017864073,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 600,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.nation Output [2]: [n_nationkey#78L, n_regionkey#80L] Batched: true Location: InMemoryFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation] PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)] ReadSchema: struct<n_nationkey:bigint,n_regionkey:bigint> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpch_100.nation",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [n_nationkey#78L]\n+- BroadcastHashJoin [n_regionkey#80L], [r_regionkey#82L], Inner, BuildRight, false\n   :- Filter (isnotnull(n_nationkey#78L) AND isnotnull(n_regionkey#80L))\n   :  +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#78L,n_regionkey#80L] Batched: true, DataFilters: [isnotnull(n_nationkey#78L), isnotnull(n_regionkey#80L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)], ReadSchema: struct<n_nationkey:bigint,n_regionkey:bigint>\n   +- BroadcastQueryStage 1\n      +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=330]\n         +- *(2) Project [r_regionkey#82L]\n            +- *(2) Filter ((isnotnull(r_name#83) AND (r_name#83 = ASIA)) AND isnotnull(r_regionkey#82L))\n               +- *(2) ColumnarToRow\n                  +- FileScan parquet spark_catalog.tpch_100.region[r_regionkey#82L,r_name#83] Batched: true, DataFilters: [isnotnull(r_name#83), (r_name#83 = ASIA), isnotnull(r_regionkey#82L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/region], PartitionFilters: [], PushedFilters: [IsNotNull(r_name), EqualTo(r_name,ASIA), IsNotNull(r_regionkey)], ReadSchema: struct<r_regionkey:bigint,r_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1049184,
        "inputRowCount" : 26
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 22,
        "FinishedTasksTotalTimeInMs" : 70076.0,
        "FinishedTasksDistributionInMs" : [ 225.0, 465.0, 4846.0, 5163.0, 5496.0 ]
      },
      "QueryStageOptimizationId" : 4,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 4 ],
      "Objectives" : {
        "DurationInMs" : 6218,
        "TotalTasksDurationInMs" : 167,
        "IOBytes" : {
          "Total" : 2886,
          "Details" : {
            "IR" : 2886,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "11" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -496367647,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 283286080000000,
                "rowCount" : 6438320000000
              },
              "compileTime" : {
                "sizeInBytes" : 283286080000000,
                "rowCount" : 6438320000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [p_partkey#1L, p_mfgr#3, ps_suppkey#18L] "
          },
          "1" : {
            "sign" : 976565859,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 437805760000000,
                "rowCount" : 6438320000000
              },
              "compileTime" : {
                "sizeInBytes" : 437805760000000,
                "rowCount" : 6438320000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, ((p_partkey#1L = ps_partkey#17L) AND (ps_supplycost#20 = min(ps_supplycost)#65)) "
          },
          "2" : {
            "sign" : -1761984705,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2560000000,
                "rowCount" : 80000000
              },
              "compileTime" : {
                "sizeInBytes" : 2560000000,
                "rowCount" : 80000000
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ps_partkey#17L, ps_suppkey#18L, ps_supplycost#20], ShuffleQueryStage 3 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalQueryStage",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [p_partkey#1L, p_mfgr#3, ps_suppkey#18L]\n+- Join Inner, ((p_partkey#1L = ps_partkey#17L) AND (ps_supplycost#20 = min(ps_supplycost)#65))\n   :- Project [p_partkey#1L, p_mfgr#3, min(ps_supplycost)#65]\n   :  +- Join Inner, (p_partkey#1L = ps_partkey#66L)\n   :     :- LogicalQueryStage Project [p_partkey#1L, p_mfgr#3], ShuffleQueryStage 0\n   :     +- Filter isnotnull(min(ps_supplycost)#65)\n   :        +- Aggregate [ps_partkey#66L], [min(ps_supplycost#69) AS min(ps_supplycost)#65, ps_partkey#66L]\n   :           +- Project [ps_partkey#66L, ps_supplycost#69]\n   :              +- Join Inner, (s_suppkey#71L = ps_suppkey#67L)\n   :                 :- Project [s_suppkey#71L]\n   :                 :  +- Join Inner, (s_nationkey#74L = n_nationkey#78L)\n   :                 :     :- LogicalQueryStage Project [n_nationkey#78L], BroadcastQueryStage 6\n   :                 :     +- Project [s_suppkey#71L, s_nationkey#74L]\n   :                 :        +- Filter (isnotnull(s_suppkey#71L) AND isnotnull(s_nationkey#74L))\n   :                 :           +- Relation spark_catalog.tpch_100.supplier[s_suppkey#71L,s_name#72,s_address#73,s_nationkey#74L,s_phone#75,s_acctbal#76,s_comment#77] parquet\n   :                 +- LogicalQueryStage Project [ps_partkey#66L, ps_suppkey#67L, ps_supplycost#69], ShuffleQueryStage 2\n   +- LogicalQueryStage Project [ps_partkey#17L, ps_suppkey#18L, ps_supplycost#20], ShuffleQueryStage 3\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -436090753,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 283286080000000,
            "rowCount" : 6438320000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [p_partkey#1L, p_mfgr#3, ps_suppkey#18L] Input [6]: [p_partkey#1L, p_mfgr#3, min(ps_supplycost)#65, ps_partkey#17L, ps_suppkey#18L, ps_supplycost#20] "
          },
          "1" : {
            "sign" : 25441179,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 437805760000000,
            "rowCount" : 6438320000000,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [2]: [p_partkey#1L, min(ps_supplycost)#65] Right keys [2]: [ps_partkey#17L, ps_supplycost#20] Join type: Inner Join condition: None "
          },
          "2" : {
            "sign" : -1400103197,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 35651584,
            "rowCount" : 47157,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [3]: [p_partkey#1L, p_mfgr#3, min(ps_supplycost)#65] Arguments: 12 "
          },
          "3" : {
            "sign" : 565508386,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [ps_partkey#17L, ps_suppkey#18L, ps_supplycost#20] Arguments: 3 "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "ShuffleQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [p_partkey#1L, p_mfgr#3, ps_suppkey#18L]\n+- BroadcastHashJoin [p_partkey#1L, min(ps_supplycost)#65], [ps_partkey#17L, ps_supplycost#20], Inner, BuildLeft, false\n   :- BroadcastQueryStage 12\n   :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true], input[2, decimal(12,2), true]),false), [plan_id=1680]\n   :     +- *(13) Project [p_partkey#1L, p_mfgr#3, min(ps_supplycost)#65]\n   :        +- *(13) BroadcastHashJoin [p_partkey#1L], [ps_partkey#66L], Inner, BuildLeft, false\n   :           :- BroadcastQueryStage 8\n   :           :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=879]\n   :           :     +- AQEShuffleRead local\n   :           :        +- ShuffleQueryStage 0\n   :           :           +- Exchange hashpartitioning(p_partkey#1L, 200), ENSURE_REQUIREMENTS, [plan_id=309]\n   :           :              +- *(1) Project [p_partkey#1L, p_mfgr#3]\n   :           :                 +- *(1) Filter ((((isnotnull(p_size#5) AND isnotnull(p_type#4)) AND (p_size#5 = 38)) AND EndsWith(p_type#4, STEEL)) AND isnotnull(p_partkey#1L))\n   :           :                    +- *(1) ColumnarToRow\n   :           :                       +- FileScan parquet spark_catalog.tpch_100.part[p_partkey#1L,p_mfgr#3,p_type#4,p_size#5,p_brand#9] Batched: true, DataFilters: [isnotnull(p_size#5), isnotnull(p_type#4), (p_size#5 = 38), EndsWith(p_type#4, STEEL), isnotnull(..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/part], PartitionFilters: [], PushedFilters: [IsNotNull(p_size), IsNotNull(p_type), EqualTo(p_size,38), StringEndsWith(p_type,STEEL), IsNotNul..., ReadSchema: struct<p_partkey:bigint,p_mfgr:string,p_type:string,p_size:int>\n   :           +- *(13) Filter isnotnull(min(ps_supplycost)#65)\n   :              +- *(13) HashAggregate(keys=[ps_partkey#66L], functions=[min(ps_supplycost#69)], output=[min(ps_supplycost)#65, ps_partkey#66L])\n   :                 +- AQEShuffleRead coalesced\n   :                    +- ShuffleQueryStage 11\n   :                       +- Exchange hashpartitioning(ps_partkey#66L, 200), ENSURE_REQUIREMENTS, [plan_id=1485]\n   :                          +- *(12) HashAggregate(keys=[ps_partkey#66L], functions=[partial_min(ps_supplycost#69)], output=[ps_partkey#66L, min#94])\n   :                             +- *(12) Project [ps_partkey#66L, ps_supplycost#69]\n   :                                +- *(12) SortMergeJoin [s_suppkey#71L], [ps_suppkey#67L], Inner\n   :                                   :- *(10) Sort [s_suppkey#71L ASC NULLS FIRST], false, 0\n   :                                   :  +- AQEShuffleRead coalesced\n   :                                   :     +- ShuffleQueryStage 10\n   :                                   :        +- Exchange hashpartitioning(s_suppkey#71L, 200), ENSURE_REQUIREMENTS, [plan_id=1271]\n   :                                   :           +- *(9) Project [s_suppkey#71L]\n   :                                   :              +- *(9) BroadcastHashJoin [n_nationkey#78L], [s_nationkey#74L], Inner, BuildLeft, false\n   :                                   :                 :- BroadcastQueryStage 6\n   :                                   :                 :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=656]\n   :                                   :                 :     +- *(6) Project [n_nationkey#78L]\n   :                                   :                 :        +- *(6) BroadcastHashJoin [n_regionkey#80L], [r_regionkey#82L], Inner, BuildRight, false\n   :                                   :                 :           :- *(6) Filter (isnotnull(n_nationkey#78L) AND isnotnull(n_regionkey#80L))\n   :                                   :                 :           :  +- *(6) ColumnarToRow\n   :                                   :                 :           :     +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#78L,n_regionkey#80L] Batched: true, DataFilters: [isnotnull(n_nationkey#78L), isnotnull(n_regionkey#80L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)], ReadSchema: struct<n_nationkey:bigint,n_regionkey:bigint>\n   :                                   :                 :           +- BroadcastQueryStage 1\n   :                                   :                 :              +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=330]\n   :                                   :                 :                 +- *(2) Project [r_regionkey#82L]\n   :                                   :                 :                    +- *(2) Filter ((isnotnull(r_name#83) AND (r_name#83 = ASIA)) AND isnotnull(r_regionkey#82L))\n   :                                   :                 :                       +- *(2) ColumnarToRow\n   :                                   :                 :                          +- FileScan parquet spark_catalog.tpch_100.region[r_regionkey#82L,r_name#83] Batched: true, DataFilters: [isnotnull(r_name#83), (r_name#83 = ASIA), isnotnull(r_regionkey#82L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/region], PartitionFilters: [], PushedFilters: [IsNotNull(r_name), EqualTo(r_name,ASIA), IsNotNull(r_regionkey)], ReadSchema: struct<r_regionkey:bigint,r_name:string>\n   :                                   :                 +- *(9) Filter (isnotnull(s_suppkey#71L) AND isnotnull(s_nationkey#74L))\n   :                                   :                    +- *(9) ColumnarToRow\n   :                                   :                       +- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#71L,s_nationkey#74L] Batched: true, DataFilters: [isnotnull(s_suppkey#71L), isnotnull(s_nationkey#74L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>\n   :                                   +- *(11) Sort [ps_suppkey#67L ASC NULLS FIRST], false, 0\n   :                                      +- AQEShuffleRead coalesced\n   :                                         +- ShuffleQueryStage 2\n   :                                            +- Exchange hashpartitioning(ps_suppkey#67L, 200), ENSURE_REQUIREMENTS, [plan_id=354]\n   :                                               +- *(3) Filter (isnotnull(ps_suppkey#67L) AND isnotnull(ps_partkey#66L))\n   :                                                  +- *(3) ColumnarToRow\n   :                                                     +- FileScan parquet spark_catalog.tpch_100.partsupp[ps_partkey#66L,ps_suppkey#67L,ps_supplycost#69] Batched: true, DataFilters: [isnotnull(ps_suppkey#67L), isnotnull(ps_partkey#66L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/partsupp], PartitionFilters: [], PushedFilters: [IsNotNull(ps_suppkey), IsNotNull(ps_partkey)], ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_supplycost:decimal(12,2)>\n   +- ShuffleQueryStage 3\n      +- Exchange hashpartitioning(ps_partkey#17L, ps_supplycost#20, 200), ENSURE_REQUIREMENTS, [plan_id=382]\n         +- *(4) Filter ((isnotnull(ps_partkey#17L) AND isnotnull(ps_supplycost#20)) AND isnotnull(ps_suppkey#18L))\n            +- *(4) ColumnarToRow\n               +- FileScan parquet spark_catalog.tpch_100.partsupp[ps_partkey#17L,ps_suppkey#18L,ps_supplycost#20] Batched: true, DataFilters: [isnotnull(ps_partkey#17L), isnotnull(ps_supplycost#20), isnotnull(ps_suppkey#18L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/partsupp], PartitionFilters: [], PushedFilters: [IsNotNull(ps_partkey), IsNotNull(ps_supplycost), IsNotNull(ps_suppkey)], ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_supplycost:decimal(12,2)>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2595651584,
        "inputRowCount" : 80047157
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "2" : [ 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 11,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 18 ],
      "Objectives" : {
        "DurationInMs" : 2390,
        "TotalTasksDurationInMs" : 30784,
        "IOBytes" : {
          "Total" : 1438307389,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1436971939,
            "SW" : 1335450
          }
        }
      }
    },
    "9" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 1036307449,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Aggregate",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9600000000000000,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 9600000000000000,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Aggregate Arguments: [ps_partkey#66L], [min(ps_supplycost#69) AS min(ps_supplycost)#65, ps_partkey#66L] "
          },
          "1" : {
            "sign" : 1076459106,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9600000000000000,
                "rowCount" : 400000000000000
              },
              "compileTime" : {
                "sizeInBytes" : 9600000000000000,
                "rowCount" : 400000000000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ps_partkey#66L, ps_supplycost#69] "
          },
          "2" : {
            "sign" : 715450708,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 16000000000000000,
                "rowCount" : 400000000000000
              },
              "compileTime" : {
                "sizeInBytes" : 16000000000000000,
                "rowCount" : 400000000000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#71L = ps_suppkey#67L) "
          },
          "3" : {
            "sign" : 2055423279,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2560000000,
                "rowCount" : 80000000
              },
              "compileTime" : {
                "sizeInBytes" : 2560000000,
                "rowCount" : 80000000
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [ps_partkey#66L, ps_suppkey#67L, ps_supplycost#69], ShuffleQueryStage 2 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "LogicalQueryStage",
          "toId" : 2,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Join",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "Aggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Aggregate [ps_partkey#66L], [min(ps_supplycost#69) AS min(ps_supplycost)#65, ps_partkey#66L]\n+- Project [ps_partkey#66L, ps_supplycost#69]\n   +- Join Inner, (s_suppkey#71L = ps_suppkey#67L)\n      :- Project [s_suppkey#71L]\n      :  +- Join Inner, (s_nationkey#74L = n_nationkey#78L)\n      :     :- LogicalQueryStage Project [n_nationkey#78L], BroadcastQueryStage 6\n      :     +- Project [s_suppkey#71L, s_nationkey#74L]\n      :        +- Filter (isnotnull(s_suppkey#71L) AND isnotnull(s_nationkey#74L))\n      :           +- Relation spark_catalog.tpch_100.supplier[s_suppkey#71L,s_name#72,s_address#73,s_nationkey#74L,s_phone#75,s_acctbal#76,s_comment#77] parquet\n      +- LogicalQueryStage Project [ps_partkey#66L, ps_suppkey#67L, ps_supplycost#69], ShuffleQueryStage 2\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -813561302,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 3198224,
            "rowCount" : 199889,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [1]: [s_suppkey#71L] Arguments: 10 "
          },
          "5" : {
            "sign" : 1801905602,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [3]: [ps_partkey#66L, ps_suppkey#67L, ps_supplycost#69] Arguments: [ps_suppkey#67L ASC NULLS FIRST], false, 0 "
          },
          "6" : {
            "sign" : -1190596851,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [3]: [ps_partkey#66L, ps_suppkey#67L, ps_supplycost#69] Arguments: 2 "
          },
          "1" : {
            "sign" : 2104342830,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 9600000000000000,
            "rowCount" : 400000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [ps_partkey#66L, ps_supplycost#69] Input [4]: [s_suppkey#71L, ps_partkey#66L, ps_suppkey#67L, ps_supplycost#69] "
          },
          "0" : {
            "sign" : -498479700,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 9600000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) HashAggregate Input [2]: [ps_partkey#66L, ps_supplycost#69] Keys [1]: [ps_partkey#66L] Functions [1]: [partial_min(ps_supplycost#69)] Aggregate Attributes [1]: [min#93] Results [2]: [ps_partkey#66L, min#94] "
          },
          "2" : {
            "sign" : -867632386,
            "className" : "org.apache.spark.sql.execution.joins.SortMergeJoinExec",
            "sizeInBytes" : 16000000000000000,
            "rowCount" : 400000000000000,
            "isRuntime" : false,
            "predicate" : " (unknown) SortMergeJoin Left keys [1]: [s_suppkey#71L] Right keys [1]: [ps_suppkey#67L] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : -477899686,
            "className" : "org.apache.spark.sql.execution.SortExec",
            "sizeInBytes" : -1,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Input [1]: [s_suppkey#71L] Arguments: [s_suppkey#71L ASC NULLS FIRST], false, 0 "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 3,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 6,
          "fromName" : "ShuffleQueryStage",
          "toId" : 5,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "Sort",
          "toId" : 2,
          "toName" : "SortMergeJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "SortMergeJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "HashAggregate(keys=[ps_partkey#66L], functions=[partial_min(ps_supplycost#69)], output=[ps_partkey#66L, min#94])\n+- Project [ps_partkey#66L, ps_supplycost#69]\n   +- SortMergeJoin [s_suppkey#71L], [ps_suppkey#67L], Inner\n      :- Sort [s_suppkey#71L ASC NULLS FIRST], false, 0\n      :  +- ShuffleQueryStage 10\n      :     +- Exchange hashpartitioning(s_suppkey#71L, 200), ENSURE_REQUIREMENTS, [plan_id=1271]\n      :        +- *(9) Project [s_suppkey#71L]\n      :           +- *(9) BroadcastHashJoin [n_nationkey#78L], [s_nationkey#74L], Inner, BuildLeft, false\n      :              :- BroadcastQueryStage 6\n      :              :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=656]\n      :              :     +- *(6) Project [n_nationkey#78L]\n      :              :        +- *(6) BroadcastHashJoin [n_regionkey#80L], [r_regionkey#82L], Inner, BuildRight, false\n      :              :           :- *(6) Filter (isnotnull(n_nationkey#78L) AND isnotnull(n_regionkey#80L))\n      :              :           :  +- *(6) ColumnarToRow\n      :              :           :     +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#78L,n_regionkey#80L] Batched: true, DataFilters: [isnotnull(n_nationkey#78L), isnotnull(n_regionkey#80L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)], ReadSchema: struct<n_nationkey:bigint,n_regionkey:bigint>\n      :              :           +- BroadcastQueryStage 1\n      :              :              +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=330]\n      :              :                 +- *(2) Project [r_regionkey#82L]\n      :              :                    +- *(2) Filter ((isnotnull(r_name#83) AND (r_name#83 = ASIA)) AND isnotnull(r_regionkey#82L))\n      :              :                       +- *(2) ColumnarToRow\n      :              :                          +- FileScan parquet spark_catalog.tpch_100.region[r_regionkey#82L,r_name#83] Batched: true, DataFilters: [isnotnull(r_name#83), (r_name#83 = ASIA), isnotnull(r_regionkey#82L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/region], PartitionFilters: [], PushedFilters: [IsNotNull(r_name), EqualTo(r_name,ASIA), IsNotNull(r_regionkey)], ReadSchema: struct<r_regionkey:bigint,r_name:string>\n      :              +- *(9) Filter (isnotnull(s_suppkey#71L) AND isnotnull(s_nationkey#74L))\n      :                 +- *(9) ColumnarToRow\n      :                    +- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#71L,s_nationkey#74L] Batched: true, DataFilters: [isnotnull(s_suppkey#71L), isnotnull(s_nationkey#74L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>\n      +- Sort [ps_suppkey#67L ASC NULLS FIRST], false, 0\n         +- ShuffleQueryStage 2\n            +- Exchange hashpartitioning(ps_suppkey#67L, 200), ENSURE_REQUIREMENTS, [plan_id=354]\n               +- *(3) Filter (isnotnull(ps_suppkey#67L) AND isnotnull(ps_partkey#66L))\n                  +- *(3) ColumnarToRow\n                     +- FileScan parquet spark_catalog.tpch_100.partsupp[ps_partkey#66L,ps_suppkey#67L,ps_supplycost#69] Batched: true, DataFilters: [isnotnull(ps_suppkey#67L), isnotnull(ps_partkey#66L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/partsupp], PartitionFilters: [], PushedFilters: [IsNotNull(ps_suppkey), IsNotNull(ps_partkey)], ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_supplycost:decimal(12,2)>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2563198224,
        "inputRowCount" : 80199889
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "4" : [ 5313, 5313, 5844, 5313, 5313, 5313, 5313, 5313, 5844, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5844, 5313, 5313, 5313, 4830, 5313, 5313, 5313, 5313, 5313, 5844, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5844, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5844, 5844, 5313, 5313, 5844, 5313, 5313, 5313, 5844, 5313, 5844, 5313, 5313, 5844, 5313, 5313, 5313, 5844, 5313, 5844, 5844, 5313, 5313, 5844, 5313, 5313, 5313, 5313, 5844, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5844, 5313, 5313, 5313, 5313, 5313, 5313, 5844, 5313, 5313, 5313, 5313, 5313, 5844, 5313, 5844, 5844, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5844, 5313, 5313, 5313, 5313, 5844, 5844, 5313, 5313, 5313, 5844, 5844, 5313, 5313, 5844, 5313, 5313, 5844, 5844, 5313, 5844, 5313, 5313, 5313, 5844, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5844, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 5313, 4830, 5313, 5844, 5313, 5313, 4830, 5844, 5313, 5313, 5313, 5313, 5313, 5844, 5313, 5313, 5844, 5313, 5313, 5313, 5313, 5844, 5313, 5313, 5313, 5313, 5844, 5313 ],
        "1" : [ 7357167, 7555897, 7555897, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7536024, 7568237, 7568237, 7568237, 7436659, 7568237, 7555897, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7536024, 7568237, 7496278, 7568237, 7568237, 7568237, 7548364, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7536024, 7516151, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7496278, 7568237, 7568237, 7536024, 7568237, 7568237, 7568237, 7568237, 7548364, 7456532, 7568237, 7555897, 7568237, 7555897, 7555897, 7568237, 7555897, 7555897, 7568237, 7568237, 7568237, 7568237, 7337294, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7536024, 7536024, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7548364, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7555897, 7568237, 7555897, 7568237, 7396913, 7555897, 7568237, 7568237, 7555897, 7568237, 7568237, 7568237, 7516151, 7568237, 7568237, 7568237, 7568237, 7536024, 7568237, 7568237, 7416786, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7568237, 7516151, 7568237, 7568237, 7568237, 7436659, 7555897, 7516151, 7568237, 7555897, 7568237, 7568237, 7548364, 7568237, 7568237, 7568237, 7568237, 7568237, 7516151, 7568237, 7568237, 7568237, 7555897 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 5,
        "FinishedTasksNum" : 46,
        "FinishedTasksTotalTimeInMs" : 51991.0,
        "FinishedTasksDistributionInMs" : [ 36.0, 264.0, 1358.0, 1534.0, 3214.0 ]
      },
      "QueryStageOptimizationId" : 9,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 12 ],
      "Objectives" : {
        "DurationInMs" : 5598,
        "TotalTasksDurationInMs" : 70199,
        "IOBytes" : {
          "Total" : 1628879374,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1426026839,
            "SW" : 202852535
          }
        }
      }
    },
    "13" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : 1706252396,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1508186491680,
                "rowCount" : 9426165573
              },
              "compileTime" : {
                "sizeInBytes" : 1508186491680,
                "rowCount" : 9426165573
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_suppkey#10L = ps_suppkey#18L) "
          },
          "5" : {
            "sign" : 1323085775,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 41605872,
                "rowCount" : 199889
              },
              "compileTime" : {
                "sizeInBytes" : 1065000000,
                "rowCount" : 5000000
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16], ShuffleQueryStage 9 "
          },
          "1" : {
            "sign" : -1463391620,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.LocalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1357367842512,
                "rowCount" : 9426165573
              },
              "compileTime" : {
                "sizeInBytes" : 1357367842512,
                "rowCount" : 9426165573
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LocalLimit Arguments: 100 "
          },
          "0" : {
            "sign" : -1719287181,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.GlobalLimit",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 14400,
                "rowCount" : 100
              },
              "compileTime" : {
                "sizeInBytes" : 14400,
                "rowCount" : 100
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) GlobalLimit Arguments: 100 "
          },
          "2" : {
            "sign" : -212734627,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Sort",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1357367842512,
                "rowCount" : 9426165573
              },
              "compileTime" : {
                "sizeInBytes" : 1357367842512,
                "rowCount" : 9426165573
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Sort Arguments: [s_acctbal#15 DESC NULLS LAST, n_name#23 ASC NULLS FIRST, s_name#11 ASC NULLS FIRST, p_partkey#1L ASC NULLS FIRST], true "
          },
          "3" : {
            "sign" : -1100520917,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1357367842512,
                "rowCount" : 9426165573
              },
              "compileTime" : {
                "sizeInBytes" : 1357367842512,
                "rowCount" : 9426165573
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [s_acctbal#15, s_name#11, n_name#23, p_partkey#1L, p_mfgr#3, s_address#12, s_phone#14, s_comment#16] "
          }
        },
        "links" : [ {
          "fromId" : 5,
          "fromName" : "LogicalQueryStage",
          "toId" : 4,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Join",
          "toId" : 3,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Project",
          "toId" : 2,
          "toName" : "Sort",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Sort",
          "toId" : 1,
          "toName" : "LocalLimit",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "LocalLimit",
          "toId" : 0,
          "toName" : "GlobalLimit",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "GlobalLimit 100\n+- LocalLimit 100\n   +- Sort [s_acctbal#15 DESC NULLS LAST, n_name#23 ASC NULLS FIRST, s_name#11 ASC NULLS FIRST, p_partkey#1L ASC NULLS FIRST], true\n      +- Project [s_acctbal#15, s_name#11, n_name#23, p_partkey#1L, p_mfgr#3, s_address#12, s_phone#14, s_comment#16]\n         +- Join Inner, (s_suppkey#10L = ps_suppkey#18L)\n            :- LogicalQueryStage Project [p_partkey#1L, p_mfgr#3, ps_suppkey#18L], ShuffleQueryStage 13\n            +- LogicalQueryStage Project [n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16], ShuffleQueryStage 9\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : -504372241,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 41605872,
            "rowCount" : 199889,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [7]: [n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16] Arguments: 9 "
          },
          "1" : {
            "sign" : 1554997103,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1357367842512,
            "rowCount" : 9426165573,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [8]: [s_acctbal#15, s_name#11, n_name#23, p_partkey#1L, p_mfgr#3, s_address#12, s_phone#14, s_comment#16] Input [10]: [p_partkey#1L, p_mfgr#3, ps_suppkey#18L, n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16] "
          },
          "0" : {
            "sign" : 4117865,
            "className" : "org.apache.spark.sql.execution.TakeOrderedAndProjectExec",
            "sizeInBytes" : 14400,
            "rowCount" : 100,
            "isRuntime" : false,
            "predicate" : " (unknown) TakeOrderedAndProject Input [8]: [s_acctbal#15, s_name#11, n_name#23, p_partkey#1L, p_mfgr#3, s_address#12, s_phone#14, s_comment#16] Arguments: 100, [s_acctbal#15 DESC NULLS LAST, n_name#23 ASC NULLS FIRST, s_name#11 ASC NULLS FIRST, p_partkey#1L ASC NULLS FIRST], [s_acctbal#15, s_name#11, n_name#23, p_partkey#1L, p_mfgr#3, s_address#12, s_phone#14, s_comment#16] "
          },
          "2" : {
            "sign" : 140341820,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 1508186491680,
            "rowCount" : 9426165573,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [ps_suppkey#18L] Right keys [1]: [s_suppkey#10L] Join type: Inner Join condition: None "
          },
          "3" : {
            "sign" : -1205031923,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 6291456,
            "rowCount" : 47157,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [3]: [p_partkey#1L, p_mfgr#3, ps_suppkey#18L] Arguments: 14 "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "BroadcastQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "ShuffleQueryStage",
          "toId" : 2,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "BroadcastHashJoin",
          "toId" : 1,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Project",
          "toId" : 0,
          "toName" : "TakeOrderedAndProject",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "TakeOrderedAndProject(limit=100, orderBy=[s_acctbal#15 DESC NULLS LAST,n_name#23 ASC NULLS FIRST,s_name#11 ASC NULLS FIRST,p_partkey#1L ASC NULLS FIRST], output=[s_acctbal#15,s_name#11,n_name#23,p_partkey#1L,p_mfgr#3,s_address#12,s_phone#14,s_comment#16])\n+- Project [s_acctbal#15, s_name#11, n_name#23, p_partkey#1L, p_mfgr#3, s_address#12, s_phone#14, s_comment#16]\n   +- BroadcastHashJoin [ps_suppkey#18L], [s_suppkey#10L], Inner, BuildLeft, false\n      :- BroadcastQueryStage 14\n      :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[2, bigint, true]),false), [plan_id=1780]\n      :     +- AQEShuffleRead local\n      :        +- ShuffleQueryStage 13\n      :           +- Exchange hashpartitioning(ps_suppkey#18L, 200), ENSURE_REQUIREMENTS, [plan_id=1746]\n      :              +- *(14) Project [p_partkey#1L, p_mfgr#3, ps_suppkey#18L]\n      :                 +- *(14) BroadcastHashJoin [p_partkey#1L, min(ps_supplycost)#65], [ps_partkey#17L, ps_supplycost#20], Inner, BuildLeft, false\n      :                    :- BroadcastQueryStage 12\n      :                    :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true], input[2, decimal(12,2), true]),false), [plan_id=1680]\n      :                    :     +- *(13) Project [p_partkey#1L, p_mfgr#3, min(ps_supplycost)#65]\n      :                    :        +- *(13) BroadcastHashJoin [p_partkey#1L], [ps_partkey#66L], Inner, BuildLeft, false\n      :                    :           :- BroadcastQueryStage 8\n      :                    :           :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=879]\n      :                    :           :     +- AQEShuffleRead local\n      :                    :           :        +- ShuffleQueryStage 0\n      :                    :           :           +- Exchange hashpartitioning(p_partkey#1L, 200), ENSURE_REQUIREMENTS, [plan_id=309]\n      :                    :           :              +- *(1) Project [p_partkey#1L, p_mfgr#3]\n      :                    :           :                 +- *(1) Filter ((((isnotnull(p_size#5) AND isnotnull(p_type#4)) AND (p_size#5 = 38)) AND EndsWith(p_type#4, STEEL)) AND isnotnull(p_partkey#1L))\n      :                    :           :                    +- *(1) ColumnarToRow\n      :                    :           :                       +- FileScan parquet spark_catalog.tpch_100.part[p_partkey#1L,p_mfgr#3,p_type#4,p_size#5,p_brand#9] Batched: true, DataFilters: [isnotnull(p_size#5), isnotnull(p_type#4), (p_size#5 = 38), EndsWith(p_type#4, STEEL), isnotnull(..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/part], PartitionFilters: [], PushedFilters: [IsNotNull(p_size), IsNotNull(p_type), EqualTo(p_size,38), StringEndsWith(p_type,STEEL), IsNotNul..., ReadSchema: struct<p_partkey:bigint,p_mfgr:string,p_type:string,p_size:int>\n      :                    :           +- *(13) Filter isnotnull(min(ps_supplycost)#65)\n      :                    :              +- *(13) HashAggregate(keys=[ps_partkey#66L], functions=[min(ps_supplycost#69)], output=[min(ps_supplycost)#65, ps_partkey#66L])\n      :                    :                 +- AQEShuffleRead coalesced\n      :                    :                    +- ShuffleQueryStage 11\n      :                    :                       +- Exchange hashpartitioning(ps_partkey#66L, 200), ENSURE_REQUIREMENTS, [plan_id=1485]\n      :                    :                          +- *(12) HashAggregate(keys=[ps_partkey#66L], functions=[partial_min(ps_supplycost#69)], output=[ps_partkey#66L, min#94])\n      :                    :                             +- *(12) Project [ps_partkey#66L, ps_supplycost#69]\n      :                    :                                +- *(12) SortMergeJoin [s_suppkey#71L], [ps_suppkey#67L], Inner\n      :                    :                                   :- *(10) Sort [s_suppkey#71L ASC NULLS FIRST], false, 0\n      :                    :                                   :  +- AQEShuffleRead coalesced\n      :                    :                                   :     +- ShuffleQueryStage 10\n      :                    :                                   :        +- Exchange hashpartitioning(s_suppkey#71L, 200), ENSURE_REQUIREMENTS, [plan_id=1271]\n      :                    :                                   :           +- *(9) Project [s_suppkey#71L]\n      :                    :                                   :              +- *(9) BroadcastHashJoin [n_nationkey#78L], [s_nationkey#74L], Inner, BuildLeft, false\n      :                    :                                   :                 :- BroadcastQueryStage 6\n      :                    :                                   :                 :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=656]\n      :                    :                                   :                 :     +- *(6) Project [n_nationkey#78L]\n      :                    :                                   :                 :        +- *(6) BroadcastHashJoin [n_regionkey#80L], [r_regionkey#82L], Inner, BuildRight, false\n      :                    :                                   :                 :           :- *(6) Filter (isnotnull(n_nationkey#78L) AND isnotnull(n_regionkey#80L))\n      :                    :                                   :                 :           :  +- *(6) ColumnarToRow\n      :                    :                                   :                 :           :     +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#78L,n_regionkey#80L] Batched: true, DataFilters: [isnotnull(n_nationkey#78L), isnotnull(n_regionkey#80L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)], ReadSchema: struct<n_nationkey:bigint,n_regionkey:bigint>\n      :                    :                                   :                 :           +- BroadcastQueryStage 1\n      :                    :                                   :                 :              +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=330]\n      :                    :                                   :                 :                 +- *(2) Project [r_regionkey#82L]\n      :                    :                                   :                 :                    +- *(2) Filter ((isnotnull(r_name#83) AND (r_name#83 = ASIA)) AND isnotnull(r_regionkey#82L))\n      :                    :                                   :                 :                       +- *(2) ColumnarToRow\n      :                    :                                   :                 :                          +- FileScan parquet spark_catalog.tpch_100.region[r_regionkey#82L,r_name#83] Batched: true, DataFilters: [isnotnull(r_name#83), (r_name#83 = ASIA), isnotnull(r_regionkey#82L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/region], PartitionFilters: [], PushedFilters: [IsNotNull(r_name), EqualTo(r_name,ASIA), IsNotNull(r_regionkey)], ReadSchema: struct<r_regionkey:bigint,r_name:string>\n      :                    :                                   :                 +- *(9) Filter (isnotnull(s_suppkey#71L) AND isnotnull(s_nationkey#74L))\n      :                    :                                   :                    +- *(9) ColumnarToRow\n      :                    :                                   :                       +- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#71L,s_nationkey#74L] Batched: true, DataFilters: [isnotnull(s_suppkey#71L), isnotnull(s_nationkey#74L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>\n      :                    :                                   +- *(11) Sort [ps_suppkey#67L ASC NULLS FIRST], false, 0\n      :                    :                                      +- AQEShuffleRead coalesced\n      :                    :                                         +- ShuffleQueryStage 2\n      :                    :                                            +- Exchange hashpartitioning(ps_suppkey#67L, 200), ENSURE_REQUIREMENTS, [plan_id=354]\n      :                    :                                               +- *(3) Filter (isnotnull(ps_suppkey#67L) AND isnotnull(ps_partkey#66L))\n      :                    :                                                  +- *(3) ColumnarToRow\n      :                    :                                                     +- FileScan parquet spark_catalog.tpch_100.partsupp[ps_partkey#66L,ps_suppkey#67L,ps_supplycost#69] Batched: true, DataFilters: [isnotnull(ps_suppkey#67L), isnotnull(ps_partkey#66L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/partsupp], PartitionFilters: [], PushedFilters: [IsNotNull(ps_suppkey), IsNotNull(ps_partkey)], ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_supplycost:decimal(12,2)>\n      :                    +- AQEShuffleRead local\n      :                       +- ShuffleQueryStage 3\n      :                          +- Exchange hashpartitioning(ps_partkey#17L, ps_supplycost#20, 200), ENSURE_REQUIREMENTS, [plan_id=382]\n      :                             +- *(4) Filter ((isnotnull(ps_partkey#17L) AND isnotnull(ps_supplycost#20)) AND isnotnull(ps_suppkey#18L))\n      :                                +- *(4) ColumnarToRow\n      :                                   +- FileScan parquet spark_catalog.tpch_100.partsupp[ps_partkey#17L,ps_suppkey#18L,ps_supplycost#20] Batched: true, DataFilters: [isnotnull(ps_partkey#17L), isnotnull(ps_supplycost#20), isnotnull(ps_suppkey#18L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/partsupp], PartitionFilters: [], PushedFilters: [IsNotNull(ps_partkey), IsNotNull(ps_supplycost), IsNotNull(ps_suppkey)], ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_supplycost:decimal(12,2)>\n      +- ShuffleQueryStage 9\n         +- Exchange hashpartitioning(s_suppkey#10L, 200), ENSURE_REQUIREMENTS, [plan_id=1145]\n            +- *(8) Project [n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16]\n               +- *(8) BroadcastHashJoin [n_nationkey#22L], [s_nationkey#13L], Inner, BuildLeft, false\n                  :- BroadcastQueryStage 7\n                  :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=711]\n                  :     +- *(7) Project [n_nationkey#22L, n_name#23]\n                  :        +- *(7) BroadcastHashJoin [n_regionkey#24L], [r_regionkey#26L], Inner, BuildRight, false\n                  :           :- *(7) Filter (isnotnull(n_nationkey#22L) AND isnotnull(n_regionkey#24L))\n                  :           :  +- *(7) ColumnarToRow\n                  :           :     +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#22L,n_name#23,n_regionkey#24L] Batched: true, DataFilters: [isnotnull(n_nationkey#22L), isnotnull(n_regionkey#24L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string,n_regionkey:bigint>\n                  :           +- BroadcastQueryStage 5\n                  :              +- ReusedExchange [r_regionkey#26L], BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=330]\n                  +- *(8) Filter (isnotnull(s_suppkey#10L) AND isnotnull(s_nationkey#13L))\n                     +- *(8) ColumnarToRow\n                        +- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#10L,s_name#11,s_address#12,s_nationkey#13L,s_phone#14,s_acctbal#15,s_comment#16] Batched: true, DataFilters: [isnotnull(s_suppkey#10L), isnotnull(s_nationkey#13L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_name:string,s_address:string,s_nationkey:bigint,s_phone:string,s_acctba...\n"
      },
      "IM" : {
        "inputSizeInBytes" : 47897328,
        "inputRowCount" : 247046
      },
      "InitialPartitionNum" : 1,
      "PD" : {
        "3" : [ 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 112177, 123395, 112177, 123395, 123395, 123395, 123395, 112177, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 135735, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 112177, 123395, 112177, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 135735, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 135735, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 112177, 123395, 123395, 112177, 123395, 112177, 112177, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395, 123395, 112177, 123395, 123395, 123395, 123395 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 13,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 23 ],
      "Objectives" : {
        "DurationInMs" : 280,
        "TotalTasksDurationInMs" : 275,
        "IOBytes" : {
          "Total" : 23262611,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 23262611,
            "SW" : 0
          }
        }
      }
    },
    "5" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -280792720,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3275,
                "rowCount" : 25
              },
              "compileTime" : {
                "sizeInBytes" : 3275,
                "rowCount" : 25
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [n_nationkey#22L, n_name#23, n_regionkey#24L, n_comment#25], `spark_catalog`.`tpch_100`.`nation`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : -1091961347,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1300,
                "rowCount" : 25
              },
              "compileTime" : {
                "sizeInBytes" : 1300,
                "rowCount" : 25
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (n_regionkey#24L = r_regionkey#26L) "
          },
          "0" : {
            "sign" : -1226742924,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 900,
                "rowCount" : 25
              },
              "compileTime" : {
                "sizeInBytes" : 900,
                "rowCount" : 25
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_nationkey#22L, n_name#23] "
          },
          "2" : {
            "sign" : -404929387,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1100,
                "rowCount" : 25
              },
              "compileTime" : {
                "sizeInBytes" : 1100,
                "rowCount" : 25
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_nationkey#22L, n_name#23, n_regionkey#24L] "
          },
          "3" : {
            "sign" : 667403019,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3275,
                "rowCount" : 25
              },
              "compileTime" : {
                "sizeInBytes" : 3275,
                "rowCount" : 25
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(n_nationkey#22L) AND isnotnull(n_regionkey#24L)) "
          }
        },
        "links" : [ {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 2,
          "toName" : "Project",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Project",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [n_nationkey#22L, n_name#23]\n+- Join Inner, (n_regionkey#24L = r_regionkey#26L)\n   :- Project [n_nationkey#22L, n_name#23, n_regionkey#24L]\n   :  +- Filter (isnotnull(n_nationkey#22L) AND isnotnull(n_regionkey#24L))\n   :     +- Relation spark_catalog.tpch_100.nation[n_nationkey#22L,n_name#23,n_regionkey#24L,n_comment#25] parquet\n   +- Project [r_regionkey#26L]\n      +- Filter ((isnotnull(r_name#27) AND (r_name#27 = ASIA)) AND isnotnull(r_regionkey#26L))\n         +- Relation spark_catalog.tpch_100.region[r_regionkey#26L,r_name#27,r_comment#28] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 612442385,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048584,
            "rowCount" : 1,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [1]: [r_regionkey#26L] Arguments: 5 "
          },
          "1" : {
            "sign" : -934598523,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 1300,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [n_regionkey#24L] Right keys [1]: [r_regionkey#26L] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 612063468,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 900,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [n_nationkey#22L, n_name#23] Input [4]: [n_nationkey#22L, n_name#23, n_regionkey#24L, r_regionkey#26L] "
          },
          "2" : {
            "sign" : -1008838283,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 1100,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [n_nationkey#22L, n_name#23, n_regionkey#24L] Condition : (isnotnull(n_nationkey#22L) AND isnotnull(n_regionkey#24L)) "
          },
          "3" : {
            "sign" : 476475632,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 1100,
            "rowCount" : 25,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.nation Output [3]: [n_nationkey#22L, n_name#23, n_regionkey#24L] Batched: true Location: InMemoryFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation] PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)] ReadSchema: struct<n_nationkey:bigint,n_name:string,n_regionkey:bigint> "
          }
        },
        "links" : [ {
          "fromId" : 3,
          "fromName" : "Scan parquet spark_catalog.tpch_100.nation",
          "toId" : 2,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [n_nationkey#22L, n_name#23]\n+- BroadcastHashJoin [n_regionkey#24L], [r_regionkey#26L], Inner, BuildRight, false\n   :- Filter (isnotnull(n_nationkey#22L) AND isnotnull(n_regionkey#24L))\n   :  +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#22L,n_name#23,n_regionkey#24L] Batched: true, DataFilters: [isnotnull(n_nationkey#22L), isnotnull(n_regionkey#24L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string,n_regionkey:bigint>\n   +- BroadcastQueryStage 5\n      +- ReusedExchange [r_regionkey#26L], BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=330]\n"
      },
      "IM" : {
        "inputSizeInBytes" : 1049684,
        "inputRowCount" : 26
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 22,
        "FinishedTasksTotalTimeInMs" : 70076.0,
        "FinishedTasksDistributionInMs" : [ 225.0, 465.0, 4846.0, 5163.0, 5496.0 ]
      },
      "QueryStageOptimizationId" : 5,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 5 ],
      "Objectives" : {
        "DurationInMs" : 6375,
        "TotalTasksDurationInMs" : 271,
        "IOBytes" : {
          "Total" : 2595,
          "Details" : {
            "IR" : 2595,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "10" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1181366825,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3541076,
                "rowCount" : 80479
              },
              "compileTime" : {
                "sizeInBytes" : 3541076,
                "rowCount" : 80479
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [p_partkey#1L, p_mfgr#3, min(ps_supplycost)#65] "
          },
          "1" : {
            "sign" : -186176997,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 4184908,
                "rowCount" : 80479
              },
              "compileTime" : {
                "sizeInBytes" : 4184908,
                "rowCount" : 80479
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (p_partkey#1L = ps_partkey#66L) "
          },
          "2" : {
            "sign" : 1530991581,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 9600000000000000,
                "rowCount" : -1
              },
              "compileTime" : {
                "sizeInBytes" : 9600000000000000,
                "rowCount" : -1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: isnotnull(min(ps_supplycost)#65) "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [p_partkey#1L, p_mfgr#3, min(ps_supplycost)#65]\n+- Join Inner, (p_partkey#1L = ps_partkey#66L)\n   :- LogicalQueryStage Project [p_partkey#1L, p_mfgr#3], ShuffleQueryStage 0\n   +- Filter isnotnull(min(ps_supplycost)#65)\n      +- Aggregate [ps_partkey#66L], [min(ps_supplycost#69) AS min(ps_supplycost)#65, ps_partkey#66L]\n         +- Project [ps_partkey#66L, ps_supplycost#69]\n            +- Join Inner, (s_suppkey#71L = ps_suppkey#67L)\n               :- Project [s_suppkey#71L]\n               :  +- Join Inner, (s_nationkey#74L = n_nationkey#78L)\n               :     :- LogicalQueryStage Project [n_nationkey#78L], BroadcastQueryStage 6\n               :     +- Project [s_suppkey#71L, s_nationkey#74L]\n               :        +- Filter (isnotnull(s_suppkey#71L) AND isnotnull(s_nationkey#74L))\n               :           +- Relation spark_catalog.tpch_100.supplier[s_suppkey#71L,s_name#72,s_address#73,s_nationkey#74L,s_phone#75,s_acctbal#76,s_comment#77] parquet\n               +- LogicalQueryStage Project [ps_partkey#66L, ps_suppkey#67L, ps_supplycost#69], ShuffleQueryStage 2\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 1236971903,
            "className" : "org.apache.spark.sql.execution.aggregate.HashAggregateExec",
            "sizeInBytes" : 379198344,
            "rowCount" : 15799931,
            "isRuntime" : true,
            "predicate" : " (unknown) HashAggregate Input [2]: [ps_partkey#66L, min#94] Keys [1]: [ps_partkey#66L] Functions [1]: [min(ps_supplycost#69)] Aggregate Attributes [1]: [min(ps_supplycost#69)#64] Results [2]: [min(ps_supplycost#69)#64 AS min(ps_supplycost)#65, ps_partkey#66L] "
          },
          "5" : {
            "sign" : 449942280,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 9600000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [ps_partkey#66L, min#94] Arguments: 11 "
          },
          "1" : {
            "sign" : 1224407645,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 4184908,
            "rowCount" : 80479,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [p_partkey#1L] Right keys [1]: [ps_partkey#66L] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : -1794669783,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 3541076,
            "rowCount" : 80479,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [3]: [p_partkey#1L, p_mfgr#3, min(ps_supplycost)#65] Input [4]: [p_partkey#1L, p_mfgr#3, min(ps_supplycost)#65, ps_partkey#66L] "
          },
          "2" : {
            "sign" : 400671254,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 8388608,
            "rowCount" : 80479,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [p_partkey#1L, p_mfgr#3] Arguments: 8 "
          },
          "3" : {
            "sign" : 749272979,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 9600000000000000,
            "rowCount" : -1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [min(ps_supplycost)#65, ps_partkey#66L] Condition : isnotnull(min(ps_supplycost)#65) "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 5,
          "fromName" : "ShuffleQueryStage",
          "toId" : 4,
          "toName" : "HashAggregate",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "HashAggregate",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [p_partkey#1L, p_mfgr#3, min(ps_supplycost)#65]\n+- BroadcastHashJoin [p_partkey#1L], [ps_partkey#66L], Inner, BuildLeft, false\n   :- BroadcastQueryStage 8\n   :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=879]\n   :     +- AQEShuffleRead local\n   :        +- ShuffleQueryStage 0\n   :           +- Exchange hashpartitioning(p_partkey#1L, 200), ENSURE_REQUIREMENTS, [plan_id=309]\n   :              +- *(1) Project [p_partkey#1L, p_mfgr#3]\n   :                 +- *(1) Filter ((((isnotnull(p_size#5) AND isnotnull(p_type#4)) AND (p_size#5 = 38)) AND EndsWith(p_type#4, STEEL)) AND isnotnull(p_partkey#1L))\n   :                    +- *(1) ColumnarToRow\n   :                       +- FileScan parquet spark_catalog.tpch_100.part[p_partkey#1L,p_mfgr#3,p_type#4,p_size#5,p_brand#9] Batched: true, DataFilters: [isnotnull(p_size#5), isnotnull(p_type#4), (p_size#5 = 38), EndsWith(p_type#4, STEEL), isnotnull(..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/part], PartitionFilters: [], PushedFilters: [IsNotNull(p_size), IsNotNull(p_type), EqualTo(p_size,38), StringEndsWith(p_type,STEEL), IsNotNul..., ReadSchema: struct<p_partkey:bigint,p_mfgr:string,p_type:string,p_size:int>\n   +- Filter isnotnull(min(ps_supplycost)#65)\n      +- HashAggregate(keys=[ps_partkey#66L], functions=[min(ps_supplycost#69)], output=[min(ps_supplycost)#65, ps_partkey#66L])\n         +- ShuffleQueryStage 11\n            +- Exchange hashpartitioning(ps_partkey#66L, 200), ENSURE_REQUIREMENTS, [plan_id=1485]\n               +- *(12) HashAggregate(keys=[ps_partkey#66L], functions=[partial_min(ps_supplycost#69)], output=[ps_partkey#66L, min#94])\n                  +- *(12) Project [ps_partkey#66L, ps_supplycost#69]\n                     +- *(12) SortMergeJoin [s_suppkey#71L], [ps_suppkey#67L], Inner\n                        :- *(10) Sort [s_suppkey#71L ASC NULLS FIRST], false, 0\n                        :  +- AQEShuffleRead coalesced\n                        :     +- ShuffleQueryStage 10\n                        :        +- Exchange hashpartitioning(s_suppkey#71L, 200), ENSURE_REQUIREMENTS, [plan_id=1271]\n                        :           +- *(9) Project [s_suppkey#71L]\n                        :              +- *(9) BroadcastHashJoin [n_nationkey#78L], [s_nationkey#74L], Inner, BuildLeft, false\n                        :                 :- BroadcastQueryStage 6\n                        :                 :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=656]\n                        :                 :     +- *(6) Project [n_nationkey#78L]\n                        :                 :        +- *(6) BroadcastHashJoin [n_regionkey#80L], [r_regionkey#82L], Inner, BuildRight, false\n                        :                 :           :- *(6) Filter (isnotnull(n_nationkey#78L) AND isnotnull(n_regionkey#80L))\n                        :                 :           :  +- *(6) ColumnarToRow\n                        :                 :           :     +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#78L,n_regionkey#80L] Batched: true, DataFilters: [isnotnull(n_nationkey#78L), isnotnull(n_regionkey#80L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)], ReadSchema: struct<n_nationkey:bigint,n_regionkey:bigint>\n                        :                 :           +- BroadcastQueryStage 1\n                        :                 :              +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=330]\n                        :                 :                 +- *(2) Project [r_regionkey#82L]\n                        :                 :                    +- *(2) Filter ((isnotnull(r_name#83) AND (r_name#83 = ASIA)) AND isnotnull(r_regionkey#82L))\n                        :                 :                       +- *(2) ColumnarToRow\n                        :                 :                          +- FileScan parquet spark_catalog.tpch_100.region[r_regionkey#82L,r_name#83] Batched: true, DataFilters: [isnotnull(r_name#83), (r_name#83 = ASIA), isnotnull(r_regionkey#82L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/region], PartitionFilters: [], PushedFilters: [IsNotNull(r_name), EqualTo(r_name,ASIA), IsNotNull(r_regionkey)], ReadSchema: struct<r_regionkey:bigint,r_name:string>\n                        :                 +- *(9) Filter (isnotnull(s_suppkey#71L) AND isnotnull(s_nationkey#74L))\n                        :                    +- *(9) ColumnarToRow\n                        :                       +- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#71L,s_nationkey#74L] Batched: true, DataFilters: [isnotnull(s_suppkey#71L), isnotnull(s_nationkey#74L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_nationkey:bigint>\n                        +- *(11) Sort [ps_suppkey#67L ASC NULLS FIRST], false, 0\n                           +- AQEShuffleRead coalesced\n                              +- ShuffleQueryStage 2\n                                 +- Exchange hashpartitioning(ps_suppkey#67L, 200), ENSURE_REQUIREMENTS, [plan_id=354]\n                                    +- *(3) Filter (isnotnull(ps_suppkey#67L) AND isnotnull(ps_partkey#66L))\n                                       +- *(3) ColumnarToRow\n                                          +- FileScan parquet spark_catalog.tpch_100.partsupp[ps_partkey#66L,ps_suppkey#67L,ps_supplycost#69] Batched: true, DataFilters: [isnotnull(ps_suppkey#67L), isnotnull(ps_partkey#66L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/partsupp], PartitionFilters: [], PushedFilters: [IsNotNull(ps_suppkey), IsNotNull(ps_partkey)], ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_supplycost:decimal(12,2)>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 387586952,
        "inputRowCount" : 15880410
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "5" : [ 1069429, 1081225, 1081225, 1081225, 1081225, 1069429, 1069429, 1081225, 1081225, 1077293, 1073361, 1077293, 1081225, 1081225, 1073361, 1077293, 1081225, 1077293, 1073361, 1081225, 1081225, 1081225, 1077293, 1077293, 1073361, 1081225, 1081225, 1073361, 1081225, 1073361, 1077293, 1081618, 1081225, 1081225, 1073361, 1081225, 1077293, 1081225, 1081225, 1077293, 1073361, 1069429, 1077293, 1073361, 1069429, 1077293, 1081225, 1077293, 1073361, 1073361, 1077293, 1077293, 1077293, 1081225, 1077293, 1077293, 1077293, 1061565, 1073361, 1077293, 1069429, 1069429, 1077293, 1077293, 1069429, 1081225, 1073361, 1077293, 1077293, 1073361, 1073361, 1081225, 1069429, 1065497, 1081225, 1073361, 1077293, 1081225, 1077293, 1069429, 1069429, 1073361, 1077293, 1077293, 1081225, 1069429, 1081225, 1073361, 1073361, 1077293, 1077293, 1077293, 1077293, 1077293, 1073361, 1081225, 1081225, 1065497, 1077293, 1081225, 1081225, 1077293, 1081225, 1081225, 1077293, 1081225, 1065497, 1069429, 1077293, 1077293, 1081225, 1073361, 1073361, 1077293, 1077293, 1081225, 1081225, 1073361, 1077293, 1077293, 1081225, 1081225, 1077293, 1077293, 1077293, 1081225, 1081225, 1081225, 1081225, 1081225, 1065497, 1073361, 1069429, 1073361, 1077293, 1085550, 1081225, 1073361, 1077293, 1081225, 1073361, 1081225, 1077293, 1073361, 1081225, 1077293, 1077293, 1077293, 1077293, 1081225, 1077293, 1077293, 1077293, 1069429, 1081225, 1073361, 1081225, 1081225, 1081225, 1073361, 1077293, 1081225, 1081225, 1069429, 1081225, 1077293, 1081225, 1073361, 1077293, 1073361, 1081225, 1081225, 1081225, 1077293, 1081225, 1073361, 1081225, 1069429, 1081225, 1073361, 1077293, 1073361, 1073361, 1077293, 1069429, 1085550, 1065497, 1077293, 1077293, 1077293, 1077293, 1081225, 1077293, 1081225, 1077293, 1077293, 1081225, 1077293, 1073361, 1081225 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 10,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 16 ],
      "Objectives" : {
        "DurationInMs" : 3473,
        "TotalTasksDurationInMs" : 10593,
        "IOBytes" : {
          "Total" : 202852535,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 202852535,
            "SW" : 0
          }
        }
      }
    },
    "6" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 789996657,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3219160,
                "rowCount" : 80479
              },
              "compileTime" : {
                "sizeInBytes" : 23149644,
                "rowCount" : 551182
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [p_partkey#1L, p_mfgr#3], ShuffleQueryStage 0 "
          }
        },
        "links" : [ ],
        "rawPlan" : "LogicalQueryStage Project [p_partkey#1L, p_mfgr#3], ShuffleQueryStage 0\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -1326196211,
            "className" : "org.apache.spark.sql.execution.adaptive.ShuffleQueryStageExec",
            "sizeInBytes" : 3219160,
            "rowCount" : 80479,
            "isRuntime" : true,
            "predicate" : " (unknown) ShuffleQueryStage Output [2]: [p_partkey#1L, p_mfgr#3] Arguments: 0 "
          }
        },
        "links" : [ ],
        "rawPlan" : "ShuffleQueryStage 0\n+- Exchange hashpartitioning(p_partkey#1L, 200), ENSURE_REQUIREMENTS, [plan_id=309]\n   +- *(1) Project [p_partkey#1L, p_mfgr#3]\n      +- *(1) Filter ((((isnotnull(p_size#5) AND isnotnull(p_type#4)) AND (p_size#5 = 38)) AND EndsWith(p_type#4, STEEL)) AND isnotnull(p_partkey#1L))\n         +- *(1) ColumnarToRow\n            +- FileScan parquet spark_catalog.tpch_100.part[p_partkey#1L,p_mfgr#3,p_type#4,p_size#5,p_brand#9] Batched: true, DataFilters: [isnotnull(p_size#5), isnotnull(p_type#4), (p_size#5 = 38), EndsWith(p_type#4, STEEL), isnotnull(..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/part], PartitionFilters: [], PushedFilters: [IsNotNull(p_size), IsNotNull(p_type), EqualTo(p_size,38), StringEndsWith(p_type,STEEL), IsNotNul..., ReadSchema: struct<p_partkey:bigint,p_mfgr:string,p_type:string,p_size:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 3219160,
        "inputRowCount" : 80479
      },
      "InitialPartitionNum" : 200,
      "PD" : {
        "0" : [ 5527, 5307, 5517, 5415, 5291, 5327, 5123, 5431, 5196, 5526, 5179, 5299, 5329, 5121, 5260, 5681, 5408, 5416, 5442, 5301, 5362, 5075, 5380, 5528, 5080, 5430, 5333, 5277, 5394, 5359, 5316, 5334, 5478, 5077, 5146, 5416, 5560, 5543, 4964, 5207, 5477, 5271, 5446, 5207, 5403, 5442, 5565, 5132, 5189, 5499, 5348, 5455, 5142, 5481, 5675, 5418, 5382, 5088, 5290, 5662, 5397, 5284, 5456, 5302, 5451, 5318, 5309, 5501, 5211, 5301, 5291, 5359, 5265, 5545, 5420, 5466, 5401, 5123, 5451, 5423, 5327, 5524, 5117, 5192, 5570, 5208, 5343, 5449, 5277, 5292, 5398, 5586, 5672, 5160, 5144, 5506, 5519, 5474, 4915, 5086, 5471, 5374, 5439, 5484, 5175, 5354, 5284, 5138, 5177, 5397, 5407, 5380, 5390, 5163, 5615, 5328, 5423, 5382, 5250, 5271, 5347, 5278, 4884, 5546, 5292, 5425, 5442, 5456, 5243, 5396, 5528, 5539, 5557, 5247, 5349, 5437, 5532, 5308, 5224, 5550, 5477, 5434, 5479, 5589, 5540, 5606, 5303, 5336, 5456, 5281, 5501, 5480, 5175, 5479, 5447, 5466, 5566, 5294, 5223, 5433, 5356, 5634, 5077, 5396, 5307, 5287, 5306, 5700, 5217, 5510, 5387, 5025, 5703, 5451, 5622, 5291, 5536, 5601, 5400, 5165, 5036, 5388, 5346, 5326, 5407, 5526, 5110, 5254, 5278, 5171, 5117, 5501, 5637, 5111, 5613, 5353, 5473, 5225, 5491, 5579 ]
      },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 16,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 6,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 7 ],
      "Objectives" : {
        "DurationInMs" : 5965,
        "TotalTasksDurationInMs" : 524,
        "IOBytes" : {
          "Total" : 1026205,
          "Details" : {
            "IR" : 0,
            "IW" : 0,
            "SR" : 1026205,
            "SW" : 0
          }
        }
      }
    },
    "1" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -954680567,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 23149644,
                "rowCount" : 551182
              },
              "compileTime" : {
                "sizeInBytes" : 23149644,
                "rowCount" : 551182
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [p_partkey#1L, p_mfgr#3] "
          },
          "1" : {
            "sign" : -1208981842,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 109134036,
                "rowCount" : 551182
              },
              "compileTime" : {
                "sizeInBytes" : 109134036,
                "rowCount" : 551182
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (((isnotnull(p_size#5) AND isnotnull(p_type#4)) AND ((p_size#5 = 38) AND EndsWith(p_type#4, STEEL))) AND isnotnull(p_partkey#1L)) "
          },
          "2" : {
            "sign" : 597011287,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 3960000000,
                "rowCount" : 20000000
              },
              "compileTime" : {
                "sizeInBytes" : 3960000000,
                "rowCount" : 20000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [p_partkey#1L, p_name#2, p_mfgr#3, p_type#4, p_size#5, p_container#6, p_retailprice#7, p_comment#8, p_brand#9], `spark_catalog`.`tpch_100`.`part`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [p_partkey#1L, p_mfgr#3]\n+- Filter (((isnotnull(p_size#5) AND isnotnull(p_type#4)) AND ((p_size#5 = 38) AND EndsWith(p_type#4, STEEL))) AND isnotnull(p_partkey#1L))\n   +- Relation spark_catalog.tpch_100.part[p_partkey#1L,p_name#2,p_mfgr#3,p_type#4,p_size#5,p_container#6,p_retailprice#7,p_comment#8,p_brand#9] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -2071244308,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 23149644,
            "rowCount" : 551182,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [2]: [p_partkey#1L, p_mfgr#3] Input [5]: [p_partkey#1L, p_mfgr#3, p_type#4, p_size#5, p_brand#9] "
          },
          "1" : {
            "sign" : 1529333961,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 23149644,
            "rowCount" : 551182,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [5]: [p_partkey#1L, p_mfgr#3, p_type#4, p_size#5, p_brand#9] Condition : ((((isnotnull(p_size#5) AND isnotnull(p_type#4)) AND (p_size#5 = 38)) AND EndsWith(p_type#4, STEEL)) AND isnotnull(p_partkey#1L)) "
          },
          "2" : {
            "sign" : -965740682,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 23149644,
            "rowCount" : 551182,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.part Output [5]: [p_partkey#1L, p_mfgr#3, p_type#4, p_size#5, p_brand#9] Batched: true Location: CatalogFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/part] PushedFilters: [IsNotNull(p_size), IsNotNull(p_type), EqualTo(p_size,38), StringEndsWith(p_type,STEEL), IsNotNull(p_partkey)] ReadSchema: struct<p_partkey:bigint,p_mfgr:string,p_type:string,p_size:int> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpch_100.part",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [p_partkey#1L, p_mfgr#3]\n+- Filter ((((isnotnull(p_size#5) AND isnotnull(p_type#4)) AND (p_size#5 = 38)) AND EndsWith(p_type#4, STEEL)) AND isnotnull(p_partkey#1L))\n   +- FileScan parquet spark_catalog.tpch_100.part[p_partkey#1L,p_mfgr#3,p_type#4,p_size#5,p_brand#9] Batched: true, DataFilters: [isnotnull(p_size#5), isnotnull(p_type#4), (p_size#5 = 38), EndsWith(p_type#4, STEEL), isnotnull(..., Format: Parquet, Location: CatalogFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/part], PartitionFilters: [], PushedFilters: [IsNotNull(p_size), IsNotNull(p_type), EqualTo(p_size,38), StringEndsWith(p_type,STEEL), IsNotNul..., ReadSchema: struct<p_partkey:bigint,p_mfgr:string,p_type:string,p_size:int>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 23149644,
        "inputRowCount" : 551182
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 0,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 0 ],
      "Objectives" : {
        "DurationInMs" : 6569,
        "TotalTasksDurationInMs" : 89432,
        "IOBytes" : {
          "Total" : 142717368,
          "Details" : {
            "IR" : 141691163,
            "IW" : 0,
            "SR" : 0,
            "SW" : 1026205
          }
        }
      }
    },
    "0" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -1162024057,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 16,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 16,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [r_regionkey#82L] "
          },
          "1" : {
            "sign" : 516666857,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 113,
                "rowCount" : 1
              },
              "compileTime" : {
                "sizeInBytes" : 113,
                "rowCount" : 1
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: ((isnotnull(r_name#83) AND (r_name#83 = ASIA)) AND isnotnull(r_regionkey#82L)) "
          },
          "2" : {
            "sign" : -1530285102,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 565,
                "rowCount" : 5
              },
              "compileTime" : {
                "sizeInBytes" : 565,
                "rowCount" : 5
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [r_regionkey#82L, r_name#83, r_comment#84], `spark_catalog`.`tpch_100`.`region`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [r_regionkey#82L]\n+- Filter ((isnotnull(r_name#83) AND (r_name#83 = ASIA)) AND isnotnull(r_regionkey#82L))\n   +- Relation spark_catalog.tpch_100.region[r_regionkey#82L,r_name#83,r_comment#84] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 872830522,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [1]: [r_regionkey#82L] Input [2]: [r_regionkey#82L, r_name#83] "
          },
          "1" : {
            "sign" : -125660264,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [2]: [r_regionkey#82L, r_name#83] Condition : ((isnotnull(r_name#83) AND (r_name#83 = ASIA)) AND isnotnull(r_regionkey#82L)) "
          },
          "2" : {
            "sign" : -1995689329,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 16,
            "rowCount" : 1,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.region Output [2]: [r_regionkey#82L, r_name#83] Batched: true Location: InMemoryFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/region] PushedFilters: [IsNotNull(r_name), EqualTo(r_name,ASIA), IsNotNull(r_regionkey)] ReadSchema: struct<r_regionkey:bigint,r_name:string> "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "Scan parquet spark_catalog.tpch_100.region",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [r_regionkey#82L]\n+- Filter ((isnotnull(r_name#83) AND (r_name#83 = ASIA)) AND isnotnull(r_regionkey#82L))\n   +- FileScan parquet spark_catalog.tpch_100.region[r_regionkey#82L,r_name#83] Batched: true, DataFilters: [isnotnull(r_name#83), (r_name#83 = ASIA), isnotnull(r_regionkey#82L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/region], PartitionFilters: [], PushedFilters: [IsNotNull(r_name), EqualTo(r_name,ASIA), IsNotNull(r_regionkey)], ReadSchema: struct<r_regionkey:bigint,r_name:string>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 16,
        "inputRowCount" : 1
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 1,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 1 ],
      "Objectives" : {
        "DurationInMs" : 5658,
        "TotalTasksDurationInMs" : 460,
        "IOBytes" : {
          "Total" : 1996,
          "Details" : {
            "IR" : 1996,
            "IW" : 0,
            "SR" : 0,
            "SW" : 0
          }
        }
      }
    },
    "2" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : 965715833,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2560000000,
                "rowCount" : 80000000
              },
              "compileTime" : {
                "sizeInBytes" : 2560000000,
                "rowCount" : 80000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ps_partkey#66L, ps_suppkey#67L, ps_supplycost#69] "
          },
          "1" : {
            "sign" : 1309997582,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 13760000000,
                "rowCount" : 80000000
              },
              "compileTime" : {
                "sizeInBytes" : 13760000000,
                "rowCount" : 80000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ps_suppkey#67L) AND isnotnull(ps_partkey#66L)) "
          },
          "2" : {
            "sign" : 84359432,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 13760000000,
                "rowCount" : 80000000
              },
              "compileTime" : {
                "sizeInBytes" : 13760000000,
                "rowCount" : 80000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ps_partkey#66L, ps_suppkey#67L, ps_availqty#68, ps_supplycost#69, ps_comment#70], `spark_catalog`.`tpch_100`.`partsupp`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ps_partkey#66L, ps_suppkey#67L, ps_supplycost#69]\n+- Filter (isnotnull(ps_suppkey#67L) AND isnotnull(ps_partkey#66L))\n   +- Relation spark_catalog.tpch_100.partsupp[ps_partkey#66L,ps_suppkey#67L,ps_availqty#68,ps_supplycost#69,ps_comment#70] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : -637096534,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [ps_partkey#66L, ps_suppkey#67L, ps_supplycost#69] Condition : (isnotnull(ps_suppkey#67L) AND isnotnull(ps_partkey#66L)) "
          },
          "1" : {
            "sign" : 1033033968,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.partsupp Output [3]: [ps_partkey#66L, ps_suppkey#67L, ps_supplycost#69] Batched: true Location: InMemoryFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/partsupp] PushedFilters: [IsNotNull(ps_suppkey), IsNotNull(ps_partkey)] ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_supplycost:decimal(12,2)> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpch_100.partsupp",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter (isnotnull(ps_suppkey#67L) AND isnotnull(ps_partkey#66L))\n+- FileScan parquet spark_catalog.tpch_100.partsupp[ps_partkey#66L,ps_suppkey#67L,ps_supplycost#69] Batched: true, DataFilters: [isnotnull(ps_suppkey#67L), isnotnull(ps_partkey#66L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/partsupp], PartitionFilters: [], PushedFilters: [IsNotNull(ps_suppkey), IsNotNull(ps_partkey)], ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_supplycost:decimal(12,2)>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2560000000,
        "inputRowCount" : 80000000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 2,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 2 ],
      "Objectives" : {
        "DurationInMs" : 9740,
        "TotalTasksDurationInMs" : 56137,
        "IOBytes" : {
          "Total" : 2514149974,
          "Details" : {
            "IR" : 1089156142,
            "IW" : 0,
            "SR" : 0,
            "SW" : 1424993832
          }
        }
      }
    },
    "7" : {
      "QSLogical" : {
        "operators" : {
          "4" : {
            "sign" : -1689576478,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 201000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 201000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [s_suppkey#10L, s_name#11, s_address#12, s_nationkey#13L, s_phone#14, s_acctbal#15, s_comment#16], `spark_catalog`.`tpch_100`.`supplier`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          },
          "1" : {
            "sign" : 1787826314,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Join",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1145000000,
                "rowCount" : 5000000
              },
              "compileTime" : {
                "sizeInBytes" : 1145000000,
                "rowCount" : 5000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Join Arguments: Inner, (s_nationkey#13L = n_nationkey#22L) "
          },
          "0" : {
            "sign" : 52125162,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1065000000,
                "rowCount" : 5000000
              },
              "compileTime" : {
                "sizeInBytes" : 1065000000,
                "rowCount" : 5000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16] "
          },
          "2" : {
            "sign" : -1236053098,
            "className" : "org.apache.spark.sql.execution.adaptive.LogicalQueryStage",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 1048688,
                "rowCount" : 5
              },
              "compileTime" : {
                "sizeInBytes" : 900,
                "rowCount" : 25
              }
            },
            "isRuntime" : true,
            "predicate" : " (unknown) LogicalQueryStage Arguments: Project [n_nationkey#22L, n_name#23], BroadcastQueryStage 7 "
          },
          "3" : {
            "sign" : 454443118,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 201000000,
                "rowCount" : 1000000
              },
              "compileTime" : {
                "sizeInBytes" : 201000000,
                "rowCount" : 1000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(s_suppkey#10L) AND isnotnull(s_nationkey#13L)) "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalQueryStage",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "LogicalRelation",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "Join",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Join",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16]\n+- Join Inner, (s_nationkey#13L = n_nationkey#22L)\n   :- LogicalQueryStage Project [n_nationkey#22L, n_name#23], BroadcastQueryStage 7\n   +- Filter (isnotnull(s_suppkey#10L) AND isnotnull(s_nationkey#13L))\n      +- Relation spark_catalog.tpch_100.supplier[s_suppkey#10L,s_name#11,s_address#12,s_nationkey#13L,s_phone#14,s_acctbal#15,s_comment#16] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "4" : {
            "sign" : 1128459075,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 201000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.supplier Output [7]: [s_suppkey#10L, s_name#11, s_address#12, s_nationkey#13L, s_phone#14, s_acctbal#15, s_comment#16] Batched: true Location: InMemoryFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier] PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)] ReadSchema: struct<s_suppkey:bigint,s_name:string,s_address:string,s_nationkey:bigint,s_phone:string,s_acctbal:decimal(12,2),s_comment:string> "
          },
          "1" : {
            "sign" : -1730869986,
            "className" : "org.apache.spark.sql.execution.joins.BroadcastHashJoinExec",
            "sizeInBytes" : 1145000000,
            "rowCount" : 5000000,
            "isRuntime" : false,
            "predicate" : " (unknown) BroadcastHashJoin Left keys [1]: [n_nationkey#22L] Right keys [1]: [s_nationkey#13L] Join type: Inner Join condition: None "
          },
          "0" : {
            "sign" : 1744826088,
            "className" : "org.apache.spark.sql.execution.ProjectExec",
            "sizeInBytes" : 1065000000,
            "rowCount" : 5000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Project Output [7]: [n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16] Input [9]: [n_nationkey#22L, n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_nationkey#13L, s_phone#14, s_acctbal#15, s_comment#16] "
          },
          "2" : {
            "sign" : -1346531646,
            "className" : "org.apache.spark.sql.execution.adaptive.BroadcastQueryStageExec",
            "sizeInBytes" : 1048688,
            "rowCount" : 5,
            "isRuntime" : true,
            "predicate" : " (unknown) BroadcastQueryStage Output [2]: [n_nationkey#22L, n_name#23] Arguments: 7 "
          },
          "3" : {
            "sign" : 1536141623,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 201000000,
            "rowCount" : 1000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [7]: [s_suppkey#10L, s_name#11, s_address#12, s_nationkey#13L, s_phone#14, s_acctbal#15, s_comment#16] Condition : (isnotnull(s_suppkey#10L) AND isnotnull(s_nationkey#13L)) "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "BroadcastQueryStage",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 4,
          "fromName" : "Scan parquet spark_catalog.tpch_100.supplier",
          "toId" : 3,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 3,
          "fromName" : "Filter",
          "toId" : 1,
          "toName" : "BroadcastHashJoin",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "BroadcastHashJoin",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [n_name#23, s_suppkey#10L, s_name#11, s_address#12, s_phone#14, s_acctbal#15, s_comment#16]\n+- BroadcastHashJoin [n_nationkey#22L], [s_nationkey#13L], Inner, BuildLeft, false\n   :- BroadcastQueryStage 7\n   :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=711]\n   :     +- *(7) Project [n_nationkey#22L, n_name#23]\n   :        +- *(7) BroadcastHashJoin [n_regionkey#24L], [r_regionkey#26L], Inner, BuildRight, false\n   :           :- *(7) Filter (isnotnull(n_nationkey#22L) AND isnotnull(n_regionkey#24L))\n   :           :  +- *(7) ColumnarToRow\n   :           :     +- FileScan parquet spark_catalog.tpch_100.nation[n_nationkey#22L,n_name#23,n_regionkey#24L] Batched: true, DataFilters: [isnotnull(n_nationkey#22L), isnotnull(n_regionkey#24L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/nation], PartitionFilters: [], PushedFilters: [IsNotNull(n_nationkey), IsNotNull(n_regionkey)], ReadSchema: struct<n_nationkey:bigint,n_name:string,n_regionkey:bigint>\n   :           +- BroadcastQueryStage 5\n   :              +- ReusedExchange [r_regionkey#26L], BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=330]\n   +- Filter (isnotnull(s_suppkey#10L) AND isnotnull(s_nationkey#13L))\n      +- FileScan parquet spark_catalog.tpch_100.supplier[s_suppkey#10L,s_name#11,s_address#12,s_nationkey#13L,s_phone#14,s_acctbal#15,s_comment#16] Batched: true, DataFilters: [isnotnull(s_suppkey#10L), isnotnull(s_nationkey#13L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/supplier], PartitionFilters: [], PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)], ReadSchema: struct<s_suppkey:bigint,s_name:string,s_address:string,s_nationkey:bigint,s_phone:string,s_acctba...\n"
      },
      "IM" : {
        "inputSizeInBytes" : 202048688,
        "inputRowCount" : 1000005
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 13,
        "FinishedTasksNum" : 24,
        "FinishedTasksTotalTimeInMs" : 40248.0,
        "FinishedTasksDistributionInMs" : [ 1232.0, 1358.0, 1430.0, 1834.0, 3214.0 ]
      },
      "QueryStageOptimizationId" : 7,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 8 ],
      "Objectives" : {
        "DurationInMs" : 1346,
        "TotalTasksDurationInMs" : 3471,
        "IOBytes" : {
          "Total" : 105389586,
          "Details" : {
            "IR" : 82126975,
            "IW" : 0,
            "SR" : 0,
            "SW" : 23262611
          }
        }
      }
    },
    "3" : {
      "QSLogical" : {
        "operators" : {
          "0" : {
            "sign" : -768377307,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Project",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 2560000000,
                "rowCount" : 80000000
              },
              "compileTime" : {
                "sizeInBytes" : 2560000000,
                "rowCount" : 80000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Project Arguments: [ps_partkey#17L, ps_suppkey#18L, ps_supplycost#20] "
          },
          "1" : {
            "sign" : 298215303,
            "className" : "org.apache.spark.sql.catalyst.plans.logical.Filter",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 13760000000,
                "rowCount" : 80000000
              },
              "compileTime" : {
                "sizeInBytes" : 13760000000,
                "rowCount" : 80000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Arguments: (isnotnull(ps_partkey#17L) AND (isnotnull(ps_supplycost#20) AND isnotnull(ps_suppkey#18L))) "
          },
          "2" : {
            "sign" : -810493053,
            "className" : "org.apache.spark.sql.execution.datasources.LogicalRelation",
            "stats" : {
              "runtime" : {
                "sizeInBytes" : 13760000000,
                "rowCount" : 80000000
              },
              "compileTime" : {
                "sizeInBytes" : 13760000000,
                "rowCount" : 80000000
              }
            },
            "isRuntime" : false,
            "predicate" : " (unknown) LogicalRelation Arguments: parquet, [ps_partkey#17L, ps_suppkey#18L, ps_availqty#19, ps_supplycost#20, ps_comment#21], `spark_catalog`.`tpch_100`.`partsupp`, org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe, false "
          }
        },
        "links" : [ {
          "fromId" : 2,
          "fromName" : "LogicalRelation",
          "toId" : 1,
          "toName" : "Filter",
          "linkType" : "Operator"
        }, {
          "fromId" : 1,
          "fromName" : "Filter",
          "toId" : 0,
          "toName" : "Project",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Project [ps_partkey#17L, ps_suppkey#18L, ps_supplycost#20]\n+- Filter (isnotnull(ps_partkey#17L) AND (isnotnull(ps_supplycost#20) AND isnotnull(ps_suppkey#18L)))\n   +- Relation spark_catalog.tpch_100.partsupp[ps_partkey#17L,ps_suppkey#18L,ps_availqty#19,ps_supplycost#20,ps_comment#21] parquet\n"
      },
      "QSPhysical" : {
        "operators" : {
          "0" : {
            "sign" : 1711187214,
            "className" : "org.apache.spark.sql.execution.FilterExec",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Filter Input [3]: [ps_partkey#17L, ps_suppkey#18L, ps_supplycost#20] Condition : ((isnotnull(ps_partkey#17L) AND isnotnull(ps_supplycost#20)) AND isnotnull(ps_suppkey#18L)) "
          },
          "1" : {
            "sign" : -1191196438,
            "className" : "org.apache.spark.sql.execution.FileSourceScanExec",
            "sizeInBytes" : 2560000000,
            "rowCount" : 80000000,
            "isRuntime" : false,
            "predicate" : " (unknown) Scan parquet spark_catalog.tpch_100.partsupp Output [3]: [ps_partkey#17L, ps_suppkey#18L, ps_supplycost#20] Batched: true Location: InMemoryFileIndex [hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/partsupp] PushedFilters: [IsNotNull(ps_partkey), IsNotNull(ps_supplycost), IsNotNull(ps_suppkey)] ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_supplycost:decimal(12,2)> "
          }
        },
        "links" : [ {
          "fromId" : 1,
          "fromName" : "Scan parquet spark_catalog.tpch_100.partsupp",
          "toId" : 0,
          "toName" : "Filter",
          "linkType" : "Operator"
        } ],
        "rawPlan" : "Filter ((isnotnull(ps_partkey#17L) AND isnotnull(ps_supplycost#20)) AND isnotnull(ps_suppkey#18L))\n+- FileScan parquet spark_catalog.tpch_100.partsupp[ps_partkey#17L,ps_suppkey#18L,ps_supplycost#20] Batched: true, DataFilters: [isnotnull(ps_partkey#17L), isnotnull(ps_supplycost#20), isnotnull(ps_suppkey#18L)], Format: Parquet, Location: InMemoryFileIndex(1 paths)[hdfs://node1-opa:8020/user/spark_benchmark/tpch_100/dataset/partsupp], PartitionFilters: [], PushedFilters: [IsNotNull(ps_partkey), IsNotNull(ps_supplycost), IsNotNull(ps_suppkey)], ReadSchema: struct<ps_partkey:bigint,ps_suppkey:bigint,ps_supplycost:decimal(12,2)>\n"
      },
      "IM" : {
        "inputSizeInBytes" : 2560000000,
        "inputRowCount" : 80000000
      },
      "InitialPartitionNum" : 0,
      "PD" : { },
      "RunningQueryStageSnapshot" : {
        "RunningTasksNum" : 0,
        "FinishedTasksNum" : 0,
        "FinishedTasksTotalTimeInMs" : 0.0,
        "FinishedTasksDistributionInMs" : [ 0.0, 0.0, 0.0, 0.0, 0.0 ]
      },
      "QueryStageOptimizationId" : 3,
      "RuntimeConfiguration" : {
        "theta_p" : [ {
          "spark.sql.adaptive.advisoryPartitionSizeInBytes" : "64MB"
        }, {
          "spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin" : "0.2"
        }, {
          "spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold" : "0MB"
        }, {
          "spark.sql.adaptive.autoBroadcastJoinThreshold" : "10MB"
        }, {
          "spark.sql.shuffle.partitions" : "200"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes" : "256MB"
        }, {
          "spark.sql.adaptive.skewJoin.skewedPartitionFactor" : "5"
        }, {
          "spark.sql.files.maxPartitionBytes" : "128MB"
        }, {
          "spark.sql.files.openCostInBytes" : "4MB"
        } ],
        "theta_s" : [ {
          "spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor" : "0.2"
        }, {
          "spark.sql.adaptive.coalescePartitions.minPartitionSize" : "1024KB"
        } ]
      },
      "RelevantQueryStageIds" : [ 3 ],
      "Objectives" : {
        "DurationInMs" : 13835,
        "TotalTasksDurationInMs" : 55935,
        "IOBytes" : {
          "Total" : 2526208886,
          "Details" : {
            "IR" : 1089236947,
            "IW" : 0,
            "SR" : 0,
            "SW" : 1436971939
          }
        }
      }
    }
  },
  "SQLStartTimeInMs" : 1702226540058,
  "SQLEndTimeInMs" : 1702226567112,
  "Objectives" : {
    "DurationInMs" : 27054,
    "IOBytes" : {
      "Total" : 8590869987,
      "Details" : {
        "IR" : 2407918829,
        "IW" : 0,
        "SR" : 3091475579,
        "SW" : 3091475579
      }
    }
  }
}
