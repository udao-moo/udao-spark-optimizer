{"RequestType":"RuntimeLQP","LqpId":1,"LQP":{"operators":{"0":{"sign":1826969313,"className":"org.apache.spark.sql.catalyst.plans.logical.Sort","sizeInBytes":200736,"rowCount":738,"isRuntime":true,"predicate":" (unknown) Sort Arguments: [l_returnflag#17 ASC NULLS FIRST, l_linestatus#18 ASC NULLS FIRST], true "},"1":{"sign":-978176214,"className":"org.apache.spark.sql.execution.adaptive.LogicalQueryStage","sizeInBytes":200736,"rowCount":738,"isRuntime":true,"predicate":" (unknown) LogicalQueryStage Arguments: Aggregate [l_returnflag#17, l_linestatus#18], [l_returnflag#17, l_linestatus#18, sum(l_quantity#13) AS sum_qty#43, sum(l_extendedprice#14) AS sum_base_price#44, sum((l_extendedprice#14 * (1 - l_discount#15))) AS sum_disc_price#45, sum(((l_extendedprice#14 * (1 - l_discount#15)) * (1 + l_tax#16))) AS sum_charge#46, avg(l_quantity#13) AS avg_qty#47, avg(l_extendedprice#14) AS avg_price#48, avg(l_discount#15) AS avg_disc#49, count(1) AS count_order#50L], HashAggregate(keys=[l_returnflag#17, l_linestatus#18], functions=[sum(l_quantity#13), sum(l_extendedprice#14), sum((l_extendedprice#14 * (1 - l_discount#15))), sum(((l_extendedprice#14 * (1 - l_discount#15)) * (1 + l_tax#16))), avg(l_quantity#13), avg(l_extendedprice#14), avg(l_discount#15), count(1)]) "}},"links":[{"fromId":1,"fromName":"LogicalQueryStage","toId":0,"toName":"Sort","linkType":"Operator"}],"rawPlan":"Sort [l_returnflag#17 ASC NULLS FIRST, l_linestatus#18 ASC NULLS FIRST], true\n+- LogicalQueryStage Aggregate [l_returnflag#17, l_linestatus#18], [l_returnflag#17, l_linestatus#18, sum(l_quantity#13) AS sum_qty#43, sum(l_extendedprice#14) AS sum_base_price#44, sum((l_extendedprice#14 * (1 - l_discount#15))) AS sum_disc_price#45, sum(((l_extendedprice#14 * (1 - l_discount#15)) * (1 + l_tax#16))) AS sum_charge#46, avg(l_quantity#13) AS avg_qty#47, avg(l_extendedprice#14) AS avg_price#48, avg(l_discount#15) AS avg_disc#49, count(1) AS count_order#50L], HashAggregate(keys=[l_returnflag#17, l_linestatus#18], functions=[sum(l_quantity#13), sum(l_extendedprice#14), sum((l_extendedprice#14 * (1 - l_discount#15))), sum(((l_extendedprice#14 * (1 - l_discount#15)) * (1 + l_tax#16))), avg(l_quantity#13), avg(l_extendedprice#14), avg(l_discount#15), count(1)])\n"},"IM":{"inputSizeInBytes":200736,"inputRowCount":738},"PD":{},"RunningQueryStageSnapshot":{"RunningTasksNum":0,"FinishedTasksNum":0,"FinishedTasksTotalTimeInMs":0.0,"FinishedTasksDistributionInMs":[0.0,0.0,0.0,0.0,0.0]},"Configuration":{"theta_c":[{"spark.executor.cores":"5"},{"spark.executor.memory":"16g"},{"spark.executor.instances":"4"},{"spark.default.parallelism":"40"},{"spark.reducer.maxSizeInFlight":"48m"},{"spark.shuffle.sort.bypassMergeThreshold":"200"},{"spark.shuffle.compress":"true"},{"spark.memory.fraction":"0.6"}],"theta_p":[{"spark.sql.adaptive.advisoryPartitionSizeInBytes":"64MB"},{"spark.sql.adaptive.nonEmptyPartitionRatioForBroadcastJoin":"0.2"},{"spark.sql.adaptive.maxShuffledHashJoinLocalMapThreshold":"0MB"},{"spark.sql.adaptive.autoBroadcastJoinThreshold":"10MB"},{"spark.sql.shuffle.partitions":"200"},{"spark.sql.adaptive.skewJoin.skewedPartitionThresholdInBytes":"256MB"},{"spark.sql.adaptive.skewJoin.skewedPartitionFactor":"5.0"},{"spark.sql.files.maxPartitionBytes":"128MB"},{"spark.sql.files.openCostInBytes":"4MB"}],"theta_s":[{"spark.sql.adaptive.rebalancePartitionsSmallPartitionFactor":"0.2"},{"spark.sql.adaptive.coalescePartitions.minPartitionSize":"1MB"}]}}
